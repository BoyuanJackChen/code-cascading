[
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\nassert solution('12') == '2 1 8'\nassert solution('1') == '1'\nassert solution('6') == '2 1 5 6'\nassert solution('9') == '1 9'\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"2 3\") == \"1 2\"\nassert solution(\"3 4\") == \"1 2\"\nassert solution(\"4 5\") == \"1 2\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5 1 8 6'\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5 1 8 6'\n'''\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == \"5\"\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == \"5\"\nassert solution('''\n8\n1 5\n1 6\n1 7\n1 8\n2 4\n2 5\n2 6\n2 7\n2 8\n3 4\n3 5\n3 6\n3 7\n3 8\n''') == \"8\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 8 6'\nassert solution('4 3') == '1 3 5 6'\n\n-- 3/5 --\n3. print solution\n\n3. \n    1. find all possible edges\n        a) check if already in the path\n        b) add to the set if not\n        c) print\n        d) not in path set\n    2. max \n        a) print\n        b) return\n\n2. \n    a) find all possible edges\n        a) all possible\n        b) all possible but those which have already been found\n        c) all possible but those which have already been found and edges which will be removed\n    2.1)\n        a) for each vertex in the tree, add all the possible edges\n        b) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n    2.2)\n        a) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        b) for each vertex in the tree, add all possible but those which have already been found\n    2.3)\n        a) for each vertex in the tree, add all possible but those which have already been found\n        b) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        c) for each vertex in the tree, add all possible but those which have already been found\n        d) for each vertex in the tree, add all possible but those which have already been found\n        e) find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        f) for each vertex in the tree, add all possible but those which have already been found\n        g) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        h) for each vertex in the tree, add all possible but those which have already been found\n        i) for each vertex in the tree, add all possible but those which have already been found\n        j) for each vertex in the tree, add all possible but those which have already been found\n        k) find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        l) for each vertex in the tree, add all possible but those which have already been found\n        m) for each vertex in the tree, add all possible but those which have already been found\n        n) for each vertex in the tree, add all possible but those which have already been found\n        o) find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        p) for each vertex in the tree, add all possible but those which have already been found\n        q) for each vertex in the tree, add all possible but those which have already been found\n        r) find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n    2.4)\n        a) for each vertex in the tree, add all possible but those which have already been found\n        b) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        c) for each vertex in the tree, add all possible but those which have already been found\n        d) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        e) for each vertex in the tree, add all possible but those which have already been found\n        f) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        g) for each vertex in the tree, add all possible but those which have already been found\n        h) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is in the path set\n            if yes, then add to the union\n            if not, then add to the path set\n        i) for each vertex in the tree, add all possible but those which have already been found\n        j) for each vertex in the tree, find if there is an edge between those vertex and the other.\n            if yes, add the other edge to the set\n            if not, then check if the other is"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\nassert solution('12') == '1 6 8'\nassert solution('30') == '1 2 4 5 6 8'\nassert solution('40') == '4 6 10 12'"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n3 4\") == \"5\\n1 8 6\\n\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n6 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n13 15\\n15 16\\n16 17\\n16 18\\n17 19\\n19 20\\n19 21\\n21 22\\n21 23\\n23 24\\n24 25\\n24 26\\n25 27\\n25 28\\n26 29\\n26 30\\n30 31\\n31 32\\n31 33\\n33 34\\n34 35\\n35 36\\n35 37\\n37 38\\n37 39\\n39 40\\n39 41\\n41 42\\n41 43\\n43 44\\n43 45\\n45 46\\n45 47\\n47 48\\n47 49\\n49 50\\n49 51\\n51 52\\n51 53\\n53 54\\n53 55\\n55 56\\n55 57\\n57 58\\n57 59\\n59 60\\n59 61\\n61 62\\n61 63\\n63 64\\n63 65\\n65 66\\n65 67\\n67 68\\n67 69\\n69 70\\n69 71\\n71 72\\n71 73\\n73 74\\n73 75\\n75 76\\n75 77\\n77 78\\n77 79\\n79 80\\n79 81\\n81 82\\n81 83\\n83 84\\n83 85\\n85 86\\n85 87\\n87 88\\n87 89\\n89 90\\n89 91\\n91 92\\n91 93\\n93 94\\n93 95\\n95 96\\n95 97\\n97 98\\n97 99\\n99 100\\n99 101\\n101 102\\n101 103\\n103 104\\n103 105\\n105 106\\n105 107\\n107 108\\n107 109\\n109 110\\n109 111\\n111 112\\n111 113\\n113 114\\n113 115\\n115 116\\n115 117\\n117 118\\n117 119\\n119 120\\n119 121\\n121 122\\n121 123\\n123 124\\n123 125\\n125 126\\n125 127\\n127 128\\n127 129\\n129 130\\n129 131\\n131 132\\n131 133\\n133 134\\n133 135\\n135 136\\n135 137\\n137 138\\n137 139\\n139 140\\n139 141\\n141 142\\n141 143\\n143 144\\n143 145\\n145 146\\n145 147\\n147 148\\n147 149\\n149 150\\n149 151\\n151 152\\n151 153\\n153 154\\n153 155\\n155 156\\n155 157\\n157 158\\n157 159\\n159 160\\n159 161\\n161 162\\n161 163\\n163 164\\n163 165\\n165 166\\n165 167\\n167 168\\n167 169\\n169 170\\n169 171\\n171 172\\n171 173\\n173 174\\n173 175\\n175 176\\n175 177\\n177 178\\n177 179\\n179 180\\n179 181\\n181 182\\n181 183\\n183 184\\n183 185\\n185 186\\n185 187\\n187 188\\n187 189\\n189 190\\n189 191\\n191 192\\n191 193\\n193 194\\n193 195\\n195 196\\n195 197\\n197 198\\n197 199\\n199 200\\n199 201\\n201 202\\n201 203\\n203 204\\n203 205\\n205 206\\n205 207\\n207 208\\n207 209\\n209 210\\n209 211\\n211 212\\n211 213\\n213 214\\n213 215\\n215 216\\n215 217\\n217 218\\n217 219\\n219 220\\n219 221\\n221 222\\n221 223\\n223 224\\n223 225\\n225 226\\n225 227\\n227 228\\n227 229\\n229 230\\n229 231\\n231 232\\n231 233\\n233 234\\n233 235\\n235 236\\n235 237\\n237 238\\n237 239\\n239 240\\n239 241\\n241 242\\n241 243\\n243 244\\n243 245\\n245 246\\n245 247\\n247 248\\n247 249\\n249 250\\n249 251\\n251 252\\n251 253\\n253 254\\n253 255\\n255 256\\n255 257\\n257 258\\n257 259\\n259 260\\n259 261\\n261 262\\n261 263\\n263 264\\n263 265\\n265 266\\n265 267\\n267 268\\n267 269\\n269 270\\n269 271\\n271 272\\n271 273\\n273 274\\n273 275\\n275 276\\n275 277\\n277 278\\n277 279\\n279 280\\n279 281\\n281 282\\n281 283\\n283 284\\n283 285\\n285 286\\n285 287\\n287 288\\n287 289\\n289 290\\n289 291\\n291 292\\n291 293\\n293 294\\n293 295\\n295 296\\n295 297\\n297 298\\n297 299\\n299 300\\n299 301\\n301 302\\n301 303\\n303 304\\n303 305\\n305 306\\n305 307\\n307 308\\n307 309\\n309 310\\n309 311\\n311 312\\n311 313\\n313 314\\n313 315\\n315 316\\n315 317\\n317 318\\n317 319\\n319 320\\n319 321\\n321 322\\n321 323\\n323 324\\n323 325\\n325 326\\n325 327\\n327 328\\n327 329\\n329 330\\n329 331\\n331 332\\n331 333\\n333 334\\n333 335\\n335 336\\n335 337\\n337 338\\n337 339\\n339 340\\n339 341\\n341 342\\n341 343\\n343 344\\n343 345\\n345 346\\n345 347\\n347 348\\n347 349\\n349 350\\n349 351\\n351 352\\n351 353\\n353 354\\n353 355\\n355"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 1 2 4 8''') == '2 4'\n\nassert solution('''\n6\n1 2 2 2 2 2''') == '2 2'\n\nassert solution('''\n1\n2\n''') == '2'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 2 1 3 4\n''') == '1 3'\nassert solution('''2\n1 3 2\n''') == '1 3'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5\\n') == '20 8\\n'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"20 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"30 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\nassert solution('''\n10\n1 2 4 5 1 2\n''') == '5 1'\nassert solution('''\n5\n1 1 5 1 5\n''') == '1 1'\nassert solution('''\n2\n1 2 1 2\n''') == '1'\nassert solution('''\n5\n1 2 5 2 5\n''') == '2'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2 3\n2 3 4\n3 4\n''') == '2 3"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('5 7') == '5'\nassert solution('3 8 1') == '8'\nassert solution('10 20 10') == '20'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''') == \"24\"\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n''') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\") == '24'\nassert solution(\"5 5 4\") == '56'\nprint(solution('''4 4 4\n1 2 3 4\n5 2 2 2\n7 1 1 4'''))\nassert solution('''5 5 4\n1 2 3 4\n5 2 2 2\n7 1 1 4\n3 8 7 1 2\n8 4 7 1 6\n''') == '56'\nprint(solution('''5 5 4\n1 2 3 4\n5 2 2 2\n7 1 1 4\n3 8 7 1 2\n8 4 7 1 6\n6 9 7 3 5'''))\nassert solution('''5 5 4\n1 2 3 4\n5 2 2 2\n7 1 1 4\n3 8 7 1 2\n8 4 7 1 6\n6 9 7 3 5''') == '42'\nprint(solution('''9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n''') == '24'\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n''') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\nassert solution(\n    \"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\") == \"24\"\nassert solution(\"5 5 4\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 3') == \"24\"\nassert solution('5 5 4') == \"56\"\nassert solution('10 10 4') == \"104\""
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 3') == '24'\nassert solution('5 5 4') == '56'"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('7') == '6'\nassert solution('3') == '1'\nassert solution('4') == 'LLRR'\n\n\n'''"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == 'LLRR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\nassert solution('''1 2 4 3 2\n''') == '4'\nassert solution('''3\n5 4 2\n''') == '2'\nassert solution('''7\n1 3 5 6 5 4 2\n''') == '6'\nassert solution('''8\n1 2 5 7 8 9\n''') == '8'"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == \"4\"\nassert solution(input_data_2) == \"R\"\n\n\n'''"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT_STDIN) == OUTPUT_STDIN\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"6\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"R\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\"\n) == \"4\"\nassert solution(\n    \"7\"\n) == \"6\"\nassert solution(\n    \"3\"\n) == \"1\"\n\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nRLRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nRLLRRR'\nassert solution('3\\n2 2 2') == '1'\nassert solution('4\\n1 2 4 3') == '4'\n\n\n\"\"\"\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"LLRR\"\nassert solution(input()) == \"R\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 4 4 7 4 1\n''') == '3'\nassert solution('''\n5 2 5 2 5\n''') == '3'\nassert solution('''\n3\n2 2 5 2 5\n''') == '3'\nassert solution('''\n-1\n''') == '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 4 4 7 4 1\n''') == '3'\nassert solution('''\n5 2 2 5 2 5\n''') == '3'\nassert solution('''\n4\n1 3 3 7\n''') == '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n5 4 7 2 5''') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 4 7 4 1\\n\") == \"3\"\nassert solution(\"5\\n1 2 3 5 2 5\\n\") == \"3\"\nassert solution(\"6\\n1 2 4 3 5 2 5\\n\") == \"3\"\nassert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n\n6\n1 4 4 7 4 1\n\n''') == '3'\n\nassert solution('''\n\n5\n2 2 5 2 5\n\n''') == '3'\n\nassert solution('''\n\n4\n1 3 3 7\n\n''') == '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4 4 7 4 1') == '3'\nassert solution('5 2 2 5 2 5') == '3'\nassert solution('3 5 2 5 2 5') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 8 7 9\n''') == '3'\n\nassert solution('''\n4\n1 3 2 5\n''') == '3'\n\nassert solution('''\n5\n2 4 5 3 7\n''') == '-1'\n\nassert solution('''\n4\n1 2 5 7\n''') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 4 4 7 4 1\n''') == '3'\n\nassert solution('''\n4\n2 2 5 2 5\n''') == '3'\n\nassert solution('''\n5\n2 2 5 2 5\n''') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 4 4\"\n    \"1 1 3 5\"\n    \"3 1 5 5\"\n) == \"NO\"\n\nassert solution(\n    \"3 3 7 5\"\n    \"0 0 4 6\"\n    \"0 0 7 4\"\n) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 4 4\n1 1 3 5\n3 1 5 5\n''') == 'NO'\nassert solution('''\n3 3 7 5\n0 0 4 6\n0 0 7 4\n''') == 'YES'\nassert solution('''\n5 2 10 5\n3 1 7 6\n8 1 11 7\n''') == 'YES'\nassert solution('''\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n5 2 10 5\n3 1 7 6\n8 1 11 7\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 4 4') == 'NO'\nassert solution('1 1 3 5') == 'YES'\nassert solution('3 1 5 5') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == 'NO'\nassert solution(\"1 1 3 5\") == 'YES'\nassert solution(\"3 1 5 5\") == 'NO'\nassert solution(\"5 2 10 5\") == 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n3 3 7 5\n0 0 4 6\n0 0 7 4\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5 2 10 5\n3 1 7 6\n8 1 11 7\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\") == \"YES\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 2 3\n2 1 1\n1 2 3\n''') == 'NO'\n\nassert solution('''\n3 3 5 5\n0 0 4\n0 0 7\n\n''') == 'YES'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n\n'''"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\nassert solution('10') == '19'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 1 4 5 3\""
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0 2 1'\nassert solution('5') == '0 3 1 2 4'\nassert solution('7') == '0 2 3 4 5 6'\nassert solution('7') == '7 4 2 3 6 5 1'\nassert solution('7') == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3 1 2 4 5'\nassert solution('7') == '7 3 2 1 4 5 6'\nassert solution('7') == '7 3 2 1 4 5 6'\nassert solution('7') == '7 3 2 1 4 5 6'\nassert solution('7') == '7 3 2 1 4 5 6'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4'\nassert solution('''7\n7 4 0 3 0 5 1\n''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\nassert solution('''5\n5 4 3 2 1 0\n''') == '5 3 1 2 4'\nassert solution('''7\n7 4 2 3 6 5 1\n''') == '7 3 2 1 4 5 6'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\nprint(solution('''5\n5 0 0 2 4'''))\nprint(solution('''7\n7 4 0 3 0 5 1'''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2 1 4 5 3\"\nassert solution() == \"2 1 4 5 3\"\nassert solution() == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5 3 1 2 4\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\""
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n5 0 0 2 4\n''') == \"5 3 1 2 4\"\nassert solution('''\n7\n7 0 0 1 4 0 6\n''') == \"7 3 2 1 4 5 6\"\nassert solution('''\n5\n2 1 0 0 0\n''') == \"2 1 4 5 3\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"YES\"\nassert solution(input_2) == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\\n\") == \"YES\"\nassert solution(\"5 2\\n3 2 1 2 3\\n\") == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 2 2 3\n''') == 'YES'\nassert solution('''5 2\n3 2 1 2 3\n''') == 'YES'\nassert solution('''5 2\n2 1 1 2 1\n''') == 'NO'"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"5 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"YES\", \"Test 1\"\nassert solution(\"5 2\") == \"YES\", \"Test 2\"\n\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2 3') == 'YES'\nassert solution('4 2') == 'YES'\nassert solution('3 2 1 2 3') == 'YES'\nassert solution('5 2') == 'NO'\nassert solution('2 1 1 2 1') == 'NO'"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\nassert solution(\"3 2\\n1 2 3\\n\") == \"YES\\n1 1 2 2\\n\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 2 3') == 'YES'\nassert solution('3 2 1 2 3') == 'YES'\n\n\n'''\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n1 2 3\n''') == 'YES'\nassert solution('''\n3 2\n2 1 2 3\n''') == 'YES'\nassert solution('''\n5 2\n3 2 1 2 3\n''') == 'NO'\nassert solution('''\n5 2\n1 1 1 2 1\n''') == 'YES'\nassert solution('''\n3 2\n1 2 3\n''') == 'NO'"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 5 2\n11010100101\n''') == '1'\nassert solution('''\n11 5 1\n11010100101\n''') == '3'"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 1') == '3'\nassert solution('6 5 1') == '3'\nassert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''11 5 2\n11010100101\n''') == \"1\"\nassert solution('''11 5 1\n11010100101\n''') == \"3\""
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1\""
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''11 5 2''') == '1'\nassert solution('''11 5 1''') == '3'"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 1\") == \"2\"\nassert solution(\"5 1 2\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"5 1 4\") == \"5\"\nassert solution(\"5 1 5\") == \"5\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''11 5 2\n11010100101\n''') == '1'\nassert solution('''11 5 1\n11010100101\n''') == '3'\nprint('All test cases are passed.')\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n1\n0''') == 'YES'\n\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'YES'\n\nassert solution('''2\n1\n0''') == 'NO'\n\nassert solution('''3\n2\n0''') == 'NO'\n\nassert solution('''4\n3\n0''') == 'NO'"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('5\\n') == 'YES'\nassert solution('5\\n') == 'NO'\nassert solution('5\\n') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'YES'\nassert solution() == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'YES'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'YES'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3\n1 2 1\n5\n1 2 2 3 2''') == 'YES'\nassert solution('''3\n3\n1 2 1\n5\n1 2 2 3 2''') == 'NO'\nassert solution('''3\n3\n1 2 1\n5\n1 2 2 1\n10\n1 1 2\n4\n1 2 2 1\n10''') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution('''1\n1\n1\n1\n1\n1''') == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution('''1\n1\n1\n1\n1\n1''') == 'NO\\nNO\\nNO\\nNO\\nNO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2''') == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == \"YES\\nYES\\nNO\\nYES\\nNO\""
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'YES'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'YES'\nassert solution('''3\n2\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2''') == 'NO'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'NO'\nassert solution('''5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'NO'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"99999\"\nassert solution(\"4\") == \"99999\"\nassert solution(\"5\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '1553'\nassert solution('5') == '99999'\nassert solution('2') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 5 4 6 6 3 1 9\") == \"1553\"\nassert solution(\"1 2 5 4 6 6 3 1 9\") == \"99999\"\nassert solution(\"2\") == \"22\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '99999'\nassert solution(input()) == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1557'\nassert solution('''5\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999'\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"33\"\nassert solution(\"4\") == \"1557\""
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == \"1557\"\nassert solution(\"\"\"\n4\n1337\n1 2 5 4 6 6 3 1 9\n\"\"\") == \"1557\"\nassert solution(\"\"\"\n5\n11111\n9 8 7 6 5 4 3 2 1\n\"\"\") == \"99999\"\nassert solution(\"\"\"\n2\n33\n1 1 1 1 1 1 1 1 1\n\"\"\") == \"33\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n12 34') == '1\\n1 1 3\\n1'\nassert solution('4\\n1 2 3') == '2\\n3 1 2\\n1'\nassert solution('4\\n3 3 3') == '1\\n1 3 3\\n1'\nassert solution('5\\n10\\n30\\n50\\n80\\n100') == '4\\n6 2 3\\n3\\n4 4 4\\n5\\n4 8 16\\n4\\n4 4 4\\n5\\n4 8 16\\n4\\n4 4 4'\nassert solution('5\\n10\\n30\\n50\\n80\\n100') == '3\\n2 2 2\\n2\\n2 2 2\\n5\\n4 8 16\\n4\\n4 4 4\\n5\\n4 8 16\\n4\\n4 4 4'\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"1 1 3\"\nassert solution(\"5 10 15\") == \"1 1 3\"\nassert solution(\"15 18 21\") == \"1 1 3\"\nassert solution(\"100 100 101\") == \"1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"1 1 3\"\nassert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"1 1 3\"\nassert solution(\"5 10 15\") == \"1 1 3\"\nassert solution(\"15 18 21\") == \"1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n2 3\n123 321\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == '3 1 3 2 2 2'\nassert solution(\n\"\"\"\n3\n2 3\n123 321\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == '2 2 3 1 1 2'\nassert solution(\n\"\"\"\n3\n1 2\n123 321\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '1 1 3'\nassert solution('''\n3 6 9\n19 23 76\n7 35 84\n7 42 96\n''') == '4 8 16'\nassert solution('''\n1 4 9\n14 30 27\n17 30 59\n17 30 64\n''') == '8'\nassert solution('''\n2 9 9\n23 32 19\n17 32 99\n17 32 96\n''') == '3'\nassert solution('''\n4 7 9\n35 18 25\n36 18 66\n36 18 63\n''') == '1 4 8'\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1 1 3'\nassert solution('123 321 456') == '102'\nassert solution('5 10 15') == '4 8 16'\nassert solution('15 18 21') == '1 1 3'\nassert solution('100 100 101') == '7'\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '1 1 3'\nassert solution('123 321 456') == '102'\nassert solution('5 10 15') == '4'\nassert solution('15 18 21') == '1 2 3'\nassert solution('100 100 101') == '7'\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 4\n5 10\n1 2 3\n''') == '1 1 3'\nassert solution('''\n10\n1 2\n10 10\n4 4\n3 1\n1 1\n1 1\n1 1\n''') == '3 4'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 3 7\n''') == '2'\n\nassert solution('''2\n1 100000\n''') == '0'\n\nassert solution('''5\n1 2 3 4 5\n''') == '1'"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('1 1 2 2') == '1'\nassert solution('1 100000 1') == '0'\nassert solution('3') == '2'"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 3 7\\n') == '2'\nassert solution('2\\n1 100000') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 2 5 4\n''') == '1'\nassert solution('''2\n1 100000\n''') == '0'\nassert solution('''4\n1 3 3 7\n''') == '2'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 3 7') == \"2\"\nassert solution('2\\n1 100000') == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INP) == OUT\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"9\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 5\\n\") == \"1\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"2\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3 '\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(input_small) == \"1 2 2 1 1 0 4 3 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"1 2 3 0 3\"\nassert solution(\"3 2\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 2 3 0 3\"\nassert solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 2\\n1 3 1\\n1 5 1\"\n    ) == \"1 2 3 0 3\"\n\nassert solution(\n    \"3 2\\n1 3 1\\n1 2 1\"\n    ) == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_str) == \"1 2 3 0 3\", f\"input test failed: {input_str}\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 1\") == \"1 2 2 1\"\nassert solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"1 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"10 3\") == \"1 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 3 1\n1 2 1\n''') == '-1'\nassert solution('''5 2\n1 3 1\n1 5 1\n''') == '2 2 3 0 3'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == \"7\"\nassert solution(input_2) == \"0\"\nassert solution(input_3) == \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''42 42''') == '0'\nassert solution('''48 72''') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n'''"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == \"a\"\nassert solution('2') == \"ab\"\nassert solution('3') == \"aba\"\nassert solution('4') == \"ababababa\""
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\naba') == 'ababababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\naaa\n\n''') == 'aaa'\n\nassert solution('''\n4\naaa\n\n''') == 'aaa'\n\nassert solution('''\n5\naaa\n\n''') == 'aaa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"Input\") == \"Input\"\nassert solution(\"Hello\") == \"Hello\"\nassert solution(\"\") == \"\"\nassert solution(\"cat\") == \"cat\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\naba') == 'ababababa'\n\nassert solution('3 2\\ncat') == 'catcat'\n\nassert solution('3 4\\nab') == 'abababababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4\naba\n''') == 'ababababa'\nassert solution('''3 2\ncat\n''') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nca\n\n4\ncad\n\n2\ncacd\n\n3\ncadb\n\n4\ncadc\n\n''') == 'cadc'\nassert solution('''8\ncad\n\n5\ncadad\n\n4\ncadb\n\n2\ncadc\n\n3\ncadcb\n\n4\ncadcbc\n\n5\ncadcbcd\n\n''') == 'cadcbcd'\nassert solution('''9\ncad\n\n5\ncadada\n\n4\ncadbbb\n\n2\ncadcad\n\n3\ncadcb\n\n5\ncadcbda\n\n''') == 'cadcbda'\nassert solution('''5\ncad\n\n3\ncabc\n\n4\ncadb\n\n2\ncadc\n\n''') == 'cadc'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"ababababa\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"ababababa\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"ababababa\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11\") == \"ababababa\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\naba\") == \"abababa\"\nassert solution(\"1 5\\nabcabcabc\") == \"abcabcabcabc\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\naba') == 'ababababa'\nassert solution('3 2\\ncat') == 'catcat'\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n5\n2 5 1 2 2\n''') == '3\\n4 1 5\\n'\nassert solution('''4\n8 3 5 2\n''') == '2\\n1 4\\n'\nassert solution('''5\n2 1 2 4 3\n''') == '0\\n'"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"5\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\"\nassert solution(\"4\\n8 3 5 2\") == \"2\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n8 5 1 2 2') == '3'\nassert solution('4\\n8 3 5 2') == '2'\nassert solution('5\\n2 1 2 4 3') == '0'"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n5\n2''') == '1'\nassert solution('''4\n2\n1 2\n3''') == '2'\nassert solution('''5\n3\n3\n5\n2''') == '0'"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n1 4 \n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n1 4\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 5 1 2 2\\n') == '3\\n1 4'\nassert solution('4\\n8 3 5 2\\n') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3\\n') == '0'\n\n\n\n'''\n\nimport sys"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\nassert solution('''\n5\n2 5 1 2 2\n''') == \"3\"\nassert solution('''\n4\n8 3 5 2\n''') == \"2\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n asdf\") == \"4\"\nassert solution(\"5 6\\n asdf\") == -1\nassert solution(\"5 7\\n asdf\") == -1\nassert solution(\"10 100\\n ajihiushda\") == \"233\""
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == -1\nassert solution(\"a\") == -1\nassert solution(\"ab\") == -1\nassert solution(\"abcd\") == -1\nassert solution(\"aabcd\") == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == input()\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"15\"\nassert solution(\"10 100\") == \"233\"\nassert solution(\"10 1\") == \"-1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 1\") == \"1\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"10 100\") == \"233\""
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 6\") == \"1\"\nassert solution(\"1 7\") == \"1\"\nassert solution(\"1 8\") == \"1\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"10 100\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"233\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"10 100\") == \"233\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES'\nassert solution('''3 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'NO'\nassert solution('''4 4 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'NO'\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES'\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES'\nassert solution('''3 4 3\n1 2\n1 4\n2 3\n3 4\n''') == 'NO'\nassert solution('''5 3 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES'\nassert solution('''6 5 3\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n''') == 'NO'\n'''"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 1') == 'YES'\nassert solution('4 5 3') == 'YES'\nassert solution('4 4 3') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES'\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES'\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\n''') == 'YES'\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\n''') == 'YES'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n\n\n\"\"\"\n\nfrom collections import deque\nimport math"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\") == \"YES\"\nassert solution(\"4 5 3\") == \"YES\"\nassert solution(\"4 4 3\") == \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES'\n\nprint(solution())\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 1') == 'YES'\nassert solution('4 5 3') == 'YES'\nassert solution('4 4 3') == 'NO'"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"10:00\n11:00\"\"\") == \"10:30\"\nassert solution(\"\"\"11:10\n11:12\"\"\") == \"11:11\"\nassert solution(\"\"\"01:02\n03:02\"\"\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\""
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10:00\\n11:00') == '10:30'\nassert solution('11:10\\n11:12') == '11:11'\nassert solution('01:02\\n03:02') == '02:02'\nassert solution('15:50\\n11:00') == '15:40'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\nassert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"10:00\\n11:00\\n\"\n) == \"10:30\"\nassert solution(\n    \"11:10\\n11:12\\n\"\n) == \"11:11\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"7\") == \"6\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"9\") == \"8\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == '1'\nassert solution('') == '1'\nassert solution('42') == '6'\n'''\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nassert solution('5') == '5'"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\nassert solution(__import__('sys').stdin.read()) == '2'\nassert solution(__import__('sys').stdin.read()) == '3'\nassert solution(__import__('sys').stdin.read()) == '4'\nassert solution(__import__('sys').stdin.read()) == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 6\\n1 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\") == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nprint(solution())\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(test) == \"1\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 3\n2 6\n0 4\n3 3\n''') == '1'\n\nassert solution('''\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2'\n\nassert solution('''\n3\n4 5\n1 2\n9 20\n\n''') == '0'\n\nassert solution('''\n2\n3 10\n1 5\n\n''') == '7'\n\nassert solution('''\n1\n2 6\n1 3\n0 4\n3 3\n\n''') == '1'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3') == '1'\nassert solution('5\\n2 6') == '2'\nassert solution('3\\n4 5') == '0'\nassert solution('2\\n3 10') == '7'\nassert solution('2\\n3 5') == '2'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"1\"\nassert solution(input_) == \"2\"\nassert solution(input_) == \"7\"\nassert solution(input_) == \"3\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"7\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n2 1 1 2 5\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n4 5 3\n\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n2\n10 10\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\n1 1\n\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n5\n2 1 1 2 5\n\n\"\"\") == \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('2') == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n\nstdin = \"\"\"6\n3\n5\n4\n3\n3\n4\n5\n3\"\"\"\n\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n4 5 3\n\n''') == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n5 1 2 3 5\n''') == 'YES'\nassert solution('''\n2\n4 5 3\n''') == 'NO'\nassert solution('''\n5\n4 2 1 2 5\n''') == 'YES'\nassert solution('''\n4\n5 5 2 2 5\n''') == 'NO'\n''')\n\n\nsolution('''\n10\n3 2 4 1 2 5 1 2 5\n''')\n\n\nsolution('''\n8\n4 1 2 3 5 4 5 3\n''')"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == \"NO\"\nassert solution('3') == \"NO\"\nassert solution('4') == \"YES\"\nassert solution('5') == \"YES\"\nassert solution('6') == \"NO\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\nasdf\n\n''') == \"4\"\nassert solution('''\n5 6\naaaaa\n\n''') == \"15\"\nassert solution('''\n5 7\naaaaa\n\n''') == \"233\"\nassert solution('''\n10 100\najihiushda\n\n''') == \"233\"\nassert solution('''\n10 100\najihiushda\n\n''') == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 100\najihiushda\n''') == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 100\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('asdf') == '4'\nassert solution('aaaaa') == '233'\nassert solution('hello') == '-1'"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"10 100\") == \"233\"\nassert solution(\"10 100\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(t1) == 4\nassert solution(t2) == -1\nassert solution(t3) == 15"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"10 100\") == \"233\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"-1\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == 4\nassert solution(\"5 7\") == -1\nassert solution(\"10 100\") == 233"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2, 1, 1]) == '4'\nassert solution([3, 2, 2]) == '7'\nassert solution([1, 100, 1]) == '3'"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 1, 1]) == \"4\"\nassert solution([3, 2, 2]) == \"7\"\nassert solution([1, 100, 1]) == \"3\"\nassert solution([30, 20, 10]) == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\n'''"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"5 4\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 2\n''') == 'YES'\nassert solution('''5 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 2\n''') == 'YES'\nassert solution('''1 1\n1 1\n1 1\n1 1\n''') == 'NO'\nassert solution('''5 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 2\n''') == 'NO'\nassert solution('''5 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 2\n''') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 5') == 'NO'\nassert solution('10 10') == 'YES'\nassert solution('10 10') == 'NO'\nassert solution('5 5') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"YES\", \"Small\"\nassert solution(\"5 5\") == \"YES\", \"Big\"\nassert solution(\"1 1\") == \"NO\", \"Snake\"\nassert solution(\"1 1\") == \"NO\", \"Snake\"\nassert solution(\"5 5\") == \"YES\", \"Small\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1''') == 'YES'\nassert solution('''5 5\n1 5\n5 4\n2 4\n1 1\n5 3\n1 1\n5 4\n1 1\n1 5\n1 1\n2 4\n1 1''') == 'YES'\nassert solution('''3 3\n1 1\n1 2\n1 1\n2 1\n1 2\n1 1\n1 1\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n1 1\n2 2\n1 1\n1 1\n1 1\n2 1\n1 1\n2 1\n1 1\n1 2\n1 1\n1 1\n1 1\n1 2\n1 1''') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2''') == 'YES', \"Before\"\n\nassert solution('''2 5\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 2\n1 2''') == 'NO', \"Before\"\n\nassert solution('''4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 2\n1 2''') == 'NO', \"Before\"\n\n\n\n'''\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == 'YES'\nassert solution('''6\n2 3\n1 2\n4 5\n5 6\n7 8\n1 2\n5 7\n''') == 'YES'\nassert solution('''6\n1 3\n5 6\n2 4\n4 5\n7 8\n1 2\n5 7\n''') == 'NO'\nassert solution('''8\n3 4\n5 6\n5 7\n7 8\n1 2\n5 7\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == 'YES'\nassert solution('''8\n4 5\n5 6\n2 4\n4 5\n7 8\n1 2\n5 7\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == 'NO'\n'''\n    3 3\n    1 2\n    5 6\n    5 7\n    7 4\n    8 9\n    9 8\n    2 5\n    1 1\n    1 1\n    1 1\n    3 4\n    1 2\n    1 1\n    1 1\n    1 1\n    2 2\n    2 2\n    1 100\n    10 10\n    10 10\n    1 2\n    4 5\n    8 4\n    2 2\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n'''\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n1 1\\n1 1\\n\") == \"YES\"\nassert solution(\"1 1\\n1 1\\n1 1\\n\") == \"NO\"\nassert solution(\"1 1\\n1 2\\n1 1\\n\") == \"NO\"\nassert solution(\"1 1\\n1 1\\n1 2\\n\") == \"YES\"\nassert solution(\"1 2\\n1 1\\n1 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '1'\nassert solution('3\\n') == '0'\nassert solution('5\\n') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5''') == '1'\nassert solution('''6''') == '1'\nassert solution('''7''') == '1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n(()))\n''') == 5\nassert solution('''\n()()())\n''') == 4\nassert solution('''\n()()()\n''') == 0\nassert solution('''\n)\n''') == 0\nassert solution('''\n(\n)\n''') == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n()))()\n''') == \"5\"\nassert solution('''\n3\n(()\n\n''') == \"4\"\nassert solution('''\n2\n(((\n\n''') == \"0\"\nassert solution('''\n4\n(()\n\n''') == \"0\"\nassert solution('''\n1\n(\n\n''') == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\"\n) == \"5\"\nassert solution(\n    \"3\"\n) == \"4\"\nassert solution(\n    \"2\"\n) == \"0\"\nassert solution(\n    \"7\"\n) == \"4\"\nassert solution(\n    \"8\"\n) == \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n(())\n''') == '5'\nassert solution('''3\n(()\n\n''') == '4'\nassert solution('''2\n(((\n\n''') == '0'\n\nassert solution('''5\n())\n''') == '5'\nassert solution('''2\n((()\n\n''') == '4'"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '4'\nassert solution('2') == '0'\nassert solution('1') == '1'"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n()))()\n\n''') == '5'\nassert solution('''3\n(()\n\n''') == '4'\nassert solution('''2\n(((\n\n''') == '0'\nassert solution('''2\n(((\n\n''') == '1'\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == '5'\nassert solution(\"3\") == '4'\nassert solution(\"2\") == '0'\nassert solution(\"2\") == '0'\nassert solution(\"2\") == '0'\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '5'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('50000') == '2'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\n'''"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '-1'\nassert solution('5071') == '4'\nassert solution('123456789') == '-1'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1230\") == \"1\"\nassert solution(\"2575\") == \"3\"\nassert solution(\"1230\") == \"1\"\nassert solution(\"1241367\") == \"1\""
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('8') == '1'\nassert solution('9') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()\n\"\"\"\n\nfrom itertools import combinations, permutations\n\nN = int(input())\nS = input()\n\nres = float('inf')\nfor i in range(1, N + 1):\n    tmp = 0\n    for c in combinations(S, i):\n        tmp += 1\n    if tmp < res:\n        res = tmp\n\nprint(res)\n\nfor i in range(1, N + 1):\n    tmp = 0\n    for c in permutations(S, i):\n        tmp += 1\n    if tmp < res:\n        res = tmp\n\nprint(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == str(2)\nassert solution(\"\") == str(0)\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nbbc') == '1\\n1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n'\nassert solution('6\\nbaacc') == '2\\n1 2 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n'\nassert solution('3\\nabc') == '1\\n1 1\\n1 1\\n1 1\\n'\nassert solution('8\\nabccc') == '2\\n1 2 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n'\nassert solution('5\\nabcdefghi') == '2\\n1 2 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('8') == '1 2 1 2 1 2 1 2 1'\nassert solution('9') == '2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nabcd\") == \"1\\n1 1 1 1 1\"\nassert solution(\"4\\nabcd\") == \"2\\n1 1 1 1 1\"\nassert solution(\"1\\nabcd\") == \"2\\n1 1 1 1 1\"\nassert solution(\"8\\nabcd\") == \"2\\n1 1 1 1 1 1 1 1\"\nassert solution(\"7\\nabcde\") == \"3\\n1 1 1 1 1 2 3\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\naba') == '1 1 1 1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8\naaabbcbb\n''') == '2'\nassert solution('''7\nabcdedc\n''') == '3'\nassert solution('''6\nabcdefghi\n''') == '1'\nassert solution('''5\nabcd\n''') == '1'\nassert solution('''4\nabcd\n''') == '2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\nabacbecfd') == '2\\n
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('1') == 'NO'\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\na\naba\nabacaba\nba\naba\n\n''') == 'YES'\nassert solution('''3\nqwerty\nqwerty\nqwerty\n\n''') == 'NO'\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES', 'First'\nassert solution('3') == 'NO'\n\n\n\n'''\n\nimport sys\n\nnum_strs = int(input())\ninput_strs = input()\ninput_strs = input_strs.split(' ')\n\nres = 'NO'\n\nfor str in input_strs:\n    res = 'YES' if input_strs.count(str) < num_strs else res\n\nprint(res)\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == \"YES\", \"5\"\nassert solution('3') == \"NO\", \"3\"\nassert solution('3') == \"YES\", \"3\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 100') == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 4\n4 2 3 1 5 1 6 4\n''') == '5'\nassert solution('''5 2\n3 1 2 1 3\n''') == '0'\nassert solution('''5 100\n12 34 55 43 21\n''') == '5'\nprint('\"Run\" is good. Great job, Pesho.')"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5, 2, 3, 1, 5, 1, 6, 4]) == 5\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '5'\nassert solution('8 4') == '5'\nassert solution('5 100') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 4\n4 2 3 1 5 1 6 4\n''') == '5'\nassert solution('''5 2\n3 1 2 1 3\n''') == '0'\nassert solution('''5 100\n12 34 55 43 21\n''') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 5\n\n\"\"\"\n\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"8 4\") == \"5\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '12'\nassert solution(input()) == '14'\nassert solution(input()) == '14'\nassert solution(input()) == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\nassert solution('9 3') == '14'\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 9\") == \"14\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n\") == \"12\"\nassert solution(\"3 9\\n\") == \"14\"\nassert solution(\"9 3\\n\") == \"14\"\nassert solution(\"3 6\\n\") == \"12\"\nassert solution(\"506 2708\\n\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n''') == '12'\nassert solution('''3 9\n''') == '14'\nassert solution('''9 3\n''') == '14'\nassert solution('''3 6\n''') == '12'\nassert solution('''506 2708\n''') == '3218'\n\n\n\n\"\"\"\n\nfor t in range(int(input())):\n    n, m = map(int, input().split())\n    if m % 2!= 0:\n        print(0)\n        continue\n    if n * m > 50 * 100:\n        print(0)\n        continue\n    ans = 1 + (n - 1) + (m - 1)\n    for k in range(1, m // 2 + 1):\n        ans = max(ans, k + (n - 1 - k) + (m - 1 - k) + 1)\n    print(ans)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n''') == '12'\nassert solution('''\n10 10\n''') == '20'\nassert solution('''\n9 9\n''') == '18'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == \"NO\"\nassert solution('9') == \"YES\"\nassert solution('7') == \"NO\"\nassert solution('5') == \"YES\"\nassert solution('4') == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"9\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == 'YES'\nassert solution('6') == 'NO'\nassert solution('5') == 'YES'\nassert solution('4') == 'NO'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nabc\n\n1 2\n1 3\n2 4''') == 'YES'\nassert solution('''3\nbc\n\n1 2\n1 3\n2 4''') == 'NO'\nassert solution('''7\na\n\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8''') == 'YES'\nassert solution('''7\na\n\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8''') == 'NO'\nassert solution('''7\na\n\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8''') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n10\naac\n\n''') == 'YES'\nassert solution(\n'''\n2\naac\n\n''') == 'YES'\nassert solution(\n'''\n3\naac\n\n''') == 'NO'\nassert solution(\n'''\n9\nabcdedc\n\n''') == 'YES'\nassert solution(\n'''\n5\nabcde\n\n''') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\na\n''') == 'YES'\nassert solution('''9\na\n''') == 'YES'\nassert solution('''7\na\n''') == 'NO'\nassert solution('''6\naa\n''') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"NO\"\nassert solution(\"11\") == \"YES\"\nassert solution(\"12\") == \"YES\"\nassert solution(\"13\") == \"YES\"\nassert solution(\"14\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == 'NO'\nassert solution('9') == 'NO'\nassert solution('7') == 'NO'\nassert solution('5') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"NO\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 2\") == \"25\"\nassert solution(\"3 3\") == \"75\"\nassert solution(\"4 4\") == \"50\"\nassert solution(\"5 5\") == \"35\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"1 2\") == \"25\"\nassert solution(\"2 3\") == \"25\"\nassert solution(\"2 2.1\") == \"25\"\nassert solution(\"2 3.1\") == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2\"\n    ) == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '25'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '25'\nassert solution('4 5') == '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"10 10\") == \"25\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n''') == '25'\nassert solution('''3 4\n''') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n''') == '25'\nassert solution('''\n10 2\n''') == '2.5'\nassert solution('''\n1 5\n''') == '1'\nassert solution('''\n0 2\n''') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '25'\nassert solution('4 2') == '-1'\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\\n1 2 3 4 5 6 7 8 9\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('8 3') == 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n5\n4\n1 2 3 4\n1 2\n1''') == 'YES'\nassert solution('''5\n6\n2\n1 1\n1 1\n1\n3\n3\n3\n3\n4\n4''') == 'YES'\nassert solution('''8\n2\n1\n5\n8\n5\n4\n4\n5\n5''') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 6\") == \"YES\", \"6 6\"\nassert solution(\"9 4\") == \"NO\", \"9 4\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n26 6\n''') == \"YES\"\nassert solution('''\n8 3\n''') == \"NO\"\nassert solution('''\n1 1\n''') == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"9 4\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 6\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"9 4\") == \"YES\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '3'\nassert solution('3 20') == '5'\nassert solution('10 -2') == '8'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"3\"\nassert solution(\"5 20\") == \"5\"\nassert solution(\"5 20\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"3 2\\n300 -300\\n1 299\\n1 123\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n''') == '3'\nassert solution('''\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n''') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '3'\nassert solution('5 20') == '5'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\n\n'''"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == \"5\"\nassert solution('''3 2\n300 -300\n1 299\n1 123''') == \"3\"\nassert solution('''3 5\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 20') == '5'\nassert solution('3 4') == '3'\nassert solution('3 2') == '3'\nassert solution('6 4') == '2'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"5\"\nassert solution(\"3 2\") == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n4 6\n10 -2\n8 -1\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n10 0\n-2 -4\n1 5\n-3 -3\n-4 -2\n-1 3\n-5 -2\n4 -2\n-2 3\n-3 1\n3 -1\n-1 2\n-2 -3\n-1 -2\n2 2\n-3 2\n-1 -4\n1 -1\n2 -2\n-3 4\n4 -4\n4 -2\n4 -2\n-1 -1\n-1 -1\n-2 -4\n-1 4\n-2 -2\n1 4\n\"\"\") == \"9\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n8 8 8 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\\n\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    1 8 8 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 8 8 1\n    ''') == 'YES'\n\n''')\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"NO\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'NO', solution('3')\nassert solution('4') == 'YES', solution('4')\nassert solution('5') == 'YES', solution('5')\nassert solution('6') == 'YES', solution('6')\nassert solution('7') == 'YES', solution('7')\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'NO'\nassert solution('4') == 'YES'"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\nassert solution('''\n1 1 1 1 1 3 3 3 3\n''') == \"YES\"\nassert solution('''\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n''') == \"NO\"\n''')\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"10\") == \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES'\nassert solution() == 'YES'\nassert solution() == 'NO'\nassert solution() == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 8 8 1 2 2 2 2 2 2 2 2 2 1 8 8 1\n''') == 'YES', \"Testing\"\n\nassert solution('''\n3\n1 1 1 1 1 3 3 3 3\n''') == 'YES', \"Testing\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"2 -2\") == \"YES\"\nassert solution(\"10 -2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n5 -2\n5 -3\n1 3\n''') == 'YES'\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''\n3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n4 6\\n10 -2\\n8 -1\\n\") == \"YES\"\nassert solution(\"2 5\\n5 -3\\n5 -2\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\", solution('')"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''\n4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''\n4 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n\n''') == 'YES'\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n\n''') == 'YES'\nassert solution('''\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\n''') == 'YES'\n\nassert solution('''\n3 10\n10 0\n10 -10\n30 0\n\n''') == 'NO'\n\n''') == 'NO'\n\nassert solution('''\n3 4\n4 6\n10 -2\n8 -1\n\n''') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\n\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\n\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0''') == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 3 2\n1 2 1\n''') == 'YES\\n0 1 0 2 2 0 3 \n\nassert solution('''10 1 11\n1\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 1 \n\nassert solution('''10 1 5\n2\n''') == 'YES\\n0 0 0 0 1 1 0 0 0 0 "
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"7 3 2\\n\"\n    \"1 2 1\\n\") == \"YES\\n\"\n\nassert solution(\n    \"10 1 11\\n\"\n    \"1\\n\") == \"YES\\n\"\n\nassert solution(\n    \"10 1 5\\n\"\n    \"2\\n\") == \"YES\\n\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 3 2\n1 2 1\n''') == 'YES\\n0 1 0 2 2 0 3'\n\nassert solution('''\n10 1 11\n1\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\n\nassert solution('''\n10 1 5\n2\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\n\nassert solution('''\n10 10\n10\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 0 0 1'\n\nassert solution('''\n6 6\n6\n''') == 'YES\\n0 0 0 0 0 0 1'"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 3 2\n1 2 1\n''') == 'YES'\nassert solution('''10 1 11\n1\n''') == 'YES'\nassert solution('''10 1 5\n2\n''') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(test_one()) == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution(test_two()) == 'YES\\n0 0 0 0 0 0 0 0 0 1\\n'\nassert solution(test_three()) == 'YES\\n0 0 0 0 0 0 0 0 0 0 1\\n'\nassert solution(test_four()) == 'YES\\n0 0 0 0 1 1 0 0 0 0 2\\n'\nassert solution(test_five()) == 'YES\\n0 0 0 0 0 0 0 0 0 0 1\\n'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == 'YES'\nassert solution('7 3 2') == 'YES'\nassert solution('10 1 11') == 'YES'\nassert solution('10 1 5') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_1) == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution(input_2) == 'YES\\n0 0 0 0 0 0 0 0 0 1\\n'\nassert solution(input_3) == 'YES\\n0 0 0 0 1 1 0 0 0 0 2\\n'"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 3 2\n1 2 1\n''') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('''10 1 11\n1\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 1 \nassert solution('''10 1 5\n2\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1 \n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\\n\"\nassert solution(\"10 1 5\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\\n\""
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"asdfasdf\") == \"fasd\"\nassert solution(\"abcde\") == \"c\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('baaba') == 3, 'Wrong answer'\nassert solution('bbaba') == 3, 'Wrong answer'\nassert solution('abcde') == 0, 'Wrong answer'\nassert solution('abcde') == 0, 'Wrong answer'\nassert solution('asdfasdf') == 3, 'Wrong answer'\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nbbaba\nbb\n\n''') == 3, 'Easy'\nassert solution('''\nbaaba\nab\n\n''') == 2, 'Easy'\n\nassert solution('''\nabcde\nabcde\n\n''') == 0, 'Easy'\nassert solution('''\nasdfasdf\nfasd\n\n''') == 3, 'Easy'\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('fasd') == 3"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 3"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"asdfasdf\") == \"asdf\"\nassert solution(\"baaba\") == \"ba\"\nassert solution(\"bbaba\") == \"bb\"\nassert solution(\"ab\") == \"a\"\n\n'''\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"bbaba\"\n) == 3, f\"Wrong answer for input 'bbaba': expected 3, got {solution('bbaba')}\"\nassert solution(\n    \"bb\"\n) == 2, f\"Wrong answer for input 'bb': expected 2, got {solution('bb')}\"\nassert solution(\n    \"aaba\"\n) == 0, f\"Wrong answer for input 'aaba': expected 0, got {solution('aaba')}\"\nassert solution(\n    \"abcde\"\n) == 0, f\"Wrong answer for input 'abcde': expected 0, got {solution('abcde')}\""
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('fasd') == 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2.572479''') == '3 2'\nassert solution('''4.024922''') == '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\n\n\"\"\"\nimport math"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(test_1) == test_1_expected\nassert solution(test_2) == test_2_expected\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1.200000''') == '3 2'\nassert solution('''2.572479''') == '10 3'\nassert solution('''4.024922''') == '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\""
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n'''"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nassert solution('-1.572479') == '10 3'\nassert solution('-4.024922') == '9 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"3 2\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 2 3') == 'NO'\nassert solution('8 5 3') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"NO\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"NO\"\nassert solution(\"6 2 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 3\n2 1\n4 1\n1 2\n5 2\n2 6''') == 'YES'\nassert solution('''6 2 3\n3 1\n4 1\n1 2\n5 2\n2 6''') == 'NO'"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 5 3') == 'YES'\nassert solution('10 8 3') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3 3\n''') == 'YES'\nassert solution('''\n6 2 3\n''') == 'NO'\nassert solution('''\n10 4 3\n''') == 'YES'\nassert solution('''\n10 5 3\n''') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 5 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 2 3') == 'NO'\nassert solution('8 5 3') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 2 3') == 'YES'\nassert solution('8 5 3') == 'YES'\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input().split()) == '1100'\nprint(solution(input().split()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == \"101\"\nassert solution(\"3 3 3\") == \"101100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 1''') == '1100'\nassert solution('''3 3 3''') == '101100'\nassert solution('''5 3 6''') == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"10 3 3\") == \"1011000110011\""
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\") == \"1100\", \"Should be 1100\"\nassert solution(\"3 3 3\") == \"101100\", \"Should be 101100\"\nassert solution(\"5 3 6\") == \"01010100\", \"Should be 01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2 1\n''') == '1100'\nassert solution('''\n3 3 3\n''') == '101100'\nassert solution('''\n5 3 6\n''') == '01010100'\nprint('TEST PASSED')\n\n\n\nimport sys\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"a\") == \"NO\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"ac\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\nab\nbc\n\n''') == \"acbbac\"\nassert solution('''\n1\ncb\nac\n\n''') == \"cacbacbab\"\nassert solution('''\n2\naa\nbc\n\n''') == \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('1') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nab\nbc\n\n''') == \"NO\"\n\nassert solution('''\n3\naa\nbc\n\n''') == \"YES\"\n\nassert solution('''\n1\ncb\nac\n\n''') == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\nab\\nbc') == 'acbbac', solution('2\\nab\\nbc')\nassert solution('3\\naa\\nbc') == 'cacbacbab', solution('3\\naa\\nbc')"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n-2 1\n\"\"\") == \"3 1 2\"\n\nassert solution(\"\"\"\n5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n4\n-1 2 2\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 1 1 1\n''') == '1 2 3 4 5'\nassert solution('''\n4\n-1 2 2\n''') == '-1'\nassert solution('''\n3\n-1 1\n''') == '1 2 3'\nassert solution('''\n4\n-1 2 2\n''') == '-1'\nassert solution('''\n2\n1 1\n''') == '1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3 1 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"5\") == \"1 2 3 4 5\""
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('5') == '1 2 3 4 5'\nassert solution('4') == '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 2 3 4 5'\nassert solution('6') == '1 2 3 4 5 6'\nassert solution('7') == '1 2 3 4 5 6 7'\nassert solution('8') == '1 2 3 4 5 6 7 8'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1 2'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3 1 2\"\nassert solution(\"5\") == \"1 1 1 1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 2 3 4 5'\nassert solution('6') == '1 2 3 4 5 6'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n''') == '1', \"First example\"\nassert solution('''5\n2 2 2 3 3\n''') == '2', \"Second example\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2 2 2\n''') == '1'\nassert solution('''5\n2 2 2 3 3\n''') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('5 2 2 3 3') == '2'\n\n'''\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open('input.txt', 'r').read()) == '1', \"Not quite...\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 2 3 3\\n') == '2'\nassert solution('10\\n1 1 1 1 1 1 1\\n') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('10') == '5'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\n2\n2 1\n\n3\n3 2 1\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 2 2 3\n\n2\n2 1\n\n3\n3 2 1\n\n\"\"\") == \"2\""
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\""
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '5'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"5\") == \"10\"\nassert solution(\"10\") == \"50\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"10\") == \"5\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == '5'\nassert solution(\"10\\n\") == '5'\nassert solution(\"1\\n\") == '5'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('10') == '5'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"10\"\n\n\"\"\"\nimport sys\n\nimport math\nimport queue\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '5\\n'\nassert solution('2\\n') == '4\\n'\nassert solution('3\\n') == '4\\n'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"5\\n\"\nassert solution(\"2\\n\") == \"2\\n\"\nassert solution(\"10\\n\") == \"10\\n\""
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0 1'\nassert solution('15') == '0 15'\nassert solution('319') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 5 5\n5 5 5\n''') == '0 1'\nassert solution('''\n15\n5 5 5\n5 5 5\n''') == '0 15'\nassert solution('''\n319\n10 53 256\n182 103 34\n''') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"0 1\"\nassert solution(input()) == \"0 15\"\nassert solution(input()) == \"22 334\"\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0 1'\nassert solution('15') == '0 15'\nassert solution('319') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0 1'\nassert solution('15') == '0 15'\nassert solution('3') == '3 3'\nassert solution('319') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '0 1'\nassert solution('3') == '0 1'\nassert solution('4') == '0 1'\nassert solution('5') == '0 1'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"15\") == \"0 15\"\nassert solution(\"3\") == \"3 3\"\nassert solution(\"319\") == \"119 226\""
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '0 1'\nassert solution('3') == '0 1'\nassert solution('4') == '0 1'\nassert solution('5') == '0 1'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 1 1\n1 1 0\n''') == '0 1'\nassert solution('''\n15\n5 5 5\n5 5 5\n''') == '0 15'\nassert solution('''\n319\n10 53 256\n182 103 34\n''') == '119 226'"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1 1 1\") == \"0 1\"\nassert solution(\"2\\n1 1 1\") == \"0 1\"\nassert solution(\"3\\n1 1 1\") == \"0 1\"\nassert solution(\"10\\n5 5 5\") == \"0 15\"\nassert solution(\"15\\n5 5 5\") == \"0 15\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution('1 1 1 1') == '4'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '3 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"2 5 8\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n4 1 2 2 1 5 3\n''') == '3\n\nassert solution('''\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2 4 4 4 4 4'\n\n\nassert solution('''\n7\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '4 7'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n5 1 2 2 1\n''') == '3'\nassert solution('''\n6\n4 1 2 2 1 5 3\n''') == '3'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution('4') == '4'\nassert solution('4\\n1 1 1 1') == '4 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n3\n0 1 2\n''') == '4 4'\n\nassert solution(\n'''\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '3 4 4 4 4 4 4'\n\nassert solution(\n'''\n4\n1 1 1 1\n''') == '4 4 4 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"11\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"3 4 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\\\n7\n4 1 2 2 1 5 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\\\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\") == \"4 4 4 4 4\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3\n3 1 2''') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"YES\"\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split()))\n\nheights = []\nfor item in array:\n    heights.append(item)\n\nwhile len(heights) > 1:\n    heights = [heights[0]] + sorted(heights[1:]) + [heights[0]]\nprint(\"YES\" if heights[0] == heights[-1] else \"NO\")"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3''') == 'YES'\nassert solution('''3\n3 1 2''') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n3 1 2\n''') == 'NO'\nassert solution('''4\n3 1 2 3\n''') == 'YES'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n4 2 1') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n1 2 3') == 'YES'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3\\n') == 'YES'\nassert solution('3\\n3 1 2\\n') == 'NO'\nassert solution('3\\n3 1 2\\n') == 'NO'\n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    stack = []\n    while len(arr) > 0:\n        if len(stack) == 0:\n            stack.append(arr.pop(0))\n        else:\n            if stack[-1] < arr[0]:\n                stack.append(arr.pop(0))\n            else:\n                break\n    if len(stack) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == 'YES', \"Ravioli\"\nassert solution('3\\n1 2 3') == 'NO', \"Ravioli\"\nassert solution('4\\n5 3 2 1') == 'NO', \"Ravioli\"\nassert solution('4\\n4 5 3 2 1') == 'YES', \"Ravioli\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('1 2 3') == 'NO'\n\n\n'''"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\nabcdef\nabdfec\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n''') == '4'\nassert solution('''\n3\nabcdef\nabdfec\n''') == '3 5 4 5'"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '4'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\nabcdef\naccdfe\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n''') == '4 5 4 5'\nassert solution('''\n6\nabcdef\nabefc\n''') == '-1'\nassert solution('''\n10\nabcdef\nabefcd\n''') == '4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\nabcdef\nabdfec\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n''') == '4'\nassert solution('''\n3\nabcdef\nabdfec\n''') == '3 5 4 5'\n\n\n\n'''"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nabcd\\naccd\\n\") == \"-1\"\nassert solution(\"4\\nabcd\\naccd\\n\") == \"4 5 4 5\""
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\nabcdef\\nabdfec\") == \"4\\n3 5 4 5\"\nassert solution(\"4\\nabcd\\naccd\") == \"-1\"\nassert solution(\"6\\nabcde\\nabcef\") == \"4\\n3 5 4 5\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\nabcdef\nabdfec\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n''') == '3 5 4 5'\nassert solution('''\n6\nabcd\naccd\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n''') == '0'"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\nabcd\naccd\n''') == '-1'\nassert solution('''\n5\nabcd\naccd\n''') == '4'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1\\n\"\n    \"abcdef\\n\"\n    \"abdfec\\n\"\n) == \"3 5 4 5\"\nassert solution(\n    \"2\\n\"\n    \"abcd\\n\"\n    \"accd\\n\"\n) == \"4\"\nassert solution(\n    \"3\\n\"\n    \"abcde\\n\"\n    \"abcdfe\\n\"\n) == \"3 5 4 5\"\nassert solution(\n    \"4\\n\"\n    \"abcd\\n\"\n    \"accd\\n\"\n) == \"-1\"\nassert solution(\n    \"5\\n\"\n    \"abcd\\n\"\n    \"abcde\\n\"\n) == \"4\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nabcdef\\n\") == \"4\\n3 5 4 5\"\nassert solution(\"4\\nabcd\\n\") == \"-1\""
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'SPPSPSPS'\nassert solution('3') == 'PS'\nassert solution('2') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n''') == \"SPPSPSPS\"\nassert solution('''\n3\na\nc\n\n''') == \"PS\"\nassert solution('''\n2\na\nc\n\n''') == \"PS\"\n'''\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'SPPSPSPS'\nassert solution(input()) == 'PSPS'\nassert solution(input()) == 'SPSP'"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'SPPSPSPS'\nassert solution('3') == 'PS'\nassert solution('2') == 'PS'"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n3\na\nc\n\n2\na\nc''') == 'PSPS'\n\nassert solution('''\n3\na\nc\n\n2\na\nc''') == 'PS'\n\nassert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n3\na\nc\n\n2\na\nc''') == 'SP'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"PS\"\nassert solution(input()) == \"PPSP\"\nassert solution(input()) == \"SPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\na\naa\naa\n\n''') == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab') == 'PPSPSPS'\nassert solution('3\\na\\nca\\n') == 'PPSP'\nassert solution('2\\na\\nca\\n') == 'PS'\n\n'''"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n''') == 'SPPSPSPS'\n\nassert solution('''3\na\nc\n\n''') == 'PS'\n\nassert solution('''2\na\nc\n\n''') == 'PS'\n\nprint(\"OK\")"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n''') == \"SPPSPSPS\"\nassert solution('''\n3\na\nc\n\n''') == \"PS\"\nassert solution('''\n2\na\nc\n\n''') == \"PS\""
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('1 2 3 4 5') == '5'\n\n'''\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == '1'\n\nassert solution('5 8 7 6 3') == '0'"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 4 2') == '1'\nassert solution('5 3 2 4') == '2'\nassert solution('9 9 9 9 9') == '9'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n5\n''') == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1'\nassert solution([2,4,6,8,10]) == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '1'\n\n'''\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2 3 4') == '1'\nassert solution('4 5 6 7 8 10') == '2'\nassert solution('2 4 5 6 8 10') == '1'\nassert solution('4 5 6 7 8 9') == '0'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2 1\") == \"1\"\nassert solution(\"1 3 2 1\") == \"2\"\nassert solution(\"4 5 4 4\") == \"3\"\nassert solution(\"5 5 5 5\") == \"3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 6 8 10') == \"1\"\nassert solution('1 2 3 4') == \"0\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == \"1\"\nassert solution('7 8 1 0') == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '0'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('5\\n1 1 1 1') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\nprint('All tests passed')\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 1 0 1 1 0 1 0 1 0\n''') == '2'\nassert solution('''10\n1 1 0 1 1 0 1 0 1 0\n''') == '0'\nassert solution('''4\n1 1 1 1\n''') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n\n'''"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '0'\nassert solution('4') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3 4 5\n''') == '1'\nassert solution('''\n6 90 12 18 30 18\n''') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '4'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution(['1', '2', '3', '4', '5']) == '1'\nassert solution(['6', '90', '12', '18', '30', '18']) == '4'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '1'\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\nassert solution('''3\n9\n0\n''') == '3'\nassert solution('''4\n7\n0\n0\n''') == '3'\nassert solution('''4\n7\n1\n''') == '2'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\\n\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '1'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"6 90 12 18 30 18\") == \"4\""
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('6') == '4'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\""
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 2 1 2 2 2 2 2 2 2 1\n\n''') == '2'\n\nassert solution('''\n2\n2 2 2 2\n\n''') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2\n2\n2\n3\n''') == \"2\"\n\nassert solution('''\n4\n1\n1\n1\n1\n''') == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n100''') == '1'\nassert solution('''2\n100''') == '1'\nassert solution('''3\n100''') == '2'\nassert solution('''4\n100''') == '3'\nassert solution('''5\n100''') == '3'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"0\""
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 4 3 3 2\n''') == '2'\nassert solution('''\n3\n1\n2\n''') == '1'\n'''\n\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0] * n for _ in range(n)]\n\nfor i in range(n - 1, -1, -1):\n    for j in range(i, n):\n        if a[i] == a[j]:\n            dp[i][j] = dp[i + 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\nprint(n - dp[0][-1])\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"4\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"10 5\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''\n5 3\n1 0 0 0 1\n''') == '2'\nassert solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '3'"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\\n\") == \"2\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\""
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''\n5 3\n0 0 1 1 0 1\n''') == '2'\nassert solution('''\n5 10\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\n\n'''"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '-1'"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\\n\") == \"2\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n0 0 1 1 0 1 0 0 0 1''') == \"3\"\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == \"2\"\nassert solution('''10 10\n0 0 0 0 0 0 0 0 0 1\n''') == \"-1\"\nassert solution('''1 10\n0 0 1 1 0 1 0 0 0 1\n''') == \"2\"\nassert solution('''1 10\n0 0 1 1 0 1 0 0 0 1\n''') == \"1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 1 1 0 1 0 0 0 1') == '2'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"100\") == \"0\""
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('10') == '3'\nassert solution('100') == '1'\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '6'\n\nimport sys\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '3'\nassert solution('3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('10') == '11'\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"3\"\nassert solution(\"7\\n\") == \"7\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\n\n'''"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('50') == '10'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''(((()\n''') == 0\n\nassert solution('''()()()\n''') == 3\n\nassert solution('''((()\n''') == 0\n\nassert solution('''()()()\n''') == 0\n\nassert solution(''')(((\n''') == 3"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n(()()\n''') == '0'\n\nassert solution('''\n)())\n''') == '0'\n\nassert solution('''\n(()(()\n''') == '0'\n\nassert solution('''\n)())\n''') == '1'\n\nassert solution('''\n()\n''') == '0'"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(6) == \"3\"\nassert solution(7) == \"0\"\nassert solution(8) == \"0\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(6) == 3\nassert solution(2) == 0\nassert solution(5) == 2\nassert solution(1) == 0\nassert solution(10) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n(((())\n''') == '3'\n\nassert solution('''\n)()()()\n''') == '0'\n\nassert solution('''\n((((\n''') == '0'\n\nassert solution('''\n)()(\n''') == '0'\n\nassert solution('''\n(()\n''') == '0'"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(t1) == \"0\", \"expected \" + str(0)\nassert solution(t2) == \"3\", \"expected \" + str(3)\nassert solution(t3) == \"4\", \"expected \" + str(4)\nassert solution(t4) == \"8\", \"expected \" + str(8)\nassert solution(t5) == \"4\", \"expected \" + str(4)\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('(((())') == '3'\nassert solution(')(') == '0'\nassert solution('))') == '0'\nassert solution('()()()') == '3'\nassert solution('))((') == '0'\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('asdfasdf') == 'asdfasdf'\nassert solution('bbaba') == '3'\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('abcde') == 0\nassert solution('ab') == 2\nassert solution('abcde') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"test\") == 1\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert solution(\"asdfasdfasdf\") == 1\nassert solution(\"bbaba\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nbbaba\nbb''') == 3, '1st example'\nassert solution('''\naaabaa\naa''') == 2, '2nd example'\nassert solution('''\nabcd\nabcd\n\nabcd\n''') == 2, '3rd example'\nassert solution('''\nbbaa\nbb''') == 3, '4th example'\nassert solution('''\naabcd\naabcd\n\naabcd\n''') == 2, '5th example'\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('abbbb') == 3\nassert solution('bbaba') == 3\nassert solution('aab') == 1\nassert solution('asdfasdf') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bbaba\") == \"3\"\nassert solution(\"bb\") == \"2\"\nassert solution(\"abcde\") == \"0\"\nassert solution(\"asdfasdf\") == \"3\"\nassert solution(\"aaaaaaaaaaaaaaa\") == \"4\"\n\nstdin = \"asdfasdf\"\ns = \"asdfasdf\"\nt = \"asdfasdf\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('ab') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    'bbaba',\n    'bb'\n    ) == 3\n\nassert solution(\n    'asdfasdf',\n    'fasd'\n    ) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 3"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1) == '2'\nassert solution(2) == '2'\nassert solution(3) == '3'\nassert solution(4) == '4'\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '1\\n'\nassert solution('1 2 1 1') == '2\\n'\nassert solution('1 2 1 1') == '2\\n'\nassert solution('1 2 1 1') == '2\\n'\nassert solution('1 2 1 1') == '2\\n'\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"5 7 5 8\") == \"5\"\nassert solution(\"7 1 8 8\") == \"5\""
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1 1') == '2'"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1 1') == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('1 10 2 3') == '10'\nassert solution('10 9 3 4') == '100'\nassert solution('10 10 3 4') == '100'\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1\") == \"2\""
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"10 10 10 10\") == \"10\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nprint(solution(input()))\n\"\"\"\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n1 3 4 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2 4 3 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n9\n1 4 3 2 5 6 7 8 10\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n9 1 4 4 6 7') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2\n9 1 4 4 6 7\n\"\"\") == \"2\"\nassert solution(\"\"\"3\n9 1 4 4 6 7\n\"\"\") == \"0\"\nassert solution(\"\"\"4\n9 1 4 4 6 7\n\"\"\") == \"0\"\nassert solution(\"\"\"5\n9 1 4 4 6 7\n\"\"\") == \"0\"\nassert solution(\"\"\"6\n9 1 4 4 6 7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n6 1 4 5 4 6') == '2'\nassert solution('10\\n1 1 1 2 3 3 2') == '1'\n\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    6\n    9 1 4 4 6 7\n    ''') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3 1 4 4 6 7') == '2'\nassert solution('6\\n9 1 4 4 6 7') == '2'\nassert solution('12\\n1 1 1 1 1 1 1 1 1 1') == '4'\nassert solution('10\\n2 2 2 3 3 3 3 3 3 3') == '2'\nassert solution('16\\n7 5 5 5 5 5 5 5 5 5 5 5 5 5 5') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n9 1 4 4 6 7\n''') == '2'\nassert solution('''\n4\n3 1 2 3\n''') == '0'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"7 24 21 23\\n\"\n    \"16 17 14 20 20 11 22\\n\"\n    \"7 8 20 5 12 10 13\\n\"\n    \"5 4 12 6 15 19\\n\"\n    \"19 21 23 5\\n\"\n    \"21 20 12 15 18\\n\"\n    \"20 18 17 13\\n\"\n    \"23 19 10 14\\n\"\n    \"20 21 9 19\\n\"\n    \"24 13 9 10\\n\"\n    \"13 9 8 10\\n\"\n    \"17 16 14 8\\n\"\n    \"8 12 10 9\\n\"\n    \"23 17 21 8\\n\"\n    \"17 9 21 12\\n\"\n    \"19 13 17 9\\n\"\n    \"9 9 9 10\\n\"\n    \"7 17 12 13\\n\"\n    \"17 9 11 12\\n\"\n    \"8 19 9 11\\n\"\n    \"9 12 18 10\\n\"\n    \"10 7 10 9\\n\"\n    \"12 15 10 9\\n\"\n    \"8 8 10 9\\n\"\n    \"8 9 9 10\\n\"\n    \"15 13 14 9\\n\"\n    \"16 10 9 9\\n\"\n    \"9 12 11 8\\n\"\n    \"10 12 13 8\\n\"\n    \"14 14 9 10\\n\"\n    \"18 18 17 11\\n\"\n    \"9 12 11 8\\n\"\n    \"12 14 9 11\\n\"\n    \"12 8 10 9\\n\"\n    \"8 11 11 12\\n\"\n    \"19 10 9 11\\n\"\n    \"11 17 12 13\\n\"\n    \"12 17 9 11\\n\"\n    \"9 15 9 12\\n\"\n    \"8 15 8 13\\n\"\n    \"8 12 11 11\\n\"\n    \"7 12 9 13\\n\"\n    \"9 8 12 9\\n\"\n    \"14 18 9 10\\n\"\n    \"12 9 10 10\\n\"\n    \"15 16 12 9\\n\"\n    \"12 14 9 10\\n\"\n    \"18 18 12 10\\n\"\n    \"19 12 15 10\\n\"\n    \"12 16 13 10\\n\"\n    \"14 19 13 11\\n\"\n    \"13 16 14 10\\n\"\n    \"15 18 17 11\\n\"\n    \"14 18 12 10\\n\"\n    \"14 16 12 9\\n\"\n    \"11 13 17 11\\n\"\n    \"13 19 16 10\\n\"\n    \"10 18 19 10\\n\"\n    \"19 18 17 11\\n\"\n    \"11 17 17 12\\n\"\n    \"8 17 12 13\\n\"\n    \"8 13 11 12\\n\"\n    \"10 18 19 10\\n\"\n    \"10 17 14 10\\n\"\n    \"14 18 15 10\\n\"\n    \"12 19 11 12\\n\"\n    \"12 13 11 13\\n\"\n    \"12 10 11 12\\n\"\n    \"10 13 11 12\\n\"\n    \"13 13 11 12\\n\"\n    \"19 10 11 12\\n\"\n    \"11 10 10 12\\n\"\n    \"10 13 11 13\\n\"\n    \"17 17 16 10\\n\"\n    \"9 12 17 16\\n\"\n    \"12 16 18 13\\n\"\n    \"13 17 13 16\\n\"\n    \"13 18 17 13\\n\"\n    \"13 14 17 16\\n\"\n    \"14 18 19 13\\n\"\n    \"16 17 19 16\\n\"\n    \"14 18 19 13\\n\"\n    \"12 16 18 13\\n\"\n    \"13 18 19 13\\n\"\n    \"18 19 16 16\\n\"\n    \"19 18 19 13\\n\"\n    \"19 18 18 13\\n\"\n    \"18 17 13 16\\n\"\n    \"13 18 18 18\\n\"\n    \"12 18 18 16\\n\"\n    \"16 17 12 19\\n\"\n    \"17 18 11 12\\n\"\n    \"19 18 11 12\\n\"\n    \"13 18 11 12\\n\"\n    \"12 19 19 12\\n\"\n    \"12 19 19 12\\n\"\n    \"12 18 11 12\\n\"\n    \"12 19 19 11\\n\"\n    \"16 17 19 11\\n\"\n    \"19 18 10 11\\n\"\n    \"12 18 10 11\\n\"\n    \"13 18 10 11\\n\"\n    \"19 19 10 11\\n\"\n    \"12 18 10 11\\n\"\n    \"11 16 19 10\\n\"\n    \"14 19 10 10\\n\"\n    \"16 16 19 10\\n\"\n    \"10 13 19 10\\n\"\n    \"14 19 10 10\\n\"\n    \"17 19 10 10\\n\"\n    \"16 19 10 10\\n\"\n    \"13 18 10 10\\n\"\n    \"19 19 9 11\\n\"\n    \"19 18 10 10\\n\"\n    \"14 18 10 10\\n\"\n    \"19 19 9 11\\n\"\n    \"19 18 9 10\\n\"\n    \"14 19 10 10\\n\"\n    \"13 18 10 10\\n\"\n    \"19 18 10 10\\n\"\n    \"16 18 10 10\\n\"\n    \"11 16 19 10\\n\"\n    \"13 18 10 10\\n\"\n    \"14 18 10 10\\n\"\n    \"16 18 10 10\\n\"\n    \"16 19 10 10\\n\"\n    \"13 18 10 10\\n\"\n    \"13 18 9 10\\n\"\n    \"16 18 9 10\\n\"\n    \"14 19 9 10\\n\"\n    \"19 19 9 10\\n\"\n    \"14 19 9 10\\n\"\n    \"13 18 9 10\\n\"\n    \"13 19 9 10\\n\"\n    \"13 19 9 10\\n\"\n    \"13 18 9 10\\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\nassert solution('''\n5 6 8 9 10 11\n3 1 3 2 2 1\n''') == '0'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"5\""
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n\nassert solution('''\n5 3 19\n2 10 2 3\n''') == '3'"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 3 3') == \"2\"\nassert solution('5 8 2 3') == \"3\"\nassert solution('5 16 2 3') == \"2\"\nassert solution('20 30 2 1') == \"1\"\nassert solution('20 30 1 1') == \"2\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 24 21 23') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"7 24 21 23\\n\"\n    \"16 17 14 20 20 11 22\"\n) == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23') == '3'\nassert solution('3 3 3 3') == '0'\nassert solution('3 1 2 3') == '3'\nassert solution('5 5 5 5') == '0'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 24 21 23') == '3'\nassert solution('7 24 21 23') == '3'\nassert solution('7 24 21 23') == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('7') == '2'\nassert solution('8') == '2'\nassert solution('9') == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10\\n') == '4'\nassert solution('5\\n') == '1'\nassert solution('6\\n') == '3'\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 10 50 110 250\n''') == '4'\nassert solution('''\n6\n4 7 12 100 150 199\n''') == '3'\nassert solution('''\n10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\nassert solution('''\n5\n2 10 50 110 250\n''') == '1'\nassert solution('''\n6\n4 7 12 100 150 199\n''') == '2'\n'''\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5 2 10 50 110 250\") == \"1\"\nassert solution(\"6 4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(samples[0]) == 4\nassert solution(samples[1]) == 1\nassert solution(samples[2]) == 3\nassert solution(samples[3]) == 2\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"4\"\nassert solution(solution.__doc__, stdin='''\n4\n2 10 50 110 250\n\n''') == \"1\"\nassert solution(solution.__doc__, stdin='''\n5\n2 10 50 110 250\n\n''') == \"2\"\nassert solution(solution.__doc__, stdin='''\n6\n4 7 12 100 150 199\n\n''') == \"3\"\nassert solution(solution.__doc__, stdin='''\n5\n2 10 50 110 250\n\n''') == \"1\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\nassert solution('''\n5\n2 10 50 110 250\n''') == '1'\nassert solution('''\n6\n4 7 12 100 150 199\n''') == '3'\nassert solution('''\n4\n5 6 7 10 21 23 24 49\n''') == '1'"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == '3'\nassert solution(s2) == '4'\nassert solution(s3) == '1'\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5 2 10 50 110 250') == '1'\nassert solution('6 4 7 12 100 150 199') == '3'\nprint('all tests passed')"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n2 4 8 3 6\n''') == '1 2'\nassert solution('''\n5\n5 2 11 3 7\n''') == '2 4'\nassert solution('''\n6\n2 5 10 1 10 2\n''') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n5 2 11 3 7''') == '2 4'\nassert solution('''6\n2 5 10 1 10 2''') == '1 4'''\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('5\\n5 2 11 3 7') == '2 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2 4 8 3 6\n''') == '1 2'\n\nassert solution('''\n5\n5 2 11 3 7\n''') == '2 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1 4'"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2\""
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 2\""
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 8 3 6') == '1 2'\nassert solution('5 2 11 3 7') == '2 4'\nprint(solution(input()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 4 8 3 6\n''') == '1 2'\nassert solution('''\n5\n5 2 11 3 7\n''') == '2 4'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\nassert solution('0') == '2'"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"2\") == \"02\"\nassert solution(\"21120\") == \"21120\"\nassert solution(\"001202\") == \"0212\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(3) == '021'\nassert solution(6) == '2112'\nassert solution(6) == '2112'"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"021\"\nassert solution(\"6\") == \"001122\"\nassert solution(\"7\") == \"120120\"\nassert solution(\"8\") == \"120120\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n01\n''') == '01'\nassert solution('''3\n0\n''') == '0'\nassert solution('''5\n000000\n''') == '000000'\nassert solution('''6\n211200\n''') == '211200'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n121\n\nOutput\n021\n\n3\n120110\n\nOutput\n120120''') == '021'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n121\n''') == '021'\n\nassert solution('''\n6\n000000\n''') == '001122'\n\nassert solution('''\n6\n211200\n''') == '211200'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '02112'"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '211200'\nassert solution('4') == '1111'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1000000\") == \"1000001\"\nassert solution(\"001\") == \"01\"\nassert solution(\"12\") == \"12\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"6\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1\\n3') == '4'\nassert solution('6 2\\n3') == '0'\nassert solution('6 4\\n2') == '0'\nassert solution('6 5\\n2') == '1'\nassert solution('6 6\\n2') == '1'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 1\n3\n''') == \"4\"\nassert solution('''6 1\n1\n''') == \"0\"\nassert solution('''6 1\n2\n''') == \"0\"\nassert solution('''6 1\n4\n''') == \"2\"\nassert solution('''6 1\n5\n''') == \"0\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"4\", \"Wrong\"\nassert solution(\"6 1\") == \"5\", \"Wrong\"\nassert solution(\"7 1\") == \"6\", \"Wrong\"\nassert solution(\"8 1\") == \"7\", \"Wrong\"\nassert solution(\"9 1\") == \"8\", \"Wrong\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1') == '4'\nassert solution('6 2') == '1'\nassert solution('6 3') == '0'\nassert solution('6 4') == '0'\nassert solution('6 5') == '0'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1') == '4'\nassert solution('10 2') == '8'\nassert solution('15 1') == '10'\nassert solution('15 2') == '10'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '4'\nassert solution('6 2') == '1'\nassert solution('6 3') == '0'\nassert solution('6 4') == '1'\nassert solution('6 5') == '0'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n6 1\n3\n'''\n) == '4', \"Wrong solution\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"4\", \"Wrong result\"\nassert solution(\"6 2\") == \"4\", \"Wrong result\"\nassert solution(\"6 3\") == \"4\", \"Wrong result\"\nassert solution(\"6 4\") == \"3\", \"Wrong result\"\nassert solution(\"6 5\") == \"2\", \"Wrong result\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('1 2 4') == '-2'\nassert solution('1 1 1') == '0'\nassert solution('4 1 4') == '0'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"6 1 4\") == \"4\"\nassert solution(\"10 10 4\") == \"4\"\nassert solution(\"5 0 4\") == \"4\"\nassert solution(\"5 -4 4\") == \"4\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 2 4\n''') == '2'\nassert solution('''\n5 2 3\n''') == '3'\nassert solution('''\n-10 2 4\n''') == '4'\nassert solution('''\n-1 2 3\n''') == '3'\nassert solution('''\n4 1 2\n''') == '2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\nassert solution(\"1 2 3\\n\") == \"3\"\nassert solution(\"1 10 2\\n\") == \"9\"\nassert solution(\"10 0 1\\n\") == \"1\"\n\nassert solution(\"-10 10 20\\n\") == \"20\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 4') == '3'\nassert solution('5 2 4') == '3'\nassert solution('6 2 4') == '2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2 4\\n') == '2'\nassert solution('10 10 10\\n') == '0'\nassert solution('-10 -10 -10\\n') == '0'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('3 4 6') == '4'\nassert solution('5 8 3') == '4'\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"17\") == \"1\"\nassert solution(\"19\") == \"2\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"3\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\""
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('123') == '123'\nassert solution('12') == '1'\nassert solution('2') == '0'\nassert solution('100') == '1'\nassert solution('15') == '0'\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\nassert solution('123456789') == '1'\n\n'''"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"2128506\") == \"3\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n11\n''') == '2'\nassert solution('''\n14\n''') == '0'\nassert solution('''\n61441\n''') == '2'\nassert solution('''\n571576\n''') == '3'\n\n\n\n## a = [1, 2, 3, 4, 5]\n## x = 1\n## y = 2\n## z = 3\n## w = 4\n## t = 5\n##\n## for i in range(4):\n##     if i == 1:\n##         print(a[x:y])\n##     elif i == 2:\n##         print(a[z:w])\n##     elif i == 3:\n##         print(a[t:])\n\n\n## a = [1, 2, 3, 4, 5]\n## x = 1\n## y = 2\n## z = 3\n## w = 4\n## t = 5\n##\n## for i in range(5):\n##     if i == 1:\n##         print(a[x:y])\n##     elif i == 2:\n##         print(a[z:w])\n##     elif i == 3:\n##         print(a[t:])\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nassert solution(\"12345678\") == \"3\""
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"27\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1\\n2\\n3\\n4\\n5'\nassert solution('13') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13'"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '27'\nassert solution('11') == '11'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == str(int(input()))"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"27\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '11'\nassert solution('6') == '966'\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n\n''') == \"27\", \"Should be 27\"\nassert solution('''\n10\n\n''') == \"45\", \"Should be 45\"\nassert solution('''\n9\n\n''') == \"27\", \"Should be 27\"\nassert solution('''\n20\n\n''') == \"53\", \"Should be 53\"\nassert solution('''\n11\n\n''') == \"55\", \"Should be 55\"\n'''\n\nimport sys\nimport io\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"0\"\nassert solution(927) == \"1\"\nassert solution(48) == \"0\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"32\") == \"1\"\nassert solution(\"12\") == \"0\"\nassert solution(\"111\") == \"1\"\nassert solution(\"555\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13') == '1', \"13 is wrong\"\nassert solution('927') == '1', \"927 is wrong\"\nassert solution('48') == '0', \"48 is wrong\"\n\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"1\"\nassert solution(\"48\") == \"0\"\nassert solution(\"125\") == \"1\"\n'''\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5'\n) == '1'\nassert solution(\n    '1000'\n) == '1'\nassert solution(\n    '13'\n) == '1'\nassert solution(\n    '927'\n) == '1'\nassert solution(\n    '48'\n) == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) in {'0', '1'}"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"123\") == \"0\"\nassert solution(\"53\") == \"1\"\n\n----------------------------------------------------------------------\nSample I/O:\n\nInput\n30\n\nOutput\n1\n\nInput\n3\n\nOutput\n0\n\n----------------------------------------------------------------------\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\nassert solution(\"2 5 5 7\") == \"8\"\n\n'''"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5 3 1\") == \"4\", \"Wrong!\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 5 3 1\n''') == '4'\n\n\n'''\n\nimport math"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"4\"\n\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n\n'''\nimport math\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5 3 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 5 3 1\"\n) == \"4\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 3 1') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\nassert solution([1, 2, 3]) == \"5\"\nassert solution([1, 2, 3, 4]) == \"8\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n8 1\\n999999733 999999732\\n999999733 999999733\") == \"2\"\nassert solution(\"4\\n8 7\\n999999733 999999732\\n999999733 999999733\") == \"8\"\nassert solution(\"5\\n8 7\\n999999733 999999732\\n999999733 999999733\") == \"1\"\n\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5 7\\n8 1\") == \"2\"\nassert solution(\"2\\n5 6\\n8 1\") == \"1\"\nassert solution(\"3\\n5 6\\n8 1\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''5\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\nassert solution('''5\n8 1\n6 10\n999999733 999999733\n9999999999 999999573\n''') == '9999999999 999999573'\nassert solution('''5\n8 1\n6 10\n999999733 999999733\n9999999999 999999573\n''') == '9999999999 999999573'\nassert solution('''5\n8 1\n6 10\n999999733 999999733\n9999999999 999999573\n''') == '9999999999 999999573'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\n''') == '2'\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\n''') == '8'\nassert solution('''4\n5\n2\n5\n1\n\n''') == '1'\nassert solution('''4\n5\n5\n5\n1\n\n''') == '1'\nassert solution('''2\n3\n1\n\n''') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n3\n5\n''') == '1'\nassert solution('''\n8\n7\n6\n''') == '8'\nassert solution('''\n99999999\n1\n99999999\n''') == '999999999'"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''\n2\n5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '8'\nassert solution('''\n3\n5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\n'''\n\nstdin = []\nfor _ in range(int(input())):\n    stdin.append(str(input()))"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\n''')\n\n------Test.describe----\n>>> solution('''\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\n\n>>> solution('''\n9\n9 1\n3 3\n2 2 2\n3 3 3\n5 5 5 5\n5 5 5 5\n''') == '5'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '8'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution('''\n8\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n\n>>> solution"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"7 1\") == \"8\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 2]) == \"1\"\nassert solution([2, 1]) == \"0\"\nassert solution([2, 0]) == \"0\"\nassert solution([2, 3]) == \"0\"\nassert solution([3, 3]) == \"4\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 2]) == 1\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 5\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == \"1\"\nassert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"4\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == '1'\nassert solution(\"4 2\\n2 1 2\\n1 2\\n3 2\\n2 3\") == '1'\nassert solution(\"2 2\\n2 1 2\\n1 2\\n3 2\") == '0'\nassert solution(\"4 2\\n1 2\\n1 2\\n3 2\\n2 3\") == '0'\nassert solution(\"10 2\\n1 2\\n3 2\\n1 2\\n3 2\\n1 2\\n3 2\\n2 2\\n4 2\\n3 2\\n5 2\") == '8'"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '0'\nassert solution('0 1') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 5\n3 1 3 2\n2 3\n1 4\n4 5\n''') == '1'\nassert solution('''\n5 6\n4 3 1 2 5\n1 2\n1 3\n2 4\n1 5\n2 5\n1 4\n''') == '1'\nassert solution('''\n7 7\n3 3 3 2 2 3 2\n1 2 1 3 1 1 2\n1 1 2 1 3 1 1 2\n2 2 1 3 1 1 1 1\n1 2 1 3 1 1 1 2\n1 1 2 1 3 1 1 2\n1 1 2 1 3 1 1 2\n''') == '1'\nassert solution('''\n11 10\n8 4 2 1 6 7 6 3 7 7 5 2 6 5\n7 8\n8 4\n6 5\n6 2\n7 6\n5 7\n3 2\n4 4\n''') == '2'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.0'\nassert solution('10 10 9 1') == '9.0'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 0 0') == '5'\nassert solution('3 4 9 0') == '5'\nassert solution('4 4 0 0') == '1'\nassert solution('1 1 0 1') == '2'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 0\") == \"5.00000000000000000000\"\nassert solution(\"2 2 1 1\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2') == '5.00000000000000000000'\nassert solution('2 2 2 2') == '10.00000000000000000000'\nassert solution('2 2 2 2') == '2.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('1 1 0 0') == '0.00000000000000000'\nassert solution('0 0 0 0') == '0.00000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 4 1') == '5.0'\nassert solution('3 3 1 2') == '6.0'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"3 1 4 1 2\") == \"4.00000000000000000000\"\n\n'''\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 3 0') == '5.00000000000000000000', 'expected'\nassert solution('3 4 5 0') == '5.00000000000000000000', 'expected'\nassert solution('3 4 7 0') == '4.00000000000000000000', 'expected'\nassert solution('6 6 8 0') == '8.00000000000000000000', 'expected'\nassert solution('11 10 11 0') == '33.333330000000004', 'expected'"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '5.00000000000000000000'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"8\"\nassert solution(\"15 1\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 4 5 60 4\n''') == '8'\n\nassert solution('''3 1\n1 1 1\n''') == '6'\n\nassert solution('''15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n''') == '97'"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4\n1 4 5 60 4\n''') == '8'\n\nassert solution('''3 1\n1 1 1\n''') == '6'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n1 4 5 60 4\n''') == '8'\n\nassert solution('''3 1\n1 1 1\n''') == '6'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 4\n1 4 5 60 4\n''') == '8'\nassert solution('''3 1\n1 1 1\n''') == '6'\nassert solution('''15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n''') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\""
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 1 1\") == \"97\"\nassert solution(\"15 2\\n1 2 1\") == \"98\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\nassert solution(\"3 1\\n1 1 1\\n\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\\n\") == \"97\""
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '8'\nassert solution('15 1') == '97'\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n3 2'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"\n5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n\"\"\"\n) == \"7\"\n\nassert solution(\n\"\"\"\n1 0\n1000000\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n6\n1 2 3\n5\n2 4 5\n4 6 7\n3 8 9\n2 1 3\n\"\"\"\n) == \"9\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 0\n1000000''') == '0'\nassert solution('''1 0\n1000000\n1 2\n100 3''') == '4'\nassert solution('''1 1\n2 3\n1 1\n1 1''') == '1'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n''') == '6'\n\nassert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '7'\n\nassert solution('''1 0\n1000000\n''') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"6\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n\"\"\") == \"7\"\n\nassert solution(\"\"\"1 0\n1000000\n\"\"\") == \"0\""
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6'\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7'\nassert solution('''1 0\n1000000''') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n-2 -3\\n3 4\") == \"6\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\") == \"7\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\") == \"6\\n2\\n3 2\"\nassert solution(\"5 4\\n3 5\\n3 4\\n2 4\\n1 3\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n''') == '6'\nassert solution('''\n5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n\n''') == '7'\nassert solution('''\n1 0\n1000000\n\n''') == '0'\nprint(solution('''\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n'''))"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"Yes\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\n''') == 'Yes'\nassert solution('''\naz\naa\nbad\nbabc\n''') == 'No'\n''')\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"Yes\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbad\n\"\"\") == \"No\"\nassert solution(\"\"\"\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbad\n\"\"\") == \"No\"\nassert solution(\"\"\"\nz\nz\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"z\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\nassert solution('4') == 'Yes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    fced\n    xyz\n    r\n    dabcef\n    az\n    aa\n    bad\n    babc\n''') == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"y\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"aabc\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(input()) == \"No\\nNo\\nNo\\nNo\\nYes\\nYes\\nYes\\nYes\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1 \n\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nassert solution('1 0\\n1000000\\n') == '0\\n0'\n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2 \n\nsolution('5"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 0\n1000000\n''') == '0'\nassert solution('''\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6'\nassert solution('''\n5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''') == '7'\nassert solution('''\n1 0\n1000000\n''') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\nassert solution() == '7'\nassert solution() == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6'\nassert solution('''\n5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''') == '7'\nassert solution('''\n1 0\n1000000\n''') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0') == '0'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"6 2\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"6\""
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7'\nassert solution('1 0\\n1000000\\n') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n''') == '6'\n\nassert solution('''\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n''') == '7'\n\nassert solution('''\n1 0\n1000000\n\n''') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6'\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''') == '7'\nassert solution('''1 0\n1000000\n''') == '0'\nassert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '7'\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 1 5 4 3''') == '4'\nassert solution('''7\n1 3 5 6 7 4 2''') == '7'\nassert solution('''3\n1 2 3''') == 'LLL'\nassert solution('''4\n1 2 4 3''') == 'LLR'\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('7') == '7'\nassert solution('3') == 'LL'\nassert solution('4') == 'LLRL'\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1\n3\n''') == '4'\n\nassert solution('''7\n1 2 3\n''') == '7'\n\nassert solution('''3\n1 2 3\n''') == '3'\n\nassert solution('''4\n1 2 3\n''') == '4'\n\nassert solution('''5\n1 2 3 4\n''') == '4'"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('7') == '7'\nassert solution('3') == 'LLL'\nassert solution('4') == 'LLRL'\nassert solution('2') == 'LRLL'\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1 5 4 3\n\n''') == '4'\nassert solution('''7\n1 3 5 6 7 4 2\n\n''') == '7'\nassert solution('''3\n1 2 3\n\n''') == '3'\nassert solution('''4\n1 2 4 3\n\n''') == 'LLRL'\nassert solution('''5\n2 1 5 4 3\n\n''') == '4'\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n2 1 5 4 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n7\n1 3 5 6 7 4 2\n\"\"\") == \"7\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 4 3\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n2 1 5 4 3\"\"\") == \"4\"\nassert solution(\"\"\"7\n1 3 5 6 7 4 2\"\"\") == \"7\"\nassert solution(\"\"\"3\n1 2 3\"\"\") == \"LLL\"\nassert solution(\"\"\"4\n1 2 4 3\"\"\") == \"LLRL\"\n\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"7\"\nassert solution(\"3\") == \"LLL\"\nassert solution(\"4\") == \"LLR\""
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == 'LLRL'\nassert solution('4') == 'LLRL'\nassert solution('3') == 'LLL'\nassert solution('2') == 'LRL'\nassert solution('1') == 'LL'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 5 3 4\n''') == '4'\n\nassert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n7\n6 5 4 3 2 4 3\n''') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 5 3 4''') == 4\nassert solution('''7\n6 5 4 3 2 4 3''') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '2'\nassert solution('7') == '2'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '2'\nassert solution('7') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('2') == '2'\nassert solution('7') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n1 2 5 3 4\") == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '2'\nassert solution('7') == '2'\nassert solution('6 5 4 3 2 4 3') == '2'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3\\n1 2 2 4 5\\n\"\n) == \"1\"\nassert solution(\n    \"5 3\\n1 2 3 4 5\\n\"\n) == \"2\"\nassert solution(\n    \"5 3\\n1 2 3 3 3\\n\"\n) == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '1'\nassert solution('5 3') == '1'\nassert solution('5 3') == '1'\nassert solution('5 3') == '1'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'\nassert solution('10 20') == '0'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\nassert solution(\"2 2 4 5\") == \"0\"\nassert solution(\"2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 3\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 3\n1 2 2 4 5\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 4') == '4'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"4\"\nassert solution(\"8 3 4\") == \"4\""
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('1 1 1') == '1'"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 3 4''') == '4'\nassert solution('''5 1 5''') == '1'\nassert solution('''2 1 5''') == '3'\nassert solution('''1 1 1''') == '3'"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\nassert solution(\"4 3 4\") == \"2\"\nassert solution(\"10 100 100 100 100 100 100 100 100 100 100 100 100 100 100\") == \"10\"\n\"\"\"\n\nn, a, b = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('1 2 3') == '3'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('8 3 3') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('10 1 1') == '1'\nassert solution('1000 100 100') == '1000'\nassert solution('0 0 0') == '0'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8 3 4\"\"\") == \"4\"\nassert solution(\"\"\"100 5 4\"\"\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    4\n    2 4 2\n    \"\"\") == \"4\"\nassert solution(\"\"\"\n    1\n    2\n    \"\"\") == \"-1\"\nassert solution(\"\"\"\n    10\n    2 6 5 3 8 4 6 8 10\n    \"\"\") == \"10\"\nassert solution(\"\"\"\n    9\n    2 1 2 1 3 1 3 3 1\n    \"\"\") == \"9\"\nassert solution(\"\"\"\n    5\n    1 2 1 1 3\n    \"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '4'\nassert solution('3') == '48'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8\n8 2 12 6 4 24 16 3\n1\n2''') == '4'\nassert solution('''8\n8 2 12 6 4 24 16 3\n1''') == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\") == \"48\", \"1st example\"\nassert solution(\"\"\"\n3\n5 4 8 2\n1\n2\n\"\"\") == \"4\", \"2nd example\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n1\n3\n7\n13\n17\n21\n''') == '-1'\nassert solution('''2\n1\n2\n3\n4\n5\n6\n7\n''') == '5'"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"12\""
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '-1'\nassert solution('2') == '4'\nassert solution('3') == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\"\nassert solution('''\n5\n8 2 12 6 4 24 16 3\n10\n''') == \"-1\"\nassert solution('''\n5\n8 2 12 6 4 24 16 3\n3\n''') == \"3\"\nassert solution('''\n5\n8 2 12 6 4 24 16 3\n8\n''') == \"8\""
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n1 5 5 1 6 1\n''') == '3\\n5 6 1'\nassert solution('''\n5\n2 4 2 4 4\n''') == '2\\n2 4'\nassert solution('''\n5\n6 6 6 6 6\n''') == '1\\n6'"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"1\""
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n6 6 6 6 6\n''') == '2'\nassert solution('''\n5\n2 2 2 2 2\n''') == '1'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1'\nassert solution('''\n5\n1 1 1 1 1 1 1 1 1 1\n''') == '3'\nassert solution('''\n5\n1 1 1 1 1 1 1 1 1 1\n''') == '3'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input(stdin=True)) == \"2\"\nassert solution(input(stdin=True, split='\\n')) == \"1\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 3 4 5\\n') == '1\\n2\\n3\\n4\\n'\nassert solution('3\\n2 4 5\\n') == '2\\n4\\n'\nassert solution('5\\n2 4 5\\n') == '5\\n'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 5 5 1 6 1\n''') == '3'\n\nassert solution('''\n5\n2 4 2 4 4\n''') == '2'\n\nassert solution('''\n5\n6 6 6 6 6\n''') == '1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '6 6 6 6 6'\nassert solution('5') == '2 4'\nassert solution('5') == '2 4'\nassert solution('5') == '1'"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\nassert solution(example_input_3) == example_output_3\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\") == \"3\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\""
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '3\\n5 6 1'\nprint('Correct')"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('1') == '2'\nassert solution('100') == '101'\nassert solution('917') == '917'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"0\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"120\") == \"128\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('30') == '30'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"7\"\nassert solution(\"23\") == \"23\"\nassert solution(\"72\") == \"73\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"aac\"\n\nassert solution(\n\"\"\"\naba\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"aba\"\n\nassert solution(\n\"\"\"\na\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"\"\n\nassert solution(\n\"\"\"\nb\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"\"\n\nassert solution(\n\"\"\"\nc\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"c\""
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '12', \"1\"\nassert solution('23') == '23', \"2\"\nassert solution('2') == '2', \"3\""
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabc\n3\n2 1 0\nabac\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabc\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabc\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'aba'\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'aac'\nassert solution('''\n\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'aac'\nassert solution('''\n\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'aac'\nassert solution('''\n\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'aac'\nassert solution('''\n\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'aac'\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"aba\"\nassert solution(input()) == \"c\"\nassert solution(input()) == \"b\"\nassert solution(input()) == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nabac\\n3\") == \"aac\"\nassert solution(\"2\\nabc\\n1\") == \"b\"\nassert solution(\"2\\nabca\\n3\") == \"aba\"\nassert solution(\"2\\nabca\\n4\") == \"aba\"\nassert solution(\"2\\nabca\\n5\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'aac'\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'b'\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'c'\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"aac\"\n\nassert solution(\"\"\"\n2\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"aac\"\n\nassert solution(\"\"\"\n2\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"aac\"\n\nassert solution(\"\"\"\n3\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"b\"\n\nassert solution(\"\"\"\n3\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\") == \"a\""
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abac\\n3\\n2 1 0\\nabc\\n1\\n0\\nabba\\n3\\n1 0 1\\necoosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\") == \"aac\"\nassert solution(\"abac\\n3\\n2 1 0\\nabc\\n1\\n0\\nabba\\n3\\n1 0 1\\necoosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\") == \"aab\"\nassert solution(\"aba\\n1\\n0\\n\") == \"aba\""
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == 'a'\nassert solution('1') == 'a'\nassert solution('10000000') == 'aaa'\nassert solution('10000000000') == 'aaaa'\nassert solution('10000000000001') == 'a'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'a'\nassert solution('4') == 'aa'\nassert solution('5') == 'aaaa'\nassert solution('6') == 'aaaaa'\nassert solution('7') == 'aaaaaa'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"aa\"\nassert solution(\"3\") == \"aaa\"\nassert solution(\"4\") == \"aaaa\"\nassert solution(\"5\") == \"aaaaa\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'aa'\nassert solution('3') == 'aaa'\nassert solution('4') == 'aaaa'\nassert solution('5') == 'aaaaa'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"aa\"\nassert solution(\"3\") == \"aaa\""
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'aaaa'\nassert solution('23') == 'ababab'\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    to be or not to be\n''') == '12'\nassert solution('''\n    aa bb aa aa bb bb\n''') == '11'\nassert solution('''\n    ab aa ab aa bb bb\n''') == '10'\nassert solution('''\n    AA AB aa AB aa BB bb\n''') == '14'\nassert solution('''\n    to be or not to be\n''') == '12'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"12\"\nassert solution(\"3\\nto be or not to be\") == \"12\"\nassert solution(\"6\\nto be or not to be\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"to be or not to be\") == \"12\"\nassert solution(\"a ab a a b ab a a b c\") == \"13\"\nassert solution(\"AB aa AB bb\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n'\n                'to be or not to be') == '12'\nassert solution('10\\n'\n                'a ab a a b ab a a b c') == '13'\nassert solution('6\\n'\n                'aa bb aa aa bb bb') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n\") == \"3\"\nassert solution(\"4\\n\") == \"4\"\nassert solution(\"5\\n\") == \"5\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == 12\nassert solution(\"10\") == 13\nassert solution(\"6\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"10\") == \"13\"\nassert solution(\"6\") == \"11\"\nassert solution(\"10\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''to be or not to be\n''') == '12'\nassert solution('''a ab a a b ab a a b c\n''') == '13'\nassert solution('''aa bb aa aa bb bb\n''') == '11'\nassert solution('''AB aa AB bb\n''') == '11'"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nto be or not to be\n''') == \"12\"\nassert solution('''\naa bb aa aa bb bb\n''') == \"11\"\nassert solution('''\nAB aa AB bb\n''') == \"2\"\nprint('You passed all the tests!')\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"8 3\\n\"\n    \"5 4 2 6 5 1 9 2\\n\") == \"20\\n\"\nassert solution(\n    \"5 1\\n\"\n    \"1 1 1 1 1\\n\") == \"1\\n\"\nassert solution(\n    \"4 2\\n\"\n    \"1 2000 2000 2\\n\") == \"4000\\n\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('8 3\\n5 4 2 6 5 1 9 2') == '4000'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == '1'\nassert solution('4 2') == '2'\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    5 1\n    1 1 1 1 1\n    \"\"\"\n) == \"1 2 3\"\nassert solution(\n    \"\"\"\n    5 2\n    1 1 1 1 1\n    \"\"\"\n) == \"1 2 3\"\nassert solution(\n    \"\"\"\n    8 3\n    5 4 2 6 5 1 9 2\n    \"\"\"\n) == \"20 3 2 3\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3') == '20'\nassert solution('5 1') == '1'\nassert solution('4 2') == '4000'"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"4000 2 2\"\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 3\") == \"20\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"4 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2\n''') == '20'\nassert solution('''5 1\n1 1 1 1 1\n''') == '1'\nassert solution('''4 2\n1 2000 2000 2\n''') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8 3\n5 4 2 6 5 1 9 2\n''') == \"20\"\nassert solution('''\n5 1\n1 1 1 1 1\n''') == \"1\"\nassert solution('''\n4 2\n1 2000 2000 2\n''') == \"4000\""
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2\n''') == '20'\nassert solution('''5 1\n1 1 1 1 1\n''') == '1'\nassert solution('''4 2\n1 2000 2000 2\n''') == '4000'\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '4\\n1 -5 3 2\\n') == '1'\n\nassert solution(\n    '5\\n4 -2 3 -9 2\\n') == '0'\n\nassert solution(\n    '9\\n-1 1 -1 1 -1 1 1 -1 -1\\n') == '6'\n\n\n'''\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 -5 3 2\n''') == '1'\n\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''\n8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution() == '0'\nassert solution() == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 -5 3 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n4 -2 3 -9 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n8\n16 -5 -11 -15 10 5 4 -4\n\"\"\") == \"3\"\nprint('Tests are done!')"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 -5 3 2\n''') == '1'\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 -5 3 2\n''') == '1'\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\nassert solution('''\n8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 -5 3 2\n''') == '1'\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 -5 3 2\n''') == '1'\n\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 -5 3 2\n''') == '1'\n\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''\n8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 -5 3 2\n''') == '1'\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\nassert solution('''\n8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n\") == \"0\"\nassert solution(\"2\\n1\\n\") == \"2\"\nassert solution(\"5\\n1\\n\") == \"10\"\nassert solution(\"2\\n2\\n\") == \"0\"\nassert solution(\"5\\n5\\n\") == \"10\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('5') == '10'"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n100\\n2\\n2\\n5\\n5\\n2\\n1000000000\\n1000000000 1000000000\\n') == '0\\n2\\n10\\n1000000000\\n2000000000'"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '0'\nassert solution('''5\n2\n1000000000\n10\n1000000000\n0''') == '10'\nassert solution('''4\n2\n1000000000\n10\n1000000000''') == '2000000000'\nassert solution('''3\n1000000000\n10\n1000000000''') == '1000000000'\nassert solution('''3\n1000000000\n10\n1000000000''') == '10'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '2'\nassert solution('''\n3\n1 5 8\n2 2 7\n3 3 9\n''') == '0'\nassert solution('''\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '2'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == '0\\n2\\n1'\nassert solution('1\\n10\\n12\\n') == '10\\n1'\nassert solution('1\\n100\\n200\\n') == '100\\n1'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '0\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '2'\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '10'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\nassert solution() == \"2\"\nassert solution() == \"10\""
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '0\n2\n10\n1000000000\n2000000000\n''')\n\nassert solution('''\n3\n5 2 4\n5 5 3\n4 7 8\n''') == '2\n'''"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '-1'\nassert solution('101') == '4'\n\n'''\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n\nTakahashi loves the number 7 and multiples of K.\nWhere is the first occurrence of a multiple of K in the sequence 7,77,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,777,\n777,777,777,777,777,777"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('101') == '4'"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"None\"\nassert solution(\"101\") == \"4\"\nassert solution(\"111\") == \"None\"\nassert solution(\"9\") == \"None\"\nassert solution(\"9\") == \"None\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\nassert solution('10') == '-1'\nassert solution('100') == '-1'\n\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('101') == '4'\nassert solution('123456789101112131415161718192021222324252627282930') == '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\nassert solution('1011') == '-1'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('5 5\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == str(answer)\n\n'''\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == str(4)\nassert solution(input()) == str(1)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('5 5\\n1 2 3 4 5') == '1'\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'\nassert solution('15 10\\n1 15 10 10 10 10 10 10 10 10 10') == '1'"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''7 10\n1 3 4 2 1 4 2\n''') == '2'\nassert solution('''5 16\n5 5 5 5 5\n''') == '1'\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''\n5 10\n5 5 5 5 5\n''') == '2'\nassert solution('''\n5 16\n5 5 5 5 5\n''') == '2'\nassert solution('''\n5 26\n5 5 5 5 5\n''') == '1'\nassert solution('''\n5 30\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 8'\n    '2 3 1 1 2'\n) == '4'\n\nassert solution(\n    '5 16'\n    '5 5 5 5 5'\n) == '2'\n\nassert solution(\n    '5 26'\n    '5 5 5 5 5'\n) == '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"2 3 1 1 2\\n\"\n    ) == \"4\"\n\nassert solution(\n    \"5 10\\n\"\n    \"1 3 1 1 2\\n\"\n    ) == \"2\"\n\nassert solution(\n    \"5 16\\n\"\n    \"5 5 5 5 5\\n\"\n    ) == \"1\"\n\nassert solution(\n    \"5 26\\n\"\n    \"5 5 5 5 5\\n\"\n    ) == \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\""
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''\n5 16\n5 5 5 5 5\n''') == '2'\nassert solution('''\n5 26\n5 5 5 5 5\n''') == '-1'\nassert solution('''\n5 30\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == '4'\n\nassert solution('''5 10\n1 3 4 2 1 4 2\n''') == '2'\n\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\n\nassert solution('''5 28\n5 5 5 5 5\n''') == '2'\n\nassert solution('''5 4\n2 3 1 1 2\n''') == '1'"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '1'\nassert solution('5 26') == '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'\nassert solution('''\n5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''\n5 15\n5 5 5 5 5\n''') == '2'\nassert solution('''\n5 16\n5 5 5 5 5\n''') == '1'\nassert solution('''\n5 26\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n24 21 14 10\n''') == '3'\n\nassert solution('''\n2\n500 500\n''') == '0'\n\nassert solution('''\n3\n14 5 1\n''') == '1'\n\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'\n\nassert solution('''\n1\n''') == '-1'"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n24 21 14 10\n''') == '3'\nassert solution('''\n2\n500 500\n''') == '0'\nassert solution('''\n3\n14 5 1\n''') == '1'\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n24 21 14 10\n''') == '3'\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'\nassert solution('''\n3\n14 5 1\n''') == '-1'\nassert solution('''\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n3\n7 8 8 6\n''') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n24 21 14 10\n''') == '3'\n\nassert solution('''\n2\n500 500\n''') == '0'\n\nassert solution('''\n3\n14 5 1\n''') == '-1'\n\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n24 21 14 10') == '3'\nassert solution('4\\n24 21 14 10') == '0'\nassert solution('3\\n14 5 1') == '1'\nassert solution('5\\n1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n' +\n'500 500\\n' +\n'2\\n' +\n'1 3 6 9 12\\n' +\n'2') == '0'\n\nassert solution('3\\n' +\n'14 5 1\\n' +\n'1 3 6 9 12\\n' +\n'2') == '1'\n\nassert solution('5\\n' +\n'1 3 6 9 12\\n' +\n'2') == '-1'\n\nassert solution('10\\n' +\n'24 21 14 10\\n' +\n'1 3 6 9 12\\n' +\n'2') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([\"4\", \"24 21 14 10\"]) == \"3\"\nassert solution([\"2\", \"500 500\"]) == \"0\"\nassert solution([\"3\", \"14 5 1\"]) == \"-1\"\nassert solution([\"5\", \"1 3 6 9 12\"]) == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n24 21 14 10\n\n''') == '3'\n\nassert solution('''\n2\n500 500\n\n''') == '0'\n\nassert solution('''\n3\n14 5 1\n\n''') == '1'"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"1 10 100 1000\") == \"5\"\n\nstdin = \"\"\"\n12 5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"5 6 7\") == \"6\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"6 1\") == \"2\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 15 15 15\n''') == '5'\nassert solution('''\n6 1\n36 4 1 25 9 16\n''') == '2'\nassert solution('''\n4 4\n1 10 100 1000\n''') == '4'"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\nassert solution([1, 2, 15, 15, 15, 15]) == \"5\"\nassert solution([36, 4, 1, 25, 9, 16]) == \"4\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n1 2 15 15 15\n''') == '5'\nassert solution('''\n6 1\n36 4 1 25 9 16\n''') == '2'\nassert solution('''\n4 4\n1 10 100 1000\n''') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '5'\nassert solution('6 1') == '2'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 2 15 15 15\n''') == '5'\n\nassert solution('''6 1\n36 4 1 25 9 16\n''') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 1') == '5'\nassert solution('6 1') == '4'\nassert solution('10000000') == '3000000'\nassert solution('11') == '3'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n1 2 15 15 15\n''') == '5'\nassert solution('''\n6 1\n36 4 1 25 9 16\n''') == '2'\nassert solution('''\n4 4\n1 10 100 1000\n''') == '4'\n\n\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    2\n   4\n  2\n2\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\"\n    1\n   2\n  3\n4\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 6 5\") == \"2\"\nassert solution(\"4 7 5\") == \"8\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"8\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 7\\n8 10 3 6\\n') == '8'\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 10\") == \"7\"\nassert solution(\"4 1 2\") == \"0\"\nassert solution(\"2 1 3\") == \"1\"\nassert solution(\"2 3 4 5\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 7') == '8'\nassert solution('5 10 3 6') == '8'\nassert solution('10 10 10 10') == '-1'\nassert solution('100 100 100 100') == '-1'\nassert solution('100 100 100 100') == '-1'\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"2 2 3\\n3 2 2 1\") == \"1\"\nassert solution(\"7 7 9\\n5 4 2 1\") == \"5\"\nassert solution(\"3 4 7\\n7 5 3 4\") == \"2\""
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\") == '8'\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"2 5 3\") == \"2\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"2 5 3\") == \"2\"\nassert solution(\"10 10 10\") == \"1\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"Yes\\nNo\\nYes\\nNo\\nYes\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3 4') == 'No\\nNo\\nYes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 3 4\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\\n\"\nassert solution(\"1\") == \"No\\n\"\nassert solution(\"3\") == \"Yes\\nYes\\nYes\\n\"\nassert solution(\"5\") == \"Yes\\nNo\\nYes\\n\"\nassert solution(\"10\") == \"Yes\\nNo\\nYes\\nYes\\nYes\\nYes\\nYes\\n\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4\") == \"No\"\nassert solution(\"3 3 4\") == \"Yes\""
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\") == \"No\\nNo\\nYes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3 4') == ['No', 'No', 'Yes']\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\"\nassert solution(\"6 3 4\\n4\\n1\\n2\\n3\\n\") == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n\n''') == \"YES\"\nassert solution('''\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\n''') == \"YES\"\nassert solution('''\n3 3\n0 0 0\n1 0 1\n1 1 0\n\n''') == \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == \"YES\"\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n') == \"YES\"\nassert solution('2 3\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n') == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\"\nassert solution(\"3 3\\n0 0 0\\n1 1 1\\n1 1 0\") == \"YES\"\nassert solution(\"2 2\\n1 1\\n0 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\"\nassert solution(\"3 3\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == \"YES\"\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n') == \"YES\"\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n') == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('5 5') == 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n''') == 'YES'\n\nassert solution('''\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n''') == 'YES'\n\nassert solution('''\n3 3\n0 0 0\n1 0 1\n1 1 0\n''') == 'NO'\n\nassert solution('''\n2 1\n1 1\n1 1\n''') == 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 1\n0 1\n''') == 'YES'\nassert solution('''3 3\n0 0 0\n1 0 1\n1 1 0\n''') == 'YES'\nassert solution('''5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == 'NO'\nassert solution('''7 7\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n''') == 'YES'\nassert solution('''9 9\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n\n''') == 'YES'\nassert solution('''\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\n''') == 'YES'\nassert solution('''\n3 3\n0 0 0\n1 0 1\n1 1 0\n\n''') == 'NO'\n\nassert solution('''\n1 1\n1 1\n\n''') == 'NO'\n\nassert solution('''\n1 1\n1 1\n\n''') == 'NO'"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"343\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"562\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('373') == 'Yes', \"Not completed\"\nassert solution('121') == 'No', \"Not completed\"\nassert solution('436') == 'Yes', \"Not completed\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"Yes\"\n\n\n'''\nimport unittest\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('123') == 'Yes'\nassert solution('12345') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('123456789') == 'No'\nassert solution('1234567890') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0') == 'Yes'\nassert solution('6') == 'No'\nassert solution('3') == 'Yes'\nassert solution('31') == 'No'\nassert solution('112') == 'Yes'"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'No'\nassert solution('111111111111111111111111111111111') == 'Yes'\nassert solution('11') == 'No'\nassert solution('4') == 'No'\nassert solution('32') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"371\") == \"Yes\"\nassert solution(\"120\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\nprint(solution(input()))\n\nclass Solution:\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        x = str(x)\n        x = x[::-1]\n        if x == x[::-1]:\n            return True\n        else:\n            return False\n\nprint(Solution.isPalindrome(Solution, input()))"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n'''"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == '3'\nassert solution('7 2 1\\n1 0 1 1 0 1 0\\n') == '7'\nassert solution('8 2 1\\n1 0 0 1 0 0 0 1\\n') == '8'\nassert solution('9 2 1\\n1 0 0 0 0 1 1 1\\n') == '1'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '6'\nassert solution('''6 3 1\n1 0 0 1 0 1\n''') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 2 1\\n1 0 0 1 0 1\"\n) == \"5\"\nassert solution(\n    \"6 2 1\\n1 0 0 1 0 1 1\"\n) == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''\n6 2 1\n1 0 0 1 0 1\n''') == '3'\nassert solution('''\n6 2 1\n0 1 1 1 0 1\n''') == '5'\nassert solution('''\n6 2 1\n1 0 1 1 1 0\n''') == '4'\nassert solution('''\n6 2 1\n1 1 0 0 1 1\n''') == '4'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2 1\n0 1 0 1 0\n''') == '5'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'\nassert solution('''7 2 1\n1 0 0 1 0 1 0\n''') == '7'\nassert solution('''8 2 1\n1 0 0 1 0 1 0 0\n''') == '8'\nassert solution('''9 2 1\n1 0 0 1 0 0 1 0 1\n''') == '9'"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8-7+6-5+4-3+2-1-0\n''') == '4'\nassert solution('''\n2+2\n''') == '-46'\nassert solution('''\n112-37\n''') == '375'\nprint('You pass all test cases!')\n\n'''\n--- Part Two ---\nYou decided to test a new problem during an internship at the City University of New York. It's not too late and you decided to write a program to solve this problem. The only things you need to do are:\n\n    Use an alphabetical order for your inputs (see example).\n    The program receives an array of strings as its first input.\n    Every string is separated by exactly one space.\n    Every string contains only one operand and an operator.\n    The operand is guaranteed to be an integer and is guaranteed to be between 0 and 255 (inclusive).\n    The operator is guaranteed to be either + or - (plus or minus).\n\nHere are some examples of what the program should be able to accept as its input:\n\n    -1 -2 +3 +4 -5 +6\n    2 3 + 4 5 - 6\n    3 4 + -5\n    -1 2 -3 -4 +5 -6\n    4 2 - 1 - 3 +4 -5\n    -1 2 -3 -4 + 5 6\n    -1 2 3 -4 + 5\n    -1 2 -3 + 4 5 6\n    -1 2 - 3 + 4 5 6\n    -1 2 -3 + 4 5 - 6\n    -1 - 2 + 3 - 4 + 5 - 6\n    -1 2 3 4 5 - 6 7\n\nAnd this is how the output should look like:\n\n    -4\n    1\n    3\n    -7\n\nNote that you are not required to output every single calculation. If the program is able to solve all of the examples, the output should contain all of them, along with an additional sentence that says:\n\n\"I could not solve the problem because it's not possible to get an answer in exactly the same order as the input data.\"\n\nInput\n\nInput contains several tests. Each test contains an array of strings. The strings are separated by a space.\n\nOutput\n\nOutput contains a single line. The line should contain only one integer, which is the result of the calculation.\n\nExample\n\nInput\n\nInput contains three tests. The first test contains a string \"2 3 + 4 5 - 6\".\n\nOutput\n\nOutput contains the result of the calculation:\n\n3\n\nInput\n\nInput contains three tests. The second test contains a string \"2 3 - 4 5 + 6\".\n\nOutput\n\nOutput contains the result of the calculation:\n\n-3\n\nInput\n\nInput contains two tests. The second test contains a string \"2 3 - 4 5 + 6\".\n\nOutput\n\nOutput contains the result of the calculation:\n\n-1\n\nInput\n\nInput contains two tests. The first test contains a string \"3 4 + 5 - 6 + 7 + 8\".\n\nOutput\n\nOutput contains the result of the calculation:\n\n7\n\nInput\n\nInput contains four tests. The second test contains a string \"3 4 - 5 - 6 + 7 + 8\".\n\nOutput\n\nOutput contains the result of the calculation:\n\n0\n'''\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2+2\") == \"-46\", \"Should be -46\"\nassert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\", \"Should be 4\"\nassert solution(\"112-37\") == \"375\", \"Should be 375\"\nassert solution(\"10-100\") == \"0\", \"Should be 0\"\nassert solution(\"-3+4\") == \"-7\", \"Should be -7\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('-101+100') == '-101'\nassert solution('1+1+1') == '3'\nassert solution('8+7') == '15'\nassert solution('7-2') == '5'\nassert solution('6+7') == '12'\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\", \"Wrong answer\"\nassert solution(\"2+2\") == \"-46\", \"Wrong answer\"\nassert solution(\"112-37\") == \"375\", \"Wrong answer\""
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8-7+6-5+4-3+2-1-0''') == '4'\nassert solution('''2+2''') == '-46'\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(samples.ARITHMETIC_EXPRESSION) == output\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"YES\\n1 1\\n1 1\\n\"\nassert solution(\"4 3\") == \"YES\\n1 1\\n1 3\\n1 2\\n\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"13 4\") == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('4 4') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('13 4') == 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('12 3') == 'NO'\nassert solution('15 3') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"6 3\") == \"NO\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10 4\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n13 4\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n16 4\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n16 1\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n7 2\n\"\"\") == \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4 3\\n'\n    '3 1\\n'\n    '1 3\\n'\n    '3 2\\n'\n    '2 3\\n'\n    ) == 'YES\\n'\n    \nassert solution(\n    '10 4\\n'\n    '2 1\\n'\n    '1 3\\n'\n    '4 2\\n'\n    '3 4\\n'\n    '4 3\\n'\n    '3 2\\n'\n    '2 4\\n'\n    '4 1\\n'\n    '1 4\\n'\n    '3 1\\n'\n    ) == 'YES\\n'\n    \nassert solution(\n    '13 4\\n'\n    '4 1\\n'\n    '1 4\\n'\n    '3 4\\n'\n    '4 3\\n'\n    '4 2\\n'\n    '3 4\\n'\n    '2 4\\n'\n    '4 1\\n'\n    '1 4\\n'\n    '3 1\\n'\n    ) == 'NO\\n'"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n2 1\n1 3\n3 2\n2 3\n''') == \"YES\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1 5\") == \"100\"\nassert solution(\"4 3 1\") == \"100\"\nassert solution(\"3 1\") == \"100\"\nassert solution(\"8 3 5\") == \"-1\"\nassert solution(\"9 3 1\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 5 4\n3 1 5 2 3\n''') == \"18\"\nassert solution('''\n2 5 4\n5 1 2 5 1\n''') == \"5\"\nassert solution('''\n4 5 2\n1 4 1 5 2\n''') == \"5\"\nassert solution('''\n5 4 2\n1 5 1 2 4\n''') == \"4\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"18\"\nassert solution(\"6 1 5\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 3\n5 1 3 10 1\n''') == '18', 'easy'\nassert solution('''\n6 1 5\n10 30 30 70 10 10\n''') == '-1', 'easy'\nassert solution('''\n5 5 1\n1 2 3 4 5\n''') == '-1', 'easy'"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '100'\nassert solution('4 3 1') == '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '18'"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2 3\n5 1 3 10 1\n''') == '18'\nassert solution('''\n6 1 5\n10 30 30 70 10 10\n''') == '100'\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 1\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3 1') == '100'"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 2 3'\n    ) == '18'\nassert solution(\n    '6 1 5'\n    ) == '100'\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"4\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"12 6\") == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n00100\") == \"3\"\nassert solution(\"6 1\\n000000\") == \"4\"\nassert solution(\"12 6\\n000010000100\") == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\n00100''') == '3'\nassert solution('''6 1\n000000''') == '4'\nassert solution('''12 6\n000010000100''') == '15'\nassert solution('''4 1\n0011''') == '4'\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == input()\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == str(input)"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"4\"\nassert solution(\"12 6\") == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"4\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"12 6\") == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n00100\n''') == '3'\n\nassert solution('''6 1\n000000\n''') == '4'\n\nassert solution('''12 6\n000010000100\n''') == '15'\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 1') == '4'\nassert solution('12 6') == '15'\nassert solution('4 1') == '4'\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('azzel') == 'apple'\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('apple') == 'apple'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('appel') == 'apple'\nassert solution('appel') == 'appel'\nassert solution('appel') == 'appel'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('abcdefg') == 'efgabcd'\nassert solution('abcdefg') == 'abcdefg'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('azzel') == 'apple'\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"azzel\") == \"apple\"\nassert solution(\"apple\") == \"azzel\"\nassert solution(\"eazzle\") == \"eazzle\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'apple'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('zzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'apple'\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n1\\n\") == \"YES\"\nassert solution(\"4\\n2\\n2\\n\") == \"YES\"\nassert solution(\"4\\n2\\n3\\n\") == \"NO\"\nassert solution(\"4\\n2\\n3\\n\") == \"NO\"\nassert solution(\"2\\n1\\n2\\n\") == \"YES\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10\\n10\\n5\\n3\\n3\\n4\\n2\\n3') == 'YES'\nassert solution('10\\n10\\n5\\n2\\n3\\n3\\n4\\n2\\n3') == 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"5 3\") == \"7\"\n\nstdin = \"\"\nfor i in range(5):\n    stdin += input()\n\nprint(solution(stdin))"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 5') == '7'\nassert solution('2 0 5') == '10'\nassert solution('2 1 5') == '9'\nassert solution('2 1 6') == '10'\nassert solution('2 2 2') == '5'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0\\n1\\n0\\n1') == '1'\nassert solution('4\\n0\\n1\\n0\\n1') == '1'\nassert solution('4\\n0\\n1\\n0\\n0') == '2'\n\nstdin = '6\\n0\\n0\\n0\\n0\\n0'\nfor line in stdin.split('\\n'):\n    print(solution(line))"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n2\\n2\\n1\\n4\\n\") == \"6\"\nprint('ok')\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n3 4 1 5\\n2 3 1') == '-1'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2\\n1\\n1\\n1') == 'YES'\nassert solution('3\\n1 1 1\\n1\\n1\\n1\\n1') == 'YES'\nassert solution('3\\n0 1 1\\n1\\n1\\n1\\n1') == 'NO'\nassert solution('3\\n0 1 1\\n1\\n0\\n1\\n1') == 'YES'\nassert solution('3\\n0 1 1\\n1\\n0\\n1\\n1') == 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 4 1') == '1'\nassert solution('6\\n1 3 1 3 2 1') == '3'\nassert solution('7\\n1 5 1 3 2 1') == '3'\nassert solution('8\\n1 7 1 3 2 1') == '3'\nassert solution('20\\n1 3 1 3 2 1') == '2'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n3\\n2\\n10\\n5\\n7\\n') == '4'\nassert solution('3\\n1\\n3\\n2\\n10\\n5\\n7\\n') == '4'\nassert solution('2\\n1\\n3\\n2\\n5\\n7\\n') == '2'\nassert solution('3\\n1\\n3\\n2\\n6\\n7\\n') == '3'\nassert solution('2\\n1\\n3\\n2\\n7\\n5\\n6\\n') == '4'\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 700') == '3'\nassert solution('3 500') == '5'\nassert solution('5 800') == '3'\n'''"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 700\") == \"3\"\nassert solution(\"10 100\") == \"5\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"2 200\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"10 100\\n1 50\\n2 200\\n4 400\") == \"4\"\nassert solution(\"5 100\\n3 20\\n1 20\\n1 20\\n1 20\") == \"4\""
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"2 201\\n3 100\\n5 400\") == \"2\"\nassert solution(\"1 10\\n2 5\\n4 6\\n7 6\") == \"5\"\nassert solution(\"20 100\\n50 200\\n100 250\\n50 300\\n100 1000\\n10 1000\") == \"4\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 100\") == \"0\"\nassert solution(\"5 800\") == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"3\"\nassert solution(\"2 7\") == \"2\"\nassert solution(\"2 10\") == \"1\"\nassert solution(\"3 20\") == \"4\"\nassert solution(\"3 100\") == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 700\n3 500\n5 800''') == '3'\nassert solution('''2 500\n3 500\n5 800''') == '4'\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 700\\n3 500\\n5 800\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"2 300\\n3 300\\n5 800\") == \"2\"\nassert solution(\"1 4\\n10 4\\n15 8\") == \"4\"\nassert solution(\"5 10\\n1 3\\n7 5\\n9 9\") == \"2\"\nassert solution(\"1 8\\n10 4\\n15 8\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == '2'\nassert solution('8') == '3'\nassert solution('9') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"7\\n\"\n    \"5 5 4 5 5 5 6\\n\"\n) == \"2\"\n\nassert solution(\n    \"8\\n\"\n    \"4 8 8 7 8 4 4 5\\n\"\n) == \"3\"\n\nassert solution(\n    \"9\\n\"\n    \"2 3 4 2 2 3 2 2 4\\n\"\n) == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"3\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 4 5\n''') == '2'\nassert solution('''9\n2 3 4 2 2 3 2 2 4\n''') == '3'\nassert solution('''8\n4 8 8 7 8 4 4 5\n''') == '3'\nassert solution('''6\n2 3 4 5 5 5 6\n''') == '1'\nassert solution('''5\n2 3 4 5 5 6\n''') == '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"8\") == \"3\"\nassert solution(\"9\") == \"4\""
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 5 4 5 5 5 6\n''') == '2'\n\nassert solution('''\n8 4 8 7 8 4 4 5\n''') == '3'\n\nassert solution('''\n9 2 3 4 2 2 3 2 2 4\n''') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n5 5 4 5 5 5 6\n''') == '2'\nassert solution('''\n8\n4 8 8 7 8 4 4 5\n''') == '3'\nassert solution('''\n9\n2 3 4 2 2 3 2 2 4\n''') == '3'"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\nassert solution('''7\n5 5 4 5 5 5 6\n''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5\n''') == '3'\nassert solution('''9\n2 3 4 2 2 3 2 2 4\n''') == '3'\nassert solution('''10\n1 1 2 3 3 4 5 6 7\n''') == '3'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 4 5\\n1 2 3\") == \"18\"\nassert solution(\"3\\n4 5 3\\n1 1 1 1\") == \"100\"\nassert solution(\"10\\n1 10 1 10 10 10 1\\n2 1 1 2 2 3\") == \"21\"\nassert solution(\"15\\n1 5 1 5 1 5 1\\n3 1 3 1 3 2\") == \"15\""
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1') == '2', \"Easy case\"\nassert solution('3 3 1') == '-1', \"Hard case\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '-1'\nassert solution('4 3 1') == '100'"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '100'"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2 3\n5 1 3 10 1\n''') == '18'\nassert solution('''\n6 1 5\n10 30 30 70 10 10\n''') == '100'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 2 3\n5 1 3 10 1\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5 2 3\n1 1 3 10 1\n\"\"\") == \"100\"\nassert solution(\"\"\"\n3 1 5\n1 1 1 1 1\n\"\"\") == \"100\""
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2 3\n5 1 3 10 1\n\"\"\") == \"18\"\nassert solution(\"\"\"\n6 1 5\n10 30 30 70 10 10\n\"\"\") == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2 3\") == \"18\"\nassert solution(\"4 1 5\") == \"100\"\nassert solution(\"5 10 3\") == \"14\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '100'"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10\n''') == '100'\nassert solution('''4 3 1\n1 100 1 1\n''') == '100'\nassert solution('''5 2 3\n5 1 3 10 1\n''') == '-1'\nassert solution('''6 1 5\n10 30 30 70 10 10\n''') == '-1'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'No'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"100\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == 'Yes'\nassert solution('1') == 'No'\nassert solution('5') == 'Yes'\nassert solution('100') == 'No'\n'''"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'No'\nassert solution('11\\n') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\", \"Sample Test Failed\"\nassert solution(\"3\") == \"No\", \"Sample Test Failed\"\nassert solution(\"13\") == \"No\", \"Sample Test Failed\"\nassert solution(\"18\") == \"Yes\", \"Sample Test Failed\"\nassert solution(\"19\") == \"Yes\", \"Sample Test Failed\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n''') == 'No'\nassert solution('''\n9\n''') == 'Yes'\nassert solution('''\n15\n''') == 'Yes'\nassert solution('''\n99\n''') == 'Yes'\nassert solution('''\n50\n''') == 'Yes'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 5\n1 2 5\n3 2 5\n''') == '1 2 5'"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n2 3 5\n2 1 5\n1 2 5\n3 2 5''') == '2 2 6'"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2 2 6'"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n2 3 5\n2 1 5\n1 2 5\n3 2 5''') == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 5\n2 1 5\n2 1 5\n3 2 5\n3 2 5\n''') == \"2 2 6\"\nassert solution('''5\n1 2 3\n1 2 2\n1 2 3\n1 2 4\n1 2 5\n1 3 2\n1 3 3\n1 3 4\n1 3 5\n1 4 2\n1 4 3\n1 4 4\n1 4 5\n1 5 2\n1 5 3\n1 5 4\n1 5 5\n1 6 2\n1 6 3\n1 6 4\n1 6 5\n1 6 6\n''') == \"2 2 5\"\n\n---Time Limit Exceeded---\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3\\n2 3 2\\n3 2 2\\n1 2 1\\n1 2 1\") == \"2 2 4\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\nassert solution('3\\n-1 -1 2\\n-1 -1 3\\n-1 -1 4\\n5\\n4 3 4\\n4 4 2 4\\n4 2 1 4') == '-1 -1 2'\nassert solution('5\\n-1 -1 2\\n-1 -1 3\\n-1 -1 4\\n-1 -1 5\\n4\\n3 3 4\\n3 4 2 4\\n3 2 1 4') == '-1 -1 2'"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n5 6\n8 7\n7 6\n''') == '2 2 6'\nassert solution('''\n1\n2 1\n2 2\n''') == '2 2 2'"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == '3 4 5'\nassert solution(\"2 3 5\") == '2 3 5'\nassert solution(\"1 2 5\") == '1 2 5'\nassert solution(\"3 4 5\") == '3 4 5'\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == \"1\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('redcoder') == '1'\nassert solution('aab') == '2'\nassert solution('redcoder') == '1'\n\n----Hints----\n1. If you have another idea for solution, feel free to type it down below and share it.\n2. It is guaranteed that there will be only one unique solution.\n'''\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('redcoder') == '1'\nassert solution('abab') == '1'\nassert solution('abccba') == '1'\nassert solution('ababcd') == '2'\nassert solution('ababcdababcd') == '1'\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('redcoder') =='redcodeer'\nassert solution('abcde') == 'abcdee'\nassert solution('rccbcc') == 'abccee'\n\nWhat if the last character is a special character (e.g.?, $, #)? Then change the character as many as possible.\n\nFor example, we can change the sixth character to p and get a palindrome redoPd.\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('redcoder') == '1'\nassert solution('abcdefghijklmnopqrstuvwxyz') == '1'\nassert solution('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == \"1\"\nassert solution(\"xaxby\") == \"1\"\nassert solution(\"abxabcd\") == \"2\"\nassert solution(\"abcda\") == \"2\"\nassert solution(\"abcdab\") == \"2\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('redcoder') == '1'\n\n'''\n\nimport sys"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('redcoder') == '1'\nassert solution('abc') == '2'\nassert solution('redcoder') == '1'\nassert solution('redcoder') == '1'\n'''"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('redcoder') == '1'\nassert solution('edba') == '0'\nassert solution('redcoder') == '1'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'No'\nassert solution('10') == 'Yes'\nassert solution('11') == 'No'\nassert solution('9999') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == 'Yes'\nassert solution('3') == 'No'\nassert solution('20') == 'Yes'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\n\n\"\"\"\n\nnum = int(input())\nfor i in range(1, 10):\n    for j in range(1, 10):\n        print(\"{}*{}={}\".format(i, j, i*j), end=' ')\n    print()\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\nassert solution('7') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'Yes'\nassert solution('8') == 'No'\nassert solution('16') == 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'Yes'\nassert solution('10') == 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == 'No'\nassert solution('1') == 'Yes'"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n4 4 9 7 5\n''') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"14\"\nassert solution(\"100\") == \"1196743290\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n4 4 9 7 5\n''') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 4 9 7 5\n''') == '5'\nassert solution('''6\n4 4 9 7 5\n''') == '0'\nassert solution('''5\n10 10 10 10 10\n''') == '0'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n4 4 9 7 5\n''') == \"5\"\nassert solution('''\n1\n1 1\n''') == \"0\"\nassert solution('''\n3\n1 2\n''') == \"0\"\nassert solution('''\n4\n4 4 9 7 5\n''') == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"3\"\nassert solution(\"15\") == \"6\"\nassert solution(\"100\") == \"2494820\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 9 7 5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 5\\n9 7\\n5\") == \"5\"\nassert solution(\"4\\n4 5\\n9 7\\n5\") == \"5\"\nassert solution(\"4\\n4 5\\n9 7\\n7\") == \"3\"\nassert solution(\"4\\n4 5\\n9 7\\n9\") == \"4\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('100') == '50000'\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''2 5\n10\n2 \\times 5 = 10.\n''') == '10'\nassert solution(\n'''1 1\n1\n2\n10\n''') == '-1'\n'''"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"1 2\") == \"1.5\"\nassert solution(\"0 0\") == \"0.0\"\nassert solution(\"1 2.5\") == \"2.0\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2\\n\"\n    \"5 6\"\n) == \"10\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"1 2\") == \"2\"\n\n--------------------------------------------------------------------------------------------------------------------\n\nTask\n\nYou are given a space separated list of integers. If all the integers are positive, then you need to check if\nthe sum of all the integers is equal to a given number.\nIf any integer is negative, then the sum is not equal to the given number.\nIf none of the integers are positive or negative, then return \"Negetive\" (without the quotes).\nNote: You will not need to handle empty list.\n\nInput Format\nA single line containing space separated integers.\n\nConstraints\n\nOutput Format\nThe output to the standard output is in the following format:\n\n\"Negetive\" or\nThe sum of all the integers is not equal to num.\n\nSample Input\n1 2 3\nSample Output\n\"Negetive\"\n\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 5\") == \"10\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '10'\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\nassert solution('3 5') == '3'\nassert solution('-1 -2') == '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\\n2\\n\"\nassert solution(\"2 5\") == \"10\\n\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"1 1\\n1\") == \"0\""
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"3 7\\n3 4 1 5 2 9 6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"10 12 1 2 14\") == \"9\"\nassert solution(\"20 20\") == \"20\"\n\n'''\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"2 7\") == \"6\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"2 6\") == \"1\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\\n\") == \"5\"\nassert solution(\"2 5\\n0 0 0 0 0\\n\") == \"0\"\nassert solution(\"2 5\\n0 1 2 3 4\\n\") == \"5\"\nassert solution(\"3 3\\n0 0 0\\n1 1 1\\n2 2 2\\n\") == \"4\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"5 5\\n1 2 3 4 5 6 7 8 9 10\\n3 4 5 6 7 8 9 10 11 12\") == \"8\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '5'\nassert solution('3 1') == '1'\nassert solution('2 1') == '2'\nassert solution('3 0') == '3'\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution(\"4 4 3\") == \"1110\"\nassert solution(\"5 6 2\") == \"110110\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '10'\nassert solution('1 2') == '10'\nassert solution('1 2') == '10'\nassert solution('1 2') == '10'\nassert solution('1 2') == '10'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4 3') == '2'\nassert solution('4 6 3') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6 2') == '1'\nassert solution('3 3') == '111'\nassert solution('4 5') == '1110'"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4 3\") == \"2\"\nassert solution(\"5 6 2\") == \"1\"\nassert solution(\"7 8 6\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"4 5 3\") == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\") == \"2\"\nassert solution(\"4 6 3\") == \"1\"\nassert solution(\"5 6 2\") == \"2\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n''') == \"2\"\nassert solution('''\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4 3\n1 2\n2 3\n1 4\n4 3\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 3\n1 2\n2 3\n1 4\n4 3\n''') == '2'\n\nassert solution('''\n4 6 3\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n4 3\n''') == '1110'\nassert solution('''4 6 3\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == '110110'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 5 3\n''') == \"YES\"\nassert solution('''\n2\n10 10\n''') == \"YES\"\nassert solution('''\n3\n1 2 3\n''') == \"NO\"\nassert solution('''\n3\n1 2 3\n''') == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 1 1 2 5\n\n''') == \"YES\"\nassert solution('''3\n1 2 3\n\n''') == \"NO\"\nassert solution('''2\n10 10\n\n''') == \"YES\"\nassert solution('''3\n1 2 3\n\n''') == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n\n''') == 'YES'\nassert solution('''\n3\n4 5 3\n\n''') == 'YES'\nassert solution('''\n2\n10 10\n\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n\n''') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('2\\n10 10') == 'YES'\n\n'''\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3\n''') == 'YES'\nassert solution('''\n2\n10 10\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n''') == 'NO'\nassert solution('''\n3\n1 2 3\n''') == 'YES'\nassert solution('''\n4\n5 3 3\n''') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1 1 1 2 5''') == \"YES\"\nassert solution('''3\n4 5 3\n''') == \"YES\"\nassert solution('''2\n10 10\n''') == \"YES\"\nassert solution('''3\n1 2 3\n''') == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 2, 1, 2, 5]) == \"YES\"\nassert solution([3, 4, 5, 1, 2, 3, 4]) == \"YES\"\nassert solution([2, 10, 10]) == \"YES\"\nassert solution([3, 3, 2]) == \"NO\"\nassert solution([2, 1]) == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n4\n2 1 1 2 5\n'''\n) == 'YES'\n\nassert solution(\n'''\n3\n1 2 3\n'''\n) == 'NO'\n\nassert solution(\n'''\n2\n10 10\n'''\n) == 'YES'\n\nassert solution(\n'''\n3\n1 2 3\n'''\n) == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5,2,1,2,5]) == 'YES'\nassert solution([3,4,3]) == 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2 1 1 2 5\n\n''') == 'YES'\nassert solution('''3\n1 2 3\n\n''') == 'NO'\nassert solution('''2\n10 10\n\n''') == 'YES'\nassert solution('''3\n1 2 3\n\n''') == 'NO'"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10 2\n-2 -1 -3 -4 -5 -6 -7 -8 -9 -10\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n1000000000 2\n-1 0 0 0 0\n
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4999999999996\"\nassert solution(input_string=\"1000000000000 5\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000000000000 5') == '9999999999996'\nassert solution('10 4') == '99999998999999'"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1000000') == '99999999'\nassert solution('10 10') == '-1'\nassert solution('10 -1') == '0'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\nassert solution(\"10 4\") == \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == \"4999999999996\"\nassert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '-1'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'AB'\nassert solution(input()) == 'ZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == 'AB'\nassert solution('5') == 'ZZ'\nassert solution('ZZZAA') == 'ZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7') == 'AB'\nassert solution('5') == 'ZZ'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\n\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'AA'\nassert solution('5') == 'ZZ'\nassert solution('7') == 'AB'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"ZZ\"\nassert solution(\"7\") == \"AB\"\nassert solution(\"12\") == \"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"AB\"\nassert solution(\"5\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nZZZAA') == 'ZZ'\nassert solution('7\\nABACABA') == 'AB'\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('b') == 'b'\nassert solution('west') == 'e'\nassert solution('test') == '2'\nassert solution('yes') == 'e'\nassert solution('codeforces') == 'e'\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('west') == 2\nassert solution('test') == 9\nassert solution('yes') == 7\nassert solution('b') == 1\n\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"west\"\nassert solution(\"codeforces\") == \"yes\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"west\") == 2\nassert solution(\"test\") == 9\nassert solution(\"b\") == 1"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 9\nassert solution(\"b\") == 1"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"1\"\nassert solution(\"test\") == \"2\"\nassert solution(\"yes\") == \"1\"\nassert solution(\"b\") == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('west') == 'here'\nassert solution('codeforces') == 'es'\nassert solution('b') == 'est'"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('west') == 2\nassert solution('codeforces') == 8\nassert solution('test') == 7\nassert solution('yes') == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 9\nassert solution(input()) == 7\nassert solution(input()) == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\"ab\", \"ab\"]) == \"b\"\nassert solution([\"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"10 10\") == \"7\"\nassert solution(\"10 10\") == \"7\""
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 7 11\n''') == \"2\"\nprint(solution('''3 3\n1 7 11\n'''))"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\nassert solution(\"1 2\\n4 5 6\") == \"1\"\nassert solution(\"5 5\\n5 5 6\\n5 5 7\\n5 5 8\\n5 5 9\") == \"2\"\nassert solution(\"1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\") == \"1\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\nassert solution('3 3\\n1 2 3\\n') == '2'\nassert solution('3 3\\n2 3 3\\n') == '1'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 1 2') == '2'\nassert solution('10 2 2 2 2 1 1 3') == '4'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '2'\nassert solution('10 10') == '2'\nassert solution('0 10') == '0'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"10 10\") == \"4\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\n-----Hint:-----\n1. A D will be used to mark a city as visited. So, if we visited the city twice, we will get a D value of 2 for that city.\n2. We need to find the maximum value of D that enables us to visit all the cities.\n3. The answer is the maximum D.\n4. We can solve this problem using Dynamic Programming.\n5. The below is the dynamic programming solution."
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 7 11\n''') == '2'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('kasaka') == 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"babagiri\") == \"No\"\nassert solution(\"cabbage\") == \"Yes\"\nassert solution(\"bacab\") == \"No\"\nassert solution(\"aaaaa\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('akasaka') == 'Yes'\nassert solution('akshakka') == 'Yes'\nassert solution('abakalaka') == 'Yes'\nassert solution('abakalakka') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"akasaka\") == \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('akasaka') == 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('akasaka') == 'Yes'\nassert solution('akasakaab') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\naaa\n''') == 'Yes'\nassert solution('''\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('mihail') == 'No'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.10') == '217', solution\nassert solution('198 1.10') == '217', solution\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0.1\\n\") == \"0\"\nassert solution(\"1.1\\n\") == \"1\"\nassert solution(\"-0.1\\n\") == \"-1\"\nassert solution(\"1.0\\n\") == \"1\"\nassert solution(\"1.1\\n\") == \"1\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n__import__('print').print(solution(__import__('sys').stdin))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"217\"\nassert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\""
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('198 1.10') == '217'\nassert solution('1 2') == '2'\nassert solution('1.2') == '2'\nassert solution('1.2.3') == '2'\nassert solution('1.2.3.4') == '2'\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\""
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"1 2.01\") == \"2\"\nassert solution(\"1.001 1.001\") == \"2\"\nassert solution(\"0.01 1.01\") == \"1\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0.0\") == \"0\"\nassert solution(\"1.0000\") == \"1\"\nassert solution(\"2.0000\") == \"2\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\nimport math\n\nprint(int(math.trunc(198*1.1)))"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"2\\n5\") == \"1\"\nassert solution(\"3\\n7\") == \"0\"\nassert solution(\"4\\n100\") == \"0\"\nassert solution(\"5\\n2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '3'\nassert solution('7') == '0'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n3\n4\n3\n10\n''') == \"3\"\nassert solution('''\n5\n3\n5\n4\n5\n''') == \"4\"\nassert solution('''\n4\n2\n8\n8\n''') == \"0\"\nassert solution('''\n5\n3\n4\n3\n5\n''') == \"1\"\nassert solution('''\n6\n5\n4\n3\n1\n1\n''') == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6\n1\n2\n3\n2000000000\n763243547''') == '3'\nassert solution('''6\n1\n2\n3\n0\n763243547''') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n7\n1\n2\n3\n2000000000\n763243547\n''') == '3'\nassert solution('''\n6\n7\n1\n2\n3\n2000000000\n763243547\n''') == '0'\nassert solution('''\n5\n6\n1\n2\n3\n2000000000\n763243547\n''') == '1'\nassert solution('''\n5\n6\n1\n2\n3\n2000000000\n763243547\n''') == '999999999'\nassert solution('''\n4\n7\n1\n2\n3\n2000000000\n763243547\n''') == '381621773'"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('8') == '0'\nassert solution('7') == '1'\nassert solution('2') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n7\n1\n2\n3\n2000000000\n763243547\n''') == '3', \"First\"\nassert solution('''\n3\n3\n1\n2\n3\n2000000000\n763243547\n''') == '0', \"Second\"\nassert solution('''\n6\n7\n1\n2\n3\n2000000000\n763243547\n''') == '3', \"Third\"\nassert solution('''\n6\n3\n1\n2\n3\n2000000000\n763243547\n''') == '1', \"Fourth\"\nassert solution('''\n6\n4\n1\n2\n3\n2000000000\n763243547\n''') == '0', \"Fifth\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n3\n2\n1\n2000000000''') == '3'\nassert solution('''5\n7\n4\n3\n2\n1\n763243547''') == '0'\nassert solution('''6\n1\n1\n1\n1\n1\n1''') == '1'\nassert solution('''6\n1\n1\n1\n1\n1\n1''') == '1'\nassert solution('''3\n3\n1\n2''') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n7\") == \"3\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7\n1\n2\n3\n4\n5\n6\n7''') == '3'\nassert solution('''7\n1\n2\n3\n4\n5\n6\n7''') == '0'\nassert solution('''10\n5\n1\n2\n3\n4\n5\n6\n7''') == '3'\nassert solution('''5\n1\n2\n3\n4\n5\n6''') == '0'\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"2\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    4 4 5\n    1 2\n    2 3\n    3 4\n    4 1\n    '''\n    ) == '3'\n\nassert solution(\n    '''\n    5 4 5\n    1 2\n    2 3\n    3 4\n    4 1\n    '''\n    ) == '1'"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4 5\n1 2\n2 3\n3 4\n4 1\n''') == '1'\n\nassert solution('''5 4 5\n1 2\n2 3\n3 4\n4 1\n5 6\n6 1\n1 8\n9 8\n7 1\n''') == '3'\n\nassert solution('''10 5 5\n1 2\n2 3\n3 4\n4 1\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n''') == '0'"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2\") == \"1\"\nassert solution(\"5 4 5\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2 3\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 4 5\n1 2\n2 3\n3 4\n4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 2\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n''') == '3'\nassert solution('''\n\n5 4 5\n1 2\n2 3\n3 4\n4 1\n''') == '1'\n'''"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n''') == '3'\n\nassert solution('''\n5 4 5\n1 2\n2 3\n3 4\n4 1\n''') == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4 5\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"3 4\") == \"1\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 4 1') == '4'\nassert solution('6') == '5'\nassert solution('6') == '5'"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n3 2 4 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6\n1 1 1 4 4 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\n1 1 1 4 4 4\n\"\"\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\""
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 2 4 1\n''') == \"4\"\nassert solution('''\n6\n1 1 1 4 4 4\n''') == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 2 4 1\n''') == '4'\nassert solution('''\n6\n1 1 1 4 4 4\n''') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3 2 4 1\n''') == '4'\nassert solution('''6\n1 1 1 4 4 4\n''') == '5'"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\\n\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\\n\") == \"5\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"000001000002\"\nassert solution(\"1 32\") == \"000002000001\"\nassert solution(\"2 63\") == \"000001000001\"\n\n---\n* solution(input_text) - \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0435\u0448\u0430\u044e\u0449\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0443\n* \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N, M\n* \u043e\u0442 1 \u0434\u043e N, M\n* \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e M\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0442 1 \u0434\u043e N\n* \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\ufffd"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001\\n'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\nassert solution(\"1 2\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"000001000002\"\nassert solution(\"4 5\") == \"000002000001\"\nassert solution(\"6 7\") == \"000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"000001000002\\n000002000001\\n000001000001\"\n\n'''\n\nfrom itertools import product\n\nN, M = map(int, stdin.readline().split())\nprefectures = list(map(int, stdin.readline().split()))\nassert len(prefectures) == N\ncities = []\nfor i in range(M):\n    city = list(map(int, stdin.readline().split()))\n    cities.append(city)\n\nprefectures.sort()\ncities.sort(key=lambda x: (x[0], x[1]))\ncities.sort(key=lambda x: x[2])\n\nprefectures = [\"{:06d}\".format(p) for p in prefectures]\n\nfor i in range(1, len(prefectures)):\n    prefectures[i] = prefectures[i][:6] + \"0\" + prefectures[i][6:]\n\ncities = [\"{:06d}\".format(c) for c in cities]\n\nfor p in product(*[[str(int(prefectures[i])) for i in range(len(prefectures))], *cities]):\n    print(\"\".join(p))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '000001000002'\nassert solution('3 2') == '000002000001'\nassert solution('3 3') == '000001000001'\n\n------------------------------------------------------------\n\nDescription:\nGiven a string of numbers and letters, the task is to write a program that accepts the string from the user and prints the numeric and alphabetical characters separately.\n\nExamples:\nInput: abc\nOutput:\n    a = 1\n    b = 2\n    c = 3\n\nInput: a1b2c3\nOutput:\n    a = 1\n    b = 2\n    c = 3\n\nInput: abcde\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n\nInput: abcdef\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n\nInput: abc1def\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n\nInput: abc1defghi\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n\nInput: abc1defghi1\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n\nInput: abc1defghij\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    j = 10\n\nInput: abc1defghijk\nOutput:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    k = 10\n\n------------------------------------------------------------\n\nDescription:\nWrite a program that accepts a string as input and prints the numeric characters and alphabetic characters separately.\n\nSample Input:\nabc\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n\nSample Input:\na1b2c3\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n\nSample Input:\nabcdef\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n\nSample Input:\nabcdefghi\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n\nSample Input:\nabcdefghij\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    j = 10\n\nSample Input:\nabcdefghijk\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    k = 10\n\nSample Input:\nabcdefghijklmn\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    j = 10\n    k = 11\n    l = 12\n\nSample Input:\nabcdefghijk1lmn\n\nSample Output:\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    j = 10\n    k = 11\n    l = 12\n    m = 13\n    n = 14\n\n------------------------------------------------------------\n\nDescription:\nYou are given a list of words and your task is to print all duplicate words in the list.\n\nSample Input:\nMy name is Abdul\nI like programming\nMy likes are C++, C, Python, Java, C#, and JavaScript\n\nSample Output:\nI like programming\nMy name is Abdul\n\n-----------------------------------------------------------\n\nDescription:\nGiven a list of strings, the task is to print all the words that are common in all the strings.\n\nSample Input:\nHello, my name is Abdul\nmy name is Abdul\nHello, my name is John\nHello, my name is David\n\nSample Output:\nHello, my name is Abdul\n\n-----------------------------------------------------------\n\nDescription:\nYou are given a list of words and your task is to print all words that have more than one letter.\n\nSample Input:\nThis is a sentence\nThis is a sentence\n\nSample Output:\nThis is\n\n-----------------------------------------------------------\n\nDescription:\nGiven a string S and a character C. Find the length of the longest substring with every character of the alphabet.\n\nSample Input:\nABCDCDC\nc\n\nSample Output:\n4\n\n-----------------------------------------------------------\n\nDescription:\nYou are given a list of words and your task is to print all words that have length greater than or equal to N.\n\nInput:\n4\nHello\nworld\nPython\nHello\n\nOutput:\nHello\nPython\n\n-----------------------------------------------------------\n\nDescription:\nGiven a string, find the length of the longest substring which is also a palindrome.\n\nSample Input:\nabcdcba\n\nSample Output:\n1\n\n-----------------------------------------------------------\n\nDescription:\nThe task is to print all the words and their lengths that are of a given length.\n\nSample Input:\n10\n\nSample Output:\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nj = 10\n\n-----------------------------------------------------------\n\nDescription:\nYou are given a list of words and your task is to print all words that have length greater than or equal to N.\n\nInput:\n5\nHi\nHello\n\nSample Output:\nHi\nHello\n\n-----------------------------------------------------------\n\nDescription:\nYou are given a string S and your task is to print all words that have length greater than or equal to N.\n\nInput:\n10\n\nSample Output:\na = 1\nb = 2\nc = 3\nd = 4\ne = 5\nf = 6\ng = 7\nh = 8\ni = 9\nj = 10"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"000001000002\"\nassert solution(\"2 3\") == \"000002000001\"\nassert solution(\"1 12\") == \"000001000001\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3 2 4\") == \"4\"\nassert solution(\"4\") == \"2\"\nassert solution(\"4 3 5\") == \"2\"\nassert solution(\"3 2 4 5\") == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(['4', '2 10 8 40']) == '2'\nassert solution(['5', '1 2 4 6 8']) == '4'\nassert solution(['10', '1 1 1 1 1 1 1 1 1 1']) == '10'\nassert solution(['3', '1 1 1 1 1 1 1 1 1']) == '0'\nassert solution(['6', '1 1 1 1 1 1 1 1 1 1']) == '4'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n10 20 30 50\n''') == '1'\nassert solution('''2\n10 20\n''') == '0'\nassert solution('''4\n10 20 30 50\n''') == '2'\nassert solution('''4\n10 20 40 50\n''') == '1'\nassert solution('''8\n10 20 30 50 40 50 30 40 10\n''') == '1'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1'\nassert solution('2 3 4 5') == '2'\nassert solution('3 4 5 6') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\nassert solution('1\\n100') == '100'\nassert solution('1\\n100') == '100'\nassert solution('1\\n100') == '100'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 10 8 40\\n') == '2'"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(?(__-_+_/_____):-__>__,_____<__. ) == \"0010\"\nassert solution(?(__-_+_/_____):-__>__,_____<__. ) == \"false\"\nassert solution(?(__-_+_/_____):-__>__,_____<__. ) == \"0101\"\nassert solution(?(__+___+__-___):-__<___,___<____,____<_____,_____<______,______<_______. ) == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\nassert solution('?(__+___+__-___):-___>__.\\n') == '0101'\n\n'''"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"?(_-/___*__):-___>__.\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\").startswith(\"false\")\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\") == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"false\"\nprint(solution(input))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n?(__+___+__-___):-__>__,_____>__>__>__>__>__>__>__>\"\n    ) == \"0250341\"\nassert solution(\n    \"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n?(__+___+__-___):-__>__,_____>__>__>__>__>__>__>\"\n    ) == \"false\"\nassert solution(\n    \"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n?(__+___+__-___):-__>__,_____>__>__>__>__>__>__>\"\n    ) == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\""
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\nassert solution('?(__+___+__-___):-___>__.\\n') == '0101'\nassert solution('?(___+____+___):-___>__.\\n') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\nassert solution('?(__+___+__-___):-___>__.\\n') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''?(_-_/___*__):-___>__.\n\nOutput\n0010''') == '0010'\nassert solution('''?(__-_+_/_____):-__>__,_____<__.\n\nOutput\nfalse''') == 'false'\nassert solution('''?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nOutput\n0250341''') == '0250341'\nassert solution('''?(__+___+__-___):-___>__.\n\nOutput\n0101''') == '0101'\n\nprint(solution('''?(_-_/___*__):-___>__.\n\nOutput\n0010'''))\nprint(solution('''?(__-_+_/_____):-__>__,_____<__.\n\nOutput\nfalse''') )\nprint(solution('''?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\nOutput\n0250341''') )\nprint(solution('''?(__+___+__-___):-___>__.\n\nOutput\n0101''') )"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\nassert solution('3 4 10000000000000000001') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4\n''') == \"3\"\n\nassert solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == \"5\"\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == \"0\"\n\nassert solution('''4 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == \"0\"\n\nassert solution('''4 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == 'codeforces'\nassert solution('16') == 'thisisexampletwo'\nassert solution('1') == 'z'"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'ce'\nassert solution('3') == 'pe'\nassert solution('4') =='me'\nassert solution('5') =='re'\nassert solution('6') =='se'\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == 'hearts'\nassert solution('10') == 'codeforces'\nassert solution('1') == 'z'\n\n\n'''"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'z'\nassert solution('10') == 'codeforces'\nassert solution('16') == 'plmaetwoxesisiht'\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"codeforces\"\nassert solution(\"16\") == \"thisisexampletwo\"\nassert solution(\"1\") == \"z\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"a\"\nassert solution(\"10\") == \"codeforces\"\nassert solution(\"16\") == \"thisisexampletwo\"\nassert solution(\"1\") == \"z\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\nz\n''') == 'z'\nassert solution('''3\nhelloz\n''') == 'helloz'\nassert solution('''5\nhellozthisisz\n''') == 'hellozthisisz'\nassert solution('''10\nrocesfedoc\n''') == 'codeforces'"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''plmaetwoxesisiht''') == 'thisisexampletwo'\nassert solution('''z''') == 'z'\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\""
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 14\n    ''') == '19'\nassert solution('''381 492\n    ''') == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 14\n    ''') == '19', \"Should return 19\"\nassert solution('''381 492\n    ''') == '873', \"Should return 873\"\n''')\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 14') == \"19\"\nassert solution('381 492') == \"873\"\n\nstdin = \"\"\"5 14\n\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"++>\", \"Basic test\"\nassert solution(\"9-7\") == \"+++++++++>\", \"Basic test\"\nassert solution(\"9-7\") == \"+++++++>\", \"Basic test\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3+5\") == \"++>\", \"Test 1 failed\"\nassert solution(\"9-7\") == \"<[<->-]<\", \"Test 2 failed\"\n\"\"\"\n\nfrom typing import List\nimport sys\n\n\nclass Program:\n    def __init__(self, code: List[str]):\n        self.code = code\n        self.memory = []\n        self.pc = 0\n        self.rel_base = 0\n        self.ip = 0\n        self.eip = 0\n        self.done = False\n        self.loop_stack = []\n        self.ip_stack = []\n\n    def eval_program(self, ip: int):\n        self.ip = ip\n        while self.ip >= 0 and self.ip < len(self.code):\n            self.ip += 1\n            if self.ip in self.ip_stack:\n                self.ip_stack.remove(self.ip)\n            self.ip_stack.append(self.ip)\n\n            if self.code[self.ip] == \">\":\n                self.ip += 1\n\n            if self.code[self.ip] == \"+\":\n                self.pc += 1\n                self.memory.append(self.pc - 1)\n            elif self.code[self.ip] == \"-\":\n                self.pc += 1\n                self.memory.append(self.pc - 1)\n            elif self.code[self.ip] == \"[\":\n                self.memory.append(self.rel_base)\n                self.pc += 1\n            elif self.code[self.ip] == \"]\":\n                self.rel_base = self.memory.pop()\n                self.pc += 1\n            elif self.code[self.ip] == \",\":\n                self.memory.append(self.rel_base)\n                self.pc += 1\n            elif self.code[self.ip] == \".\":\n                return self.ip\n            elif self.code[self.ip] == \">\":\n                self.pc += 1\n            elif self.code[self.ip] == \"<\":\n                self.pc += 1\n            elif self.code[self.ip] == \"<\":\n                self.pc += 1\n\n    def eval_program2(self, ip: int):\n        self.ip = ip\n        while self.ip >= 0 and self.ip < len(self.code):\n            self.ip += 1\n            if self.ip in self.ip_stack:\n                self.ip_stack.remove(self.ip)\n            self.ip_stack.append(self.ip)\n\n            if self.code[self.ip] == \">\":\n                self.ip += 1\n            elif self.code[self.ip] == \"+\":\n                self.pc += 1\n                self.memory.append(self.memory[self.pc] + 1)\n            elif self.code[self.ip] == \"-\":\n                self.pc += 1\n                self.memory.append(self.memory[self.pc] - 1)\n            elif self.code[self.ip] == \"[\":\n                self.memory.append(self.memory[self.rel_base + self.ip])\n                self.pc += 1\n            elif self.code[self.ip] == \"]\":\n                self.rel_base = self.memory.pop()\n                self.pc += 1\n            elif self.code[self.ip] == \",\":\n                self.memory.append(self.memory[self.rel_base + self.ip])\n                self.pc += 1\n            elif self.code[self.ip] == \".\":\n                return self.ip\n            elif self.code[self.ip] == \">\":\n                self.pc += 1\n            elif self.code[self.ip] == \"<\":\n                self.pc += 1\n\n    def get_next_ip(self):\n        if self.ip in self.loop_stack:\n            while self.ip in self.loop_stack:\n                self.ip = self.ip_stack.pop()\n        return self.memory[self.ip]\n\n    def move_ip_forward(self):\n        self.ip = self.get_next_ip()\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2+3''') == '++>'\nassert solution('''9-7''') == '+++++++++>'\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2+3\n''') == \"++>\", \"Your solution doesn't match expected result\"\n\nassert solution('''\n9-7\n''') == \"+++++++++>\", \"Your solution doesn't match expected result\"\n\nassert solution('''\n100+3\n''') == \"+++>\", \"Your solution doesn't match expected result\"\n\nassert solution('''\n1+1\n''') == \"++>\", \"Your solution doesn't match expected result\"\n\nassert solution('''\n1+1\n''') == \"++>\", \"Your solution doesn't match expected result\""
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"<++->\"\nassert solution(\"9-7\") == \"<++++++++>\"]"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3+4\n5-6\n7*8''') == \"\"\"+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2+3\") == \"++>\", 'First'\nassert solution(\"9-7\") == \"+++++++++>\", 'Second'\nassert solution(\"1+1\") == \"->>\", 'Third'\nassert solution(\"1+1\") == \"->>\", 'Fourth'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\nclass Solution:\n    def calculate(self, s: str) -> str:\n        i = 0\n        pre = ''\n        while i < len(s):\n            if s[i] == '+':\n                i += 1\n                while i < len(s) and s[i].isdigit():\n                    pre += s[i]\n                    i += 1\n                pre = pre[::-1]\n                i -= 1\n            elif s[i] == '-':\n                i += 1\n                while i < len(s) and s[i].isdigit():\n                    pre += s[i]\n                    i += 1\n                pre = pre[::-1]\n                i -= 1\n            else:\n                i += 1\n        return pre[::-1]"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2+3\") == \"++>\", \"First\"\nassert solution(\"9-7\") == \"++++++++>\", \"Second\"\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 3 5 1 2 9 7 6 +\n6 8 5 +\n2 3 2 -\n-1 -3 -\n''') == '++++++++++>'\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n2\n5\n2\n0\n\n''') == '2'\nassert solution('''\n4\n2\n5\n2\n0\n\n''') == '8'\nassert solution('''\n4\n2\n5\n2\n0\n\n''') == '2'"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"38\") == \"2\"\nassert solution(\"56\") == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1\\n\"\n    \"3\\n\"\n    \"20\\n\"\n    \"38\\n\"\n    \"56\\n\") == \"1\"\n\nassert solution(\n    \"4\\n\"\n    \"2132\\n\"\n    \"506\\n\"\n    \"999999999999999999\\n\"\n    \"1000000000000000000\\n\") == \"8\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example_input) == \"1\"\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n3\n20\n38\n56''') == '2'\nassert solution('''4\n2132\n506\n999999999999999999\n1000000000000000000''') == '8'\nassert solution('''5\n1\n3\n20\n38\n56''') == '2'\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '2'\nassert solution('20') == '5'\nassert solution('38') == '2'\nassert solution('56') == '0'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '5'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1\\n\"\n    \"3\\n\"\n    \"20\\n\"\n    \"38\\n\"\n    \"56\"\n) == \"1\\n2\\n5\\n2\\n0\"\n\nassert solution(\n    \"4\\n\"\n    \"2132\\n\"\n    \"506\\n\"\n    \"999999999999999999\\n\"\n    \"1000000000000000000\"\n) == \"8\\n2\\n4\\n1\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(example_input) == '1'\n\n\n'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == output_data\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"1000000\") == \"7\"\nassert solution(\"10\") == \"4\"\nassert solution(\"123456789\") == \"7\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n6\n6\n6\n6\n6''') == '4'\nassert solution('''5\n5\n5\n5\n5\n5''') == '3'\nassert solution('''4\n4\n4\n4\n4\n4''') == '4'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"15\") == \"9\"\nassert solution(\"21\") == \"12\"\nassert solution(\"37\") == \"27\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n''') == '4'\nassert solution('''\n1\n''') == '0'\nassert solution('''\n2\n''') == '1'\nassert solution('''\n100\n''') == '2'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n''') == '4'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '4'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"5\") == \"0\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"0\"\nassert solution(\"1000\") == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '8'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n''') == '4'\n\nassert solution('''\n50\n''') == '0'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"000\") == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"00\") == \"1\"\nassert solution(\"01\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"11\") == \"4\""
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"00000000\") == \"1\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"00\") == \"1\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('000') == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('000') == '1'\nassert solution('001') == '0'\nassert solution('010') == '0'\nassert solution('011') == '0'\nassert solution('100') == '0'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"01\") == \"2\"\nassert solution(\"000\") == \"3\"\nassert solution(\"0101\") == \"3\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == 1\nassert solution('1') == 0\nassert solution('001') == 2\nassert solution('0101') == 2\nassert solution('0110') == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"000\") == \"1\"\nassert solution(\"111\") == \"1\"\nassert solution(\"010\") == \"2\"\nassert solution(\"011\") == \"2\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 3 9 10\n''') == 'APPROVED'\nassert solution('''5\n9 8 5 2\n''') == 'DENIED'\nassert solution('''5\n3 2 4 5 6\n''') == 'APPROVED'\nassert solution('''5\n1 2 3 4 5\n''') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3\\n1\") == \"APPROVED\", \"WA\"\nassert solution(\"5\\n7\\n9\\n10\\n31\") == \"DENIED\", \"WA\"\nassert solution(\"8\\n4\\n5\\n6\\n7\") == \"APPROVED\", \"WA\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"APPROVED\"\nassert solution(\"2\") == \"DENIED\"\nassert solution(\"3\") == \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n6 7 9 10 31\n''') == 'APPROVED'\nassert solution('''5\n4 5 8 12''') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED', 'First Example'\nassert solution('4\\n7 6 8 10') == 'DENIED', 'Second Example'\nassert solution('3\\n6 2 4') == 'APPROVED', 'Third Example'\nassert solution('1\\n6') == 'DENIED', 'Fourth Example'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'APPROVED'\nassert solution('4') == 'APPROVED'\nassert solution('3') == 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"1\\n-1\") == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n6 7 9 10 31\\n\") == \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'APPROVED'\nassert solution('2') == 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == 'APPROVED'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == 'APPROVED'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == 'DENIED'\nassert solution('5\\n7 7 7 7 7 7\\n') == 'APPROVED'\nassert solution('5\\n7 7 7 7 7 7\\n') == 'DENIED'\n\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRUDR') == 'No'\nassert solution('RURDUDR') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RRDDD\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''RUDRD''') == 'Yes'\nassert solution('''UDRD''') == 'No'\nassert solution('''RDD''') == 'Yes'\nassert solution('''RURD''') == 'Yes'\nassert solution('''RUDR''') == 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''RUDLUDR''') == 'Yes'\nassert solution('''UDLDDRR''') == 'No'\nassert solution('''RDRRDRR''') == 'Yes'\nassert solution('''RDRRDRRUUDDDRUUD''') == 'Yes'\nassert solution
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"UUUULRRDD\") == \"No\"\nassert solution(\"LDRDRDRRUDDDRDDDDD\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDDURDR') == 'No'\nassert solution('UUDLUURDLR') == 'Yes'\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RDDDRU\") == \"No\"\nassert solution(\"U\") == \"No\"\nassert solution(\"DLLDDU\") == \"Yes\"\nassert solution(\"DLLRDD\") == \"Yes\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '7'\n\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\""
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('3\\n4\\n2\\n5\\n3') == '7'\nassert solution('2\\n3\\n4\\n3\\n5\\n4') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('10\\n3\\n2\\n4\\n3\\n5') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('4\\n5\\n5\\n4\\n4\\n4') == '10'\nassert solution('2\\n3\\n4\\n1\\n2\\n3') == '9'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\nassert solution('''3\n3\n2\n4''') == '2'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\nassert solution(\"4\\n4\\n4\\n3\\n4\\n5\") == \"7\"\nassert solution(\"5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"3\") == '1'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n2\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n2\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n3\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"9\"\nassert solution(\"1000000000\") == \"9\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\n\"\"\"\n\n###############################################################################\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\nassert solution('5') == 5\nassert solution('6') == 6\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"20\") == \"23\""
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"23\"\nassert solution(\"100\") == \"97\"\nassert solution(\"1000\") == \"1013\""
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '5'\nassert solution('50') == '47'\nassert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '1'\nassert solution('20') == '23'\nassert solution('1021') == '17'\nassert solution('2040') == '23'\nassert solution('1020') == '13'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 5\nassert solution('2') == 3\nassert solution('8') == 5\nassert solution('25') == 23\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"1\\n\"\nassert solution(\"2\\n\") == \"2\\n\"\nassert solution(\"3\\n\") == \"3\\n\"\nassert solution(\"4\\n\") == \"4\\n\"\nassert solution(\"5\\n\") == \"5\\n\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n4\n5\n6\n''') == '23'\n\nassert solution('''9\n9\n11\n''') == '23'\n\nassert solution('''5\n5\n5\n5\n5\n''') == '13'\n\nassert solution('''10\n10\n10\n''') == '11'\n\nassert solution('''20\n20\n20\n20\n20\n20\n20\n''') == '23'"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"9\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"7\") == \"7\"\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\\n\") == \"1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ni = 0\nwhile i < n-2:\n    if a[i]!= a[i+2]:\n        a[i], a[i+2] = a[i+2], a[i]\n        i += 1\n    else:\n        i += 2"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"12\") == \"1\"\nassert solution(\"20\") == \"2\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\nassert solution('5\\n3 1 3 2') == '2'\nassert solution('6\\n3 1 3 2') == '2'\nassert solution('7\\n3 1 3 2') == '2'\nassert solution('8\\n3 1 3 2') == '2'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1 3 2\") == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\nassert solution('4\\n3 1 3 2') == '1'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\nassert solution('5\\n3 1 1 3 2') == '2'\nassert solution('6\\n3 1 3 3 2') == '1'\nassert solution('7\\n3 1 3 3 3 2') == '2'"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 1 3 2\n''') == '1', 'First'\nassert solution('''\n3\n3 1 3 2\n''') == '2', 'Second'\nassert solution('''\n2\n2 1 2\n''') == '1', 'Third'\nassert solution('''\n10\n5 4 3 2 1 2 4 5 6 7 8 9 10\n''') == '3', 'Fourth'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1'"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == '12'\nassert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\nassert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '22'\nassert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '21'\nassert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '12'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 10 10 10 10\") == \"15\"\nassert solution(\"5 100 80 40 30\") == \"24\"\nassert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 1 80 90 80\") == \"22\"\nassert solution(\"5 1 2 80 90 80\") == \"21\"\nassert solution(\"5 1 2 3 80 90 80\") == \"20\"\nassert solution(\"5 1 2 3 4 80 90 80\") == \"19\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 20 90 80\") == \"23\"\nassert solution(\"5 10 90 80\") == \"21\"\nassert solution(\"5 40 90 80\") == \"10\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"3 2 1 3\") == \"2\"\nassert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"3 2 1 3\") == \"2\"\nassert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 100 90 80') == '23'\nassert solution('5 100 90 80 30 80') == '23'\nassert solution('5 100 90 80 30 80 21 80') == '23'\nassert solution('5 100 90 80 30 80 21 80') == '23'\nassert solution('3 2 4 1') == '0'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\nassert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\nABCXYZ''') == 'CDEZAB'\nassert solution('''1\nABCXYZ''') == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nABCXYZ') == 'CDEFZXABA'\nassert solution('5\\nABCD') == 'ABCDE'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\nABCXYZ') == 'CDEZAB'\nassert solution('3\\nABDABCC') == 'ABDABC'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\nABCXYZ\\n') == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'CEZAAB'\nassert solution('1') == 'A'\nassert solution('0') == ''"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'CEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\""
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'CDEZAB'\nassert solution('1') == 'C'\nassert solution('2') == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 5 2 3 2 4\n''') == \"3 4 2\"\nassert solution('''\n1\n2750131 199999\n''') == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3 4 2'\n\nassert solution(\"1\\n3 5 2 3 2 4\") == '3 4 2'\n\nassert solution(\"1\\n999999 199999\") == '199999'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n5 2 3 2 4\n\"\"\") == \"3 4 2 \nassert solution(\"\"\"\n1\n2750131 199999\n\"\"\") == \"199999 \n\"\"\")"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3 4 2'\nassert solution('3 5 2 3 2 4') == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3 4 2'"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 5 2 3 2 4\n6 5 2 3 2 4''') == '4 5 2 3 2'\nassert solution('''3 5 2 3 2 4\n6 5 2 3 2 4''') == '3 4 2 2'\nassert solution('''2 2 2 2 1 1\n2 2 2 2 1 1''') == '2 2 2 2 2'\nassert solution('''2 2 2 2 1 1\n2 2 2 2 2 1''') == '2 2 2 2 2 2'\nassert solution('''2 2 2 2 1 1\n2 2 2 2 2 1''') == '2 2 2 2 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n5 2 3 2 4') == '3 4 2'\nassert solution('1\\n2750131 199999') == '199999'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3 4 2\"\nassert solution(\"2\") == \"2 3 4\"\nassert solution(\"3 5 2 3 2 4\") == \"3 4 2\""
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"2 4 5 3 1\"\n) == \"11111\"\nassert solution(\n    \"5 1\\n\"\n    \"2 1 3 5 4\"\n) == \"22111\"\nassert solution(\n    \"7 1\\n\"\n    \"7 2 1 3 5 4 6\"\n) == \"1121122\""
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input) == \"111111\"\nassert solution(input) == \"2211211\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"5 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n1 2 3 4 5 6\") == \"111\"\nassert solution(\"5 1\\n2 1 3 5 4 6\") == \"210\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"2 4 5 3 1\\n\"\n) == \"11111\"\n\nassert solution(\n    \"5 1\\n\"\n    \"2 1 3 5 4\\n\"\n) == \"22111\"\n\nassert solution(\n    \"7 1\\n\"\n    \"7 2 1 3 5 4 6\\n\"\n) == \"1121122\"\n\nassert solution(\n    \"5 1\\n\"\n    \"2 4 5 3 1\\n\"\n) == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1') == '11111', 'Wrong'\nassert solution('5 1') == '22111', 'Wrong'\nassert solution('5 1') == '21112', 'Wrong'\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '22111'\nassert solution('7 1') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n2 4 5 3 1''') == '11111'\nassert solution('''5 1\n2 1 3 5 4''') == '22111'\nassert solution('''7 1\n7 2 1 3 5 4 6''') == '1121122'\nassert solution('''5 1\n2 4 5 3 1''') == '21112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"2 4 5 3 1\\n\"\n) == \"11111\"\n\nassert solution(\n    \"5 1\\n\"\n    \"2 1 3 5 4\\n\"\n) == \"22111\"\n\nassert solution(\n    \"7 1\\n\"\n    \"7 2 1 3 5 4 6\\n\"\n) == \"1121122\""
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 1\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 1\") == \"1121122\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('2') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n2\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('2\\n100 1') == '2'"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '2'\nassert solution('100') == '2'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 2 3\\n') == '2'\nassert solution('4\\n100 1\\n') == '4'\nassert solution('4\\n100 3\\n') == '0'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t.read_input()) == \"3\""
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 1 2 3\n''') == '2'\n\nassert solution('''\n4\n100 1\n''') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('2') == '1'"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n') == '1'\nassert solution('5\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('4\\n') == '0'"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n5 7 1 5 4 9\n''') == '1'\nassert solution('''5\n1 2 3 4 5\n''') == '2'\nassert solution('''1\n16\n''') == '0'\nassert solution('''4\n1 1 1 1023\n''') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n5 7 1 5 4 9''') == '1'\n\nassert solution('''5\n1 2 3 4 5''') == '2'\n\nassert solution('''4\n1 1 1 1023''') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n') == '1'\nassert solution('5\\n') == '0'\nassert solution('1\\n') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('1') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '1'\nassert solution('5\\n') == '0'\nassert solution('6\\n') == '1'\nassert solution('6\\n') == '1'\nassert solution('5\\n') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"6\\n1 2 3 4 5\") == \"1\"\nassert solution(\"7\\n1 2 3 4 5\") == \"0\"\nassert solution(\"8\\n1 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"0\"\nassert solution(\"5\\n\") == \"0\"\nassert solution(\"10\\n\") == \"9\"\nassert solution(\"11\\n\") == \"0\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0011') == '4'\nassert solution('0001') == '1'\nassert solution('1111') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '4'\nassert solution('001') == '1'\nassert solution('110101') == '3'\nassert solution('10110') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0011') == '4'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0011') == '4'"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '4'\nassert solution('0011') == '4'\nassert solution('0101') == '3'\nassert solution('1100') == '3'\nassert solution('0010') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0011\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10011\") == \"4\"\nassert solution(\"00111\") == \"3\"\nassert solution(\"11111\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0011') == '4'"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\\n\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 4\\n\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 4\\n\") == \"2\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3\\n2 4\\n\") == \"2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n\") == \"3\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\n\n'''\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '2'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4 2\n1 3\n2 4\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n4 2\n1 3\n2 5\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4 2\n1 3\n2 4\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n4 2\n1 3\n2 4\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\n1 3\n2 4\n\n''') == '2'\nassert solution('''4 4\n1 3\n2 4\n\n''') == '1'\nassert solution('''4 4\n1 3\n2 4\n\n''') == '0'\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"20 3\") == \"3\"\nassert solution(\"20 20\") == \"0\"\n\n'''\nfrom math import factorial\n\nn, m = map(int, input().split())\ncards = input().split()"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '2'\nassert solution('4 2') == '2'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"100\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"./test_files/q2-test-01.txt\") == \"2\"\nassert solution(\"./test_files/q2-test-02.txt\") == \"2\"\nassert solution(\"./test_files/q2-test-03.txt\") == \"1\"\nassert solution(\"./test_files/q2-test-04.txt\") == \"1\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 2 1\n''') == '2'\nassert solution('''\n8\n1 3 3 3 2 4 2 2\n''') == '3'\n'''"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '2'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 1\\n') == '2'\nassert solution('3\\n1 2\\n') == '2'\nassert solution('2\\n1 2\\n') == '1'\nassert solution('4\\n1 2 2 1\\n') == '3'\nassert solution('5\\n1 3 2 2 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nassert solution('5\\n1 2 1 1 1') == '1'\nassert solution('5\\n1 2 2 1 1') == '2'\n\"\"\"\n\nn = int(input())\nh = list(map(int, input().split()))\nmin_water_actions = 0\nfor i in range(n):\n    min_water_actions += min(h[i], n - i) - 1\nprint(min_water_actions)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"100\\n1 2 2 1\") == \"1\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"5\\n1 1 1 2 2\") == \"1\""
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 2 1\n''') == '2'\nassert solution('''5\n1 2 3 4 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n4 1 -3\n''') == \"3\"\n\nassert solution('''2 4\n-1 1\n''') == \"4\"\n\nassert solution('''4 10\n2 4 1 2\n''') == \"2\""
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n1 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 5\n2 1 -3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 4\n-1 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 10\n2 4 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 8\n1 4 3 4 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n100 6\n6 4 2 3 -1 -1 -1\n\"\"\") == \"6\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\n2 1 -3\n\n''') == '3'\nassert solution('''2 4\n-1 1\n\n''') == '4'\nassert solution('''4 10\n2 4 1 2\n\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 1 -3\n''') == '3'\nassert solution('''2 4\n-1 1\n''') == '4'\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 5\n2 1 -3\n''') == '3'\n\nassert solution('''2 4\n-1 1\n''') == '4'\n\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 5\n2 1 -3\n''') == '3'\n\nassert solution('''2 4\n-1 1\n''') == '4'\n\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 5\n2 1 -3\n''') == '3'\nassert solution('''2 4\n-1 1\n''') == '4'\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 5\n2 1 -3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 4\n-1 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 10\n2 4 1 2\n\"\"\") == \"2\"\n\n\n\"\"\"\n--- Day 1: Report Repair ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\nYour puzzle answer was 633950.\n\n--- Part Two ---\n\nIt's getting pretty expensive to fly these days - not because of ticket prices, but because of the ridiculous number of stars in your sky!\n\nConsider this triangle of numbers:\n\n1\n22\n333\n4444\n55555\n...\n\n1 + 2 + 3 + 4 + 5 = 5555\n22 + 333 + 4444 = 66666\n333 + 4444 + 5555 = 77777\n4444 + 55555 + 6666 = 88888\n555 + 6666 + 7777 = 101010\n\nThat is, there are 5 stars at each value.\n\nOf course, your sky is much bigger and has much more stars - 10k total, line by line - and you can't even fit a full moon!\n\nThe Elves in accounting are thankful for your help; one of them even offers you a star map! They have made you a star map of the area and are counting on you to help save Christmas.\n\nHowever, they're not quite sure what star map is - before you know it, they would like for you to find out what tree of stars holds the largest area.\n\nComplete the program below so that it prints the star map used by the Elves in accounting. Each line of the map will be a comma-separated list of the positions of matching stars (asteroids). The program should find the five positions with the most matching stars and the star map should be as small as possible.\n\n--- Part Two ---\n\nAn asteroid belt has been configured to let a small group of robots vacuum up all the stars in the system. The robots are programmed to move around in a circle; they each pull a lever on the belt and move around until they are both back in the same place.\n\nWhen the robots stop, they need to return home to the central port to repair the broken hull. Unfortunately, the shuttle computer that runs the system is having trouble - it's having trouble-shooting.\n\nThe Elves would like to know if it's possible to move the robots back to the central port to fix the computer.\n\nYour job is to figure out how many steps they could take to move the robots back. You will find a larger version of the system running on a larger robot\n\nThe Elves have made you a large disk and an ever-expanding list of commands that you should\n\nexecute on the disk (your puzzle input).\n\nEach command will be a line of text starting with a letter,\n\nfollowed by up to three space-separated integers describing the\n\ncommand type and two space-separated integers describing the\n\nx and y coordinates to operate on.\n\nThe first integer describes the location's x-coordinate, the second\n\ninteger describes the location's y-coordinate, and the third integer\n\ndescribes what operation to perform:\n\n- move: move the coordinate to the left or right (depending on the\n\noperation) by the given amount.\n- x+1: move the coordinate to the north (incrementing its x-coordinate) by\n\nthe given amount.\n- x-1: move the coordinate to the south (decrementing its x-coordinate) by\n\nthe given amount.\n- y+1: move the coordinate to the west (decrementing its y-coordinate) by\n\nthe given amount.\n- y-1: move the coordinate to the east (incrementing its y-coordinate) by\n\nthe given amount.\n\nFor example, the command:\n\nA,0,2,3,1,1,move,3,2,x,y,2,4,y,4,move,3,\n\nmeans to move the disk from the top-left corner to the top-right corner to\n\nthe top-right corner (all coordinates incrementing up), then\n\nto the top-left corner (all coordinates incrementing down), then\n\nto the bottom-right corner (all coordinates incrementing down), then\n\nto the bottom-left corner (all coordinates incrementing up), and\n\nthen to the top-left corner (all coordinates incrementing up).\n\nSo, in this example, the final set of coordinates after moving the disk\n\nis:\n\nfinal x and y coordinates: (0, 0), (4, 3), (3, 0), (0, 4)\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('6\\n4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('2\\n1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '9 3 6 12 4 8', 'Wrong'\nassert solution('4') == '126 42 84 28', 'Wrong'\nassert solution('2') == '3000000000000000000 1000000000000000000', 'Wrong'"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '9 3 6 12 4 8'\nassert solution('4') == '126 42 84 28'\nassert solution('2') == '3000000000000000000 1000000000000000000'"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n8 6 3 12 9\n''') == '9 3 6 12 4 8 \n\nassert solution('''\n4\n42 28 84 126\n''') == '126 42 84 28 \n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n4 8 6 3 12 9\n''') == '9 3 6 12 4 8 \nassert solution('''\n2\n1000000000000000000 3000000000000000000\n''') == '3000000000000000000 1000000000000000000 \n'''\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8 \"\nassert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8 \"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000 \""
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"9 3 6 12 4 8\", \"Wrong\"\nassert solution(\"4\") == \"126 42 84 28\", \"Wrong\"\nassert solution(\"2\") == \"3000000000000000000 1000000000000000000\", \"Wrong\""
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n\n'''\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 5 4 7 10 12\n''') == '3'\n\nassert solution('''5\n-1 2 5 8 11\n''') == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n-1 2 5 8 11') == '1\\n8'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"1,3,4,5\"\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n-1 2 5 8 11\n''') == '1 8'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n4 -5 8 10\n''') == '1'\nassert solution('''\n5\n-1 2 5 8 11\n''') == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '8'"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n-1 2 5 8 11\n''') == '1 8'\nassert solution('''\n5\n-1 2 5 8 11\n''') == '1 5'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n5 4 7 10 12''') == '3'\nassert solution('''5\n-1 2 5 8 11''') == '1'\nassert solution('''15\n3 -1 5 1 4 7 10 12 9 10 8 -2''') == '6'\nprint(solution('''5\n-1 2 5 1 4 7 10 12 9 10 8 -2'''))"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 3 4''') == '1 2'\n\nassert solution('''6\n1 5 4 7 10 12''') == '3 5'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"0 2\"\nassert solution(\"2 2 2\") == \"1 1 1\"\nassert solution(\"3 3 3\") == \"2 2 1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 3\n''') == '0 2'\n\n\"\"\"\n\n\nfrom sys import stdin\nfrom collections import deque\n\na, b, k = map(int, stdin.readline().split())\n\nqueue_a = deque()\nqueue_b = deque()\nfor i in range(k):\n    _a, _b = map(int, stdin.readline().split())\n    if _a:\n        queue_a.append(_a)\n    if _b:\n        queue_b.append(_b)\n\ncount_a = 0\ncount_b = 0\nwhile queue_a and queue_b:\n    count_a += 1\n    count_b += 1\n    if queue_a[0] > queue_b[0]:\n        queue_a.popleft()\n        count_a += 1\n    else:\n        queue_b.popleft()\n        count_b += 1\n\nprint(count_a, count_b)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '1 2 2'\nassert solution('2 3 1') == '1 2 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\") == \"0 1\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 3') == '0 2'\nassert solution('2 1 3') == '1 2'\nassert solution('1 3 3') == '0 2'\nassert solution('1 2 2') == '0 0'\nassert solution('0 1 3') == '0 0'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\""
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('103') == '3'\nassert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"1\"\nassert solution(\"101\") == \"3\"\nassert solution(\"103\") == \"3\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100\n''') == '1'\n\nassert solution('''\n103\n''') == '3'\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"1000000\") == \"2\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"103\") == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100') == '3'\nassert solution('111') == '3'\nassert solution('100000') == '3'\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"1\"\nassert solution(\"103\") == \"3\"\nassert solution(\"1000\") == \"10\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '9'"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"9\""
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '9'\nassert solution('3') == '4'\nprint(solution(input()))\n'''"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '9'\nassert solution('1') == '1'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '9'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '9'\nassert solution('3') == '6'\nassert solution('4') == '8'\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"9\""
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '10'\nassert solution('5') == '10'\nassert solution('6') == '12'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"10\"\nassert solution(\"3 4 6\") == \"10\"\nassert solution(\"4 5 1\") == \"5\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"10\"\nassert solution(\"4\\n4 2 1 1\") == \"9\"\nassert solution(\"5\\n5 3 2 1\") == \"8\"\nassert solution(\"6\\n5 3 2 1\") == \"7\"\nassert solution(\"7\\n2 2 3 3 1 2\") == \"4\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '10'\nassert solution('5') == '15'\nassert solution('10') == '15'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n3 4 6\n''') == '10'\nassert solution('''1\n1\n''') == '1'\nassert solution('''8\n3 1 5 2\n''') == '3'\nassert solution('''1\n2\n''') == '2'\nassert solution('''7\n3 4 5 2 1\n''') == '4'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n3 4 6\\n') == '10'\nassert solution('10\\n7 9 5 3\\n') == '30'\nassert solution('10\\n6 6 6 6\\n') == '30'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 4 6') == '10'\nassert solution('3\\n1 2 3') == '4'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 2\n''') == '10'\nassert solution('''3\n3 4 6\n''') == '10'\nassert solution('''4\n3 4 6 7\n''') == '10'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 4 6\n''') == '10'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3') == 'Yes'\nassert solution('6\\n1 2\\n4 4\\n3 3') == 'No'\nassert solution('10\\n1 2\\n1 1\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution.__doc__)\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nD1, D2 = [], []\n\nfor i in range(N):\n    D1.append(int(sys.stdin.readline().strip()))\n    D2.append(int(sys.stdin.readline().strip()))\n\nfor i in range(1, N - 1):\n    if D1[i] == D1[i + 1] == D2[i] or D1[i] == D2[i + 1] == D1[i + 1] == D2[i] or D1[i + 1] == D2[i + 1] == D1[i] == D2[i + 1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 3\\n4 4') == 'Yes'\nassert solution('4\\n1 1\\n2 2\\n3 3\\n4 5') == 'No'\nassert solution('3\\n2 2\\n3 1\\n3 2') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'Yes'\nassert solution('5') == 'No'\nassert solution('5') == 'Yes'\nassert solution('5') == 'No'\nassert solution('5') == 'Yes'"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\nassert solution('5\\n1 2\\n6 6\\n5 5\\n4 4\\n3 3\\n3 2') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input) == \"Yes\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '4', \"Test 1 failed\"\nassert solution('4') == '4', \"Test 2 failed\"\nassert solution('5') == '10', \"Test 3 failed\"\nassert solution('10') == '0', \"Test 4 failed\"\nassert solution('15') == '18', \"Test 5 failed\""
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\", \"Wrong answer!\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n''') == '4'\nassert solution('''1\n''') == '1'\n''')\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == \"N/A\"\nassert solution(\"1\") == \"N/A\"\nassert solution(\"0\") == \"N/A\"\nassert solution(\"2\") == \"4\"\nassert solution(\"0.001\") == \"0\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('2.1') == '4'\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '4'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n4 3 8 5 1\") == \"Yes\"\nassert solution(\"6\\n3 4 3 5 1\") == \"No\"\nassert solution(\"7\\n4 5 4 1\") == \"Yes\"\nassert solution(\"8\\n4 5 4 1\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n10 4 5 1') == 'Yes'\nassert solution('4\\n3 8 5 1') == 'No'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3 8 5 1\n''') == 'Yes'\nassert solution('''\n5\n4 8 3 1\n''') == 'No'\n'''\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n8 5 1') == 'Yes', 'Your solution is wrong'\nassert solution('4\\n3 8 5 1') == 'No', 'Your solution is wrong'\nassert solution('5\\n1 2 3 4 5') == 'Yes', 'Your solution is wrong'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n8 4 5\\n') == 'Yes'\n\nassert solution('4\\n3 8 5 1\\n') == 'No'\n\nassert solution('5\\n3 9 5 6 8\\n') == 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'No'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '702'\nassert solution('1 7') == '702'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '-1'\nassert solution('3') == '702'\nassert solution('2') == '-1'\nassert solution('100') == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution('1 1\\n7 7\\n3 2\\n1 7') == '-1'\n\n---Output---\n10 6\n-1"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '702'\nassert solution('5 5') == '-1'\nassert solution('3 5') == '702'\nassert solution('5 7') == '702'\nassert solution('10 10') == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 3\n1 7\n3 2\n1 7\"\"\") == \"702\"\nassert solution(\"\"\"3 3\n1 7\n3 2\n1 7\"\"\") == -1\nassert solution(\"\"\"10 10\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\"\"\") == -1\nprint('You passed all tests!')"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 1') == '1'\nassert solution('5 1') == '1'\nassert solution('6 1') == '1'\nassert solution('3 2') == '2'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '702'\nassert solution('10 10') == '-1'\nassert solution('1 3') == '1'\nassert solution('-3 -2') == '-1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '702'\nassert solution('1 7') == '702'\nassert solution('3 2') == '-1'\nassert solution('1 7') == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '702'\nassert solution('4 4') == '-1'\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"9\"\nassert solution(\"4 2\") == \"6\"\nassert solution(\"10 2\") == \"25\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"5 5\") == \"330\"\nassert solution(\"8 7\") == \"837\""
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '9'\nassert solution('3 3') == '9'\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"9\""
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '9'\nassert solution('1 5') == '0'\nassert solution('3 1') == '2'"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 2\"\n    ) == \"9\"\n\n---strategy---\nkeep track of which triples are already covered and excluded.\n\nstart_index = 0\nall_triples = []\n\nfor i in range(3):\n    if start_index % 2!= 0:\n        all_triples.append(start_index)\n        start_index += 1\n\n    for j in range(3):\n        if start_index % 3!= 0:\n            all_triples.append(start_index)\n            start_index += 1\n        if j!= i:\n            for k in range(3):\n                if start_index % 5!= 0:\n                    all_triples.append(start_index)\n                    start_index += 1\n\nprint(len(all_triples))"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '9'\nassert solution('5 2') == '7'\nassert solution('5 5') == '9'\n\n'''"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"8 8\") == \"48\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"-8\") == \"1010\"\nassert solution(\"-7\") == \"1010\"\nassert solution(\"-6\") == \"1010\"\nassert solution(\"-5\") == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"-8\") == \"1010\"\nassert solution(\"-7\") == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('-10') == '10'\nassert solution('-20') == '1000000'\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('-9') == '1011'\nassert solution('-16') == '-1'\nassert solution('-32') == '-2'\nassert solution('-64') == '-2'\nassert solution('-128') == '-3'\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"-90\") == \"1011\"\nassert solution(\"-1000\") == \"1011\"\nassert solution(\"-999\") == \"1011\"\nassert solution(\"-10\") == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 9\n2 4\n4 5\n3 6\n1 1\n2 3\n2 2\n2 3\n''') == '12'\n\nassert solution('''10 5\n3 8\n9 6\n2 7\n1 9\n3 2\n6 5\n3 4\n6 5\n''') == '13'\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5') == '12'\nassert solution('10 5') == '12'\nassert solution('20 5') == '12'"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5') == '12'\nassert solution('1 20') == '20'\nassert solution('1 50') == '50'\nassert solution('2 100') == '100'\nassert solution('2 50') == '50'\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"12\"\nassert solution(\"2 5\") == \"12\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\nassert solution(\"2 5\\n4 9\\n2 4\") == \"10\"\nassert solution(\"2 5\\n4 9\\n2 4\") == \"9\"\nassert solution(\"2 5\\n4 9\\n2 4\") == \"9\"\nassert solution(\"2 5\\n4 9\\n2 4\") == \"5\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"12\"\nassert solution(\"2 4\") == \"6\""
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 5\n4 9\n2 4\n\"\"\") == \"12\"\nassert solution(\"\"\"\n3 6\n7 4\n2 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 7\n9 8\n7 4\n5 2\n\"\"\") == \"9\"\nassert solution(\"\"\"\n6 7\n4 5\n3 2\n4 4\n3 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5') == '12'\nassert solution('3 2') == '10'"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '2'\nassert solution('20') == '3'\nassert solution('100') == '4'\nassert solution('1000000000000000') == '3'"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '2'\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '1'\nassert solution('7') == '1'\nassert solution('8') == '0'\nassert solution('11') == '0'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\nassert solution('10\\n10 4 8 7 3') == '3'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"20\") == \"2\"\nassert solution(\"30\") == \"3\"\nassert solution(\"50\") == \"3\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '2'\nassert solution('1000000000') == '1000000000'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '2'\nassert solution(3) == '1'\nassert solution(4) == '2'\nassert solution(5) == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n10 4 8 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n4 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 3\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 2 3\n''') == '1'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5 3\n1 2 3 3 3\n''') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'\nassert solution('5 3') == '0'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 7\n1 3 4 5 2 6 7 9 10\n''') == '2'\nassert solution('''\n8 10\n1 2 2 3 3 3 4 4 4\n''') == '1'\nassert solution('''\n5 3\n1 2 1 2 4 5\n''') == '0'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '0'\nassert solution('''\n6 4\n1 1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 3\n1 2 2 4 5\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n1 2 2 4 2 3\n''') == '3'\nassert solution('''\n5 5\n1 2 2 4 2 3\n''') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 5\n1 2 2 4 2 3\n''') == '3'\n\nassert solution('''7 5\n3 3 2 1 1 1 3\n''') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 5\n1 2 2 4 2 3''') == '3'\nassert solution('''7 5\n3 3 2 1 1 1 3''') == '4'\nassert solution('''10 5\n
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n''') == '3'\nassert solution('''\n7\n3 3 2 1 1 1 3\n''') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5') == '3'\nassert solution('7 5') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 5\n1 2 2 4 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 9\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n9 6\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n15 10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\"\"\") == \"5\"\nassert solution(\"\"\"\n100 4\nn\"\"\") == \"9\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n\n\"\"\"\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\nm = max(a)\n\nwhile m-1 >= k and m >= 1:\n    m = m - 1\n    if m in a:\n        a.remove(m)\n\nfor i in range(len(a)-k):\n    a[i] += 1\n\nprint(len(a))"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 5\") == \"3\"\nassert solution(\"7 5\") == \"4\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"3\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 5\\n1 2 2 4 2 3\\n\") == \"3\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 5\") == \"3\"\nassert solution(\"7 5\") == \"4\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"7 1 3\") == \"2\"\nassert solution(\"7 3 2\") == \"1000\"\nassert solution(\"1 1000 1\") == \"42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n4 1 3\\n3 2 2\\n1 1000000000000 5 8') == '42000000000000'\nassert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10'\nprint('All test cases passed.')\n\n----------------------------------------------------------------------\nWe don\u2019t want to buy more than 5 bottles of water. We need to minimize the cost of the water.\n\nThe minimum cost to buy 5 bottles of water is $5 * 1 = $5$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$. \n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a bottle of $1$ and $2$ and $3$ bottles of water, then the total cost of buying 5 bottles of water is $10$.\n\nIf we have a"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"9\") == \"0\"\nassert solution(\"3 1 3\") == \"3\"\nassert solution(\"3 1 3 2\") == \"3\"\nassert solution(\"3 1 3 2 2\") == \"3\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 3\\n7 3 2') == '10'\nassert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '9'\nassert solution('5\\n5 1 2\\n10 3 2\\n1 1000000 1\\n1000000000000 42 88') == '42000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 10 1\n3 3 2\n1 1000 1\n1000000000000 42 88\n''') == '1000'\nassert solution('''1\n1 1 1\n2 2 2\n1 3 3\n1 4 4\n1 5 5\n1 6 6\n1 7 7\n1 8 8\n1 9 9\n1 10 10\n''') == '''10\n9\n12\n16\n19\n22\n25\n28\n31\n34\n37\n40\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1\n10 10\n''') == '10'\nassert solution('''\n2\n1\n3\n''') == '3'\nassert solution('''\n3\n3\n2\n''') == '2'\nassert solution('''\n4\n2\n3\n''') == '4'\nassert solution('''\n5\n1\n2\n''') == '3'\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n3\n2\n''') == '1'\nassert solution('''\n4\n10\n1\n3\n2\n''') == '10'\nassert solution('''\n5\n1\n3\n4\n2\n''') == '9'\nassert solution('''\n10\n1000\n3\n7\n2\n''') == '1000'\nassert solution('''\n12\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1000'\nassert solution('10 1 3') == '9'\nassert solution('7 3 2') == '42000000000000'\nassert solution('1 1000000 1') == '1000000000000'"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\") == \"1000\"\nassert solution(\"\"\"\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\") == \"10\"\nassert solution(\"\"\"\n8\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n1000000000000 10 2\n\"\"\") == \"1000000000000\"\nassert solution(\"\"\"\n7\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\") == \"1000000000000\"\nassert solution(\"\"\"\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\") == \"1000000000000\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n3 4 5') == '2'\nassert solution('3 6\\n3 4 5') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 5\\n\") == \"2\"\nassert solution(\"3 6\\n\") == \"2\"\nassert solution(\"5 8 9\\n\") == \"3\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 5') == '1'\nassert solution('10 1 4') == '2'\nassert solution('2 5 2') == '0'\nassert solution('8 10') == '0'"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4\\n2 2 2\\n') == '1'\nassert solution('10 100\\n10 10 10 10 10 10 10 10 10 10\\n') == '1'\nassert solution('100 100\\n90 90 90 90 90 90 90 90 90\\n') == '3'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"1\"\nassert solution(\"6 6\") == \"2\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '2'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n4 5') == '2'\nassert solution('2\\n3 4 5') == '2'\nassert solution('3\\n3 4 5') == '3'\nassert solution('4\\n3 4 5') == '2'\nassert solution('5\\n3 4 5') == '1'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3,6]) == '2'\nassert solution([2,4]) == '1'\nassert solution([1,1]) == '1'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma\n''') == 'Yes'\nassert solution('''5\nhoge\nenglish\nhoge\nenigma\n''') == 'No'\n'''\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n\n'''\n\nn = int(input())\nwords = []\nfor i in range(n):\n    words.append(input())\n\nprint(any(words[i][0] == words[i][-1] for i in range(n)))\n\n'''\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\nimport re\n\nn = int(input())\nw = input()\n\ncount = 0\nfor i in range(1, n):\n    for j in range(len(w) - 1):\n        # print(w[j:len(w)] + w[0:j])\n        # print(re.match(r'^[a-zA-Z]$', w[j:len(w)]))\n        if re.match(r'^[a-zA-Z]$', w[j:len(w)]) is not None:\n            if w[j:len(w)] == w[0:j]:\n                count += 1\n                print('Yes')\n                break\n    else:\n        print('No')\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'No'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    4\n    hoge\n    english\n    hoge\n    enigma\n''') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == 'No', 'Your solution needs to be correct.'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nhoge\\nenglish\\neng\\n') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n') == '2\\n'\nassert solution('2\\n3\\n') == '2\\n'\nassert solution('3\\n4\\n') == '3\\n'\nassert solution('3\\n2\\n') == '6\\n'\nassert solution('4\\n1\\n') == '3\\n'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '6'\nassert solution('2 3') == '6'\nassert solution('3 2') == '3'\nassert solution('4 5') == '3'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6'\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n''') == '6'\nassert solution('''\n2 3\n''') == '4'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('2 1') == '3'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"10 11\") == \"21\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a1\") == \"a1\"\nassert solution(\"2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"2\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5, 1, 1, 1, 3]) == 'Yes'\nassert solution([5, 1, 1, 1, 1]) == 'No'\nassert solution([5, 1, 1, 1, 1, 1]) == 'Yes'\nassert solution([5, 1, 1, 1, 1, 1, 1]) == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n1 2 1 1 3\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n5\n1 3 1 1 2\n\"\"\") == \"No\"\nassert solution(\"\"\"\n5\n1 3 2 1 1\n\"\"\") == \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5, 1, 2, 1, 3]) == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n2\\n2') == 'Yes'\nassert solution('1\\n2\\n1\\n2') == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'Yes'\nassert solution('20') == 'Yes'\nassert solution('1') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'Yes'\nassert solution('4') == 'No'\n'''"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 1 1 3\n''') == 'Yes'\n\nassert solution('''\n4\n1 2 1 3\n''') == 'No'\n\nassert solution('''\n4\n1 2 1 3\n''') == 'Yes'\n\nassert solution('''\n1\n1\n''') == 'Yes'\n\nassert solution('''\n1\n1\n''') == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"4\\n1 2 1 1 3\") == \"No\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 -10') == '1'\n\"\"\"\nimport sys\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 -10') == '1'\nassert solution('1 2 3') == '1'\nassert solution('3 2 1') == '1'\nassert solution('3 2 2') == '2'\n\"\"\"\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\") == \"1\"\nassert solution(\"2 3 -10\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 -10') == '1'\nassert solution('1 2 3') == '2'\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 -10\") == \"1\", \"Should be 1\"\nassert solution(\"2 3 1\") == \"1\", \"Should be 1\"\nassert solution(\"2 1 -10\") == \"0\", \"Should be 0\"\nassert solution(\"2 -1 -10\") == \"0\", \"Should be 0\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\") == \"1\", \"Wrong!\"\nassert solution(\"2 3 -10\") == \"1\", \"Wrong!\"\nassert solution(\"2 3 -10\") == \"1\", \"Wrong!\"\nassert solution(\"2 3 -10\") == \"1\", \"Wrong!\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\") == \"1\"\nassert solution(\"2 3 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 2 2\") == \"2\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 -10') == '1'\nassert solution('1 2 3') == '0'\nassert solution('1 2 2') == '2'\nassert solution('1 2 2 1') == '1'\nassert solution('1 2 2 2') == '2'\n\n---Submission---\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\n---Output---\n1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000\") == \"100\"\nassert solution(\"2000\") == \"2\"\nassert solution(\"3000\") == \"3\"\nassert solution(\"4000\") == \"4\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000\") == \"100\"\nassert solution(\"10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n3\n''') == '1'\nassert solution('''\n10\n''') == '2'\n'''"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000') == '100'\nassert solution('1900') == '100'\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"19000\") == \"99\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"100\""
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '9'\nassert solution('3') == '9'\nassert solution('4') == '9'"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '9'"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n3 5 2\n4 5''') == '9'\nassert solution('''1\n2 5 4\n3 5''') == '8'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n3 5 2\n4 5\"\"\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 5 2') == '9', \"Should be 9\"\nassert solution('2\\n3 5 2') == '9', \"Should be 9\"\nassert solution('3\\n3 5 2') == '9', \"Should be 9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '9'\nassert solution('3') == '10'\nassert solution('4') == '9'\nassert solution('5') == '14'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 5, 2]) == \"9\"\nassert solution([4, 5, ]) == \"11\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"9\"\nassert solution(\"10\") == \"25\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 10 20') == 'War'\nassert solution('3 2 10 20') == 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 10 20') == 'No War'\nassert solution('3 2 10 20') == 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 10 20\") == \"War\"\nassert solution(\"5 3 2 4\") == \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"5 3 20 30\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"1 5 -1\") == \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\") == \"War\"\nassert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"3 2 10 20\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 10 20\n8 15 13\n16 22\n''') == 'No War'\nassert solution('''5 3 6\n5 8 10\n10 7 6\n''') == 'War'\nassert solution('''2 3 4\n2 2 4\n''') == 'No War'\nassert solution('''5 5 5\n5 5 5\n''') == 'War'\nassert solution('''3 4 4\n4 4 4\n''') == 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 10 20\") == \"No War\"\nassert solution(\"3 2 10 20\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\") == \"War\"\nassert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"3 2 10 20\") == \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 10 20') == 'War'\nassert solution('3 2 10 20') == 'No War'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"9\"\nassert solution(\"5\") == \"36\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '9'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '9'\nassert solution('4') == '10'\nassert solution('5') == '10'"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '6'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n4') == '6'\nassert solution('2\\n1\\n4') == '4'\nassert solution('2\\n10\\n10') == '20'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '9'\n'''\n\nn = int(stdin())\nt = list(map(int, stdin().split()))\n\nprint(n*max(t))"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '6'\nassert solution('3') == '12'\nassert solution('4') == '18'\nassert solution('5') == '24'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6\"\nassert solution(\"2 4 6 8\") == \"2\"\nassert solution(\"3 2 4 6\") == \"3\"\nassert solution(\"2\") == \"6\"\n\"\"\"\nfrom math import pi"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n3\\n\") == \"6\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"3 4 5\") == \"0\"\nassert solution(\"7 7 7\") == \"0\"\nassert solution(\"3 1 2 1 3\") == \"0\"\nassert solution(\"3 3 4\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"3\") == 0\nassert solution(\"4\") == 0\nassert solution(\"5\") == 0\nassert solution(\"10\") == 1"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"3\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\\n\") == \"0\"\nassert solution(\"1\\n1 1\\n\") == \"0\"\nassert solution(\"2\\n4 8\\n\") == \"1\"\nassert solution(\"100\\n9999999999999999999999999999999999999999999999\\n\") == \"0\""
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 2 3 5\") == \"1\"\nassert solution(\"5\\n1 2 3 5 6\") == \"2\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 2 3 4 3\") == \"0\"\nassert solution(\"5\\n2 2 3 4 3\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5 6\") == \"2\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"1\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n\n''') == '0'\nassert solution('''4\n1 2 3 4\n\n''') == '1'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n\n''') == '1'\nassert solution('''7\n3 4 5 6 7 8 9\n\n''') == '1'\nassert solution('''5\n2 4 5 6 7\n\n''') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n3 2 1\n1 2 3\n4 5 6\n''') == \"6\"\nassert solution('''4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == \"0\"\nassert solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 3') == '2'\nassert solution('3 4') == '0'"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution('''4 3\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '2'\nassert solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"3 4\") == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution('''\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '2'\nassert solution('''\n3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution('''4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '2'\nassert solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\"\n) == \"6\"\n\nassert solution(\n    \"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\"\n) == \"2\""
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"6\""
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n5 10 2 3 14 5\n''') == '5'\nassert solution('''2\n1 100\n''') == '99'"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"5\"\nassert solution(\"2\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"5\"\nassert solution(\"2\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 100\n''') == '99'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '8'\n\nassert solution('''\n1\n10\n''') == '10'\n\nassert solution('''\n20\n1 3 9 5 7 5 5 7 5 8 5 2 2 5 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7 5 7"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '5'\nassert solution('2') == '99'\nassert solution('4') == '98'\nassert solution('3') == '97'\nassert solution('5') == '97'\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6\n5 10 2 3 14 5\n''') == '5'\nassert solution('''\n2\n1 100\n''') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n5 10 2 3 14 5\n''') == '5'\nassert solution('''\n2\n1 100\n''') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(6) == 5\nassert solution(2) == 99\n\n'''\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '5'\nassert solution('2') == '99'\nassert solution('1 100') == '100'"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 0 1 0 1\n''') == \"2\"\n\nassert solution('''\n6\n0 1 0 1 1 0\n''') == \"2\"\n\nassert solution('''\n3\n0 0 0\n''') == \"0\"\n\nassert solution('''\n4\n1 0 1 1 0\n''') == \"1\"\n\nassert solution('''\n5\n1 0 1 0 1\n''') == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 0 1 0 1\n''') == '2'\n\nassert solution('''6\n0 1 0 1 1 0\n''') == '2'\n\nassert solution('''7\n1 0 1 1 1 0 1\n''') == '3'\n\nassert solution('''3\n0 0 0\n''') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 0 1 0 1\n''') == '2'\n\nassert solution('''\n6\n0 1 0 1 1 0\n''') == '2'\n\nassert solution('''\n3\n0 0 0\n''') == '0'\n\nassert solution('''\n7\n1 0 1 1 1 0 1\n''') == '3'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1 0 1 0 1\\n\"\n    ) == \"2\"\n\nassert solution(\n    \"6\\n\"\n    \"0 1 0 1 1 0 1\\n\"\n    ) == \"3\"\n\nassert solution(\n    \"7\\n\"\n    \"1 0 1 1 1 0 1\\n\"\n    ) == \"0\"\n\nassert solution(\n    \"3\\n\"\n    \"0 0 0\\n\"\n    ) == \"0\""
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == '2'\nprint(solution(sys.stdin.read()))\n\"\"\"\n\nn = int(input())\nseq = list(map(int, input().split()))\na_seq = seq.copy()\n\nrests_at_day = 0\nrests_so_far = 0\n\nwhile rests_at_day < n:\n    rests_so_far += 1\n    if (a_seq[rests_so_far - 1] == 1) and (a_seq[rests_so_far] == 1):\n        a_seq[rests_so_far - 1] = 0\n        a_seq[rests_so_far] = 0\n        rests_at_day += 1\n    elif (a_seq[rests_so_far - 1] == 1) and (a_seq[rests_so_far] == 0):\n        a_seq[rests_so_far] = 1\n        rests_at_day += 1\n    elif (a_seq[rests_so_far - 1] == 0) and (a_seq[rests_so_far] == 1):\n        a_seq[rests_so_far - 1] = 1\n        rests_at_day += 1\n\nprint(rests_so_far)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 0 1 0 1\n''') == '2'\n\nassert solution('''\n6\n0 1 0 1 1 0\n''') == '2'\n\nassert solution('''\n7\n1 0 1 1 1 0 1\n''') == '3'\n\nassert solution('''\n3\n0 0 0\n''') == '0'\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('7') == '3'\nassert solution('3') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 0 1 0 1\n''') == '2'\nassert solution('''6\n0 1 0 1 1 0\n''') == '2'\nassert solution('''7\n1 0 1 1 1 0 1\n''') == '3'\nassert solution('''3\n0 0 0\n''') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 0 1 0 1\n\n''') == \"2\"\nassert solution('''\n6\n0 1 0 1 1 0\n\n''') == \"2\"\nassert solution('''\n7\n1 0 1 1 1 0 1\n\n''') == \"3\"\nassert solution('''\n3\n0 0 0\n\n''') == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '0'\nassert solution('5') == '0'\nassert solution('2') == '0'\nassert solution('8') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5''') == '1'\nassert solution('''1''') == '1'\nassert solution('''3''') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\nassert solution('3') == '1'\nassert solution('0') == '1'\nassert solution('100') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('10') == '1'\nassert solution('12') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('8') == '0'\nassert solution('15') == '1'\nassert solution('16') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\nbrie soft\ncamembert soft\nfeta soft\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard''') == \"3\"\nassert solution('''1\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nOutput\n4\n''') == \"0\"\nassert solution('''6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nOutput\n4\n''') == \"0\"\nassert solution('''8\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard''') == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '3'\nassert solution('6') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    8\n    parmesan hard\n    emmental hard\n    edam hard\n    colby hard\n    gruyere hard\n    asiago hard\n    \"\"\") == \"4\"\n\n\"\"\"\n)"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"1\"\nassert solution(\"8\") == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\nparmel hard\\nemmental hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\nassert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\n\n'''\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == \"3\"\nassert solution('6\\nparmesan hard\\nemental hard\\nedam hard\\nguyen hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n') == \"4\"\nassert solution('1\\n') == \"1\"\nassert solution('0\\n') == \"0\""
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('brie soft') == '1'\nassert solution('camembert soft') == '2'\nassert solution('feta soft') == '3'\nassert solution('goat soft') == '4'\nassert solution('muenster soft') == '5'\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    '3',\n    'brie soft',\n    'camembert soft',\n    'feta soft',\n    'goat soft',\n    'muenster soft',\n    'asiago hard',\n    'cheddar hard',\n    'gouda hard',\n    'swiss hard',\n    ])) == '3'"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 1 2\n3 2 1\n''') == '1 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 0 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2 1'\nassert solution('''\n1\n0\n''') == '0 0'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 1 1\""
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n\") == \"0 0 0 1 0 2 4\""
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2'\n\nassert solution('''\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"1 1 1 2 2 3\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n\") == \"1 0 0 2\\n\"\nassert solution(\"5\\n1 2 3 4 5\\n3 2 1 1\\n\") == \"1 2 3 0 4\\n\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8\\n1 2 1 3 4 5 6 7 8\\n\") == \"3 1 2 0 0 5 6 7 8\\n\"\nassert solution(\"100\\n0 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\") == \"1 0 1 0 1 1 1 1 1 1 1 1 1\\n\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\"0\", \"1\", \"1\", \"0\"]) == \"0\"\nassert solution([\"1\", \"1\", \"0\", \"0\"]) == \"0\"\nassert solution([\"0\", \"0\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"0\", \"0\", \"1\"]) == \"0\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> str:\n        # get the length of the number\n        n = len(stdin[0])\n        # convert the numbers to int and make them positive\n        for i in range(len(stdin)):\n            stdin[i] = int(stdin[i])\n            if stdin[i] == 0:\n                stdin[i] = 1\n        # sum the numbers\n        sum = 0\n        for i in range(n):\n            sum += stdin[i]\n        # if the sum is divisible by 2 then the number is 1, else 0\n        if sum % 2 == 0:\n            return \"0\"\n        else:\n            return \"1\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"0\\n1\\n1\\n0\") == \"1\"\nassert solution(r\"0\\n1\\n1\\n1\") == \"0\"\nassert solution(r\"1\\n0\\n1\\n0\") == \"1\"\nassert solution(r\"1\\n0\\n1\\n1\") == \"0\"\nassert solution(r\"1\\n0\\n1\\n1\") == \"1\"\n\nIn the second example, the largest number in the array is 1.\n\nIn the third example, the largest number in the array is 0.\n\nIn the fourth example, the largest number in the array is 1.\n'''"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(test_data) == '1'\n'''\nimport numpy as np"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0\\n1\\n1\\n0\") == \"0\"\nassert solution(\"1\\n1\\n1\\n0\") == \"1\"\nassert solution(\"1\\n1\\n0\\n1\") == \"1\"\nassert solution(\"0\\n1\\n0\\n0\") == \"0\"\nassert solution(\"1\\n1\\n0\\n1\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0\\n1\\n1\\n0\") == \"0\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0\n1\n1\n0\n''') == '0'"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0\\n1\\n1\\n0\") == \"0\"\nassert solution(\"1\\n1\\n1\\n0\") == \"1\"\nassert solution(\"0\\n0\\n0\\n1\") == \"1\"\nassert solution(\"1\\n0\\n0\\n0\") == \"0\"\nassert solution(\"0\\n1\\n0\\n0\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('0') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0\\n1\\n1\\n0\\n\") == \"0\"\nassert solution(\"1\\n1\\n0\\n0\\n\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n\") == \"0\"\nassert solution(\"0\\n1\\n1\\n0\\n\") == \"1\"\nassert solution(\"1\\n1\\n0\\n0\\n\") == \"1\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 50') == 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 25') == 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == \"No\"\nassert solution(\"1000 15 80\") == \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 5 80\") == \"No\"\nassert solution(\"1000 50 80\") == \"No\"\nassert solution(\"1000 1 80\") == \"Yes\"\nassert solution(\"1000 1000 80\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"10000 10 5\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"100 100 100\") == \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1 1000 1 1\") == \"No\"\nassert solution(\"3 100 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1000 15 80''') == 'Yes'\nassert solution('''2 5 10''') == 'No'\nassert solution('''4 1 100''') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n''') == 'Yes'\nassert solution('''\n87 26 7\n90 72 23\n61 25 13\n5\n5\n5\n5\n5\n5\n5\n''') == 'No'\n'''"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('84 97 66\\n'\n                 '79 89 11\\n'\n                 '61 59 7\\n'\n                 '7\\n'\n                 '89\\n'\n                 '7\\n'\n                 '87\\n'\n                 '79\\n'\n                 '24\\n'\n                 '84\\n') == 'Yes'\nassert solution('84 97 66\\n'\n                 '79 89 11\\n'\n                 '61 59 7\\n'\n                 '7\\n'\n                 '89\\n'\n                 '7\\n'\n                 '87\\n'\n                 '79\\n'\n                 '24\\n'\n                 '84\\n') == 'No'\nassert solution('84 97 66\\n'\n                 '79 89 11\\n'\n                 '61 59 7\\n'\n                 '7\\n'\n                 '89\\n'\n                 '7\\n'\n                 '87\\n'\n                 '79\\n'\n                 '24\\n'\n                 '84\\n') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"89\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\") == 'Yes'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n80\") == 'No'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n88\") == 'No'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n89\") == 'No'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\") == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'No'\nassert solution('89') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7') == 'Yes', \"Question 1\"\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7') == 'No', \"Question 2\"\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7') == 'Yes', \"Question 3\"\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7') == 'No', \"Question 4\"\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7') == 'Yes', \"Question 5\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n7\\n84') == 'No'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n7\\n84\\n7\\n84') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'No'\nassert solution('89') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84') == 'No'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n') == 'Yes'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"30\"\nassert solution(\"2 3\") == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"41 2\") == \"30\"\nassert solution(\"41 50\") == \"30\"\nassert solution(\"41 -1\") == \"30\"\nassert solution(\"41 -1 50\") == \"30\"\nassert solution(\"10 20\") == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('41 2') == '30'\nassert solution('5 6') == '30'\nassert solution('100 10') == '100'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '-1'\nassert solution('5 2') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('41 2') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"41 2\") == \"30\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"10 3\") == \"1\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"30\"\nassert solution(\"41 2\") == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\nassert solution(\"41 2\\n5 6\") == \"30\"\nassert solution(\"41 2\\n5 6\") == \"30\"\nassert solution(\"41 2\\n5 6\") == \"30\"\nassert solution(\"41 2\\n5 6\") == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"30\"\nassert solution(\"3 3\") == \"30\"\nassert solution(\"4 3\") == \"30\"\nassert solution(\"5 6\") == \"30\"\nassert solution(\"6 3\") == \"-1\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n10\n10\n''') == '30', \"First\"\nassert solution('''\n3\n12\n10\n''') == '30', \"Second\"\nassert solution('''\n2\n10\n3\n''') == '-1', \"Third\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\nassert solution(\"1 2\\n\") == \"1\"\nassert solution(\"0 1\\n\") == \"1\"\nassert solution(\"2 1\\n\") == \"2\"\nassert solution(\"0 1\\n\") == \"1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 5') == '5'\nassert solution('0 10') == '10'\nassert solution('0 100') == '10'\nassert solution('1 100') == '100'\nassert solution('2 100') == '100'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 5') == '5'\nassert solution('1 2') == '1'\nassert solution('2 3') == '2'\nassert solution('2 4') == '2'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5') == '5'\nassert solution('2 0') == '1'\nassert solution('0 0') == '1'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\nassert solution(\"1 10\\n\") == \"10\"\nassert solution(\"1 5\\n\") == \"5\"\nassert solution(\"0 3\\n\") == \"3\"\nassert solution(\"0 4\\n\") == \"4\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"0 5\") == \"5\""
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 5') == '5'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('1 4') == '4'\nassert solution('2 5') == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 5') == '5'\nassert solution('1 5') == '5'\nassert solution('2 5') == '5'\nassert solution('0 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 5') == '5'\nassert solution('0 2') == '1'\nassert solution('1 2') == '2'\nassert solution('0 1') == '2'\nassert solution('0 3') == '1'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 5\") == \"5\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n7 6 8\\n\") == \"2\"\nassert solution(\"3\\n9 5 7\\n\") == \"1\"\nassert solution(\"10\\n40 50 2 2\\n\") == \"2\"\nassert solution(\"3\\n7 6 8\\n\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n7 6 8\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n12 10 8 15 7\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7\n3 3 6 4 5 2 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n3\n\n4\n3\n1\n''') == '2'\nassert solution('''2\n2\n1\n\n4\n3\n1\n''') == '2'\nassert solution('''3\n1\n2\n\n4\n3\n1\n\n5\n4\n3\n\n6\n5\n4\n\n7\n6\n5\n\n8\n7\n6\n\n9\n8\n7\n\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n38\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n39\n38\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n40\n39\n38\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n41\n40\n39\n38\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n42\n41\n40\n39\n38\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n7 6 8\n''') == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n7 6 8\\n') == '2'\nassert solution('2\\n4 6 8\\n') == '2'\nassert solution('5\\n10 9 6 2\\n') == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n7 6 8\n''') == '2'\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"2\") == \"2 3 1\"\nassert solution(\"3\") == \"3 1 2\"\nassert solution(\"2\") == \"2 3 1\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 3 1\n''') == '3 1 2'\nassert solution('''4\n2 3 3 1\n''') == '1 3 2 4'\nassert solution('''5\n3 4 2 1\n''') == '2 4 3 1 5'\nassert solution('''6\n2 3 1 1 3 1\n''') == '3 1 2 1 3 1'\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3 1 2'\nassert solution('2 3 1') == '3 1 2'"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n\"\"\") == \"3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 3 2 4\""
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n4 3 1\n''') == '3 1 2 4'\nassert solution('''2\n4 2 3 1\n''') == '2 3 4 1'\nassert solution('''2\n2 4 3 1\n''') == '4 3 2 1'\nassert solution('''2\n2 2 2 1\n''') == '2 2 2 1'\nassert solution('''3\n3 1 2\n''') == '3 1 2 3'\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n') == '3 1 2'\nassert solution('1\\n2\\n4\\n') == '4 1 2 3'\nassert solution('2\\n2\\n2\\n') == '2 1 2'\nassert solution('2\\n3\\n2\\n') == '3 1 2'\nassert solution('3\\n2\\n2\\n') == '2 1 2'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"9\"\n\"\"\"\n\nA, B, X = map(int, input().split())"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([10, 7, 100]) == \"9\"\nassert solution([10, 10, 100]) == \"0\"\nassert solution([1, 1, 1]) == \"0\"\nassert solution([10, 1, 100]) == \"9\"\nassert solution([1, 1, 1]) == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 20 7 100') == '0'\nassert solution('10 20 8 6') == '1'\nassert solution('1 2 3') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 7 100\") == \"9\"\nassert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 1 100\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 1\") == \"0\"\nassert solution(\"10 7 0\") == \"0\"\nassert solution(\"10 1 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 100\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 11 100') == '0'\nassert solution('10 1 100') == '9'\nassert solution('10 2 100') == '0'\nassert solution('10 3 100') == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('5 7 0') == '0'\nassert solution('10 100 2') == '10'\nassert solution('10 10 2') == '10'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 7 10') == '9'\nassert solution('5 7 10 11') == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 7 100') == '9'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == '2'\nassert solution('3 4') == '1'\nassert solution('5 5') == '0'\nassert solution('7 2') == '1'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"2 2\\n1 1\\n2 2\") == \"1\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(TEST_INPUT) == \"2\"\nassert solution(INPUT) == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '2', 'Should be 2'\nassert solution('3 1 1 1') == '1', 'Should be 1'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 2\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"2\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"3 10\") == \"2\"\nassert solution(\"4 10\") == \"1\"\nassert solution(\"5 10\") == \"3\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n5\n1 2 5 8''') == '2'\nassert solution('''4\n5\n1 2 3 4''') == '1'\nassert solution('''10\n5\n1 2 3 4 5 6 7 8 9''') == '1'"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1\\n3 2 1\\n') == 'No'\nassert solution('10 20\\n5 5 2 4 2 3 5 1\\n') == 'Yes'\nassert solution('20 50\\n5 5 2 4 2 3 5 1\\n') == 'Yes'"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1\n5 4 2 1\n''') == 'Yes'\nassert solution('''2 1\n6 5 3 1\n''') == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1') == 'Yes'\nassert solution('3 1') == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1\\n5 4 2 1') == 'Yes'\nassert solution('4 1\\n5 4 2 1') == 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n5 4 2 1\\n\") == \"Yes\"\nassert solution(\"5 1\\n4 2 2 1\\n\") == \"No\"\nassert solution(\"7 1\\n6 2 5 1\\n\") == \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 1\n5 4 2 1\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n4 1\n10 5 2 1\n\"\"\") == \"No\"\n\"\"\"\ninput\n\n12\n3\n10 5 2 1\n\noutput\n\nYes\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 1') == 'Yes'\nassert solution('5 3') == 'No'\nassert solution('9 3') == 'No'\n\"\"\"\n\n\"\"\"--- Day 5: Binary Boarding ---\nYou board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.\n\nYou write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.\n\nInstead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means \"front\", B means \"back\", L means \"left\", and R means \"right\".\n\nThe first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.\n\nFor example, consider just the first seven characters of FBFBBFFRLR:\n\nStart by considering the whole range, rows 0 through 127.\nF means to take the lower half, keeping rows 0 through 63.\nB means to take the upper half, keeping rows 32 through 63.\nF means to take the lower half, keeping rows 32 through 47.\nB means to take the upper half, keeping rows 40 through 47.\nB keeps rows 44 through 47.\nF keeps rows 44 through 45.\nThe final F keeps the lower of the two, row 44.\nThe last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.\n\nFor example, consider just the last 3 characters of FBFBBFFRLR:\n\nStart by considering the whole range, columns 0 through 7.\nR means to take the upper half, keeping columns 4 through 7.\nL means to take the lower half, keeping columns 4 through 5.\nThe final R keeps the upper of the two, column 5.\nSo, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.\n\nEvery seat also has a unique seat ID: multiply the row by 8, then add the column. In this example, the seat has ID 44 * 8 + 5 = 357.\n\nHere are some other boarding passes:\n\nBFFFBBFRRR: row 70, column 7, seat ID 567.\nFFFBBBFRRR: row 14, column 7, seat ID 119.\nBBFFBBFRLL: row 102, column 4, seat ID 820.\n\nAs a sanity check, look through your list of boarding passes. What is the highest seat ID on a boarding pass?\n\n--- Part Two ---\nDing! The \"fasten seat belt\" signs have turned on. Time to find your seat.\n\nIt's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.\n\nYour seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.\n\nWhat is the ID of your seat?\n\n\"\"\"\nfrom string import ascii_lowercase\nimport re\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"4 1\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == 'Yes'\nassert solution('10 10') == 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 2') == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3 2\n..#\n###\n''') == '5'\n\nassert solution('''2 3 1\n..#\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3 2\n..#\n###''') == '5'\nassert solution('''3 1 2\n...#\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2 3 2'\n    '..#'\n    '#.#'\n) == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 2\") == \"5\"\nassert solution(\"5 5 2\") == \"10\"\nassert solution(\"5 5 2\") == \"10\"\nassert solution(\"5 5 2\") == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\nassert solution(\"1 2 1\\n#.#\\n###\") == \"4\"\nassert solution(\"2 3 2\\n.#.#\\n###\") == \"1\"\nassert solution(\"2 3 2\\n#.##\\n###\") == \"0\""
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3 2\n..#\n###\n''') == '5'\nassert solution('''\n3 3 3\n###\n###\n###\n''') == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3 2\n##\n###''') == '5'\nassert solution('''5 5 1\n##\n####''') == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3 2\"\n    \"..#\"\n    \"###\"\n) == \"5\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == \"2\""
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2020 2040') == '2'\nprint(solution(input()))\n\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2020 2040') == '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nprint(solution(input()))"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"\") == \"\"\nassert solution(\"2020\") == \"\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2020 2040\") == \"2\""
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"2020 2040\") == \"2\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == \"AC\"\n\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('2C2') == 'WA'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 'AC'\nassert solution('ATCOBJER') == 'WA'\nassert solution('ATTACKER') == 'WA'\nassert solution('AAAAAA') == 'WA'\nassert solution('ATTACKER') == 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('CoderAtCoder') == 'AC'\nassert solution('AtcodAcde') == 'WA'\nassert solution('AtCoder') == 'WA'\nassert solution('CoderAtcoder') == 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('PYTHON') == 'WA'\nassert solution('WAFER') == 'WA'\nassert solution('AtCoder') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'WA'\nassert solution('AtCoder') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == \"AC\", solution(\"AtCoder\")\nassert solution(\"ABC\") == \"WA\", solution(\"ABC\")\nassert solution(\"aBC\") == \"WA\", solution(\"aBC\")\nassert solution(\"AtCoderA\") == \"WA\", solution(\"AtCoderA\")\nassert solution(\"ABCc\") == \"WA\", solution(\"ABCc\")\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"ATCODER\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"AC\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1214') == '2'\nassert solution('124321') == '3'\nassert solution('1234567') == '7'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1214') == '2'\nassert solution('1214') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\nassert solution('1224') == '2'\nassert solution('12234') == '3'\nassert solution('12234') == '3'\nassert solution('12234') == '3'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1214') == '2'\nassert solution('12321') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\n\n----End----\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1214') == '2'\nassert solution('1224') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1324') == '3332224444', 'First Test Case'\nassert solution('33333') == '3333333', 'Second Test Case'\nassert solution('1111') == '1', 'Third Test Case'\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1324') == '3'\nassert solution('13242214444') == '2'\nassert solution('1324221444423') == '1'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1324') == '3'\nassert solution('1324') == '3'\nassert solution('1324') == '3'\nassert solution('1324') == '3'\nassert solution('1324') == '3'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 2 3 4 1\") == \"YES\"\n\n\"\"\"\n\nimport math\n\nn = int(input())\np = list(map(int, input().split()))\n\nx = sorted(p)"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"10 1 2 5 4 3\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin + '\\nYES') == 'YES'\nassert solution(stdin + '\\nNO') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n\n'''"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n5 2 3 4 1\n''') == 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"3 2 4 1\") == \"NO\""
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"20190181\") == \"2\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\""
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == 2, \"3|1|21\"\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3121''') == '2'\nassert solution('''6''') == '1'\nassert solution('''201920181''') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"1\"\nassert solution(\"121\") == \"1\"\nassert solution(\"1212\") == \"2\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n123456789\n'''\n) == '12'\n\nassert solution(\n'''\n123456789\n'''\n) == '1'\n\nassert solution(\n'''\n201920181\n'''\n) == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == stdout_"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2\\n'\nassert solution('3\\n1 2 -1\\n-6 -12 6\\n') == '3\\n'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0\\n'\nassert solution('3\\n1 2\\n1 2\\n') == '1\\n'\n\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution(stdin='''\n13 37 39\n1 2 3\n''') == '0'\nassert solution(stdin='''\n3\n1 2 3\n''') == '2'\nassert solution(stdin='''\n4\n0 0 0 0\n1 2 3 4\n''') == '0'\nassert solution(stdin='''\n3\n1 2 -1\n-6 -12 6\n''') == '3'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n2 4 7 11 3\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n0 0 0 0\n1 2 3\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n0 0 0 0\n1 2 3\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '0'\nassert solution('3\\n') == '2'"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '0'\nassert solution('''4\n0 0 0 0\n1 2 3\n''') == '3'\nassert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''\n4\n0 0 0 0\n1 2 3\n''') == '0'\nassert solution('''\n3\n1 2 -1\n-6 -12 6\n''') == '3'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '3'\nassert solution('''4\n0 0 0 0\n1 2 3\n''') == '0'\nassert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\n\nassert solution('''\n3\n1 2 3\n2 4 7\n''') == '1'\n\nassert solution('''\n4\n0 0 0 0\n1 2 3\n2 4 7\n''') == '0'\n\nassert solution('''\n5\n1 2 3 4 5\n2 4 7 11 3\n6 8 9 10 12\n''') == '3'\n\nprint(solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n2 4 7 11 3\n6 8 9 10 12\n'''))\n\n\"\"\"\n\na,b = map(int, input().split())\n\nfor i in range(len(b)):\n    print(a*b[i], end=\"\")\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '3'\nassert solution('''4\n0 0 0 0\n1 2 3 4\n''') == '0'\nassert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nprint('all test cases passed')"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\nabaca?b\") == \"5\"\nassert solution(\"10\\nbambarbia\") == \"0\"\nassert solution(\"4\\nhellocode\") == \"10\"\n\n\n\"\"\"\n\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10\nabaca?b\nzabbbcc\n''') == '5'\nassert solution('''7\nbambarbia\nhellocode\n''') == '6'\n\nassert solution('''9\nbambarbia\nhellocode\n''') == '0'\n\nassert solution('''10\ncode??????\n??????test\n''') == '10'\n\nassert solution('''7\na????????b\nc????????b\n''') == '6 2'"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"7 8\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"7\") == \"6 2\"\nassert solution(\"9\") == \"6 7 3 5 4 8 9 10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '0'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '0'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"10\\n\"\n    \"abaca?b\\n\"\n    \"zabbbcc\\n\"\n) == \"5\\n\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INP_STDIN) == OUT_STDOUT\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\nassert solution('4') == '3'\nassert solution('11') == '4 4 4 4 4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7\n4 1 2 2 1 5 3\n''') == '3'\nassert solution('''\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution('''\n4\n1 1 1 1\n''') == '4 4\n'''\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"8\") == \"5\"\nassert solution(\"11\") == \"4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n''') == '2'\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n''') == '2'\nassert solution('''\n2\n2\n2\n2\n2\n2\n2\n''') == '3'\nassert solution('''\n3\n3\n3\n3\n3\n3\n3\n''') == '4'\nassert solution('''\n4\n4\n4\n4\n4\n4\n4\n''') == '4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n5') == '4'\nassert solution('11') == '3 4'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2 4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"4 4 4 4 4 4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3 3\"\nassert solution(\"4\") == \"4 4\"\nassert solution(\"5\") == \"4 4\"\nassert solution(\"6\") == \"4 4\"\nassert solution(\"7\") == \"3 3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"11\") == \"4\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"4 4 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"11\\n5 5 5 5 5 5 5\") == \"6\"\nassert solution(\"3\\n1 2 3\") == \"3\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"12\\n\"\n) == \"7\"\n\nassert solution(\n    \"5 2\\n\"\n    \"3 7 19 3 3\\n\"\n) == \"12\"\n\nassert solution(\n    \"6 2\\n\"\n    \"78 4 10 12 11 7\\n\"\n) == \"7\"\n\nassert solution(\n    \"7 2\\n\"\n    \"2 78 4 10 12 11 7\\n\"\n) == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 11\n45 1 10 12 11 7\n''') == '7'\nassert solution('''4 2\n2 78 4 10\n''') == '12'\nassert solution('''5 2\n3 7 19 3 3\n''') == '0'\nassert solution('''6 12\n34 1 3 4 6 7\n''') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"7\"\nassert solution(input, True) == \"0\""
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4\\n7 2 8 4') == '7'\nassert solution('3 4\\n7 2 6 5') == '2'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == '7'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([6, 11], [45, 1, 10, 12, 11, 7]) == 7\nassert solution([4, 2], [2, 78, 4, 10]) == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 11\n45 1 10 12 11 7\n''') == '7'\nassert solution('''4 2\n2 78 4 10\n''') == '12'\nassert solution('''5 2\n3 7 19 3 3\n''') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 11\n45 1 10 12 11 7\n''') == '7'\n\nassert solution('''\n4 2\n2 78 4 10\n''') == '12'\n\nassert solution('''\n5 2\n3 7 19 3 3\n''') == '0'"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '1'\nassert solution('100') == '1'\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '9'\nassert solution('5') == '9'\nassert solution('4') == '5'\nassert solution('2') == '2'"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2, 5]) == 9\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '9'\nassert solution('2') == '6'\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3], ['2', '5']) == '9'\nassert solution([10], ['5']) == '55'\nassert solution([30], ['-5', '4', '-5', '-4', '2', '1']) == '4'\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10\n2 4 6 -5 8 5 -8 7 -6 -5\n\"\"\") == \"12\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"2 3 4\") == \"5\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '9'\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('1234') == '1234'\nassert solution('12345678910') == '12345678910'\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 5\n''') == '9'\nassert solution('''\n3\n1 2 3\n''') == '7'\nassert solution('''\n3\n3 3 3\n''') == '18'\nassert solution('''\n100\n1 5 1 2 3 2 3 2 4 2 5\n''') == '55555'"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '9'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n''') == '110'\nassert solution('''\n3 2 3\n3 1 3 100\n3 2 2 10\n3 1 1 10\n''') == '110'\nassert solution('''\n2 5 3\n4 1 2 100\n4 5 2 10\n4 1 1 10\n''') == '110'\nassert solution('''\n7 7 5\n1 3 4 100\n1 5 5 10\n1 2 5 10\n1 6 4 10\n2 5 3 10\n2 6 3 10\n2 7 3 10\n''') == '110'\nassert solution('''\n5 6 8\n1 2 4 100\n1 3 2 10\n1 3 3 10\n1 5 3 10\n1 6 4 10\n2 4 6 10\n2 6 4 10\n2 7 4 10\n2 8 4 10\n3 6 5 10\n3 7 5 10\n4 6 3 10\n4 7 3 10\n4 8 3 10\n5 6 2 10\n5 7 2 10\n5 8 2 10\n6 7 2 10\n6 8 2 10\n7 8 2 10\n''') == '110'\n'''\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n\"\"\") == '110'\nassert solution(\"\"\"\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n\"\"\") == '110'\nassert solution(\"\"\"\n10 4 3\n1 3 3 10\n1 2 2 10\n2 3 2 10\n4 5 5 5 5\n6 7 8 7 8\n\"\"\") == '230'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '110'\nassert solution('1 2 2 2') == '3'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\"\"\") == \"110\"\n\nassert solution(\"\"\"2 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\"\"\") == \"110\"\n\nassert solution(\"\"\"5 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n3 4 2 10\n4 5 2 10\"\"\") == \"110\"\n\nassert solution(\"\"\"8 8 8\n1 2 2 10\n2 3 2 10\n3 4 2 10\n4 5 2 10\n5 6 2 10\n6 7 2 10\n7 8 2 10\"\"\") == \"208\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 4 3\") == \"110\"\nassert solution(\"3 4 3\") == \"110\"\nassert solution(\"5 5 3\") == \"150\"\nassert solution(\"3 5 3\") == \"150\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 3') == '110'\nassert solution('1 3 3 100') == '110'\nassert solution('1 2 2 10') == '100'\nassert solution('2 3 2 10') == '100'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 3 100\\n1 2 2 10\\n2 3 2 10\\n') == '110'\nassert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\\n') == '110'\nassert solution('4 5 2\\n1 5 5 100\\n1 2 2 10\\n2 3 2 10\\n') == '120'"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\""
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 3 4 5') == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 4 6 3\n''') == '5'\n\nassert solution('''\n4\n1 4 6 3\n''') == '4'\n\nassert solution('''\n6\n1 4 5 2 3 7\n''') == '5'\n\nassert solution('''\n6\n1 4 5 2 3 -7\n''') == '-7'\n\nassert solution('''\n6\n1 4 5 2 3 -7\n''') == '5'"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n') == '5\\n'\n\nimport atexit\nimport io\nimport sys\n\nclass _State:\n    def __init__(self, code, stdin, stdout):\n        self.code = code\n        self.stdin = stdin\n        self.stdout = stdout\n\n_state = None\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 4 6 3\n''') == '5'\nassert solution('''2\n5 4\n''') == '0'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 4 6 3\n''') == '5'\nassert solution('''5\n1 4 6 3\n''') == '0'\nassert solution('''6\n1 4 6 3\n''') == '3'\nassert solution('''3\n1 4 6 3\n''') == '0'\nassert solution('''7\n1 4 6 3\n''') == '2'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4 6 3') == '5'\nassert solution('5') == '0'\nassert solution('0') == '0'"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2.276142\"\nassert solution(\"4\") == \"2.928777\"\nassert solution(\"5\") == \"2.636122\"\nassert solution(\"6\") == \"2.636122\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2.27614\"\nassert solution(\"2\") == \"2.27614\"\n\n'''\n\nfrom math import sqrt\nfrom statistics import mean"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1\n''') == '2.2761423749'\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.276142\"\nassert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.276142\"\nassert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.276142\"\nassert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.276142\"\nassert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.276142\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"4\") == \"2.5360832048\"\nassert solution(\"5\") == \"2.4622885062\"\nassert solution(\"6\") == \"2.4620685977\"\nassert solution(\"7\") == \"2.4620685977\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2.2761423749'\nassert solution('100') == '9.5238095238095238'\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"6\") == \"4.0937447636\"\nassert solution(\"8\") == \"4.0937447636\"\nassert solution(\"5\") == \"4.0937447636\"\nassert solution(\"10\") == \"4.0937447636\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2.276142372'\nassert solution('2') == '1.5714285714'\nassert solution('1') == '0.0'\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1\n''') == \"2.2761423749\"\nassert solution('''8\n-2 2\n3 -1\n3 -3\n-3 -2\n-2 -3\n-2 3\n-4 4\n-3 -1\n''') == \"7.290566462561\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"2.276142374\"\n\"\"\"\n\nfrom math import sqrt\nfrom itertools import permutations"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"7 7\") == \"7\""
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\nassert solution('6 5') == '5'\nassert solution('1 1') == '0'\n\n\"\"\"\n\nA,B=map(int,input().split())\nprint(max(0,A-B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\nfrom math import ceil\nA, B = map(int, input().split())\nprint(ceil(A - ((A - 4) * 2) / B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '3'\nassert solution('10 10') == '0'\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"20 4\") == \"8\"\nassert solution(\"10 3\") == \"5\"\nassert solution(\"13 0\") == \"13\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"12 4\") == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 4') == '4'\nassert solution('10 11') == '0'\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"10 20\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 5\") == \"6\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"4\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000') == '3'\nassert solution('10000') == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10000\") == \"3\"\nassert solution(\"5\") == \"1\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1\n''') == '1'\nassert solution('''2\n2\n''') == '2'\nassert solution('''3\n2\n''') == '2'\nassert solution('''4\n3\n''') == '2'\nassert solution('''5\n4\n''') == '2'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10000') == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10000\") == \"3\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"10000\") == \"100\"\nassert solution(\"1000000\") == \"100\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == 'None'\nassert solution(\"\") == 'None'\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"100 200\") == \"86\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '1'\nassert solution('2 1 3') == '2'\nassert solution('3 1 2 3') == '3'\nassert solution('2 3 2') == '0'\nassert solution('4 3') == '1'\n\n'''\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n1 2 3\n2 3 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n3 1 2\n3 1 2 3\n2 3 2\n''') == '1'\nassert solution('''3 3\n3 1 2\n2 3 2\n3 1 2 3\n''') == '4'\nassert solution('''5 2\n2 1 3\n3 1 2 3\n2 3 2\n3 1 2 3\n''') == '2'\n\n'''"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 3\\n3 1 2 3') == '1'\nassert solution('2 4\\n3 3 3 2\\n2 1 2 3') == '4'\nassert solution('1') == '1'"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '1'\nassert solution('5 2') == '4'\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"1\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"0.5000000000\""
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0.16666666666666666'\nassert solution('4') == '0.16666666666666666'\nassert solution('10') == '0.0'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5000000000'\n\n---Input Format---\nThe first line contains N.\nThe second line contains the integer, a.\n\n---Output Format---\nPrint a single line of output containing one decimal.\n'''\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5000000000'\nassert solution('6') == '0.3333333333'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.3333333333333333'\nassert solution('3') == '0.16666666666666666'\nassert solution('4') == '0.16666666666666666'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"0.5000000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '0.5000000000'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0.5\"\nassert solution(\"4\") == \"0.5\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n''') == '0.5000000000'\nassert solution('''\n4\n''') == '0.5000000000'\nassert solution('''\n3\n''') == '0.50000000'\nassert solution('''\n2\n''') == '0.5000000'\nassert solution('''\n1\n''') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.3333333333333333333333333333333333333\"\nassert solution(\"4\\n\") == \"0.25\""
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\"\n) == \"2\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"2\"\n) == \"1\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"3\"\nassert solution(\"\"\"\n15\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input) == '2'\nassert solution(input) == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n2 1\n1\n1 1\n1\n2 0\n\n''') == '2'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'\nassert solution('4') == '3'\nassert solution('6') == '3'\nassert solution('10') == '4'"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"4\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"3\"\nassert solution(\"6\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"4\"\nassert solution(\"10\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"5\"\nassert solution(\"15\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"6\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1\n2 1\n1\n1 1\n1\n2 0\n''') == '2'\nassert solution('''\n1\n2 1\n1\n1 1\n1\n2 0\n''') == '1'\nassert solution('''\n3\n1\n2 1\n1\n1 1\n1\n2 0\n''') == '2'\nassert solution('''\n5\n1\n2 1\n1\n1 1\n1\n2 0\n''') == '2'\nassert solution('''\n3\n1\n2 1\n1\n1 1\n1\n2 0\n''') == '1'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand\"\nassert solution(\"nikoandsolstice\", 1) == \"nikoand\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '4'\nassert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice\") == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3\n    a\n    b''') == \"ab\"\nassert solution('''\n    3\n    abcdefg\n    hijk''') == \"abcdefghijk\"\nassert solution('''\n    20\n    hikjlmnopqrstuvwxyzabcdefghijklmno''') == \"hikjlmnopqrstuvwxyzabcdefghijklmno\"\nassert solution('''\n    33\n    abcd\n    e''') == \"abcdabce\"\nassert solution('''\n    33\n    abc\n    e''') == \"abc\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"nikoandsolstice\", \"First\"\nassert solution(\"10\") == \"nikoandsolstice\", \"Second\"\nassert solution(\"12\") == \"nikoandsolstice\", \"Third\"\nassert solution(\"100\") == \"nikoandsolstice\", \"Fourth\"\nassert solution(\"101\") == \"nikoandsolstice\", \"Fifth\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('15\\n30\\n') == '30\\n'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"mama\") == \"mama\"\nassert solution(\"mama\") == \"mama\"\nassert solution(\"nikoandsolstice\") == \"nikoandsolstice\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('nikoandsolstice') == 'nikoand...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '6', \"You failed the tests\"\nassert solution('6') == '6', \"You failed the tests\"\nassert solution('6') == '6', \"You failed the tests\"\nassert solution('6') == '6', \"You failed the tests\"\nassert solution('6') == '6', \"You failed the tests\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('3') == '3'\nassert solution('100') == '100'\nassert solution('20') == '20'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('mango') =='mangoes'\nassert solution('cat') == 'cats'\nassert solution('dog') == 'dogs'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('apple') == 'apples'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\""
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"apple\") == \"apples\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\n\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"orange\") == \"oranges\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2\n1 3\n1''') == '1'\nassert solution('''3 2\n2\n2 4\n1''') == '3'\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 4') == '1'\nassert solution('2 2') == '2'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1\n3\n1''') == '1', \"Wrong!\"\nassert solution('''3 2\n1\n3\n1''') == '2', \"Wrong!\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\n\n--1 point--\n\"\"\"\nfrom itertools import product\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '1'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\", \"Wrong!\"\nassert solution(\"3 3\") == \"0\", \"Wrong!\"\nassert solution(\"3 3\") == \"0\", \"Wrong!\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '1'\nassert solution('3 4') == '0'\nassert solution('2 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"2\\n\"\n    \"1 3\\n\"\n    \"1\\n\"\n    \"3\\n\"\n) == \"1\"\n\nassert solution(\n    \"3 2\\n\"\n    \"2\\n\"\n    \"1 3\\n\"\n    \"1\\n\"\n    \"3\\n\"\n) == \"2\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10\\n') == '5'\nassert solution('20\\n') == '2'\nassert solution('30\\n') == '2'\nassert solution('10\\n') == '5'\nassert solution('20\\n') == '2'\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '5'"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\""
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\\naabbbbaaca\") == \"5\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\naabbbbaaca') == '5'\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '5'\nassert solution('20') == '5'\nassert solution('1020') == '5'\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        slimes = list(stdin)\n\n        slimes_idx = {}\n\n        for i, s in enumerate(slimes):\n            if s not in slimes_idx:\n                slimes_idx[s] = i\n        \n        slimes = list(slimes)\n\n        left = 0\n        right = 1\n        color_num = 0\n        while right < len(slimes) - 1:\n            if slimes[left] == slimes[right]:\n                color_num += 1\n                slimes[left] = 'c'\n                slimes[right] = 'c'\n                left += 1\n                right += 1\n            else:\n                if slimes[left]!= 'c':\n                    slimes[left] = 'c'\n                    slimes[right] = 'c'\n                slimes[left] = slimes[right]\n                left += 1\n                right += 1\n        \n        return f'{color_num}'"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\nassert solution('11') == '1'\nassert solution('100') == '10'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"11\"\nassert solution(\"500\") == \"12\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n5 2 4\n''') == '3'\nassert solution('''8\n5 2 4 5 2 4 5 2\n''') == '3'\nassert solution('''5\n5 2 4 5 2 4 5 2\n''') == '3'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5 2 4\") == \"3\""
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"3\\n5 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\\n5 2 4\") == \"3\"\n\n------Time Limit Exceeded------\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n5 2 4\n''') == '3'\nassert solution('''4\n5 2 4\n''') == '4'\nassert solution('''2\n1 2\n''') == '2'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5 2 4\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n5 2 4\\n') == '3'\nassert solution('4\\n5 2 4\\n') == '2'\nassert solution('6\\n5 2 4\\n') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == '4'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == '5'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"3\"\nassert solution(\"9\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 -1 1\") == \"0\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 3\") == \"2\"\nassert solution(\"2 2 3 -1\") == \"2\"\nassert solution(\"4 5 4 -1\") == \"5\"\n\n'''\n\nimport math\n\nA, B, C, K = map(int, input().split())"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''2 1 1 3\n''') == '2'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"5 0 2 0 1\") == \"5\""
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1 3') == '2'\nassert solution('4 5 1 2') == '5'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 1 3''') == '2'\nassert solution('''2 1 1 3''') == '2'\nassert solution('''1 1 1 0''') == '1'\nassert solution('''2 1 1 3''') == '2'\nassert solution('''0 0 0 1''') == '1'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 1 3''') == '2'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('7 3 1 4') == '4'\nassert solution('10 2 3 4') == '7'\nassert solution('1 2 1 1') == '1'\nassert solution('10 3 1 2') == '10'"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1 3') == '2'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 5 1 2\") == \"3\"\nassert solution(\"1 3 3 3\") == \"6\"\nassert solution(\"2 2 3 1\") == \"1\"\nassert solution(\"2 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"5 9\") == \"No\"\nassert solution(\"3 4\") == \"Yes\"\nassert solution(\"5 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('4 5') == 'No'\nassert solution('6 4') == 'Yes'\nassert solution('1 1') == 'No'\nassert solution('1 1') == 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('4 3') == 'No'\nassert solution('10 1') == 'Yes'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"3 9\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('1 2') == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10\") == \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Yes\"\nassert solution(\"3 8\") == \"Yes\"\nassert solution(\"3 9\") == \"No\"\n\"\"\"\n\nx, y = map(int, input().split())"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('1 1') == 'No'"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"1 2\") == \"1\""
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 2''') == '2'\n\n'''\n\n\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self,n):\n        self.nodes = n\n        self.graph = defaultdict(list)\n\n    def add_edge(self,u,v):\n        self.graph[u].append(v)\n\n    def find_paths(self,s,d):\n        paths = []\n        visited = [False] * self.nodes\n        \n        def dfs(u,visited,path):\n            visited[u] = True\n            path.append(u)\n            if u == d:\n                paths.append(path)\n                return\n\n            for node in self.graph[u]:\n                if not visited[node]:\n                    dfs(node,visited,path)\n\n        dfs(s,visited,[])\n        return paths\n\n    def print_paths(self):\n        paths = self.find_paths(1,self.nodes)\n        paths_s = []\n        for path in paths:\n            print(path)\n            paths_s.append('->'.join(str(x) for x in path))\n\n        print('\\n'.join(paths_s))\n\n\ng = Graph(3)\ng.add_edge(1,2)\ng.add_edge(1,3)\ng.add_edge(2,3)\ng.print_paths()"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == '2'\n\"\"\"\n\nimport math\nfrom itertools import combinations\nimport sys"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('2 3') == '3'\n\"\"\"\nimport sys\nimport collections\nclass Solution:\n    def solve(self, stdin):\n        N, M = map(int, stdin.split())\n        \n        graph = [[] for _ in range(N)]\n        for i in range(M):\n            a, b = map(int, stdin.split())\n            a -= 1\n            b -= 1\n            graph[a].append(b)\n            graph[b].append(a)\n        \n        count = 0\n        visited = set()\n        for vertex in range(N):\n            if vertex == 1:\n                visited.add(vertex)\n                count += 1\n            elif len(visited) == N:\n                break\n            else:\n                self.dfs(graph, visited, vertex, 1)\n        return count\n    \n    def dfs(self, graph, visited, vertex, parent):\n        visited.add(vertex)\n        for child in graph[vertex]:\n            if child == parent:\n                continue\n            if child in visited:\n                return\n            self.dfs(graph, visited, child, vertex)"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3\n''') == '2'\nassert solution('''5 5\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '3'\nassert solution('''10 10\n0 0\n1 1\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n''') == '8'\nassert solution('''7 7\n0 0\n1 1\n1 2\n1 3\n1 4\n2 5\n3 6\n4 7\n''') == '7'\nassert solution('''3 3\n1 2\n1 3\n2 3\n''') == '1'\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('2 3') == '4'\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '2'\n'''\n\n\nclass Graph:\n    def __init__(self, n, m):\n        self.adjacency_list = {i: [] for i in range(n)}\n        self.n = n\n        self.m = m\n\n    def addEdge(self, x, y):\n        self.adjacency_list[x].append(y)\n        self.adjacency_list[y].append(x)\n\n    def isCyclic(self, source, visited):\n        visited[source] = 1\n        for i in self.adjacency_list[source]:\n            if visited[i] == 0:\n                if self.isCyclic(i, visited):\n                    return True\n            elif visited[i] == 1:\n                return True\n        visited[source] = 2\n        return False\n\n    def count_paths(self, source):\n        visited = [0 for i in range(self.n)]\n        count = 0\n        for i in self.adjacency_list[source]:\n            if visited[i] == 0:\n                if self.isCyclic(i, visited):\n                    count = count + 1\n        return count\n\n\nn, m = map(int, input().split())\ng = Graph(n, m)\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    g.addEdge(a, b)"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '2'\n'''\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == \"2\"\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n''') == \"1\"\n'''\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(1) == 18\nassert solution(2) == 24\nassert solution(3) == 18\nassert solution(4) == 20\nassert solution(5) == 24\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"18\"\nassert solution(\"6 5\") == \"23\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"18\", \"Wrong solution\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('4 1') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2 3') == '5'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '6'\nassert solution('1 2 3 4 5 6') == '8'\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"./input.txt\") == \"18\"\nassert solution(\"./input_test.txt\") == \"10\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2''') == '18'\nassert solution('''6 5''') == '19'\nassert solution('''4 7''') == '16'"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == '10'\nassert solution('20 5') == '5'\nassert solution
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '18'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('15') == '60'"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"12\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"Buzz\"\nassert solution(\"10\") == \"FizzBuzzFizzBuzzFizzBuzzFizzBuzz\"\nassert solution(\"10\") == \"FizzBuzzFizzBuzzFizzBuzzFizzBuzz\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2\\n'\nassert solution('10') == '60\\n'\nassert solution('20') == '40\\n'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"60\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('15') == '60'\nassert solution('1') == '1'"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"1,2,Fizz\"\nassert solution(\"10\\n\") == \"1,2,Fizz,4,Buzz,Fizz,7,8,Fizz,Buzz,11,Fizz,13,14,FizzBuzz\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '60\\n'\nassert solution('2\\n') == '60\\n'\nassert solution('3\\n') == 'FizzBuzz\\n'\nassert solution('4\\n') == 'Fizz\\nBuzz\\n\\n'\nassert solution('5\\n') == 'Buzz\\n'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"Buzz\"\nassert solution(\"15\") == \"FizzBuzz\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10000\") == \"Buzz\"\nassert solution(\"10000\") == \"FizzBuzz\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == \"2\""
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"8\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 10') == '10'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\n4 7 10 6 5\\n') == '8'\nassert solution('4 3\\n5 7 10 6 5\\n') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5') == '8'\nassert solution('3 1') == '1'"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1\\n1 2 3 4 5') == '5'\nassert solution('8 9\\n4 5 2 3 1 7 6') == '7'\nassert solution('8 9\\n9 1 2 3 4 5') == '8'\nassert solution('8 9\\n9 5 2 3 1 7 6') == '8'\nassert solution('8 9\\n9 5 2 3 1 7 6') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('6 5') == '8'\n\"\"\"\n\nimport math\n\nx, n = map(int, input().split())\n\np = [int(input()) for _ in range(n)]"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"4\"\nassert solution(\"1 10\") == \"2\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"4 7\") == \"4\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '8'\nprint(solution(__import__('sys').stdin.read()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 7, 10, 6, 5]) == 8\nassert solution([6, 5, 4, 7, 10]) == 8"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5') == '6'\nassert solution('5 5') == '5'\nassert solution('6 5') == '8'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '1'\nassert solution('2 3') == '2'"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '4'\nassert solution('3 5') == '6'\nassert solution('5 5') == '8'\nassert solution('20 20') == '416'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"1\""
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '0'\nassert solution('3 2') == '2'\nassert solution('3 3') == '3'\nassert solution('4 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"7 4\n3 7 5 1 10 3 20\"\"\"\n    ) == \"6\"\n\nassert solution(\n\"\"\"7 2\n3 7 5 1 10 3 20\"\"\"\n    ) == \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 4\n3 7 5 1 10 3 20\n''') == '6'\nassert solution('''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '-1'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n'\n    '3 7 5 1 10 3 20') == '6'\nassert solution(\n    '7\\n'\n    '3 7 5 1 10 3 20') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == '6'\nassert solution('7 2') == '-1'\nassert solution('1 2 3') == '2'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\nassert solution('7 3') == '-1'\nassert solution('5 2') == '5'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6', 'Test #1 failed'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1', 'Test #2 failed'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"5 4\") == \"6\"\nassert solution(\"7 2\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n*.*\n***\n.*.\n*.*\n''') == \"3 4 1\"\n\nassert solution('''\n3 3\n.*.*\n***\n.*.*\n''') == \"3 3 1\"\n\nassert solution('''\n10 10\n***\n*..*\n*.*.\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n''') == \"-1\"\n\nassert solution('''\n10 10\n*.*.*\n***\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n''') == \"3 3 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8') == '3 4 1'\nassert solution('5 5') == '3 3 1'\nassert solution('5 5') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example_input) == '3'\n\nassert solution(input) == '3'\n\nassert solution('3 3') == '-1'\n\nassert solution('5 5') == '3'\n\nassert solution('2 2 1') == '3'"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n\nstdin = \"\"\"\n10 10\n*.*\n*..*\n...*\n*.*\n.*.*\n*.*\n*.*\n*.*\n*.*\n*.*\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 8\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"3 3\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3\\n2 2 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"3 4 1\"\nassert solution(\"6 8\") == \"3 4 1\"\n\nassert solution(\"8 8\") == \"3 4 1\"\nassert solution(\"5 5\") == \"3 4 1\"\n\nassert solution(\"6 6\") == \"3 3 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 8\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\\n\"\n\nassert solution(\"5 5\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\n\nassert solution(\"3 3\") == \"3\\n2 2 1\\n\"\n\nassert solution(\"10 10\") == \"1\\n\""
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\nassert solution('4 5\\n.*.\\n*.*') == '3'\nassert solution('5 5\\n.*.\\n.*.\\n*.*') == '3'\nassert solution('5 5\\n.*.\\n.*.\\n*.*\\n') == '3'\nassert solution('5 5\\n.*.\\n.*.\\n*.*\\n.\\n') == '-1'\n\n'''\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*') == '3'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"bad\") == \"b\"\nassert solution(\"good\") == \"g\"\nassert solution(\"aaa\") == \"a\"\nassert solution(\"abcd\") == \"b\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('good') == 'good'\nassert solution('string') =='string'\nassert solution('good') == 'good'\nassert solution('aaa') == 'aaa'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\ngood\n''') == ''\nassert solution('''\naaa\n''') == ''\nassert solution('''\ngood\n''') == ''\nassert solution('''\naabc\n''') == 'aabc'\nassert solution('''\naaaa\n''') == 'aaaa'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n4\ngood\n'''\n) == '0\nassert solution(\n'''\n3\naaa\n'''\n) == '3\nassert solution(\n'''\n2\naaa\n'''\n) == 'ab'\nassert solution(\n'''\n1\naaaa\n'''\n) == 'a'\nassert solution(\n'''\n0\n'''\n) == ''\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('good') == 'good'\nassert solution('aaaaaaaa') == 'aaaaaaaa'\nassert solution('aaaaaaaaaaa') == 'aaaaaaaaaa'\nassert solution('aaa') == ''\nassert solution('') == ''\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\", \"Empty string\"\nassert solution(\"aa\") == \"\", \"Not enough characters\"\nassert solution(\"aaa\") == \"aaa\", \"Not enough characters\"\nassert solution(\"aac\") == \"aac\", \"Not enough characters\"\nassert solution(\"aaca\") == \"aac\", \"Not enough characters\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == 'ab'\nassert solution(input()) == 'aabc'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\ngood') == '0'\nassert solution('3\\naaa') == '3'\nassert solution('4\\nbad') == '4'\nassert solution('3\\ndef') == '3'\nassert solution('2\\nxyz') == '2'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\ngood\") == \"0\"\nassert solution(\"4\\naaaaaa\") == \"2\"\nassert solution(\"3\\nab\") == \"2\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"0\\n\") == \"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('good') == 'good'\nassert solution('bad') == 'bad'\nassert solution('aaaa') == 'aa'\nassert solution('a') == 'a'\nassert solution('x') == 'x'\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == \"NO\"\nassert solution('''\n7 4\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n''') == \"YES\"\nassert solution('''\n10 2\n1 2\n2 3\n3 4\n2 5\n1 6\n2 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n2 16\n2 17\n3 18\n4 19\n5 20\n3 21\n3 22\n5 23\n6 24\n6 25\n6 26\n7 27\n7 28\n7 29\n7 30\n7 31\n8 32\n8 33\n8 34\n''') == \"YES\"\nassert solution('''\n16 3\n2 1\n2 4\n1 3\n1 4\n2 5\n1 6\n2 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n2 19\n2 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n2 35\n1 36\n1 37\n2 38\n1 39\n1 40\n1 41\n1 42\n1 43\n2 44\n2 45\n2 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2 85\n2 86\n2 87\n2 88\n2 89\n2 90\n2 91\n2 92\n2 93\n2 94\n2 95\n2 96\n2 97\n2 98\n2 99\n2 100\n2 101\n2 102\n2 103\n2 104\n2 105\n2 106\n2 107\n2 108\n2 109\n2 110\n2 111\n2 112\n2 113\n2 114\n2 115\n2 116\n2 117\n2 118\n2 119\n2 120\n2 121\n2 122\n2 123\n2 124\n2 125\n2 126\n2 127\n2 128\n2 129\n2 130\n2 131\n2 132\n2 133\n2 134\n2 135\n2 136\n2 137\n2 138\n2 139\n2 140\n2 141\n2 142\n2 143\n2 144\n2 145\n2 146\n2 147\n2 148\n2 149\n2 150\n2 151\n2 152\n2 153\n2 154\n2 155\n2 156\n2 157\n2 158\n2 159\n2 160\n2 161\n2 162\n2 163\n2 164\n2 165\n2 166\n2 167\n2 168\n2 169\n2 170\n2 171\n2 172\n2 173\n2 174\n2 175\n2 176\n2 177\n2 178\n2 179\n2 180\n2 181\n2 182\n2 183\n2 184\n2 185\n2 186\n2 187\n2 188\n2 189\n2 190\n2 191\n2 192\n2 193\n2 194\n2 195\n2 196\n2 197\n2 198\n2 199\n2 200\n2 201\n2 202\n2 203\n2 204\n2 205\n2 206\n2 207\n2 208\n2 209\n2 210\n2 211\n2 212\n2 213\n2 214\n2 215\n2 216\n2 217\n2 218\n2 219\n2 220\n2 221\n2 222\n2 223\n2 224\n2 225\n2 226\n2 227\n2 228\n2 229\n2 230\n2 231\n2 232\n2 233\n2 234\n2 235\n2 236\n2 237\n2 238\n2 239\n2 240\n2 241\n2 242\n2 243\n2 244\n2 245\n2 246\n2 247\n2 248\n2 249\n2 250\n2 251\n2 252\n2 253\n2 254\n2 255\n2 256\n2 257\n2 258\n2 259\n2 260\n2 261\n2 262\n2 263\n2 264\n2 265\n2 266\n2 267\n2 268\n2 269\n2 270\n2 271\n2 272\n2 273\n2 274\n2 275\n2 276\n2 277\n2 278\n2 279\n2 280\n2 281\n2 282\n2 283\n2 284\n2 285\n2 286\n2 287\n2 288\n2 289\n2 290\n2 291\n2 292\n2 293\n2 294\n2 295\n2 296\n2 297\n2 298\n2 299\n2 300\n2 301\n2 302\n2 303\n2 304\n2 305\n2 306\n2 307\n2 308\n2 309\n2 310\n2 311\n2 312\n2 313\n2 314\n2 315\n2 316\n2 317\n2 318\n2 319\n2 320\n2 321\n2 322\n2 323\n2 324\n2 325\n2 326\n2 327\n2 328\n2 329\n2 330\n2 331\n2 332\n2 333\n2 334\n2 335\n2 336\n2 337\n2 338\n2 339\n2 340\n2 341\n2 342\n2 343\n2 344\n2 345\n2 346\n2 347\n2 348\n2 349\n2 350\n2 351\n2 352\n2 353\n2 354\n2 355\n2 356\n2 357\n2 358\n2 359\n2 360\n2 361\n2 362\n2 363\n2 364\n2 365\n2 366\n2 367\n2 368\n2 369\n2 370\n2 371\n2 372\n2 373\n2 374\n2 375\n2 376\n2 377\n2 378\n2 379\n2 380\n2 381\n2 382\n2 383\n2 384\n2 385\n2 386\n2 387\n2 388\n2 389\n2 390\n2 391\n2 392\n2 393\n2 394\n2 395\n2 396\n2 397\n2 398\n2 399\n2 400\n2 401\n2 402\n2 403\n2 404\n2 405\n2 406\n2 407\n2 408\n2 409\n2 410\n2 411\n2 412\n2 413\n2 414\n2 415\n2 416\n2 417\n2 418\n2 419\n2 420\n2 421\n2 422\n2 423\n2 424\n2 425\n2 426\n2 427\n2 428\n2 429\n2 430\n2 431\n2 432\n2 433\n2 434\n2 435\n2 436\n2 437\n2 438\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == 'YES'\nassert solution(input) == 'NO'\nassert solution(input) == 'YES'\nassert solution(input) == 'NO'\nassert solution(input) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 5\n1 5\n2 1\n1 4\n3 1\n6 1''') == 'NO'\n\nassert solution('''6 5\n1 5\n2 1\n1 4\n3 1\n6 1''') == 'YES'\n\nassert solution('''6 3\n1 2\n2 1\n2 3\n1 4\n4 3\n5 2''') == 'YES'\n\nassert solution('''6 3\n1 2\n2 1\n2 3\n1 4\n4 3\n5 2''') == 'NO'\n\nassert solution('''4 2\n1 3\n2 1\n2 3\n1 4''') == 'NO'"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\"\n) == \"YES\\n10100\"\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT) == OUTPUT\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES'\nassert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'NO'\nassert solution('''\n4 4\n1 2\n1 3\n2 3\n1 4\n1 5\n2 4\n3 4\n3 5\n4 5\n2 5\n''') == 'YES'\nassert solution('''\n4 4\n1 2\n1 3\n2 3\n1 4\n1 5\n2 4\n3 4\n3 5\n4 5\n2 5\n''') == 'NO'\nassert solution('''\n2 2\n1 1\n1 2\n1 3\n''') == 'YES'\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'NO'\nassert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES'\nassert solution('''\n2 3\n1 3\n2 1\n''') == 'NO'\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r) == \"NO\""
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution(input) == \"YES\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 3\n3 4\n''') == '0'\nassert solution('''1 7\n1 7\n''') == '2'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '2\\n3 4'\n\n\nIn the first example the points $1$ and $3$ don't belong to any segment.\nIn the second example all the points from $1$ to $7$ belong to the first segment.\n'''\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5\n2 2\n1 2\n5 5\n''') == '2'\nassert solution('''\n1 7\n1 7\n''') == '0'\nassert solution('''\n4 5\n1 1\n2 5\n3 4\n4 4\n''') == '4'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3 4\"\nassert solution(\"3 5\") == \"2 4\"\nassert solution(\"1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 7') == '0'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"2 4\"\nassert solution(\"1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5\\n2 2\\n1 2') == '2'\nassert solution('1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 7\"\n) == \"2\"\n\nassert solution(\n    \"1 1\"\n) == \"1\"\n\nassert solution(\n    \"3 5\"\n) == \"3 4\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 5\n2 2\n1 2\n5 5\n\n''') == '2 4'\n\nassert solution('''1 7\n1 7\n\n''') == '0'"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\") == \"2\"\nassert solution(\"4 9 2 3\") == \"2\"\nassert solution(\"12 4 8\") == \"3\"\nassert solution(\"20 4 8\") == \"4\"\nassert solution(\"8 9 8\") == \"8\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '2'\nassert solution(input(\"\")) == '0'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('9 9 9 9') == '10'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 9 2 3\"\n) == \"2\"\nassert solution(\n    \"5 3 4\"\n) == \"0\"\nassert solution(\n    \"8 5 7\"\n) == \"1\"\nassert solution(\n    \"2 1 5\"\n) == \"0\"\nassert solution(\n    \"5 1 5\"\n) == \"0\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 9 2 3''') == '2'\nassert solution('''3 1 2 3''') == '3'\nassert solution('''2 3 4 5''') == '1'\nassert solution('''1 2 3 4 5''') == '5'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('5 6 7') == '1'\nassert solution('5 2 1') == '3'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 2\") == \"2\"\nassert solution(\"5 6 1 5\") == \"7\"\nassert solution(\"4 3 2 4\") == \"3\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution('4 9 2 3') == '2'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 1 1 1') == '3'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"9 4 2 3\") == \"5\"\nassert solution(\"10 9 2 3\") == \"5\"\nassert solution(\"15 9 2 3\") == \"5\"\nassert solution(\"15 20 2 3\") == \"6\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234567890') == 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1001111') == 'No'\n'''"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('1234567890') == 'Yes'\nassert solution('12345678901') == 'Yes'\nassert solution('1234567890abc') == 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234567\") == \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234567890') == 'No'\nassert solution('12345678901') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes', \"123456789\"\nassert solution('111222333') == 'No', \"111222333\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234567') == 'No'\nassert solution('12345') == 'Yes'\nassert solution('123') == 'Yes'\nassert solution('12') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234567890\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('123456789') == 'Yes'\n\nfrom sys import stdin"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('127') == '4'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == 4, \"test 1 failed\"\nassert solution(\"127\") == 4, \"test 2 failed\"\nassert solution(\"123\") == 1, \"test 3 failed\"\nassert solution(\"9\") == 1, \"test 4 failed\"\nassert solution(\"4\") == 0, \"test 5 failed\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"32\") == \"0\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''127\n''') == '4'\nassert solution('''1\n''') == '1'\nassert solution('''37\n''') == '4'\nassert solution('''2\n''') == '1'\nassert solution('''3\n''') == '1'\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''4\n''') == '4'\nassert solution('''1\n''') == '1'\nassert solution('''2\n''') == '1'\nassert solution('''18\n''') == '3'\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '4'\nassert solution('5\\n') == '4'\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '6'\n) == '4'\nassert solution(\n    '7'\n) == '5'\nassert solution(\n    '9'\n) == '4'\nassert solution(\n    '3'\n) == '4'\nassert solution(\n    '4'\n) == '4'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('127') == '4'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\nprint(solution(\"kyoto\"))\nprint(solution(\"tokyo\"))"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'Yes'"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\""
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'Yes'\n\n'''"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('cabacc') == '1'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"a\"\nassert solution(\"abcc\") == \"a\"\nassert solution(\"abcdc\") == \"a\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"ab\") == \"a\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\""
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '1'\nassert solution('x') == '1'\nassert solution('abc') == '0'"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('cabacc') == 'c'\nassert solution('abc') == 'a'\n\n'''"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('abcccd') == '2'\nassert solution('cabcccd') == '2'\nassert solution('abcd') == '0'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nassert solution(\"1 3 5 7\") == \"1\"\nassert solution(\"10 50 30 100\") == \"10\"\nassert solution(\"10 50 30 100\") == \"100\"\n\n\"\"\"\nimport heapq"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 12 2') == '2'\nassert solution('13 13 15') == '15'\nassert solution('10 12 4') == '4'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nassert solution(\"18 81 23 7\") == \"7\"\nassert solution(\"33 12 5 7\") == \"5\"\nassert solution(\"50 9 9 7\") == \"7\"\nassert solution(\"15 15 15 15\") == \"15\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n2') == '2'\nassert solution('6\\n6\\n1') == '3'\nassert solution('7\\n9\\n4') == '5'\nassert solution('8\\n8\\n1') == '1'\nassert solution('10\\n12\\n3') == '4'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 3 4') == '2'\nassert solution('2 1 1') == '1'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 12 2\"\"\") == \"2\"\nassert solution(\"\"\"8 12 1\"\"\") == \"1\"\nassert solution(\"\"\"1 2\"\"\") == \"1\"\nassert solution(\"\"\"6 6\"\"\") == \"3\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 1\") == \"1\"\nassert solution(\"2 3 2\") == \"2\"\nassert solution(\"8 12 2\") == \"2\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1024\") == \"2020\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1024\") == \"2020\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1024') == '2020'\nassert solution('1') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"2020\""
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"2020\"\nassert solution(\"10\") == \"20\"\nassert solution(\"12\") == \"20\"\nassert solution(\"1\") == \"2020\"\nassert solution(\"2\") == \"2020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1024''') == '2020'\nassert solution('''1''') == '0'\nassert solution('''123''') == '123'\nprint('TEST PASSED')\n'''\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\n\nassert solution(\"\") == \"\"\nassert solution(\"1234\") == \"1234\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"1000\"\nassert solution(\"10\") == \"10\"\nassert solution(\"999999999999999999999999999999999999999999999999999999999999999999999999999999\") == \"9900000000000000000\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000') == '2000'\nassert solution('100') == '101'\nassert solution('5') == '10'\nassert solution('1') == '1'\nassert solution('1000') == '2000'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"13\"\nassert solution(\"5\") == \"20\"\nassert solution(\"6\") == \"32\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"1 4\") == \"5\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 4') == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"4\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '5'\nassert solution('1 4') == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1 2 3\n''') == '1', 'Wrong!'\nassert solution('''2\n1 3 5\n''') == '5', 'Wrong!'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 4\n''') == '5'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3 2') == '5'\nassert solution('3\\n3 1') == '5'\nassert solution('1\\n1 2') == '4'"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '5'\nassert solution('1') == '1'"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '5'"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '3'\nassert solution('4 5') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 10\\n') == '3'\nassert solution('4 20\\n') == '4'\nassert solution('10 5\\n') == '6'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2\n''') == '1'\nassert solution('''\n3\n5\n''') == '2'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 10') == '3'\nassert solution('4 3') == '2'\nassert solution('10 10') == '2'\nassert solution('4 4') == '1'\nassert solution('20 20') == '1'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 10\n''') == '3'\nassert solution('''2 1\n''') == '2'\nassert solution('''5 4\n''') == '1'\nassert solution('''10 20\n''') == '4'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5') == '1'\nassert solution('4 8') == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"20 10\") == \"1\"\nassert solution(\"20 11\") == \"2\"\nassert solution(\"30 10\") == \"1\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1,2,3,4]) == 3\nassert solution([2,2,3,3]) == 2\nassert solution([3,4,5,6]) == 2\nassert solution([1,2,3,4,5,6]) == 3\nassert solution([4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n5\n''') == '3'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\nfrom collections import Counter\ns = stdin.readline().strip()\nt = stdin.readline().strip()"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"SSR\") == \"2\"\nassert solution(\"CSC\") == \"3\"\nassert solution(\"RCR\") == \"2\"\nassert solution(\"CSC\") == \"3\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('10\\n1 2 5 4 3 6 8 7 10') == '4'"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n1 3 5 4 2\"\n) == \"2\"\nassert solution(\n    \"3\\n1 2 3\"\n) == \"0\"\nassert solution(\n    \"10\\n1 3 2 4 5 6 8 9 10 7\"\n) == \"9\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 5 4 2\\n') == '2\\n'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == '2'\nassert solution(input_2) == '2'\nassert solution(input_3) == '4'\nassert solution(input_4) == '5'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('1\\n1 3 5 4 2') == '1'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('3\\n1 2') == '2'\nassert solution('3\\n2 1') == '2'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 5 4 2\\n') == '2'\nassert solution('5\\n1 3 5 4 2\\n') == '1'\nassert solution('5\\n1 3 5 4 2\\n') == '1'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5.560\"\nassert abs(solution() - 5.510) < 0.01\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5.410\"\nassert solution(\"5\") == \"5.620\"\nassert solution(\"8\") == \"6.040\"\nassert solution(\"7\") == \"6.720\"\nassert solution(\"5\") == \"6.720\""
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '5.410'\nassert solution('5') == '5.620'\nassert solution('8') == '5.480'\nassert solution('5') == '6.040'\n\n\n\n\n--Input\n-----\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of points on a plane.\n\nEach of the next n lines contains two real coordinates x_{i} and y_{i} of the $i^{\\text{th}}$ point, specified with exactly 2 fractional digits. All coordinates are between  - 1000 and 1000, inclusive.\n\n\n--Output\n\nOutput a single real number \u03b8 \u2014 the answer to the problem statement. The absolute or relative error of your answer should be at most 10^{ - 2}.\n\n\n--Example\nInput\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\nOutput\n5.410\n\nInput\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\nOutput\n5.620\n\nInput\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\nOutput\n5.480\n\nInput\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\nOutput\n6.040\n\nInput\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\nOutput\n6.720\n\nInput\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\nOutput\n6.720\n\n\n\"\"\"\n\nfrom math import pi\nfrom decimal import *\nfrom math import log\nfrom collections import defaultdict"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n------Input------\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\n------Output------\n5.410\n\n------Input------\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\n------Output------\n5.620\n\n------Input------\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\n------Output------\n5.480\n\n------Input------\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\n------Output------\n6.040\n\n------Input------\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\n------Output------\n6.720\n\"\"\") == \"5.624263157894737\"\nprint(solution(input()))\n\n2"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5.480\"\nassert solution(\"8\") == \"5.620\"\nassert solution(\"10\") == \"6.040\"\nassert solution(\"8\") == \"6.020\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5.640\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5.480\"\nassert solution() == \"6.040\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '5.480'\nassert solution('6.720') == '5.480'\nassert solution('8') == '5.410'\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\"\"\") == \"5.620\"\nassert solution(\"\"\"\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\"\"\") == \"5.480\"\nassert solution(\"\"\"\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\"\"\") == \"6.040\""
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1.5\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '1'\nassert solution('5 26') == '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n\n''') == '4'\nassert solution('''5 10\n1 3 4 2 1 4 2\n\n''') == '2'\nassert solution('''5 16\n5 5 5 5 5\n\n''') == '1'\nassert solution('''5 26\n5 5 5 5 5\n\n''') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '4'\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 8') == '4'\nassert solution('7 10') == '1'\nassert solution('5 16') == '2'\nassert solution('5 26') == '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '4'\nassert solution(input_) == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 16\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 16\") == \"1\"\nassert solution(\"5 26\") == \"2\"\nassert solution(\"5 30\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('5 16\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''7 10\n1 3 4 2 1 4 2\n''') == '2'\nassert solution('''5 16\n5 5 5 5 5\n''') == '1'\nassert solution('''5 26\n5 5 5 5 5\n''') == '2'\nassert solution('''5 40\n5 5 5 5 5\n''') == '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '1'\nassert solution('5 26') == '-1'\nassert solution('5 26') == '-1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([7,3,1,3,2,1,1,2,1,1,1,1,2,1,1,2,1,1,1,2]) == [1,1,1,1,2,1,2]\nprint(solution(['1', '2', '1', '2', '3', '1', '1', '2', '1', '1', '1', '1', '2', '1', '1', '2', '1', '1', '1', '2']))\nprint(solution([1, 2, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2]))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3') == '1 2 3'\nassert solution('10 4') == '1 3 1 3'\nassert solution('15 2') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 2 3'"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"1 2 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1\n\n''') == '1 2 3'\n\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3\n\n''') == '7 3 1 3'\n\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 1\n\n''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"1 2 3\"\nassert solution(sys.stdin.read()) == \"1 2 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"1 3 1 3\"\nassert solution(\"15 2\") == \"7 3 1 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3') == '1 2 3'\nassert solution('10 4') == '7 3 1 3'\nassert solution('15 2') == '7 3 1 3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3\n''') == \"5\"\nassert solution('''2 4\n1 2 3 4\n10 3 7 3\n''') == \"0\"\nassert solution('''6 1\n3\n6\n2\n5\n1\n4\n\n''') == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3 4\n10 3 7 3\n''') == '5'\nassert solution('''\n2 4\n1 2 3 4\n10 3 7 3\n''') == '0'\nassert solution('''\n4 2\n9 9\n10 8\n5 3\n4 3\n''') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n9 9\n10 8\n5 3\n4 3\n''') == '5'\nassert solution('''\n2 4\n1 2 3 4\n10 3 7 3\n''') == '0'\nassert solution('''\n6 1\n3\n6\n2\n5\n1\n4\n\n''') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n9 9\n10 8\n5 3\n4 3\n''') == '5'\nassert solution('''\n2 4\n1 2 3 4\n10 3 7 3\n''') == '0'\nassert solution('''\n6 1\n3\n6\n2\n5\n1\n4\n\n''') == '3'\nassert solution('''\n4 4\n7 8 7 4\n5 6 5 4\n6 7 6 5\n7 8 7 6\n4 3 4 3\n5 6 5 4\n6 7 6 5\n7 8 7 6\n4 3 4 3\n5 6 5 4\n6 7 6 5\n7 8 7 6\n4 3 4 3\n5 6 5 4\n6 7 6 5\n7 8 7 6\n''') == '6'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n9 9\n10 8\n5 3\n4 3\n''') == '5'\nassert solution('''\n2 4\n1 2 3 4\n10 3 7 3\n''') == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '0'\nassert solution('4 4') == '5'\nassert solution('2 4') == '3'\nassert solution('4 4') == '5'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1\\n') == '0'\nassert solution('2 4\\n') == '3'\nassert solution('4 3\\n') == '5'"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n7 8 9 5 4 3\\n6 7 8\\n3\\n') == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\nxyz') == '0'\nassert solution('100\\nxx') == '1'"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == 1\nassert solution(\"5\") == 0\nassert solution(\"10\") == 8"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '0'\nassert solution('10') == '8'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\nxxxiii\") == \"1\"\nassert solution(\"5\\nxxoxx\") == \"0\"\nassert solution(\"10\\nxxxxxxxxxx\") == \"8\""
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '1'\nassert solution('5') == '0'\nassert solution('10') == '8'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3xxiii\n''') == '1'\nassert solution('''6\nxxxiii\n''') == '1'\nassert solution('''10\nxxxxxxxxxx\n''') == '8'\nassert solution('''15\nxxxxxxxxxxxx\n''') == '0'\nassert solution('''15\nxxxxxx\n''') == '8'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nxxxxxxxxxx\n''') == '0'\nassert solution('''\n5\nxxoxx\n''') == '0'\nassert solution('''\n8\nxxxxxxxxxx\n''') == '0'\nassert solution('''\n6\nxxxiii\n''') == '1'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\nxxxiii\") == \"1\"\nassert solution(\"5\\nxxoxx\") == \"0\"\nassert solution(\"10\\nxxxxxxxxxx\") == \"8\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\nxxxiii\n''') == '1'\nassert solution('''5\nxxoxx\n''') == '0'\nassert solution('''10\nxxxxxxxxxx\n''') == '8'\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '48'\nassert solution('3') == '48'\nassert solution('2') == '72'\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"12\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '36'\nassert solution('4') == '28'\nassert solution('3') == '12'"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nr = int(input())\nprint(3 * (r ** 2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '48'\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(1) == 48\nassert solution(2) == 16\nassert solution(3) == 64\nassert solution(4) == 96\nassert solution(5) == 128\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '48'"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"36\"\nassert solution(\"100\") == \"384\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4\n''') == '48'\nassert solution('''8\n4\n''') == '48'\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"48\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"2 4\") == \"safe\"\nassert solution(\"10 5\") == \"unsafe\"\nassert solution(\"4 5\") == \"unsafe\"\nassert solution(\"5 5\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == 'unsafe'\nassert solution('3 2') =='safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"unsafe\"\nassert solution(\"1 2\") == \"safe\"\nassert solution(\"2 1\") == \"safe\"\nassert solution(\"4 5\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'unsafe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5') == 'unsafe'\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5\n1 2 3\n4 5 6''') == \"unsafe\"\nassert solution('''5 5\n2 1 3\n5 5 6''') == \"safe\"\nassert solution('''1 1\n2 1\n3 2\n4 1''') == \"unsafe\"\nassert solution('''1 1\n2 1\n1 2\n1 3''') == \"unsafe\"\nassert solution('''1 1\n2 1\n3 2\n1 3''') == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"unsafe\"\nassert solution(\"4 5\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\"3 2\", \"1\", \"1\", \"1\", \"1\"]) == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"3 3\") == \"unsafe\"\nassert solution(\"1 1\") == \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'unsafe'\nassert solution('2 1') =='safe'\nassert solution('3 3') == 'unsafe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '6'"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '6', 'Sample test 1'\nassert solution('4 5 6') == '24', 'Sample test 2'\nassert solution('1 2 5') == '5', 'Sample test 3'\nassert solution('1 2 5') == '5', 'Sample test 4'\nassert solution('1 2 5') == '5', 'Sample test 5'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"6\"\nassert solution(\"1 2 1\") == \"6\"\nassert solution(\"1 2 2\") == \"8\"\nassert solution(\"1 3 3\") == \"12\"\nassert solution(\"3 4 4\") == \"8\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '6', 'Sample test failed'\nassert solution('1 1 1') == '0', 'Sample test failed'\nassert solution('2 4 4') == '8', 'Sample test failed'\nassert solution('3 6 2') == '12', 'Sample test failed'\nassert solution('4 4 4') == '16', 'Sample test failed'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"3 4 5\") == \"6\"\nassert solution(\"4 5 6\") == \"12\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\""
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 11 4\n''') == '4'\nassert solution('''3 1 4\n''') == '4'\nassert solution('''5 2 2\n''') == '2'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 2\") == \"4\", \"Sample Test Failed\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"3 1 3\") == \"3\""
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('5 8 7') == '8'\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('3 2 1') == '2'"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('1 2 5') == '3'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\n\n\n\"\"\"\nfor i in range(1,4):\n    print(i)\n\"\"\"\n\n\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    print(i)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    for j in range(1,4):\n        print(\"for i in range(1,4):\")\n        print(\"for j in range(1,4):\")\n        print(i)\n        print(j)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        print(i)\n        print(j)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        print(\"for k in range(1,4):\")\n        print(i)\n        print(j)\n        print(k)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n            print(m)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(\"for n in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n            print(m)\n            print(n)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(\"for n in range(1,4):\")\n            print(\"for o in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n            print(m)\n            print(n)\n            print(o)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(\"for n in range(1,4):\")\n            print(\"for o in range(1,4):\")\n            print(\"for p in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n            print(m)\n            print(n)\n            print(o)\n            print(p)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(\"for n in range(1,4):\")\n            print(\"for o in range(1,4):\")\n            print(\"for p in range(1,4):\")\n            print(\"for q in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n            print(m)\n            print(n)\n            print(o)\n            print(p)\n            print(q)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(\"for n in range(1,4):\")\n            print(\"for o in range(1,4):\")\n            print(\"for p in range(1,4):\")\n            print(\"for q in range(1,4):\")\n            print(\"for r in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)\n            print(m)\n            print(n)\n            print(o)\n            print(p)\n            print(q)\n            print(r)\n\"\"\"\n\n\"\"\"\nfor i in range(1,4):\n    print(\"for i in range(1,4):\")\n    for j in range(1,4):\n        print(\"for j in range(1,4):\")\n        for k in range(1,4):\n            print(\"for k in range(1,4):\")\n            print(\"for l in range(1,4):\")\n            print(\"for m in range(1,4):\")\n            print(\"for n in range(1,4):\")\n            print(\"for o in range(1,4):\")\n            print(\"for p in range(1,4):\")\n            print(\"for q in range(1,4):\")\n            print(\"for r in range(1,4):\")\n            print(i)\n            print(j)\n            print(k)\n            print(l)"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"10 3 6\") == \"2\"\nassert solution(\"10 20 10\") == \"12\"\nassert solution(\"11 2 1\") == \"1\"\nassert solution(\"1 1 3\") == \"3\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('2 3 4') == '1'\nassert solution('3 4') == '2'"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n\") == \"10\"\nassert solution(\"0 0\\n\") == \"0\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"2 3\\n\") == \"6\"\nassert solution(\"2 1\\n\") == \"3\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\n'''\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\nassert solution('3 5') == '15'\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '10'\n\n--submission--\nA = input()\nB = input()\n\nprint(int(A) * int(B))\n\n--review--\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 5\\n\"\n) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"4 6\") == \"12\"\nassert solution(\"6 6\") == \"24\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"4 5 8\") == \"20\"\nassert solution(\"4 5 7\") == \"10\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"3\", \"5\", \"7\"]) == \"10\"\nassert solution([\"3\", \"3\", \"7\"]) == \"9\"\nassert solution([\"3\", \"5\", \"4\"]) == \"9\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('4 4 5') == '10'\nassert solution('5 2 4 5') == '10'\nassert solution('5 6 5 6') == '8'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 5 7') == '10'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('1 2 3') == '3'\nassert solution('2 3 2 4') == '5'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2\") == \"6\"\nassert solution(\"3 5 3\") == \"4\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('1 1 1') == '1'\nassert solution('5 5 5') == '0'"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"3 5 7\") == \"10\"\nassert solution(\"5 5 7\") == \"20\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('4 8 10') == '16'\nassert solution('3 6 7') == '16'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"8\\n2 2\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"OK\", \"3\"\nassert solution(\"7\") == \"OK\", \"7\"\nassert solution(\"1\") == \"NG\", \"1\"\nassert solution(\"3.1\") == \"NG\", \"3.1\"\nassert solution(\"1.5\") == \"NG\", \"1.5\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n11 0') == 'OK'\nassert solution('4\\n13 10') == 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7\\n500 600') == 'OK'\nassert solution('7\\n6555 6666') == 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'OK'\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\") == \"OK\"\nassert solution(\"2\\n10 3\") == \"NG\"\nassert solution(\"1\\n1 1\") == \"OK\"\nassert solution(\"1\\n1 1\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == 'OK'\nassert solution('7 5') == 'NG'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('567') == 'OK', \"Wrong!\"\nassert solution('11') == 'NG', \"Wrong!\""
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n50 60\n''') == 'OK'\nassert solution('''\n7\n500 600\n''') == 'NG'\nassert solution('''\n4\n10 20\n''') == 'NG'\nassert solution('''\n5\n10 20\n''') == 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == 'OK'\nassert solution('1') == 'NG'"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"3.000000000000003\"\nassert solution(\"7 5\") == \"7.50000000000001\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 3\n''') == '2.6666666667'\nassert solution('''10 10\n''') == '10.0'\nassert solution('''20 20\n''') == '20.0'\n'''\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3\\n') == '2.6666667'\nassert solution('1 2\\n') == '1.5'\nassert solution('5 0\\n') == '5'\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3') == '2.6666666667'\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1') == '2.5'\nassert solution('5 5') == '2.6666666667'\n\n'''"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"2.5\", \"Should return a float that is an approximation of 2.5\"\nassert solution(\"5 2\") == \"2.5\", \"Should return a float that is an approximation of 2.5\"\nassert solution(\"5 2\") == \"2.5\", \"Should return a float that is an approximation of 2.5\"\nassert solution(\"5 2\") == \"2.5\", \"Should return a float that is an approximation of 2.5\"\nassert solution(\"5 2\") == \"2.5\", \"Should return a float that is an approximation of 2.5\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"2.6\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3') == '2.6666666667'\nassert solution('2 3') == '2.3333333333'\n\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '2.6666666667'\nassert solution('10 1') == '2.6666666767'\nassert solution('5 1') == '2.6666666767'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"5 4 3\") == \"1\"\nassert solution(\"6 4 3\") == \"2\"\nassert solution(\"1 10 100\") == \"100\"\nassert solution(\"1 100 10\") == \"10\""
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"6 4 3\") == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 4 3\n1 2 1''') == '1'\nassert solution('''5 5 4\n2 4 2''') == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 5 6') == '3'\nassert solution('10 5 7') == '3'\n\n--------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 3') == '1'\nassert solution('6 4 3') == '1'\nassert solution('4 1 3') == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 4 3') == '1'\nassert solution('2 5 3') == '3'\nassert solution('5 5 5') == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 4 3') == '1'\nassert solution('5 3 2') == '3'"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\""
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 4 3''') == \"1\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"5 5 5\") == \"10\"\nassert solution(\"6 4 5\") == \"10\"\nassert solution(\"1 4 5\") == \"10\""
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 3 2\n3 1 2\n''') == '3'\nassert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\nassert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == '3'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"3\"\nassert solution(\"3 1 2\") == \"2\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('1 3 2') == '3'\nassert solution('3 1 2') == '3'\nassert solution('1 3 2') == '2'"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3]) == \"3\"\nassert solution([1, 2, 3]) == \"6\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == '3'\nassert solution('3 1 2') == '3'"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ATCODER') == 'ATC'"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == \"ATC\""
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ATCODER') == 'AC'\nassert solution('ATCODERG') == 'AC'\nassert solution('ATCODERTC') == 'AC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == \"A\""
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 'ATC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 'ATC'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('11') == '10'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\nassert solution('101') == '8'\nassert solution('10000') == '7'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"101\") == \"0\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"9\"\nassert solution(\"01\") == \"1\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution) == '9'"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '9'\nassert solution('123') == '2'\nassert solution('1235') == '2'\nassert solution('12345') == '2'\nassert solution('123456') == '2'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '9'\nassert solution('11') == '9'\nassert solution('2') == '1'\n\nTest 3.\nYou are given N, the number of integers.\n\nFind and print the number of integers less than or equal to N with an odd number of digits (in base 10 without leading zeros).\n\nFor example, if N = 3, then the integers 1, 2, and 4 are odd. If N = 10, then there are 5 odd numbers: 1, 3, 5, 7, 9.\n\nIf a number is odd, print it on one line without any newline.\n\nInput\nThe input contains a single integer N.\n\nOutput\nPrint N integers, one integer per line, in the following format:\n\n1\n2\n...\nN\n\nInput\nThe input contains a single integer N.\n\nOutput\nPrint N integers, one integer per line, in the following format:\n\n1\n2\n...\nN\n\n----Constraints----\n1 \\leq N \\leq 10^5\n\n----Sample Input----\n2\n\n----Sample Output----\n1\n2\n\n'''\n\nn = int(input())"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '1'\nassert solution('11\\n') == '9'\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\nassert solution(\"cupofcoffee\") == \"cupofcoffee\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\nprint(solution(input()))\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\n\"\"\"\n\n\"\"\"\nS = input()\nT = input()"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''cupofcoffee''') == 'cupofhottea'\nassert solution('''cupofhottea''') == 'cupofcoffee'\n\nprint(solution(input()))"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\nassert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofcoffee') == 'cupofhottea'\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\nprint(solution(input()))\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nassert solution('3 10') == '10 11 12 13 14 15 16 17 18 19 20'\nassert solution('3 100') == '100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119'\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '5 6 7 8 9'\nassert solution('3 7') == '5 6 7 8 9'\nassert solution('2 5') == '5 6 7 8'\nassert solution('3 3') == '6 7 8'\nassert solution
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"5 6 7 8 9\") == \"5 6 7 8 9\"\nassert solution(\"4 6 7 8 9\") == \"4 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 7\n''') == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"4\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '5 6 7 8 9'\nassert solution('10 5') == '5 6 7 8 9 10'"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 7') == '5 6 7 8 9'"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nassert solution('2 5 1') == '2 3 4 5'\nassert solution('3 5 2') == '2 3 4 5'\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 7\n''') == '5 6 7 8 9'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20') == 'Yes'\nassert solution('-40') == 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('40') == 'Yes'\nassert solution('60') == 'No'\nassert solution('5') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == 'No'\nassert solution('30\\n1') == 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"30\") == \"Yes\"\nassert solution(\"-5\") == \"No\"\nassert solution(\"-40\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'Yes'\nassert solution('-5') == 'No'\nassert solution('-4') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('18') == 'Yes'\nassert solution('30') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('40') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"-40\") == \"No\"\nassert solution(\"30\") == \"Yes\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"-40\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'No'\nassert solution('-40') == 'No'\nassert solution('25') == 'Yes'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 2]) == '1'\nassert solution([4, 5]) == '1'\nassert solution([9, 8]) == '0'"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 2') == '1'\nassert solution('4 2') == '0'\nassert solution('5 2') == '1'\nassert solution('10 2') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"12 3\") == \"0\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 1') == '0'\nassert solution('4 1') == '0'"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8\n''') == '1'\nassert solution('''2 4\n0 0\n2 2\n1 2\n''') == '0'\nassert solution('''4 3\n4 1\n3 4\n1 5\n''') == '0'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 2') == '2'\nassert solution('3 1') == '1'\nassert solution('3 5') == '1'\nassert solution('3 3') == '0'"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 2\") == \"2\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '1'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3776') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"3777\") == \"Good\"\nassert solution(\"3778\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('12345') == 'Good'\nassert solution('123456789') == 'Good'\nassert solution('1337') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4048') == 'Good', \"Should be Good\"\nassert solution('0123') == 'Bad', \"Should be Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\n\n'''\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"01\") == \"Bad\"\nassert solution(\"0123\") == \"Bad\"\nassert solution(\"012345\") == \"Good\"\nassert solution(\"01234567\") == \"Bad\"\nassert solution(\"012345678\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('31') == 'Good'\nassert solution('35') == 'Good'\nassert solution('71') == 'Good'\nassert solution('89') == 'Good'\nassert solution('2') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('-1') == 'Bad'\nassert solution('-1000') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('1000') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('123456') == 'Good'\nassert solution('2357') == 'Bad'\nassert solution('76') == 'Good'\nassert solution('987') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('7352') == 'Good'\nassert solution('907') == 'Bad'\nassert solution('738') == 'Good'"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3.5\"\nassert solution(\"3 4\") == \"3.5\"\nassert solution(\"2 3 4\") == \"3.500025\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3 4\") == \"3.5\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3.5'\nassert solution('3') == '3.0'\nassert solution('4') == '3.0'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3.5'\nprint(solution(input()))"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3.5'\nassert solution('3') == '3.0'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('1\\n2') == '2.0'\nassert solution('3\\n1 1 2 3') == '3.5'\n\n'''\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3.5'\nassert solution('10') == '7.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3.5'\nassert solution('3') == '3.5'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('7') == '6'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3.5'\nassert solution('3') == '3.5'\nassert solution('4') == '3.5'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '14'\nassert solution('1') == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 14\nassert solution(\"3\") == 14\nassert solution(\"1 2 3\") == 20\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == \"14\"\nassert solution(\"2\\n2 2\\n3 6\") == \"0\""
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == '14'\nassert solution('4\\n4 2 5 3\\n2 1 5 4\\n3 1 4 2\\n') == '20'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 1 2\n2 5 4\n3 6\n''') == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '14'\nassert solution('4') == '12'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\") == \"14\""
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 1 2\n2 5 4\n3 6\n''') == '14'\nassert solution('''\n2\n3 1 2\n2 5 4\n3 6\n''') == '17'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n3\n2 1 2\n3 5 4\n3 6\n''') == '14'\nassert solution(\n'''\n6\n4 5 1 2 1 3\n1 5 5 5 6\n3 5 4 2 7\n5 6 5 5 6\n6 7 5 5 6\n5 6 5 5 6\n''') == '31'"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 1 2\\n2 5 4\\n3 6') == '14'\nassert solution('2\\n3 1 2\\n2 5 4\\n3 6') == '10'\nassert solution('3\\n3 1 2\\n2 5 4\\n3 6') == '8'\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\nZABCDBABCQ') == '2'\nassert solution('20\\nZABAABCAABBBCDAABCCDD') == '2'"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nabcabc\n''') == '2', 'First example'\nassert solution('''\nabcabcabc\n''') == '3', 'Second example'\nassert solution('''\nabcabcabcabc\n''') == '4', 'Third example'\nassert solution('''\nABCABCABCABC\n''') == '2', 'Fourth example'\nassert solution('''\nABCABCABCABCABCABC\n''') == '3', 'Fifth example'\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"15\") == \"2\"\nassert solution(\"33\") == \"1\"\nassert solution(\"55\") == \"2\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\", \"Wrong result for S = ''\"\nassert solution(\"4\") == \"1\", \"Wrong result for S = 'A'\"\nassert solution(\"5\") == \"2\", \"Wrong result for S = 'AA'\"\nassert solution(\"10\") == \"5\", \"Wrong result for S = 'AAAAA'\"\nassert solution(\"11\") == \"5\", \"Wrong result for S = 'AAAAAA'\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nABCD\") == \"2\"\nassert solution(\"100\\n\" * 100) == \"2\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution() == '2'\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"ZABCDBABCQ\") == \"2\""
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"20\") == \"2\"\nassert solution(\"30\") == \"0\"\n\nInput\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line of each test case contains a string S.\n\nOutput\nFor each test case, print the number of times ABC occurs in S as contiguous subsequences on a new line.\n\nSAMPLE INPUT \n2\n4\nZABCDBABCQ\n8\nABCDCDCBABCQ\n\nSAMPLE OUTPUT \n2\n1\n\nExplanation\nTest Case 1:\nFor the first line of test case 1, the string S is ZABCDBABCQ.\nS has only two contiguous subsequences: ABC and BAC.\n\nTest Case 2:\nFor the second line of test case 2, the string S is ABCDCDCBABCQ.\nS has five contiguous subsequences: ABCDCDCBABCQ, ABC and ABCD.\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 2\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '2'\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\nassert solution('''4\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nOBIRA''') == '1'\nassert solution('''10\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nOBIRA\nHOROKANAI\nHABORO\nHABORO\nHABORO\nHABORO\nHABORO''') == '4'\nassert solution('''13\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\nOBIRA\nHOROKANAI\nHABORO\nHABORO\nHABORO\nHABORO\nHABORO\nHABORO\nHABORO\nHABORO\nHABORO''') == '5'\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '2'\n\"\"\"\n\nN = int(input())\nnames = []\nfor _ in range(N):\n    names.append(input())\n\ncnt = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if len(names[i]) <= len(names[j]) <= len(names[k]) and names[i][0] == names[j][0] == names[k][0]:\n                continue\n            elif len(names[i]) <= len(names[j]) <= len(names[k]) and names[i][0] == names[j][0]!= names[k][0]:\n                continue\n            elif len(names[i]) <= len(names[j]) <= len(names[k]) and names[i][0]!= names[j][0] == names[k][0]:\n                continue\n            elif len(names[i]) <= len(names[j]) <= len(names[k]) and names[i][0]!= names[j][0]!= names[k][0]:\n                continue\n            elif len(names[i]) <= len(names[j]) <= len(names[k]) and names[i][0] == names[j][0]!= names[k][0]:\n                continue\n            else:\n                cnt += 1\n\nprint(cnt)"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n''') == '2'\nassert solution('''4\nMASHIKE\nRUMOI\nOBIRA\nHABORO\n''') == '0'\nassert solution('''4\nMASHIKE\nRUMOI\nHABORO\n''') == '1'\n\"\"\"\n\nN = int(input())\n\nstudents = {}\nfor i in range(N):\n    student = input()\n    students[student] = i + 1\n\nis_valid = True\nfor student in students:\n    if student[0]!= 'M' and student[0]!= 'R' and student[0]!= 'C' and student[0]!= 'H':\n        is_valid = False\n        break\n    elif len(student)!= 3:\n        is_valid = False\n        break\n    elif student[0] == student[1] or student[0] == student[2] or student[1] == student[2]:\n        is_valid = False\n        break"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\n\"\"\"\nimport itertools\nimport string\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 2\nassert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == 2\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\n'''"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"2 3\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == 'Yes'\nassert solution('3 4') == 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 1') == 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == 'Yes'\nassert solution('1\\n2\\n3\\n') == 'Yes'\nassert solution('1\\n2\\n') == 'Yes'\nassert solution('1\\n2') == 'Yes'\nassert solution('1\\n') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n') == 'Yes'\nassert solution('2 4\\n') == 'No'\nassert solution('3 5\\n') == 'Yes'\nassert solution('4 6\\n') == 'No'\nassert solution('5 7\\n') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"3 5\") == \"No\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\n\nA = []\nfor i in range(N):\n    A.append(list(map(int, input().split())))\n\ncount = 0\nfor i in range(N):\n    if A[i].count(0) == M:\n        count += 1"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Yes\"\nassert solution(\"5 4\") == \"No\"\nassert solution(\"6 6\") == \"Yes\"\nassert solution(\"7 7\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('koffy') == 'No'\nassert solution('koffy') == 'No'\nassert solution('koffy') == 'No'\nassert solution('koffy') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('coffe') == 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('sippuu') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('coffee') == 'No'\nassert solution('cocoa') == 'No'\nassert solution('cocoa') == 'No'\nassert solution('coffee') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aaaa') == 'No'\nassert solution('asdfsdf') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuuu\") == \"No\"\nassert solution(\"sippuuuu\") == \"Yes\"\nassert solution(\"sippuur\") == \"No\"\nassert solution(\"sippuuuuuu\") == \"Yes\"\n\"\"\"\n\nsolution = None"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"1 1000\\n2 1000\\n3 1000\\n\") == \"1000\"\nassert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"3 10\\n6 10\\n10 10\\n\") == \"10\"\nassert solution(\"3 10\\n6 10\\n10 10\\n\") == \"10\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 70\n7 60\n1 80\n4 50\n''') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 70\n7 60\n1 80\n4 50\n''') == '4'\nassert solution('''\n2 3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5 1\n2 4\n3 4\n1 2\n2 3\n''') == '4'\nassert solution('''\n1\n2\n1\n''') == '1'\nassert solution('''\n1\n10\n1\n''') == '10'\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 70\") == \"4\"\nassert solution(\"2 1\") == \"TLE\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 3\") == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 70\") == \"4\"\nassert solution(\"3 50\") == \"50\"\nassert solution(\"1 40\") == \"TLE\""
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 70\") == \"4\"\nassert solution(\"7 60\") == \"7\"\nassert solution(\"1 80\") == \"TLE\"\nassert solution(\"4 50\") == \"TLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 70\") == \"4\"\nassert solution(\"3 50\") == \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"3 3\\n5 8\\n1 2\\n4 2\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"5 5\") == \"6\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 70\n7 60\n1 80\n4 50\"\"\") == \"4\"\nassert solution(\"\"\"3\n1\n5\n10\"\"\") == \"10\"\n\"\"\"\nTask\n\nYou are given an array of non-negative integers that represents a two-dimensional elevation map where each element is unit-width wall and the integer is the height. Suppose it will rain and all spots between two walls get filled up.\n\nCompute how many units of water remain trapped on the map in O(N) time and O(1) space.\n\nFor example, given the input [2, 1, 2], we can hold 1 unit of water in the middle.\n\nGiven the input [3, 0, 1, 3, 0, 5], we can hold 3 units in the first index, 2 in the second, and 3 in the fourth index (we cannot hold 5 since it would run off to the left), so we can trap 8 units of water.\n\nGiven the input [5, 6, 7, 3, 4], we can hold 4 units in the first index, 3 in the second, 2 in the fourth index, and 1 in the fifth; so we can trap 12 units of water.\n\nGiven an array that is initially empty, such as [], we can fill it up with up to 3 units of water and still hold water.\n\n \n\nExample 1:\n\nInput: heights = [2,1,2]\nOutput: 1\nExplanation: We are holding 1 unit of water in the middle.\nExample 2:\n\nInput: heights = [3,0,1,3,0,5]\nOutput: 3\nExplanation: We can hold 3 units in the first index, 2 in the second, and 3 in the fourth index (we cannot hold 5 since it would run off to the left), so we can trap 8 units of water.\nExample 3:\n\nInput: heights = [5,6,7,3,4]\nOutput: 4\nExplanation: We can hold 4 units in the first index, 3 in the second, 2 in the fourth index, and 1 in the fifth; so we can trap 12 units of water.\nExample 4:\n\nInput: heights = [1,2]\nOutput: 2\nExample 5:\n\nInput: heights = [2,3]\nOutput: 1\n \n\nConstraints:\n\nn == heights.length\n2 \\leq n \\leq 100\n0 \\leq heights[i] \\leq 100\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2 9\n''') == '8'\nassert solution('''3 2 6\n''') == '12'\nassert solution('''10 2 9\n''') == '17'\nassert solution('''10 3 2\n''') == '11'\nassert solution('''10 5 9\n''') == '17'\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('10 4 5') == '15'\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2, 2, 2]) == 8\nassert solution([4, 2, 9]) == 8\nassert solution([2, 2, 9]) == 8\nassert solution([1, 2, 4]) == 8\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2 9') == '8'"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nassert solution(\"3 1 1\") == \"3\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    10 3 10\n    \"\"\"\n    ) == \"8\"\n    assert solution(\n    \"\"\"\n    100 10 20\n    \"\"\"\n    ) == \"60\"\n    assert solution(\n    \"\"\"\n    1 1 1\n    \"\"\"\n    ) == \"0\"\n    assert solution(\n    \"\"\"\n    3 5 2\n    \"\"\"\n    ) == \"7\"\n    assert solution(\n    \"\"\"\n    100 10 20\n    \"\"\"\n    ) == \"60\"\n    "
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 4') == '8'\nassert solution('1 2 3') == '10'"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2 9''') == \"8\"\nassert solution('''4 2 10''') == \"15\"\nassert solution('''10 10 10''') == \"50\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nassert solution(\"10 4 8\") == \"16\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('1 1 1') == '0'\nassert solution('8 3 1') == '8'\nassert solution('6 3 1') == '3'\nassert solution('10 10 10') == '10'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\""
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\\n\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\nacornistnt\npeanutbomb\nconstraint\n\"\"\") == \"1\"\nassert solution(\"\"\"4\nabcd\nbcd\nbdd\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1'\nassert solution('5\\nadonna\\nkats\\nfelix\\n') == '2'"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1'\nassert solution('4\\nfloss\\ngreen\\nblue\\n') == '0'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n\n---Output---\nSample Case 0\n\n1\n\ns_1 = acornistnt is an anagram of s_3 = constraint. There are no other pairs i, j such that s_i is an anagram of s_j, so the answer is 1.\nSample Case 1\n\n0\n\ns_1 = acornistnt is an anagram of s_3 = constraint. There are no other pairs i, j such that s_i is an anagram of s_j, so the answer is 0.\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\na\nc\no\nn\nt\n''') == \"2\"\nassert solution('''5\na\nc\no\nn\nt\n''') == \"0\"\nassert solution('''2\nb\ne\n''') == \"0\"\nassert solution('''4\na\ne\ni\n''') == \"1\"\nassert solution('''4\na\nc\ne\n''') == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1', \"Your solution is wrong\"\nassert solution('2') == '0', \"Your solution is wrong\"\nassert solution('1') == '1', \"Your solution is wrong\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '5'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '5'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n\n'''"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '2'\nassert solution('20') == '5'\nassert solution('38') == '2'\nassert solution('56') == '0'\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"38\") == \"2\"\nassert solution(\"56\") == \"0\""
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2132\") == \"2\"\nassert solution(\"506\") == \"9\"\nassert solution(\"999999999\") == \"8\"\nassert solution(\"1000000000\") == \"8\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1\n3\n20\n38\n56\n''') == \"2\"\nassert solution('''\n4\n2132\n506\n999999999\n1000000000\n''') == \"8\"\nassert solution('''\n5\n1\n3\n20\n38\n56\n''') == \"2\""
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2\n3\n20\n38''') == '2'\nassert solution('''5\n1\n3\n20\n38\n56''') == '2'\nassert solution('''2\n1\n3\n20\n38''') == '9'\nassert solution('''4\n2\n3\n20\n38''') == '8'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"9\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2'\nassert solution('''4 2\n3 1\n1 4\n1 2''') == '1'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 2 1 1 2\""
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 2') == '1 1 1 1 1 1 1 1'\nassert solution('10 1') == '1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2'\nassert solution('''4 2\n3 1\n1 4\n1 2\n''') == '1'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3'"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2'\nassert solution('''4 2\n3 1\n1 4\n1 2\n\nOutput\n1\n1 1 1 \nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"6 2\") == \"1\"\nassert solution(\"10 2\") == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10 2\") == \"1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"6 2\") == \"2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\""
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2'\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1'\nassert solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n1 2 4 4\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n9\n1 1 8 8 8 4 4 4 4\n\"\"\") == \"3 8\"\nassert solution(\"\"\"\n7\n4 3 7 1 4 3 3\n\"\"\") == \"3 6\""
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n1 2 4 4\\n\"\n    \"1 1 8 8 8 4 4 4\"\n    \"4 3 7 1 4 3 3\"\n    \"3 6\"\n) == \"2 4\"\n\nassert solution(\n    \"7\\n4 3 7 1 4 3 3\\n\"\n    \"3 6\"\n    \"2 4\"\n    \"2 5\"\n    \"3 3\"\n    \"2 2\"\n    \"4 4\"\n    \"1 1\"\n    \"2 1\"\n    \"2 5\"\n    \"2 2\"\n) == \"5 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4\\n') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8\n1 2 4 4\n''') == '2 4'\nassert solution('''7\n4 3 7 1 4 3 3\n''') == '3 6'\nassert solution('''4\n1 1 8 8 8\n''') == '2 4'\nassert solution('''9\n1 1 8 8 8 4 4 4\n''') == '3 8'"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '2 4'\nassert solution('9') == '3 8'\nassert solution('7') == '3 6'"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2 4\"\nassert solution(\"4\") == \"3 6\""
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4\\n') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2 4'\nassert solution('9') == '3 8'\nassert solution('7') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"3 6\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3 2 4 1 5'\nassert solution('3') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    4\n    1 3\n    2 4\n    3 1\n    ''') == '3 1 2 4'\n    "
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('2 3') == '2 3'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3 2 1 5'\nassert solution('4') == '3 1 2 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"3 2 4 1 5\"\nassert solution(\"3\") == \"3 2 4 1 5\"\nassert solution(\"5\") == \"3 2 4 1 5\"\nassert solution(\"3\") == \"3 2 4 1 5\"\nassert solution(\"4\") == \"3 1 2 4 5\""
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3 2 4 1 5\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '1'\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"1\""
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n1 10 17 12 15 2\n\n''') == '3'\n\nassert solution('''10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n\n''') == '10'\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '1'\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 10\") == \"2\"\nassert solution(\"6 1\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == str(min(len(set(map(int, stdin.split()))), len(stdin.split())))\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"3\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == output_data\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n\n''') == '3'\n\nassert solution('''\n10\n
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\") == \"4\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\") == \"-1\""
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2') == '4\\n-1\\n5\\n2\\n0\\n1\\n'\nassert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2') == '-1\\n'\nassert solution('6\\n30 20 10\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2') == '4\\n-1\\n5\\n2\\n0\\n1\\n'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3 4 5\\n') == '2'\nassert solution('6\\n3 5 1 2\\n') == '4'\nassert solution('6\\n4 5 1 2\\n') == '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"15 5 3 2\") == \"5\"\nassert solution(\"15 5 4 3\") == \"2\"\nassert solution(\"15 5 2 1\") == \"0\"\nassert solution(\"15 5 5 1\") == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('15 5 3 2') == '-1'\nassert solution('15 5 4 3') == '5'\nassert solution('15 5 2 1') == '2'\nassert solution('16 7 5 2') == '1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"2\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"1\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"0\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '4'\nassert solution('15 5 3 2') == '5'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '-1'\nassert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '2'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n3 2\\n1 2 1\\n2 2 1\\n1 3 1\\n2 3 2\\n1 4 1\\n2 4 1\") == \"1\"\nassert solution(\"2\\n3 2\\n1 2 1\\n2 2 1\\n1 3 1\\n2 3 2\\n1 4 1\\n2 4 1\") == \"-1\"\nassert solution(\"5\\n10 10\\n7 5 2\\n6 5 1\\n5 5 1\\n7 5 1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 2\\n3 4 2\\n4 4 2\\n5 4 2\\n6 4 2\\n7 4 2\\n8 4 2\\n9 4 2\\n10 4 2\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n5 5 1\\n6 5 1\\n7 5 1\\n8 5 1\\n9 5 1\\n10 5 1\\n1 6 1\\n2 6 1\\n3 6 1\\n4 6 1\\n5 6 1\\n6 6 1\\n7 6 1\\n8 6 1\\n9 6 1\\n10 6 1\\n1 7 1\\n2 7 1\\n3 7 1\\n4 7 1\\n5 7 1\\n6 7 1\\n7 7 1\\n8 7 1\\n9 7 1\\n10 7 1\\n1 8 1\\n2 8 1\\n3 8 1\\n4 8 1\\n5 8 1\\n6 8 1\\n7 8 1\\n8 8 1\\n9 8 1\\n10 8 1\\n1 9 1\\n2 9 1\\n3 9 1\\n4 9 1\\n5 9 1\\n6 9 1\\n7 9 1\\n8 9 1\\n9 9 1\\n10 9 1\\n1 10 1\\n2 10 1\\n3 10 1\\n4 10 1\\n5 10 1\\n6 10 1\\n7 10 1\\n8 10 1\\n9 10 1\\n10 10 1\\n1 11 1\\n2 11 1\\n3 11 1\\n4 11 1\\n5 11 1\\n6 11 1\\n7 11 1\\n8 11 1\\n9 11 1\\n10 11 1\\n11 11 1\\n12 11 1\\n1 13 1\\n2 13 1\\n3 13 1\\n4 13 1\\n5 13 1\\n6 13 1\\n7 13 1\\n8 13 1\\n9 13 1\\n10 13 1\\n11 13 1\\n12 13 1\\n13 13 1\\n14 13 1\\n1 15 1\\n2 15 1\\n3 15 1\\n4 15 1\\n5 15 1\\n6 15 1\\n7 15 1\\n8 15 1\\n9 15 1\\n10 15 1\\n11 15 1\\n12 15 1\\n13 15 1\\n14 15 1\\n15 15 1\\n16 15 1\\n1 17 1\\n2 17 1\\n3 17 1\\n4 17 1\\n5 17 1\\n6 17 1\\n7 17 1\\n8 17 1\\n9 17 1\\n10 17 1\\n11 17 1\\n12 17 1\\n13 17 1\\n14 17 1\\n15 17 1\\n16 17 1\\n17 17 1\\n18 17 1\\n1 19 1\\n2 19 1\\n3 19 1\\n4 19 1\\n5 19 1\\n6 19 1\\n7 19 1\\n8 19 1\\n9 19 1\\n10 19 1\\n11 19 1\\n12 19 1\\n13 19 1\\n14 19 1\\n15 19 1\\n16 19 1\\n17 19 1\\n18 19 1\\n19 19 1\\n20 19 1\\n1 21 1\\n2 21 1\\n3 21 1\\n4 21 1\\n5 21 1\\n6 21 1\\n7 21 1\\n8 21 1\\n9 21 1\\n10 21 1\\n11 21 1\\n12 21 1\\n13 21 1\\n14 21 1\\n15 21 1\\n16 21 1\\n17 21 1\\n18 21 1\\n19 21 1\\n20 21 1\\n1 22 1\\n2 22 1\\n3 22 1\\n4 22 1\\n5 22 1\\n6 22 1\\n7 22 1\\n8 22 1\\n9 22 1\\n10 22 1\\n11 22 1\\n12 22 1\\n13 22 1\\n14 22 1\\n15 22 1\\n16 22 1\\n17 22 1\\n18 22 1\\n19 22 1\\n20 22 1\\n1 23 1\\n2 23 1\\n3 23 1\\n4 23 1\\n5 23 1\\n6 23 1\\n7 23 1\\n8 23 1\\n9 23 1\\n10 23 1\\n11 23 1\\n12 23 1\\n13 23 1\\n14 23 1\\n15 23 1\\n16 23 1\\n17 23 1\\n18 23 1\\n19 23 1\\n20 23 1\\n1 24 1\\n2 24 1\\n3 24 1\\n4 24 1\\n5 24 1\\n6 24 1\\n7 24 1\\n8 24 1\\n9 24 1\\n10 24 1\\n11 24 1\\n12 24 1\\n13 24 1\\n14 24 1\\n15 24 1\\n16 24 1\\n17 24 1\\n18 24 1\\n19 24 1\\n20 24 1\\n1 25 1\\n2 25 1\\n3 25 1\\n4 25 1\\n5 25 1\\n6 25 1\\n7 25 1\\n8 25 1\\n9 25 1\\n10 25 1\\n11 25 1\\n12 25 1\\n13"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution() == \"3\""
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\naba?c\") == \"2\"\nassert solution(\"5\\nab?b?c\") == \"13\"\nassert solution(\"9\\ncccbbbaaa\") == \"0\"\nassert solution(\"3\\naaa?b?c\") == \"10\"\nassert solution(\"4\\nbaa?b?c\") == \"5\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"84\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"24\"\nassert solution(\"7\") == \"2835\"\nassert solution(\"9\") == \"0\"\nassert solution(\"5\") == \"46\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8\naa?b?c\n''') == '8'\nassert solution('''3\na???b?c\n''') == '2'\nassert solution('''6\n???????\n''') == '8'\nassert solution('''5\na???c\n''') == '0'\nassert solution('''4\naab?bc\n''') == '4'\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2835'\nassert solution(input()) == '0'"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '24'\nassert solution('4') == '34'\nassert solution('5') == '46'\nassert solution('6') == '24'\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6\nac?b?c\n''') == '24'\nassert solution('''7\n???????\n''') == '2835'\nassert solution('''5\na???c\n''') == '46'\nassert solution('''9\ncccbbbaaa\n''') == '0'\nassert solution('''6\nac?b?c\n''') == '24'\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"24\"\nassert solution(\"7\") == \"2835\"\nassert solution(\"5\") == \"46\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == '24'\nassert solution(\"7\") == '2835'\nassert solution(\"9\") == '0'\nassert solution(\"5\") == '46'"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(t := \"ac?b?c\") == \"24\"\n\nassert solution(t := \"aaaaaabc\") == \"40\"\nassert solution(t := \"aaaaabbbb\") == \"24\"\nassert solution(t := \"aaaaaabc\") == \"1\"\nassert solution(t := \"aaaaaaaaaa\") == \"0\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 0\n1 3 3 7\n2 3 5\n2 1 1\n''') == '16'\nassert solution('''\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '18'\n'''\n3\n1 3 3\n2 3 5\n2 1 1\n'''\nassert solution('''\n4\n1 2 3 4\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '16'\n'''\n4\n1 3 3\n2 3 5\n2 1 1\n'''\nassert solution('''\n5\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '16'\n'''\n4\n1 2 3 4\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n'''\nassert solution('''\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '16'\n'''\n4\n1 2 3 4\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n'''\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5\n2 1 1\n''') == '5'\n\nassert solution('''4 0\n1 3 3 7\n''') == '16'\n\nassert solution('''5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\"\nprint(solution(input()))\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '18'\nassert solution('''\n4 0\n1 3 3 7\n''') == '5'\nassert solution('''\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '18'\nassert solution('''\n6 5\n1 2 3 4 5 6\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '16'\n''')"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"16\""
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == '5'\nassert solution(\"4 0\") == '16'"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 3 3\n2 3 5\n2 1 1\n''') == '5'\n\nassert solution('''\n4 0\n1 3 3 7\n''') == '16'\n\nassert solution('''\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '18'"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '5'\nassert solution('4 0') == '16'\nassert solution('5 4') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1\n1 2 3\n1 3 4\n2 4 5\n3 5 6\n4 5 7\n5 6 7\n6 7 8\n6 8 9\n7 8 10\n7 9 11\n8 10 12\n8 11 13\n9 11 14\n9 12 15\n10 12 16\n10 11 17\n11 13 18\n11 14 19\n12 14 20\n12 13 21\n13 14 22\n13 12 23\n14 15 24\n14 11 25\n15 16 26\n15 12 27\n16 17 28\n16 13 29\n17 18 30\n17 14 31\n18 19 32\n18 12 33\n19 10 34\n19 11 35\n20 11 36\n20 12 37\n21 12 38\n21 11 39\n22 11 40\n22 12 41\n23 14 42\n23 11 43\n24 15 44\n24 12 45\n25 16 46\n25 12 47\n26 18 48\n26 14 49\n27 17 50\n27 14 51\n28 19 52\n28 14 53\n29 11 54\n29 12 55\n30 12 56\n30 13 57\n31 14 58\n31 12 59\n32 13 60\n32 12 61\n33 14 62\n33 12 63\n34 15 64\n34 11 65\n35 16 66\n35 12 67\n36 13 68\n36 14 69\n37 16 70\n37 12 71\n38 13 72\n38 14 73\n39 11 74\n39 12 75\n40 13 76\n40 12 77\n41 14 78\n41 12 79\n42 13 80\n42 14 81\n43 15 82\n43 12 83\n44 15 84\n44 12 85\n45 16 86\n45 12 87\n46 14 88\n46 12 89\n47 13 90\n47 14 91\n48 15 92\n48 12 93\n49 11 94\n49 12 95\n50 12 96\n50 13 97\n51 14 98\n51 12 99\n52 15 100\n52 12 101\n53 16 102\n53 12 103\n54 15 104\n54 12 105\n55 16 106\n55 12 107\n56 16 108\n56 12 109\n57 16 110\n57 12 111\n58 15 112\n58 12 113\n59 16 114\n59 12 115\n60 16 116\n60 12 117\n61 16 118\n61 12 119\n62 16 120\n62 12 121\n63 16 122\n63 12 123\n64 15 124\n64 12 125\n65 16 126\n65 12 127\n66 16 128\n66 12 129\n67 16 130\n67 12 131\n68 16 132\n68 12 133\n69 16 134\n69 12 135\n70 16 136\n70 12 137\n71 16 138\n71 12 139\n72 16 140\n72 12 141\n73 16 142\n73 12 143\n74 16 144\n74 12 145\n75 16 146\n75 12 147\n76 16 148\n76 12 149\n77 16 150\n77 12 151\n78 16 152\n78 12 153\n79 16 154\n79 12 155\n80 16 156\n80 12 157\n81 16 158\n81 12 159\n82 16 160\n82 12 161\n83 16 162\n83 12 163\n84 16 164\n84 12 165\n85 16 166\n85 12 167\n86 16 168\n86 12 169\n87 16 170\n87 12 171\n88 16 172\n88 12 173\n89 16 174\n89 12 175\n90 16 176\n90 12 177\n91 16 178\n91 12 179\n92 16 180\n92 12 181\n93 16 182\n93 12 183\n94 16 184\n94 12 185\n95 16 186\n95 12 187\n96 16 188\n96 12 189\n97 16 190\n97 12 191\n98 16 192\n98 12 193\n99 16 194\n99 12 195\n100 16 196\n100 12 197\n''', '''\n1 1 1\n2 3 3\n3 4 4\n4 5 5\n5 6 7\n6 7 8\n7 8 9\n8 9 10\n9 10 11\n10 11 12\n11 12 13\n12 13 14\n13 14 15\n14 15 16\n15 16 17\n16 17 18\n17 18 19\n18 19 20\n19 20 21\n20 21 22\n21 22 23\n22 23 24\n23 24 25\n24 25 26\n25 26 27\n26 27 28\n26 28 29\n27 28 30\n27 29 31\n28 30 32\n28 31 33\n29 31 34\n29 32 35\n30 32 36\n30 31 37\n31 37 38\n31 38 39\n32 38 40\n32 39 41\n33 39 42\n33 40 43\n34 40 44\n34 41 45\n35 41 46\n35 42 47\n36 42 48\n36 43 49\n37 42 50\n37 43 51\n38 43 52\n38 44 53\n39 43 54\n39 44 55\n40 44 56\n40 45 57\n41 45 58\n41 46 59\n42 46 60\n42 47 61\n43 46 62\n43 47 63\n44 46 64\n44 47 65\n45 46 66\n45 47 67\n46 47 68\n46 48 69\n47 48 70\n47 49 71\n48 49 72\n48 50 73\n49 50 74\n49 51 75\n50 51 76\n50 52 77\n51 52 78\n51 53 79\n52 53 80\n52 54 81\n53 54 82\n53 55 83\n54 55 84\n54 56 85\n55 56 86\n55 57 87\n56 57 88\n56 58 89\n57 58 90\n57 59 91\n58 59 92\n58 60 93\n59 60 94\n59 61 95\n60 61 96\n60 62 97\n61 62 98\n61 63 99\n62 63 100\n62 64 101\n63 64 102\n63 65 103\n64 65 104\n64 66 105\n65 66 106\n65 67 107\n66 67 108\n66 68 109\n67 68 110\n67 69 111\n68 69 112\n68 70 113\n69 70 114\n69 71 115\n70 71 116\n70 72 117\n71 72 118\n71 73 119\n72 73 120\n72 74 121\n73 74 122\n73 75 123\n74 75 124\n74 76 125\n75 76 126\n75 77 127\n76 77 128\n76 78 129\n77 78 130\n77 79 131\n78 79 132\n78 80 133\n79 80 134\n79 81 135\n80 81 136\n80 82 137\n81 82 138\n81 83 139\n82 83 140\n82 84 141\n83 84 142\n83 85 143\n84 85 144\n84 86 145\n85 86 146\n85 87 147\n86 87 148\n86 89 149\n87 89 150\n87 90 151\n88 90 152\n88 91"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\") == \"14\"\nassert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 1\") == \"45\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == '14'\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == '-1'"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\nOutput\n14''') == \"14\"\n\nassert solution('''10 1 1\n0 9\n1 5\n\nOutput\n45''') == \"45\"\n\nassert solution('''10 1 1\n0 9\n1 5\n\nOutput\n-1''') == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 1\") == \"-1\"\nassert solution(\"10 2 2\") == \"14\""
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14', 'wrong'\nassert solution('''10 1 1\n0 9\n0 5\n''') == '45', 'wrong'\nassert solution('''10 1 1\n0 9\n1 5\n''') == '-1', 'wrong'\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 2 4') == \"14\"\nassert solution('10 1 1') == \"45\""
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 1 1\\n0 9\\n0 5\\n') == '45'\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 2 4') == \"14\"\nassert solution('10 1 1') == \"45\"\nassert solution('10 1 1') == \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\") == \"14\"\nassert solution(\"10 1 1\") == \"45\"\n\nassert solution(\"10 1 1\") == -1\nassert solution(\"10 1 1\") == -1\n\nassert solution(\"10 1 1\") == -1\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 1\n3 7\n0 9\n3 4\n8 1\n1 2\n''') == '14'\nassert solution('''5 1 1\n0 9\n1 5\n''') == '-1'\nassert solution('''5 1 1\n0 9\n3 4\n8 1\n1 2\n''') == '45'\nassert solution('''5 1 1\n0 9\n3 4\n8 1\n1 2\n''') == '45'\nassert solution('''5 1 1\n0 9\n0 5\n''') == '-1'"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('2 2 2') == 'No'\nassert solution('1 2 2') == 'Yes'\n\"\"\"\n\nA, B, C = map(int, input().split())\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('4 9 6') == 'No'\nassert solution('1 2 3') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"10 10 10\") == \"No\"\nassert solution(\"20 15 20\") == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 7 5\n''') == 'Yes'\nassert solution('''\n6 6 6\n''') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('4 7 4') == 'No'\nassert solution('1 2 1') == 'Yes'\nassert solution('1 1 1') == 'No'\nassert solution('1 1 2') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == 'Yes', \"First\"\nassert solution('1 1 1') == 'No', \"Second\"\nassert solution('2 4 8') == 'Yes', \"Third\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"Yes\", \"First\"\nassert solution(\"2 2 2\") == \"No\", \"Second\"\nassert solution(\"1 1 1 2 2 2\") == \"Yes\", \"Third\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 5 2\") == \"1\"\nassert solution(\"2 -5 0\") == \"0\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n5\\n1000 2000'\n    ) == '1'\nassert solution(\n    '3\\n6\\n-2000 2000 2000'\n    ) == '0'\nassert solution(\n    '3\\n2\\n-2000 -1 -2000'\n    ) == '1'\nassert solution(\n    '3\\n-5\\n-2000 2000 2000'\n    ) == '0'\nassert solution(\n    '3\\n0\\n0\\n'\n    ) == '0'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 10\\n') == '1'\nassert solution('1 2 3\\n') == '0'\nassert solution('1 2\\n') == '-1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n12 5\n1000 2000''') == '1'\nassert solution('''2\n20 5\n1000 2000''') == '1'\nassert solution('''1\n5 10\n1000 2000''') == '0'\nassert solution('''3\n10 15\n1000 2000''') == '0'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n1000 2000') == '1'\nassert solution('3\\n9 9\\n0 0') == '2'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nassert solution(\"3\\n10 10 10\\n1 1 1\") == \"1\"\nassert solution(\"3\\n1 1 1\\n1 1 1\") == \"1\"\nassert solution(\"3\\n0 1 1\\n0 1 1\") == \"0\"\nassert solution(\"3\\n-1 1 1\\n-1 1 1\") == \"0\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n12\n1000 2000''') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n1000 2000\") == \"1\""
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 1') == '1'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"1\""
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('4 1') == '1'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"5 5\") == \"4\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1\n2\n2''') == '1'\nassert solution('''4 2\n3\n6''') == '0'\nassert solution('''6 8\n3\n6''') == '0'\nassert solution('''6 7\n2\n4''') == '2'"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"4 5\") == \"2\""
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\") == \"2\\n0\\n3\"\nassert solution(\"8 3\\nACACTACG\\n3 7\\n1 8\") == \"3\\n0\\n3\"\nassert solution(\"8 3\\nACACTACG\\n3 7\\n5 6\") == \"3\\n0\\n3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '2\\n0\\n3'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\") == \"2\\n0\\n3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8''') == '2'\nassert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8\n\n''') == '3'\nassert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8\n\n''') == '0'"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACACTACGC\") == \"3\"\nassert solution(\"ACACGGTGC\") == \"3\"\nassert solution(\"CCAAAGGG\") == \"0\"\nassert solution(\"ACACACGGCCA\") == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\nCACGATGAG\\n5 6\\nTGACATCC') == '0'\nassert solution('8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\\n') == '2'\nassert solution('8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\\n') == '3'\nassert solution('8 4\\nACACTACG\\n3 7\\n2 4\\n1 8\\n') == '4'\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\nACACTACG\n3 7\n2 3\n1 8\n''') == '2'\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\") == \"2\"\nassert solution(\"8 3\\nACACTACG\\n3 7\\n1 8\") == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '3'"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '210'\nassert solution('5 3') == '210'\nassert solution('8 3') == '50 80 80 120 80 80'\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"210\"\nassert solution(\"15 3\") == \"250\"\nassert solution(\"20 4\") == \"800\"\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"210\""
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == str(210)\n'''\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"210\"\nassert solution(\"10 4\") == \"100\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"12 3\") == \"6\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n50 100 80 120 80\n''') == '210'\n\n'''\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"210\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n50 100 80 120 80\n''') == '210'\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '210'\nassert solution('6 3') == '210'\nassert solution('5 2') == '50'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 2 3') == '7'\nassert solution('1 2 3 4 5 6') == '7'\nassert solution('1 2 3 4 5 6 7') == '7'\nassert solution('1 2 3 4 5 6 7 8') == '7'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 4\") == \"4\"\nassert solution(\"2 2 1\") == \"1\""
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\\n\") == \"4\"\nassert solution(\"1 2 3\\n\") == \"7\"\nassert solution(\"5 4 3\\n\") == \"9\"\nassert solution(\"1 1 1\\n\") == \"2\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 3 1') == '3'\nassert solution('4 5 6') == '7'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 4') == \"4\"\nassert solution('5 2 3') == \"8\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 2 2\") == \"0\"\nassert solution(\"2 2 2 2\") == \"0\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 4') == '4'"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([1, 3, 4]) == \"4\"\nassert solution([2, 1, 4]) == \"3\"\nassert solution([3, 2, 4]) == \"3\"\nassert solution([3, 2, 5]) == \"6\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"10\"\nassert solution(\"3 5\") == \"0\"\nprint(solution(\"8 7\"))\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(X) == A\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''3 5\n5 6\n''') == '0'\nassert solution(\n'''7 2\n5 6\n''') == '10'\nassert solution(\n'''8 1\n3 3\n''') == '0'"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"6 5\") == \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0', 'Expected 1, received 2'\nassert solution('2 3') == '0', 'Expected 1, received 2'\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"0\"\n\n2 is not less than 5, so we should print 10.\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '10'\nassert solution('1 2') == '10'\nassert solution('6 4') == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"10\"\nassert solution(\"5 6\") == \"10\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\nassert solution('4 5') == '10'"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\nassert solution('0 1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 4\n''') == '1'\nassert solution('''\n5 4\n''') == '1'\nassert solution('''\n1 1\n''') == '1'\nassert solution('''\n8 2\n''') == '5'\nassert solution('''\n1\n''') == '1'\n'''\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\""
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 4\\n') == '1'\nassert solution('5 0\\n') == '0'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 4\n''') == '1'\n\nassert solution('''\n9 1\n''') == '1'\n\nassert solution('''\n10 5\n''') == '5'"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\nassert solution('3 4') == '1'\nassert solution('9 9') == '2'\nassert solution('4 4') == '2'\nassert solution('12 1') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4') == '1'\nassert solution('5\\n6') == '-1'\nassert solution('0\\n10') == '0'\nassert solution('10\\n15') == '-5'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 9') == '1'\nassert solution('8 10') == '2'\nassert solution('8 20') == '2'\nassert solution('8 21') == '2'\nassert solution('8 22') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 6') == '5'\nassert solution('10 10') == '10'\nassert solution('20 9') == '20'\nassert solution('10 20') == '-2'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n5\n''') == '1'\nassert solution('''5\n3\n''') == '0'\nassert solution('''8\n5\n''') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"1\", \"Should be 1\"\nassert solution(\"6 3\") == \"1\", \"Should be 1\"\nassert solution(\"7 8\") == \"2\", \"Should be 2\"\nassert solution(\"2 1\") == \"0\", \"Should be 0\"\nassert solution(\"4 10\") == \"0\", \"Should be 0\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == \"win\", \"Should return 'win' if the sum of given integers is greater than or equal to 22\"\nassert solution(\"5 7 7\") == \"bust\", \"Should return 'bust' if the sum of given integers is less than 22\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5 7\") == \"win\"\nassert solution(\"3 5 7\") == \"bust\"\nassert solution(\"4 5 7\") == \"win\"\nassert solution(\"1 5 7\") == \"win\"\nassert solution(\"2 6 7\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"1 2 3\") == \"bust\"\nassert solution(\"-1 1 -2\") == \"bust\"\nassert solution(\"1\") == \"win\"\nassert solution(\"\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == 'win'\n'''\n\na1, a2, a3 = map(int, input().split())"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"6 7 7\") == \"bust\"\nassert solution(\"6 7 8\") == \"win\"\nassert solution(\"10 10 10\") == \"win\"\nassert solution(\"5 6 6\") == \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'win'\nassert solution(input(stdin='')) == 'bust'\n\"\"\"\n\n\"\"\"\nThe solution:\nThe code in input is same as above, but no need to explicitly print the result in the loop\n\nHint:\nSyntax of Python3 for loop:\nfor loop_variable in range(variable_1, variable_2, variable_3):\n    do_something\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\\n\") == \"win\"\nassert solution(\"5 5 5\\n\") == \"bust\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '7'\nassert solution('3') == '6'"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('1000') == '1'\nassert solution('1000000') == '1000'"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\n\nassert solution('4') == '7'\n\nassert solution('5') == '7'\n\nassert solution('10') == '10'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\", \"error\"\nassert solution(\"2\") == \"2\", \"error\"\nassert solution(\"3\") == \"3\", \"error\"\nassert solution(\"4\") == \"4\", \"error\"\nassert solution(\"5\") == \"5\", \"error\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('123') == '1236'\nassert solution('8') == '6'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"12\") == \"12\"\nassert solution(\"25\") == \"20\"\n\n----------------------------------------------------------------------\nPrint a string with '!' as first and last character.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint a string with '!' as first and last character.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n!\n\n- All numbers in input are positive.\n- N \\leq 1 \\leq N \\leq 10^9\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\nassert solution('12') == '24'\nassert solution('1') == '1'\nassert solution('1000000') == '1'"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '6'\nassert solution('10') == '10'\nassert solution('0') == '1'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"]) == \"3\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 2') == '1'\nassert solution('5 2') == '2'\nassert solution('6 2') == '2'\nassert solution('7 2') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 2') == '2'\nassert solution('10 2') == '1'\nassert solution('3 5') == '1'\nassert solution('9 3') == '1'\nassert solution('10 4') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n3 1''') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 2\n''') == '1'\nassert solution('''1 4\n''') == '0'\nassert solution('''10 3\n''') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"13 10\") == \"2\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2\") == \"2\"\nassert solution(\"10 2\") == \"4\"\nassert solution(\"20 2\") == \"3\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == \"hon\"\nassert solution('16') == \"bon\"\nassert solution('5') == \"hon\"\nassert solution('3') == \"hon\"\nassert solution('2') == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''16''') == 'pon'\nassert solution('''15''') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == 'hon'\nassert solution('16') == 'bon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == 'bon'\nassert solution('2') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"bon\"\nassert solution(\"12\") == \"pon\"\nassert solution(\"20\") == \"bon\"\nassert solution(\"21\") == \"pon\"\nassert solution(\"22\") == \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('16') == 'pon'\nassert solution('22') == 'bon'\nassert solution('52') == 'bon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('16') == 'pon'\nassert solution('3') == 'bon'\nassert solution('12') == 'hon'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\nassert solution('1') == 'hon'\nassert solution('0') == 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"pon\"\nassert solution(\"3\") == \"bon\"\nassert solution(\"4\") == \"bon\"\nassert solution(\"5\") == \"bon\"\nassert solution(\"6\") == \"bon\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"11\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 1 2\") == \"11\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '6'\nassert solution('4') == '12'\nassert solution('5') == '20'"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 1 2\n''') == '11'\nassert solution('''\n5\n2 2 2 3 3\n''') == '8'\nassert solution('''\n10\n3 1 2 1 4 1 6 1 3 6\n''') == '31'\nassert solution('''\n1\n0 1\n''') == '1'\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"11\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n3 1 2\n\"\"\") == \"11\"\nassert solution(\"\"\"\n4\n5 1 3 5\n\"\"\") == \"27\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"11\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"15\"\nassert solution(\"6\") == \"16\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"11\", 'Failed example'\nassert solution('5') == \"199\", 'Failed example'\nassert solution('6') == \"330\", 'Failed example'\nassert solution('5') == \"330\", 'Failed example'\nassert solution('10') == \"1906\", 'Failed example'\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3 1 2') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 1 2') == '11'\nassert solution('4\\n5 3 1 2') == '8'"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n4') == '4\\n3\\n4'\nassert solution('3\\n1\\n4') == '4\\n3\\n4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('3\\n1\\n4\\n3') == '3\\n3\\n4'\nassert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n4\n3\n''') == '4 3'\n\nassert solution('''\n2\n3\n4\n2\n''') == '3 4'\n\nassert solution('''\n5\n1\n3\n2\n2\n1\n''') == '3 4'\n\nassert solution('''\n2\n1\n3\n''') == '3 1'\n\nassert solution('''\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n3\n2\n1\n''') == '4 1 3 2'"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4'\nassert solution('4\\n1\\n4\\n3') == '3'\nassert solution('5\\n1\\n4\\n3') == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"6\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1\n4\n3\n4\n2\n''') == '4'\nassert solution('''3\n1\n4\n3\n''') == '3'\nassert solution('''3\n4\n3\n4\n2\n''') == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"1\\n3\\n4\\n1\") == \"4\\n3\\n4\"\nassert solution(\"4\\n1\\n3\\n1\") == \"3\\n1\\n3\"\nprint('\"run\" for more solutions')\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\nassert solution('5\\n1\\n2\\n3\\n4\\n5\\n') == '5\\n4\\n5\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4 3 4'\nassert solution('4') == '4 3 4'\nassert solution('5') == '4 3 4'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '9'\nassert solution('7 7') == '13'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5\n3 4\n5 5''') == '10'\nassert solution('''5 5\n3 4\n5 2''') == '8'\n\n'''\nSample Test:\nSample Input 1:\n5 3\n3 4\n5 5\nSample Output 1:\n10\nSample Input 2:\n5 4\n3 4\n5 2\nSample Output 2:\n8\n'''\n\n'''\n\nSample Test 2:\nSample Input 3:\n5 5\n3 4\n5 2\nSample Output 3:\n9\n'''\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"1 10\") == \"9\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"4\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"3 5\") == \"10\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"5 1\") == \"5\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"5 3\"]) == \"9\"\nassert solution([\"3 4\"]) == \"4\"\nassert solution([\"2 2\"]) == \"2\"\nassert solution([\"1 2\"]) == \"1\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '6'\nassert solution('5 3') == '9'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n''') == '9'"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"5 4\") == \"10\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"5 6\") == \"10\"\nassert solution(\"5 7\") == \"10\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"5 3\") == \"4\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"40\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"5 1\") == \"10\"\nassert solution(\"3 2\") == \"11\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"40\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"4\"\nassert solution(\"10 10\") == \"12\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n-30 -10 10 20 50''') == \"40\"\nassert solution('''5 4\n-20 -10 10 20 50\n''') == \"40\"\nassert solution('''6 2\n-20 -20 -10 -10 10 20\n''') == \"0\"\nassert solution('''9 9\n-1 1 1 1 1 1 1 1 1 1\n''') == \"6\"\nassert solution('''2 2\n-1 -1\n''') == \"0\"\n'''"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '40'\n\"\"\"\n\nfrom collections import deque\nimport sys\nfrom datetime import datetime\nfrom queue import PriorityQueue"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '40'\nassert solution('10 4') == '60'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([10, 3]) == \"40\"\nassert solution([10, 4]) == \"40\"\nassert solution([10, 4, 3]) == \"40\"\nassert solution([-10, -30, 10, 20, 50]) == \"40\"\nassert solution([-20, -40, 20, 30, 30]) == \"10\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"40\"\nassert solution(\"10 4\") == \"70\"\nassert solution(\"10 4\") == \"90\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"40\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 13') == '2'"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('8 13') == '2'"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution(\"8 13\") == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 13\") == \"2\"\n\n'''\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 13') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7') == '3'\nassert solution('4 4') == '1'\nassert solution('5 6') == '3'\nassert solution('2 3') == '1'"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 13') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 13') == '2'"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == '3'\nassert solution('10 4') == '3'\nassert solution('10 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"20 3\") == \"2\"\nassert solution(\"100 10\") == \"3\"\nassert solution(\"9 3\") == \"1\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\n'''\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 4''') == '3'\nassert solution('''10 3''') == '2'\nassert solution('''10 2''') == '1'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10 4\n''') == '3'\nassert solution('''5 4\n''') == '2'\nassert solution('''6 4\n''') == '1'\nassert solution('''10 4\n''') == '3'\nassert solution('''10 3\n''') == '3'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n\") == \"3\"\nassert solution(\"6 4\\n\") == \"2\"\nassert solution(\"10 4\\n\") == \"3\"\nassert solution(\"20 4\\n\") == \"1\"\nassert solution(\"100 4\\n\") == \"2\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('10 4') == '3'\nassert solution('11 5') == '2'\nassert solution('1 10') == '1'\nassert solution('10 1') == '10'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\nassert solution('100 5') == '100'\nassert solution('10 10') == '1'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"5 6\") == \"7\""
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n\") == \"2\"\nassert solution(\"3 10\\n\") == \"3\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 75 25 100') == '50'\nprint(solution('0 75 25 100'))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"1 25 6 100\") == \"75\"\nassert solution(\"6 15 10 5\") == \"8\"\nassert solution(\"12 31 12 21\") == \"40\"\nassert solution(\"10000 10000 10000\") == \"0\""
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 75 25 100') == \"50\""
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"15 70 25 100\") == \"60\"\nassert solution(\"0 25 0 100\") == \"100\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == '50'\nassert solution(\"12 20 30 32 50\") == '30'\nassert solution(\"0 80 70 60 50\") == '60'\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"1 1 1 1\") == \"3600\"\nassert solution(\"1 2 2 3\") == \"0\"\nassert solution(\"0 1 2 3\") == \"3600\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"10 10 10 10\") == \"0\""
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('3 5 1 1') == '10'\nassert solution('0 3 9 2') == '11'\n\n-------------------------------------------------------"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 6 9 50\") == \"75\""
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 75 25 100') == \"50\"\nassert solution('0') == \"0\"\nassert solution('0') == \"0\"\nassert solution('5') == \"0\"\nassert solution('1') == \"0\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"5\\n\") == \"1\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"105\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"2\"\nassert solution(\"105\") == \"2\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"0\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"4\\n\") == \"2\"\nassert solution(\"5\\n\") == \"2\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\nassert solution('1021') == '2'\nassert solution('1212') == '3'\nassert solution('1321321') == '8'"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('3\\n') == '2\\n'\nassert solution('4\\n') == '2\\n'\nassert solution('5\\n') == '3\\n'\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '0'\nassert solution('5') == '1'\nassert solution('8') == '2'\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"4\") == 1\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('105\\n') == '1'\nassert solution('200\\n') == '8'\nassert solution('2000\\n') == '96'"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"0\"\nassert solution(3) == \"1\"\nassert solution(4) == \"1\"\nassert solution(5) == \"1\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"7 6\") == \"1\"\nassert solution(\"7 11\") == \"2\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7 3\n2\n1\n1\n0\n3\n1\n1''') == \"1\""
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1,1]) == \"1\"\nassert solution([5,4]) == \"1\"\nassert solution([2,5]) == \"2\"\nassert solution([4,2]) == \"2\"\nassert solution([8,6]) == \"2\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([7, 3]) == 1\nassert solution([7, 2]) == 5\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"15 5\") == \"1\"\nassert solution(\"100 100\") == \"2\"\nassert solution(\"1000 1000\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 1') == '1'\nassert solution('7 1') == '1'\nassert solution('5 10') == '-1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3') == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4') == '1'\nassert solution('7 3') == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3') == '1'\nassert solution('50 20') == '20'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('111') == '111'\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('111') == '111'\nassert solution('1000') == '1000'\nassert solution('100') == '100'\nassert solution('101') == '101'\nassert solution('1011') == '1011'\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"10\") == \"10\""
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"1111\") == \"11\"\nassert solution(\"11111111\") == \"11\"\nassert solution(\"1111111111\") == \"11\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '111'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"0\") == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"-111\") == \"-111\"\nassert solution(\"1-111\") == \"111\"\nassert solution(\"11111111111111\") == \"11111111111111\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('111') == '111'\n\n\"\"\"\n\nN = int(input())\na = list(str(N))\nfor i in range(len(a)):\n    a[i] = int(a[i])"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"12\") == \"12\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('0 1 2') == '0'\nassert solution('1 6 3') == '5'\nassert solution('1 6 3') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"1 5 7\") == \"8\"\nassert solution(\"1 2 3\") == \"3\""
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 6, 3]) == \"5\"\nassert solution([1, 4, 2]) == \"3\"\nassert solution([2, 6, 3]) == \"3\"\nassert solution([5, 1, 2]) == \"2\"\nassert solution([5, 4, 1]) == \"1\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 6 3\n2 4 3\n3 4 3\n4 5 3\n5 6 3\n6 7 3\n7 8 3\n8 9 3\n9 10 3\n10 11 3\n11 12 3\n12 13 3\n13 14 3\n14 15 3\n15 16 3\n16 17 3\n17 18 3\n18 19 3\n19 20 3\n20 21 3\n21 22 3\n22 23 3\n23 24 3\n24 25 3\n25 26 3\n26 27 3\n27 28 3\n28 29 3\n29 30 3\n30 31 3\n31 32 3\n32 33 3\n33 34 3\n34 35 3\n35 36 3\n36 37 3\n37 38 3\n38 39 3\n39 40 3\n40 41 3\n41 42 3\n42 43 3\n43 44 3\n44 45 3\n45 46 3\n46 47 3\n47 48 3\n48 49 3\n49 50 3\n50 51 3\n51 52 3\n52 53 3\n53 54 3\n54 55 3\n55 56 3\n56 57 3\n57 58 3\n58 59 3\n59 60 3\n60 61 3\n61 62 3\n62 63 3\n63 64 3\n64 65 3\n65 66 3\n66 67 3\n67 68 3\n68 69 3\n69 70 3\n70 71 3\n71 72 3\n72 73 3\n73 74 3\n74 75 3\n75 76 3\n76 77 3\n77 78 3\n78 79 3\n79 80 3\n80 81 3\n81 82 3\n82 83 3\n83 84 3\n84 85 3\n85 86 3\n86 87 3\n87 88 3\n88 89 3\n89 90 3\n90 91 3\n91 92 3\n92 93 3\n93 94 3\n94 95 3\n95 96 3\n96 97 3\n97 98 3\n98 99 3\n99 100''') == '5':\n    print(\"Test passed\")\nelse:\n    print(\"Test Failed\")\n'''\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 6 3\n    ''') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 6 3') == \"5\"\nassert solution('1 10 3') == \"10\"\nassert solution('1 100 3') == \"100\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '5'\nassert solution('1 6 3') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\nassert solution('10') == '5'\nassert solution('11') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '4'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('8') == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '4'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\nassert solution('10') == '5'\nassert solution('15') == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(['8', '4', '2', '1', '4', '2', '1', '4', '2', '1', '......']) == '5'"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"10 9 10 10\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 9 10 10\n''') == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 2 3 4\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"A B C D\") == \"No\"\nassert solution(\"1 2 3 4\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 10 7\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"No\"\nassert solution(\"6 6 4 4\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"Yes\", \"Should return 'Yes'\"\nassert solution(\"10 9 10 10\") == \"No\", \"Should return 'No'\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"Yes\"\nassert solution(\"9 9 10 10\") == \"No\"\nassert solution(\"11 9 10 10\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('4 5 10 8') == 'Yes'\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 5 1 5\") == \"Yes\"\nassert solution(\"100 1 1 1\") == \"Yes\"\nassert solution(\"1 1 10 10\") == \"Yes\"\nassert solution(\"1 1 10 1\") == \"No\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3\n    10 2 5\n    6 3 4\n''') == '5'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\nassert solution('1\\n1 2 3\\n4\\n') == '3'\nassert solution('4\\n10 2 5\\n6 3 4\\n') == '10'\nassert solution('10\\n10 2 5\\n6 3 4\\n') == '10'\nassert solution('20\\n10000 100100 100500 100500\\n100100 100500 100500 100500\\n') == '0'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\""
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\nassert solution('5\\n10 2 5\\n6 3 4\\n') == '5'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\""
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\nassert solution('5\\n1 2 3 4 5') == '1'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n10 2 5\n6 3 4\n''') == '5'\nassert solution('''\n2\n10 2 3\n6 3 4\n''') == '3'\n''')"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\nassert solution('10\\n10 2 5\\n6 3 4') == '6'\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n.##\\n....\\n.##\") == \"###\"\nassert solution(\"4 4\\n###\\n###\\n###\\n\") == \"###\"\nassert solution(\"4 4\\n##.##\\n##.##\\n##.##\\n\") == \"##.##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 7\\n#.#.#\\n#.#.#\\n.##.#\\n#.##.\") == \"#.##.\"\nassert solution(\"5 5\\n##.#\\n##.#\\n##.#\\n##.#\") == \"#.##.\"\nassert solution(\"10 7\\n#.#.#\\n##.#\\n#.#.#\\n#.#.#\\n#.#.#\\n###\\n##.#\\n#.#.#\\n#.#.#\") == \"#.##.\"\nassert solution(\"100 100\\n###.#\\n#.##.\\n###.#\\n#.#.#\\n###.#\\n#.##.\\n#.##.\\n#.#.#\") == \"#.##.\"\nassert solution(\"4 4\\n#.#.\\n#.#.\\n.##.\\n.##.\") == \"###.\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4\\n###\\n###\\n###\\n') == '###\\n###\\n'\nassert solution('5 5\\n####\\n####\\n###\\n###\\n###') == '####\\n####\\n###\\n###\\n'\nassert solution('10 10\\n####\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n') == '###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n'\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '###'\nassert solution('3 5') == '###'\nassert solution('3 4') == '###'\nassert solution('5 4') == '###'\nassert solution('5 5') == '###'\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##\\n', solution('''8 7\n##..\n###\n##.#\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"###\\n###\\n.##\\n\"\n\n\"\"\"\n\nstdin = input()\n\nfor row in range(0, int(stdin.split()[0])):\n    for col in range(0, int(stdin.split()[1])):\n        if stdin[row * int(stdin.split()[1]) + col] == \".\":\n            print(\"#\", end=\"\")\n        else:\n            print(\".\", end=\"\")\n    print()\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n###\\n###\\n.##\") == \"###\\n###\"\nassert solution(\"3 3\\n#.##\\n###.\\n##.##\") == \"###\\n###\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '###'\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#.\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n.##.\\n...\\n##.\\n###\") == \"###\\n###\\n###\\n\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"###\"\nassert solution(\"3 2\") == \"###\"\nassert solution(\"3 3\") == \"###\"\nassert solution(\"4 4\") == \"###\""
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('5') == '16.9923139619140625'\n'''"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '6.28'\nprint(solution(input()))"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"12.00000\"\nassert solution(\"1\") == \"6.00000\"\nassert solution(\"1.1\") == \"6.00000\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '6.28318530717958624'\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"5\n    \"\"\"\n) == \"12.566370614359172\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '6.28318530717958623200', 'First'\nassert solution('2') == '1.5707963267948966', 'Second'\nassert solution('3') == '6.28318530717958623200', 'Third'\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '6.2831853071795863'\nassert solution('5') == '34.1592653589793'\nassert solution('10') == '55.2734375'\nassert solution('12') == '45.2734375'\n\"\"\"\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"2\") == \"7.0710676723632793200\"\nassert solution(\"3\") == \"17.391304347826086200\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"10.0\"\n\nassert solution(\"1.1\") == \"1.1\"\n\nassert solution(\"0.1\") == \"0.1\"\n\"\"\"\n\nR = int(input())"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1\n1\n1''') == '6.28318530717958624'\nassert solution('''1\n3\n2\n1\n''') == '4.16666666666666668'\nassert solution('''1\n3\n1\n1\n''') == '4.16666666666666668'\nassert solution('''1\n2\n2\n1\n''') == '4.500000000000001'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('A') == 'Yes'\nassert solution('ASSA') == 'Yes'\nassert solution('ABSASSA') == 'Yes'\nassert solution('AAAB') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ABCD') == 'No'\nassert solution('ABCAB') == 'Yes'\nassert solution('ABCAD') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AAA\") == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('HOGG') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AASSA\") == \"No\"\nassert solution(\"AAS\") == \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('BCD') == 'No'\n\"\"\"\n\ns = stdin.strip()"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AA') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ASSA') == 'Yes', solution('ASSA')\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-15 -3\") == \"-28\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"3\", \"Should be 3\"\nassert solution(\"-1 -2\") == \"1\", \"Should be 1\"\nassert solution(\"-100 100\") == \"-100\", \"Should be -100\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('-10 5') == '-15'\nassert solution('-10 10') == '-20'"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n-13 3\n''') == '-10'\nassert solution('''\n0 0\n''') == '0'\nassert solution('''\n8 2\n''') == '8'\nassert solution('''\n1 -2\n''') == '1'\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('12 3') == '-16'\nassert solution('-10 12') == '-32'"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-1 2\") == \"-3\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\\n1\\n1\\n\"\nassert solution(\"-1 -2\") == \"1\\n2\\n2\\n\"\nassert solution(\"1 2\") == \"3\\n3\\n3\\n\"\nassert solution(\"-1 2\") == \"1\\n3\\n3\\n\"\nassert solution(\"1 1\") == \"1\\n1\\n1\\n\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('-13 3') == '-10'\nassert solution('-13 3') == '-10'\nassert solution('-13 3') == '-10'\nassert solution('-13 3') == '-10'\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"-13 3\") == \"1\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n4\n5 6 7 9\n\"\"\") == \"3\"\nassert solution(r\"\"\"\n10\n10 10 10 10 10 10 10 10 10 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"6\"\nassert solution(\"12\") == \"7\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\nassert solution(\"9\\n3 3 2 5 6 7 7 5 5\") == \"8\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\nassert solution(\"5\\n6 5 6 8\") == \"4\"\nassert solution(\"10\\n6 5 6 8\") == \"3\"\nassert solution(\"6\\n6 5 6 8\") == \"4\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '4'\nassert solution('7') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"9\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n6 5 6 8\n''') == '3', 'Sample Test Failed'\nassert solution('''\n3\n3 4 5\n''') == '1', 'Sample Test Failed'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4\\n') == '2'\nassert solution('4\\n1 1 1 1\\n') == '4'\nassert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('5\\n1 2 1 2 1\\n') == '3'"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution() == \"3\"\nassert solution() == \"1\"\nassert solution() == \"4\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution('5') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '2'\nassert solution('4') == '1'\nassert solution('5') == '3'\nassert solution('1 1 1 1') == '4'"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    2\n    3 4\n    ''') == '1'\n    \nassert solution('''\n    3\n    4 5 6\n    ''') == '2'\n    \nassert solution('''\n    5\n    1 2 3 4 5\n    ''') == '1'\n    \nassert solution('''\n    5\n    1 1 1 1 1\n    ''') == '2'"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"7\\n\"\n    \"1 2 3 1 2 3 4\"\n) == \"2\\n\"\n\nassert solution(\n    \"4\\n\"\n    \"1 1 1 1\"\n) == \"4\\n\"\n\nassert solution(\n    \"5\\n\"\n    \"1 2 1 2 1\"\n) == \"1\\n\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 1 2 3 4') == '2'\nassert solution('1 1 1 1') == '1'\nassert solution('1 2 3 4 5') == '4'"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7') == '2'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('5') == '1'"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3 4\n1 2 1 3\n1 3 1 2\n1 2 4 3\n2 4 1 3\n3 4 1 2\n3 4 1 2\n2 1 2 3\n1 2 3 4\n1 2 1 3\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n2 3 4 5\n2 4 1 2\n2 3 1 4\n3 4 2 1\n2 3 2 4\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n2 3 4 5\n2 4 1 2\n2 3 1 4\n3 4 2 1\n2 3 2 4\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n1 3 1 2\n1 4 1 2\n1 2 4 3\n1 1 1 1\n1 2 1 2 1\n1 1 1 1 1\n1 2 1 2 1\n1 3 1 2\n1 4 1 2\n1 2 1 2\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n2\n3\n7\n''') == '2'\nassert solution('''\n2\n2\n4\n''') == '1'\nassert solution('''\n4\n2\n5\n''') == '2'\nassert solution('''\n7\n1\n16\n''') == '1'\nassert solution('''\n9\n8\n4\n''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n6\n7\n21\n28''') == '1'\nassert solution('''5\n3\n6\n7\n21\n28''') == '2'\nassert solution('''5\n3\n6\n7\n21\n28''') == '1'\nassert solution('''5\n3\n6\n7\n21\n28''') == '7'\nassert solution('''5\n3\n6\n7\n21\n28''') == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1'\nassert solution('''1\n2\n1\n7\n4\n333333333\n333333328\n''') == '2'\nassert solution('''1\n2\n1\n7\n4\n333333333\n333333328\n''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '7\\n'\n    '3\\n'\n    '6\\n'\n    '7\\n'\n    '21\\n'\n    '28\\n'\n    '999999999\\n'\n    '999999984\\n'\n    ) == '1\\n'\n    '2\\n'\n    '1\\n'\n    '7\\n'\n    '4\\n'\n    '333333333\\n'\n    '333333328'\n)\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7\n3\n6\n7\n21\n28\n999999999\n999999984''') == '1'\nassert solution('''7\n2\n1\n7\n4\n333333333\n333333328''') == '2'\nassert solution('''7\n1\n2\n1\n7\n4\n333333333\n333333328''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == \"1\"\nassert solution('''\n4\n7\n2\n23\n4\n999999999\n999999984\n''') == \"2\"\nassert solution('''\n5\n1\n2\n3\n4\n999999999\n999999984\n''') == \"1\"\nassert solution('''\n6\n1\n2\n3\n4\n5\n999999999\n999999984\n''') == \"2\"\nassert solution('''\n7\n1\n2\n3\n4\n5\n6\n999999999\n999999984\n''') == \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == \"1\"\nassert solution('''\n1\n2\n1\n7\n4\n333333333\n333333328\n''') == \"2\"\nassert solution('''\n1\n2\n1\n7\n4\n333333333\n333333328\n''') == \"1\"\nassert solution('''\n1\n2\n1\n7\n4\n333333333\n333333328\n''') == \"7\"\nassert solution('''\n1\n2\n1\n7\n4\n333333333\n333333328\n''') == \"4\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1'\nassert solution('''\n2\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '2'\nassert solution('''\n3\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '3'\nassert solution('''\n4\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\n''') == '1'\nassert solution('''\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\n''') == '2'\nassert solution('''\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\n''') == '1'\nassert solution('''\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\n''') == '2'\nassert solution('''\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\n''') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"512\") == \"50\"\nassert solution(\"1000000000\") == \"1\"\nassert solution(\"1000000000 9\") == \"1\"\nassert solution(\"512 4\") == \"50\""
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"512\") == \"50\"\nassert solution(\"1000000000\") == \"1\"\nassert solution(\"100000001\") == \"1\"\nassert solution(\"10000000009\") == \"9\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"512 4\\n\") == \"50\"\nassert solution(\"1000000000 9\\n\") == \"1\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"1000000000 9\\n\") == \"1\""
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\nassert solution(\"10000000000 9\") == \"1\"\nassert solution(\"111110000 9\") == \"1\"\nassert solution(\"100000000 1\") == \"0\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '50'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n4 3 5 1 2 2 1\n''') == '5'\nassert solution('''3\n3 7 5 1 5\n''') == '2'\nassert solution('''7\n2 2 3 2 1 2 2\n''') == '7'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n4 3 5 1 2 2 1\n''') == '5'\n\nassert solution('''\n5\n3 7 5 1 5\n''') == '2'\n\nassert solution('''\n7\n5 1 4\n''') == '7'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\n4 3 5 1 2 2 1\n''') == '5'\nassert solution('''\n5\n3 7 5 1 5\n''') == '2'\nassert solution('''\n3\n5 1 4\n''') == '4'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('7') == '5'\nassert solution('2') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\n4 3 5 1 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5\\n') == '5\\n2 1 1 2 3'\nassert solution('3\\n5 1 4\\n') == '2\\n4 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\\n4 5\""
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '5'\nassert solution('5') == '2'\nassert solution('3') == '2'\nassert solution('7') == '7'\nassert solution('5 1 4') == '4 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7') == '5'\nassert solution('5') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('5 3 5 1 2 2 1') == '2 3 5 1 2 2 1'"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == '5'\nassert solution('7') == '2 2 2 2 2 3 2'\nassert solution('3') == '5'\nassert solution('3') == '1 2 2 2 3'\nassert solution('8') == '5'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 21\") == \"2\"\nassert solution(\"4 16\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 21') == '2'\nassert solution('4 16') == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '2'\nassert solution(\n    '4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 16') == '2'\nassert solution('4 21') == '2'\nassert solution('4 16') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 16\n10 8\n7 4\n3 1\n5 4\n''') == '2'\nassert solution('''\n4 21\n10 8\n7 4\n3 1\n5 4\n''') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 21\") == \"2\"\nassert solution(\"4 16\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 20\n5 3\n10 8\n4 3\n10 5\n''') == '1'"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n4 21\n10 8\n7 4\n3 1\n5 4\n''') == '2'\n\nassert solution(\n'''\n4 16\n10 8\n7 4\n3 1\n5 4\n''') == '-1'\n\nassert solution(\n'''\n4 5\n5 4\n3 1\n5 4\n''') == '-1'\n\nassert solution(\n'''\n4 8\n3 1\n5 4\n''') == '2'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"2\", \"3\"\nassert solution(\"4 21\") == \"2\", \"4\"\nassert solution(\"4 16\") == \"-1\", \"16\""
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 21') == '2'\nassert solution('4 16') == '-1'"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n'''\nfrom collections import defaultdict"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'tleelte'\nassert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'vvvvvv'\nassert solution('''4\n1\n2\n2\n1''') == 'aaaaa'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 6 1 3\") == \"tleelte\"\nassert solution(\"4 6 6 1\") == \"qwerty\"\nassert solution(\"4 6 7 1\") == \"vvvvvv\"\nassert solution(\"4 5 2 2\") == \"abcde\""
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n7 5 3\\n6 1 1') == 'tleelte'\nassert solution('5\\n1 2 1\\n2 2 2') == 'abcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"tleelte\"\n\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) in [\"tleelte\", \"qwerty\", \"vvvvv\", \"abcde\"]\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == \"tleelte\"\nassert solution('''4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == \"qwerty\"\nassert solution('''4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == \"vvvvv\"\nassert solution('''4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n4 5 2\n4 6 2\n5 2 2''') == \"tleelte\"\nassert solution('''6\n5 2 1\n6 1 1\n5 2 1\n6 1 1\n5 2 1\n6 1 1''') == \"qwerty\"\nassert solution('''5\n4 6 2\n5 2 2\n4 6 2\n5 2 2\n6 2 2''') == \"vvvvvv\"\nassert solution('''5\n4 6 3\n5 2 3\n4 6 3\n5 2 3\n6 3 3''') == \"abcde\"\n\n--"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3') == \"tleelte\"\nassert solution('6 1 1') == \"qwerty\"\nassert solution('6 6 1') == \"vvvvvv\"\nassert solution('5 2 2') == \"abcde\""
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"12 12 6\") == \"12\"\nassert solution(\"10 10 2\") == \"12\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"10 30 4\") == \"10\"\nassert solution(\"20 12 6\") == \"12\"\nassert solution(\"2 2 4\") == \"2\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 8 4\") == \"12\"\nassert solution(\"20 10 10\") == \"24\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"1 100 100\") == \"1\"\nassert solution(\"2 10 0\") == \"0\"\nassert solution(\"2 5 0\") == \"0\"\nassert solution(\"3 2 6\") == \"2\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"5 10 3\") == \"10\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"20 1 10\") == \"10\"\nassert solution(\"20 2 10\") == \"10\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"10 15 1\") == \"15\"\nassert solution(\"20 10 10\") == \"20\"\n\nTakahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?\n\n-----Constraints-----\n - 1 \\leq N,X,T \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN X T\n\n-----Output-----\nPrint an integer representing the minimum number of minutes needed to make N pieces of takoyaki.\n\n-----Sample Input-----\n20 12 6\n\n-----Sample Output-----\n12\n\nHe can make 12 pieces of takoyaki in the first 6 minutes and 8 more in the next 6 minutes, so he can make 20 in a total of 12 minutes.\nNote that being able to make 12 in 6 minutes does not mean he can make 2 in 1 minute."
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(TEST_INPUT) == EXACT_OUTPUT\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4\") == \"4\", \"Should be 4\"\nassert solution(\"5 5 6\") == \"7\", \"Should be 7\"\nassert solution(\"5 6 5\") == \"8\", \"Should be 8\"\nassert solution(\"2 3 6\") == \"7\", \"Should be 7\"\nassert solution(\"1 2 4\") == \"4\", \"Should be 4\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(Takahashi_test_data) == '12'\n\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"2\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '2'\nassert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('5') == '6'\nassert solution('100') == '200'\n'''"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1'\nassert solution('5\\n') == '2'\nassert solution('10\\n') == '3'\n'''\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"20\") == \"4\"\nassert solution(\"100\") == \"4\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\nassert solution('10') == '4'\nassert solution('9') == '3'\nassert solution('17') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '2'\nassert solution('50') == '3'\nassert solution('100') == '4'\nassert solution('1000') == '5'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '4'\n\n\"\"\"\nfrom itertools import groupby"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '3'"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"100 100\") == \"200\"\nassert solution(\"3 100\") == \"200\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\nassert solution('3 7') == '3'\nassert solution('20 20') == '20'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 3\"\"\") == \"3\"\nassert solution(\"\"\"1 2\"\"\") == \"1\"\n\n\"\"\"\n3\n2\n\n1 2\n\n1\n\n1\n\n1\n\n1\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n2\n5 2\n4\n3\n4''') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '3'\nassert solution('2 4') == '5'\nassert solution('5 6') == '6'\nassert solution('5 7') == '7'\nassert solution('3 3') == '3'\n\nimport os"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == '3'"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 12') == '16'\nassert solution('1 2') == '3'\nassert solution('4 12') == '16'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1 1\"\nassert solution(\"1 3\") == \"2 2\"\nassert solution(\"1 1\") == \"2 1\"\nassert solution(\"1 1\") == \"2 1\"\nassert solution(\"1 2\") == \"1 1\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"4 1 2 3\") == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\n4 2\n''') == '2 2', \"Failed on sample data\"\nassert solution('''3 4\n5 2\n''') == '2 -2', \"Failed on sample data\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"7\"\nassert solution(\"1 5\") == \"4\"\nassert solution(\"2 10\") == \"8\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 12') == '16'\nassert solution('2 3') == '1'\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"5 6\") == \"5 6\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n\ninput = stdin.readline()\nA, B = map(int, input.split())\n\nprint(A + B if A % B == 0 else B - A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n\") == \"5\"\nassert solution(\"5 3\\n\") == \"5\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 3\\n\") == \"0\"\nassert solution(\"5 2\\n\") == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4') == '2 4'\nassert solution('1 2') == '3'\nassert solution('3 1') == '2'\nassert solution('4 5') == '-2'\nassert solution('5 4') == '-2'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('chokudai') == 'Yes', solution('chokudai')\nassert solution('chokudaiz') == 'Yes', solution('chokudaiz')"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'No'\nassert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\n\"\"\"\nS = input()\nT = input()"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudai') == 'No'\nassert solution('chokudaiz') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == '9'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"0 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5') == '9'\nassert solution('2 6') == 'IMPOSSIBLE'\nassert solution('0 8') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n6 8''') == '3'\nassert solution('''5 2\n6 4''') == 'IMPOSSIBLE'\nassert solution('''1 2\n2 3''') == '1'\nassert solution('''1 2\n2 3''') == 'IMPOSSIBLE'\n\n'''\n=========================================\nCodeWars - Find the Difference\n=========================================\nDifficulty: Easy\n\nDifficulty: Easy\n\nSuppose we rewrite the Fancy Sum Rule in the following way:\n\nWe start with a list with 1 item, we then update our list with the previous\nitem and the current item. If we encounter two consecutive items in the\nsequence that differ only by one digit, we update our list to contain the\nsum of those two items.\n\nIf we reach the end of our list without finding two consecutive items\nthat differ by only one digit, we can no longer update our list and\nthus, our final sum is the difference between the maximum and minimum\nof the list.\n\nWrite an algorithm that will take in a list of integers and\ncompute and return the final sum of the numbers.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA[n]\n\n-----Output-----\nPrint the final sum of the numbers in A.\n\n-----Sample Input-----\n2 1 3\n\n-----Sample Output-----\n5\n'''\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"4 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == \"9\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 15') == 'Impossible'\nassert solution('2 17') == 'Impossible'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"IMPOSSIBLE\"\nassert solution(\"5 9\") == \"IMPOSSIBLE\"\nassert solution(\"5 9\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('117') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('117') == 'Yes'\nassert solution('54') == 'No'\nassert solution('100') == 'No'\nassert solution('77') == 'Yes'"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('117') == \"Yes\"\nassert solution('119') == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\nassert solution('123') == 'No'\nassert solution('1001') == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('117') == 'Yes'\nassert solution('116') == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('117') == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('117') == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('117') == 'Yes'\nassert solution('5') == 'No'\nassert solution('100') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\nassert solution('1') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"111\") == \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\nassert solution('11') == 'No'\n'''\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"101\") == \"No\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'No'\nassert solution('77') == 'Yes'\nassert solution('100') == 'No'\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\nassert solution('1000') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\nassert solution('10') == 'No'\nassert solution('11') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('1.2') == 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'\nassert solution('10') == 'No'\nassert solution('1') == 'No'\nassert solution('2') == 'No'"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0 0 0 1\n''') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\\n\") == \"-1 1 -1 0\"\nassert solution(\"0 0 0 1\\n\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 -1') == '-1 -1 1 -1'"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\", \"Wrong\"\nassert solution(\"0 0 0 0\") == \"-1 1 -1 1 -1\", \"Wrong\"\nassert solution(\"1 1 1 1 1\") == \"0 0 0 0 0\", \"Wrong\""
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 0 1') == '(-1, 1)-(0, -1)-(1, 0)-(-1, 1)'\nassert solution('0 0 0 0') == '0 0 0 0'\nprint(solution(input()))"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''0 0 0 1\n''') == '-1 1 -1 0'\nassert solution('''0 0 0 -1\n''') == '-1 -1 1 0'\nassert solution('''0 0 0 1\n1 1 1 1\n''') == '-1 1 -1 0'\nassert solution('''0 0 0 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '-1 1 -1 0'\nassert solution('''0 0 0 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '-1 1 -1 0'\n\n----\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0 0 0 1\n\n0 0 0 1''') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\\n\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"0 0 0 1\n\n\"\"\") == \"1 0 1 -1\"\nassert solution(\"\"\"0 0 0 1\n0 0 1 0\n0 1 0 0\n1 0 1 1\n\"\"\") == \"0 0 0 1 1 -1 -1 1 1\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '-1 1 -1 0'\nassert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('red blue') == '2 4'"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"red red\") == \"4 4\"\nassert solution(\"blue blue\") == \"4 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"6 7\") == \"3 6\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"1 1\") == \"2 2\"\nassert solution(\"1 2\") == \"2 2\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"red blue\\n3 4\\nred\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('red blue\\n3 4\\nred') == '2 4'\n\"\"\"\n\nA,B,S,T,U=input().split()"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('red blue') == '2 4'\nassert solution('6 4') == '3 4'\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"1\", \"1\", \"1\"]) == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\nabc\"\"\") == \"Yes\"\nassert solution(\"\"\"6\nabc\"\"\") == \"Yes\"\nassert solution(\"\"\"6\nabcd\"\"\") == \"No\"\nassert solution(\"\"\"6\nabcd\"\"\") == \"No\"\nassert solution(\"\"\"6\nabcd\"\"\") == \"Yes\""
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10\\nabcdabcd') == 'Yes', 'Not correct!'\n\nNotes\nConsider the following definition of the solution:\n\nWrite a function:\n\n    def solution(N, S)\n\nthat, given a positive integer N and a string S consisting of lowercase English letters,\nreturns one of the following strings:\n\n\u201cYes\u201d if S is a concatenation of two copies of some string; otherwise, returns \u201cNo\u201d.\n\nIf there are more than one possible solutions, it should return any of them.\nFor example, given S = abcabc, and N = 6, the function should return Yes, No, No, No, No, No;\ngiven S = abcabc, and N = 10, the function should return Yes, No, Yes, No, No, No, No, No, No, No;\ngiven S = abcabc, and N = 12, the function should return Yes, No, Yes, No, No, No, No, No, No, No, No;\ngiven S = abcabc, and N = 16, the function should return Yes, No, Yes, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No;\ngiven S = abcabc, and N = 20, the function should return Yes, No, Yes, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No;\nand, given S = abcabc, and N = 24, the function should return Yes, No, Yes, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, No.\n'''\nimport collections\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == 'Yes'\nassert solution('abcabc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\nassert solution('abcabcabcabcabc') == 'Yes'\nassert solution('abcabcabcabcabcabcabc') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'Yes'\nassert solution('abcabc') == 'Yes'\nassert solution('abcccc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('4') == 'Yes'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == 'Yes'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('4 4 2 2') == '4.000000 1'\nassert solution('3 2 3 2') == '4.000000 2'\nassert solution('4 4 3 2') == '4.000000 2'\nassert solution('3 2 3 2') == '5.000000 3'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('3 2 1 2') == '0.000000 0'\nassert solution('7 6 1 2') == '0.000000 0'\nassert solution('5 5 2 3') == '5.000000 0'\nassert solution('10 5 5 2') == '0.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 1 2\n''') == '3.000000 0\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 2 1 3') == '1.000000 0'\nassert solution('4 5 6 3') == '4.000000 0'\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 2 2') == '3.000000 1'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 1 1 1') == '0'"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"6 2 3 3\") == \"3.000000 0\"\nassert solution(\"1 1 3 5\") == \"0.000000 0\"\nassert solution(\"4 1 2 4\") == \"0.000000 0\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == 'Four'\nassert solution('3') == 'Three'\nassert solution('4') == 'Four'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\nP Y W Y P Y') == 'Four'\nassert solution('10\\nP Y G G Y G') == 'Three'\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nP Y W') == 'Three'\nassert solution('4\\nP Y Y G') == 'Four'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == 'Four'\nassert solution('15') == 'Three'\nassert solution('10') == 'Two'\nassert solution('1') == 'One'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Three'\nassert solution('5') == 'Five'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"Four\"\nassert solution(\"7\") == \"Three\""
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\nassert solution('10\\nG W Y P Y W G Y P Y') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n6\nG W Y P Y W\n\"\"\") == \"Four\"\nassert solution(\n\"\"\"\n5\nG W G G G\n\"\"\") == \"Three\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\nassert solution(\"10\\nW Y Y Y G G\") == \"Three\""
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 3\n2 3 1\n''') == '6'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3 2') == '6'\nassert solution('5 3 3') == '2'\nassert solution('5 5 6') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    6 3 2\n    2 3 1 3 4 2\n    \"\"\"\n    ) == \"6\"\n\nassert solution(\n    \"\"\"\n    5 3 3\n    1 2 6 10 3\n    \"\"\"\n    ) == \"2\"\n\nassert solution(\n    \"\"\"\n    5 5 6\n    1 2 6 10 3\n    \"\"\"\n    ) == \"2\""
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 3 2\n2 3 1 3 4 2\n''') == '6'\nassert solution('''\n5 3 3\n1 2 4 2 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3 2\n2 3 1 3 4 2\n''') == '6'\nassert solution('''\n5 3 3\n1 2 4 2 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\nassert solution('''\n2 5 1\n4 3 2 2 4\n''') == '1'\nassert solution('''\n1 0 0\n0 5 1\n''') == '1'\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6 3 2\\n'\n    '2 3 1 3 4 2\\n'\n) == '6'\n\nassert solution(\n    '5 3 3\\n'\n    '1 2 6 10 3\\n'\n) == '2'\n\"\"\"\n\n\nfrom functools import reduce\nimport operator\nfrom collections import deque\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3 2\n2 3 1 3 4 2\n''') == '6'\nassert solution('''\n5 3 3\n1 2 4 2 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\nassert solution('''\n6 7 8 9 10 11\n5 6 9 12 1 2\n''') == '5'\nassert solution('''\n6 7 8 9 10 11\n5 6 9 12 1 2\n''') == '6'\n'''"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 3 2\n2 3 1 3 4 2\n''') == '6'\nassert solution('''\n5 3 3\n1 2 4 2 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\n'''\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 3 2\n2 3 1 3 4 2\n''') == '6'\nassert solution('''\n5 3 3\n1 2 4 2 3\n''') == '2'\nassert solution('''\n5 5 6\n1 2 6 10 3\n''') == '2'\nassert solution('''\n1\n2\n3\n''') == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n4 8 2 6 2\\n') == '7'\nassert solution('4\\n1 3 2 4\\n') == '0'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2 7 5\") == \"1\"\nassert solution(\"4 3 5 4\") == \"2\"\nassert solution(\"3 5 8 7\") == \"3\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3\n4 5 6\n''') == '7'\nassert solution('''5\n2 3 4 6 5\n4 5 6 2 4\n1 3 2 3\n''') == '10'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 2 4') == '7'\nassert solution('4 5 4 1 3') == '0'\nassert solution('5 2 1 3 4') == '2'\nassert solution('5 4 1 3 2') == '1'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4 2 4\\n') == '2'\nassert solution('4\\n4 2 5 6\\n') == '0'\nassert solution('5\\n2 1 2 3 2\\n') == '4'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\n\nassert solution('5') == '7'\nassert solution('6') == '0'"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '7'\nprint('Done!')"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7'\nassert solution('1 3 2 4') == '0'"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 1 3 5 9\"\nassert solution(\"5\") == \"1 1 3 5 9\"\nassert solution(\"10\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 1 3 5 9'"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 2 1\"\nassert solution(\"3\") == \"2 1 1\"\nassert solution(\"3\") == \"1 2 1\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 4 5 10\n\n''') == \"1 1 3 5 9\"\n\nassert solution('''\n10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n\n''') == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == '1 1 3 5 9'\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 1 3 5 9'\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 1 3 5 9'\nassert solution('10') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 4\n1 2\n3 4\n5 4\n3 5\n''') == '1'\n\nassert solution('''\n5 4\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n''') == '2'\n\nassert solution('''\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n''') == '2'"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n1 2\\n3 4') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"1\"\nassert solution(\"17 15\") == \"2\""
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '1'\nassert solution('17 15') == '2'\n\n\n\"\"\"\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n1 2\n3 4\n5 4\n3 5\n''') == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 4') == '1'\nassert solution('17 15') == '2'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5''') == '1'\nassert solution('''5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5''') == '0'\nassert solution('''5\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5''') == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n\") == \"1\"\nassert solution(\"6\\n\") == \"0\"\nassert solution(\"9\\n\") == \"4\"\nassert solution(\"15\\n\") == \"1\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3\\n') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '4'\nassert solution('1') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution('5\\n1 0 0 1 2\\n1 2') == '1'\nassert solution('5\\n1 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0 0 1 2') == '1'\nassert solution('5') == '4'\nassert solution('3') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\n''') == '1'\nassert solution('''\n5\n1 0 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\n''') == '0'\nassert solution('''\n3\n1 1 2\n2 3\n1 3\n\n''') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2') == '4'\nassert solution('3\\n1 1 2') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4') == '4'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '0'"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"bc\"\nassert solution(\"5\") == \"alvuw\"\nassert solution(\"6\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\naz\nbf\n''') == 'bc'\nassert solution('''\n5\nafogk\nasdji\n''') == 'alvuw'\nassert solution('''\n6\nnijfvj\ntvqhwp\n''') == 'qoztvz'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '2\\naz\\nbf'\n) == 'bc'\n\nassert solution(\n    '5\\nafogk\\nasdji'\n) == 'qoztvz'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\naz\\nbf\") == \"bc\", f\"Your solution ({solution(stdin='')}) is wrong\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\naz\\nbf\\n') == 'bc'\nassert solution('5\\nafogk\\nasdji\\n') == 'alvuw'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"bc\"\nassert solution() == \"qoztvz\"\n\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\naz\\nbf\") == \"bc\"\nassert solution(\"5\\nafogk\\nasdji\") == \"alvuw\""
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\naz\nbf\n\n\"\"\") == \"bc\"\nassert solution(\"\"\"\n5\nafogk\nasdji\n\n\"\"\") == \"alvuw\"\nassert solution(\"\"\"\n6\nnijfvj\ntvqhwp\n\n\"\"\") == \"qoztvz\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\"\nassert solution(\"5 4\\n20 10 40 30\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\"\nassert solution(\"3 3\\n20 10 20 20\") == \"YES\"\nassert solution(\"4 4\\n20 10 20 20\") == \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 4') == 'NO'\nassert solution('4 4') == 'YES'"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'\n'''"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 4') == 'NO'"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n15 13 15 15 12\n''') == \"YES\"\n\nassert solution('''4 4\n20 10 40 30\n''') == \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"YES\", \"First\"\nassert solution(\"5 4\") == \"NO\", \"Second\"\nassert solution(\"4 4\") == \"YES\", \"Third\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == \"YES\"\nassert solution('5 4') == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n2 1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n2 4 3 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"0\") == \"YES\"\nassert solution(\"0 1\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'YES'\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 4 1 2') == 'NO'\nassert solution('1 1 2 1 2') == 'NO'\nassert solution('1 0 0 1 1') == 'YES'\nassert solution('5 1 3 6 8 2 9 0 10') == 'YES'\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 4 0 2') == 'YES'\nassert solution('5 1 3 6 8 2 9 0 10') == '1 0 0 0 0 1 0 1 0'"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\n2\n4\n0\n2\"\"\") == \"YES\"\nassert solution(\"\"\"1\n0\n0\n0\"\"\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2 3 4 5\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1 2 3 4 5 6\n\"\"\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == 'YES', solution('1 2 3 4')\nassert solution('5 1 3 6 8 2 9 0 10') == 'YES', solution('5 1 3 6 8 2 9 0 10')\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '3'\nassert solution('''\n3\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '0'\nassert solution('''\n5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n100 5 100 5 100\n''') == '1134'\nassert solution('''\n1000000000 1 1 1000000000\n''') == '0'\nassert solution('''\n2\n10 2 3 7\n100 51 51 51\n100000000 1 1 1000000000\n''') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"2\n5 1\n5 7\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"1\n3 2\n5 2\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"2\n1\n1000000000\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('12') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n\"\n    \"10 2 3 7\\n\"\n    \"100 51 51 51\\n\"\n    \"1234 1 100 199\\n\"\n    \"1000000000 1 1 1000000000\\n\"\n) == \"3\\n0\\n1134\\n0\\n\""
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3'\nassert solution('4\\n1000000000 1 1 1000000000\\n1000000000 1 1 1000000000\\n1000000000 1 1 1000000000\\n1000000000 1 1 1000000000') == '0'\nassert solution('4\\n100 5 100 5\\n1000000000 100 100 100\\n1000000000 100 100 100\\n1000000000 100 100 100\\n1000000000 100 100 100') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '3'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000001 1 1 1000000000\n''') == '1134'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '0'"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '0'\nassert solution('5') == '0'\nassert solution('6') == '1134'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n5 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '0'\n\nassert solution('''\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '3'\nassert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n100000000 1 1 10000000000\n''') == '0'\nassert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000001 1 1 10000000000\n''') == '1134'\nassert solution('''\n4\n1000000000 1 1 1000000000\n1000000001 1 1 10000000000\n''') == '0'\nassert solution('''\n4\n1000000001 1 1 10000000000\n1000000001 1 1 10000000000\n''') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == \"3\"\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == \"0\"\nassert solution('''5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000001 1 1 1000000000\n''') == \"1134\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('4\\n') == '3\\n'\nassert solution('20\\n') == '121645100408833200\\n'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n\n''') == '1'\nassert solution('''\n4\n\n''') == '3'\nassert solution('''\n8\n\n''') == '1260'\nassert solution('''\n20\n\n''') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"26\"\nassert solution(\"100\") == \"121645100408832000\"\nassert solution(\"1000\") == \"136414836327900480\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nassert solution(\"123456789\") == \"13567980237467891\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2\"\n    ) == \"1\"\n\nassert solution(\n    \"4\"\n    ) == \"3\"\n\nassert solution(\n    \"8\"\n    ) == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nprint('You are all set!')\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\nabcd\\n') == 'abcd'\nassert solution('2 4\\nabcd\\n') == ''\nassert solution('2 4\\nabcd\\nefg\\n') == 'abcd'\nassert solution('3 3\\nabc\\nabc\\n') == 'abc'\nassert solution('3 3\\nabc\\nabc\\nefg\\n') == 'abc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n\" + input_lines.strip() + \"\\n\") == \"abc\"\nprint(solution(input()))\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '15 3\\n'\n    'cccaabababaccbc'\n) == 'cccbbabaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('15 3') == 'ccbbabaccbc'\nassert solution('1 1') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3\\ncccaabababaccbc') == 'cccbbabaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"cccccc\"\nassert solution(input(input().split())) == \"cccccc\"\nassert solution(input(input().split())) == \"\"\n\nassert solution(\"aaa\") == \"\"\nassert solution(\"u\") == \"def\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 3\naabcdefghijklmnopqrstuvwxyz''') == 'cabcdefghijklmnopqrstuvwxyz'\nassert solution('''10 9\naabcdefghijklmnopqrstuvwxyz''') == 'cabcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\na\n''') == ''\n\nassert solution('''\n1 1\nb\n''') == ''\n\nassert solution('''\n1 3\nabacb\n''') == ''\n\nassert solution('''\n1 3\naccb\n''') == 'accb'\n\nassert solution('''\n3 3\na\n''') == 'a'"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '1 1\\nu'\n) == 'def', f\"actual: {solution('1 1\\nu')}\\n\" \\\n       f\"expected: def\"\nassert solution(\n    '9 8\\nabcdefghijklmnopqrstuvwxyz'\n) == 'cdefghijklmnopqrstuvwxyz', f\"actual: {solution('9 8\\nabcdefghijklmnopqrstuvwxyz')}\\n\" \\\n       f\"expected: cdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"u\") == \"u\"\nassert solution(\"ababac\") == \"abac\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n4 4\n1 2\n2 3\n3 4\n1 2\n''') == '8'\n\nassert solution(\n'''\n10 10\n2 3\n2 3\n5 6\n1 7\n8 5\n5 6\n6 8\n4 8\n4 7\n8 8\n''') == '20'\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '8', \"Wrong answer\"\nassert solution('5 3') == '20', \"Wrong answer\"\nassert solution('5 5') == '17', \"Wrong answer\"\nassert solution('5 5') == '17', \"Wrong answer\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"8\"\nassert solution(\"5 3\") == \"20\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2\n2 5\n1 2\n1 5\n2 3\n''') == '20'\nassert solution('''\n5 4\n6 3\n1 4\n2 5\n1 2\n3 3\n''') == '16'\nassert solution('''\n5 2\n4 2\n2 5\n1 2\n1 5\n2 3\n''') == '13'\nassert solution('''\n5 7\n4 6\n1 2\n3 5\n1 1\n2 3\n1 3\n4 3\n''') == '19'\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '8'\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '8'\nassert solution('5 3') == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == '8'\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '8'\nassert solution('5 3') == '20'\nassert solution('4 2') == '16'\nassert solution('3 3') == '18'\nassert solution('1 5') == '1'\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6\\n\"\n    \"1 2 0 2 0\\n\"\n    \"2 4\"\n    ) == \"8\"\n\nassert solution(\n    \"5 3\\n\"\n    \"4 2\\n\"\n    \"2 5\"\n    ) == \"20\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == \"3 3 1\"\nassert solution('6 8') == \"3 4 1\"\nassert solution('5 5') == \"3 4 1\"\nassert solution('6 6') == \"3 3 1\"\n\n\n>>> solution('10 10')\n-1\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 8\") == \"3 4 1\"\nassert solution(\"5 5\") == \"3 3 1\"\nassert solution(\"5 5\") == \"3 4 1\""
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 8\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"5 5\") == \"2\""
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\n''') == '3', \"example\"\n\nassert solution('''5 5\n.*...\n***..\n.*...\n.*...\n.....\n\n''') == '3', \"example\"\n\nassert solution('''5 5\n.*...\n***..\n.*...\n.*...\n.....\n\n''') == '-1', \"example\"\n\nassert solution('''10 10\n*.....\n*.....\n*.....\n*.....\n*.....\n*.....\n*.....\n*.....\n*.....\n*.....\n*.....\n\n''') == '9', \"example\"\n\nassert solution('''3 3\n*.*\n***\n.*\n\n''') == '-1', \"example\""
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '-1'\nassert solution('3 3') == '2 2 1'"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 8\n***.*\n.***.\n*.*.*\n.*.***\n.*.*.\n*.*.*.\n''') == '2'\n\nassert solution('''\n5 5\n.**.\n*.*.\n.***\n.*.*.\n.***\n''') == '3'\n\nassert solution('''\n5 5\n*.*.\n.***\n*.*.\n.***\n.*.*.\n''') == '-1'\n\nassert solution('''\n3 3\n*.*.\n*.*.\n*.*.\n''') == '-1'"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"6 8\"\n) == \"3 4 1\"\n\nassert solution(\n    \"5 5\"\n) == \"3 3 1\"\n\nassert solution(\n    \"3 3\"\n) == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == \"3 4 1\"\nassert solution('6 8') == \"3 4 1\""
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n.*.\\n.*.\\n.*.\\n.*.') == '2 2 1'\nprint(solution('5 5\\n.*.\\n.*.\\n.*.\\n.*.'))\nassert solution('6 8\\n***.*\\n*.*.*\\n*.*.*\\n*.*.*\\n**.*.\\n*.*.*\\n***.') == '3 4 1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3 3\n    *.*\n   .*.\n    *.*\n''') == '2'\n\nassert solution('''\n    5 5\n   .*.\n   .*.\n   .*.\n   .*.\n   .*.\n''') == '3'\n\nassert solution('''\n    7 7\n    *.*.\n   .*.*\n   .*.*\n   .*.*\n    *.*.*\n   .*.*.\n    *.*.*\n''') == '3'\n\nassert solution('''\n    5 5\n    *.*\n    *.*\n    *.*\n    *.*\n    *.*\n''') == '3'\n\nassert solution('''\n    5 5\n    ***\n    ***\n    ***\n    ***\n    ***\n''') == '-1'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"10\") == \"Yes\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('575') == 'Yes'\nassert solution('435') == 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('575') == 'Yes'\nassert solution('123') == 'No'\n\nsolution('')\n'''\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"Yes\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('575') == 'Yes'\nassert solution('123555') == 'Yes'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"567\") == \"Yes\"\nassert solution(\"125\") == \"No\"\nassert solution(\"575\") == \"Yes\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Alice'\nassert solution('4 5') == 'Bob'\nassert solution('8 6') == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == 'Alice'\nassert solution('10 5') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'Alice'\nassert solution('5 7') == 'Bob'\nassert solution('8 6') == 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('12 4') == 'Bob'\nassert solution('7 5') == 'Draw'\n\n----------------------------------------------------------------------\n\nHow can I solve this problem?  \n1. Create 2 lists: one with numbers from 1 to 13, and one with numbers 1 to 13.\n2. Create a function to see which number is stronger and which is stronger.\n3. Create a function to compare the values.\n4. Create a function to print the winner.\n5. Main body.\n\nSolution\n\nimport sys"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 5\") == \"Alice\"\nassert solution(\"10 10\") == \"Alice\"\nassert solution(\"8 7\") == \"Bob\"\nassert solution(\"12 12\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 7') == 'Alice'\nassert solution('5 6') == 'Bob'\nassert solution('6 9') == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 2\") == \"Alice\"\nassert solution(\"8 6\") == \"Bob\"\nassert solution(\"8 7\") == \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('7 8') == 'Bob'\nassert solution('9 9') == 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('4 3') == 'Bob'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '', 'Should return an empty string!'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy', 'Should return the sentence after conversion!'\nassert solution('', '') == '', 'Should return an empty string!'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"cool,b,z\") == \"cool z b\"\nassert solution(\"w,e,r\") == \"w er\"\nassert solution(\"q,t,y\") == \"q ty\"\nassert solution(\"u,h,i\") == \"u hi\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"hello,world,python\") == \"hello world python\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n'''"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"bunny,cat,loves,the,bunny\") == \"bunny cat loves the bunny\"\nprint(solution(input()))"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy,josh') == 'happy newyear enjoy josh'\nassert solution('happy,newyear,enjoy,josh,jake,janeway') == 'happy newyear enjoy josh jake janeway'\nassert solution('happy,newyear,enjoy,josh,jake,janeway,jason') == 'happy newyear enjoy josh jake janeway jason'"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"2\"\nassert solution(\"16\") == \"2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2\\n1\\n'\nassert solution('7 3') == '6\\n5\\n'\nassert solution('7 7') == '6\\n6\\n'\nassert solution('2 2') == '1\\n1\\n'\nassert solution('3 3') == '2\\n1\\n'\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2 1\\n1 2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2 1'\nassert solution('1 1') == '1 1'"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"3 3\") == \"3 2 2\"\nassert solution(\"3 3\") == \"1 2 2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2 1\"\nassert solution(\"1 1\") == \"1 2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2 1'\nassert solution('1 2') == '1 1'\nassert solution('5 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2 1\"\nassert solution(\"3 3\") == \"1 1 1\""
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '2 1'\nassert solution('10 10') == '0 0'\nassert solution('15 15') == '0 1'\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"1\"\n\n\"\"\"\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(__file__))"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '14'\nassert solution('3') == '24'\nassert solution('4') == '16'\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(5) == 14\nassert solution(4) == 10\nassert solution(6) == 16\nassert solution(9) == 25\nassert solution(2) == 14"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"28\"\nassert solution(\"6\") == \"54\""
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '14'"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"a\") == \"a\"\nassert solution(\"-1\") == \"-1\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '14'\nassert solution('1') == '1'\n\n'''\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '14'\nassert solution('3') == '27'\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '14'"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"You forgot to write code!\"\nassert solution(\"1\") == \"1\", \"You forgot to write code!\"\nassert solution(\"1\\n\") == \"1\", \"You forgot to write code!\"\nassert solution(\"1\\n1\") == \"2\", \"You forgot to write code!\"\nassert solution(\"1\\n1\\n\") == \"3\", \"You forgot to write code!\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '16'\nassert solution('5') == '25'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"Yes\"\nassert solution(\"5 6\") == \"No\"\nassert solution(\"8 8\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == 'Yes'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2\\n.#\\n.#.\\n#.\\n.#') == 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n.#.\\n.#.\") == \"Yes\"\nassert solution(\"5 5\\n#..\\n###\\n###\\n###\") == \"No\"\nassert solution(\"5 5\\n#..\\n###\\n###\\n#.#\") == \"Yes\"\nassert solution(\"5 5\\n##.#\\n###\\n###\\n###\") == \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == 'Yes'\nassert solution('4 4') == 'Yes'\nassert solution('5 5') == 'No'\nassert solution('4 5') == 'No'\nassert solution('5 5') == 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n\") == \"Yes\"\n\nassert solution(\"5 5\\n#.#.\\n#.##\\n##.#\\n##.##\\n##.##\\n\") == \"No\"\n\nassert solution(\"1\\n#\") == \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"Yes\"\nassert solution(\"3 4\") == \"No\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('3 6 9') == '48'\nassert solution('3 8 2') == '6'\nassert solution('2 2 2') == '2'\nassert solution('3 6 8') == '17'\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 5 1\") == \"4\"\nassert solution(\"1 4 9\") == \"10\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"10 12 -1\") == \"35\"\nassert solution(\"2 2 2\") == \"2\""
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 5 2\") == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5 2\") == \"53\"\nassert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 2 5 2\") == \"53\"\nassert solution(\"2 3 4\") == \"11\"\nassert solution(\"1 1 1 1\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 2') == '53', \"Wrong answer\"\nassert solution('5 1 2') == '10', \"Wrong answer\"\nassert solution('5 1 2') == '10', \"Wrong answer\"\nassert solution('4 3 2') == '10', \"Wrong answer\""
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 5 2\n''') == '53'\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"232\"\nassert solution(\"2 5 3 4 1 6 7 8 9 10\") == \"345\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"232\"\nassert solution(\"5 5 2 2 2 2 2\") == \"0\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\\n\") == \"1\"\nassert solution(\"3 4 5\\n\") == \"15\"\nassert solution(\"4 1 5\\n\") == \"8\"\nassert solution(\"5 6 1\\n\") == \"11\"\nassert solution(\"3 2 1\\n\") == \"11\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('3 7 10') == '59'\nassert solution('3 4 1') == '3'\nassert solution('2 6 7') == '5'\nassert solution('5 8 7') == '8'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nassert solution(\"10\\n15000\\n10050\\n17500\\n10000\\n9950\\n7005\\n3505\\n3000\") == \"35009\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"15950\"\nassert solution(\"6\") == \"10400\""
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '15950'"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '15950'\nassert solution('5') == '15950'\nassert solution('10') == '15950'\nassert solution('15') == '20800'\nassert solution('20') == '20800'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '15950'\nassert solution('4') == '15710'\nassert solution('5') == '15980'\n\nimport sys\nimport io\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\nassert solution('2\\n4980\\n6980\\n') == '1507'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '15950'"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"15950\"\nassert solution(\"10\") == \"15950\"\nassert solution(\"10\") == \"15950\"\nassert solution(\"1\") == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950.0'\nassert solution('1\\n100\\n20\\n') == '220.0'\nassert solution('1\\n10\\n20\\n') == '21.0'\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\\n\") == \"215\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"0\"\nassert solution(\"6\\n7\\n8\\n9\\n10\\n\") == \"0\"\nassert solution(\"12\\n13\\n14\\n15\\n16\\n\") == \"0\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_file) == '215'\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('29') == '215'\nassert solution('20') == '50'\nassert solution('7') == '60'\nassert solution('35') == '57'\nassert solution('120') == '180'\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('29') == '215'\nassert solution('20') == '50'\nassert solution('7') == '60'\nassert solution('35') == '57'\nassert solution('120') == '180'\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"215\"\nassert solution(\"20\") == \"50\"\nassert solution(\"7\") == \"60\"\nassert solution(\"35\") == \"57\"\nassert solution(\"120\") == \"180\"\n\"\"\"\n\n\"\"\"\n\ud480\uc774)\n1. \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uc744 \uad6c\ud558\uace0, \uc2dc\uc791\uacfc \ub05d\uc73c\ub85c \ub098\ub220\uc11c \ub2e4\uc2dc \ub3cc\ub824\ubcf4\uba74\uc11c \uc815\uc758\ud55c\ub2e4.\n2. \ub2e4\ub9cc \uc2dc\uac04\uc774 \ub108\ubb34 \ub9ce\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uac04 \ucd5c\uc18c\ud654\ub97c \uc704\ud574\uc11c\n   \ub450 \uacfc\uc815\uc744 \ud558\ub098\uc529 \uc218\ud589\ud558\uba74\uc11c \uc6b0\uc120\uc21c\uc704\ub97c \uc815\uc758\ud55c\ub2e4.\n   1\ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \ub098\ub220\uc11c \uc815\uc758\ud55c\ub2e4.\n   2. \uc2dc\uc791 \uc2dc\uac04 + \uc644\ub8cc \uc2dc\uac04\n   3. \uac01 \uc2dc\uac04\uc758 \uc2dc\uc791 \uc2dc\uac04 + \uc6b0\uc120\uc21c\uc704\uac00 \ub418\ub294 \uc2dc\uac04\n   4. \uc6b0\uc120\uc21c\uc704\uac00 \ub418\ub294 \uc2dc\uac04 + \uc2dc\uc791 \uc2dc\uac04\n3. \uc21c\uc11c\ub294 \ud56d\uc0c1 \uc99d\uac00\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4.\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '215'\nassert solution('20') == '60'\nassert solution('7') == '120'\n\n'''\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('19\\n21\\n27\\n30\\n33\\n') == '215'\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\""
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20\\n7\\n35\\n120') == '215'"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('29') == '215'\nassert solution('20') == '50'\nassert solution('7') == '60'\nassert solution('35') == '57'\nassert solution('120') == '180'"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n10 30''') == '7.5'\nassert solution('''3\n10 20 30''') == '7.5'\n''')\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10 20 30\") == \"7.5\"\nassert solution(\"2\\n10 20 30\") == \"7.5\"\nassert solution(\"3\\n10 20 30\") == \"7.5\"\nassert solution(\"4\\n10 20 30\") == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.5\"\nassert solution(\"10\") == \"0.1\"\nassert solution(\"30\") == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n10 30\n\n''') == '7.5'\nassert solution('''\n5\n5 1 5 3 5\n\n''') == '1.0'"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('2\\n10 10') == '7.5'\nassert solution('2\\n10 10') == '7.5'\nassert solution('2\\n10 100') == '7.5'\nassert solution('2\\n10 1000') == '7.5'\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('2\\n100 200') == '7.5'\nprint(solution(input()))"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 30') == '7.5'\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('2\\n10 30') == '7.50001'\nassert solution('2\\n10 30') == '7.49999'\nassert solution('2\\n10 30') == '7.49999'\nassert solution('2\\n10 30') == '7.49999'\n\n\"\"\")\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '7.5'\nassert solution('1') == '7.0'\nassert solution('3') == '1.3333333333333'\nassert solution('4') == '1.25'\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10\\n\") == \"7.5\"\nassert solution(\"2\\n10 30\\n\") == \"7.5\"\nassert solution(\"2\\n-10 -30\\n\") == \"7.5\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12\n''') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '2'\nassert solution('10') == '1'\nassert solution('10') == '1'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"7 3\") == \"4\""
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"1 2\") == \"0\"\n\"\"\"\nfrom math import inf\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"5\", \"3\", \"10\", \"15\", \"11\", \"14\", \"12\"]) == \"2\"\nassert solution([\"1\", \"10\", \"15\"]) == \"0\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"10 1\") == \"4\"\nassert solution(\"15 1\") == \"4\"\nassert solution(\"15 11\") == \"6\""
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n4\n4\n4\n4''') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '2'\nassert solution('6 3') == '3'\nassert solution('1 5') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\nassert solution('4 1\\n2\\n4\\n') == '1'\nassert solution('4 2\\n2\\n4\\n') == '0'\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\", \"Wrong result\"\nassert solution(\"b\") == \"b\", \"Wrong result\"\nassert solution(\"B\") == \"B\", \"Wrong result\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('Z') == 'A'"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"A\", \"Wrong!\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('B') == 'A', 'incorrect result'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"A\", \"Test 1 failed\"\nassert solution(\"B\") == \"a\", \"Test 2 failed\"\nassert solution(\"C\") == \"c\", \"Test 3 failed\"\n\n'''"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(None) == None, \"test 1 failed\"\nassert solution(\"A\") == \"A\", \"test 2 failed\"\nassert solution(\"a\") == \"a\", \"test 3 failed\"\nassert solution(\"a\") == \"a\", \"test 4 failed\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('A') == 'A'\nassert solution('b') == 'b'"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('B') == 'A', 'Should be A.'\nassert solution('a') == 'a', 'Should be a.'\nassert solution('z') == 'Z', 'Should be Z.'\nassert solution('.') == '.', 'Should be.'\nassert solution('aA') == 'A', 'Should be A.'\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n''') == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\nassert solution('10 10') == '210'\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 5\") == \"1\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"6\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '6'"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('19') == 'YYYY'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1905\") == \"YYMM\", 'Should be YYMM'\nassert solution(\"19\") == \"NA\", 'Should be NA'\nassert solution(\"11\") == \"NA\", 'Should be NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1705') == 'MMYY'\nassert solution('1906') == 'AMBIGUOUS'\nassert solution('0617') == 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\", \"Expected YYMM as a valid date\"\nassert solution(\"1705\") == \"NA\", \"Expected NA as a valid date\"\nassert solution(\"0101\") == \"YYMM\", \"Expected YYMM as a valid date\"\nassert solution(\"0104\") == \"YYYY\", \"Expected YYYY as a valid date\"\nassert solution(\"1105\") == \"AMBIGUOUS\", \"Expected AMBIGUOUS as a valid date\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0123456789') == 'NA', 'Input is not valid'\nassert solution('012345') == 'AMBIGUOUS', 'Input is not valid'\nassert solution('12345') == 'AMBIGUOUS', 'Input is not valid'\nassert solution('12') == 'AMBIGUOUS', 'Input is not valid'\nassert solution('01') == 'AMBIGUOUS', 'Input is not valid'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\", \"1905\"\nassert solution(\"01\") == \"YYMM\", \"01\"\nassert solution(\"012\") == \"YYMM\", \"12\"\nassert solution(\"01\") == \"YYYY\", \"01\"\nassert solution(\"12\") == \"MMYY\", \"12\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'NA'\nassert solution('12') == 'NA'\nassert solution('1905') == 'YYMM'\nassert solution('1501') == 'YYMM'\nassert solution('1805') == 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"05\") == \"YYMM\"\nassert solution(\"0519\") == \"YYMM\"\nassert solution(\"01\") == \"YYMM\"\nassert solution(\"0105\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"8\"\nassert solution(\"15\") == \"8\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n''') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n''') == '2\nassert solution('''4\n''') == '0\n''')\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '5'\nassert solution('4') == '0'\nassert solution('100') == '20'\nassert solution('100') == '20'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '0'\n\n------Hints------\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"12\") == 4\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\nassert solution(\"9 8\") == \"22\"\nassert solution(\"11 9\") == \"21\"\nassert solution(\"7 7\") == \"24\"\nassert solution(\"0 0\") == \"24\""
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '21'\nassert solution('4 5') == '20'\nassert solution('3 0') == '9'\nassert solution('3 6') == '19'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"9 12\n\"\"\") == \"21\"\nassert solution(\"\"\"3 2\n\"\"\") == \"6\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9 12') == '21'\nassert solution('9 10') == '9'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '21'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '21'"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9 12') == '21'\nassert solution('0 23') == '23'\nassert solution('9 2') == '13'\nassert solution('9 -1') == '23'\nassert solution('9 -20') == '23'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9 12') == '21'\nassert solution('9 10') == '20'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4') == '21'\nassert solution('6 17') == '21'\nassert solution('10 11') == '14'\nassert solution('10 10') == '20'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9 12') == '21'\nassert solution('12 30') == '12'"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('3 10') == '2'\nassert solution('1 999999999999999999999999999999') == '40000'\nassert solution('1 1') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n1 2''') == '2'\nassert solution('''10 10\n1 5''') == '5'\nassert solution('''10 10\n2 2''') == '1'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2\n1\n''') == '1'\nassert solution('''1 4\n0\n''') == '4'\nassert solution('''1 4\n0\n''') == '4'\nassert solution('''2 4\n1\n''') == '1'\nassert solution('''2 4\n1\n''') == '4'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('2 2919') == '3719'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"5 1\") == \"5\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2919\\n') == '3719', 'TEST 1: FAILED'\nassert solution('2 2918\\n') == '2918', 'TEST 2: FAILED'\nassert solution('3 2919\\n') == '2919', 'TEST 3: FAILED'\nassert solution('3 2918\\n') == '2918', 'TEST 4: FAILED'\nassert solution('10 2918\\n') == '2918', 'TEST 5: FAILED'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(Takahashi) == str(3719)\nprint(solution(Takahashi))"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 10\") == \"20\"\nassert solution(\"10 10\") == \"10\""
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(TEST_INPUT_00) == \"3719\"\nassert solution(TEST_INPUT_01) == \"3719\"\nassert solution(TEST_INPUT_02) == \"3719\"\nassert solution(TEST_INPUT_03) == \"3719\"\nassert solution(TEST_INPUT_04) == \"3719\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '4'\nassert solution(input(\"\")) == '0'\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"11 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4') == '1'\nassert solution('12 4') == '2'\nassert solution('123456 4') == '5'\nassert solution('1235 7') == '4'"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('10') == '2'\nassert solution('100') == '1'\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11 2\") == \"4\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 2') == '4'\nassert solution('12 2') == '2'\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == \"4\"\nassert solution(\"11 100\") == \"7\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11 2\") == \"4\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"1\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11 2') == \"4\"\nassert solution('-1 2') == \"1\"\nassert solution('0 2') == \"0\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 2') == '4'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"5\""
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n''') == '3'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\""
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('20') == '4'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '3\\n'\n\n--Submissions--\n21:35:21\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '3'\nassert solution('7') == '4'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"5\") == \"3\"\n\n\"\"\"\n\nfrom math import sqrt\n\nN = int(stdin.readline())\n\nprint(int(sqrt(2 * N) - 1))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '3'\nassert solution('2') == '2'\nassert solution('5') == '3'\nassert solution('10') == '6'\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == 'Yay!'\n\n'''\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n''') == 'Yay!'\nassert solution('''\n10 5\n''') == 'Yay!'\n\n''')\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"3 3\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'Yay!'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"2 4\") == \"Yay!\"\n\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n\") == \"Yay!\"\n\nassert solution(\"1 2\\n\") == \"Yay!\"\n\nassert solution(\"2 4\\n\") == \"Yay!\"\n\nassert solution(\"4 1\\n\") == \"Yay!\"\n\nassert solution(\"6 5\\n\") == \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == 'Yay!'\nassert solution('1 2\\n') == 'Yay!'\nassert solution('2 1\\n') == 'Yay!'\nassert solution('2 2\\n') == 'Yay!'\nassert solution('3 1\\n') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'Yay!'\nassert solution('2 4') == 'Yay!'\nassert solution('3 4') == 'Yay!'\n'''\n\na, b = map(int, input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Yay!\"\nassert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 6\") == \":(\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == 'Yay!'\nassert solution('10 3') == 'Yay!'\nassert solution('10 4') == 'No!'\n'''"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1234567876''') == '34'\nassert solution('''722''') == '2'\nassert solution('''76''') == '1'\nassert solution('''7''') == '2'\nassert solution('''777''') == '2'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1234567876\") == \"34\""
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"12345678910\") == \"0\"\nassert solution(\"12345678901\") == \"9999\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1234567876') == '34'\nassert solution('121234') == '7'\nassert solution('12345678910') == '1'\nassert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"12345678\") == \"9678\"\nassert solution(\"1234567869\") == \"967869\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1234567876') == '34'"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\nassert solution('456789') == '9'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 12 6\n\n2 9\n\n7\n\n6\n\n5 4\n\n2 1\n\n4 3\n\n4''') == \"5 3\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 12, 6]) == '5 3'\nassert solution([2, 9]) == '1 7'\nassert solution([7]) == '12 13'\nassert solution([6]) == '1 7'"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"5 3\""
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 12 6\n\n''') == '5 3'\n\nassert solution('''\n2\n2 9\n\n''') == '1 7'\n\nassert solution('''\n7\n2 1000000000 4 6 8 4 2\n\n''') == '2999999987 2'\n\nassert solution('''\n6\n13 52 0 13 26 52\n\n''') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3,12,6]) == \"5 3\"\nassert solution([2,9]) == \"1 7\"\nassert solution([7]) == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n3 12 6\n\n2\n2 9\n\n7\n2 1000000000 4 6 8 4 2\n\n6\n13 52 0 13 26 52\n\n\"\"\"\n) == \"5 3\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"5 3\"\nassert solution(\"2\") == \"1 7\"\nassert solution(\"7\") == \"12 13\"\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7 3\"\nassert solution(\"3\") == \"5 3\"\nassert solution(\"2\") == \"1 7\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1 7\"\nassert solution(\"7\") == \"2999999987 2\"\nassert solution(\"6\") == \"12 13\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 1 4 1\n''') == '3'\nassert solution('''\n4\n3 1 4 1\n''') == '3'\nassert solution('''\n5\n1 1 1 2 2\n''') == '2'\n\nimport io\nimport unittest\nimport math\nfrom collections import Counter\nfrom functools import reduce\nfrom math import factorial\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1\n''') == '1'\nassert solution('''5\n1 1 1 2 2\n''') == '2'"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 1 4 1\n''') == '3'\nassert solution('''5\n1 1 1 2 2\n''') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n3 1 4 1\n2 2 2\n3 3\n''') == '2'\nassert solution('''3\n3 1 4 1\n2 2 2\n3 3\n''') == '1'\nassert solution('''5\n1 1 1 2 2\n2 2 2\n3 3\n4 4\n5 5\n''') == '2'"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '1'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n3 1 4 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 1 1 2 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7\n4 1 4 2 2 1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 1 1 2 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7\n3 1 4 1 2 3\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 1 4 1\n''') == '3'\nassert solution('''\n5\n1 1 1 2 2\n''') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n3 1 4 1\\n') == '3'\nassert solution('4\\n1 1 1 2 2\\n') == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"2 0\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 2\n2 3\n''') == '2'\nassert solution('''2 0\n''') == '1'\nassert solution('''3 2\n1 3\n2 3\n''') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\""
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0') == '1'\nassert solution('3 2') == '2'\nassert solution('4 2') == '3'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"3 2\") == \"4 2\"\nassert solution(\"2 0\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n1 2\n2 3\n\n''') == \"2\"\n\nassert solution('''\n3 2\n1 3\n2 3\n\n''') == \"1\"\n\nassert solution('''\n3 2\n1 3\n2 3\n\n''') == \"2\"\n\nassert solution('''\n2 0\n\n''') == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0') == '1'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"4 2\"\nassert solution(input_small) == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0') == '1'\nassert solution('3 2') == '2'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"11\"\nassert solution(\"7 2\") == \"4\"\nassert solution(\"13 1\") == \"3\""
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == '11'\nassert solution('7 2') == '4'"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '11'\nassert solution('7 2') == '4'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 1\\n\"\n    \"1 2 3 4 5\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"3 5\\n\"\n) == \"11\"\n\nassert solution(\n    \"7 2\\n\"\n    \"2 1 2 1 2 1 1\\n\"\n    \"6 4\\n\"\n    \"1 5\\n\"\n    \"3 1\\n\"\n    \"2 3\\n\"\n    \"7 5\\n\"\n    \"7 4\\n\"\n) == \"4\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '11'\nassert solution('7 2') == '4'\n\nfrom typing import List, Set, Dict, Optional\n\nclass Graph:\n    def __init__(self, adjacency_list: Dict[int, List[int]]) -> None:\n        self.adj_list = adjacency_list\n        self.vertices_number = len(adjacency_list)\n        self.adjacency_matrix = [[0] * self.vertices_number for _ in range(self.vertices_number)]\n        for v1, v2 in adjacency_list.items():\n            for v in v2:\n                self.adjacency_matrix[v1][v] = 1\n                self.adjacency_matrix[v][v1] = 1\n    def is_cyclic(self) -> bool:\n        visited = set()\n        for v in range(self.vertices_number):\n            if v in visited:\n                continue\n            if self.dfs(v, visited) == True:\n                return True\n        return False\n    def dfs(self, v: int, visited: Set[int]) -> bool:\n        if v in visited:\n            return False\n        visited.add(v)\n        for i in range(self.vertices_number):\n            if self.adjacency_matrix[v][i] == 1 and i not in visited:\n                return self.dfs(i, visited)\n        return True\n\n\nn, k = map(int, input().split())\ngraph = Graph({v:[] for v in range(n)})\n\nfor _ in range(n - 1):\n    u, v = map(int, input().split())\n    u = u - 1\n    v = v - 1\n    graph.adj_list[u].append(v)\n    graph.adj_list[v].append(u)\n\nimport sys\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"11\"\nassert solution(\"7 2\") == \"4\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"11\"\nassert solution(\"7 2\") == \"4\"\nassert solution(\"6 4\") == \"6\"\nassert solution(\"1 5\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '1 1'\nassert solution(input()) == '1 9'\nassert solution(input()) == '2 2'\nassert solution(input()) == '2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n', solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''')\nassert solution('''2 3\n5 10000000000\n5 6 9999999999\n''') == '1 5\\n2 1\\n2 9999999994\\n', solution('''2 3\n5 10000000000\n5 6 9999999999\n''')\nassert solution('''10\n10 9999999999\n9999999999999 999999999999999999\n99999999999999999 9999999999999999999999999999999999999999\n99999999999999999 999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n99999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n', solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''')\nassert solution('''2 3\n5 10000000000\n5 6 9999999999\n''') == '1 5\\n2 1\\n2 9999999994\\n', solution('''2 3\n5 10000000000\n5 6 9999999999\n''')"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 5\"\nassert solution(\"3 6\") == \"1 1\"\nassert solution(\"2 4\") == \"2 2\""
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n6\n10 15 12\n1 9 12 23 26 37\n''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\nassert solution('''2 3\n5 10000000000\n5 6 9999999999\n''') == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\nassert solution(\"2 3\") == \"1 5\\n2 1\\n2 9999999994\""
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 5\\n2 1\\n2 9999999994'\nassert solution('3 6') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 6') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3') == '1 5\\n2 1\\n2 9999999994'\n\n'''"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 6 5 4\n1 2 3''') == '1 2 3'\nassert solution('''40 40 40 60\n1 2 3''') == '1 100 100'\nassert solution('''201 101 101 200\n1 100 100''') == '1 200 100'\nprint('Solution:')\nsolution(input())"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nprint(solution(input()))"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6 5 4') == '2 1 3'\nassert solution('20 20 20') == '1 100 100'\nassert solution('40 40 40 60') == '20 20 20'\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n    10 10 10\n    '''\n    ) == '10 10 10'\n\nassert solution(\n    '''\n    1 1 1\n    '''\n    ) == '1 1 1'\n\nassert solution(\n    '''\n    1 1 1\n    '''\n    ) == '1 1 1'\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('1 100 100') == '1 100 100'\nassert solution('201 101 101 200') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-1\") == \"-1\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('12') == '1'\nassert solution('123') == '1'\nassert solution('1234') == '2'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n9\nRBGRRBRGG\n''') == '2'\nassert solution('''\n8\nBBBGBRRR\n''') == '2'\nassert solution('''\n13\nBBRRRRGGGGGRR\n''') == '6'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == '2'\nassert solution('8') == '2'\nassert solution('13') == '6'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9') == '2'\nassert solution('8') == '2'\nassert solution('13') == '6'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"RRR\") == \"1\"\nassert solution(\"R\") == \"1\"\nassert solution(\"RRG\") == \"2\"\nassert solution(\"RRR\") == \"2\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '5'\nassert solution('7') == '4'\nassert solution('8') == '3'\nassert solution('9') == '2'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == 'BBBGBRRR'\nassert solution('10') == 'BBBGBRBR'\nassert solution('20') == 'BBBBBBBBBBBBBBB'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"BGRBGBGBGBGR\"\nassert solution(\"4\") == \"BGRBGBGBGBGR\"\nassert solution(\"2\") == \"BGRBGBGBGBGR\"\nassert solution(\"7\") == \"BGRBGBGBGBGR\""
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"RRRBBBBB\"\nassert solution(\"4\") == \"BGRBGGB\"\nassert solution(\"5\") == \"BGBGBRRR\"\nassert solution(\"6\") == \"BGRGBBBRR\"\nassert solution(\"7\") == \"BGRGBBBBB\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12') == 'BBBGBRRR'\nassert solution('10') == 'BBBGBRRR'\nassert solution('1') == 'BBBGBRRR'\nassert solution('1212') == 'BBBGBRRR'"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 1 5 2\n''') == '4'\n\nassert solution('''\n4\n10 9 8 7\n''') == '6'\n\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == '6'\n\nassert solution('''\n5\n10 9 8 7 6\n''') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\\n\") == \"4\"\nassert solution(\"6\\n1 3 5 2 4 6\\n\") == \"2\"\nassert solution(\"4\\n10 9 8 7\\n\") == \"1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\\n\") == \"6\"\nassert solution(\"8\\n7 9 8 7\\n\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n\nassert solution(\"\"\"\n1 3 5 2 4 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6 7 8 3 4 5 9 10 11\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n9\n6 7 8 3 4 5 9 10 11\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n9\n10 9 8 7 6 5 4 3 2 1\n\"\"\") == \"6\""
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\\n1, 2\"\nassert solution() == \"2\\n3, 4\"\nassert solution() == \"1\\n1\"\nassert solution() == \"1\\n2\"\nassert solution() == \"2\\n1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '4'\nassert solution('6') == '2'\nassert solution('4') == '1'\nassert solution('9') == '6'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 4 7 5 6 8''') == '4'\nassert solution('''6\n1 3 5 2 4 6''') == '2'\nassert solution('''4\n10 9 8 7''') == '1'\nassert solution('''9\n6 7 8 3 4 5 9 10 11''') == '6'\nassert solution('''10\n10 9 8 7''') == '2'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 5 2 4 6') == '4'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('4 9 8 7 6 5 3 2 1') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n3 3 4 7 5 6 8\n''') == \"4\"\nassert solution('''6\n1 3 5 2 4 6\n''') == \"2\"\nassert solution('''4\n10 9 8 7\n''') == \"1\"\nassert solution('''9\n6 7 8 3 4 5 9 10 11\n''') == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3 3 4 7 5 6 8\\n') == '4'\nassert solution('6\\n1 3 5 2 4 6\\n') == '2'\nassert solution('9\\n6 7 8 3 4 5 9 10 11\\n') == '6'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 1') == 'Yes'\nassert solution('3 3') == 'Yes'\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == 'Yes'\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\n1 2\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\n2 4\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\n1 3\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\n2 1\n\"\"\") == \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"3 3\") == \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('3 1') == 'No'\n\"\"\"\nimport math"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('5 5') == 'Yes'\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 1\"\"\") == \"Yes\"\nassert solution(\"\"\"3 2\"\"\") == \"No\"\nassert solution(\"\"\"2 1\"\"\") == \"Yes\"\nassert solution(\"\"\"1 1\"\"\") == \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('3 4') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 4') == '4'\nassert solution('3 2') == '2'\nassert solution('4 5') == '5'\nassert solution('8 3') == '3'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 50\") == \"110\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('81 58') == '110'\nassert solution('69 53') == '104'\nassert solution('69 54') == '102'\nassert solution('69 55') == '101'\nassert solution('69 56') == '100'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"81 58\\n\") == \"110\"\nassert solution(\"1 1\\n\") == \"2\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"16\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5') == '110'\nassert solution('90 30') == '110'\nassert solution('123 456') == '135'\nassert solution('12 9') == '135'\nassert solution('18 6') == '72'"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('80 58') == '110'\nassert solution('80 89') == '120'\nassert solution('80 11') == '89'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''81 58\n90 24\n\n''') == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"33\"\nassert solution(\"5 8\") == \"100\"\nassert solution(\"6 7\") == \"130\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('81 58') == '110'\nassert solution('4 31') == '32'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"8\"\nassert solution(\"6\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == \"8\"\n'''\n\nimport math\n\nN = int(input())\n\nprint(math.factorial(N) / (math.factorial(N-3) * math.factorial(3)))"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''2\n''') == '8'\nassert solution('''3\n''') == '27'\n'''\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '8'\n\n\"\"\"\n\nfrom itertools import permutations\nimport sys\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '8'\n\"\"\"\nn = int(input())\nnums = range(1, n+1)\nprint(len([str(num) for num in nums if str(num).isdigit()]))\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"8\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(10) == '8'\nassert solution(8) == '8'\nassert solution(2) == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"15\"\nassert solution(\"4\") == \"26\"\n\"\"\"\n\nimport math\n\nn = int(input())\n\nans = math.factorial(n)\nprint(ans)"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\\n1\\n\") == \"NO\"\nassert solution(\"7\\n5\\n2\\n\") == \"YES\"\nassert solution(\"3\\n7\\n1\\n\") == \"YES\"\nassert solution(\"1\\n5\\n4\\n\") == \"NO\"\nassert solution(\"1\\n5\\n4\\n\") == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1\") == \"YES\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n\n[1]\n=======================================\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n---  ---  ---  ---  ---  ---  ---\n=======================================\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('0') == 'NO'\n\n'''\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'NO'\nassert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('7') == 'NO'\nassert solution('14') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'YES'\nassert solution('9') == 'NO'\nassert solution('3') == 'NO'\n\nThe growth of a five-year-old child will be celebrated.\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"0\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'YES'\nassert solution('2') == 'NO'"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"999\") == \"ABC\""
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n3\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == \"ABC\", \"Wrong solution\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"999\") == \"ABC\"\nassert solution(\"0\") == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABC001') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('999') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('999') == 'ABC'\nassert solution('1') == 'ABC'\nassert solution('2') == 'DEF'\nassert solution('3') == 'GHI'\nassert solution('4') == 'JKL'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('999') == 'ABC'"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10') == ''\nassert solution('101') == ''\nassert solution('12') == ''\nassert solution('12') == ''\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('999') == 'ABC'"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"3\\n5\\n10\\n15\\n20\\n25\") == \"Nay!\""
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"8\") == \"Yay!\"\nassert solution(\"9\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('4\\n8\\n9\\n15') == 'Yay!'\nassert solution('8\\n9\\n15') == 'Yay!'\nassert solution('9\\n15') == 'Yay!'"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"3\") == \"Nay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"5\") == \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n4\n8\n9\n15\n''') == 'Yay!'\nassert solution('''\n1\n2\n4\n8\n9\n15\n''') == 'Nay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n2\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n3\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n4\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n6\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n5\\n9\\n15\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'Yay!'\nassert solution('2') == 'Yay!'\nassert solution('4') == 'Yay!'\nassert solution('8') == 'Yay!'\nassert solution('9') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n4\n8\n9\n15''') == \"Yay!\"\nassert solution('''1\n2\n3\n4\n8\n9\n15''') == \"Yay!\"\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n15''') == \"Yay!\"\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n15''') == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3200') == 'pink'\nassert solution('3200.01') == 'pink'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"3200p\") == \"pink\"\nassert solution(\"3200pink\") == \"pink\"\nassert solution(\"3200pink\") == \"pink\"\nassert solution(\"3200pink\") == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"1\") == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5', \"Wrong!\"\nassert solution('1') == '1', \"Wrong!\"\nassert solution('0') == '0', \"Wrong!\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3200') == 'pink'\nassert solution('4200') =='red'\nassert solution('6200') =='red'\nassert solution('9200') =='red'\nassert solution('4300') =='red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'pink'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'pink'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"50\") == \"red\"\nassert solution(\"34\") == \"red\"\nassert solution(\"99\") == \"red\"\nassert solution(\"144\") == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3200\") == \"pink\", \"Test 1 failed\"\nassert solution(\"3200\") == \"red\", \"Test 2 failed\"\nassert solution(\"3200\") == \"red\", \"Test 3 failed\"\nassert solution(\"3200\") == \"pink\", \"Test 4 failed\"\nassert solution(\"3200\") == \"pink\", \"Test 5 failed\"\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('R') == 'ABC'\nassert solution('1') == 'ARC'\nassert solution('2') == 'AGC'\nassert solution('-1') == 'ABC'\nassert solution('4') == 'ARC'\n\nsolution('R')\n\nsolution('1')\n\nsolution('2')\n\nsolution('-1')\n\nsolution('4')\n\n'''\nR = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1) == 'ABC'\nassert solution(2) == 'ARC'\nassert solution(3) == 'AGC'\nassert solution(4) == 'ARC'\nassert solution(5) == 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'ARC'\nassert solution('1199') == 'AGC'\nassert solution('11996') == 'ARC'\nassert solution('119985') == 'ARC'\nassert solution('119988') == 'ARC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1199') == 'ABC', \"Should be ABC.\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1199') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1199\") == \"ABC\"\nassert solution(\"1199\") == \"ARC\"\nassert solution(\"1199\") == \"AGC\"\nassert solution(\"1200\") == \"ABC\"\nassert solution(\"2800\") == \"ARC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1201') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1199') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1199\") == \"ABC\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"13\"\nassert solution(\"123\") == \"99\"\nassert solution(\"1312\") == \"1123\"\nassert solution(\"111\") == \"999\"\nassert solution(\"9121213121213\") == \"99121212131211\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '9'\nassert solution('99') == '1'\nassert solution('999') == '999'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('121') == '111', 'Error. Invalid input.'\nprint('Done.')\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12345') == '91234'\nassert solution('112') == '999'\nassert solution('111') == '9111'\nassert solution('1') == '9'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('119') == '991'\nassert solution('121') == '9'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"119\") == \"991\"\nprint(solution(input()))\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('119') == '991', solution('119')\nassert solution('11') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('119') == '991'\nassert solution('121') == '971'\nassert solution('120123') == '991123'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '9'\nassert solution('99') == '1'\nassert solution('999') == '11'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('119') == '991'\nassert solution('938') == '938'\nassert solution('1234') == '1342'\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'abac'\nassert solution(input()) == 'ac'\nassert solution(input()) == 'bcdaf'\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"abbaac\"\nassert solution(\"4\") == \"abac\"\nassert solution(\"5\") == \"bcdaf\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nabbaac\\nac') == 'abac'\nassert solution('5\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz\\nzzzzzzzzzz') == 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''aba\nac\nbcdaf''') == 'ac'\nassert solution('''aba\nac\nbcdaf''') == 'ac'\nassert solution('''aba\nac\nbcdaf''') == 'ac'\nassert solution('''aba\nac\nbcdaf''') == 'ac'\nassert solution('''aba\nac\nbcdaf''') == 'ac'\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"abac\"\nassert solution(\"2\") == \"ac\"\nassert solution(\"3\") == \"bcdaf\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\nabaac\nac\nbccddaaf\nzzzzzzzzzz\n''') == 'abac'\nassert solution('''4\nabaac\nac\nbccddaaf\nzzzzzzzzzz\n''') == 'abac'\nassert solution('''4\nabaac\nac\nbccddaaf\nzzzzzzzzzz\n''') == 'ac'\nassert solution('''4\nabaac\nac\nbccddaaf\nzzzzzzzzzz\n''') == 'ac'\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\naba\nac\nbcd\nzzz\n''') == \"ac\"\nassert solution('''\n1\nac\n''') == \"ac\"\nassert solution('''\n4\naca\nacb\ncab\nacb\n''') == \"aca\"\nassert solution('''\n3\nabc\naba\n''') == \"aba\"\nassert solution('''\n1\naba\n''') == \"aba\""
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nabbaac\\nac\\nbccddaaf\\nzzzzzzzzzz\") == \"abac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\naba\") == \"aba\"\nassert solution(\"2\\naba\") == \"aba\"\nassert solution(\"3\\naba\") == \"aba\"\nassert solution(\"4\\naba\") == \"aba\"\nassert solution(\"5\\naba\") == \"aba\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nabbaac\") == \"abac\"\nassert solution(\"4\\nac\") == \"ac\"\nassert solution(\"4\\nzzzzzzzzzz\") == \"zzzzzzzzzz\"\n\n'''\n\n'''\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n'''\n) == '2'\nassert solution(\n'''\n7\n10 4\n13 9\n100 13\n123 456\n92 46\n25 21\n'''\n) == '5'"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == \"1\"\nassert solution('1') == \"0\"\nassert solution('2') == \"2\"\nassert solution('5') == \"0\"\nassert solution('10') == \"3\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"10 4\") == '2'\nassert solution(\"100 13\") == '333'\nassert solution(\"123 456\") == '5'\nassert solution(\"92 46\") == '4'"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"333\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n10 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n10 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n10 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n10 4\n\"\"\") == \"333\"\nassert solution(\"\"\"\n5\n10 4\n\"\"\") == \"0\""
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('10 4') == '5'\nassert solution('13 9') == '5'\nassert solution('100 13') == '333'\nassert solution('123 456') == '0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\"\nassert solution(\"5\\n10 4\\n100 13\\n123 456\\n92 46\") == \"3\\n1\\n0\"\nassert solution(\"5\\n10 4\\n11 55\\n100 13\\n123 456\\n92 46\") == \"4\\n1\\n0\"\nassert solution(\"5\\n10 4\\n11 55\\n100 13\\n123 456\\n92 46\") == \"3\\n0\\n0\"\nassert solution(\"5\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4\\n10 4') == '5'\nassert solution('1\\n3\\n10 2') == '4'\nassert solution('1\\n3\\n10 3') == '0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n10 4\\n') == '2'\nassert solution('2\\n1 10\\n') == '5'\nassert solution('3\\n3 2\\n') == '3'\nassert solution('4\\n5 10\\n') == '333'\nassert solution('5\\n6 9\\n') == '0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 4''') == '2'\nassert solution('''13 9''') == '5'\nassert solution('''100 13''') == '333'\nassert solution('''123 456''') == '0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 4 1 2\") == \"2.666666666666667\"\nassert solution(\"2 2\\n3 2 1 2\") == \"1.0\"\nassert solution(\"4 4\\n1 1 2 2\") == \"1.0\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3.0'\nassert solution('8 5') == '3.4'\nassert solution('6 5') == '3.833333333333333'\nassert solution('1 3') == '1.0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2.666666666666667'\nassert solution('5 4') == '3.0'\n\nassert solution('10 5') == '3.0'\n\nassert solution('10 10') == '4.0'\n\nassert solution('10 50') == '3.0'"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2.666666666666667'\nassert round(solution(), 10) == 2.666666666666667\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n3\n1 2\n5\n''') == '2.0'\nassert solution('''3\n4\n3 4 1 2\n5\n''') == '2.5'\nassert solution('''4\n5\n3 4 1 2\n5\n''') == '1.0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 4 1 2\\n\") == \"2.666666666666667\""
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '2.0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '6.0'\nassert solution('6\\n2\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '7.5'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n') == '0.0'"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n3 4 1 2\n''') == '2.666666666666667'\nassert solution('''\n4 4\n2 5 2 5\n''') == '3.999999999999996'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n3 4 1 2\n\"\"\") == \"2.666666666666667\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\nassert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1 3') == 'YES'\nassert solution('3\\n1 2\\n4 2\\n5 2\\n1 3') == 'NO'\n\n'''\n\nimport itertools"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == \"YES\"\nassert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\nassert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\n\nassert solution('''\n5 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\n\nassert solution('''\n5 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'NO'\n\nassert solution('''\n5 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'NO'"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'YES', \"3 2\"\nassert solution('3 2 1') == 'YES', \"3 2 1\"\nassert solution('1 2') == 'NO', \"1 2\"\nassert solution('4 2') == 'NO', \"4 2\"\nassert solution('4 1 2 3') == 'YES', \"4 1 2 3\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\nassert solution('12') == '12'\nassert solution('19') == '19'\nassert solution('28') == '28'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\nbaabbb\\n') == 'bab'\nassert solution('10\\nooopppssss\\n') == 'oops'\nassert solution('1\\nz\\n') == 'z'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == stdin.strip()"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"z\""
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '', 'your solution needs to be a string'\nassert solution('5') == 'a', 'your solution needs to be a string'\nassert solution('1') == 'a', 'your solution needs to be a string'\nprint('\"Run\" is good practice')\n\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('6') == 'aa'\nassert solution('10') == 'oopppssss'"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nbab\n''') == 'bab'\nassert solution('''\nz\n''') == 'z'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"z\"\nassert solution(\"2\") == \"o\"\nassert solution(\"3\") == \"o\"\nassert solution(\"4\") == \"o\"\nassert solution(\"5\") == \"o\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == stdin.strip()\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\nzaa') == 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n1 2 2\n2 3 3\n1 3 2\n''') == '1'\nassert solution('''\n4 3\n2 1 3\n4 3 4\n2 4 1\n''') == '1'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\n''') == '1'\n\nassert solution(\n'''4 3\n2 1 3\n4 3 4\n2 4 1\n\n''') == '0'\n\nassert solution(\n'''3 3\n1 2 1\n2 3 2\n1 3 3\n\n''') == '1'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '1'\nassert solution('''\n4 3\n2 1 3\n4 3 4\n2 4 1\n''') == '0'\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '1'\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"5 6\") == \"2\"\nprint(\"check done.\")\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(test_0) == \"1\"\nassert solution(test_1) == \"0\"\nassert solution(test_2) == \"1\"\nassert solution(test_3) == \"0\"\nassert solution(test_4) == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0') == '0'\nassert solution('4 3') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 6\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution() == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 10') == '1'\nassert solution('4 3') == '1'\nassert solution('3 3') == '0'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3''') == '1'\nassert solution('''4 3\n2 1 3\n4 3 4\n2 4 1\n''') == '0'\nassert solution('''3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '1'\nassert solution('''1 0\n''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n''') == '2'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '3'\nassert solution('RBB') == 'RRBB'\nassert solution('GRBB') == 'RRGBB'\nassert solution('BRBB') == 'RBBBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\nBRB\"\n) == \"1\"\nassert solution(\n    \"7\\nRGBGRBB\"\n) == \"3\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\nRB') == 'GGBBB'\nassert solution('7\\nRBGB') == 'RGBGBB'\nassert solution('8\\nRBBBB') == 'RBBBBB'\nassert solution('9\\nRBBBBB') == 'RBBBBB'\nassert solution('10\\nRBBBBB') == 'RBBBBB'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\nBRB\n\"\"\") == \"GRB\"\nassert solution(\n\"\"\"\n7\nRGBGRBB\n\"\"\") == \"RGBRGBR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nRBGB\n''') == 'R'\nassert solution('''\n4\nBRB\n''') == 'GB'\nassert solution('''\n10\nRRGBGBGBGBGBGBB\n''') == 'RGBRGBR'\nassert solution('''\n10\nRBGB\n''') == 'R'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nRBBBGRB') == 'RBBBGRB'\nassert solution('6\\nRRBBBBGB') == 'RRBBBBGB'\nassert solution('12\\nBBBRGBRG') == 'BBBRGBRG'\nassert solution('10\\nBRBBRGBRB') == 'BBBRGBRB'\nassert solution('4\\nRRRBBBBBB') == 'RRRBBBBBB'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\nRBB\n\n\"\"\") == \"1\"\nassert solution(\"\"\"7\nRGBRBB\n\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nR') == '1\\nR'\nassert solution('2\\nRG') == '1\\nGR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\nBRB\n''') == 'GRB'\n\nassert solution('''7\nRGBGRBB\n''') == 'RGBRGBR'"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n''')"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nassert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.1'\nassert solution('3\\n10.0 JPY\\n0.10000000 BTC\\n') == '10.1'\nassert solution('3\\n10.0 JPY\\n0.10000000 BTC\\n') == '10.1'\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '48000.0'"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.1\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"3\\n1000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"4\\n10000 JPY\\n1000 BTC\\n\") == \"48000.0\"\nassert solution(\"5\\n10000 JPY\\n1000 BTC\\n\") == \"48000.0\"\nassert solution(\"6\\n10000 JPY\\n1000 BTC\\n\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('3\\n50000 JPY\\n10.0 BTC') == '50000.0'\nassert solution('4\\n0.10000000 BTC\\n30000 JPY') == '50000.0'\nassert solution('5\\n0.10000000 BTC\\n1.0 JPY') == '50000.0'\nassert solution('5\\n0.10000000 BTC\\n1.0 JPY\\n30000 JPY') == '50000.0'\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"3\\n10 100\\n2.5 10000\\n2.5 BTC\\n\") == \"66.250000\"\nassert solution(\"3\\n10 100\\n2.5 JPY\\n2.5 BTC\\n\") == \"66.250000\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"1\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.1\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"3\\n3.437610741589378 Y\\n3.437610741589378 Y\\n3.437610741589378 Y\\n\") == \"10.0\"\nassert solution(\"2\\n2.0175 Y\\n2.0175 Y\\n\") == \"10.0\"\nassert solution(\"3\\n0.0000 Y\\n0.0000 Y\\n\") == \"0.0\"\nassert solution(\"3\\n0.0000 Y\\n0.0000 Y\\n\") == \"0.0\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n5 2\n''') == '3'\nassert solution('''8\n5 3\n''') == '7'\nassert solution('''3\n3 4\n''') == '2'\nassert solution('''5\n10 4\n''') == '6'\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '3'\nassert solution('5 2') == '3'\nassert solution('10 3') == '7'\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"3\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"3 4\") == \"1\""
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 4') == '3'\n\n## Sample Test - Standard Input\nimport sys\nimport io\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_input(self):\n        capturedOutput = io.StringIO()\n        sys.stdout = capturedOutput\n        print(\"Hello\")\n        assert capturedOutput.getvalue() == \"Hello\\n\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4\n2\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"icpc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nabc') == 'bac'\nassert solution('2\\nabcd') == 'bcad'\nassert solution('3\\nabcd') == 'acbc'\nassert solution('4\\nacbd') == 'cabd'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\naaaa\n''') == 'aaaaaaaa'\nassert solution('''2\nabc\n''') == 'cab'\nassert solution('''4\nbbba\n''') == 'bbbbbb'\nassert solution('''8\nccdddddddd\n''') == 'ccddddddddddcc'\nassert solution('''1\nb\n''') == 'b'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('ip') == 'ipc'\nassert solution('cc') == 'ccc'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'icpc'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"icpc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'abc'\nassert solution('6') == 'aabccddeeff'\nassert solution('1') == 'a'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\nabc\nxyz\n''') == 'abcxyz'\nassert solution('''\n2\nac\nab''') == 'acab'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == \"icpc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\nip cc\n\n\"\"\") == \"icpc\"\n\n\"\"\"\n--HARD--\n\n===TLE===\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c\n    \n    def alternatingCharacters_TLE(self, s: str, t: str) -> int:\n        l = len(s)\n        if l!= len(t):\n            return -1\n        \n        ret = 0\n        for i in range(l):\n            if s[i]!= t[i]:\n                ret += 1\n        return ret\n\nclass Solution:\n    def alternatingCharacters(self, s: str, t: str) -> int:\n        c = 0\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c += 1\n        return c"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABC') == 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AABB\") == \"Yes\"\nassert solution(\"AAAB\") == \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AB') == 'Yes'\nassert solution('AA') == 'No'\nassert solution('BB') == 'Yes'"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AAB') == 'Yes'\nassert solution('ABA') == 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABBA') == 'Yes'\n\nassert solution('AAAB') == 'No'\nassert solution('AAABB') == 'Yes'\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"AAB\") == \"No\"\nassert solution(\"AAAA\") == \"Yes\"\n\n------Analysis-----\nStrip the input and split the string into a list of its characters.\nFor each of these characters, test if it is A or B, if so, return \"Yes\".\nLoop through the list of strings.\nUse 2 pointers that track where we are at the current char, and where we are at the next\nIf the current char is not the same, we break the loop\nIf the next char is not the same, we have no solution.\nIf the next char is the same, we have no solution.\nIf all of the above fail, then return \"No\".\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABC') == 'No'\n\n'''\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABC') == 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"AAAB\") == \"No\"\nassert solution(\"BBBA\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABAB\") == \"Yes\"\nassert solution(\"AAAA\") == \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RRS\") == \"2\"\nassert solution(\"RRR\") == \"1\"\nassert solution(\"R\") == \"0\"\nassert solution(\"R\") == \"0\"\nassert solution(\"RR\") == \"0\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"RRRR\") == \"2\""
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RRS\") == \"2\"\nassert solution(\"RRR\") == \"1\"\nassert solution(\"RRSR\") == \"2\"\nassert solution(\"RRRRRRRRR\") == \"5\"\nassert solution(\"R\") == \"1\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('RRS') == '2'\nassert solution('R') == '0'\nassert solution('RR') == '1'\nassert solution('RRR') == '3'\nassert solution('RRRR') == '3'\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RRS') == '2'\n\n'''"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"RRS\") == \"2\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == \"2\"\nassert solution(\"RRSRRS\") == \"2\"\nassert solution(\"RRRSRRSS\") == \"2\"\nassert solution(\"RSS\") == \"0\"\nassert solution(\"RSSSS\") == \"0\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RRS\") == \"2\"\nassert solution(\"RS\") == \"1\"\nassert solution(\"R\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"RRS\") == \"2\""
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('RRS') == '2'\nassert solution('RRS') == '2'\nassert solution('RRS') == '2'\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('4 5 6') == '6 5 4'\nassert solution('7 8 9') == '9 8 7'\nassert solution('1 2 3') == '3 1 2'\nassert solution('4 5 6') == '6 5 4'\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n') == '3 1 2\\n'\nassert solution('2 1 3\\n') == '3 1 2\\n'\nassert solution('3 1 2\\n') == '2 1 3\\n'\n\"\"\"\n\n\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\nclass Solution:\n    def inorderTraversal(self, root):\n        res = []\n        stack = []\n\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            res.append(curr.val)\n            curr = curr.right\n\n        return res\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1 3\n3 1 2\n''') == '3 1 2'\nassert solution('''1 2 3\n3 1 2\n''') == '2 1 3'\nassert solution('''3 1 2\n1 2 3\n''') == '3 1 2'\nassert solution('''3 5 4\n5 4 3\n''') == '5 4 3'"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n\") == \"3 1 2\\n\""
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '1 2 3'\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '3 1 2'\nassert solution('1 2 3') == '3 1 2'\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3 1 2'\nassert solution('1 2 3') == '3 1 2'"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4\") == \"3 1 2 4\"\nassert solution(\"4 3 2 1\") == \"2 1 3 4\"\nassert solution(\"4 3 2 1 3\") == \"3 1 2 4 3\"\nassert solution(\"4 3 2 1 2\") == \"3 1 2 4 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '3 1 2'"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\nassert solution('-1 3') == '1'\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == \"100\"\nassert solution(\"30 0\") == \"0\"\nassert solution(\"30 -200\") == \"0\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"30 100\") == \"100\"\nassert solution(\"25 3\") == \"25\"\nassert solution(\"23 22\") == \"23\"\nassert solution(\"25 12\") == \"50\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"100 100\") == \"200\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('30 100\\n') == '100'\nassert solution('1 1\\n') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '6'\nassert solution('30 100') == '100'\nassert solution('10 11') == '24'\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 3\") == \"6\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('30 100') == '100'\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\nassert solution('32 8') == '20'\n\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('30 100') == '100'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+-++') == '2'\nassert solution('---') == '2'\nassert solution('--++') == '2'\nassert solution('+++') == '2'\nassert solution('+-+') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"+-++-++\") == \"3\"\nassert solution(\"+--++\") == \"2\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"+-++\") == \"2\"\nprint(solution(\"+-++\"))\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('+-++') == '2'\nassert solution('+-') == '1'\nassert solution('+-++-') == '1'\nassert solution('+-++-++') == '0'"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+-++\") == \"2\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\n\n'''"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-++') == '2'\nassert solution('+-++') == '2'\nassert solution('++--') == '1'\nassert solution('+--') == '0'\nassert solution('--++') == '1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('+-++') == '2'"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\n\"\"\"\nimport re\n\ns = \"\".join(list(map(str, input().split())))\nprint(int(re.findall(r'[+-]', s)[0]) + int(re.findall(r'[+-]', s)[1]) + int(re.findall(r'[+-]', s)[2]) + int(re.findall(r'[+-]', s)[3]))\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('+-++') == '2'\nassert solution('++--') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/30') == 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2019/04/30') == \"Heisei\"\nassert solution('2019/12/31') == \"TBD\"\nassert solution('2020/02/28') == \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/04/30\") == \"TBD\"\nassert solution(\"2021/04/30\") == \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/12/30') == 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2019/04/30\"\n) == \"Heisei\", \"First\"\nassert solution(\n    \"2019/04/29\"\n) == \"TBD\", \"Second\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/29\") == \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/29\") == \"TBD\"\n\n\"\"\"\n\nstdin = input()\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2019/04/30') == 'Heisei'\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\nassert solution('2019/03/30') == 'Heisei'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '8'\n) == '6'\n\nassert solution(\n    '1337'\n) == '3'\n\nassert solution(\n    '10'\n) == '6'\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5\n3 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\"\"\"\n) == \"14\"\n\nassert solution(\n\"\"\"\n7\n3 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\"\"\"\n) == \"9\"\n\nassert solution(\n\"\"\"\n2\n1 1\n\"\"\"\n) == \"2\""
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"14\"\nprint(solution(input_))"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10''') == '14'\nassert solution('''10\n6 6 6 3 6 1000000000 3 3 6 6''') == '9'\nassert solution('''3\n1337 1337 1337''') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('18\\n'\n                '2 1 2 10 2 10 10 2 2 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10') == '14'\nassert solution('10\\n'\n                '6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n'\n                '1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\nassert solution(\"18\") == \"14\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '3'\nassert solution('10') == '3'\nassert solution('3') == '4'"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == '3'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == \"2\"\nassert solution(example_input_2) == \"3\""
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1 3 2 1 3 2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1 3 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"2 2\n1 2 3 2 1 3 2\n\"\"\"\n    ) == \"2\"\nassert solution(\n\"\"\"10 4\n2 3 3 1 1 2 1 2 3 3\n\"\"\"\n    ) == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2 1 2 3 1 3 2'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3 1 2 1 3 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1 3 2 1 3 2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 2'"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2 1 3 2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3 1 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2\\n1 3 2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3\\n1 3 2'"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10') == '3\\n2\\n-1\\n3\\n2\\n-1\\n3\\n2\\n-1\\n3'"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n\"\"\") == \"3 2\"\nassert solution(\"\"\"\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n\"\"\") == \"2 -1\"\nassert solution(\"\"\"\n5 4\n1 1 1 2 2\n2\n\"\"\") == \"3\""
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10') == '3 2'"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10') == '3 2'\n\n\n'''\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 3 2'\nprint(solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n'))\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n''') == '3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 4 8 2 4\\n8\\n5\\n') == '3'\nassert solution('4\\n2 4 8 2 4\\n8\\n5\\n') == '2'\nassert solution('4\\n2 4 8 2 4\\n8\\n5\\n') == '-1'\nassert solution('4\\n2 4 8 2 4\\n8\\n5\\n') == '3'"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1\"\nassert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"-1\"\nassert solution(\"5 4\\n2 4 8 2 4\\n1\\n5\\n14\\n10\") == \"3\"\nassert solution(\"5 4\\n2 4 8 2 4\\n1\\n5\\n10\\n\") == \"2\"\nassert solution(\"5 4\\n2 4 8 2 4\\n1\\n5\\n10\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n6\n15\n20\n8\n6\n4\n4\n12\n12\n''') == '3'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n''') == '3 2'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\nassert solution('''\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\n'''"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '4 3\\n'\n    '1 3 2 8 5 5 8 2 2 8 5 2\\n'\n    '1 2 2 5\\n'\n    '2 6 7\\n') == '21'\n\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"21\"\nassert solution(\"3 3\") == \"0\"\n\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\nassert solution('''3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n4 5 5 5''') == '21'\nassert solution('''3 3\n1 2 3\n1 2 3\n1 2 3''') == '0'"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\nassert solution('''\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''\n3 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"21\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 3\") == \"6\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '21'\nassert solution('4 3') == '0'\nassert solution('3 3') == '21'"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n\n2 6 7\n\"\"\"\n) == \"21\"\nassert solution(\n\"\"\"3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n\n2 6 7\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(samples) == answers\n\n\n\"\"\"\nimport sys\nimport random\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\\n2 2 3\""
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n2 4 6 6 6\n\nOutput\n2\n1 2 3 \n1 1 2 \n\nInput\n3\n2 8 10\n\nOutput\n2\n2 2 1 \n2 3 2 \n''') == '2'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n2\n2 4 6 6 6\n\nOutput\n2\n1 2 3 \n1 1 2 \n\nInput\n3\n2 8 10\n\nOutput\n2\n2 2 1 \n2 3 2 \n\nInput\n4\n1 1 1 1\n\nOutput\n0\n\"\"\"\n) == \"2\\n1 2 3\\n1 1 2\\n\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2\\n1 2 3\\n1 1 2\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n3 4 2') == '1 2 2'\nassert solution('5\\n3 4 2 6 4') == '1 2 2 1 1 2'\nassert solution('5\\n2 4 2 6 4') == '1 2 1 2 1 2'"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == '0'\nassert solution('2 4 6 6 6') == '2'\nassert solution('3 4 8 10') == '2'\nassert solution('4 5 6 6 6') == '1'\nassert solution('5 6 6 6 6') == '0'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2\\n1 2 3\\n1 1 2\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '2'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '2'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0''') == '1'\nassert solution('''\n10 1\n001111111001001111010000111111\n11100011111111111111111111111\n111111010111011101011101110111\n111111000111011100011101110111\n11111110010011111001111110111\n1111110101111111011111111111\n1110011111001111001111111111\n100111101111111111111111111\n0111111101111111110111111111\n110000000001111110011111111\n1110010011111111011111111111\n111000111111111111111111111\n011111111110011110111111111\n011111111111111111100111111\n01111111111111111101111111\n10000000\n0''') == '2'\nassert solution('''\n12 1\n00111111111000111110111011111\n1110011111001111111111111111\n1111110101111111011111111111\n111111000111011100011101110111\n11111110010011111001111110111\n1111110101111111011111111111\n111001111100111110011111111\n011111111110011110111111111\n1110011111001111111111111111\n0111111111111111110111111111\n011111111111111111100111111\n0111111111111111110111111111\n0111111111111111110111111111\n0111111111111111110111111111\n10000000\n0''') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n100010\") == \"1\"\nassert solution(\"6 1\\n100010\") == \"0\"\nassert solution(\"6 1\\n000000\") == \"1\"\nassert solution(\"6 1\\n010001\") == \"2\"\nassert solution(\"6 1\\n001000\") == \"0\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1\\n100010') == '1'\nassert solution('6 2\\n000000') == '2'\nassert solution('5 1\\n10101') == '1'\nassert solution('3 1\\n001') == '1'\nassert solution('2 2\\n00') == '0'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"1\", \"Test 1 failed\"\nassert solution(\"5 2\") == \"0\", \"Test 2 failed\"\nassert solution(\"6 1\") == \"1\", \"Test 3 failed\"\nassert solution(\"6 2\") == \"1\", \"Test 4 failed\"\nassert solution(\"6 3\") == \"2\", \"Test 5 failed\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1') == '1'\nassert solution('6 2') == '2'\nassert solution('5 1') == '1'\nassert solution('10101') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\n\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '0'\n\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\nassert solution('''\n4 2\n00100000\n000101\n000101\n00100000\n''') == '2'\nassert solution('''\n6 3\n01000000\n11100000\n00100000\n00000001\n00000110\n''') == '1'\n'''\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\", \"This testcase does not pass\"\nassert solution(\"5 1\") == \"1\", \"This testcase does not pass\"\nassert solution(\"10 1\") == \"1\", \"This testcase does not pass\""
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"4\""
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1') == '4'\nassert solution('6 1') == '1 4 5 6'\nassert solution('7 2') == '3'\nassert solution('5 1') == '4'\nassert solution('6 1') == '1 4 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nassert solution(sys.stdin.read()) == \"1 4 5\""
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2\n2 3\n''') == '3'\nassert solution('''\n5 1\n2 3\n3 3\n2 2\n2 3\n2 3\n\n''') == '4'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 2\") == \"3\"\nassert solution(\"5 1\") == \"1 4 5\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 2') == '3'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n11 11\n9 11\n7 8\n''') == '3'\nassert solution('''\n6\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4'\nassert solution('''\n5\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1') == '4'\nassert solution('4 1') == '2 3 5 6'\nassert solution('4 1') == '1 4 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\") == \"3\\n4 6 7\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == \"4\"\nassert solution('7 2') == \"3\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '30'\nassert solution('4') == '31'\nassert solution('5') == '10'\nassert solution('3 2') == '0'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n4\\n5 6 15 30') == '30'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6''') == \"30\"\n\nassert solution('''2\n6\n8''') == \"20\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '30'\nassert solution('''\n1\n10 5 8\n1\n6 2 4\n''') == '27'\nassert solution('''\n1\n3 4 5\n1\n2 3 4\n''') == '3'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '30'\nassert solution('''\n1\n5\n1 2 1 2\n''') == '1'\nassert solution('''\n2\n2\n1 1\n''') == '1'\nassert solution('''\n2\n3\n1 2\n''') == '2'\nassert solution('''\n3\n3\n1 2\n2 2\n''') == '3'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '30'\nassert solution('4') == '31'\nassert solution('5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4\\n5 6 15 30') == '30'\nassert solution('2\\n4\\n10 6 30 15') == '31'\nassert solution('3\\n3 4 6') == '10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '30'\nassert solution('''\n5\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '31'\nassert solution('''\n5\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '10'\nassert solution('''\n5\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '30'\nassert solution('''\n1\n3\n1\n''') == '1'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"30\"\n\n'''"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\n''') == '2'\nassert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\n''') == '1'\nassert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n99\n''') == '2'\nassert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n99\n''') == '1'\nassert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n99\n''') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100''') == '1'\nassert solution('''3\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100''') == '2'\nassert solution('''5\n1 1 1 2 2\n1\n2 2 2 2 2''') == '0'\nassert solution('''10\n1\n1\n2\n3\n1\n2\n3\n4\n5\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3''') == '2'\nassert solution('''5\n1\n1\n2\n3\n1\n2\n3\n1\n2\n3''') == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1', \"Wrong answer for input '2'\"\nassert solution('4') == '2', \"Wrong answer for input '4'\"\nassert solution('10') == '3', \"Wrong answer for input '10'\"\nassert solution('50') == '5', \"Wrong answer for input '50'\"\nassert solution('100') == '6', \"Wrong answer for input '100'\"\n\n'''\nimport sys"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n\") == \"1\\n1\\n1\\n1\\n\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\n''') == '2'\nassert solution('''1\n1\n2\n3\n''') == '1'\nassert solution('''1\n1\n''') == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n4\\n2 10 1 20\") == \"1\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"2\"\nassert solution(\"2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\\n') == '2\\n1'\nassert solution('5\\n3\\n1 2 3 4 5\\n2\\n3 4\\n5\\n3\\n3 4\\n3\\n') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4\\n 1 2 3 6\\n 5 2 6 27\\n 3 3 5 18') == 'YES'\nassert solution('3 5 18\\n 3 3 5 18\\n 3 3 5 18\\n 3 3 5 18\\n 5 5 5 5\\n 5 5 5 5\\n 5 5 5 5\\n 5 5 5 5\\n 3 3 3 3 3 3 3 3 3 3\\n 3 3 3 3 3 3 3 3 3 3') == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\nassert solution('1 a 2 3 4') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'YES\\nNO\\nNO\\nYES\\n'\n\nassert solution('''\n5 2 6 27\n3 3 5 18\n''') == 'NO\\nYES\\nNO\\nYES\\n'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2 3 4\\n\"\n    \"1 2 3 6\\n\"\n    \"5 2 6 27\\n\"\n    \"3 3 5 18\\n\"\n) == \"YES\\n\"\nassert solution(\n    \"1 1\\n\"\n    \"2 1\\n\"\n    \"2 2\\n\"\n) == \"NO\\n\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 2 3 4\n1 2 3 6\"\"\") == \"YES\"\nassert solution(\"\"\"5 2 6 27\n3 3 5 18\"\"\") == \"NO\"\nassert solution(\"\"\"10 2 4 5\n1 2 3 4 5 6\"\"\") == \"YES\"\nassert solution(\"\"\"4 3 5 6\n1 2 3 4\"\"\") == \"NO\""
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'YES'\nassert solution('''1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'YES'\n\nassert solution('''1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'NO'\n\nassert solution('''4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'YES'\nassert solution('''\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'NO'\n\n'''\nYou may import any standard library at the top of your program file.\nYou may not use any functions that are reserved for external use.\nYou may not use third-party code that you don't agree with.\nYou are not allowed to change any of the provided solutions.\nYou are not allowed to use the provided test cases.\n\n'''\n\n\n\n'''\nQ1. Create a function that accepts one argument, a list, and returns True if there is a single different number in the list.\nThe function should return False if the list has no different numbers.\n\nIf the list contains more than one different number, it should return False.\n'''\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 2\n1 2 3\n3 2 6\n5 2 6 27\n''') == 'YES'\nassert solution('''\n1 1 1\n1 2 3\n2 3 6\n3 2 6 27\n''') == 'NO'\nassert solution('''\n2 4 2\n1 2 3\n4 2 6\n5 2 6 27\n''') == 'YES'\nassert solution('''\n5 4 2\n1 2 3\n4 2 6\n5 2 6 27\n''') == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18''') == 'YES\\n'\nassert solution('''2\n2\n2\n2''') == 'NO\\n'\nassert solution('''4\n2\n2\n2\n2''') == 'NO\\n'\n\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('4 3 1 5 3') == 'YES'\nassert solution('7 5 3 1 4') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('0 1 2 3 4') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1 1 2 1 2\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES', solution\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"NO\"\nassert solution('2') == \"NO\"\nassert solution('3') == \"YES\"\nassert solution('4') == \"YES\"\nassert solution('5') == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 2 7 3 3 1 4\n''') == 'YES'\nassert solution('''\n5 4 3 2 1 0\n''') == 'YES'\nassert solution('''\n7 2 7 3 3 1 4\n''') == 'NO'\nassert solution('''\n0 1 2 3 4\n''') == 'NO'\nassert solution('''\n5 4 3 2 1 0\n''') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7\n7 2 7 3 3 1 4\n''') == \"YES\"\nassert solution('''5\n4 3 1 5 3\n''') == \"YES\"\nassert solution('''5\n0 1 2 3 4\n''') == \"YES\"\nassert solution('''5\n1 1 2 1 2\n''') == \"NO\""
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 2 7 3 3 1 4') == \"YES\"\nassert solution('5 0 1 5 3 4') == \"NO\"\nassert solution('4 3 1 5 3 2') == \"YES\"\nassert solution('5 4 3 2 1 0') == \"YES\"\nassert solution('0 1 2 3 4') == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 4') == '18'\nassert solution('5 2') == '8'\nassert solution('5 3') == '-1'\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n') == '8'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n4 1\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(r\"\"\"\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n\"\"\") == \"8\"\nassert solution(r\"\"\"\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18', solution\nassert solution('''\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n''') == '8', solution\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '18'\nassert solution('8 4') == '18'\nassert solution('5 2') == '8'\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n') == '8'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '8'\nassert solution('5 3') == '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n\") == \"-1\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18'\nassert solution('''\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n''') == '8'\nassert solution('''\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '-1'\nassert solution('''\n5 5\n7 1 1\n3 0 0\n3 1 0\n5 0 1\n3 0 1\n''') == '18'\nassert solution('''\n5 4\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n''') == '8'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''\n2 1\n6 6\n6 6\n''') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '7'"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == '2'\nassert solution('4 2') == '6'\nassert solution('6 4 8 5') == '7'\nassert solution('2 2') == '-1'\nassert solution('1 6') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\nassert solution('''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\n\nassert solution('''\n1\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\n\nassert solution('''\n1\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\n\nassert solution('''\n8\n1 10\n5 1 2 3 1\n5 5 2 2 3 1\n2 1 1 2 3 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"7\"\nassert solution(\"2\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"6\"\nassert solution(\"3\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"-1\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\") == \"7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '7'\nassert solution('5\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '6'\nassert solution('4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution('''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\nassert solution('''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n''') == \"7\"\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n''') == \"7\"\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n''') == \"7\"\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n''') == \"7\"\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n''') == \"7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\nassert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1', \"The first example\"\nassert solution('3') == '0', \"The second example\"\nassert solution('13') == '0', \"The third example\""
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n4 8 15 16 23\n''') == '5'\nassert solution('''\n12\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n''') == '0'\nassert solution('''\n1\n4 8 15 16 23\n''') == '0'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"5\"\nassert solution(\"\") == \"0\"\nassert solution(\"12\") == \"0\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"15\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '0'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'\nassert solution() == '0'\nassert solution() == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('12') == '0'\nassert solution('15') == '3'\nassert solution('13') == '0'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('4 8 15 16 23') == '4'\nassert solution('12') == '0'\nassert solution('15') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('15') == '0'\nassert solution('12') == '0'"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '0'\nassert solution('15') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5', \"Wrong\"\nassert solution('12\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '0', \"Wrong\"\nassert solution('15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '3', \"Wrong\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '0'\nassert solution('''\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '3'\nassert solution('''\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '2'"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '0'\nassert solution('''\n2\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '3'\n''')\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4 2\n3 7\n''') == '0'\nassert solution('''\n4\n9 8\n3 8\n''') == '1'\nassert solution('''\n5\n1 2\n3 5\n''') == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"0\\n3\\n2\"\nassert solution(\"2\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"92\\n87654322\\n9150\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n5 5\") == \"0\\n3\"\nassert solution(\"2\\n7 1\\n7 1\") == \"1\\n0\"\nassert solution(\"3\\n5 1\\n1 1\\n1 1\") == \"0\\n0\"\nassert solution(\"4\\n5 1\\n1 1\\n1 1\") == \"0\\n1\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0\"\nassert solution() == \"3\"\nassert solution() == \"2\"\nassert solution() == \"92\"\nassert solution() == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '3'\nassert solution('''\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '2'\nassert solution('''\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '92'\n''')\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5 5\\n13 42\") == \"0\"\nassert solution(\"2\\n5 5\\n13 42\") == \"3\"\nassert solution(\"3\\n5 5\\n13 42\") == \"92\"\nassert solution(\"4\\n5 5\\n13 42\") == \"87654322\"\nassert solution(\"5\\n5 5\\n13 42\") == \"9150\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n5\n''') == '0\nassert solution('''\n1\n13\n''') == '0\nassert solution('''\n2\n10\n''') == '0\nassert solution('''\n3\n5\n''') == '0\nassert solution('''\n3\n23\n32\n''') == '1\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15') == '12339'\nassert solution('7 5 12345\\n5 0 4\\n10 5 15') == '0'\nassert solution('7 5 12345\\n5 0 4\\n10 5 15') == '15'\nassert solution('7 5 12345\\n5 0 4\\n10 5 15') == '54306'\nassert solution('7 5 12345\\n5 0 4\\n10 5 15') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"12339\"\nassert solution('''\n7 7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"0\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '12339'\nprint(solution('''\n7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n'''))\n\n'''\n3\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n'''\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\"\nassert solution(\"5\\n1 0\\n0\\n\") == \"0\"\nassert solution(\"4\\n5 0\\n7\\n\") == \"0\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"12339\"\nassert solution(\"\"\"\n2\n10 5 187\n2 0 999999999\n\"\"\") == \"185\"\nassert solution(\"\"\"\n3\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"54306\"\nassert solution(\"\"\"\n4\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"999999995\"\nassert solution(\"\"\"\n5\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"999999998\""
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '12339'"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339'\n\nassert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '0'\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339'\nassert solution('10 5 187\\n2 0 999999999') == '185'\nassert solution('10 5 187') == '999999998'\nassert solution('499999993 9 1000000000') == '15'\nassert solution('499999993 9 1000000000') == '0'\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"12339\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '185'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('7 3\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('8 3\\n1 2 2 3 2 4 6 10') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7 2\n1 2 2 3 2 4 10''') == '6'\nassert solution('''8 2\n1 2 2 3 2 4 6 10''') == '8'\nassert solution('''7 3\n1 2 2 3 2 4 5''') == '4'\nassert solution('''7 6\n1 2 2 3 2 4 5 6''') == '6'\nassert solution('''7 5\n1 2 2 3 2 4 5''') == '5'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 2\n1 2 2 3 2 4 10''') == '6'\nassert solution('''8 2\n1 2 2 3 2 4 6 10''') == '8'\nassert solution('''7 3\n1 2 2 3 2 4 5''') == '4'\nassert solution('''7 3\n1 2 2 3 2 4 6 10''') == '8'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 3\") == \"12\"\nassert solution(\"6 6\") == \"12\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"8 8\") == \"12\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"6\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 2 4 5\") == \"6\"\nassert solution(\"7 2\\n1 2 2 3 2 4 5 6 10\") == \"8\"\nassert solution(\"8 2\\n1 2 2 3 2 4 5 6 10\") == \"8\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2') == '6'\nassert solution('8 2') == '8'\nassert solution('7 3') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 2') == '6'\nassert solution('8 2') == '8'\nassert solution('7 3') == '4'"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == 'bcd'\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\"ABC\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"aBC\"\nassert solution([\"ABD\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"ABD\"\nassert solution([\"ABC\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"abc\"\nassert solution([\"aBC\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"aBC\"\nassert solution([\"ABC\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'aBC'\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"a\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5') == \"bcd\"\nassert solution('ABC ABCDAB ABCDABCDABDABD') == \"ABCDABCDAB\"\n\nsolution(input())\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\nABC') == 'aBC'\nassert solution('4 3\\nABCD') == 'ABCD'\nassert solution('5 3\\nABCDE') == 'ABCDE'\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'aBC'\nprint(solution(input()))\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1\nABC''') == 'aBC'"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"aBC\"\nassert solution(\"4 2\") == \"BCD\"\nassert solution(\"4 3\") == \"ABCD\"\nassert solution(\"4 4\") == \"ABCD\"\nassert solution(\"5 2\") == \"AbC\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\nABC''') == 'aBC'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1 2 3 4 5'\nassert solution('6') == '1 2 3 4 5 6'\nassert solution('7') == '1 2 3 4 5 6 7'\nassert solution('8') == '1 2 3 4 5 6 7 8'\nassert solution('9') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"12\") == \"4\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10') == '3 1 5 2 4 6'\nassert solution('6\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10') == '3 1 5 2 4 6'\nassert solution('6\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10') == '3 1 5 2 4 6'\nassert solution('6\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10') == '3 1 5 2 4 6'\nassert solution('6\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10\\nmoscow 10') == '3 1 5 2 4 6'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '3 4 6 1 5 2'"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\nassert solution('5') == '2'\nassert solution('4') == '1'\nassert solution('3') == '4'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3 4 6 1 5 2'\n\n'''\n\nimport sys\nimport re"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n''') == '3,4,6,1,5,2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\nmoscow 20\\nkhabarovsk 10\\nmoscow 60\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '''3\n4\n6\n1\n5\n2'''\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('1 5') == 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'No'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"2 200\") == \"No\"\nassert solution(\"5 500\") == \"Yes\"\nassert solution(\"7 400\") == \"Yes\"\nassert solution(\"2 200\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"1 1000\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n\") == \"No\"\nassert solution(\"1 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"5 100\") == \"No\"\nassert solution(\"1 7\") == \"Yes\"\nassert solution(\"6 6\") == \"No\"\nassert solution(\"5 1\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('1 4') == 'No'\nassert solution('1 -1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('10 100') == 'No'\n\"\"\"\n\nK, X = map(int, stdin.split())"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 900') == 'Yes'\n\n\"\"\"\nimport sys\n\nK, X = map(int, stdin.readline().split())"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 10\n''') == '0.145833333333'\nassert solution('''1 3\n''') == '1.33333333333'\nassert solution('''2 1\n''') == '0.5'\nassert solution('''1 2\n''') == '0.5'\nassert solution('''2 2\n''') == '0.5'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n''') == '0.145833333333'\nassert solution('''\n2 10\n''') == '0.145833333333'\nassert solution('''\n3 10\n''') == '0.145833333333'\nassert solution('''\n2 10\n''') == '0.145833333333'\n''')"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 10') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.1458333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('1 20') == '0.0'\nassert solution('5 100') == '0.142857142857'"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 10') == '0.1458333333'\nassert solution('3 3') == '0.166666666667'\n\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 10'\n) == '0.145833333333'\nassert solution(\n    '20 30'\n) == '0.0012429999439'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '0.145833333333'\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('SAT') == '1'\nassert solution('MON') == '2'\nassert solution('THU') == '3'\nassert solution('WED') == '2'\nassert solution('TUE') == '3'\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"MON\") == \"1\"\nassert solution(\"THU\") == \"2\"\nassert solution(\"TUE\") == \"2\"\nassert solution(\"WED\") == \"2\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('SUN') == '1'\nassert solution('MON') == '2'\nassert solution('TUE') == '3'\nassert solution('WED') == '4'\nassert solution('THU') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('SAT') == '1'\nassert solution('MON') == '2'\nassert solution('TUE') == '3'\nassert solution('WED') == '4'\nassert solution('THU') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"1\"\nassert solution(\"SUN\") == \"1\"\nassert solution(\"MON\") == \"2\"\nassert solution(\"TUE\") == \"3\"\nassert solution(\"WED\") == \"4\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\"SUN\"]) == \"1\"\nassert solution([\"SAT\"]) == \"0\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == \"1\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('SAT') == '1'\nassert solution('WED') == '1'\nassert solution('SAT') == '1'\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == \"1\""
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '1'\nassert solution('MON') == '2'\nassert solution('THU') == '2'\nassert solution('WED') == '2'\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290 2570 5130 10250\", \"Should be 30 50 90 170 330 650 1290 2570 5130 10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 50\") == \"10250\"\nassert solution(\"3 10 10\") == \"75\"\n\"\"\"\nimport math\n\nr, D, x_2000 = list(map(int, input().split()))"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 20\n1 1 1\n2 2 2\n2 1 1\n3 3 3\n3 2 2\n''') == '''\n30\n50\n90\n170\n330\n650\n1290\n2570\n5130\n10250\n'''"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290 2570 5130 10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10 20') == '30 50 90 170 330 650 1290 2570 5130 10250', 'Wrong output'\nassert solution('2 1 10') == '30 30 30 30 30 30 30 30 30', 'Wrong output'\nassert solution('5 4 10') == '30 30 30 30 30', 'Wrong output'\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290 2570 5130 10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 20\") == \"50\"\nassert solution(\"2 10 20\") == \"90\"\nassert solution(\"2 10 20\") == \"170\"\nassert solution(\"2 10 20\") == \"330\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290 2570 5130 10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\"\nassert solution(\"2 20 30\") == \"10250\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 3 1 1 4\n''') == '5'\nassert solution('''3\n4 1 2\n''') == '4'\nassert solution('''5\n1 3 1 1 4\n''') == '4'\nassert solution('''5\n1 3 2 1 4\n''') == '5'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n1\\n4') == '4'\nassert solution('3\\n1\\n1\\n4') == '4'\nassert solution('3\\n1\\n2') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 1 2\") == \"4\\n0 1\\n0 2\\n\\n\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '0'\nassert solution('3') == '4'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4\\n') == '5'\nassert solution('3\\n4 1 2\\n') == '0'\nassert solution('4\\n5 1 2\\n') == '4'\nassert solution('4\\n5 2 1\\n') == '4'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 3 1 1 4\n''') == '5'\nassert solution('''5\n1 3 2 1 4\n''') == '4'\nassert solution('''3\n4 1 2\n''') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"3\\n1 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 3 1 1 4''') == '5'\nassert solution('''3\n4 1 2''') == '4'\nassert solution('''3\n4 1 2''') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 1 1 4\\n') == '5'\nassert solution('5\\n1 3 2 1 4\\n') == '4'\nassert solution('3\\n4 1 2\\n') == '0'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'''\nassert solution('''1\n1''') == 'YES\\n1\\nYES\\n1\\nYES\\n1\\nYES\\n1\\nYES\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 3\\n100 100 100') == 'YES\\n3 2 1'\nassert solution('5\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n10 30 20\\n1 1 1000000000'\nassert solution('5\\n100 100 100\\n50 49 49') == 'NO\\n100 100 100\\nNO\\n100 100 100'\nassert solution('5\\n1 1000000000 1000000000\\n50 49 49') == 'YES\\n1 1 1000000000\\nYES\\n100 100 100'\nassert solution('5\\n100 100 100\\n1 1000000000 1000000000') == 'YES\\n100 100 100\\nYES\\n100 100 100'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\nYES\\nYES\\n1 1 1000000000\\n', 'Test #1'\nassert solution('''\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'NO\\nNO\\nNO\\nNO\\nNO\\n', 'Test #2'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 2\\n3 3\\n') == 'YES\\n1 1\\nYES\\n1 1\\n'\nassert solution('5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'\nassert solution('\\n\\n') == 'NO\\nNO\\nNO\\nNO\\nNO\\n'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'''"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n1 1 1000000000\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\nYES\\n100 100 100\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nNO\\nYES\\n1 1 1000000000\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n1 1 1000000000\\nNO\\nYES\\n100 100 100\\nNO\\nYES\\n3 2 1\\n'''\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '5'\nassert solution('''\n5 3 3\n1 2 3 1 1\n''') == '4'\nassert solution('''\n5 4 6\n1 2 3 1 1 2 3 4\n''') == '3'\nassert solution('''\n5 5 4\n1 2 3 1 1 2 3 4\n''') == '4'\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 6') == '4'\nassert solution('5 1 4') == '1'\nassert solution('5 3 3') == '5'\nassert solution('5 2 3') == '4'\nprint('Congratulations! Your solutions works perfectly!')\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 4\") == \"4\"\nassert solution(\"5 1 4\") == \"4\"\nassert solution(\"3 1 4\") == \"4\"\nassert solution(\"3 3 4\") == \"4\"\nassert solution(\"3 3 3\") == \"3\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 3') == '1'\nassert solution('5 1 4') == '4'\nassert solution('5 2 1 4 2') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2 6\n5 2 1 4 2\n''') == '4'\n\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '5'\n\nassert solution('''\n5 3 3\n1 2 3 1 1\n''') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2 6\n5 2 1 4 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5 1 4\n4 2 3 4 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n5 3 3\n1 2 3 1 1\n\"\"\") == \"1\""
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1''') == '5'"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == \"4\"\nassert solution('''5 1 4\n4 2 3 4 1''') == \"5\"\nassert solution('''5 3 3\n1 2 3 1 1''') == \"5\"\nassert solution('''5 7 7\n1 2 3 1 1 1 1 2 3''') == \"5\"\n\nassert solution('''1 1 1 1 2 3\n2 2 2 2''') == \"6\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '5'\nassert solution('''\n5 3 3\n1 2 3 1 1\n''') == '5'\n\nassert solution('''\n5 2 5\n5 2 1 4 2\n''') == '4'\nassert solution('''\n5 1 5\n4 2 3 4 1\n''') == '5'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2\\nabacaba\\n1 2\\n') == '12'\nassert solution('10 3\\nsadfaasdda\\nf a d\\n') == '21'\n\n'''\nfrom collections import deque"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"12\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 2\nabacaba\na b''') == '12'\nassert solution('''10 3\nsadfaasdda\nf a d''') == '21'\nassert solution('''7 1\naaaaaaa\nb''') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 2\n    bac\n    f a\n    ''') == '12'\nassert solution('''4 3\n    sad\n    fa\n    ''') == '0'\nassert solution('''10 3\n    sadf\n    a\n    ''') == '21'\nassert solution('''5 2\n    a\n    ''') == '0'\nassert solution('''10 2\n    aa\n    ''') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == '12'"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 2\nabacaba\na b\n''') == '12'\nassert solution('''\n7 1\naaaaaaa\nb\n''') == '0'\nassert solution('''\n10 3\nsadfaasdda\nf a d\n''') == '21'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\nabacaba\\na b\") == \"12\"\nassert solution(\"10 3\\nsadfaasdda\\f a d\") == \"21\""
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"7 2\\n\"\n    \"abacaba\\na b\"\n    ) == \"12\"\n\nassert solution(\n    \"10 3\\n\"\n    \"sadfaasdda\\f a d\"\n    ) == \"21\"\n\nassert solution(\n    \"7 1\\n\"\n    \"aaaaaaa\\b\"\n    ) == \"0\"\n\nassert solution(\n    \"7 1\\n\"\n    \"aaaaaaa\\b\"\n    ) == \"0\"\n\nassert solution(\n    \"10 3\\n\"\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\nabacaba\\na b\") == \"12\"\nassert solution(\"10 3\\nsadfaasdda\\f a d\") == \"21\"\nassert solution(\"7 1\\naaaaaaa\\nb\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == str(12)\n\n\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n') == '2\\n-1\\n6\\n-2999999997'"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\"\n) == \"-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2'\nassert solution('''\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\nassert solution('''\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\nassert solution('''\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n1 -1\n1 -2\n\n10\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '-1'"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n-1 -2 -1 -3') == '6'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997'\nprint('Congratulations, have fun using my tool!')\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2'\nassert solution('''\n4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\n\nassert solution('''\n1\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '-1'\nassert solution('''\n4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\nassert solution('''\n1\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '-1'\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2\\n-1'\nassert solution('''\n10\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6\\n-2999999997'\nassert solution('''\n4\n-1 -2 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2\\n-1'\nassert solution('''\n4\n-1 -2 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6\\n-2999999997'\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2\\n-1\\n6\\n-2999999997'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == '3 5\\n2 1\\n3 2\\n3 4\\n'\nassert solution('4 6') == '4 1\\n1 2\\n1 3\\n'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '3 5\\n2 1\\n3 2\\n3 4\\n'\nassert solution('4 6') == '4 1\\n1 2\\n1 3\\n'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '4 1'\nassert solution('8 9\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '3 2'"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"3 5\\n2 1\\n3 2\"\nassert solution(\"4 6\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '3 5'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5'\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '4 1'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n') == '3 5\\n2 1\\n3 2\\n3 4\\n'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '4 1\\n1 2\\n1 3\\n'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5'\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '4 1'"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5\\n2 1\\n3 2\\n3 4'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n499993\n''') == '0'\nassert solution('''4\n5\n499993\n''') == '40'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1\n5\n499993\n''') == '0\n\n'''\nn = int(input())\nd = {1:1}\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"40\"\nassert solution([1]) == \"0\"\nassert solution([5]) == \"40\"\nassert solution([499993]) == \"41664916690999888\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1\n5\n499993\n''') == '40'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '40'\nassert solution('499993') == '41664916690999888'"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '40'\nassert solution([1, 2, 3, 4]) == '0'\nassert solution([1, 5, 4, 3]) == '40'\nassert solution([1, 5, 10, 3]) == '40'\nassert solution([1, 3, 5, 4]) == '0'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '40'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '40'\nassert solution('499993') == '41664916690999888'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"40\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n1\n5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n3\n5\n\"\"\") == \"40\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n3 5 7 6 7\n''') == '1 2 3 -1 1 2 1 1'\nprint(solution('''\n1\n4 5 7 6 7 5 4 4 6 4\n''')) == '1 1 1 2 -1 1 2 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1 1 1 2 -1 1 1 3 1 1'"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('2') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('3') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('5') == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('100') == '1 1 1 1 1 3 1 1'"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 2 1') == '2 1 1 2'\nprint(solution(input()))"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n4 5 7 6 7 5 4 4 6 4\n''') == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n4 5 7 6 7 5 4 4 6 4''') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('''10\n4 5 7 6 7 5 4 4 6 4''') == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n4\n5\n7\n6\n7\n5\n4\n4\n6\n4\n\"\"\"\n) == \"1 1 1 2 -1 1 1 3 1 1\"\n\nassert solution(\n\"\"\"\n3\n3\n2\n2\n\"\"\"\n) == \"1 1 1 2 -1 1 1 2 2 2\"\n\nassert solution(\n\"\"\"\n5\n4\n3\n2\n1\n\"\"\"\n) == \"1 1 1 2 -1 1 1 3 1 1\""
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"8\") == \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\" * 4 + \"NO\" * 2 + \"YES\" * 3 + \"NO\" * 4 + \"YES\" * 4\nassert solution() == \"YES\" * 3 + \"NO\" * 2 + \"YES\" * 4 + \"NO\" * 3 + \"YES\" * 4\nassert solution() == \"YES\" * 4 + \"NO\" * 2 + \"YES\" * 4 + \"NO\" * 3 + \"YES\" * 4\nassert solution() == \"YES\" * 5 + \"NO\" * 1 + \"YES\" * 4 + \"NO\" * 3 + \"YES\" * 4\nassert solution() == \"YES\" * 4 + \"NO\" * 3 + \"YES\" * 4 + \"NO\" * 2 + \"YES\" * 4\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n3\n5\n7\n1\n''') == 'YES'\nassert solution('''\n5\n64\n32\n97\n2\n12345\n''') == 'NO'\nassert solution('''\n10\n''') == 'YES'\nassert solution('''\n100\n''') == 'YES'\nassert solution('''\n0\n''') == 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n64\n32\n97\n2\n12345''') == \"YES 2 4 8 23\"\nassert solution('''3\n1\n2\n3''') == \"NO 1 2 3\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    5\n    64\n    32\n    97\n    2\n    12345\n''') == 'YES'\nassert solution('''\n    5\n    32\n    97\n    2\n    12345\n''') == 'NO'\nassert solution('''\n    5\n    64\n    32\n    97\n    2\n    12345\n''') == 'YES'\n''') == 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"99999999999999999\") == \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n64\n32\n97\n2\n12345\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2\n8\n4\n9\n2\n5\n12345\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n64\n32\n97\n2\n12345''') == 'YES'\nassert solution('''1\n3\n5\n2\n6''') == 'YES'\nassert solution('''1\n2\n1\n3\n2''') == 'YES'\nassert solution('''3\n3\n4\n5\n2''') == 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n2\n6\n5\n1\n6\n9\n7\n8\n''') == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == \"2\"\nassert solution('4') == \"2\"\nassert solution('6') == \"0\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"ba\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\nbbbb\n''') == 'abba'\n\nassert solution('''\n6\nababab\n''') == '0'\n\nassert solution('''\n2\naa\n''') == '1'"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nbbbb') == 'abba'\nassert solution('6\\nababab') == 'ababab'\nassert solution('2\\naa') == 'ba'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\nbbbb') == 'abba'\nassert solution('6\\nababab') == 'ababab'\nassert solution('2\\naa') == 'ba'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == solution('1')\nassert solution(input_data) == solution('2')\nassert solution(input_data) == solution('3')\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nab') == 'abba'\nassert solution('2\\nab') == 'aba'\nassert solution('3\\nab') == 'abab'\nassert solution('4\\nab') == 'abab'\nassert solution('5\\nab') == 'aba'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"bba\"\nassert solution(\"10\") == \"baaabaaaababbbbbbabaa\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n''') == '15'\nassert solution('''\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n''') == '15'\nassert solution('''\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 4\n2 3\n3 1\n3 4\n1 1''') == '15'\nassert solution('''5\n2 1\n1 0\n2 0\n3 2\n0 3''') == '9'\nassert solution('''8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2''') == '15'\nassert solution('''10\n2 1\n1 0\n2 0\n3 2\n0 3\n1 1\n4 3\n1 2\n3 4\n2 5\n2 3\n5 4\n1 4''') == '8'\nassert solution('''14\n2 1\n1 0\n2 0\n3 2\n0 3\n1 1\n4 3\n1 2\n3 4\n2 5\n2 3\n5 4\n1 4\n3 4\n2 5''') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"15\"\nprint(solution(input_))\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"6\"\nassert solution(\"8\") == \"15\"\nassert solution(\"5\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"10\\n5 0\\n1 0\\n8 0\\n2 0\\n4 0\\n4 1\\n2 2\\n3 2\\n3 1\\n2 1\\n2 2\") == \"8\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"15\"\nassert solution(\"\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2''') == '15'\nassert solution('''5\n2 1\n1 0\n2 0\n3 2\n0 3''') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"11\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n''') == '15'\nassert solution('''\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '9'\nassert solution('''\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '8'\nassert solution('''\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '9'\n\nfrom typing import List"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"1\") == '2'\nassert solution(\"3\") == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1\n2\n''') == '2'\nassert solution('''3\n2\n2\n''') == '3'\nassert solution('''3\n1\n3\n''') == '2'\nassert solution('''3\n2\n3\n''') == '3'\nassert solution('''3\n2\n3\n''') == '3'\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n\") == \"2\"\nassert solution(\"3\\n2\\n\") == \"1\"\nassert solution(\"3\\n3\\n\") == \"1\"\nassert solution(\"3\\n4\\n\") == \"2\"\nassert solution(\"3\\n5\\n\") == \"1\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1') == '2'\nassert solution('1\\n1\\n1\\n2') == '2'\nassert solution('3\\n1\\n2') == '2'\nassert solution('1\\n1\\n2\\n1') == '2'\nassert solution('3\\n1\\n3') == '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n\nA, B = map(int, input().split())\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\nassert solution('1') == '2'\nassert solution('1') == '2'\nassert solution('1') == '2'\nassert solution('1') == '2'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\"\n) == \"1.000000000000\"\nassert solution(\n    \"3\"\n) == \"1.000000000000\"\nassert solution(\n    \"20\"\n) == \"1.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1.000000000000'\nassert solution('1') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport math\n\nnumber = int(input())\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '10'\nassert solution('6') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3''') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '1.000000000000'\nprint(solution(input()))\n\n-----Task-----\nGiven a positive integer n. Print the largest integer x such that 1 <= x <= n.\n\n-----Constraints-----\n - 1 <= n <= 2e6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the largest integer x such that 1 <= x <= n.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n---\nclass Solution:\n    def maxvolume(self, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        a = 1\n        b = 1\n        c = 1\n        res = a + b + c\n        while a <= n / 2:\n            a = b\n            b = c\n            c = res\n            res = max(res, a + b + c)\n        return res\n\nassert Solution().maxvolume(3) == 4\nassert Solution().maxvolume(4) == 6"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"4\") == \"2.000000000000\"\nassert solution(\"1\") == \"0.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('5') == '0.9000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"6\") == \"1.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n3\n8''') == \"1.000000000000\"\nassert solution('''3\n7\n3\n3\n3\n4\n6\n4\n5\n8\n8\n8''') == \"1.000000000000\"\nassert solution('''4\n0\n5\n10\n10\n10''') == \"0.000000000000\"\nassert solution('''1\n5\n3\n8\n3\n3''') == \"5.000000000000\"\nassert solution('''1\n6\n3\n5\n2\n3''') == \"6.000000000000\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '1+2'\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"1+1\"\nassert solution(\"2\") == \"1+2\"\nassert solution(\"2\") == \"2+2\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '11'\nassert solution('3') == '19'\n\nstdin = input()"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"1+2\"\nassert solution(\"2\") == \"2+2\"\n\nstdin = \"\"\"\n1\n\n2\n\n2\n\n3\n\n4\n\n5\n\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Hello World\", \"First\"\nassert solution(\"2\") == \"2\", \"Second\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '2'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1') == '2'\nassert solution('1\\n1') == 'Hello World'\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == 'Hello World'\nassert solution('2\\n') == '4'\nprint(solution('1\\n'))\nprint(solution('2\\n'))\n'''"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"A+B\"\nassert solution(\"3\") == \"Hello World\"\nassert solution(\"4\") == \"A+B\"\nassert solution(\"5\") == \"A+B\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == 'Hello World'\nassert solution('2') == '3'\nassert solution('1') == 'Hello World'"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"11\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"10003\") == \"10003\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"3 3\") == \"3 3\"\n\n--------------------------------------\n\n1. solution(sys.stdin.readline().strip())\n2. sys.stdin.readline().strip().split()\n3. int(sys.stdin.readline().strip())\n4. int(sys.stdin.readline().strip())\n5. split()\n6. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. int(input())\n4. int(input())\n5. split()\n6. min()\n\n--------------------------------------\n\n1. solution(stdin.readline().strip())\n2. stdin.readline().strip().split()\n3. int(stdin.readline().strip())\n4. int(stdin.readline().strip())\n5. split()\n6. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. int(input())\n4. int(input())\n5. split()\n6. min()\n\n--------------------------------------\n\n1. solution(stdin.readline().strip())\n2. stdin.readline().strip().split()\n3. int(stdin.readline().strip())\n4. int(stdin.readline().strip())\n5. int(stdin.readline().strip())\n6. int(stdin.readline().strip())\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. int(input())\n4. int(input())\n5. int(input())\n6. int(input())\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(input())\n4. min(input())\n5. min(input())\n6. min(input())\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(int(input()))\n4. min(int(input()))\n5. min(int(input()))\n6. min(int(input()))\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. int(input())\n4. int(input())\n5. int(input())\n6. int(input())\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(int(input()), int(input()))\n4. min(int(input()), int(input()))\n5. min(int(input()), int(input()))\n6. min(int(input()), int(input()))\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. int(input())\n4. int(input())\n5. int(input())\n6. int(input())\n7. min(min(int(input()), int(input())), min(int(input()), int(input())))\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(min(int(input()), int(input())), min(int(input()), int(input())))\n4. min(min(int(input()), int(input())), min(int(input()), int(input())))\n5. min(min(int(input()), int(input())), min(int(input()), int(input())))\n6. min(min(int(input()), int(input())), min(int(input()), int(input())))\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(min(int(input()), int(input())), min(int(input()), int(input())))\n4. min(min(int(input()), int(input())), min(int(input()), int(input())))\n5. min(min(int(input()), int(input())), min(int(input()), int(input())))\n6. min(min(int(input()), int(input())), min(int(input()), int(input())))\n7. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(min(int(input()), int(input())), min(int(input()), int(input())))\n4. min(min(int(input()), int(input())), min(int(input()), int(input())))\n5. min(min(int(input()), int(input())), min(int(input()), int(input())))\n6. min(min(int(input()), int(input())), min(int(input()), int(input())))\n7. min(min(int(input()), int(input())), min(int(input()), int(input())))\n8. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(min(int(input()), int(input())), min(int(input()), int(input())))\n4. min(min(int(input()), int(input())), min(int(input()), int(input())))\n5. min(min(int(input()), int(input())), min(int(input()), int(input())))\n6. min(min(int(input()), int(input())), min(int(input()), int(input())))\n7. min(min(int(input()), int(input())), min(int(input()), int(input())))\n8. min(min(int(input()), int(input())), min(int(input()), int(input())))\n9. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(min(int(input()), int(input())), min(int(input()), int(input())))\n4. min(min(int(input()), int(input())), min(int(input()), int(input())))\n5. min(min(int(input()), int(input())), min(int(input()), int(input())))\n6. min(min(int(input()), int(input())), min(int(input()), int(input())))\n7. min(min(int(input()), int(input())), min(int(input()), int(input())))\n8. min(min(int(input()), int(input())), min(int(input()), int(input())))\n9. min(min(int(input()), int(input())), min(int(input()), int(input())))\n10. min()\n\n--------------------------------------\n\n1. solution(input())\n2. input().strip().split()\n3. min(min(int(input()), int(input())), min(int(input()), int(input())))\n4. min(min(int(input()), int(input())), min(int(input()), int(input())))\n5. min(min(int(input()), int(input())), min(int(input()), int(input())))\n6. min(min(int(input()), int(input())), min(int(input()), int(input())))\n7. min(min(int(input()), int(input())), min(int(input()), int(input())))\n8. min(min(int(input()), int(input())), min(int("
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"4 2\") == \"22\"\nassert solution(\"4 3\") == \"333\"\nassert solution(\"9 5\") == \"95\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n5\n''') == '3333'\nassert solution('''1 2\n4\n''') == '4444'\nassert solution('''13 1\n13\n''') == '13'\nassert solution('''3 1\n3\n''') == '33333'\nassert solution('''4 1\n4\n''') == '44444'\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3') == '333'\nassert solution('2\\n4') == '444'"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('.1\\n.9\\n') == '.9'\n\nassert solution('.2\\n.2\\n') == '.2'\n\nassert solution('.1\\n.9\\n') == '.1'\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([4,3]) == \"3333\""
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n''') == '3333', 'Wrong answer!'\n\nassert solution('''\n1 2\n''') == '1221', 'Wrong answer!'\n\nassert solution('''\n7 7\n''') == '7777', 'Wrong answer!'\n\nassert solution('''\n5 5\n''') == '5555', 'Wrong answer!'\n\nassert solution('''\n3 3\n''') == '33333', 'Wrong answer!'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"z\") == \"a\"\nassert solution(\"\") == \"\"\nassert solution(\"A\") == \"B\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('b') == 'b'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'a'\n'''\nimport itertools\n\nletter = input()\n\nx = list(itertools.permutations(letter))\n\nprint(sorted(x)[0])\n\n\n\n'''\nGiven an ASCII value A, print its corresponding letter, if A is a letter; otherwise, print the character A.\n\n-----Constraints-----\n- (A <= 9 && A >= 32)\n- 1 <= A <= 126\n\n-----Input-----\nA\n\n-----Output-----\nC\n\nA is followed by C.\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'z'\nassert solution('b') == 'b'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\nassert solution('a') == 'b'\n\"\"\"\n\nletter = input()\nletter_dict = {}\n\nwhile True:\n    letter = input()\n    if letter == 'z':\n        break\n    if letter in letter_dict:\n        letter_dict[letter] += 1\n    else:\n        letter_dict[letter] = 1\n\nletter_dict = sorted(letter_dict.items(), key=lambda item: item[1])\n\nfor key, val in letter_dict:\n    if val == max(letter_dict, key=lambda item: item[1])[1]:\n        print(key)\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"b\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('a') == 'b'\nassert solution('b') == 'c'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a') == 'b'\nassert solution('d') == 'c'\nassert solution('z') == 'a'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'b'"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('oder atc') == 'atcoder'\n'''\n\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('oder atc') == 'atcoder'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'atcoder', f\"actual: {solution(input())}, expected: 'atcoder'\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('oder abc') == 'abcoder'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('this is not') == 'not is this'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('oder atc', 'atcoder') == 'atcoderatcoder'\nassert solution('oder', 'atcoder', 'atcoder') == 'atcoderatcoderatcoder'\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"abc abc\") == \"abcabc\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'atcoder', \"Wrong Answer\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder', 'Wrong answer'\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 5 7 8 2\n\n''') == '0'\nassert solution('''\n6\n5 1 2 4 6 3\n\n''') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"1000000\"\nassert solution(\"2\") == \"1000000\""
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1000000'"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"1000000\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 5 7 8 2''') == '0'\nassert solution('''6\n5 1 2 4 6 3''') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5 1 5 7 8 2\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"1000000\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nassert solution() == \"1000000\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"0\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2 3 3') == '5'\nassert solution('1 1 100 99') == '1'\nassert solution('7 4 2 1') == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"6 2 3 3\\n7 10 50 12 1 8\"\n) == \"5\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    6 2 3 3\n    7 10 50 12 1 8\n    '''\n) == '5'\n\nassert solution(\n    '''\n    6 2 3 3\n    1 3 5 4 2 7 6\n    '''\n) == '6'\n\nassert solution(\n    '''\n    1 1 100 99\n    '''\n) == '1'\n\nassert solution(\n    '''\n    7 4 2 1\n    1 3 5 4 2 7 6\n    '''\n) == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 2 3 3\n7 10 50 12 1 8\n''') == '5'\nassert solution('''\n6 2 3 1\n100\n''') == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4 1 2\") == \"5\"\nassert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"6 4 2 1\") == \"6\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 2 3 3\n7 10 50 12 1 8\n''') == '5'\nassert solution('''\n1 1 100 99\n100\n''') == '1'"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 2\n5 5 4 2\n''') == \"5\"\nassert solution('''\n2 2 1\n10 1\n''') == \"11\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 2 3 3\n7 10 50 12 1 8\n''') == '5'\nassert solution('''\n1 1 100 99\n100\n''') == '1'\nprint('All tests passed!')"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"0 0 1 2 3\"\nassert solution(\"5 3\") == \"0 1 2 3 5\"\nassert solution(\"6 3\") == \"0 1 2 3 4 5\""
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3 2 0 7 10 14\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"3 3\", \"2 2 3\", \"1 1 2\"]) == \"3\"\nassert solution([\"3 2\", \"1 1 2\", \"0 0 3\"]) == \"3\"\nassert solution([\"4 3\", \"0 1 2 3\", \"0 2 3 4\"]) == \"2\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '0'\nassert solution('6 3') == '3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == '3 2 0 7 10 14'\nassert solution('6 3') == '3 2 0 6 10 12'"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n0 1 2 3 4''') == '3 2 1 0'\n\nassert solution('''1 2\n2''') == '0 1 2'\n\nassert solution('''10\n12\n''') == '3 2 1 0 4 6 7 8 9 10'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3 2 0 7 10 14'"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3') == '3 2 0 6 10 12'\nassert solution('4 2') == '0 1 2 3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 3\n3 2 0 6 10 12\n\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"\n4 2\n0 1 2 3\n\"\"\") == \"\"\"0 1 2 3\"\"\"\nassert solution(\"\"\"\n8 2\n3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"1 2 3\"\"\"\nassert solution(\"\"\"\n3 3\n0 1 2\n\"\"\") == \"\"\"0 1 2 3\n\"\"\".strip()\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '20'\nassert solution('''\n1 5\n1 2\n1 5\n2 3\n''') == '2'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    3 4\n    3 2\n    2 1\n    3 2\n    '''\n    ) == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2\n3 5\n2 3\n''') == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 2\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '20'\nassert solution('''\n5 2\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '20'\nassert solution('''\n3 6\n3 2\n2 5\n2 2\n1 5\n1 5\n''') == '9'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2\n3 5\n4 2\n2 5\n\nOutput\n20\n''') == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3') == '8'\nassert solution('3 3\\n1 5\\n2 3') == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 6\\n\" +\n    \"1 2 0 2 0\\n\" +\n    \"2 4\\n\" +\n    \"3 3\\n\" +\n    \"1 5\\n\" +\n    \"1 2\\n\" +\n    \"1 5\\n\" +\n    \"2 3\\n\"\n) == \"20\"\n\nassert solution(\n    \"5 3\\n\" +\n    \"4 2\\n\" +\n    \"2 5\\n\" +\n    \"3 2\\n\"\n) == \"10\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 0 2 0\\n2 4\\n3 3\") == \"8\"\nassert solution(\"1 2 0 2 0\\n2 4\\n3 3\") == \"20\"\nassert solution(\"2 1\\n1\\n1\\n1\") == \"3\"\nassert solution(\"2 1\\n1\\n1\\n1\") == \"3\"\nassert solution(\"2 1\\n2\\n2\\n2\") == \"4\""
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2\n3 5\n4 2\n2 5\n''') == '20'"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"YES\"\nassert solution('''5\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"YES\"\nassert solution('''5\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"YES\"\nassert solution('''5\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"NO\"\nassert solution('''5\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"5\\n1\\n1 1 1 1 1 1 1\\n2\\n10 5 5 10 5 10 5 1\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"5\\n1\\n1 1 1 1 1 1 1\\n2\\n10 5 5 10 5 10 5 1\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"5\\n1\\n1 1 1 1 1 1 1\\n2\\n10 5 5 10 5 10 5 1\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 10000 10000 10000\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'YES'\nassert solution('''\n5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'YES'\nassert solution('''\n5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n2\n3 1 4 1\n1\n3 2 3 2\n2\n1 1 1 1\n''') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"5\\n1\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 5 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 5 1 1 1 1\") == \"YES\"\nassert solution(\"5\\n1\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 5 1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\n3\n1 2 1\n2 2 2\n1 2 1\n\n1\n1 1 2\n1 2 2\n1 2 1\n1 2 1\n1 1 1\n1 2 2\n1 2 1\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"\n2\n10 1\n10 1\n\n1\n10 1\n10 1\n1\n1\n1\n10 1\n10 1\n1\n10 1\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n2 2\n2 3\n2 4\n2 5\n3 3\n3 4\n3 5\n4 4\n4 5\n5 5\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n2 2\n2 3\n2 4\n2 5\n3 3\n3 4\n3 5\n4 4\n4 5\n5 5\n\"\"\"\n) == \"NO\""
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"YES\"\nassert solution('''\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == \"NO\"\nassert solution('''\n1\n2\n1 1\n2\n1\n1\n''') == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\" == \"9\""
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"6 10 5\\n\"\n    \"2 5 1\\n\"\n    \"5 3 9\\n\"\n    \"6 2 2\\n\"\n    \"1 3 1\\n\"\n    \"5 1 8\\n\"\n    \"6 5 10\\n\"\n    \"1 6 5\\n\"\n    \"6 4 6\\n\"\n    \"3 6 9\\n\"\n    \"3 4 5\\n\") == \"3\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 10 5\") == \"3\"\nassert solution(\"7 15 18\") == \"9\"\nassert solution(\"2 6 3\") == \"5\"\nassert solution(\"5 7 4\") == \"6\"\nassert solution(\"6 5 4\") == \"3\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n''') == '3'\nassert solution('''\n7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n''') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 10 5\") == \"3\"\nassert solution(\"7 15 18\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6 10 5\\n'\n    '2 5 1\\n'\n    '5 3 9\\n'\n    '6 2 2\\n'\n    '1 3 1\\n'\n    '5 1 8\\n'\n    '6 5 10\\n'\n    '1 6 5\\n'\n    '6 4 6\\n'\n    '3 6 9\\n'\n    '3 4 5\\n'\n    ) == '3'\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 15 18') == '4'\nassert solution('6 10 5') == '3'"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\nassert solution(\n    \"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 15 18') == '9'\nassert solution('6 15 18') == '9'\nassert solution('5 15 18') == '9'\nassert solution('1 15 18') == '9'"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3 1\"\nassert solution(\"6\") == \"7 4\"\nassert solution(\"10\") == \"7486 3\""
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(example1) == str(3) +'' + str(1)\nassert solution(example2) == str(7486) +'' + str(3) +'' + str(3)\nassert solution(example3) == str(7486) +'' + str(3) +'' + str(4)\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1 3 4 2\n''') == '3 1'\n\nassert solution('''6\n1 5 12 13 2 15\n''') == '7 2'\n\nassert solution('''10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == '7486 3'"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 1 3 4 2\n''') == '3 1'\n\nassert solution('''\n6\n1 5 12 13 2 15\n''') == '7 2'\n\nassert solution('''\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == \"2 2\"\nprint(solution(input_data))\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n1\n1 1 3 4 2\n\"\"\"\n) == \"3 1\"\nassert solution(\n\"\"\"\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n\"\"\"\n) == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 1 3 4 2\n''') == '3 1'\nassert solution('''\n6\n1 5 12 13 2 15\n''') == '7 2'\nassert solution('''\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 1 3 4 2\n''') == '3 1'\nassert solution('''6\n1 5 12 13 2 15\n''') == '7 2'\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3 1'\nassert solution('6') == '7 2'\nassert solution('10') == '7486 3'"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 3 4 2') == '3 1'\nassert solution('5') == '1 1 1 1 1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5009\n7\n9876\n10000\n10\n''') == '2\n3\n5\n8\n1\n7\n4\n800 70 6 9000 \n1\n10000 \n1\n10\n5\n7\n4\n800 70 6 9000 \n1\n10000 \n1\n10\n5\n7\n4\n800 70 6 9000 \n1\n10000 \n1\n10'''\n\nprint(\"\\033[32m\\033[1m\\033[4m#\\033[0m#\\033[1;36m#\\033[0m#\\033[32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;36m#\\033[0m#\\033[32m#\\033[0m#\\033[4m#\\033[0m\")\nprint(\"\\033[1;32m#\\033[0m\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m\")\nprint(\"#\\033[0m\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0m#\\033[1;32m#\\033[0m#\\033[4m#\\033[0"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n\") == \"1\\n2\\n\"\nassert solution(\"3\\n10\\n\") == \"1\\n2\\n\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\nassert solution('10000') == '1'\nassert solution('10') == '4'\nassert solution('100') == '1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"10\") == \"4\""
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n4000\n1\n9\n800\n90\n\n''') == '1 2 3 4'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n5009\n7\n9876\n10000\n10\n''') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n100\n10\n100\n''') == '1'\nassert solution('''\n10\n10\n10\n''') == '2'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\") == \"3\"\nassert solution(\"2\\n6\") == \"2\"\nassert solution(\"3\\n12\") == \"4\"\nassert solution(\"4\\n9\") == \"4\"\nassert solution(\"5\\n11\") == \"3\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n5\n7\n''') == '2'\nassert solution('''\n10\n9999\n''') == '3'\nassert solution('''\n9\n10\n''') == '2'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('12') == '2'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2 2 2 2 3 3\""
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n4 1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '2 3 3 3 3 3'\nassert solution('5\\n4 1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '4 4 4 1 4'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\"\n    ) == \"2 2 2 2 1 2 1 3 3 1\""
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''5\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2'''\n) == '1 1 1 1 1 1 2 2 2 2'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\nassert solution('6\\n4 6 2 1 5 3\\n3\\n2 3 1\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"7\\n6 6 2 1 5 3\") == \"2 3 3 2 2 1 3\"\nassert solution(\"7\\n5 6 2 1 5 3\") == \"1\"\nassert solution(\"8\\n4 6 2 1 5 3\") == \"2 2 2 2 2 2\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n5\\n1 2 3 4 5') == '1 1 1 1 1'\nassert solution('6\\n4 6 2 1 5 3') == '3 3 3'\nassert solution('4\\n4 6 2 1 5 3') == '2 3 3 2 1 3'\nassert solution('10\\n8 8 6 1 2 3 4 5 6 7 8') == '5 5 5 1 2 3 4 3 2 1 3'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2''') == '1 1 1 1 1'\nassert solution('''4\n2 3 1\n3 2 1\n2 2 2\n1\n2''') == '3 3 3 3 3'\nassert solution('''7\n3\n2 3 1\n3 2 1\n2 2 2\n1\n2\n3\n1''') == '3 3 3 3 3 3 3 3'\nassert solution('''5\n2\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1 1 2 2 3 4 4 5'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '4 4 4 4 4'"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '2 2 2 2 1 4 1 3 4 3 2 2'\nassert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1 1 1 3 4 3 2 2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '1'"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n    '''\n) == '2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 2 4 1\\n3\\n3') == '2'\nassert solution('5\\n1 2 3 4 5\\n1 2 3 4 5\\n4\\n1 2 3 4 5\\n1 2 3 4 5\\n3\\n1 2 3 4 5\\n1 2 3 4 5\\n4\\n1 2 3 4 5\\n1 2 3 4 5\\n2\\n1 2 3 4 5\\n1 2 3 4 5\\n2\\n3\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n3\\n1 2 3 4 5\\n1 2 3 4 5\\n2\\n') == '2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '2'\nassert solution('''3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"3\""
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '1'\nassert solution('''\n3\n1 2 3\n3\n1 2\n''') == '2'\n'''\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\n\nstdin = \"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '1\\n'\n    '5\\n'\n    '1 2 3 4 5\\n'\n    '3\\n'\n    '1 2 2\\n'\n    '4\\n'\n    '1 1 1 1\\n') == '3'\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"0 0 1 2\"\nassert solution(\"10 4\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"10 4\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"0 0 1 2\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n10 4 10 15\n1 2\n4 3\n''') == '0 0 1 2 '\nassert solution('''\n4 2\n10 4 10 15\n1 2\n4 3\n''') == '5 4 0 5 3 3 9 0 2 5 '\nassert solution('''\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n''') == '5 4 0 5 3 3 9 0 2 5 '\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"0 0 1 2\", \"Example 1\"\nassert solution(\"10 4\") == \"5 4 0 5 3 3 9 0 2 5\", \"Example 2\"\nassert solution(\"10 4\") == \"0 0 1 2 3 3 9 0 2 5\", \"Example 3\"\nassert solution(\"10 4\") == \"0 0 1 2 3 3 9 0 2 5\", \"Example 4\""
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '0 0 1 2'\nassert solution('10 4') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4\\n4 4 3 7\\n5 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '0 0 1 2'\nassert solution('10 4') == '5 4 0 5 3 3 9 0 2 5'\n\n--------------------------------------------------------------------------------------------------------------------\n\n5 6\n3 1\n2 3\n3 2\n1 2\n2 3\n3 2\n3 1\n2 3\n3 2\n3 1\n2 1\n\n--------------------------------------------------------------------------------------------------------------------\n\n7 8\n3 7\n2 4\n2 4\n2 5\n1 2\n3 4\n3 3\n3 5\n4 5\n4 6\n4 6\n3 5\n3 6\n3 6\n\n--------------------------------------------------------------------------------------------------------------------\n\n10 8\n5 6\n2 3\n4 3\n2 6\n3 5\n2 5\n1 3\n1 6\n1 4\n1 5\n1 6\n2 6\n3 6\n3 5\n2 5\n2 4\n1 5\n2 4\n2 6\n1 3\n1 6\n\n--------------------------------------------------------------------------------------------------------------------\n\n13 15\n6 9\n3 7\n4 2\n5 3\n5 1\n1 3\n4 1\n2 4\n2 6\n1 6\n4 2\n1 2\n1 1\n3 1\n3 5\n2 5\n2 5\n2 4\n3 5\n2 6\n2 5\n\n--------------------------------------------------------------------------------------------------------------------\n\n12 16\n5 1\n3 1\n4 1\n2 6\n4 2\n4 1\n1 4\n1 2\n1 3\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n12 16\n5 1\n3 1\n4 1\n2 6\n4 2\n4 1\n1 4\n1 2\n1 3\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n20 16\n5 1\n3 1\n4 1\n2 6\n4 2\n4 1\n1 4\n1 2\n1 3\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n23 16\n6 2\n4 3\n3 4\n1 4\n2 4\n1 2\n2 1\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n22 16\n5 1\n3 1\n4 1\n2 6\n4 2\n4 1\n1 4\n1 2\n1 3\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n25 16\n5 3\n1 3\n3 4\n2 4\n2 2\n2 1\n1 2\n2 1\n1 3\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n23 17\n5 2\n3 1\n4 2\n1 4\n2 3\n3 2\n3 1\n2 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n21 17\n4 2\n3 2\n1 2\n2 1\n2 3\n2 4\n2 5\n1 3\n1 2\n1 2\n2 1\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n23 18\n5 2\n3 1\n4 1\n2 4\n2 2\n1 2\n1 3\n1 3\n2 3\n3 3\n3 1\n2 6\n1 3\n1 3\n1 4\n1 1\n2 4\n3 1\n3 3\n3 5\n1 3\n\n--------------------------------------------------------------------------------------------------------------------\n\n15 18\n4 4\n3 4\n2 3\n3 3\n3 2\n2 3\n3 2\n3 1\n2 1\n3 1\n1 3\n1 4\n2 1\n2 3\n2 1\n2 2\n3 1\n2 3\n3 1\n1 3\n1 4\n1 1\n1 2\n2 1\n2 3\n2 4\n1 1\n\n--------------------------------------------------------------------------------------------------------------------\n\n15 19\n4 4\n3 4\n2 4\n3 3\n3 2\n2 3\n3 2\n3 1\n2 1\n3 1\n1 3\n1 4\n2 1\n2 3\n2 1\n2 2\n3 1\n2 3\n3 1\n1 3\n1 4\n1 1\n1 2\n2 1\n2 3\n2 4\n1 1\n\n--------------------------------------------------------------------------------------------------------------------\n\n8 10\n4 4\n2 2\n1 4\n3 3\n2 4\n3 4\n1 1\n1 4\n2 1\n1 1\n1 1\n2 1\n2 1\n3 1\n1 1\n1 1\n1 1\n\n--------------------------------------------------------------------------------------------------------------------\n\n13 15\n4 2\n3 7\n2 4\n2 4\n2 5\n1 2\n3 5\n3 4\n3 5\n3 6\n4 5\n4 6\n4 5\n3 6\n3 5\n2 5\n1 6\n2 5\n\n--------------------------------------------------------------------------------------------------------------------\n\n11 15\n4 4\n2 2\n1 4\n3 3\n3 2\n2 3\n3 2\n3 1\n2 1\n2 1\n3 1\n1 3\n2 1\n2 1\n2 1\n2 1\n3 1\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\n    \"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"0 0 1 2\"\nassert solution(\"10 4\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"0 0 1 2\"\nassert solution(\"10 4\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"abb\"\nassert solution(\"1 3 2\") == \"bac\"\nassert solution(\"1 3 2 3\") == \"abac\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"NO\"\n\nassert solution([1, 2, 3]) == \"abb\"\nassert solution([1, 3, 2]) == \"ab\"\nassert solution([1, 2, 3, 4]) == \"ab\"\nassert solution([1, 3, 4, 2]) == \"ab\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 3 2\") == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"a b\"\nassert solution(\"3 1\") == \"a b c\"\nassert solution(\"3 2\") == \"a b c\"\nassert solution(\"5 4\") == \"abcd\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == \"NO\"\nassert solution('1 2 3') == \"YES\"\nassert solution('1 3 2') == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n1 2 3\n1 3 2\n\"\"\") == \"YES\""
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n1 3 2\\n\") == \"YES\"\nassert solution(\"1 2\\n1 3\\n\") == \"NO\"\n\n\n'''\nfrom itertools import permutations"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 2 3\n1 3 2\n''') == 'YES'\nassert solution('''\n3 2\n1 2 3\n1 3 2\n''') == 'YES'\nassert solution('''\n3 2\n1 2 3\n1 3 2\n''') == 'NO'\nassert solution('''\n4 5\n1 2 4\n3 2 1\n2 4 3\n3 4 1\n4 3 2\n3 1 2\n3 1 4\n''') == 'YES'\nassert solution('''\n4 5\n1 2 4\n3 2 1\n2 4 3\n3 4 1\n4 3 2\n3 1 2\n3 1 4\n''') == 'NO'"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n\") == \"YES\"\nassert solution(\"3 2\\n1 3 2\\n\") == \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 2 3 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '43'\nassert solution('4') == '64'\nassert solution('6') == '69'\nassert solution('2') == '3'\nassert solution('1 4') == '2 1'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"43\"\nassert solution(\"4\") == \"69\"\nassert solution(\"6\") == \"6 1 3 5 2 4\""
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n20 10 20\\n') == '43\\n1 3 2'\nassert solution('4\\n10 10 10 10 10\\n') == '69\\n6 1 3 5 2 4'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69\\n6 1 3 5 2 4'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n20 10 20\n''') == '43'\n\nassert solution('''\n4\n10 10 10 10\n''') == '69'\n\nassert solution('''\n6\n5 4 5 4 4 5\n''') == '69'\n\nassert solution('''\n2\n1 4\n''') == '3'\n\nassert solution('''\n2\n1 4\n''') == '2'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"43\"\n\nassert solution(sys.stdin.read()) == \"6 1 3 5 2 4\"\n\nassert solution(sys.stdin.read()) == \"69\"\n\nassert solution(sys.stdin.read()) == \"2 1 4 3 5 2 4\"\n\nassert solution(sys.stdin.read()) == \"69\""
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n20 10 20\n\n''') == '43'\nassert solution('''\n4\n10 10 10 10\n\n''') == '69'\nassert solution('''\n6\n5 4 5 4 4 5\n\n''') == '69'\nassert solution('''\n2\n1 4\n\n''') == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n20 10 20\n''') == '43'\nassert solution('''4\n10 10 10 10\n''') == '64'\nassert solution('''6\n5 4 5 4 4 5\n''') == '69'\nassert solution('''2\n1 4\n''') == '3'"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '43'\nassert solution('4') == '69'\nassert solution('6') == '69'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"43\"\nassert solution(\"4\") == \"69\"\nassert solution(\"6\") == \"6 1 3 5 2 4\"\nassert solution(\"2\") == \"2 1\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '43'\nassert solution() == '2 1 4 3 5 2 4'\n\nassert solution() == '64'\nassert solution() == '6 1 3 5 2 4'\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\nassert solution('5\\n4 2 5 1 1') == '4'\nassert solution('5\\n5 4 2 1 3') == '1'\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 2 5 1 3\n''') == '3'\nassert solution('''10\n4 2 5 1 3 6 7 8 9 10\n''') == '2'\n'''\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n4 2 5 1 3\n''') == '3'\n'''"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\nassert solution('10') == '3'\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('5') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"100\") == \"25\"\nassert solution(\"5\") == \"3\"\n\n[\uc785\ub825]\n\n\uccab \ubc88\uc9f8 \uc904\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uc218 T\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 \uc790\uc5f0\uc218 N (1 \\leq N \\leq 2 \\times 10^5)\uc774 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\ub450 \ubc88\uc9f8 \uc904\uc5d0 N\uac1c\uc758 \uc790\uc5f0\uc218 P_1, \\ldots, P_N (P_1 \\leq P_2 \\leq N)\uac00 \uacf5\ubc31\uc744 \ub450\uace0 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n3\n\n4 2 5 1 3\n\n4\n\n5\n\n1 2 3 4 5\n\n5\n\n2 3 4 5 1\n\n4\n\n5\n\n1 2 3 4 5\n\n1\n\n2\n\n2\n\n3\n\n5\n\n2 5 1 3\n\n2\n\n5\n\n1 2 3 4 5\n\n2\n\n3\n\n3\n\n5\n\n1 2 3 4 5\n\n3\n\n1 5 2 4 3\n\n1\n\n5\n\n3 1 2 4\n\n1\n\n1\n\n1\n\n4\n\n5\n\n3\n\n5\n\n3\n\n5\n\n2 1 3 5\n\n5\n\n2 1 3 5\n\n5\n\n1\n\n2\n\n2\n\n2\n\n2\n\n4\n\n5\n\n2 4 1 3\n\n4\n\n5\n\n2 4 1 3\n\n4\n\n2 4 1 3\n\n4\n\n2 4 1 3\n\n5\n\n2 5 1 3\n\n3\n\n3\n\n3\n\n5\n\n1 2 3 4 5\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n2\n\n2\n\n2\n\n2\n\n3\n\n3\n\n3\n\n2\n\n2\n\n2\n\n2\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n2\n\n2\n\n1\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2 4 1 2\") == \"3\"\nassert solution(\"10 5 2 2 4 3 1 3\") == \"3\"\nassert solution(\"10 10 10 10 10 10 10 10 10\") == \"10\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4 2 5 1 3\") == \"3\"\n\n'''"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\""
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"5 4 2 1 2 2\") == \"2\"\nassert solution(\"10 3 1 1 1 1 1 1 1 1 1\") == \"1\""
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 4 5') == '1'\nassert solution('1') == '0'\nassert solution('1 2 1 1 2 1 3 2 1 1 3') == '0'\nassert solution
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('4 3 3 3 3') == '1'\nassert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('10') == '9'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == '1'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == ''\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == ''\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n3 3 3 3\n''') == '1'\nassert solution('''10\n8 1 4 3 2 9 7 6 5 5\n''') == '6'\nassert solution('''10\n1 2 3 4 5 6 7 8 9\n''') == '7'\nassert solution('''5\n5 5 5 5 5\n''') == '1'\nassert solution('''1\n0\n''') == '0'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 3 3 3') == '1'\nassert solution('5\\n1 2 3 4 5\\n') == '3'\nassert solution('6\\n2 4 2 4 3 3\\n') == '1'\n\nstdin = sys.stdin.read()\nn = int(stdin.splitlines()[0])\na = list(map(int, stdin.splitlines()[1].split()))\n\na_counts = collections.Counter(a)\nprint(a_counts)\n\nbest = float('inf')\n\nfor index, count in enumerate(a_counts):\n    if count > 1:\n        to_remove = count - 1\n        print(f\"To remove {to_remove} occurrences of {count}\")\n        a_counts[count] -= 1\n        a_counts[index] -= to_remove\n        print(a_counts)\n\n        if sum(a_counts.values()) < best:\n            best = sum(a_counts.values())\n            print(best)\n\nprint(best)\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\nIf there are no valid solutions, print -1.\nsolution(\"1 2 3 4 5\") == \"-1\"\n\nIf there are many valid solutions, print the index of the first valid solution (starting from 0).\nsolution(\"0 1 2 3 4 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 2 3 4 5') == '1'"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0 2 3 4 5''') == '1'\nassert solution('''0 0 2 3 4 5''') == '2'\nassert solution('''0 0 0 2 3 4 5''') == '3'\nassert solution('''0 0 0 0 2 3 4 5''') == '4'\nassert solution('''0 0 0 0 0 2 3 4 5''') == '5'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '0'\n\"\"\"\n\nx_1 = int(input())\nx_2 = int(input())\nx_3 = int(input())\nx_4 = int(input())\nx_5 = int(input())"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2 3 4 5''') == '1'\nassert solution('''5 0 0 0 0''') == '4'\nassert solution('''0 2 3 4 5''') == '1'\nassert solution('''0 0 0 0 0''') == '5'\nassert solution('''0 0 0 0 0''') == '5'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\""
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('0 1 2 3 4') == '0'\nassert solution('0 0 0 0 0') == '5'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '1'\nassert solution('2 2 3 4 5') == '2'\nassert solution('3 2 3 4 5') == '3'\nassert solution('4 2 3 4 5') == '4'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"3 4\") == \"1\""
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == '0'"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\nassert solution(\"100 3\\n\") == \"0\"\nassert solution(\"100 1\\n\") == \"0\"\nassert solution(\"1 5\\n\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5') == '0'\nassert solution('4 5') == '1'\nassert solution('10 2') == '4'\nassert solution('10 4') == '0'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\nassert solution(\"3\\n1 2 3\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\nassert solution(\"2\\n1 10 100\\n\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Yes\", \"Test #1 Failed\"\nassert solution(\"2\") == \"No\", \"Test #2 Failed\"\nassert solution(\"10\") == \"Yes\", \"Test #3 Failed\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"1\") == \"Yes\"\n\n--------------------------------------------------\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n1 10 100\\n\"\n) == \"Yes\"\nassert solution(\n    \"2\\n10 10\\n\"\n) == \"Yes\"\nassert solution(\n    \"1\\n1\\n\"\n) == \"No\"\nassert solution(\n    \"1\\n10\\n\"\n) == \"No\"\nassert solution(\n    \"1\\n10\\n10\\n\"\n) == \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"No\"\nassert solution(\"axyx\") == \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"asd\") == \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('yx') == 'Yes'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nx\ny\n''') == 'Yes'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"zyx\") == \"No\"\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2\") == \"YES\"\nassert solution(\"2 9 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 1 2\") == \"NO\"\nassert solution(\"0 5 2\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 5 1') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\nassert solution(\"1 5 1\\n\") == \"NO\"\nassert solution(\"8 1 1\\n\") == \"NO\"\nassert solution(\"3 2 2\\n\") == \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 4 5') == 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 1 9\") == \"YES\"\n\nassert solution(\"7 9 1\") == \"NO\"\n\nassert solution(\"5 1 1\") == \"YES\"\n\nassert solution(\"7 9 1\") == \"NO\"\n\nassert solution(\"7 1 1\") == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\nassert solution(\"1 2 3 4 5 6\\n\") == \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 4 5') == 'YES'\nassert solution('1 2 3 4 5 6') == 'YES'\nassert solution('1 2 3 4 5 6 7') == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5\\n\") == \"YES\"\nassert solution(\"2 3 1\\n\") == \"NO\"\n\"\"\"\nimport math\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('3 7 1') == 'NO'\nassert solution('1 4 5') == 'YES'\nassert solution('2 4 5') == 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('1 2 4') == 'YES'\nassert solution('5 5 4') == 'NO'\nassert solution('11 11 4') == 'NO'\nassert solution('7 1 4') == 'YES'\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n\n''') == '1'\nassert solution('''\n1 2\n\n''') == '1'\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == \"1\"\nassert solution('3 3') == \"9\"\nassert solution('3 5') == \"10\"\nassert solution('5 5') == \"20\""
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '1'\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\"2 2\"]) == \"1\"\nassert solution([\"1 1\"]) == \"0\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\n---Input---\n9 12 2\n\n---Output---\n3\n\nThere is just enough room for three, as shown below:\nFigure\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13 3 1') == '3'\nassert solution('100 200 100') == '2'\nassert solution('5 5 4') == '4'\nassert solution('4 5 2') == '2'\nassert solution('10 10 10') == '1'\n\n'''"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1\") == \"2\"\n\n***\n\nX, Y, Z = input().split()\n\nX, Y, Z = int(X), int(Y), int(Z)"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13 3 1') == '3'\nassert solution('9 3 3') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 1\") == \"3\", \"Test #1 Failed\"\nassert solution(\"10 2 1\") == \"2\", \"Test #2 Failed\"\nassert solution(\"30 3 2\") == \"3\", \"Test #3 Failed\"\n\"\"\"\n\nx, y, z = map(int, input().split())\n\nprint(x // (y + 2 * z) + 1 if x > (y + 2 * z) else x // (y + 2 * z) - 1)\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\\n\"\nassert solution(\"1\\n\") == \"1\\n\"\nassert solution(\"2\\n\") == \"2\\n\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nX Y Z\n''') == '3'\n'''\n    -- Constraints --\n    - All input values are integers.\n    - 1 \\leq X, Y, Z \\leq 10^5\n    - Y+2Z \\leq X\n\n-----Input-----\nX Y Z\n\n-----Output-----\n3\n\nThere is just enough room for three, as shown below:\nFigure\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == \"3\"\nassert solution(\"12 3 10\") == \"2\"\nassert solution(\"5 2 9\") == \"4\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\"\nassert solution(\"1 2 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '2'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == '2'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('6') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 2\n2 4\n3 1\n1 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n0 0\n1 2\n1 3\n1 4\n4 5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n0 0\n0 1\n0 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n0 0\n1 1\n2 2\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n'\n    '2 0\\n'\n    '3 1\\n'\n    '1 3\\n'\n    '4 2\\n'\n    '0 4\\n'\n    '5 5\\n'\n) == '2'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\") == \"2\"\nassert solution(\"5\\n0 4\\n5 5\\n4 2\\n0 4\") == \"1\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == '2'\nassert solution('6\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == '1'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n0 3') == '7'\nassert solution('2 1\\n0 1') == '1'\nassert solution('2 0\\n0 1') == '1'\nassert solution('3 5\\n0 1 0 1 0') == '5'\nassert solution('5 10\\n0 0 1 0 1 0') == '10'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '7'\nassert solution('3 1') == '4'"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('3 3') == '6'\nassert solution('4 5') == '8'\nassert solution('5 6') == '8'\nassert solution('6 7') == '10'\n\n------\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n3 3 2\n\"\"\") == \"7\"\nassert solution(\"\"\"\n2 2\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n2 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10 10\n0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n20 20\n
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\nassert solution(\"2 10\\n0 5 5\") == \"13\"\nassert solution(\"2 10\\n0 5 3\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 4\n0 3\n''') == '7'\n\nassert solution('''\n1 2\n0 3\n''') == '7'\n\nassert solution('''\n3 2\n0 1\n''') == '5'\n\nassert solution('''\n1 1\n0 0\n''') == '1'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"7\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"7\"\nassert solution(\"3 6\") == \"7\"\nassert solution(\"4 7\") == \"7\"\nassert solution(\"5 8\") == \"7\"\nassert solution(\"6 9\") == \"7\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"7\"\nassert solution(\"6 0\") == \"0\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n''') == \"1\"\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == \"2\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n''') == '1'\nassert solution(\n'''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '0'\nassert solution(\n'''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '2'"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '0'"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '1'\nassert solution('10') == '2'"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8\nL 100\nR 100000\nR 123\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\nprint('\"Run\" is good for debugging purposes, \"Check\" is for real world scenarios')\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\n\"\"\"\n--- Day 7: Some Assembly Required ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\nYour puzzle answer was 981.\n\n--- Part Two ---\n\nThe Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.\n\nUsing the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.\n\nIn your expense report, what is the product of the three entries that sum to 2020?\n\nYour puzzle answer was 169567453.\n\nBoth parts of this puzzle are complete! They provide two gold stars: **\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('10') == '4'\nassert solution('25') == '6'\nassert solution('30') == '6'\nassert solution('14') == '6'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"4\"\nassert solution(\"25\") == \"6\"\nassert solution(\"30\") == \"6\"\nassert solution(\"14\") == \"6\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"4\"\nassert solution(\"25\") == \"6\"\nassert solution(\"30\") == \"6\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\\n1\") == \"0\"\nassert solution(\"1\\n2\\n3\") == \"1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n12\n30\n10\n20\n13\n''') == '6'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"6\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1000000000000000000\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '1\\n0'\nassert solution('1\\n2\\n4') == '0\\n0'\nassert solution('1\\n2\\n3') == '0\\n0'\nassert solution('1\\n2\\n3\\n4') == '1\\n0'\nassert solution('1\\n2\\n3\\n4\\n5') == '0\\n0'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    2\n    5\n    1\n''') == \"1\"\nassert solution('''\n    4\n    5\n    2\n''') == \"3\"\nassert solution('''\n    15\n    1\n    1\n''') == \"0\"\nassert solution('''\n    5\n    3\n    1\n''') == \"2\"\nassert solution('''\n    1\n    2\n    3\n''') == \"2\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\nassert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"4\"\nassert solution(\"2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"0\""
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1\n30\n\"\"\") == \"6\"\n\nassert solution(\n\"\"\"\n4\n5\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n7\n1000000000000000000\n\"\"\") == \"72\""
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\\nNO\\nYES\\nYES\"\nassert solution() == \"YES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'YES'\nassert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'NO'\nassert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'YES'\nassert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'NO'"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"YES\\nNO\\nYES\\nYES\", \"First test case\"\nassert solution(\"5\") == \"YES\\nYES\\nYES\\nNO\", \"Second test case\"\nassert solution(\"6\") == \"YES\\nNO\\nYES\\nYES\\nYES\", \"Third test case\"\nassert solution(\"7\") == \"NO\", \"Fourth test case\"\n\nIn the fourth test case of the example, you first place the figure in the first column and after the second step of the process, the field becomes $[0, 0]$. Then place the figure in the second column and after the second step of the process, the field becomes $[0, 0]$.\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == \"YES\"\nassert solution('''4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == \"NO\"\nassert solution('''3\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == \"YES\"\nassert solution('''3\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100''') == \"NO\"\nassert solution('''2\n2\n1 1\n2\n11 11\n1\n100''') == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1''') == 'YES', \"First\"\n\nassert solution('''5\n4\n1 1 3\n3\n1 2 1\n2\n1 1 2 1\n1\n3\n3''') == 'YES', \"Second\"\n\nassert solution('''5\n4\n1 1 3\n3\n1 2 1\n2\n1 1 2 1\n1''') == 'NO', \"Third\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n5\n1 1 2 1\n3\n1 1 2 1\n2\n11 11\n2\n100\n''') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1 1 3') == 'YES\\nYES\\nYES\\nYES\\n'\nassert solution('2\\n3\\n1 1 3\\n2\\n11 11\\n1\\n100') == 'YES\\nNO\\nYES\\nYES\\n'\nassert solution('3\\n3\\n1 1 3\\n2\\n11 11\\n1\\n100') == 'YES\\nNO\\nYES\\nYES\\n'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"7\\n\"\n    \"abacaba\\n\"\n    \"bacabaa\\n\"\n    ) == \"4\\n\"\n\nassert solution(\n    \"5\\n\"\n    \"zcabd\\n\"\n    \"dbacz\\n\"\n    ) == \"0\\n\""
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7\nabacaba\nbacabaa\n''') == '4'\nassert solution('''5\nzcabd\ndbacz\n''') == '0'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\nabacaba\\nbacabaa\\n') == '4'\nassert solution('5\\nzcabd\\dbacz\\n') == '0'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7\nabacaba\nbacabaa\n''') == '4'\nassert solution('''\n5\nzcabd\ndbacz\n''') == '0'\nassert solution('''\n4\nzcabd\ndbacz\n''') == '1'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nabacaba\\nbacabaa\\n') == '4'\nassert solution('5\\nzcabd\\dbacz\\n') == '0'"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\nassert solution('3') == '0'\nassert solution('12') == '2'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\nabacaba\\nbacabaa\\n\") == \"4\"\nassert solution(\"5\\nzcabd\\ndbacz\\n\") == \"0\"\nassert solution(\"5\\nabacaba\\nabcabba\\n\") == \"3\"\nassert solution(\"5\\nabacaba\\ndbacz\\n\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n\"\n    \"zcabd\\n\"\n    \"dbacz\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nabacaba\nbacabaa\n''') == '4'\nassert solution('''2\nzcabd\ndbacz\n''') == '0'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\nzcabd\ndbacz\n\n''') == '0'\nassert solution('''\n5\nzcabd\ndbacz\n\n''') == '1'"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"8\"\nassert solution(\"100 1 4\") == \"198\"\nassert solution(\"1 1 1000000000\") == \"2999999997\"\nassert solution(\"1 1 999999999\") == \"0\"\nassert solution(\"1 1 999999999\") == \"1\"\n\n\n>>> solution(\"1\")\n1\n>>> solution(\"2\")\n0\n>>> solution(\"10\")\n0\n>>> solution(\"100\")\n198\n>>> solution(\"100 1 4\")\n198\n>>> solution(\"1 1 1000000000\")\n2999999997\n>>> solution(\"1 1 999999999\")\n0\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>> solution(\"1 1 999999999\")\n1\n>>>"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 3') == '8'\nassert solution('1 10 5') == '198'\nassert solution('1 1000000000 1 6') == '2999999997'\nassert solution('1 1 999999999') == '0'\nassert solution('1 1 999999999') == '1'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2 3\n100 1 4''') == '8'\nassert solution('''1 1000000000 1 6''') == '2999999997'\nassert solution('''1 1 999999999''') == '0'\nassert solution('''1 1 999999999''') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '8'\nassert solution('''\n10 1 1\n10 1 2\n10 1 3\n10 1 4\n10 1 5\n10 1 6\n10 1 7\n10 1 8\n10 1 9\n10 1 10\n10 1 11\n10 1 12\n10 1 13\n10 1 14\n10 1 15\n10 1 16\n10 1 17\n10 1 18\n10 1 19\n10 1 20\n10 1 21\n10 1 22\n10 1 23\n10 1 24\n10 1 25\n10 1 26\n10 1 27\n10 1 28\n10 1 29\n10 1 30\n10 1 31\n10 1 32\n10 1 33\n10 1 34\n10 1 35\n10 1 36\n10 1 37\n10 1 38\n10 1 39\n10 1 40\n10 1 41\n10 1 42\n10 1 43\n10 1 44\n10 1 45\n10 1 46\n10 1 47\n10 1 48\n10 1 49\n10 1 50\n10 1 51\n10 1 52\n10 1 53\n10 1 54\n10 1 55\n10 1 56\n10 1 57\n10 1 58\n10 1 59\n10 1 60\n10 1 61\n10 1 62\n10 1 63\n10 1 64\n10 1 65\n10 1 66\n10 1 67\n10 1 68\n10 1 69\n10 1 70\n10 1 71\n10 1 72\n10 1 73\n10 1 74\n10 1 75\n10 1 76\n10 1 77\n10 1 78\n10 1 79\n10 1 80\n10 1 81\n10 1 82\n10 1 83\n10 1 84\n10 1 85\n10 1 86\n10 1 87\n10 1 88\n10 1 89\n10 1 90\n10 1 91\n10 1 92\n10 1 93\n10 1 94\n10 1 95\n10 1 96\n10 1 97\n10 1 98\n10 1 99\n10 1 100\n10 1 101\n10 1 102\n10 1 103\n10 1 104\n10 1 105\n10 1 106\n10 1 107\n10 1 108\n10 1 109\n10 1 110\n10 1 111\n10 1 112\n10 1 113\n10 1 114\n10 1 115\n10 1 116\n10 1 117\n10 1 118\n10 1 119\n10 1 120\n10 1 121\n10 1 122\n10 1 123\n10 1 124\n10 1 125\n10 1 126\n10 1 127\n10 1 128\n10 1 129\n10 1 130\n10 1 131\n10 1 132\n10 1 133\n10 1 134\n10 1 135\n10 1 136\n10 1 137\n10 1 138\n10 1 139\n10 1 140\n10 1 141\n10 1 142\n10 1 143\n10 1 144\n10 1 145\n10 1 146\n10 1 147\n10 1 148\n10 1 149\n10 1 150\n10 1 151\n10 1 152\n10 1 153\n10 1 154\n10 1 155\n10 1 156\n10 1 157\n10 1 158\n10 1 159\n10 1 160\n10 1 161\n10 1 162\n10 1 163\n10 1 164\n10 1 165\n10 1 166\n10 1 167\n10 1 168\n10 1 169\n10 1 170\n10 1 171\n10 1 172\n10 1 173\n10 1 174\n10 1 175\n10 1 176\n10 1 177\n10 1 178\n10 1 179\n10 1 180\n10 1 181\n10 1 182\n10 1 183\n10 1 184\n10 1 185\n10 1 186\n10 1 187\n10 1 188\n10 1 189\n10 1 190\n10 1 191\n10 1 192\n10 1 193\n10 1 194\n10 1 195\n10 1 196\n10 1 197\n10 1 198\n10 1 199\n10 1 200\n10 1 201\n10 1 202\n10 1 203\n10 1 204\n10 1 205\n10 1 206\n10 1 207\n10 1 208\n10 1 209\n10 1 210\n10 1 211\n10 1 212\n10 1 213\n10 1 214\n10 1 215\n10 1 216\n10 1 217\n10 1 218\n10 1 219\n10 1 220\n10 1 221\n10 1 222\n10 1 223\n10 1 224\n10 1 225\n10 1 226\n10 1 227\n10 1 228\n10 1 229\n10 1 230\n10 1 231\n10 1 232\n10 1 233\n10 1 234\n10 1 235\n10 1 236\n10 1 237\n10 1 238\n10 1 239\n10 1 240\n10 1 241\n10 1 242\n10 1 243\n10 1 244\n10 1 245\n10 1 246\n10 1 247\n10 1 248\n10 1 249\n10 1 250\n10 1 251\n10 1 252\n10 1 253\n10 1 254\n10 1 255\n10 1 256\n10 1 257\n10 1 258\n10 1 259\n10 1 260\n10 1 261\n10 1 262\n10 1 263\n10 1 264\n10 1 265\n10 1 266\n10 1 267\n10 1 268\n10 1 269\n10 1 270\n10 1 271\n10 1 272\n10 1 273\n10 1 274\n10 1 275\n10 1 276\n10 1 277\n10 1 278\n10 1 279\n10 1 280\n10 1 281\n10 1 282\n10 1 283\n10 1 284\n10 1 285\n10 1 286\n10 1 287\n10 1 288\n10 1 289\n10 1 290\n10 1 291\n10 1 292\n10 1 293\n10 1 294\n10 1 295\n10 1 296\n10 1 297\n10 1 298\n10 1 299\n10 1 300\n10 1 301\n10 1 302\n10 1 303\n10 1 304\n10 1 305\n10 1 306\n10 1 307\n10 1 308\n10 1 309\n10 1 310\n10 1 311\n10 1 312\n10 1 313\n10 1 314\n10 1 315\n10 1 316\n10 1 317\n10 1 318\n10 1 319\n10 1 320\n10 1 321\n10 1 322\n10 1 323\n10 1 324\n10 1 325\n10 1 326\n10 1 327\n10 1 328\n10 1 329\n10 1 330\n10 1 331\n10 1 332\n10 1 333\n10 1 334\n10 1 335\n10 1 336\n10 1 337\n10 1 338\n10 1 339\n10 1 340\n10 1 341\n10 1 342\n10 1 343\n10 1 344\n10 1 345\n10 1 346\n10 1 347\n10 1 348\n10 1 349\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\n''') == '198'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\n''') == '2999999997'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\n''') == '0'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\n''') == '1'"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 999999999\n1 1 999999999''') == '8'\nassert solution(\n'''6\n5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 999999999\n1 1 999999999''') == '198'\nassert solution(\n'''6\n5 2 3\n100 1 4\n1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999''') == '2999999997'\nassert solution(\n'''6\n5 2 3\n100 1 4\n1 10 5\n1 1 1000000000\n1 1 999999999\n1 1 999999999''') == '0'\nassert solution(\n'''6\n5 2 3\n100 1 4\n1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999''') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 999999999\n''') == '198'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 999999999\n1 1 999999999\n''') == '2999999997'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 999999999\n1 1 999999999\n''') == '0'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 999999999\n1 1 999999999\n''') == '1'"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\") == \"8\"\nassert solution(\"100 1 4\") == \"198\"\nassert solution(\"1 1000000000 1 6\") == \"-17\"\nassert solution(\"1 1 999999999\") == \"2999999997\"\nassert solution(\"1 1 999999999\") == \"2999999997\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 3') == '8'\nassert solution('100 1 4') == '198'\nassert solution('1 10 5') == '2999999997'\nassert solution('1000000000 1 6') == '0'\nassert solution('1 1 1000000000') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 1000000000\n1 1 999999999''') == \"8\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1, 3, 9, 13, 27, 6561, 19683, 1350851717672992089\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '9'\nassert solution('12') == '15'\nassert solution('30') == '31'\nassert solution('3620') == '3621'\nassert solution('10000') == '6983'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1\\n'\n    '2\\n'\n    '6\\n'\n    '13\\n'\n    '14\\n'\n    '3620\\n'\n    '10000\\n'\n    '1000000000000000000\\n') == '3'\nassert solution(\n    '7\\n'\n    '11\\n'\n    '18\\n'\n    '90\\n'\n    '100\\n'\n    '1010\\n'\n    '10\\n'\n    '10101\\n'\n    '10000000000\\n') == '10'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('1000000000000000000') == '19683'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '3'\n\nassert solution('''\n1\n3\n9\n13\n27\n6561\n19683\n1350851717672992089\n''') == '27'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n4\\n5\\n9\\n12\\n3\\n7\\n19\\n20\\n6\\n4\\n25\") == \"3\""
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '3'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2\n6\n7\n30\n''') == '27'\nassert solution('''\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n1\n10\n''') == '10'\nassert solution('''\n2\n5\n''') == '9'\nassert solution('''\n3\n7\n''') == '3'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '3'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '9'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '13'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '27'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '6561'\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\") == \"77\"\nassert solution(\"\"\"\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\") == \"55\"\nassert solution(\"\"\"\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\") == \"10\"\nassert solution(\"\"\"\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n1\n1\n1\n''') == \"1\"\nassert solution('''\n1\n1\n10\n10\n1\n''') == \"1\"\nassert solution('''\n1\n1\n10\n1\n1\n''') == \"1\"\nassert solution('''\n1\n1\n10\n1\n1\n''') == \"1\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1 1\\n2 2\") == \"1\\n1\\n1\\n\"\nassert solution(\"2\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"70\"\nassert solution(input) == \"77\"\nassert solution(input) == \"177177\"\nassert solution(input) == \"999999999000000000\"\nassert solution(input) == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '70', 'First'\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77', 'Second'\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '177177', 'Third'\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '999999999000000000', 'Fourth'\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '999999999', 'Fifth'\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == \"777777777777777\"\nassert solution('''\n2\n10 10 8 5 3\n10 11 9 1 10\n''') == \"55\"\nassert solution('''\n3\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n1000000000 1000000000 1 1 1000000000\n''') == \"999999999000000000\"\nassert solution('''\n1\n1000000000 1000000000 1 1 1\n''') == \"999999999000000000\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n''') == \"70\"\nassert solution('''\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n''') == \"77\"\nassert solution('''\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n''') == \"177177\"\nassert solution('''\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n''') == \"999999999000000000\"\nassert solution('''\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n''') == \"999999999\""
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"70\"\nassert solution(\"12343 43 4543 39 123212\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"10 11 2 1 5\") == \"55\"\nassert solution(\"10 11 9 1 10\") == \"77\""
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77'\n\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '70'\n\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '55'\n\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '10'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\\n0\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 7\n7 3\n3 7''') == '0'\nassert solution('''3\n3 3\n3 3\n3 5''') == '0'\nassert solution('''6\n2 4\n2 3\n4 2\n6 3\n3 2\n6 4''') == '1'\nassert solution('''4\n4 8\n4 6\n6 4\n8 8''') == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"1\"\nassert solution(\"9 3\") == \"2\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '1'\nassert solution('''\n5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '0'\nassert solution('''\n5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '2'\nassert solution('''\n5\n2 4\n10 10\n2 4\n7 4\n9 3\n''') == '2'\nassert solution('''\n5\n2 4\n10 10\n2 4\n7 4\n9 3\n''') == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"1\"\nassert solution(\"9 3\") == \"2\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '1'\nassert solution('9 3') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '0'\nassert solution('10 10') == '1'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2 3\n10 10\n2 4\n7 4\n9 3''') == \"1\"\nassert solution('''5\n2 3\n2 4\n7 4\n9 3\n''') == \"0\"\nassert solution('''5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == \"2\"\nassert solution('''5\n1 2\n1 3\n2 4\n2 5\n3 6''') == \"3\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"13\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n11\\n222\\n111\\n222\\n\") == \"13\"\nassert solution(\"3\\n1\\n2\\n1\\n\") == \"4\"\nassert solution(\"3\\n22\\n222\\n111\\n222\\n\") == \"90\"\nassert solution(\"4\\n2\\n1\\n2\\n\") == \"1\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '3'\nassert solution('1') == '4'"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n7777\n22\n111\n''') == '13'\nassert solution('''\n1\n777\n22\n111\n''') == '90'\nassert solution('''\n1\n7777\n22\n111\n''') == '66'\nassert solution('''\n1\n7\n7\n7\n''') == '1'\n\nassert solution('''\n1\n777\n22\n1111\n''') == '14'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '13'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n22\\n9999\\n1\\n777') == '13'\nassert solution('1\\n1\\n22\\n1\\n77') == '2'\n\n---"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1\n2\n22\n22\n777\n''') == '13'\nassert solution('''\n10\n1111\n2222\n2222\n7777\n''') == '14'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n10\n6\n1\n9\n10\n10\n9\n2\n10\n1\n2\n''') == '13'\n\nassert solution('''1\n0\n0\n''') == '1'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '13'\nassert solution(\"11\\n22\\n333\") == '90'"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('22') == '13'\nassert solution('9999') == '90'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n''') == 'YES'\nassert solution('''3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n''') == 'NO'\nassert solution('''4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'YES'\nassert solution('''4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'NO', \"WA\"\nassert solution('2') == 'YES', \"WA\"\nassert solution('3') == 'YES', \"WA\"\nassert solution('4') == 'YES', \"WA\"\nassert solution('5') == 'YES', \"WA\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 3 1 3 2\n6\n1 1 2 2 2 1\n''') == \"YES\"\n\nassert solution('''4\n6\n2 2 2 2 2\n5\n2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == \"YES\"\n\nassert solution('''5\n2\n1 2\n2\n1\n3\n''') == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2') == 'YES\\n2 2'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"YES\""
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 3 1 3 2\n6\n1 1 2 2 2 1\n''') == 'YES'\nassert solution('''4\n6\n1 1 1 1 1\n2\n2 3\n''') == 'NO'\n\nassert solution('''3\n4\n1 1 2 1\n1 1 2 1\n1 1 2 1\n''') == 'YES'\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"[4,2,3]\") == \"5\"\nassert solution(\"[3,-1,0,2]\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\") == \"13\""
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"[4,2,3] 1\") == \"5\"\nassert solution(\"[3,-1,0,2] 3\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4] 2\") == \"13\""
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([4,2,3]) == 5\nassert solution([3,-1,0,2]) == 6\nassert solution([2,-3,-1,5,-4]) == 13\nassert solution([2,3,4,5,6,7,8,9,10,11,12,13]) == 20\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([4,2,3]) == 5\nassert solution([3,-1,0,2]) == 6\nassert solution([2,-3,-1,5,-4]) == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([4,2,3]) == 5\nassert solution([3,-1,0,2]) == 6\nassert solution([2,-3,-1,5,-4]) == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('[4,2,3]\\n1') == '5'\nassert solution('[3,-1,0,2]\\n3') == '6'\nassert solution('[2,-3,-1,5,-4]\\n2') == '13'\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([4,2,3]) == 5\nassert solution([3,-1,0,2]) == 6\nassert solution([2,-3,-1,5,-4]) == 13\nassert solution([-2,4,-1,2,2]) == 7\nassert solution([-1,-1,4,3,-2]) == 4\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\nassert solution(\"[2,-3,-1,5,4]\") == 18\nassert solution(\"[2,-3,-1,5,-4]\") == 18\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"[4,2,3]\") == \"5\"\nassert solution(\"[3,-1,0,2]\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\") == \"13\"\nassert solution(\"[2,-3,4,-1,2]\") == \"7\"\nassert solution(\"[-2,-3,-1,-5,-4]\") == \"13\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == \"true\""
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == 'true'\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == 'false'\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == 'true'"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'true'\nassert solution([3,3,6,5,-2,2,5,1,-9,4]) == 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'true'\n\"\"\""
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 2 1 -6 6 -7 9 1 2 0 1\n''') == 'true'\nassert solution('''\n0 2 1 -6 6 -7 9 1 2 0 1\n''') == 'false'\nassert solution('''\n3 3 6 5 -2 2 5 1 -9 4\n''') == 'true'\nassert solution('''\n3 3 6 5 -2 2 5 1 -9 4\n''') == 'false'\n''')"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'true'\nassert solution(input()) == 'false'"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 0\") == \"false\"\nassert solution(\"2 2 0\") == \"true\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == 'true'\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == 'false'\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == 'true'\n\"\"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == 'true'\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == 'true'\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == 'true'\n\n'''\nclass Solution:\n    def partitionArray(self, A: List[int]) -> bool:\n        '''\n        2-pointer method, + O(n) time complexity.\n        '''\n        n = len(A)\n        if n < 3: return False\n        \n        A.sort()\n        for i in range(n):\n            if i == 0:\n                if A[i]!= A[i+1]:\n                    return False\n            elif i == n-1:\n                if A[i]!= A[i-1]:\n                    return False\n            else:\n                if A[i]!= A[i-1] and A[i]!= A[i+1]:\n                    return False\n        return True"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == 'true'\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == 'false'\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == 'true'\nassert solution('[-2,-1,-6,-5,-4,-3,-2,-1]') == 'true'\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n        length = len(A)\n        if length == 0:\n            return False\n        if length < 3:\n            return False\n        \n        sum_A = sum(A)\n        if sum_A % 3!= 0:\n            return False\n        \n        for i in range(length):\n            if sum_A % 3!= 0:\n                return False\n            sum_A -= A[i]\n        return True\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n') == 'beat\\nvet\\nbeet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet') == \"beat\"\nassert solution('5\\nbed\\nvet\\nbeet') == \"bed\"\nassert solution('10\\nvet\\nbeet\\nbed\\nbeat\\nvet\\nbeet') == \"vet\"\n\n\"\"\"\n\n\"\"\"\nfor i in range(int(input())):\n    n = int(input())\n    a = []\n    a += sorted([str(input()) for i in range(n)])\n    print(''.join(a))\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\nbeat') == 'beet'\nassert solution('7\\nbeat\\nvet') == 'beet'\nassert solution('7\\nbeat\\nvet\\nbet') == 'beet'\nassert solution('7\\nbeat\\nvet\\nbeet') == 'beet'\nassert solution('7\\nbeat\\nvet\\nbed') == 'beet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beat and vet\"\nprint(solution(input()))\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet and vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet') == 'beat'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet') == 'beet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet') == 'beet and vet'\n\n'''\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet and vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet') == 'beat and vet'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n4 8\n''') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n4 8\n''') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 8') == '8'"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '8'\nassert solution('3') == '8'\nassert solution('4') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n7 3\n\n''') == '6', 'TEST 1 ERROR'\nassert solution('''\n4\n7 5 6\n\n''') == '3', 'TEST 2 ERROR'\n\nprint(solution(input()))"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '8'\nassert solution('1') == '1'\nassert solution('100') == '100'\nassert solution('10') == '-1'\nassert solution('10000') == '-1000000'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n8\n''') == '8', \"Minimal\"\nassert solution('''\n2\n10\n''') == '20', \"Minimal\"\nassert solution('''\n10\n1\n''') == '1', \"One\"\nassert solution('''\n1\n10\n''') == '1', \"One\"\nassert solution('''\n4\n1 2\n''') == '4', \"One\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n4 8\n''') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"5\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n2') == '5'\nassert solution('5\\n8\\n7') == '3'\nassert solution('100\\n10\\n1') == '99'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\nassert solution('100') == '1084'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1234\\n150\\n100\") == \"84\"\nassert solution(\"1234\\n123\\n1\") == \"1234\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\nassert solution('100') == '84'\nassert solution('10000') == '10000'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '1234'\n    '150'\n    '100'\n    ) == '84'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"84\"\nassert solution(\"150\") == \"1084\"\nassert solution(\"100\") == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '84'\nassert solution('1234') == '84'\nassert solution('123450') == '84'\nassert solution('10000') == '1084'"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1234\") == \"84\"\nassert solution(\"150\") == \"1084\"\nassert solution(\"100\") == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"84\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '8'\nassert solution('1 2') == '3'\n\n---Output---\n'''\n'''\nN and M are given as input on stdin."
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"8\"\nassert solution(\"2 3\") == \"8\"\nassert solution(\"3 2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\""
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '8'\nassert solution('1 1') == '0'\nassert solution('2 2') == '8'\nassert solution('3 4') == '38'\nassert solution('1 4') == '25'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '8'\nassert solution('2 2') == '8'"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n''') == '8'\nassert solution('''\n3 1\n''') == '1'\nassert solution('''\n3 3\n''') == '2'\nassert solution('''\n4 4\n''') == '5'\nassert solution('''\n5 5\n''') == '4'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"8\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '8'\nassert solution('1') == '8'\nassert solution('2') == '16'\nassert solution('2 2') == '32'\nassert solution('10') == '4096'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '8'\nassert solution('2 1') == '0'\nassert solution('3 3') == '22'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == 'IMPOSSIBLE'\nassert solution('3 3') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 3') == 'POSSIBLE'\nassert solution('3 2\\n1 2\\n2 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == 'POSSIBLE'\nassert solution('1 2') == 'POSSIBLE'\nassert solution('2 3') == 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('1 2') == 'POSSIBLE'\nassert solution('2 3') == 'IMPOSSIBLE'\nassert solution('1 2 3') == 'POSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == 'POSSIBLE'\nassert solution('3 2') == 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 2\n2 3\n''') == 'POSSIBLE'\nassert solution('''\n3 3\n1 2\n2 3\n''') == 'IMPOSSIBLE'\nassert solution('''\n3 4\n1 2\n2 3\n4 5\n3 6\n''') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\nassert solution('3') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"POSSIBLE\"\nassert solution(\"4 3\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"POSSIBLE\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'acdr', 'WRONG'\nprint('AC!') if solution('atcoder') == 'acdr' else print('WA!')\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder\") == \"ac\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('abcde') == 'ace'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('atcoder') == 'atcoder'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"Hurray! All test cases passed\")"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"Hello World!\") == \"Hllo Wrold!\"\nassert solution(\"123456789\") == \"22345678\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('acde') == 'abcdr'\nassert solution('zxcvbn') == 'zyxcvbn'\nassert solution('aab') == 'ab'\nassert solution('aabcd') == 'abcd'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('rng') == 'YES'\nassert solution('rng monkey') == 'NO'\nassert solution('rng rng') == 'YES'\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"a\",\"b\",\"c\",\"a\"]) == \"YES\"\nassert solution([\"a\",\"b\",\"c\",\"a\",\"b\"]) == \"YES\"\nassert solution([\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]) == \"YES\"\nassert solution([\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"d\"]) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"ABCD\") == \"NO\"\nassert solution(\"ABC\") == \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"rng\") == \"YES\"\nassert solution(\"gore\") == \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('hello world') == 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\""
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"apple\") == \"NO\"\nassert solution(\"rng\") == \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng orange banana') == 'YES'\nassert solution('rng orange banana') == 'NO'\nassert solution('apple banana') == 'NO'\nassert solution('apple banana') == 'YES'\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('apple') == 'YES'\nassert solution('grootor') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('zebra') == 'NO'\nassert solution('tiger') == 'YES'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'LESS'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'GREATER'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == 'LESS'\nassert solution('24') == 'GREATER'\nassert solution('36') == 'EQUAL'"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"GREATER\"\nassert solution(\"3\") == \"LESS\"\nassert solution(\"9\") == \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n2') == 'GREATER'\nassert solution('0\\n2') == 'EQUAL'\nassert solution('1\\n0') == 'LESS'\n\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'LESS'\nassert solution('3') == 'EQUAL'\nassert solution('4') == 'GREATER'\nassert solution('5') == 'LESS'\nassert solution('6') == 'EQUAL'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'LESS'\nassert solution('5 5') == 'GREATER'\n\n=== RESTART: /Users/agha/Documents/data_structures_and_algorithms/solutions/lesson5_solution.py ===\n\ninput : 5\noutput : LESS\n\n==== RESTART: /Users/agha/Documents/data_structures_and_algorithms/solutions/lesson5_solution.py ======\n\ninput : 5\noutput : GREATER\n\n=== RESTART: /Users/agha/Documents/data_structures_and_algorithms/solutions/lesson5_solution.py ===\n\ninput : 5 5\noutput : LESS\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"GREATER\", \"1\"\nassert solution(\"100\\n1\") == \"LESS\", \"2\"\nassert solution(\"1\\n1\") == \"EQUAL\", \"3\"\nassert solution(\"1\\n2\") == \"GREATER\", \"4\"\nassert solution(\"1\\n3\") == \"LESS\", \"5\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n12\n\n''') == 'GREATER'\nassert solution('''\n1\n3\n\n''') == 'LESS'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == 'LESS'\nassert solution('3') == 'EQUAL'\nassert solution('5') == 'GREATER'\nassert solution('10') == 'GREATER'\nassert solution('12') == 'LESS'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '1'\nassert solution('5') == '4'\nassert solution('2') == '0'\nassert solution('10') == '9'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\"\n) == \"2\"\n\nassert solution(\n    \"3\"\n) == \"2\"\n\nassert solution(\n    \"4\"\n) == \"2\"\n\nassert solution(\n    \"5\"\n) == \"3\"\n\nassert solution(\n    \"6\"\n) == \"3\""
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"apple\", \"orange\", \"apple\"]) == \"2\"\nassert solution([\"grape\", \"apple\", \"orange\"]) == \"2\"\nassert solution([\"orange\", \"grape\", \"apple\"]) == \"2\""
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\\ngreen\\nred\\ngreen\\ngreen\\n\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('100') == '100'\nassert solution('1') == '0'\nassert solution('100') == '100'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\""
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == \"2\""
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"T\"\nassert solution(\"T\") == \"C\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('A') == 'T', 'test 1 failed'\nassert solution('C') == 'G', 'test 2 failed'\nassert solution('G') == 'C', 'test 3 failed'\nassert solution('T') == 'A', 'test 4 failed'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'T'\nassert solution('T') == 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"T\"\nassert solution(\"T\") == \"A\"\nprint(solution(input()))"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"7\"\nassert solution(\"5\") == \"14\""
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '13'\nassert solution('5') == '24'\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"5 3 2 2 4 1\") == \"14\"\nassert solution(\"5 0 2 2 1\") == \"7\""
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2 1 3 5\") == \"8\"\nassert solution(\"5\\n1 2 2 2 2\\n1 2 1 1 2\") == \"4\""
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '14'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '10'"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == ''\nassert solution('3 2 2 4 1') == '14'"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\nassert solution('5\\n1 2 2 2 1') == '11'\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 2 2 4 1\") == \"14\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '14'\nassert solution('3 2 2 4 1') == '14'\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n3 2 2 4 1\n1 2 2 2 1\n\"\"\") == \"14\"\nassert solution(\"\"\"5\n3 3 3 3 1\n1 2 2 2 1\n\"\"\") == \"11\"\nassert solution(\"\"\"5\n3 1 3 1 1\n1 1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5\n1 1 1 1 1\n1 1 1 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"5\n3 3 3 3 1\n1 2 2 2 1\n\"\"\") == \"7\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"6 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '2'\nassert solution('10 10') == '9'"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n2 2 2\n''') == '1'\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\\n\") == \"1\"\nassert solution(\"3 3\\n3 3 3\\n\") == \"2\"\nassert solution(\"3 3\\n3 3 2\\n\") == \"1\""
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"8 5\") == \"4\""
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_str) == '1'\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\") == \"Yes\"\nassert solution(\"2 1 2\") == \"Yes\"\nassert solution(\"1 0 1\") == \"No\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1''') == 'Yes'\nassert solution('''1 0 1\n1 1 2\n2 1 2''') == 'No'\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == 'Yes', \"Wrong!\"\nassert solution(\"1 0 1\\n1 0 2\\n1 1 2\\n\") == 'Yes', \"Wrong!\"\nassert solution(\"1 1 1\\n2 2 2\\n1 1 1\\n\") == 'No', \"Wrong!\"\nassert solution(\"1 1 1\\n1 1 2\\n1 1 1\\n\") == 'Yes', \"Wrong!\"\n\n'''\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 0 1\n2 1 2\n1 0 1\"\"\") == \"Yes\"\nassert solution(\"\"\"1 1 1\n2 1 2\n1 0 1\"\"\") == \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1\\n') == 'Yes\\n'\nassert solution('1 0 1\\n2 1 2\\n1 0 1\\n') == 'No\\n'"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 1 1\\n2 1 2\\n1 0 1') == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\nassert solution(\"1 2\\n0 1\\n1 2\\n\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1\\n') == 'Yes'\nassert solution('1 1 1\\n1 1 2\\n1 0 1\\n') == 'No'\nassert solution('1 0 0\\n1 1 1\\n1 0 1\\n') == 'Yes'"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''ABC''') == 'ARC'\nassert solution('''ARC''') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\nassert solution('ARC') == 'ARC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ARC\") == \"ARC\"\nassert solution(\"ABC\") == \"ARC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"4 10 2\") == \"2\"\nassert solution(\"5 5 2\") == \"0\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\", \"Should be 3\"\nassert solution(\"4 8 2\") == \"3\", \"Should be 3\"\nassert solution(\"5 6 9 4\") == \"2\", \"Should be 2\"\nassert solution(\"0 8 2\") == \"0\", \"Should be 0\""
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 8 2') == '3'\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"4 8 3\") == \"2\"\nassert solution(\"10 8 6\") == \"3\"\nassert solution(\"100 8 2\") == \"3\"\nassert solution(\"100 8 3\") == \"2\"\n\n'''\nfrom math import ceil"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 8 2') == '3', 'Wrong!'\nassert solution('5 5 2') == '2', 'Wrong!'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\") == \"3\"\nassert solution(\"4 6 2\") == \"3\"\nassert solution(\"5 2 4\") == \"0\""
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"3 4 4\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\n\"\"\"\na, b, x = map(int, input().split())"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 6') == \"3\"\nassert solution('5 2 2') == \"1\"\nassert solution('3 3 2') == \"2\""
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 5') == '1 2'\nassert solution('5 5 2') == '1 3'\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 3\n3 4 5''') == '3'\nassert solution('''5 6 7\n5 6 7''') == '2'\nassert solution('''1 2 3\n2 4 5''') == '1'\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 'Christmas'\nassert solution('1') == 'Christmas'\nassert solution('2') == 'Christmas Eve'\nassert solution('3') == 'Christmas Eve Eve'\nassert solution('4') == 'Christmas Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('22') == 'Christmas Eve Eve Eve Eve Eve Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('24') == 'Christmas Eve'\nassert solution('25') == 'Christmas'"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('25') == 'Christmas'\n\nstdin = '0'\nassert solution(stdin) == 'Zero'\n\nassert solution('') == ''"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Dec\"\nassert solution(\"20\") == \"Dec\"\nassert solution(\"25\") == \"Dec\"\nassert solution(\"26\") == \"Dec\"\nassert solution(\"27\") == \"Dec\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Christmas\""
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('22') == 'Christmas Eve Eve Eve Eve Eve Eve Eve'\nassert solution('23') == 'Christmas Eve Eve Eve Eve Eve'\nassert solution('24') == 'Christmas Eve Eve Eve Eve'\nassert solution('25') == 'Christmas'"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Christmas\""
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('23') == 'Christmas Eve Eve Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve Eve'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == '4'\nassert solution('15') == '2'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('100') == '1'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4 can be divided by 2 twice, which is the most number of times among 1, 2,..., 7.'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4\", \"Wrong result\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7') == '4'\nassert solution('5') == '1'\nassert solution('16') == '1'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"100\") == \"2\"\nassert solution(\"11\") == \"3\"\nassert solution(\"1000000\") == \"4\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == '4'\nassert solution('6') == '3'\nassert solution('3') == '2'\nassert solution('1') == '1'\nassert solution('7') == '4'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('3 6 9 2') == 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"0 0 0 0\") == \"Yes\"\nassert solution(\"1 2 3 4\") == \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 4 5') == 'Yes'\nassert solution('1 2 3 4') == 'No'\nassert solution('4 5 6 7') == 'Yes'\nassert solution('2 4 5 6') == 'No'\nassert solution('4 5 6 7') == 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 7 9 3') == 'Yes', 'Test 1 Failed'\nassert solution('1 1 1 1') == 'Yes', 'Test 2 Failed'\nassert solution('-1 -1 -1 -1') == 'Yes', 'Test 3 Failed'\nassert solution('2 2 2 2') == 'No', 'Test 4 Failed'"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5 7 3\") == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('100 100 100 100') == 'Yes'\nassert solution('1 1 1 1') == 'No'\nassert solution('10 10 10 10') == 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('2 6 8 9') == 'No'\nassert solution('10 20 30 40') == 'Yes'"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([5, 8, 3, 4, 3, 8, 1]) == \"Yes\"\nassert solution([5, 4, 3, 4, 3, 8, 1]) == \"No\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'ABC'"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"ABC\", \"Wrong Answer\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\n'''"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nassert solution(\"the sky is blue\") == \"THISKYISBLUE\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"ABC\", \"Wrong\"\nassert solution(\"atcoder beginner contest\") == \"ABC\", \"Wrong\"\n\n__author__ = 'Sunny'\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\nassert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nassert solution('AtCoder Beginner Contest') == 'ABC'\n\n\"\"\"\n\ns = input().split()\n\nprint(s[0][0] + s[1][0] + s[2][0])"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''atcoder beginner contest''') == 'ABC'\nassert solution('''atcoder at beginner contest''') == 'ABC'\nassert solution('''atcoder at at beginner contest''') == 'ABC'\nassert solution('''atcoder at a beginner contest''') == 'ABC'\nassert solution('''atcoder a beginner contest''') == 'ABC'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"0 100 120\") == \"Yes\"\nassert solution(\"100 200 300 400 500 600 700 800 900 1000\") == \"Yes\"\nassert solution(\"0 200 300 400 500 600 700 800 900 1000\") == \"No\"\nassert solution(\"50 100 120\") == \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('500 100 120') == 'Yes'\nassert solution('-1 -1 -1') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 10 120') == 'Yes'\nassert solution('50 50 120') == 'Yes'\nassert solution('20 20 100') == 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1 2\") == \"No\"\n\n--Output for Prof. Bohan --\nYes\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"30 50 100\") == \"Yes\", \"Should be Yes\"\nassert solution(\"30 50 120\") == \"No\", \"Should be No\"\nprint(\"All tests passed!\")\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''50 100 120''') == \"Yes\"\nassert solution('''1 2 3''') == \"No\"\nassert solution('''1 2 4''') == \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n50 100 120\n''') == 'Yes', 'First'\nassert solution('''\n10 20 50\n''') == 'No', 'Second'\nassert solution('''\n-10 10 20 50\n''') == 'No', 'Third'\nassert solution('''\n-10 -20 -50\n''') == 'No', 'Fourth'\nassert solution('''\n-20 -10 10 50\n''') == 'No', 'Fifth'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 50 50 50') == 'No'\nassert solution('50 50 50 50', '50 50 50 50', '50 50 50 50') == 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 50\") == \"Yes\"\nassert solution(\"3 3 10\") == \"No\"\nassert solution(\"3 5 10\") == \"No\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"6 8\") == \"2\"\nassert solution(\"5 8\") == \"1\"\nassert solution(\"9 8\") == \"1\"\nassert solution(\"8 8\") == \"2\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"100 100\") == \"3\"\nassert solution(\"3 3\") == \"3\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"4 8\") == \"5\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"10 2\") == \"7\"\nassert solution(\"9 9\") == \"4\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 8') == '5'\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 8\") == \"5\"\nassert solution(\"4 8\") == \"5\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 8\n7 9 8 9''') == '5'\n\n'''"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"4 2 1 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5 2 1 3 4\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2 2'\nassert solution('3') == '2 1'\nassert solution('4') == '2 1 1'\nassert solution('5') == '2 1 2 1'\nassert solution('6') == '2 1 2 1 2'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '4 2 1 3'"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2\n3 4\n''') == '3 2 1 4'\nassert solution('''1\n1\n2\n''') == '2 1'\nassert solution('''4\n5 1 4 2\n''') == '4 5 1 2 4'\nassert solution('''5\n5 1 4 2\n3\n''') == '3 5 1 2 4'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '4 2 1 3'\nassert solution('''\n5\n1 2 3 4 5\n''') == '5 2 1 3 4'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2 1 3\", \"Should be 2 1 3\"\nassert solution(\"5\") == \"5 1 2 3 4\", \"Should be 5 1 2 3 4\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2 3 1'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == \"Yes\"\nassert solution(\"\"\"\n2 4\n5 3\n\n\"\"\") == \"Yes\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 3') == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"Yes\"\nassert solution(\"10 3\") == \"No\"\nassert solution(\"10 2\") == \"Yes\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10\\n4 5 6\") == \"Yes\"\nassert solution(\"5 10\\n5 5 6\") == \"No\"\nassert solution(\"10 10\\n1 2 3 4 5 6 7 8 9\") == \"Yes\"\nassert solution(\"10 10\\n1 2 3 4 5 6 7 8 9\") == \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 3\") == \"Yes\"\nassert solution(\"5 5\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\nassert solution(\"10 4\") == \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 3\") == \"Yes\"\nassert solution(\"4 5 6\") == \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 3\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nhealth, n = map(int, stdin.split())\n\nprint(\"Yes\" if health >= 1 else \"No\")\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 3') == 'No'\nassert solution('10 3') == 'Yes'"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\n4 5 6''') == 'Yes'\n'''\n\nhealth, n = map(int, input().split())\nmonsters = list(map(int, input().split()))\nmonsters.sort()"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == '6'\nassert solution('abaababaa') == '2'\nassert solution('abaababa') == '1'\nassert solution('abaabab') == '0'\nassert solution('abaaba') == '2'\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == \"6\"\nassert solution(\"abaababaa\") == \"3\"\nassert solution(\"abaababa\") == \"3\"\nassert solution(\"abaabab\") == \"2\"\nassert solution(\"abaaba\") == \"2\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a\") == 1\nassert solution(\"abaababaab\") == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abaababaab\") == \"6\"\nassert solution(\"abaababaa\") == \"2\"\nassert solution(\"abaabab\") == \"2\"\nassert solution(\"abaaba\") == \"2\"\nassert solution(\"aba\") == \"2\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abaababaab\") == \"6\""
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abaababaab') == '6'\nassert solution('abaababaa') == '3'\nassert solution('abaababa') == '2'\nassert solution('abaabab') == '1'\nassert solution('abaaba') == '1'\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abaababaab') == '6'\nassert solution('abaababaa') == '8'\nassert solution('abaabab') == '8'\nassert solution('abaaba') == '5'\nassert solution('aba') == '4'\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abaababaab\") == 6, \"Expected 6\"\nassert solution(\"abaababaa\") == 4, \"Expected 4\"\nassert solution(\"abaabab\") == 3, \"Expected 3\"\nassert solution(\"abaab\") == 2, \"Expected 2\"\nassert solution(\"aba\") == 1, \"Expected 1\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"6\""
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('aabc') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('abcba') == 'Yes'\nassert solution('aaab') == 'Yes'\nassert solution('baab') == 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('cba') == 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bac') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bac\") == \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bac') == 'Yes'"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('ac') == 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"bac\"\"\") == \"Yes\"\nassert solution(r\"\"\"bca\"\"\") == \"No\""
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '1 2 3'\nassert solution('4\\n1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1000000\n1000000\n''') == '757402647'\nassert solution('''\n5\n1 8 7 2 4\n9 7 2 9 3\n''') == '646'\nassert solution('''\n5\n4 3\n3 2\n1 2\n''') == '20'\nprint(solution(stdin))\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6\n1 2 3 4 5 6\n2 3 4 5 6\n3 4 5 6 1 2\n4 5 6 1 2 3\n5 6 1 2 3 4\n6 7 8 9 10 11\n7 8 9 10 11 6\n8 9 10 11 6 7\n9 10 11 6 7 8\n10 11 6 7 8 9\n11 12 13 14 15 16\n12 13 14 15 16 11\n13 14 15 16 11 12\n14 15 16 11 12 13\n15 16 11 12 13 14\n16 17 18 19 20 21\n17 18 19 20 21 16\n18 19 20 21 16 17\n19 20 21 16 17 18\n20 21 16 17 18 19\n21 22 23 24 25 26\n22 23 24 25 26 21\n23 24 25 26 21 22\n24 25 26 21 22 23\n25 26 21 22 23 24\n26 27 28 29 30 31\n27 28 29 30 31 26\n28 29 30 31 26 27\n29 30 31 26 27 28\n30 31 26 27 28 29\n31 32 33 34 35 36\n32 33 34 35 36 31\n33 34 35 36 31 32\n34 35 36 31 32 33\n35 36 31 32 33 34\n36 37 38 39 40 41\n37 38 39 40 41 36\n38 39 40 41 36 37\n39 40 41 36 37 38\n40 41 36 37 38 39\n41 42 43 44 45 46\n42 43 44 45 46 41\n43 44 45 46 41 42\n44 45 46 41 42 43\n45 46 41 42 43 44\n46 47 48 49 50 51\n47 48 49 50 51 46\n48 49 50 51 46 47\n49 50 51 46 47 48\n50 51 46 47 48 49\n51 52 53 54 55 56\n52 53 54 55 56 51\n53 54 55 56 51 52\n54 55 56 51 52 53\n55 56 51 52 53 54\n56 57 58 59 60 61\n57 58 59 60 61 56\n58 59 60 61 56 57\n59 60 61 56 57 58\n60 61 56 57 58 59\n61 62 63 64 65 66\n62 63 64 65 66 61\n63 64 65 66 61 62\n64 65 66 61 62 63\n65 66 61 62 63 64\n66 67 68 69 70 71\n67 68 69 70 71 66\n68 69 70 71 66 67\n69 70 71 66 67 68\n70 71 66 67 68 69\n71 72 73 74 75 76\n72 73 74 75 76 71\n73 74 75 76 71 72\n74 75 76 71 72 73\n75 76 71 72 73 74\n76 77 78 79 80 81\n77 78 79 80 81 76\n78 79 80 81 76 77\n79 80 81 76 77 78\n80 81 76 77 78 79\n81 82 83 84 85 86\n82 83 84 85 86 81\n83 84 85 86 81 82\n84 85 86 81 82 83\n85 86 81 82 83 84\n86 87 88 89 90 91\n87 88 89 90 91 86\n88 89 90 91 86 87\n89 90 91 86 87 88\n90 91 86 87 88 89\n91 92 93 94 95 96\n92 93 94 95 96 91\n93 94 95 96 91 92\n94 95 96 91 92 93\n95 96 91 92 93 94\n96 97 98 99 100 101\n97 98 99 100 101 96\n98 99 100 101 96 97\n99 100 101 96 97 98\n100 101 100 101 96 97\n101 102 103 104 105 106\n102 103 104 105 106 101\n103 104 105 106 101 102\n104 105 106 101 102 103\n105 106 101 102 103 104\n106 107 108 109 110 111\n107 108 109 110 111 106\n108 109 110 111 106 107\n109 110 111 106 107 108\n110 111 106 107 108 109\n111 112 113 114 115 116\n112 113 114 115 116 111\n113 114 115 116 111 112\n114 115 116 111 112 113\n115 116 111 112 113 114\n116 117 118 119 120 121\n117 118 119 120 121 116\n118 119 120 121 116 117\n119 120 121 116 117 118\n120 121 116 117 118 119\n121 123 124 125 126 127\n123 124 125 126 127 121\n124 125 126 127 121 123\n125 126 127 121 123 124\n126 127 121 123 124 125\n127 128 129 130 131 132\n128 129 130 131 132 127\n129 130 131 132 127 128\n130 131 132 127 128 129\n131 132 127 128 129 130\n132 133 134 135 136 137\n133 134 135 136 137 131\n134 135 136 137 131 133\n135 136 137 131 133 134\n136 137 131 133 134 135\n137 138 139 140 141 142\n138 139 140 141 142 138\n139 140 141 142 138 139\n140 141 142 138 139 140\n141 142 138 139 140 139\n142 143 144 145 146 147\n143 144 145 146 147 142\n144 145 146 147 142 143\n145 146 147 142 143 144\n146 147 142 143 144 145\n147 148 149 150 151 152\n148 149 150 151 152 147\n149 150 151 152 147 148\n150 151 152 147 148 149\n151 152 152 147 149 150\n152 153 154 155 156 157\n153 154 155 156 157 151\n154 155 156 157 151 153\n155 156 157 157 151 154\n156 157 157 157 151 154 155\n157 158 159 160 161 162\n158 159 160 161 162 158\n159 160 161 162 158 158\n160 161 162 157 159 160\n161 162 162 157 159 160\n162 163 164 165 166 167\n163 164 165 166 167 163\n164 165 166 167 163 163\n165 166 167 167 163 164\n166 167 167 167 163 164 165\n167 168 169 170 171 172\n168 169 170 171 172 167\n169 170 171 172 167 168\n170 171 172 167 168 169\n172 173 174 175 176 177\n173 174 175 176 177 173\n174 175 176 177 173 174\n175 176 177 173 174 173\n176 177 173 174 175 173\n177 178 179 180 181 182\n178 179 180 181 182 177\n179 180 181 182 177 178\n180 181 182 177 178 179\n181 182 183 184 185 186\n183 184 185 186 184 181\n184 185 186 185 184 183\n185 186 185 186 185 184\n186 187 188 189 190 191\n187 188 189 190 191 186\n188 189 190 191 186 187\n189 190 191 191 186 188\n190 191 191 191 186 189\n191 192 193 194 195 196\n193 194 195 196 195 192\n194 195 195 196 195 193\n195 195 195 196 195 194\n196 197 198 199 200 201\n197 197 198 199 200 201\n197 198 199 200 201 197\n198 199 200 201 197 197\n199 200 201 197 198 197\n200 201 202 203 204 205\n202 203 204 205 200 201\n203 204 205 200 201 202\n204 205 200 201 202 203\n205 206 207 208 209 210 211\n206 206 207 208 209 210 211\n206 207 208 209 210 211 206\n208 209 210 211 206 207 206\n209 210 211 206 207 208 209\n210 211 206 207 208 209 210\n211 212 213 214 215 216 217\n212 212 213 214 215 216 217\n212 212 213 214 215 216 217\n213 214 215 216 217 212 212\n215 216 217 217 212 213 212\n216 217 217 217 212 213 212\n217 218 219 220 221 222 223\n218 219 220 221 222 223 217\n219 220 221 222 223 217 218\n220 221 222 223 223 219 219\n221 222 223 223 219 220 221\n223 224 225 226 227 228 229\n224 225 226 227 228 229 224\n225 226 227 228 229 224 225\n226 227 228 229 224 225 226\n227"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n1000000\n1000000\n\"\"\") == \"757402647\"\nassert solution(\"\"\"\n1\n1000000\n1000000\n\"\"\") == \"757402647\"\nassert solution(\"\"\"\n1\n1000000\n1000000\n\"\"\") == \"757402647\"\nassert solution(\"\"\"\n3\n1\n2\n3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n1\n2\n3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == '646'\nassert solution(test_input_2) == '757402647'"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '646'"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '646'\nassert solution('1') == '757402647'\nassert solution('2') == '20'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\nassert solution('1000000') == '757402647'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == '646'\nassert solution('1') == '757402647'\nassert solution('1 2') == '20'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n''') == '7'\nassert solution('''\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''\n5 1 4\n2 5 7 4 6\n5 4\n''') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n''') == '7'\nassert solution('''\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''\n5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 4 5') == '7'\nassert solution('9 4 8') == '17'\nassert solution('5 1 4') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n''') == '17'\nassert solution('''\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''\n5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\n\n'''"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1 4\") == \"17\"\nassert solution(\"7 4 8\") == \"17\"\nassert solution(\"5 1 4\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\") == \"7\"\nassert solution(\"9 4 8\") == \"17\"\nassert solution(\"5 1 4\") == \"17\"\n\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n''') == '17'\nassert solution('''\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''\n5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\") == \"17\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n    '''\n) == '7'\n\nassert solution(\n    '''\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n    '''\n) == '17'\n\nassert solution(\n    '''\n5 1 4\n2 5 7 4 6\n5 4\n    '''\n) == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 4 5') == '7'\nassert solution('9 4 8') == '17'\nassert solution('5 1 4') == '17'"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([4,3,2,1]) == \"1\"\nassert solution([5,4,3,2,1]) == \"0\"\nassert solution([1,2,3,4,5]) == \"0\""
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([6, 1, 2, 1, 2, 3, 4, 5]) == 0\nassert solution([6, 1, 2, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]) == 1\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '1'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"2\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\n''') == '2', f\"First example: Expected '2', got {solution('''7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\n''')}\"\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''') == '1', f\"Second example: Expected '1', got {solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''')}\"\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''') == '0', f\"Third example: Expected '0', got {solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''')}\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''') == '2', \"First\"\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '1', \"Second\"\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '0', \"Third\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\n''') == '2'\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''') == '0'\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n\n''') == '1'\nassert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\n''') == '1'\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''') == '2'\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == '2'\nassert solution('7') == '0'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '1'"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1000000001'\nassert solution('7 97') == '1999999999'\nassert solution('1000000000 1000000000') == '1'"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '1000000001'\nassert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '1999999999'\nassert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000001\n2 1\n''') == '113'"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\"\"\") == \"1999999999\"\nassert solution(\"\"\"\n10 4\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"1000000001\"\nassert solution(\"\"\"\n10 3\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"1000000001\"\nassert solution(\"\"\"\n1 1000000000\n2 1000000000\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1\n3\n4\n5\n2''') == '1999999999'\nassert solution('''3\n1\n3\n2''') == '1000000001'\nassert solution('''3\n1\n3\n2''') == '1'\nassert solution('''2\n1\n3\n2''') == '4'\nassert solution('''2\n1\n3\n2''') == '1'"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '1999999999'\n\nassert solution('''\n4 5\n2 4\n1 1000000000\n3 1000000000\n1 1000000000\n3 1\n''') == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 7') == '15'\nassert solution('3 12') == '1999999999'\nassert solution('2 1000000000') == '1000000001'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1000000001'\nassert solution('7 97') == '1999999999'\nassert solution('1000000000 1000000000') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '10'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1''') == '1999999999'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000001\n2 1\n''') == '1000000001'\nassert solution('''6\n4 12\n2 1000000000\n7 97\n1000000001\n2 1\n''') == '1999999999'\nassert solution('''5\n2 5\n5 1\n5 2\n2 1\n''') == '1'\nassert solution('''8\n5 4\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n''') == '2'\nassert solution('''4\n2 3\n3 1\n3 2\n2 1\n''') == '1'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"20 10\") == \"5\""
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"7 2\\n\"\n    \"2 3 3 1 2 1 3 2\"\n) == \"2\\n\"\nassert solution(\n    \"10 4\\n\"\n    \"2 3 3 1 1 2 1 2 3 3\"\n) == \"3\\n\"\nprint(\"Congratulations! Your solutions works perfectly :)\")\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3'"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == '2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7 2\n1 2 3 2 1 3 2\n\"\"\") == \"2 1 \nassert solution(\"\"\"\n10 4\n2 3 3 1 1 2 1 2 3 3\n\"\"\") == \"3\nassert solution(\"\"\"\n4 10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"4\n\"\"\")\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1 2 1\\n\") == \"2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3 1 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 2 3\n2 1 3\n3 2 3\n''') == '2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n3 2 2 3 1 1 3 2 1 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n3 2 3 1 1 2 1 2 3 3\n''') == '3'"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '7 2\\n'\n    '2 3 3 1 1 2 1 2 3 3'\n) == '2 1 3 2 1 3 2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 2 3 2 1 3 2\n''') == '2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3'\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3''') == 263"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '263'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n3\n1 5\n2 3\n1 10\n1\n1 100\n''') == 263\nassert solution('''\n1\n3\n1 5\n1 6\n1 7\n1 5\n1 4\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''') == 263\nassert solution('''\n1\n3\n1 5\n1 6\n1 7\n1 5\n1 4\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''') == 263\n'''\n\nimport sys\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''') == 263\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"263\"\nassert solution_2(stdin) == \"263\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == '2'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nprint(solution(input()))\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''abacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n''') == '3'\nassert solution('''dfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\n''') == '5'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\ndfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\n''') == '5'\nassert solution('''\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n''') == '3'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '6'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"abacaba\"\n) == \"3\"\nassert solution(\n    \"dfcbbcfeeedbaea\"\n) == \"5\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\""
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n'''\nfrom itertools import product"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"154873296\"\nassert solution(\"2\") == \"98236471\"\nassert solution(\"3\") == \"247789563\"\nassert solution(\"4\") == \"412958357\"\nassert solution(\"5\") == \"312968357\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n'\nassert solution('2') == '154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247789563\\n'\nassert solution('3') == '154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '154873296'\nassert solution('2') == '386592714'\nassert solution('3') == '863725149'\nassert solution('4') == '975314628'\nassert solution('5') == '412968357'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\n\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0\n4 3 2 5 9 8 7 1 6\n7 2 1 6 5 3 4 9 8\n8 9 4 7 6 2 1 5 3\n5 9 6 4 7 2 3 8 1\n4 7 1 8 2 6 9 5 3\n2 3 7 4 9 6 8 5 1\n6 1 5 3 9 2 4 8 7\n3 9 6 8 5 2 4 1 7\n9 2 8 7 6 1 5 3 4\n''') == '0'\nassert solution('''\n0\n3 3 4 5 9 8 7 1 6\n7 2 1 6 5 3 4 9 8\n8 9 4 7 6 2 1 5 3\n5 9 6 4 7 2 3 8 1\n4 7 1 8 2 6 9 5 3\n2 3 7 4 9 6 8 5 1\n6 1 5 3 9 2 4 8 7\n3 9 6 8 5 2 4 1 7\n9 2 8 7 6 1 5 3 4\n''') == '3 3 4 5 9 8 7 1 6'\nassert solution('''\n0\n3 3 2 5 9 8 7 1 6\n7 2 1 6 5 3 4 9 8\n8 9 4 7 6 2 1 5 3\n5 9 6 4 7 2 3 8 1\n4 7 1 8 2 6 9 5 3\n2 3 7 4 9 6 8 5 1\n6 1 5 3 9 2 4 8 7\n3 9 6 8 5 2 4 1 7\n9 2 8 7 6 1 5 3 4\n''') == '3 3 2 5 9 8 7 1 6'\nassert solution('''\n0\n4 3 2 5 9 8 7 1 6\n7 2 1 6 5 3 4 9 8\n8 9 4 7 6 2 1 5 3\n5 9 6 4 7 2 3 8 1\n4 7 1 8 2 6 9 5 3\n2 3 7 4 9 6 8 5 1\n6 1 5 3 9 2 4 8 7\n3 9 6 8 5 2 4 1 7\n9 2 8 7 6 1 5 3 4\n''') == '4 3 2 5 9 8 7 1 6'\nassert solution('''\n0\n1 3 2 5 9 8 7 1 6\n7 2 1 6 5 3 4 9 8\n8 9 4 7 6 2 1 5 3\n5 9 6 4 7 2 3 8 1\n4 7 1 8 2 6 9 5 3\n2 3 7 4 9 6 8 5 1\n6 1 5 3 9 2 4 8 7\n3 9 6 8 5 2 4 1 7\n9 2 8 7 6 1 5 3 4\n''') == '5 4 3 2 1 6 5 9 8 7 1 6'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '154873396'\nassert solution('2') == '386592714'\nassert solution('3') == '979314628'\nassert solution('4') == '412958357'\nassert solution('5') == '631457992'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"412958357\"\nassert solution(\"2\") == \"2489563\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '154873296'\nassert solution('2') == '336592714'\nassert solution('3') == '729645835'\nassert solution('4') == '863725145'\nassert solution('5') == '979314628'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution([5, 1, 2, 4]) == \"5\"\nassert solution([5, 1, 2, 4]) == \"3\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n2 5\n1 1 1 2 3\n2 1\n1 2\n3 1\n3 4\n3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 3\n1 2 1\n1 3\n2 3\n1 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 4\n2 3 1 1 5 4\n1 1\n1 5\n4 1\n4 2\n4 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n6 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n'''\n) == '4'"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '3\\n'\nassert solution('5 7') == '8\\n'\nassert solution('5 3') == '6\\n'\nassert solution('5 5') == '6\\n'\nassert solution('5 3') == '6\\n'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '6'\nassert solution('''\n10\n1 1 1 2 3 4 5 6 7 8 9\n3 1\n1 6\n4 1\n1 8\n''') == '-1'\nassert solution('''\n10\n1 1 1 2 3 4 5 6 7 8 9\n3 1\n1 5\n3 4\n7 3\n1 8\n''') == '9'\nassert solution('''\n10\n1 1 1 2 3 4 5 6 7 8 9\n3 1\n1 6\n4 1\n1 8\n''') == '4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n5 5\n1 1 1 3 5 3\n1 5\n3 4\n7 3\n1 8\n1 9\n\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3 3\n3 3\n3 3\n\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\n\"\"\") == \"9\""
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 3\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6 3\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n6 3\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"6\"\nassert solution(\"\"\"\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"8\"\nassert solution(\"\"\"\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"7\"\nassert solution(\"\"\"\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"6\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\nassert solution() == \"6\"\nassert solution() == \"8\"\nassert solution() == \"9\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"8\"\nassert solution(\"\"\"\n4 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4 5\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4 5\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\") == \"8\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 2 8') == 'YES'\nassert solution('100 101 102 105') == 'YES'\nassert solution('3 2 1 100000000') == 'NO'\nassert solution('10 20 15 14') == 'YES'\nassert solution('101 101 101 3') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 2 8') == \"YES\"\nassert solution('100 101 102 105') == \"YES\"\nassert solution('10 20 15 14') == \"NO\"\nassert solution('101 101 101 3') == \"YES\""
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\nassert solution('''\n6 2 4 1 1\n1 1 2 1 1\n''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 3 2 8\\n'\n    '100 101 102 105\\n'\n    '3 2 1 100000000\\n'\n    '10 20 15 14\\n'\n    '101 101 101 3\\n'\n    ) == 'YES\\n'\n\nassert solution(\n    '''3\n10 2 1\n2 2 1\n5 5\n0 0'''\n    ) == 'NO\\n'"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\nassert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"10 20 15 14\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 2 8') == \"YES\"\nassert solution('100 101 102 105') == \"YES\"\nassert solution('10 20 15 14') == \"NO\"\nassert solution('101 101 101 3') == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\""
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\nassert solution('''\n3 3 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'NO'\nassert solution('''\n5 5 2 2 3\n1 1 2 1 3\n''') == 'YES'\nassert solution('''\n3 1 1 3\n1 1 2 1\n''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 1 100000000\n100 101 102 105\n3 2 1 100000000\n10 20 15 14''') == \"YES\"\n\nassert solution('''2 2 1 100000000\n100 101 102 105\n2 1 1 100000000\n10 20 15 14''') == \"YES\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 4\n1 2 3 4\n''') == '3 4 6 5'\nassert solution('''5 5\n2 1 5 3 5\n''') == '9 8 12 6 8'\nassert solution('''2 10\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3'"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '3 3'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('4 4') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"10 5\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2 3 4\n\n''') == '3 4 6 5 \n\nassert solution('''\n5\n2 1 5 3 5\n\n''') == '9 8 12 6 8 \n\nassert solution('''\n2\n1 2 1 1 2 2 2 2 2 2\n\n''') == '3 3 "
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == \"3 4 6 5 \"\n\nassert solution('''\n5 5\n2 1 5 3 5\n''') == \"9 8 12 6 8 \"\n\nassert solution('''\n2 10\n1 2 1 1 2 2 2 2 2 2\n''') == \"3 3 \"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4\\n2 1 5 3 5') == '3 3'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3 \n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10\") == \"3 3\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n1 2 3 4\n''') == '3 3 \n\nassert solution('''\n2 10\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3 \n\nassert solution('''\n1 1\n1 1\n''') == '1 1'"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '3 3'\nassert solution('4 5') == '3 3'\nassert solution('1 2 3 4') == '3 3'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('10 5') == '9 8 12 6 8'\n\n'''\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\nassert solution('''\n7 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\nassert solution('''\n7 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"NO\"\nassert solution('''\n7 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''5 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''5 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\nassert solution('''5 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\n\nassert solution('''\n2 7\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\n\nassert solution('''\n2 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\n\nassert solution('''\n2 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\"\n\nassert solution('''\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\""
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\"\"\"\n) == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n6 7\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 4\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\nassert solution('''\n10 7\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution('''\n1\n5 2\n4 3 8 9 10\n5 2\n1 3\n4 6\n''') == \"YES\\nYES\\nYES\\nNO\\nNO\"\nassert solution('''\n2\n3 2\n1 2\n''') == \"NO\\nNO\"\nassert solution('''\n2\n2 1\n4 3\n''') == \"NO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO\\n'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO\\nNO\\nNO\\nNO\\nYES\\nNO\\n'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 6\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\\n'\nassert solution('''\n3\n1 1 1\n3\n2 3 3\n3\n''') == 'YES\\n1 2\\n2 3\\n3 4\\n1 3\\n1 4\\n'\nassert solution('''\n6\n1 2 2 1 3 4\n4\n1 1 1\n5\n1 1000 101 1000\n4\n1 2 3 4\n5\n1 2 3 4\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5\n1 1000 101 1000\n6\n1 2 3 4\n5"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 2 1 3\\n3\\n1 1 1') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\\nYES\\n1 2\\n1 3\\n1 4\\n'''\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'YES\\n1 2\\nNO'\nassert solution('3') == 'YES\\n1 2\\n1 3\\n1 4'\nassert solution('4') == 'YES\\n1 2\\n3 5\\n5 4\\n1 3'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n1 2 2 1 3\\n3\\n1 1 1') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('2\\n5\\n1 2 2 1 3\\n3\\n1 1 1') == 'YES\\n1 2\\n2 3\\n3 4\\n1 3'\nassert solution('3\\n5\\n1 1 1\\n4\\n1 2 3\\n5\\n1 3 4') == 'NO'"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 9\n1111100\n7 11\n1111100\n7 11\n1111100\n''') == '0101111'\nassert solution('''\n8 5\n11011010\n7 9\n1111100\n7 11\n1111100\n''') == '01011110'\nassert solution('''\n3\n8 5\n11011010\n7 9\n1111100\n''') == '01011110'\n''')"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 5\n11011010\n7 9\n1111100\n7 11\n1111100\n''') == '01011110'\nassert solution('''3\n8 5\n11011010\n7 9\n1111100\n''') == '0101111'\nassert solution('''4\n7 8\n1010011\n1110111\n1101100\n''') == '100100'\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n6\n0 1 0 1 0 1''') == '011110'\nassert solution('''1\n10\n11011010''') == '0111110'\nassert solution('''1\n10\n1111100''') == '0110000'\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 5') == '01011110'\nassert solution('7 9') == '0101111'\nassert solution('11011010') == '01011110'\nassert solution('7 11') == '0011111'\nassert solution('1111100') == '0101111'\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0111'\nassert solution('8 5') == '0111'\nassert solution('7 9') == '01101'\nassert solution('7 11') == '01101'\nassert solution('1111100') == '1111111'\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 5\n11011010\n7 9\n1111100\n7 11\n1111100\n''') == '01011110', f'''expected '01011110'\nactual   {solution(stdin)}'''\n\n\n'''\n1\n8 5\n11011010\n7 9\n1111100\n7 11\n1111100\n'''\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '01011110'\nassert solution(input()) == '0101111'\nassert solution(input()) == '0011111'\n\n\"\"\"\n\n\nimport sys\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"01011110\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 5') == '01011110'\nassert solution('7 9') == '0101111'\nassert solution('1111100') == '0011111'\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n7 9') == '01011110'\nassert solution('4\\n3 4') == '0111'\nassert solution('4\\n5 5') == '0000'\nassert solution('2\\n2 2') == '00'\nassert solution('7\\n7 7') == '007'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '4'\nassert solution('5 1') == '1 3 5 6'\nassert solution('7 2') == '3'\nassert solution('7 2') == '1 4 7'\nassert solution('8 9') == '7 8 9'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1 2 4 5 6'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4'\nassert solution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3'\nassert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3'\nassert solution('''\n5 1\n28 30\n30 30\n29 29\n28 30\n30 30\n''') == '4'\nassert solution('''\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4'"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 2\") == \"3\"\nassert solution(\"5 1\") == \"1 2 4\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"7 2\"\n) == \"3\"\nassert solution(\n    \"5 1\"\n) == \"4\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 5 6') == '4\\n1 2 3 4'\nassert solution('2\\n1 3 5 6') == '3\\n1 3 5 6'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '4'\nassert solution('6 1') == '4'\nassert solution('7 1') == '5'\nassert solution('8 1') == '5'\nassert solution('9 1') == '5'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '4'\nassert solution('6 1') == '5'\nassert solution('7 2') == '6'\nassert solution('7 3') == '6'\nassert solution('7 4') == '6'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 3 2\n-100 2 3\n''') == '3'\nassert solution('''\n5\n2 1 4 3 5\n2 2 2 3 4\n''') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2\n1 3 2\n-100 2 3\n\"\"\") == '3'\nassert solution(\n\"\"\"\n5\n2 1 4 3 5\n2 2 2 3 4\n\"\"\") == '19'\nassert solution(\n\"\"\"\n7\n0 0 1 2 4 3 -1\n-1 -2 -3 -4 5 0\n\"\"\") == '2'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 3 2\n-100 2 3\n''') == '3'\n\nassert solution('''\n5\n2 1 4 3 5\n2 2 2 3 4\n''') == '19'\n\nassert solution('''\n1\n2\n''') == '0'\n\nassert solution('''\n2\n2 1\n-1 0\n''') == '1'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n2 1\\n-100 2 3') == '3'\nassert solution('3\\n1 3 2\\n-100 2 3') == '3'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 2\n-100 2 3\n''') == '3'\nassert solution('''\n2 1\n-2 0\n''') == '1'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\nassert solution() == \"19\"\nassert solution() == \"0\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('-1') == '1'\nassert solution('-2') == '2'"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '3'\nassert solution('5 2 1') == '19'\nassert solution('6 5 2 1') == '12'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"19\"\nassert solution(\"3\") == \"12\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n') == '21 7 15 21 3'\nassert solution('7 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n') == '0 0 \nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 2\\n') == '1 3 3 \nassert solution('7 3\\n1 2 1\\n2 3 2\\n1 3 2\\n') == '1 3 3 \nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n') == '0 0 \n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == '21 7 15 21 3'\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 2\n''') == '1 3 3'\nassert solution('''\n10 10\n1 2 1\n2 3 2\n3 4 3\n3 5 3\n4 6 4\n5 6 5\n6 7 5\n6 8 5\n7 9 6\n8 10 6\n9 11 7\n10 12 7\n11 13 8\n12 14 9\n13 15 9\n14 16 8\n15 17 9\n16 18 8\n17 19 9\n18 20 9\n19 21 9\n20 22 8\n21 23 9\n22 24 8\n23 25 9\n24 26 8\n25 27 9\n26 28 8\n27 29 9\n28 30 9\n29 31 9\n30 32 8\n31 33 9\n32 34 8\n33 35 9\n34 36 8\n35 37 9\n36 38 8\n37 39 9\n38 40 9\n39 41 9\n40 42 8\n41 43 9\n42 44 8\n43 45 9\n44 46 8\n45 47 9\n46 48 8\n47 49 9\n48 50 8\n49 51 9\n50 52 8\n51 53 9\n52 54 8\n53 55 9\n54 56 8\n55 57 9\n56 58 8\n57 59 9\n58 60 9\n59 61 9\n60 62 8\n61 63 9\n62 64 8\n63 65 9\n64 66 8\n65 67 9\n66 68 8\n67 69 9\n68 70 8\n69 71 9\n70 72 8\n71 73 9\n72 74 8\n73 75 9\n74 76 8\n75 77 9\n76 78 8\n77 79 9\n78 80 8\n79 81 9\n80 82 8\n81 83 9\n82 84 8\n83 85 9\n84 86 8\n85 87 9\n86 88 8\n87 89 9\n88 90 8\n89 91 9\n90 92 8\n91 93 9\n92 94 8\n93 95 9\n94 96 8\n95 97 9\n96 98 8\n97 99 9\n98 100 8\n99 101 9\n100 102 8\n99 103 9\n98 104 9\n97 105 9\n96 106 8\n95 107 9\n94 108 9\n93 109 9\n92 110 9\n91 111 9\n90 112 9\n89 113 9\n88 114 9\n87 115 9\n86 116 9\n85 117 9\n84 118 9\n83 119 9\n82 120 9\n81 121 9\n80 122 8\n79 123 9\n78 124 9\n77 125 9\n76 126 9\n75 127 9\n74 128 9\n73 129 9\n72 130 9\n71 131 9\n70 132 9\n69 133 9\n68 134 9\n67 135 9\n66 136 9\n65 137 9\n64 138 9\n63 139 9\n62 140 9\n61 141 9\n60 142 9\n59 143 9\n58 144 9\n57 145 9\n56 146 9\n55 147 9\n54 148 9\n53 149 9\n52 150 9\n51 151 9\n50 152 9\n49 153 9\n48 154 9\n47 155 9\n46 156 9\n45 157 9\n44 158 9\n43 159 9\n42 160 9\n41 161 9\n40 162 9\n39 163 9\n38 164 9\n37 165 9\n36 166 9\n35 167 9\n34 168 9\n33 169 9\n32 170 9\n31 171 9\n30 172 9\n29 173 9\n28 174 9\n27 175 9\n26 176 9\n25 177 9\n24 178 9\n23 179 9\n22 180 9\n21 181 9\n20 182 9\n19 183 9\n18 184 9\n17 185 9\n16 186 9\n15 187 9\n14 188 9\n13 189 9\n12 190 9\n11 191 9\n10 192 9\n9 193 9\n8 194 9\n7 195 9\n6 196 9\n5 197 9\n4 198 9\n3 199 9\n2 200 9\n1 201 9\n''') == '21 7 15 21 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '21 7 15 21 3'\nassert solution('1 2') == '0 0'\nassert solution('1 2') == '1 3 3'\nassert solution('1 2') == '1 3 3'\nassert solution('1 2') == '1 3 3'\n\nimport sys\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0 0\"\nassert solution() == \"1 3 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '21 7 15 21 3'\nassert solution([6, 5, 4, 3, 2, 1, 1]) == '1 3 3'"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 5\\n'\n                '1 2 1\\n'\n                '3 2 3\\n'\n                '2 4 1\\n'\n                '4 5 2\\n'\n                '5 7 4\\n'\n                '3 6 2\\n'\n                '5 2 3 4 1\\n') == '21 7 15 21 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == \"21 7 15 21 3\"\nassert solution('''\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == \"21 7 15 21 3\"\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 2\n''') == \"1 3 3\"\nassert solution('''\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == \"1 3 3\"\nassert solution('''\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == \"1 3 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 5') == \"21 7 15 21 3\", \"7 5\"\nassert solution('1 2') == \"0 0\"\nassert solution('1 2') == \"0 0\", \"1 2\"\nassert solution('3 3') == \"1 3 3\", \"3 3\""
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == stdin\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n1 2 2') == 'YES'\nassert solution('4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4') == 'NO'\nassert solution('4\\n1 3 4 4') == 'YES'\nassert solution('1\\n100') == 'YES'"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"100\") == \"YES\"\nassert solution(\"101\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4') == 'YES'\nassert solution('5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'\nassert solution('''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'\nassert solution('''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'\nassert solution('''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'NO'\nassert solution('''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\"\n) == \"YES\"\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n1 2 2') == 'YES'\nassert solution('4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4') == 'NO'\nassert solution('2\\n1 2') == 'YES'\nassert solution('100\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 2\n4\n5 5 5 5''') == 'YES'\nassert solution('''3\n1 2 2\n4\n5 5 5 5''') == 'NO'\nassert solution('''5\n1 2 2\n4\n5 5 5 5''') == 'YES'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\n''') == 'YES'\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\nimport sys\nfrom math import log2\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '12'"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == '12'\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1001\\n1\") == \"11\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\nassert solution(\"4 3\\n1001\\n10101\") == \"12\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1010\n1101\n''') == '12'\nassert solution('''4 5\n1001\n10101\n''') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n1010\n1101\n''') == '12'\nassert solution('''4 5\n1001\n10101\n''') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\nprint(solution(input()))\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2\n4\n6\n8\n10\n''') == 'YES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11'\nassert solution('''5\n1\n1\n4\n7\n''') == 'NO\\nNO\\nNO\\nNO\\nNO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11'\nprint(solution('''3\n1 2\n5\n10'''))\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n4\\n6\\n8\\n\") == \"NO\"\nassert solution(\"2\\n5\\n9\\n\") == \"YES\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n\") == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10\n''') == 'NO', \"First\"\nassert solution('''\n2\n4\n''') == 'YES', \"Second\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"9\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n2\n4\n6\n8\n10''') == 'NO'\nassert solution('''5\n2\n4\n6\n8\n10''') == 'YES'\nassert solution('''3\n3\n5\n6\n8\n10''') == 'YES'\nassert solution('''4\n2\n4\n6\n8\n10''') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'NO'\nassert solution() == 'YES'\n\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2\n4\n6\n8\n10''') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\\nYES\\n'''"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '5'\nassert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '0'"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '5'\nassert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '0'\nassert solution('''\n2\n3\n4\n4\n''') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"100\") == \"0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '5'\nassert solution('''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n6\n3\n1 2\n5\n1 1 1 1 1\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '5'\nassert solution('''\n10\n4\n1 2 1 1\n3\n3 2 2 3\n9\n7\n3\n6\n5\n2\n''') == '3'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\n5\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '4'\nassert solution('''\n5\n5\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '4'\nassert solution('''\n5\n5\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '2'\nassert solution('''\n5\n5\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '1'\nassert solution('''\n5\n5\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n    \"\"\"\n) == \"5\"\nassert solution(\n    \"\"\"\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n    \"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\\n3\\n1\\n2\\n\") == \"2\"\nassert solution(\"1\\n1\\n2\\n1\\n2\\n2\\n\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '1'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '0'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n8\\n7 6 5 4 3 2 1\\n1\\n1') == '4'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\nassert solution() == '2'\nassert solution() == '4'\nassert solution() == '7'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4\") == \"2\"\nassert solution(\"4\") == \"7\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '3'\nassert solution('''\n4\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '2'\nassert solution('''\n4\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '4'\nassert solution('''\n3\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '4'\nassert solution('''\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '2'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\\n2\\n5\\n7\\n3\\n4\\n7\\n\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '3'\nassert solution('6') == '2'\nassert solution('8') == '4'\nassert solution('12') == '5'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3'\n\nprint(solution('''\n5\n2 4\n4 5\n4 3\n1 3\n5 4\n2 4\n4 6\n4 4\n5 5\n4 6\n5 6\n2 2\n2 3\n3 3\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 6\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 5\n2 6\n2 7\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 6\n2 7\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 4\n2 6\n2 7\n4 6\n4 6\n4 5\n4 5\n4 6\n5 6\n5 5\n5 5\n5 6\n4 5\n4 5\n4 6\n5 6\n2 3\n2 5\n2 6\n3 4\n3 5\n3 6\n3 7\n2 4\n2 5\n2 6\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3'\nassert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '2'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == \"3\"\nassert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == \"4\"\n\n'''\n\nthe solution is given in the input.\n\n'''"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '3'\nassert solution('4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '4'\nassert solution('4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '2'\nassert solution('4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '7'\nassert solution('4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '4'\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\")) == \"5\\n60\\n1439\\n1180\\n1\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1439\"\nassert solution(\"5\") == \"1180\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1180\"\nassert solution(\"5\") == \"1439\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n23 55\n23 0\n0 1\n4 20\n23 59\n''') == '1'\n\nassert solution('''\n5\n0 0\n0 1\n4 20\n23 59\n''') == '1439'\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"59 1\""
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '60'\nassert solution('2') == '1439'\nassert solution('3') == '1180'\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\\n\"\nassert solution(\"5\\n\") == \"1439\\n\"\nassert solution(\"15\\n\") == \"2400\\n\"\nassert solution(\"16\\n\") == \"1439\\n\"\nassert solution(\"17\\n\") == \"2400\\n\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n23 55\n23 0\n0 1\n4 20\n23 59\n''') == '''60'''\nassert solution('''\n2\n55 55\n55 0\n0 1\n4 20\n23 59\n''') == '''1439'''\nassert solution('''\n3\n55 55 55\n55 0 0\n0 1 1\n4 20 20\n23 59 59\n''') == '''1180'''\nassert solution('''\n4\n55 55 55 55\n55 0 0 0\n0 1 1 1\n4 20 20 20\n23 59 59 59\n''') == '''1'''"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\"\"\") == \"60\"\nassert solution(\"\"\"\n4\n5 5\n5 0\n5 0\n4 20\n5 59\n\"\"\") == \"1439\"\nassert solution(\"\"\"\n10\n5 5\n5 0\n5 0\n4 20\n5 59\n\"\"\") == \"1180\"\nassert solution(\"\"\"\n1\n0 0\n0 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n24 24\n24 0\n0 1\n4 20\n24 59\n\"\"\") == \"24\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n4\\nLRUD\\n4\\nLURD') == '1 2'\nassert solution('5\\n5\\nRRUDU\\n5\\nLLDDR') == '3 4'\nassert solution('10\\n16\\n
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n4\\nLRUD\\n4\\nLURD') == '1 2'\nassert solution('5\\n4\\nLRUD\\n5\\nLLDDR') == '3 4'\nassert solution('5\\n4\\nLRUD\\n5\\nLURD') == '1 4'\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    4\n    LRUD\n    4\n    LURD\n''') == '1 2'\nassert solution('''\n    5\n    RRUDU\n    5\n    LLDDR\n''') == '3 4'\nassert solution('''\n    3\n    RU\n''') == '-1'"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n4\\nLRUD\\n4\\nLURD\") == \"1 2\"\nassert solution(\"5\\n4\\nRRUDU\\n5\\nLLDDR\") == \"3 4\"\nassert solution(\"5\\n4\\nRRUDU\\n5\\nLLDDR\") == \"3 4\"\nassert solution(\"4\\n4\\nLLDDR\\n4\\nRRUDU\") == \"-1\"\nassert solution(\"1\\n1\\nRRURD\") == \"0 1\""
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR''') == '1 4'\nassert solution('''\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n''') == '-1'\nassert solution('''\n4\nLRURD\n4\nLRURD\n5\nRRDUU\n5\nLLDDR''') == '2 4'\nassert solution('''\n4\nLRURD\n4\nLRURD\n5\nRRDUU\n5\nLLDDR''') == '-1'\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4\\nRLUD\") == \"2 4\"\nassert solution(\"2\\n4\\nLURD\") == \"2 4\"\nassert solution(\"2\\n5\\nRRUDU\") == \"3 4\"\nassert solution(\"2\\n5\\nLLDDR\") == \"3 4\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR''') == '1 2'\nassert solution('''5\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR''') == '1 4'\nassert solution('''3\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR''') == '-1'\nassert solution('''6\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR''') == '1 4'\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n4\nLRUD\n4\nLURD\n''') == '1 2'\nassert solution('''5\n4\nLURD\n5\nLLDDR\n''') == '3 4'\nassert solution('''5\n5\nRRUDU\n5\nLLDDR\n''') == '-1'"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 2\"\nassert solution() == \"1 4\"\nassert solution() == \"3 4\"\nassert solution() == \"-1\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '3'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '3'\nassert solution('''\n3\n1 2 3\n2 1\n2\n1\n''') == '1'\nassert solution('''\n5\n3 2 1 3 4\n4\n3 4\n2 2\n2 3\n''') == '2'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n6\\n3 1 3 5 6') == '1'\nassert solution('2\\n6\\n3 1 3 5 6') == '2'\nassert solution('4\\n6\\n3 1 3 5 6') == '0'\nassert solution('4\\n7\\n3 1 3 5 6') == '2'\n\n'''\n\n\nimport sys\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4 2\\n1\\n2\\n\") == \"1\"\nassert solution(\"2\\n7 2\\n1\\n2\\n\") == \"2\"\nassert solution(\"2\\n5 5\\n1\\n2\\n\") == \"2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3'\nassert solution('4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '0'\nassert solution('4\\n3\\n2 1 1 3') == '0'\nprint('All tests passed')"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5\n5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n4\n4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n3\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n3\n3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\\n') == '3'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution() == \"1\"\nassert solution() == \"0\""
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0'\nassert solution() == '2'\nassert solution() == '1'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\\n\") == \"3\\n1\\n0\\n2\"\nassert solution(\"6\\n5\\n3 1 2 3 3\\n1\\n3\\n3\\n\") == \"4\"\nassert solution(\"6\\n5\\n3 1 2 3 3\\n3\\n3\\n3\\n\") == \"4\"\nassert solution(\"6\\n5\\n3 1 2 3 3\\n1\\n1\\n1\\n\") == \"4\"\nassert solution(\"6\\n5\\n3 1 2 3 3\\n2\\n2\\n2\\n\") == \"3\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 5 6 7\\n1 1 5 5') == '1'\nassert solution('4\\n4 4 5 6\\n2 2 2 2') == '2'\nassert solution('4\\n5 5 5 5\\n3 3 2 3') == '0'"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n1337''') == '0'\nassert solution('''2\n3\n3\n4\n5\n5\n''') == '121'\nassert solution('''3\n1\n2\n3\n4\n5\n''') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1337\n\n''') == '0'\nassert solution('''\n8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n\n''') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n9 4 1 7 10 1 6 5\n1 2\"\"\") == \"121\"\nassert solution(\"\"\"\n1\n1337\"\"\") == \"0\"\nassert solution(\"\"\"\n7\n0 1 4 3 5 2 8 7\"\"\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n''') == '121'\nassert solution('''\n1\n1337\n''') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '121'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == '121'\nassert solution_fast(input_data) == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([4, 7, 10, 1, 6, 5, 3, 2, 9]) == \"121\"\nassert solution([1, 2, 1, 5, 6, 2, 1, 1]) == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1 2 1\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n10\n1 2\n1 3\n1 4\n2 5\n3 6\n3 7\n''') == '0'\nassert solution('''\n10\n5\n3 4\n2 5\n1 6\n4 7\n5 8\n''') == '120'"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '6'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24''') == '18'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24''') == '227'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24''') == '8'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '6'\nassert solution('5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '18'\nassert solution('5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '0'\nassert solution('5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '227'\nassert solution('5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"227\"\nassert solution(input()) == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '6'"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8''') == '6'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8''') == '18'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8''') == '10'"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '6'\nassert solution('5 10') == '227'\nassert solution('5 10') == '227'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 3\n1 2 1 3''') == '18'\nassert solution('''5\n10 6\n8 7 1 8 3 7 5 10 8 9''') == '227'\nassert solution('''5\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '8'\nassert solution('''5\n10 20\n24 100 50 20 100500''') == '0'\nassert solution('''5\n10 10\n1 2 3 4 5 6 7 8''') == '10'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '6'\nassert solution('''\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '18'\nassert solution('''\n2 1\n1 2\n''') == '1'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == \"6\"\nassert solution('''\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == \"17\"\nassert solution('''\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == \"227\"\nassert solution('''\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == \"8\"\nassert solution('''\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == \"0\"\n''')\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"227\"\nassert solution(input()) == \"8\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n1\n''') == '1'\nassert solution('''1\n2\n''') == '1'\nassert solution('''1\n2\n''') == '2'\nassert solution('''1\n2\n''') == '2'\nassert solution('''1\n3\n''') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n2\n3\n4\n5\n''') == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s1) == \"2\"\nassert solution(s2) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"3\\n2\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3,3\\n1\\n1\\n2\\n\") == \"1\"\nassert solution(\"5,10\\n1,5\\n3,7\\n3,7\\n\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n') == '1\\n'\nassert solution('1\\n2\\n3\\n') == '1\\n2\\n'\n\nassert solution('1\\n3\\n') == '2\\n'\nassert solution('1\\n3\\n4\\n') == '2\\n'\nassert solution('1\\n4\\n') == '2\\n'\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1,2,3\") == \"1\"\nassert solution(\"1,2\",\"1,2,3\") == \"1\""
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == '\\n'.join(map(str, range(1, 33))) + '\\n'\n\n'''\n\n'''\nI'm sure there are other ways to solve this problem:\n\n1. We can write a recursive function to return the sum of the i-1th and i-2nd number\n\n2. We can iterate the 3rd number and add that to the sum of the 2nd and 1st number and then add 1 to the sum\n\n3. We can use an array and modify it at each iteration, as we are in a O(1) space\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == []\nassert solution(\"1\") == [1]\nassert solution(\"2\") == [1, 1]\nassert solution(\"3\") == [1, 3, 3, 1]\nassert solution(\"4\") == [1, 4, 6, 4, 1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n''') == ['1', '3', '3', '1']\n\nassert solution('''\n20\n''') == ['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '9', '10', '10', '10', '10', '11', '11', '11', '11', '12', '12', '12', '12', '13', '13', '13', '13', '14', '14', '14', '14', '15', '15', '15', '15', '16', '16', '16', '16', '17', '17', '17', '17', '18', '18', '18', '18', '19', '19', '19', '19', '20', '20', '20', '20', '21', '21', '21', '21', '22', '22', '22', '22', '23', '23', '23', '23', '24', '24', '24', '24', '25', '25', '25', '25', '26', '26', '26', '26', '27', '27', '27', '27', '28', '28', '28', '28', '29', '29', '29', '29', '30', '30', '30', '30', '31', '31', '31', '31', '32', '32', '32', '32', '33', '33', '33', '33']\n\nassert solution('''\n20\n''') == ['1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '9', '10', '10', '10', '10', '11', '11', '11', '11', '12', '12', '12', '12', '13', '13', '13', '13', '14', '14', '14', '14', '15', '15', '15', '15', '16', '16', '16', '16', '17', '17', '17', '17', '18', '18', '18', '18', '19', '19', '19', '19', '20', '20', '20', '20', '21', '21', '21', '21', '22', '22', '22', '22', '23', '23', '23', '23', '24', '24', '24', '24', '25', '25', '25', '25', '26', '26', '26', '26', '27', '27', '27', '27', '28', '28', '28', '28', '29', '29', '29', '29', '30', '30', '30', '30', '31', '31', '31', '31', '32', '32', '32', '32', '33', '33', '33', '33']"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1 3 3 1'\nassert solution('4') == '1 4 6 4 1'\n\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == ['1','3','3','1']\nassert solution('4') == ['1','4','6','4','1']\n\n\n'''\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1,1]\n        \n        ans = [1,1]\n        for i in range(2,rowIndex+1):\n            ans.append(1)\n            for j in range(i):\n                ans[j] += ans[j+1]\n            \n        return ans"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33''') == '1 3 3 1', 'Too lazy!'\n\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33''') == '1 3 6 10 15 21 28 36 45 42 55 66 126 153', 'Too lazy!'\n\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33''') == '1 3 3 2 1', 'Too lazy!'"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == [1,3,3,1], \"Wrong answer\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin)\n        previous = 1\n        curr = 1\n        for i in range(n):\n            curr = previous + curr\n            previous = curr\n        return str(curr)\n\n\nassert Solution().solve('3') == \"1 3 3 1\", \"Wrong answer\"\n\n\"\"\"\nRuntime: 20 ms, faster than 87.37% of Python3 online submissions for Pascal's Triangle II.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Pascal's Triangle II.\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n''') == '''\n1\n3\n3\n1\n\n'''\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n''') == '''\n1\n3\n3\n1\n\n'''\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\n\n\"\"\"\n\nimport math\n\ninput = '3'\n\nn = int(input)\nn1 = math.factorial(n)\nn2 = n1 // math.factorial(n-1)\nn3 = n1 // math.factorial(n-2)\nn4 = n1 // math.factorial(n-3)\n\noutput = [n4, n3, n2, n1]\n\nfor i in range(len(output)):\n    output[i] = str(output[i])\n\nprint(\" \".join(output))"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == [1,3,3,1]\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        result = [[1], ]\n        for i in range(1, numRows):\n            row = []\n            row.append(1)\n            for j in range(i):\n                row.append(result[-1][j] + result[-1][j + 1])\n            row.append(1)\n            result.append(row)\n        return result"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('11') == '1'\nassert solution('1') == '1'\nassert solution('1110') == '2'\nassert solution('1100011') == '2'\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"00000000000000000000000000001011\") == \"3\"\nassert solution(\"00000000000000000000000010000000\") == \"1\"\nassert solution(\"111111111111111111111111111111101\") == \"31\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '000000000000000111111111111111111111111111111101') == '3'\nassert solution(\n    '0000000000000111111111111111111111111111111101') == '1'\nassert solution(\n    '1111111111111111111111111111111111111111111111111101') == '31'\n'''\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('10000001') == '31'\nassert solution('100000001') == '31'\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('00000000000000000000000000001011') == '3'\nassert solution('00000000000000000000000010000000') == '1'\nassert solution('111111111111111111111111111111101') == '31'\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == str(count_bits(int(input)))\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == '3'\nassert solution('00000000000000000000000010000000') == '1'\nassert solution('111111111111111111111111111111101') == '31'\nassert solution
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11111111111111111111111111111101\") == \"31\"\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123') == '124'\nassert solution('32') == '33'\nassert solution('221') == '222'\nassert solution('12') == '13'\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"./test_files/test_01.txt\") == \"./test_files/test_01.txt\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('[1,2,3]') == '[1,2,4]'\nassert solution('[4,3,2,1]') == '[4,3,2,2]'"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]\nassert solution([9,9,9,9,9]) == [1,0,0,0,0,0,0,0,0,0]\nassert solution([9,9,9,9,9,9,9,9,9,9]) == [1,0,0,0,0,0,0,0,0,0]\nassert solution([9,9,9,9,9,9,9,9,9,9,9,9,9]) == [1,0,0,0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1,2,3''') == '1,2,4'\nassert solution('''4,3,2,1''') == '4,3,2,2'\nassert solution('''0''') == '1'\nassert solution('''9''') == '10'\nassert solution('''0''') == '1'\n'''\n)\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('123') == '124'\nassert solution('12') == '13'\nassert solution('1234') == '1235'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == [\"1\", \"2\", \"4\"]\nassert solution([\"4\", \"3\", \"2\", \"1\"]) == [\"4\", \"3\", \"2\", \"2\"]"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([1,2,3]) == \"1 2 4\"\nassert solution([4,3,2,1]) == \"4 3 2 2\"\nprint(\"All tests passed!\")"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"-1 1\") == \"1\"\nassert solution(\"1 -1\") == \"2\"\nassert solution(\"-1 -1\") == \"0\"\nassert solution(\"1 \\times 1\") == \"3\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 1\"\"\") == \"4\"\nassert solution(\"\"\"3 2\"\"\") == \"3\"\nassert solution(\"\"\"3 2\"\"\") == \"3\"\nassert solution(\"\"\"3 1\"\"\") == \"4\"\nassert solution(\"\"\"2 4\"\"\") == \"6\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '4', solution('3 1')\nassert solution('4 2') == '3', solution('4 2')\nassert solution('-10 -10') == '-10 -10', solution('-10 -10')\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"3 4\") == \"7\"\nassert solution(\"3 1\") == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '4', '2+3=4'\nassert solution('5 6') == '11', '5-6=1 and 5*6=30'\nassert solution('1 1') == '1', '1+1=1'\nassert solution('1000 1') == '1000', '1\\*1000=1000'\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"3 3\") == \"4\""
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"-1 -2\") == \"0\"\nassert solution(\"-5 2\") == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '4', 'Failed test case 1'\nassert solution('3 3') == '6', 'Failed test case 2'\nassert solution('1 5') == '10', 'Failed test case 3'\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3 1') == '4'\n\n###"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\nassert solution('1 1') == '1'\nassert solution('-100 1') == '0'\nassert solution('100 1') == '1'\nassert solution('-1000 1') == '1'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"12 5\") == \"3\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('3 2') == '3'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '3'\nassert solution('1 2') == '1'\nassert solution('2 3') == '2'\nassert solution('5 7') == '3'\nassert solution('8 12') == '4'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 1') == '3'"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution(\"4 5\\n0 5 -2 4 3 4\") == \"3\"\n\"\"\"\nimport math\nimport itertools"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 10\n-2 4\n3 4\n4 -4\n''') == '3'\nassert solution('''\n10 10\n1 1\n-2 4\n3 4\n4 -4\n''') == '1'\n''')"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5') == '3'\nassert solution('10 10') == '3'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2 4\") == \"2\"\n'''\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(12) == 'Yes', 'Check your solution'\nassert solution(1) == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\nassert solution('123') == 'No'\nassert solution('32') == 'Yes'\nassert solution('15') == 'Yes'\nassert solution('77') == 'No'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'Yes'\nassert solution('10') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == \"Yes\"\nassert solution('34') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    10\n    20\n    5\n    ''') == 'Yes', '3'\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == \"Yes\"\nassert solution('123') == \"No\"\nassert solution('1234') == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"6\") == \"No\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 5, -1]) == ['12', '8', '10']\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 5 -1\\n\") == \"12\\n8\\n10\\n\", \"First example\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"6\\n9\\n4\\n\", \"Second example\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 -2\n''') == '10'\nassert solution('''4\n5 4 -3\n''') == '10'\nassert solution('''3\n1 5 -1\n''') == '12'\n\n--Submission--\nyield"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"4\") == \"13\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '12'\nassert solution('2') == '8'\nassert solution('1') == '10'"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"3 2 5 -1\") == \"8\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n3 5 -1\n\"\"\") == \"12\"\nassert solution(\"\"\"2\n0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"3\n-2 5 -1\n\"\"\") == \"8\"\nassert solution(\"\"\"3\n3 5 0\n\"\"\") == \"10\"\nassert solution(\"\"\"3\n4 5 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5 -1\") == \"12\"\nassert solution(\"2 2 3\") == \"0\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '12'\nassert solution('2') == '8'\nassert solution('1') == '10'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"12\"\nassert solution(\"3\") == \"8\"\nassert solution(\"4\") == \"10\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\nprint(solution(\"c\"))\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == 'vowel'\nassert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\nassert solution(\"e\") == \"consonant\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWWB') == '2'\nassert solution('WWB') == '2'\nassert solution('WB') == '1'\nassert solution('BWB') == '2'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"BBBWW\") == \"1\"\nassert solution(\"BWW\") == \"2\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''BBBWW''') == '1'\nassert solution('''BWBWW''') == '2'\nassert solution('''BWBBW''') == '3'\nassert solution('''BBBW''') == '4'\nassert solution
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBWBWBWW') == '4'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WW\") == \"0\"\nassert solution
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''BBBWW\n''') == '1'\n\nassert solution('''BWBWB\n''') == '2'\n\nassert solution('''WWWWWB\n''') == '2'\n\nassert solution('''WWWWWB\n''') == '2'\n\nassert solution('''WWWWWB\n''') == '2'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('1 1') == 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('3 5') == 'No'\nassert solution('100 7') == 'Yes'\nassert solution('17 39') == 'No'\nassert solution('1 3') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1236\") == \"Yes\"\nassert solution(\"1235\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('2 23') == 'No'\nassert solution('12 2') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 21\\n') == 'Yes'\nassert solution('1 1\\n') == 'No'\nassert solution('1 2\\n') == 'No'\nassert solution('2 2\\n') == 'Yes'\nassert solution('3 4\\n') == 'Yes'\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('2 3') == 'No'\nassert solution('1 1') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('2 2') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('3 4') == 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\nassert solution(\"2 5\") == \"No\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 1 4 1 5 9 2\") == \"4\"\nassert solution(\"6\\n6 2 2 1 5 2 2\") == \"3\"\nassert solution(\"4\\n3 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\nassert solution('2\\n1 2') == '1'\nassert solution('2\\n1 2') == '0'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\nassert solution('4\\n5 1 2 6 3') == '2'"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == '4'\nassert solution('8') == '0'"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == '4'\nassert solution('10') == '4'\nassert solution('101') == '1'\nassert solution('1111') == '5'\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '5'\nassert solution('10') == '7'\nassert solution('9') == '7'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"3\") == \"5\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"7\"\nassert solution(\"10\") == \"33\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '5'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '9'\n'''"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '8'\n\n'''\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"5\"\nassert solution(\"3\") == \"9\"\nassert solution(\"6\") == \"27\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 4') == 'NO'\nassert solution('-4 5 0') == 'YES'\nassert solution('-6 6 6') == 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 2\") == \"NO\"\nassert solution(\"5 4 3\") == \"YES\"\nassert solution(\"4 5 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 6 2\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('1 2 2') == 'NO'\nassert solution('1 2 3') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 3') == 'YES'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 5\") == \"YES\", \"Sample Test Failed\"\nassert solution(\"1 0 1\") == \"YES\", \"Sample Test Failed\"\nassert solution(\"4 4 4\") == \"YES\", \"Sample Test Failed\"\nassert solution(\"5 5 5\") == \"NO\", \"Sample Test Failed\"\nassert solution(\"2 2 2\") == \"NO\", \"Sample Test Failed\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 4 6''') == 'YES'\nassert solution('''5 5 10''') == 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\n\n'''"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 1 1') == 'NO'\nassert solution('3 3 3') == 'NO'\nassert solution('1 1 1') == 'NO'\nassert solution('2 2 2') == 'NO'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 6') == 'YES'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('21') == 'No'\nassert solution('10') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"0\") == \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\nassert solution('12345') == 'No'\nassert solution('1234') == 'Yes'\nassert solution('123') == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"No\"\nassert solution(\"13\") == \"No\"\nassert solution(\"21\") == \"Yes\"\nassert solution(\"23\") == \"Yes\"\nassert solution(\"32\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'No'\nassert solution('9') == 'Yes'\nassert solution('3') == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'No', 'Expected: No\\nActual: Yes'\nassert solution('13') == 'Yes', 'Expected: Yes\\nActual: No'\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"29\") == \"Yes\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('25') == \"Yes\", \"Somehow it printed Yes\"\nassert solution('81') == \"No\", \"Somehow it printed No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('29') == \"Yes\"\nassert solution('35') == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"2 1 4\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 1 1\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\nassert solution(\"5 5 5\\n3 3 3\\n\") == \"1\"\nassert solution(\"5 5 5\\n1 3 1\\n\") == \"4\"\nassert solution(\"5 5 5\\n3 2 1\\n\") == \"1\"\nassert solution(\"5 5 5\\n3 2 1\\n\") == \"2\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"10 10 10\") == \"1\""
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 3 3\n1 2 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 3 1\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"6 2 1\") == \"2\"\nassert solution(\"10 10 1\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 3') == '1'\nassert solution('5 3 3') == '1'\nassert solution('20 3 3') == '6'\nassert solution('10 3 3') == '2'\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 3 3\n1 2 4\"\"\") == \"1\"\nassert solution(\"\"\"5 3 2\n1 2 3\"\"\") == \"2\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3\") == \"1\""
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"4 2 0\") == \"1\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"4 1 5\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 3 3\"\n    \"1 2 4\"\n    ) == \"1\"\n\nassert solution(\n    \"5 3 3\"\n    \"1 2 4\"\n    ) == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('1 1') == 'No'\nassert solution('2 3') == 'Yes'\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('9 7') == 'Yes'\nassert solution('5 5') == 'No'\n\n--\n\nclass Solution:\n    def solve(self, H, W, s):\n        d = {}\n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if s[i-1][j-1] == '#':\n                    d[(i,j)] = '#'\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if (i-1, j-1) in d:\n                    d[(i,j)] = d[(i-1, j-1)]\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if (i, j) not in d:\n                    d[(i,j)] = '#'\n        \n        for k in d:\n            if k[0]!= k[1]:\n                d[k] = '.'\n        \n        return d\n\nclass Solution:\n    def solve(self, H, W, s):\n        for i in range(1, H+1):\n            s[i-1] = '#' + s[i-1] + '#'\n        for i in range(1, W+1):\n            s[-i] = '#' + s[-i] + '#'\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if s[i][j]!= '#':\n                    s[i][j] = '.'\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if s[i][-j]!= '#':\n                    s[i][-j] = '.'\n        \n        for i in range(1, H+1):\n            s[i] = s[i][1:] + s[i][:1]\n        for i in range(1, W+1):\n            s[-i] = s[-i][1:] + s[-i][:1]\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if s[i][j] == '.':\n                    s[i][j] = '#'\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if s[i][-j] == '.':\n                    s[i][-j] = '#'\n        \n        for i in range(1, H+1):\n            s[i] = s[i][1:] + s[i][:1]\n        for i in range(1, W+1):\n            s[-i] = s[-i][1:] + s[-i][:1]\n        \n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if s[i][j] == '#' and s[i][j+1] == '#' and s[i][j-1] == '#' and s[i+1][j] == '#' and s[i-1][j] == '#':\n                    return 'Yes'\n        \n        return 'No'\n\nclass Solution:\n    def solve(self, H, W, s):\n        s = s.split('\\n')\n        for i in range(len(s)):\n            s[i] = s[i].split(' ')\n        d = {}\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if (s[i][j], s[i][j+1]) not in d:\n                    d[(s[i][j], s[i][j+1])] = '.'\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if (s[i][j], s[i][j-1]) not in d:\n                    d[(s[i][j], s[i][j-1])] = '.'\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if s[i][j] not in d:\n                    d[s[i][j]] = '#'\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if s[i][j] == '#' and (s[i][j+1], s[i][j-1]) not in d:\n                    d[(s[i][j+1], s[i][j-1])] = '#'\n        for i in range(len(s)):\n            s[i] = ''.join(s[i])\n        for i in range(len(s)):\n            if s[i] == '.' and (s[i-1]!= '#' and s[i+1]!= '#'):\n                return 'Yes'\n        return 'No'\n\nclass Solution:\n    def solve(self, H, W, s):\n        s = s.split('\\n')\n        for i in range(len(s)):\n            s[i] = s[i].split(' ')\n        \n        d = {}\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if (s[i][j], s[i][j+1]) not in d:\n                    d[(s[i][j], s[i][j+1])] = '.'\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if (s[i][j], s[i][j-1]) not in d:\n                    d[(s[i][j], s[i][j-1])] = '.'\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if s[i][j] not in d:\n                    d[s[i][j]] = '#'\n        for i in range(len(s)):\n            for j in range(len(s[i])):\n                if s[i][j] == '#' and (s[i][j+1], s[i][j-1]) not in d:\n                    d[(s[i][j+1], s["
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n.#.\n###\n.#.\n\n''') == 'Yes'\nassert solution('''3 3\n.#.\n##.\n.##\n\n''') == 'Yes'\nassert solution('''3 3\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'Yes', 'Test 1 failed'\nassert solution('1 5') == 'No', 'Test 2 failed'\nassert solution('2 4') == 'Yes', 'Test 3 failed'\n\n\"\"\"\n\nfrom typing import List\nimport sys\n\nsys.setrecursionlimit(100000)\n\n\nclass Solution:\n    def __init__(self):\n        self.grid = None\n        self.visited = None\n        self.h_row = None\n        self.w_column = None\n        self.visited_nodes = 0\n\n    def __print_grid(self, grid: List[List[str]]) -> None:\n        for row in grid:\n            print(row)\n\n    def solution(self, stdin: str) -> str:\n        self.grid = [[i for i in stdin.strip()]]\n        self.visited = [[False for _ in range(len(self.grid[0]))] for _ in range(len(self.grid))]\n        self.__print_grid(self.grid)\n        self.__visit_node(0, 0)\n\n        return 'Yes' if self.visited_nodes == (len(self.grid) * len(self.grid[0])) else 'No'\n\n    def __visit_node(self, row, column) -> None:\n        if (row < 0 or row >= len(self.grid)) or (column < 0 or column >= len(self.grid[0])) or self.visited[row][column]:\n            return\n\n        if self.grid[row][column] == '#':\n            self.visited[row][column] = True\n            return\n\n        self.visited[row][column] = True\n        self.__visit_node(row - 1, column)\n        self.__visit_node(row + 1, column)\n        self.__visit_node(row, column - 1)\n        self.__visit_node(row, column + 1)\n\n    def __print_visited(self) -> None:\n        for row in self.visited:\n            print(row)\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'Yes'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n.#.\n###\n.##\n''') == 'Yes'\nassert solution('''\n10 10\n###.##.###.\n##.##.#####.\n##.##.#####.\n##.##.#####.\n##.##.#####.\n#####.##.##.\n#####.##.##.\n#####.##.##.\n#####.##.##.\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 1\") == \"Yes\"\n\nInput:\n5 5\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"100 10 20\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"100 50 20\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('10 10 30') == 'No'\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 20 30\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"2 2 2\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('5 10 20') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('1 1 1') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 20') == 'Yes'\nassert solution('100 10 20') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('10 20 30') == 'No'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('1 30 2') == 'No'\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"3 4 1 2\") == \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\"3 8 7 1\", \"\"]) == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 1 1\n''') == 'Left', 'Left'\nassert solution('''\n1 2 3 4\n''') == 'Left', 'Left'\nassert solution('''\n1 1 1 1\n''') == 'Left', 'Left'\nassert solution('''\n1 1 1 1\n''') == 'Left', 'Left'\nassert solution('''\n1 1 1 1\n''') == 'Left', 'Left'\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"A 2 1 3\") == \"Left\"\nassert solution(\"1 2 2\") == \"Balanced\"\nassert solution(\"4 1 1\") == \"Right\"\nassert solution(\"2 4 3\") == \"Left\"\nassert solution(\"1 1 1\") == \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 'Left'\nassert solution('4 5 3 2') == 'Left'\nassert solution('1 5 2 4') == 'Left'\nassert solution('4 1 5 2') == 'Left'\nassert solution('4 2 1 5') == 'Left'\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == 'Left'\nassert solution('3 4 1 2') == 'Right'\nassert solution('3 1 2 4') == 'Left'"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"Left\"\nassert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"10 8 7 1\") == \"Right\"\nassert solution(\"12 9 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 8 7 1') == 'Left'\nassert solution('1 3 7 1') == 'Left'\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 8, 7, 1]) == \"Left\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"8\", \"Wrong answer\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\", \"Wrong answer\"\nassert solution(\"1\") == \"8\", \"Wrong answer\""
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"10\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '8'\nassert solution('3') == '0'\nassert solution('5') == '5'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n0 0 0 1 0 0 1 1 0\n2 2 1 1 1 0 1 1 0\n1\n1\n''') == '8'\nassert solution('''\n2\n0 0 0 1 0 0 1 1 0\n2 2 1 1 1 0 1 1 0\n1\n1\n''') == '10'\nassert solution('''\n3\n0 0 0 0 0 0 0 1 0\n1 1 1 1 1 1 1 1 0\n1\n1\n''') == '0'\nassert solution('''\n4\n0 0 0 0 0 0 1 1 0\n1 1 1 1 1 1 1 1 0\n0 0 1 0 0 0 0 0 1\n0 0 1 1 1 1 1 1 0\n1 0 1 0 0 0 0 1 1\n0 1 1 1 1 1 1 1 0\n0 1 1 1 1 1 1 1 0\n1 0 1 0 0 0 0 1 1\n0 1 1 1 1 1 1 1 0\n1 1 1 1 1 1 1 1 0\n0 0 1 1 1 1 1 1 0\n0 1 1 1 1 1 1 1 0\n1 1 1 1 1 1 1 1 0\n0 0 1 1 1 1 1 1 0\n0 1 1 1 1 1 1 1 0\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 1 1 1\n1 1 1 1 1 1 1 1 0\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 1 1\n0 1 1 1 1 1 1 1 0\n0 0 1 0 0 0 0 1 1\n0 0 0 0 0 0 1 1 1\n0 0 1 1 1 1 1 1 0\n1 1 1 1 1 1 1 1 0\n0 0 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 1 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1 0\n0 0 0 0 0 0 0 0 1\n0 0 0 0 0 0 0 0 1\n1 1 1 1 1 1 1 1"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '8'\nassert solution('3') == '10'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '8'\nassert solution('3') == '6'\nassert solution('7') == '0'\nassert solution('13') == '0'"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"5 2\") == \"Yes\"\nassert solution(\"5 2\") == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'Yes'\nassert solution('2 3') == 'No'\nassert solution('1 2') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 4\n269-6650\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"1 1\n100\n\"\"\") == \"No\"\n\nassert solution(\"\"\"1 4\n567-8930\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"1 5\n-78-4500\n\"\"\") == \"No\"\n\nassert solution(\"\"\"1 6\n-1-1000\n\"\"\") == \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n269-6650') == 'Yes'\nassert solution('3 4\\n310-1450') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n\"\n                 \"269-6650\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 2') == '1', \"Wrong!\"\nassert solution('3 1 2') == '1', \"Wrong!\"\nassert solution('4 3 2') == '0', \"Wrong!\"\nassert solution('4 2 3') == '3', \"Wrong!\"\nassert solution('6 7 1') == '0', \"Wrong!\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 6') == '1'\nassert solution('3 4 6') == '2'\nassert solution('3 5 6') == '1'\nassert solution('7 4 6') == '0'\nassert solution('10 10 10') == '0'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 6\") == \"1\"\nassert solution(\"3 2 6\") == \"1\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 6') == '1'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2 6\n''') == '1'\nassert solution('''2 6 9\n''') == '4'\nassert solution('''5 1 3\n''') == '4'\nassert solution('''6 6 5\n''') == '7'\nassert solution('''5 2 4\n''') == '2'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2 6\n3 4 2\n1 4 6\n1 3 6''') == '1'\n\nassert solution('''5 1 3\n1 2 5\n4 2 5\n1 4 5\n4 5 5''') == '2'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2 6''') == '1'\nassert solution('''10 10 10''') == '0'\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"6 5 3\") == \"3 4 5 6\""
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3\"\nassert solution(\"1 5 4\") == \"1\"\nassert solution(\"5 10 2\") == \"5\"\nassert solution(\"2 3 6 5 7 4 8 9 10\") == \"5\"\nassert solution(\"3 5 1 7\") == \"1\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '3 4 7 8'\nassert solution(input()) == '3 4 7 8'\nassert solution(input()) == '3 4 7 8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('5 6 7 8 9 10') == '5'\nassert solution('1 2 3 4 5') == '2 3 4 5'\nassert solution('8 8 8 8 8 8') == '8'\nassert solution('1 2 3 4 5 6') == '2 3 4 5 6'\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\nassert solution('4 8 2') == '3 4 7 8'\nassert solution('8 8 2') == '3 4 7 8'\nassert solution('10 4 2') == '3 4 7 8'\nassert solution('7 4 2') == '3 4 7 8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '1'\nassert solution('5 8 3') == '3'\nassert solution('4 8 2') == '4'\nassert solution('4 9 1') == '3'\nassert solution('4 8 9') == '9'"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"1 2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 2\") == \"3\"\nassert solution(\"6 2 2\") == \"4\"\nassert solution(\"2 5 2\") == \"3\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('5 6 1') == '5'\nassert solution('4 1 2') == '4'\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AtCoder s Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AtCoder s Contest') == 'ABC'\nassert solution('AtCoder Beginner Contest') == 'ABC'"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder s Contest\") == \"AXC\"\nassert solution(\"AtCoder Beginner Contest\") == \"ABE\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\nassert solution(\"AtCoder Beginner Contest\") == \"ABE\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\nprint(\"All test cases passed\")\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AtCoder s Contest') == 'ABC'\n'''\n\nimport re"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\nassert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AtCoder s Contest') == 'AxC'\nassert solution('AtCoder Beginner Contest') == 'ABC'\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\nassert solution('AtCoder Senior Contest') == 'ATC'\n'''"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 2 3\"\"\") == \"NO\"\nassert solution(\"\"\"1 5 3\"\"\") == \"YES\"\nassert solution(\"\"\"1 5 2\"\"\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('1 3 2') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5 4\") == \"YES\"\nassert solution(\"10 5 4\") == \"NO\"\nassert solution(\"4 2 4\") == \"YES\"\nassert solution(\"10 5 3\") == \"NO\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4\") == \"YES\"\nassert solution(\"6 1 3\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3 4') == 'YES'\nassert solution('5 5 5') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 4') == 'YES'"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 2') == 'YES'\nassert solution('6 5 6') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 4') == 'YES'\nassert solution('5 5 5') == 'NO'\nassert solution('10 1 5') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 2 4\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"YES\"\nassert solution(\"5 5 4\") == \"NO\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"83\"\nassert solution(\"10 20\") == \"148\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"10 1\") == \"10\"\nassert solution(\"10 0\") == \"0\""
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\nassert solution('50 1') == '50'\nassert solution('10 0') == '10'\nassert solution('10 0.5') == '10'\nassert solution('10 1') == '10'\n\nprint(f\"Solution = {solution(input())}\")\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\n\n----Task-----\nA sandwich factory produces sandwitches that run for X seconds.\nWhen a sandwich is produced, it needs to fill up the upper bulb.\nYou know how fast the bulb is in the upper bulb, which is known as the speed of light, so the speed of sand produced for a sandwich is the speed of light.\nThe sand switch can be used to fill the bulb, and the time it takes to fill up the bulb is called the time of production.\nFind the time it takes to fill up the upper bulb.\n\n-----Input-----\nX t\n\n-----Output-----\nTime it takes to fill the bulb\n\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\n\nfrom collections import namedtuple\n\nSand = namedtuple('Sand', 'count')\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 30') == '83'\nassert solution('100 50') == '83'\nassert solution('100 60') == '84'\nassert solution('10 40') == '84'\nassert solution('10 100') == '84'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 20') == '32'\nassert solution('10') == '32'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\nX, t = stdin.split()\nX = int(X)\nt = int(t)\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1000000000000000000\"\nassert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\nassert solution(\"100000000100000000000000000\") == \"-1\"\nassert solution(\"-1\") == \"1000000000000000000\"\nassert solution(\"2\") == \"1000000000000000000\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000000000 1000000000') == '1000000000000000000'\nassert solution('2') == -1\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1000000000000000000\"\nassert solution(\"2\") == -1\nassert solution(\"1000000000 1000000000\") == \"1000000000000000000\""
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1000000000 1000000000''') == '1000000000000000000'\nassert solution('''3\n1000000000 1000000000''') == '-1'\nassert solution('''10\n1000000000000000\n''') == '1000000000000000000'\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000000000000\\n\") == \"1000000000000\\n\"\nassert solution(\"10\\n1000000000000000\\n\") == \"1000000000000\\n\"\nassert solution(\"2\\n1000000000000000\\n\") == \"1000000000000\\n\"\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n100000000000 1000000000\") == \"1000000000000000000\"\nassert solution(\"3\\n100000000000 1000000000\\n\") == -1\nassert solution(\"4\\n100000000000 1000000000\\n100000000000 1000000000\") == \"1000000000000000000\"\nassert solution(\"10\\n100000000000 1000000000\\n100000000000 1000000000\") == -1\nassert solution(\"10\\n100000000000 1000000000\\n100000000000 1000000000\\n\") == -1\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1000000000000000000\"\nassert solution(\"2\") == -1\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100000000000000\") == \"1000000000000000000\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1000000000000000000'\nassert solution('3') == -1\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n100000\\n') == '1000000000000000000'\nassert solution('2\\n1\\n') == '-1'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"0\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Yes'\nassert solution('3') == 'No'\nassert solution('7') == 'Yes'\n\"\"\"\n\nx = input().split(' ')\nn = int(x[0])\na = int(x[1])"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2018') == 'Yes'\nassert solution('218') == 'Yes'"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n\") == \"Yes\"\n\nassert solution(\"100\\n1000\\n\") == \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"10\") == \"Yes\""
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0\\n') == 'No'\nassert solution('1\\n') == 'Yes'\nassert solution('2\\n') == 'Yes'\nassert solution('3\\n') == 'Yes'\nassert solution('4\\n') == 'Yes'\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\\n500\\n300\\n1500\\n500\\n1500\\n2000\\n3000\") == \"Yes\"\nassert solution(\"22\\n500\\n1500\\n3000\\n500\\n3000\\n2000\\n2000\") == \"No\"\nassert solution(\"7\\n1000\\n2000\\n2000\\n2000\\n2000\\n2000\\n2000\") == \"Yes\"\nassert solution(\"1\\n2000\\n1000\\n3000\\n2000\\n3000\\n6000\\n2000\\n3000\") == \"Yes\"\nassert solution(\"1\\n1000\\n2000\\n2000\\n2000\\n2000\\n2000\\n2000\") == \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2015\") == \"Yes\"\nassert solution(\"20\") == \"No\"\nassert solution(\"2018\") == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"18\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('1 1 1') == 'dangerous'\nassert solution('1 1 2') =='safe'\nassert solution('1 2 3') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2 3\n4 5 6''') =='safe'\nassert solution('''1 3 2\n3 5 6''') == 'dangerous'\nassert solution('''1 5 3\n4 6 5''') == 'dangerous'\nassert solution('''3 3 1\n1 2 2''') == 'dangerous'"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2 3 2'\n) == 'dangerous'\nassert solution(\n    '4 3 6'\n) =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'dangerous'\nassert solution('2') == 'dangerous'\nassert solution('3') =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 6') =='safe'\nassert solution('4 3 6') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') =='safe'\nassert solution('4 3 6') == 'dangerous'\nassert solution('5 4 5') =='safe'\nassert solution('1 10 100') == 'dangerous'\nassert solution('20 100 1') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 3 4''') =='safe'\nassert solution('''5 2 1''') == 'dangerous'\nassert solution('''1 6 9''') == 'dangerous'\nassert solution('''1 3 1''') =='safe'\nassert solution('''0 0 0''') =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3 6\n''') =='safe'\nassert solution('''2 4 1\n''') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('10 8 10') == 'dangerous'\n\"\"\"\n\nx,a,b = map(int,input().split())\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2 3 4') =='safe'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '9'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('100') == '99'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\n\") == \"9\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"3\\n\") == \"9\"\nassert solution(\"4\\n\") == \"16\"\nassert solution(\"8\\n\") == \"25\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\n') == '9'\nassert solution('100\\n') == '99'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input) == '9'\nassert solution(input) == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '1'\nassert solution('2') == '1'\n\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '8'\nassert solution('15') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n''') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\", \"Empty string\"\nassert solution(\"1\") == \"1\", \"Single digit\"\nassert solution(\"13\") == \"13\", \"Single digit\"\nassert solution(\"1234\") == \"1234\", \"Single digit\"\nassert solution(\"12345\") == \"12345\", \"Single digit\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"10\"\nassert solution(\"3\") == \"10\"\nassert solution(\"3\") == \"10\"\n\n---Output---\n10"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == '10'\nassert solution(\"3\\n3 3\\n1 1\\n3 2\") == '20'\nassert solution(\"3\\n1 3\\n1 1\\n3 2\") == '20'\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '10'\nassert solution('2 3') == '6'\nassert solution('1 1') == '10'"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2\n''') == '10'\nprint('Solution ='+ solution('''3\n2 3\n1 1\n3 2\n'''))\nprint('Solution ='+ solution('''4\n1 1\n2 2\n1 1\n3 3\n'''))\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(None) == \"0\"\nassert solution('2\\n1\\n3') == \"10\"\nassert solution('3\\n3\\n6') == \"10\"\nassert solution('5\\n5\\n6') == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1000\") == \"2\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1\") == \"10\"\nassert solution(\"3 2\\n1 1\") == \"10\"\nassert solution(\"3 2\\n2 2\") == \"5\"\nassert solution(\"3 3\\n1 1\") == \"10\"\nassert solution(\"5 2\\n1 1\\n2 2\\n3 3\") == \"6\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"10\"\nassert solution(\"1 1\") == \"10\"\nassert solution(\"3 2\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'yes'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'yes'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"b\") == \"no\"\nassert solution(\"c\") == \"no\"\nassert solution(\"123\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('AAAAAAAA') == 'no'\nassert solution('a b c d e') == 'no'\nassert solution('ABD EFGHIJKLMNOPQRSTUVWXYZ') == 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"yes\"\nassert solution(\"abcdefgh\") == \"no\"\nassert solution(\"abcabcdefgh\") == \"yes\"\nassert solution(\"abcabcabcabc\") == \"yes\"\nassert solution(\"abcabcabcabcabc\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('copyrightable') == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('uncopyrightable') == 'yes'"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('a') == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('Hello, world!') == 'no'\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '1'"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nWEEWW\n''') == '1'\nassert solution('''5\nWEEWW\n''') == '1'\nassert solution('''3\nWEEWW\n''') == '0'\nassert solution('''1\nWEEWW\n''') == '0'"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"0\"\n\nstdin = \"\"\"\n10\nWEEWEWEEWEW\n\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nWEEWW\\n\") == \"1\"\nassert solution(\"2\\nWWWEEW\\n\") == \"1\"\nassert solution(\"3\\nWWWWEW\\n\") == \"1\"\nassert solution(\"4\\nWWWWWW\\n\") == \"1\"\nassert solution(\"5\\nWWWWWWWWW\\n\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nWEEWW\n''') == '1'\nassert solution('''4\nWEEW\n''') == '2'\nassert solution('''7\nEWWWWW\n''') == '3'\nassert solution('''14\nWWWEWWW\n''') == '0'\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\nassert solution('4 3') == '2'"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n''') == '2\\n2\\n1\\n1'\nassert solution('''5 2\n1 3\n2 3\n4 5\n3 1\n''') == '2\\n3\\n2\\n2\\n3\\n1'\nassert solution('''4 3\n1 2\n2 3\n1 4\n''') == '2\\n2\\n1\\n1'\nassert solution('''5 2\n1 3\n2 3\n4 5\n3 1\n''') == '2\\n3\\n2\\n2\\n3\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 4') == '1'\nassert solution('20 2') == '1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 3\n1 2\n2 3\n1 4\n\"\"\") == \"2\\n2\\n1\\n1\\n\"\n\nassert solution(\"\"\"\n4 3\n1 2\n2 3\n1 4\n\"\"\") == \"2\\n2\\n1\\n1\\n\"\n\nassert solution(\"\"\"\n2 5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"3\\n3\\n2\\n1\\n1\\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"6 6\") == \"3\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '2\\n2\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\""
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '2\\n2\\n1\\n1'\nassert solution('4 4') == '2\\n1\\n1\\n1'"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '25'\nassert solution('4') == '30'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n5\\n10\\n15') == '25'\nassert solution('2\\n4\\n9\\n16') == '30'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n5\n10\n15\n''') == '25'\nassert solution('''\n5\n5\n5\n5\n''') == '30'\nassert solution('''\n3\n1\n3\n''') == '1'"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"2\\n3\\n4\\n5\") == \"30\"\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 2 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of two numbers.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of x and y.\n\n-----Sample Input-----\n10\n11\n\n-----Sample Output-----\n11\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 3 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n1\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 4 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 5 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 6 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 7 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 8 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 9 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 10 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 11 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 12 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 13 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constraints-----\n - All input values are integers.\n - 0 \u2264 N \u2264 100\n - 0 \u2264 x \u2264 1\n - 0 \u2264 y \u2264 1\n\n-----Input-----\nx, y\n\n-----Output-----\nReturn the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Sample Input-----\n1, -1\n\n-----Sample Output-----\n2\n\n\"\"\")\n\nprint(\"\\n\")\n\nprint(\"------ PROBLEM 14 ------\")\n\nprint(\"\"\"\nWrite a Python function that returns the maximum of the absolute value of the minimum and maximum of an array.\n\n-----Constr"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '25'\nassert solution(input()) == '30'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"25\"\nassert solution(\"3\") == \"30\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '25'\nassert solution('2') == '10'\nassert solution('1') == '5'"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '25'\nassert solution('5') == '30'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"25\"\nassert solution(\"4\") == \"30\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '25'\nassert solution('1') == '10'\nassert solution('2') == '5'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\naabbca') == '2'\nassert solution('10\\nabab') == '3'\nassert solution('6\\nababca') == '2'\nassert solution('6\\nabacab') == '3'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\nababbca') == '2'"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"100\") == \"0\""
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '1'\nassert solution('10') == '2'\nassert solution('20') == '4'\nassert solution('30') == '2'"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    5\n    s\n    \n    ''') == '2'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('123') == '3'\nassert solution('aabbca') == '2'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nabcde') == '1'\nassert solution('6\\nabcdef') == '2'\nassert solution('7\\nabcdefgh') == '3'\nassert solution('13\\nabcdefghijk') == '4'\nassert solution('15\\nabcdefghijk') == '3'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\"\nassert solution(\"Rainy\") == \"Rainy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy,Rainy') == 'Cloudy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"Cloudy\""
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Sunny'\nassert solution('Rainy') == 'Cloudy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\""
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Cloudy\""
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == None\nassert solution(\"7 17 120\") == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 17 120') == '119'"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(['5', '10', '30']) == '20'\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 17 120\n''') == '119'\n\nassert solution('''5 5 0\n''') == '0'\n\nassert solution('''4 3 0\n''') == '0'\n\nassert solution('''7 0 0\n''') == '0'\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 17 120''') == '119'\nassert solution('''6 16 120''') == '126'\nassert solution('''10 9 120''') == '123'\nassert solution('''20 11 120''') == '124'\nassert solution('''5 17 120''') == '115'\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '119'"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 17 120') == '119'"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\nassert solution(\"3 3 2\\n\") == \"6\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"10 12 21\") == \"21\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"3800\""
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3800\"\nassert solution(\"2 1\") == \"4900\"\nassert solution(\"3 1\") == \"5200\"\nassert solution(\"4 1\") == \"5100\"\nassert solution(\"5 1\") == \"5100\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == str(3800)\n\n'''"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n''') == '3800'\n''')\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '3800'"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '3800'\nassert solution('1 2') == '2680'\nassert solution('1 3') == '2208'\nassert solution('2 1') == '5136'\nassert solution('2 2') == '6516'\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1900\"\n\n'''\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\nfrom functools import reduce\n\nN, M = map(int, stdin.readline().strip().split())\n\narr = list(map(int, stdin.readline().strip().split()))\n\nl = [0] * M\nl[0] = reduce(lambda x, y: x * 2 + y, arr[0:M])\n\nfor i in range(1, N):\n    l[0] = reduce(lambda x, y: x * 2 + y, arr[0:M])\n    for j in range(1, M):\n        l[j] = (l[j] * 2 + l[j - 1]) * 2\n    l[0] = reduce(lambda x, y: x * 2 + y, arr[0:M])\n    l = l[M:]\n\nprint(l[-1])\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3800\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') is None\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'z'\nassert solution('atcoderregularcontest') == 'c'\nassert solution('nonexistent') == 'b'"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"b\"\nassert solution(input(\"\")) == None\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"b\"\n\n=========================================================\n\n=========================================================\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('atcoderregularcontest') == 'b', \"Oh no!\"\nassert solution('abcdefghijklmnopqrstuvwxyz') == None"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('aa') == None\nassert solution('bb') == None\nassert solution('aaaa') == None\nassert solution('aaaabb') == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') is None, 'Should be None'\nassert solution('aaaaa') is None, 'Should be None'\nassert solution('aaaaaa') is None, 'Should be None'\nassert solution('aaa') is None, 'Should be None'\nassert solution('b') == 'b', 'Should be b'\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"\") == None\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('ABC') == 'Z'\nassert solution('ABZ') == 'B'\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''ab\nc''') == 'b'\nassert solution('''bc\nd''') == 'c'\nassert solution('''aabc\nbc''') == 'bcd'\nassert solution('''aac\nbc''') == 'bc'\nassert solution('''aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nprint(solution(\"atcoderregularcontest\"))\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\""
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '3'\nassert solution('4 2 4 3') == '3'\nassert solution('4 4 4 4') == '3'\nassert solution('6 2 4 4 5 3') == '4'"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"4\\n3\\n3\\n4\"\n\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"4\") == \"3 3 3\"\nassert solution(\"5\") == \"3 3 3 3\"\nassert solution(\"6\") == \"3 3 3 3 3\"\nassert solution(\"7\") == \"3 3 3 3 3 3\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"3 4 5 6\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '3 3 4'\nassert solution('2 3 4') == '3 3'\nassert solution('7') == '4 4'\nassert solution('15') == '4 5'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 4 4 3\n''') == '4\\n3\\n3\\n4\\n'\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"3 4 4 3\") == \"4\""
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n2 4 4 3') == '4'\nassert solution('4\\n2 3 4') == '3'\nassert solution('4\\n1 2 3') == '1'\nassert solution('4\\n10 20 30 40') == '9'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2', \"Test 1 failed\"\nassert solution('4') == '4', \"Test 2 failed\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 2 4 2 1\") == \"2\"\nassert solution(\"1\\n1\") == \"0\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('10') == '16'\nassert solution('12') == '6'\nassert solution('30') == '24'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0'\nassert solution('6') == '2'"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n3 1 2 4 2 1''') == '2'\nassert solution('''3\n3 1 2 4 2 1''') == '0'\nassert solution('''1\n1 1''') == '0'\nassert solution('''5\n1 2 3 4 2''') == '1'\nassert solution('''5\n1 1 1 1 1''') == '0'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 4 2 1') == '2'\nassert solution('6\\n1 2 4 2 1') == '1'\nassert solution('6\\n1 2 4 2 1') == '2'\nassert solution('6\\n1 2 4 2 1') == '0'"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 3 3 4 2\\n\") == \"2\\n\"\nassert solution(\"6\\n3 1 2 4 2 1\\n\") == \"3\\n\"\nassert solution(\"6\\n3 1 2 4 2 1\\n\") == \"2\\n\"\nassert solution(\"7\\n3 1 2 4 2 1\\n\") == \"3\\n\"\nassert solution(\"7\\n3 1 2 4 2 1\\n\") == \"2\\n\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n3 1 2 4 2\n''') == '2', 'Wrong'\nassert solution('''\n10\n1 1 2 1 1 2 2 1 2 1 1 1 2\n''') == '3', 'Wrong'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"10\") == \"10\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"6\") == \"5\"\nassert solution(\"7\") == \"8\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n7 1\n2\n5\n10\n''') == '8'\nassert solution('''2\n4 1\n2\n5\n10\n''') == '4'\nassert solution('''1\n10 1\n10\n''') == '0'\nassert solution('''2\n10 1\n10\n''') == '0'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n7 1\n2\n5\n10\n''') == '8'\nassert solution('''\n5\n10\n7\n3\n5\n4\n10\n''') == '17'\n'''\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"7\") == \"8\"\nassert solution(\"10\") == \"11\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    4\n    6 1\n    2\n    5\n    10\n\"\"\") == \"8\"\nassert solution(\"\"\"\n    3\n    7 1\n    2\n    5\n    10\n\"\"\") == \"8\"\nassert solution(\"\"\"\n    3\n    5 1\n    2\n    5\n    10\n\"\"\") == \"10\"\n\n\"\"\"\nUse this space to test your solution\nand wait for the right output!\n\nThe iterations are not limited, so you\ncan test your solution even on some\nharder inputs. However, we expect\nyou to test your solution on\nsmaller inputs too!\n\nUse this space as a working memory if you need it.\nDo NOT modify this file, your submission\nwill be graded using the same method\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n7 1\n2\n5\n10\n\n\"\"\"\n) == \"8\"\nassert solution(\n\"\"\"\n5\n2\n1\n4\n6\n\n\"\"\"\n) == \"9\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n7 1\n2\n5\n10\n''') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n7 1\n2\n5\n10\n\"\"\") == \"8\"\nassert solution(\"\"\"\n4\n3\n4\n7\n1\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5\n3\n2\n1\n0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n0\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('4\\n3\\n2\\n100') == '0'\nassert solution('1\\n2\\n4\\n1') == '1'\nassert solution('2\\n1\\n3\\n1') == '0'\nassert solution('4\\n2\\n4\\n1') == '2'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2, 2, 2, 100]) == '2'\nassert solution([2, 2, 2, 100, 1, 2]) == '2'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('2\\n2\\n2\\n1000') == '1'\nassert solution('2\\n2\\n2\\n2000') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '2'\nassert solution('2') == '2'"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 2, 2, 100]) == 2\nassert solution([2, 2, 2, 50]) == 1\nassert solution([2, 2, 2, 100]) == 2\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"A\\n2\\n2\\n100\") == \"2\"\nassert solution(\"A\\n2\\n2\\n100\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 2') == 'Yes', 'Check 1'\nassert solution('1 3 2') == 'No', 'Check 2'\nassert solution('2 2 2') == 'Yes', 'Check 3'\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 0 3') == 'No'\nassert solution('1 0 0') == 'Yes'\n\n'''\n\nA,B,C = map(int, input().split())\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == 'Yes'\n\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"-1 3 2\") == \"No\"\nassert solution(\"1 1 2\") == \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('-1 -2 -3') == 'No'\nassert solution('-2 -3') == 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([1, 3, 2]) == \"Yes\"\nassert solution([3, 1, 2]) == \"No\"\nassert solution([3, 1, 3]) == \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('10 2 5') == 'No'"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('3 100000\\n0 0 0') == '0'\nassert solution('3 1000000000\\n0 0 0') == '0'"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1000\n120\n100\n140\n''') == '9'\nassert solution('''5 2 3 5 1\n15\n50\n45\n30\n''') == '2'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\nassert solution(\"6 8 4\\n1 2 3\\n5 6 7\\n11 12 13\\n21 22 23\\n31 32 33\") == \"2\"\nassert solution(\"10\\n1 2 3\\n5 6 7\\n11 12 13\\n21 22 23\\n31 32 33\") == \"10\"\nassert solution(\"2\\n1 1\\n1 1\") == \"0\"\nassert solution(\"2\\n1 2\\n1 1\") == \"1\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == '9'\nprint(solution('3 1000\\n120\\n100\\n140'))"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('2 2\\n1\\n100\\n') == '2'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"9\""
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 1000, 120, 100, 140]) == '9'"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\nassert solution(\"5 3\\n240\\n60\\n230\\n110\\n40\") == \"3\"\nassert solution(\"8 3\\n300\\n400\\n300\\n450\\n280\\n380\\n200\") == \"6\""
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\napple\norange\napple''') == '2'\n\nassert solution('''4\napp\nap\nap\nap''') == '3'\n\nassert solution('''4\napple\napple\napp\napple''') == '4'"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\n\n\"\"\"\n\n\nimport itertools\nimport collections\n\nN = int(input())\nlist_item = [None] * N\nfor i in range(N):\n    list_item[i] = input()\n\nlist_item_set = list(set(list_item))\n\nresult = collections.Counter(list_item)\n\nresult_set = result.items()\n\nresult_set = collections.OrderedDict(result_set)\n\nsolution = str(len(result_set))\n\nprint(solution)\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"2\""
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '2'\n'''"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\"\n) == \"2\"\n\nassert solution(\n    \"1\"\n) == \"1\"\n\nassert solution(\n    \"5\"\n) == \"2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\\n\") == \"2 2\"\nassert solution(\"4\\n2277 2150 2125 2136\\n\") == \"2 2\"\nassert solution(\"4\\n2200 2121 2140 2139\\n\") == \"2 1\"\nassert solution(\"4\\n2277 2150 2125 2136\\n\") == \"1 2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n10\n5\n15''') == '2 2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2 2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\\n\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2 2\""
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2 2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2100 2500 2700 2700\n''') == '2 2'\n\nassert solution('''5\n2100\n2501\n2501\n2501\n2501\n''') == '1 1'\n\nassert solution('''5\n2100\n2500\n2700\n2700\n2700\n''') == '1 2'\n\nassert solution('''5\n2100\n2500\n2700\n2700\n2700\n2700\n''') == '2 1'\n\nassert solution('''5\n2100\n2500\n2700\n2700\n2700\n2700\n2700\n''') == '1 1'\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2 2\""
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2100 2500 2700 2700\n''') == '2 2'"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ooxx\") == \"900\"\nassert solution(\"xooxx\") == \"1000\"\nassert solution(\"ooxX\") == \"1000\"\nassert solution(\"oxoxx\") == \"1000\"\nassert solution(\"ooxO\") == \"1000\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('oxo') == '900'\n\n'''\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('oxo') == '900'\nassert solution('xox') == '900'\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"o\") == \"900\"\nassert solution(\"x\") == \"700\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"oxo\") == \"900\"\nassert solution(\"oxxx\") == \"900\"\nassert solution(\"o\") == \"700\"\nassert solution(\"x\") == \"700\"\nassert solution(\"xo\") == \"700\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('xo') == '0'\nassert solution('ox') == '900'\nassert solution('o') == '700'\nassert solution('xo') == '900'\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"xo\") == \"700\"\nassert solution(\"xo\") == \"700\"\nassert solution(\"xo\") == \"700\""
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"o\") == \"900\"\nassert solution(\"x\") == \"700\"\nassert solution(\"ooo\") == \"3000\"\nassert solution(\"xxxx\") == \"2500\"\nassert solution(\"ooxx\") == \"1000\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"o\") == \"900\"\nassert solution(\"x\") == \"800\"\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('xo') == '900'\nassert solution('xooxxo') == '900'\nassert solution('xoxoxxx') == '900'\nassert solution('oxo') == '900'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''H H\nH H''') == 'H'\nassert solution('''H D\nD H''') == 'D'\nassert solution('''D H\nD H''') == 'D'\nassert solution('''D D\nD D''') == 'D'\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"D D\") == \"D\"\nassert solution(\"D D D D\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"H H\"\n) == \"H\"\nassert solution(\n    \"H D\"\n) == \"D\"\nassert solution(\n    \"D H\"\n) == \"D\"\nassert solution(\n    \"D D\"\n) == \"H\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H H') == 'H'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n\na, b = stdin.split()"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\nassert solution(\"H H D\") == \"D\"\nassert solution(\"D D H\") == \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"H H\\n\") == \"H\", \"First\"\nassert solution(\"H D\\n\") == \"D\", \"Second\"\nassert solution(\"D H\\n\") == \"H\", \"Third\"\nassert solution(\"D D\\n\") == \"D\", \"Fourth\""
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"11\") == \"1+1+1=3\"\nassert solution(\"12\") == \"1+1+2=3\"\nassert solution(\"14\") == \"1+4=5\"\nassert solution(\"21\") == \"1+2=3\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1+2+2+2=7') == '1+2+2+2=7'\nassert solution('1222') == '1+2+2+2=7'"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1223') == '1-2+2+2=7'\nassert solution('1222') == '1+2+2+2=7'\n\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('3222') == '-3+2+2=7'\nassert solution('3322') == '1-3+2=7'\nassert solution('3333') == '1+3-3=7'\nassert solution('3333') == '1+3-3=7'\n\"\"\"\n\nfrom itertools import permutations\nfrom typing import Set\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1223') == '1+2+3+2=7'\nassert solution('1222') == '1+2+2+2=7'\nassert solution('1222') == '1+2+2+2=7'\nassert solution('1222') == '1+2+2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1+2+2+2=7'\nassert solution(input()) == '1+2-2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('123') == '1+2+2+3=6'\nassert solution('1233') == '1+2+3+3=6'\nassert solution('123321') == '1+2+3+3+3=6'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1233') == '1+2+3=7'\nassert solution('1234') == '1+2=7'\nassert solution('1233') == '1+2+3=7'\nassert solution('1234') == '1+2=7'\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"1+2+2+2=7\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2 2 0 0 0\""
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2\\n2\\n0\\n0\\n0'"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 2 2') == '2'\nassert solution('10\\n1 1 2 2 3 3 4 5 5 6 7 8 9 10') == '9 0 0 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\""
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2 2\\n0 0\\n0 0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2\\n2\\n0\\n0\\n0'\nassert solution('8') == '0\\n0\\n0\\n0\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 2 2\\n') == '2 2'\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 2 2') == '2 2'\nassert solution('4\\n1 2 3 4') == '0 0'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('6') == '4'"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '7'\nassert solution('2') == '4'\nassert solution('-6') == '4'\nassert solution('5') == '8'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('10') == '8'"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"18\") == \"No\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1117') == 'No'\nassert solution('9980') == 'Yes'\nassert solution('12345') == 'No'\nassert solution('8972') == 'Yes'"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('1112') == 'Yes'\nassert solution('1122') == 'Yes'\nassert solution('12345') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\n\"\"\"\n\nfrom itertools import chain"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1112') == 'No'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\nprint(\"Yes\") if solution(\"1118\") == \"Yes\" else print(\"No\")\n\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1118\") == \"Yes\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('1341') == 'Yes'\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('4') == '2'\n\"\"\"\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 5\n2 4\n3 6\n''') == '3'"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\n\"\"\"\nn = int(input())\n\nmax_val = 1\nmax_count = 0\n\nfor i in range(n):\n    x = list(map(int, input().split()))\n    x.sort()\n\n    # upper\n    if x[0] < max_val:\n        max_val = x[0]\n        max_count = 0\n\n    if max_val == x[0]:\n        max_count += 1\n\n    # middle\n    if x[1] > max_val:\n        max_val = x[1]\n        max_count = 0\n    \n    if max_val == x[1]:\n        max_count += 1\n\n    # lower\n    if x[2] > max_val:\n        max_val = x[2]\n        max_count = 0\n\n    if max_val == x[2]:\n        max_count += 1\n\n    if max_count > max_count:\n        max_count = max_count\n    else:\n        max_count = max_count\n\nprint(max_count)\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '3', 'Sample Test Failed'\nassert solution(solution.__doc__) == '3', 'Sample Test Failed'\nassert solution(solution.__doc__) == '3', 'Sample Test Failed'\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\n\"\n    \"1 5\\n\"\n    \"2 4\\n\"\n    \"3 6\\n\"\n) == \"3\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n5\n2 4\n3 6\n''') == '3'\nassert solution('''\n2\n1 5\n2 4\n3 6\n''') == '3'\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1,5,2,4,3,6]) == 3\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 5\\n2 4\\n3 6') == '3'\nassert solution('4\\n1 5\\n2 4\\n3 6\\n7 5\\n6 5\\n7 5') == '0'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    d[i] = max(a[i], b[i])\n    d[i] = max(d[i], c[i])\n\nfor i in range(n):\n    if d[i] == max(a[i], b[i], c[i]):\n        print(1)\n    else:\n        print(0)"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('3') == '3'\n'''"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input().split()) == '<'\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A C') == '='"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('A B') == '>'\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"A A\") == \"<\"\nassert solution(\"A B\") == \"<\"\nassert solution(\"A C\") == \"<\"\nassert solution(\"A D\") == \"<\"\nassert solution(\"A E\") == \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A C') == '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('A B') == '<'\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('A B') == '<'\nassert solution('A C') == '>'\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B C') == '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '<'\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"<\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"1#2#1\""
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"11211\"\nassert solution(\"3 5\") == \"11211\"\nassert solution(\"10 10\") == \"10001\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.1..2\") == \"1#2#1\"\nassert solution(\"2 5\\n##...##\\n#.1.1\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n\") == \"11211\"\nassert solution(\"7 7\\n#..#\\n.##.\\n###.\\n###.\\n##.##\\n#.##.\\n.#..#\") == \"111221\""
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5') == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....\\n') == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"111\"\nassert solution(\"3 2\") == \"111\"\nassert solution(\"3 3\") == \"111\"\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '11211'\n\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '11211'\n'''\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"30 20 120\") == \"3\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 240') == '3'\nassert solution('5 4 240') == '3'\nassert solution('8 9 9 9 9 9 9') == '8'\nassert solution('1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"5 10 5 10\") == \"5\"\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 2 2\") == \"2\"\nassert solution(\"4 4 100\") == \"4\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\nprint(solution(input()))\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '3'\nassert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"3 4 240\n60 90 120\n80 150 80 150\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 240\") == \"3\"\nassert solution(\"10 2 270\") == \"9\""
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150\n''') == '3'\nassert solution('''5 3 120\n60 90 120\n80 150 80 150\n''') == '3'\nassert solution('''4 5 240\n60 90 120\n80 150 80 150\n''') == '4'\nassert solution('''2 4 240\n60 90 120\n80 150 80 150\n''') == '2'\nassert solution('''3 1 240\n60 90 120\n80 150 80 150\n''') == '1'\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n## Sample Test\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(\"1500 2000 1600 3 2\")"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\\n\") == \"7900\"\nassert solution(\"1500 2500 730 3 2\\n\") == \"1480\"\nassert solution(\"1500 2000 1600 3 3\\n\") == \"1480\"\nassert solution(\"1500 2200 730 3 2\\n\") == \"1490\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\nassert solution('1 2 3 4 5') == '35'\nassert solution('8 9 10 11 12 13 14 15 16') == '240000'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '950000'\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"3\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1500\", \"2000\", \"1600\", \"3000\", \"4\", \"2\", \"2\"]) == \"7900\""
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"15000 2000 1600 3 2\") == \"7900\"\nassert solution(\"1500 1500 1600 3 2\") == \"7900\"\nassert solution(\"1500 1500 1500 3 2\") == \"7900\"\nassert solution(\"1500 1500 1500 15 2\") == \"7900\""
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"A 2 2 2\") == \"1664\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 5 6\") == \"64\"\nassert solution(\"1 2 3\") == \"6\"\n\n'''"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"5 7 3 8 10 20\") == \"5357\"\nassert solution(\"11 7 2 1 3 5\") == \"3860\"\n\n========================================\n\n5. Longest Word\n\nQ. Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.\n\nThis is case sensitive, for example \"Aa\" is not considered a palindrome here.\n\nExample:\n\nInput:\n\n\"abccccdd\"\n\nOutput:\n\n7\n\nExplanation:\n\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.\n\n========================================\n\n6. Palindrome Permutation\n\nQ. Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.\n\nThis is case sensitive, for example \"Aa\" is not considered a palindrome here.\n\nExample:\n\nInput:\n\n\"abccccdd\"\n\nOutput:\n\n7\n\nExplanation:\n\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.\n\n========================================\n\n7. Smallest multiple\n\nQ. The smallest multiple of a natural number n is the smallest positive integer k such that k*n + k = n*k. For example, 21 is the smallest multiple of 5 because 21 = 5 * 5 + 5 = 5 * 1 + 1.\n\nExample:\n\nInput:\n\nn = 10\n\nOutput:\n\n5\n\n========================================\n\n8. Largest Divisible Subset\n\nQ. Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:\n\nSi % Sj = 0 or Sj % Si = 0. If there are multiple solutions, return any subset is fine.\n\nExample 1:\n\nInput: [1,2,3]\nOutput: [1,2] (of course, [1,3] will also be ok)\n\n========================================\n\n9. Quicksort\n\nQ. Create an algorithm that sorts the array in ascending order.\n\nExample:\n\nInput:\n\n[2,3,5,1,4]\n\nOutput:\n\n[1,3,4,5,2]\n\n========================================\n\n10. Valid Parentheses\n\nQ. Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nNote that an empty string is also considered valid.\n\nExample:\n\nInput:\n\n\"()\"\n\nOutput:\n\nTrue\n\n========================================\n\n11. Valid Sudoku\n\nQ. Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nExample:\n\nInput:\n\n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\n\nOutput:\n\nTrue\n\n========================================\n\n12. Middle of the Linked List\n\nQ. Implement below C++ code for the middle of the linked list.\n\nclass Node:\n    \n    public:\n        int value;\n        Node *next;\n        Node(int value) : value(value), next(NULL) { }\n    \n    private:\n        \n    public:\n        int getValue()\n        int getNext()\n        int setValue(int value)\n        void setNext(Node *next)\n\nExample:\n\nInput:\n\n1 2 3 4 5 6 7 8 9 10\n\nOutput:\n\n2 3 4 5 6 7 8 9 10\n\n========================================\n\n13. ZigZag Conversion\n\nQ. Given a string that consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.\n\nThis is case sensitive, for example \"Aa\" is not considered a palindrome here.\n\nExample:\n\nInput:\n\n\"abccccdd\"\n\nOutput:\n\n7\n\n========================================\n\n14. Minimum Cost For Tickets\n\nQ. You are given several tickets and each ticket has a distinct price.\n\nHowever, due to the limited stock, all tickets cannot be bought and there is a rule that once all tickets are purchased, they cannot be returned.\n\nOn the subsequent buys, you can increase the price of each ticket so that the total price of the tickets equals to or less than (or equal to) a given number, K.\n\nReturn the minimum price that the tickets cannot be bought.\n\nExample:\n\nInput:\n\n[1, 4, 5], K = 6\n\nOutput:\n\n4\n\n========================================\n\n15. Minimum Cost For Tickets\n\nQ. You are given several tickets and each ticket has a distinct price.\n\nHowever, due to the limited stock, all tickets cannot be bought and there is a rule that once all tickets are purchased, they cannot be returned.\n\nOn the subsequent buys, you can increase the price of each ticket so that the total price of the tickets equals to or less than (or equal to) a given number, K.\n\nReturn the minimum total price of all the tickets.\n\nExample:\n\nInput:\n\n[2, 4], K = 3\n\nOutput:\n\n8\n\n========================================\n\n16. Topological Sorting\n\nQ. Given an input graph, determine if a graph can be topologically sorted.\n\nExample:\n\nInput:\n\n7 - 2 - 4\n| /   |\n3 - 5 - 6\n|/ \\ |\n1 - 7 - 8\n\nOutput:\n\ntrue\n\n========================================\n\n17. Subtree of Another Tree\n\nQ. A binary tree T is called a subtree of another tree if T is a subtree of A and if T is a subtree of B, then A and B are subtrees of T.\n\nExample:\n\nInput:\n\n1\n\nOutput:\n\ntrue\n\n========================================\n\n18. Maximum Profit\n\nQ. A farmer owns a farm with N workers and they want to sell his farm to one of his neighbors so that he can get the maximum profit.\n\nIn other words, the farmer wants to sell his farm to another worker, but"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"50 50 50 50\") == \"100\""
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1500 2000 1600 3 2\") == \"7900\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('0') == '1'\n\n\"\"\"\n\nN = input()"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '4', \"Wrong!\"\nassert solution('24') == '12', \"Wrong!\"\nassert solution('1000') == '13', \"Wrong!\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4''') == '4'\nassert solution('''10\n10''') == '0'\nassert solution('''1\n1''') == '0'\n\"\"\"\nfrom math import floor, sqrt"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\", \"TEST ERROR\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '1'\nassert solution('1000000') == '5000000'\nassert solution('2000000') == '40000000'\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('8') == '4'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('1000') == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"15\") == \"10\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"2\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '4'\nassert solution('8') == '8'\nassert solution('10') == '9'"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20') == '19'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\nassert solution('20') == '19'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"4\"\nassert solution(\"1000\") == \"9\""
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"13\"\nassert solution(5) == \"13\"\nassert solution(10) == \"9\"\nassert solution(100) == \"9\"\nassert solution(1000) == \"9\""
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n7\\n3') == '3'\nassert solution('1\\n1\\n2') == '3'\nassert solution('2\\n10\\n9') == '2'"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('2') == '2'\nassert solution('5') == '3'\nassert solution('10') == '4'\nassert solution('15') == '5'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\nassert solution(\"5\\n10\\n8\\n8\\n6\\n\") == \"4\"\nassert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nprint(solution('4\\n10\\n8\\n8\\n6'))\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\", \"Test 1: Wrong answer\"\nassert solution(\"1\") == \"1\", \"Test 2: Wrong answer\"\nassert solution(\"4\") == \"3\", \"Test 3: Wrong answer\"\nassert solution(\"4\") == \"3\", \"Test 4: Wrong answer\"\nassert solution(\"10\") == \"3\", \"Test 5: Wrong answer\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('4\\n10\\n8\\n8\\n6\\n') == '2'"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\nprint('All test cases passed!')\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('QWERTYASDFZXCV') == 5\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('QWERTYASDFZXCV') == \"5\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nprint(solution(\"QWERTYASDFZXCV\"))\nprint(solution(\"QW2ERTYASDFZXCV\"))"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('QWERTYASDFZXCV') == '5'\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\ns = stdin\nlst = []\nfor i in range(len(s)-2):\n    lst.append(s[i:i+3])\nlst.sort()\nprint(len(lst[-1]))\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == 'ASDFZ'\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('QWERTYASDFZXCV') == 'ASDFZ'\nassert solution('ABCDEFGHI') == ''\nassert solution('A') == 'A'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'AB'\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n'''\ns = input()\nans = []\nfor i in range(len(s)):\n    ans.append(s[i])\n    ans.append('a')\n    ans.append(s[i])\n    ans.append('z')\nprint(len(set(ans)))"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"6\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"15\") == \"3\"\nassert solution(\"17\") == \"3\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n8 12 40\n''') == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n8 12 40\\n\") == \"2\"\nassert solution(\"3\\n9 12 20\\n\") == \"0\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"3\", \"8 12 40\"]) == \"2\"\nassert solution([\"3\", \"4 12 40\"]) == \"1\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\", \"Should return the max possible no. of operations\"\nassert solution(\"2\") == \"2\", \"Should return the max possible no. of operations\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n8 12 40\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n12 16 34 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n12 10 4 40 16 8 34 7 30 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\ni = 0\nans = 0\nwhile i < len(nums):\n    if nums[i] % 2 == 0:\n        nums[i] //= 2\n        i += 1\n    else:\n        ans += 1\n        nums[i] //= 2\n        i += 1\n\nprint(ans)\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n8 12 40') == '2'\nassert solution('5\\n2 3 4 5 6') == '4'\nassert solution('5\\n2 3 4 5 6 8') == '3'\nassert solution('6\\n3 2 4 5 6') == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"3\\n8 12 40\") == \"2\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n''') == '6'\nassert solution('''4\n''') == '4'\nassert solution('''3\n''') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"12\") == \"360\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '6'\nassert solution('5') == '10'\n\n'''"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n''') == '6'\nassert solution('''10\n''') == '20000'\nassert solution('''100\n''') == '120000'\nassert solution('''1000\n''') == '1200000'\nassert solution('''10000\n''') == '120000000000'\n'''\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"0\") == \"1\"\n\nimport sys\nfrom io import StringIO\nimport unittest\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '12'\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"10\") == \"738\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n''') == '6'\nassert solution('''4\n''') == '12'\nassert solution('''5\n''') == '56'\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"11\"\nassert solution(\"10\") == \"41\""
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"5\"\nassert solution(\"11\") == \"10\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"3\"]) == \"6\"\nassert solution([\"3\", \"3\"]) == \"6\"\nassert solution([\"3\", \"2\", \"3\"]) == \"6\"\nassert solution([\"4\", \"4\", \"4\"]) == \"4\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '6'\nassert solution('5') == '10'\nassert solution('100') == '101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2'\n) == '3'\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('10\\n8 9 5') == '2'\nassert solution('6\\n7 9 5') == '4'\nassert solution('1\\n2 3') == '4'\nassert solution('2\\n1 1') == '4'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('10') == '-5'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3 1') == '2'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"3\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 3') == '2'\nassert solution('2\\n2 3') == '1'\nassert solution('3\\n2 3') == '1'"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3 1') == '2'\nassert solution('4 5 6') == '-1'\nassert solution('5 6') == '2'\nassert solution('100') == '-1'\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"2 2\"\nassert solution(\"4 5\") == \"4 3\"\nassert solution(\"5 5\") == \"4 3\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"5 1\\n1 WA\\n1 AC\\n1 WA\\n2 WA\\n2 AC\") == \"2 2\"\nassert solution(\"5 4\\n3 AC\\n2 AC\\n1 WA\\n3 WA\\n3 AC\") == \"3 1\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"2 2\"\nassert solution(\"1 WA\") == \"2 1\"\nassert solution(\"1 AC\") == \"1 1\"\nassert solution(\"2 WA\") == \"2 1\"\nassert solution(\"2 AC\") == \"2 1\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"2 2\"\nassert solution(\"1 WA\") == \"1 1\"\nassert solution(\"1 AC\") == \"1 0\"\nassert solution(\"2 WA\") == \"2 1\"\nassert solution(\"2 AC\") == \"2 0\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n\") == \"2 2\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n\") == \"2 2\""
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5') == '2 2'\nassert solution('3 5') == '3 2'\nassert solution('7 5') == '5 1'\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict\n\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\n\n\"\"\"\nfrom collections import defaultdict\n\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\n\"\"\"\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\n\"\"\"\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\n\"\"\"\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\"\"\"\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\n\"\"\"\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n\"\"\"\n\nn, m = list(map(int, input().split()))\nresults = defaultdict(int)\n\nfor _ in range(m):\n    p, s = input().split()\n    results[p] = s\n\nfor _ in range(n):\n    p, s = input().split()\n    if results[p] == s:\n        print(1)\n    else:\n        print(0)\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5\\n1 WA\\n2 WA\\n2 AC\\n2 WA\\n\") == \"2 2\"\nassert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n\") == \"1 2\""
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2 2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '2 2'\nassert solution('2 5') == '2 2'\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '2 2'\nassert solution('2 100\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '1 0'\nassert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '0 0'\nassert solution('4 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '1 0'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\nassert solution(\"3 1\\n3 3 5\\n\") == \"2\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n4 1 5\n''') == '5'\nassert solution('''\n3 2\n3 1 4\n''') == '4'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '5'\nassert solution('5 5') == '2'"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '5'\nassert solution('3 2') == '6'\nassert solution('3 3') == '5'\nassert solution('3 4') == '4'\nassert solution('3 5') == '4'"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\n3 4 5\\n') == '5'\nassert solution('2\\n5\\n3 4 5\\n') == '4'\nassert solution('2\\n7\\n4 3 5\\n') == '6'\nassert solution('2\\n10\\n4 3 5\\n') == '8'\nassert solution('2\\n10\\n4 3 5\\n') == '9'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '5'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '5'\nassert solution('4 1') == '4'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n5 1 5\\n') == '5'\nassert solution('3 1\\n4 1 5\\n') == '4'\nassert solution('3 2\\n4 2 5\\n') == '3'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"5\"\nassert solution(\"4 1 5\") == \"6\""
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"10\"\nassert solution(\"10\") == \"4\"\nassert solution(\"20\") == \"1\"\nassert solution(\"100\") == \"13\""
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '16'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"16\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"8\"\nassert solution(\"1000000000\") == \"8\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '16'\nassert solution('3') == '12'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"16\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"10\") == \"16\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"10\") == \"16\"\nassert solution(\"1 10 2\") == \"16\"\nassert solution(\"1 100 2\") == \"100\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n10\n2\n\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3\n10\n2\n\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n10\n20\n2\n\n\"\"\") == \"32\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('600') == '520'\nassert solution('300') == '300'\nassert solution('220') == '220'\nassert solution('420') == '420'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('600') == '520'\nassert solution('300') == '300'\nassert solution('220') == '220'\nassert solution('420') == '420'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('600\\n300\\n220\\n420') == '520'"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n300\n220\n420\n5\n3\n''') == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n600\n300\n220\n420\n''') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"600\") == \"520\"\nassert solution(\"300\") == \"300\"\nassert solution(\"220\") == \"220\"\nassert solution(\"420\") == \"420\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"600\") == \"520\"\nassert solution(\"300\") == \"300\"\nassert solution(\"220\") == \"220\"\nassert solution(\"420\") == \"420\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == \"\"\nassert solution(\"1\") == \"A\"\nassert solution(\"2\") == \"B\"\nassert solution(\"3\") == \"C\"\nassert solution(\"4\") == \"D\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"600\\n300\\n220\\n420\") == \"520\"\nassert solution(\"0\\n0\\n0\\n0\") == \"0\""
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('600') == '520'\nassert solution('300') == '300'\nassert solution('220') == '220'\nassert solution('420') == '420'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\nassert solution('3\\n0 1 2') == '1'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 4 0 2\\n') == '4'\nassert solution('5\\n4 3 1 2 3\\n') == '3'\nassert solution('5\\n1 2 3 4 0\\n') == '0'\nassert solution('5\\n1 2 4 0 3\\n') == '1'\nassert solution('5\\n1 2 3 4 0\\n') == '0'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '0'\nassert solution('100') == '0'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2\\n') == '4\\n'\nassert solution('7\\n7 6 5 2 3 4 0 1\\n') == '0\\n'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 2 2') == '4'\nassert solution('5\\n1 2 3 4 5') == '4'\nassert solution('1\\n2 3 4 5') == '0'\n\n-----End of Solution-----\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 0 2\") == \"4\"\nassert solution(\"5 2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\nimport math\nfrom collections import defaultdict\n\nN = int(input())\n\ndiff_dict = defaultdict(int)\n\nfor i in range(1, N+1):\n    left_diff = int(math.fabs(i-1))\n    right_diff = N-left_diff\n    diff_dict[left_diff] += 1\n    diff_dict[right_diff] -= 1\n\norder = 1\nfor value in diff_dict.values():\n    order *= value\n\nprint(order % 1000000007)\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '2'"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 4 4 0 2\n''') == '4'\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20 2 5') == '84'\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 5') == '84'\nassert solution('10 3 7') == '36'\nassert solution('0 0 0') == '0'\nassert solution('0 1 2 3 4') == '12'\nassert solution('100 101 0 0') == '10'\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20 2 5') == '84'\nassert solution('5') == '5'\nassert solution('2') == '2'"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 84\n\n'''"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20 2 5\") == \"84\", \"Should be 84\"\nassert solution(\"20 5 10\") == \"48\", \"Should be 48\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 2 5') == 84\nassert solution('1 3 5') == 0\nassert solution('20 10 25') == 165\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(20, 2, 5) == 84, \"Should be 84\"\nassert solution(100, 1, 20) == 7, \"Should be 7\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([20, 2, 5]) == 84\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"3 2 4\") == \"11\"\nassert solution(\"1 1 1\") == \"1\""
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 2 5') == '84', 'Wrong Answer'\nassert solution('30 2 5') == '48', 'Wrong Answer'\nassert solution('-30 2 5') == '-84', 'Wrong Answer'\nassert solution('0 2 5') == '-5', 'Wrong Answer'"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'ABC100'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\", \"1st\"\nassert solution(\"2\") == \"2\", \"2nd\"\nassert solution(\"3\") == \"3\", \"3rd\"\nassert solution(\"4\") == \"4\", \"4th\"\nassert solution(\"5\") == \"5\", \"5th\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"1000\") == \"ABC1000\""
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'ABC2'\nassert solution('1') == 'ABC1'\nassert solution('0') == 'ABC0'\nassert solution('9999') == 'ABC9999'\nassert solution('10') == 'ABC10'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\""
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"ABC\"\nassert solution(\"1\") == \"ABC\"\nassert solution(\"101\") == \"ABC1\"\nassert solution(\"10011\") == \"ABC100\"\n\n'''\n\n'''\nimport math\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'ABC'\nassert solution('10') == 'ABC10'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5') == '5'\nassert solution('4 2') == '2'\nassert solution('7 4') == '2'\nassert solution('8 7') == '4'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"12 12\") == \"12\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"12 12\") == \"12\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '5'\nassert solution('5 5') == '5'\nassert solution('1 1') == '4'\nassert solution('5 5') == '5'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '5'\n'''"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '5\\n'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '5'\nassert solution('4 5') == '5'\nassert solution('3 5') == '5'\nassert solution('2 5') == '5'\nassert solution('1 5') == '5'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '5'\nassert solution('5 2') == '4'\nassert solution('5 0') == '0'\nassert solution('0 0') == '0'\nassert solution('0 2') == '2'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n1 1\n2 2\n3 3\n4 4\n5 5''') == '5'\nassert solution('''2 3\n1 1\n3 2\n2 2\n2 2''') == '8'\nassert solution('''7 8\n3 4\n1 2\n2 2\n1 3\n3 4\n3 3\n4 4''') == '1'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3\\n1\\n2') == '2'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '-1'\nassert solution('5') == '2'\nassert solution('8') == '2'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"2\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '-1'\nassert solution('4') == '1'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('10') == '2'\nassert solution('20') == '2'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('6') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"5\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2 5\") == \"1\"\nassert solution(\"1 1 2 2 5\") == \"1\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"5 3\") == \"1\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '1'\nassert solution('3 3') == '2'\nassert solution('7 7') == '1'"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1 2 2 5\n''') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"3 4 5\") == \"3\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"10 1\") == \"2\""
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"1\""
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\nassert solution('10 1\\n0 0 1 0 1 1 0 0 1 0 1 1 0') == '0'"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('2\\n3\\n2\\n1\\n1') == '1'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == \"Yes\"\nassert solution('3') == \"Yes\"\nassert solution('5') == \"No\"\nassert solution('5') == \"No\"\nassert solution('4') == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n3 1 2\n6 1 1\n''') == 'Yes'\nassert solution('''\n3\n1 1 2\n6 1 1\n''') == 'No'"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\nassert solution(\"2\\n3 1 5\\n6 1 1\\n\") == \"No\"\nassert solution(\"2\\n4 3 5\\n1 2 3\\n1 2 2\\n\") == \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n3 1 2') == 'Yes'\nassert solution('6 1 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'Yes'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input) == \"Yes\"\nassert solution(input) == \"No\""
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '2'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 3\n2''') == '2'\n\nassert solution('''1 3\n4''') == '4'\n\nassert solution('''1 3\n5''') == '4'\n\nassert solution('''1 5\n2''') == '3'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 3\n''') == '2'\nassert solution('''\n1 2\n''') == '1'\nassert solution('''\n1 1\n''') == '2'\nassert solution('''\n1 2\n''') == '1'\nassert solution('''\n1 2\n''') == '1'\n''')"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"2\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '2'\nassert solution('5 6') == '5'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"3 1\") == \"3\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"1 3\") == \"2\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '2'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 7') == '4'\nassert solution('1 3') == '0'\nassert solution('2 7') == '1'\nassert solution('3 4') == '0'\nassert solution('4 5') == '1'\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n1 2\n2 3\n3 4\n''') == '4'\nassert solution('''\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\nassert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n''')\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == \"1 2 3 4 5\"\nassert solution('6 5') == \"1 2 3 4 5 6\""
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '4'\nassert solution('5\\n3') == '1'\n'''"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"2 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"7 7\\n\"\n    \"1 3\\n\"\n    \"2 7\\n\"\n    \"3 4\\n\"\n    \"4 5\\n\"\n    \"4 6\\n\"\n    \"5 6\\n\"\n    \"6 7\\n\"\n) == \"4\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 7 5''') == '7'\nassert solution('''1 2 3''') == '1'\nassert solution('''5 5 5''') == '5'\n''')\n\n'''\nYou are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\n\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\n\nFind the one that is different from the rest among the given three integers.\n\n-----Constraints-----\n - -100 \\leq A,B,C \\leq 100 \n - A, B and C are integers.\n - The input satisfies the condition in the statement.\n\n-----Input-----\nInput is given from Standard Input in the following format:  \nA B C\n\n-----Output-----\nAmong A, B and C, print the integer that is different from the rest.\n\n-----Sample Input-----\n5 7 5\n\n-----Sample Output-----\n7\n\nThis is the same case as the one in the statement.\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"4 7 2\") == \"7\"\nassert solution(\"7 6 5\") == \"6\"\nassert solution(\"7 1 5\") == \"5\"\nassert solution(\"1 3 6\") == \"3\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"5 7 6\") == \"7\"\nassert solution(\"4 5 4\") == \"4\"\nassert solution(\"3 3 2\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"3 4 1\") == \"1\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\\n\") == \"7\""
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '7'\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 7 5') == '7'"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 2, 10, 20, 15, 200]) == \"110 10\""
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\na, b, c, d, e, f = map(int, stdin.split())"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"1 2 10 20 15 200\"]) == \"110 10\"\nassert solution([\"3 3 10 20 15 200\"]) == \"66 57\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 10 20 15 200\") == \"110 10\"\nassert solution(\"3 10 20 15 200\") == \"110 10\"\nassert solution(\"4 10 20 15 200\") == \"110 10\"\nassert solution(\"4 3 20 15 200\") == \"100 10\"\nassert solution(\"5 4 3 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nassert solution(\"2 1 10 20 15 200\") == \"110 10\"\nassert solution(\"2 2 10 20 15 200\") == \"110 10\"\nassert solution(\"2 2 1 10 20 15 200\") == \"110 10\"\nassert solution(\"2 2 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1 2 10 20 15 200'\n) == '110 10'\n\nassert solution(\n    '1 2 10 20 15 200 20'\n) == '110 10'\n\nassert solution(\n    '1 2 10 20 15 200 20 200'\n) == '110 10'\n\nassert solution(\n    '1 2 10 20 15 200 20 200 20'\n) == '110 10'\n\nassert solution(\n    '1 2 10 20 15 200 20 200 20 200'\n) == '110 10'"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\nassert solution('1 5 10 20 15 200') == '210 10'"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nassert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('internationalization') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''internationalization''') == 'i18n'\nassert solution('''internationalization''') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('internationalization') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('ABCD') == 'ABCD'\nassert solution('internationalization') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('baba') == 'bab'"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"hello world!\") == \"hello w\"\nassert solution(\"informatik\") == \"i18n\"\nassert solution(\"abbreviation\") == \"abbr\"\nassert solution(\"shorten\") == \"shrdn\"\nassert solution(\"internationalization\") == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('internationalization') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nassert solution(\"abbreviation\") == \"abbr\"\nassert solution(\"i18n\") == \"i18n\"\nassert solution(\"internationalization\") == \"i18n\"\nassert solution(\"abbreviation\") == \"abbr\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 'i18n'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"pot\") == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\nassert solution(\"cou\") == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\n\nassert solution(\"LOL\") == \"NO\"\n\n\"\"\"\nfrom typing import List, Optional\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('pot') == 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\nassert solution(\"stone\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"b\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('bbb') == 'b'\nassert solution('baa') == 'b'\nassert solution('abab') == 'ab'\nassert solution('abc') == 'c'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"aaa\") == \"a\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'a'\nassert solution('ababc') == 'b'\nassert solution('acbab') == 'c'\nassert solution('aacbb') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\nassert solution('bb') == 'b'\nassert solution('bbb') == 'b'\nassert solution('bbbbbb') == 'b'\nassert solution('abcdefgh') == 'g'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"aba\") == \"b\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"aba\") == \"b\"\nassert solution(\"abac\") == \"c\"\nassert solution(\"abcc\") == \"b\"\nassert solution(\"abccd\") == \"b\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''aba\n4''') == 'b'\nassert solution('''a\n0''') == ''\nassert solution('''a\n1''') == 'a'\nassert solution('''aba\n3''') == 'b'\nassert solution('''aba\n4''') == 'a'\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4 2\n2 1 1\n3 3 4\n''') == '9', 'First'\nassert solution('''\n1\n1\n1\n''') == '1', 'Second'\nassert solution('''\n3\n3\n4\n''') == '0', 'Third'\nassert solution('''\n4\n3\n4\n''') == '0', 'Fourth'\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 2') == '9'\nassert solution('6 7 2') == '30'\nassert solution('8 9 3') == '10'\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4 2\n2 1 1\n3 3 4\n''') == \"9\"\nassert solution('''5 4 2\n2 1 1\n3 3 4\n''') == \"11\"\nassert solution('''5 4 2\n2 1 1\n3 3 4\n''') == \"8\"\nassert solution('''5 4 2\n2 1 1\n3 3 4\n''') == \"11\"\n\nassert solution('''4 3 2\n3 3 2\n3 2 1\n2 1 1\n''') == \"10\""
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\nprint(solution(input()))"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4 2\n2 1 1\n3 3 4\n''') == '9'\nassert solution('''\n10 11 2\n2 8 3\n3 3 2\n3 5 1\n8 7 2\n''') == '14'\n\n'''\nthis function is to check the input\n'''\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\nassert solution(\"5 4 10\\n10 5 10\\n4 4 3\\n\") == \"81\"\nassert solution(\"5 4 10\\n2 1 1\\n2 3 4\\n\") == \"81\"\nassert solution(\"3 3 4\\n2 1 1\\n2 3 4\\n\") == \"81\"\nassert solution(\"5 4 10\\n2 1 1\\n2 4 3\\n\") == \"81\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\") == \"9\"\nassert solution(\"5 4 5\") == \"18\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 2') == '9'\nassert solution('5 4 2') == '9'"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '12'\nassert solution('6 5 1') == '11'\nassert solution('1 10 1') == '12'\nassert solution('2') == '0'"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"11\"\nassert solution(\"5\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"4\") == \"11\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"12\"\nassert solution(\"2\") == \"11\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 1 2') == '12'\nassert solution('3\\n5 10 2') == '11'\nassert solution('2\\n4 10 4') == '0'"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"12\\n11\\n0\\n\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"5\") == \"11\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"12\"\nassert solution(\"2\") == \"11\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"5\") == \"11\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"3\") == \"11\"\nassert solution(\"6\") == \"12\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"6 5 1\") == \"11\"\nassert solution(\"1 10 1\") == \"0\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"********\""
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n.\\n.*\\n.*\\n') == '*\\n*\\n*\\n*\\n'\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"*\\n*\\n*\\n*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \".\\n.\\n.\\n.\\n.\"\nassert solution(\"2 5\") == \".\\n.\\n.\\n.\\n*\\n*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5\n.\n.*\n.*\n.\n.\n''') == '''*.\n.\n.*\n.\n.\n'''\nassert solution('''5 7\n.\n.*\n.*\n.\n.*\n.*\n.*\n.\n''') == '''*.\n.*\n.\n.*\n.*\n.\n.*\n.\n'''\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('./sample_data/sample_input_01.txt') == './sample_data/sample_output_01.txt'\nassert solution('./sample_data/sample_input_02.txt') == './sample_data/sample_output_02.txt'\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\") == \"***\\n***\\n***\\n***\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n.\n*\n''') == '''\n.\n.\n.\n.\n'''\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '*.\\n*.\\n*.\\n*.\\n'\nassert solution('3 3') == '*.\\n*.\\n*.\\n*.*\\n*.*\\n*.*\\n*.*\\n*.*\\n'\n\n'''\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"*.\\n*.\\n*.\\n*.\\n\""
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"YES\"\nassert solution(\"1\\n1\\n\") == \"NO\"\nassert solution(\"3\\n3 2 4\\n\") == \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 6 1 4 5\\n') == 'YES'\nassert solution('3\\n1 2 4 5\\n') == 'NO'"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == 'YES'"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\nassert solution('5\\n6 5 1 4 2') == 'YES'\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(open(0).read()) == 'YES'\n'''\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == \"YES\"\nassert solution('1\\n1\\n1\\n1\\n1') == \"NO\"\nassert solution('5\\n2\\n1\\n5\\n4') == \"YES\"\nassert solution('5\\n1\\n2\\n3\\n4') == \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 6 1 4 5\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n2 6 1 4\n\"\"\") == \"NO\"\n\"\"\")\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\""
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"\"\"2\"\"\".strip()\n\nassert solution(\"\"\"\n5\n4\n1 2 3 4\n5\n2 3 2 1\n\"\"\") == \"\"\"1\"\"\".strip()\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '1'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n\"\n    \"5\\n\"\n    \"1 2 3 4 5\\n\"\n    \"8\\n\"\n    \"6 6 6 6 6 6 8 8\\n\"\n    \"8\\n\"\n    \"1 2 2 1 2 1 1 2\\n\"\n    \"3\\n\"\n    \"1 3 3\\n\"\n    \"6\\n\"\n    \"1 1 3 4 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8') == '2\\n3\\n4\\n1\\n2'\nassert solution('10\\n1 3 3 1 2 3 2 1\\n6\\n5 1 3\\n8\\n7 1 3 4 2 2') == '4\\n1\\n2\\n3'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution() == \"3\"\nassert solution() == \"4\"\nassert solution() == \"1\"\nassert solution() == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"3\""
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\nassert solution() == \"2\"\nassert solution() == \"4\"\nassert solution() == \"1\"\nassert solution() == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3') == '2'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3') == '3'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3') == '4'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3') == '5'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n\"\"\") == \"1\""
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n7 3\n1 5\n22 5\n987 13\n''') == '3'\nassert solution('''\n2\n4 3\n2 5\n7 8\n''') == '1'\n\n'''"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7 3\n1 5\n22 5\n987 13\n\n''') == '3'\nassert solution('''2 2\n2 2\n\n''') == '2'\nassert solution('''3 3\n1 5\n22 5\n987 13\n\n''') == '3'\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n7 3\n1 5\n22 5\n987 13\n''') == \"3\"\nassert solution('''\n1\n5\n1\n''') == \"1\"\nassert solution('''\n5\n5\n1\n2\n2\n''') == \"2\"\n''')"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 3\n1 5\n22 5\n987 13\n''') == '3'\nassert solution('''4\n10 20\n50 60\n80 80\n''') == '1'\nassert solution('''4\n10 20\n50 60\n80 80\n''') == '2'\nassert solution('''4\n10 20\n50 60\n80 80\n''') == '2'\nassert solution('''4\n10 20\n50 60\n80 80\n''') == '3'"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n7 3\n1 5\n22 5\n987 13\n''') == '1'\nassert solution('''5\n10 2\n1 10\n9 10\n11 10\n2 11\n10 20\n3 10\n''') == '5'\nassert solution('''8\n100 100\n1 100\n100 100\n1 100\n100 100\n2 100\n100 100\n3 100\n''') == '3'\nassert solution('''20\n200 200\n1 200\n2 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200\n1 200"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\""
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"2\\n4 5\\n3 4\\n3 3\\n3 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n1 5\\n22 5\") == \"3\"\nassert solution(\"2 1\\n1 5\\n22 5\") == \"1\"\nassert solution(\"2 1\\n1 5\\n22 5\") == \"1\"\nassert solution(\"3 1\\n1 5\\n22 5\") == \"3\"\nassert solution(\"3 1\\n1 5\\n22 5\") == \"1\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n7 3\n1 5\n22 5\n987 13\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n10 9 5 2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6\n1 2 1 2 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\n1 2 1 2 1 2 1 2 1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0 \\\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == \"2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution('4 2') == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution('4 2') == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n''')\nassert solution('''\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n''')\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\\n\""
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2\nabca\n1 3\n10 5\ncodeforces''') == '26 10'\nassert solution('''3\ncodeforces\n20 10 1 2 3 5 10 5 9 4\nqwertyuioplkjhgfdsazxcvbnm''') == '20 10 1 2 3 5 10 5 9 4'\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 2\\nabca\\n1 3\\n10 5\\ncodeforces\\n2 8 3 2 9\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"3\\n4 2\\nabca\\n1 3\\n10 5\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\\n\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\\n4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('4 2') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('6 4') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('''5 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9''') == '26 10'\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n4 2\\nabca\\n1 3\\n10 5\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\") == \"26 10\\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"2\\n4 2\\nabca\\n1 3\\n10 5\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\"\n    ) == \"0\"\nassert solution(\n    \"1\\n1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\"\n    ) == \"2\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\\n') == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n''') == \"0\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n''') == '0'\nassert solution('''\n1 1 1\n1\n1\n1\n1\n1\n1\n''') == '0'\nassert solution('''\n1 1 1\n2\n1\n2\n2\n2\n2\n''') == '0'\nassert solution('''\n1 1 1\n2\n2\n2\n2\n2\n2\n''') == '0'\nassert solution('''\n1 1 1\n2\n2\n2\n2\n2\n2\n''') == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\nassert solution(stdin) == '36'\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n''') == '1999999994'\nassert solution('''\n4 4\n2 4 4\n1 5 1\n1 5 5\n2 1 2\n''') == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1999999994\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nassert solution(\"3 3 4\") == \"36\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n7 1 5\n4 1 2\n2 4 1\n1 4 3\n3 4 1\n2 4 1\n1 2 5\n\"\"\") == \"1999999994\"\nassert solution(\"\"\"\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\") == \"2\""
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'YES'\nassert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'YES'\nassert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES\\n'\nassert solution(input()) == 'NO\\n'\nassert solution(input()) == 'YES\\n'\nassert solution(input()) == 'YES\\n'\nassert solution(input()) == 'YES\\n'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1''') == 'YES'\nassert solution('''4\n1 8\n4\n1 1 1 1''') == 'NO'\nassert solution('''4\n1 2 5 6\n6\n1 12 3 10 5 8''') == 'YES'\nassert solution('''6\n1 12 3 10 5 8''') == 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n3\n2 3\n4\n1 3 4''') == 'YES'\nassert solution('''3\n1 3 4\n2\n1 2 3''') == 'YES'\nassert solution('''1\n2\n1\n2\n2\n3\n2\n1\n1\n3\n3\n2\n1\n1\n3''') == 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'YES'\nassert solution('4') == 'NO'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1''') == 'YES'\nassert solution('''4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1''') == 'NO'\nassert solution('''4\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8''') == 'YES'\nassert solution('''4\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8''') == 'NO'\nassert solution('''4\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8''') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n11 14 16 12\") == \"YES\"\nassert solution(\"3\\n1 8\") == \"YES\"\nassert solution(\"4\\n1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 2 5 6\") == \"YES\"\nassert solution(\"6\\n1 6 3 10 5 8\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n11 14 16 12\") == \"YES\"\nassert solution(\"2\\n1 8\") == \"NO\"\nassert solution(\"4\\n4 2 5 6\") == \"YES\"\nassert solution(\"6\\n1 12 3 10 5 8\") == \"YES\"\nassert solution(\"6\\n1 6 3 10 5 8\") == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'YES', 'Partition into pairs'\nassert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'NO', 'Partition into pairs'\nassert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'YES', 'Partition into pairs'\nassert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'NO', 'Partition into pairs'\nassert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == 'NO', 'Partition into pairs'\n'''"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 5 3\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution('''\n7 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '13'\nassert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"22\"\nassert solution_fast() == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\nassert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n5 3') == '13'\nassert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6') == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 4\n1 2 3\n2 3 2\n2 3 3\n3 4 3\n1 4 2\n3 3\n2 5\n''') == '22'\nassert solution('''\n5 5 4\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 4') == '13'\nassert solution('6 5 2') == '22'"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n\n''') == '13'\nprint(solution('''\n3 3 1\n1 2 2\n2 1 1\n'''))\nassert solution('''\n3 3 1\n1 2 2\n2 1 1\n''') == 3\nprint(solution('''\n2 6 1\n1 2 3\n2 1 2\n2 1 1\n1 1 2\n1 2 1\n1 3 2\n1 1 2\n1 1 1\n'''))\nassert solution('''\n2 3 2\n1 2 1\n2 1 1\n1 1 2\n''') == 4\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\nassert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n') == '3\\n9\\n13\\n27\\n6561'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1') == '3\\n'\nassert solution('4\\n19') == '3\\n'\nassert solution('6\\n5') == '7\\n'\nassert solution('12\\n17') == '13\\n'\nassert solution('13\\n13') == '13\\n'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution() == '3'\nassert solution() == '9'\nassert solution() == '13'\nassert solution() == '27'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('6') == '9'\nassert solution('13') == '27'\nassert solution('14') == '27'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '5'\nassert solution('25') == '25'\nassert solution('1000000000') == '1000000000'"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\nassert solution(\"100\") == \"10\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '13'\nassert solution('6') == '9'\nassert solution('13') == '27'\nassert solution('14') == '13'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2\\n1\\n2\\n3\\n3\\n9\\n\"\n) == \"1\\n3\\n9\\n\"\nassert solution(\n    \"2\\n1\\n2\\n4\\n4\\n20\\n\"\n) == \"4\\n20\\n\"\nassert solution(\n    \"2\\n100\\n200\\n\"\n) == \"100\\n200\\n\"\nassert solution(\n    \"5\\n10\\n100\\n50\\n20\\n\"\n) == \"10\\n100\\n50\\n20\\n\"\nassert solution(\n    \"10\\n100\\n50\\n20\\n\"\n) == \"50\\n20\\n\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '3'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10''') == '27'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n100''') == '19683'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '3 3 3 3 3 3'\nassert solution('5') == '1 1 1 1 1'\nassert solution('3') == '1 1 1 1'\nassert solution('2') == '2 2'\nassert solution('4') == '4 4 4 4 4'\n\n\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport itertools\nfrom decimal import Decimal"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '3 3 3 2 1 2 3 4 4 4'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '1 1 1 1 1 1'\nassert solution('5') == '3 3 3 3 3'\nassert solution('4') == '2 3 3 2 1 3'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1') == '1 1 1 1 1'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2') == '2 2 2 2'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 3 2 1\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2''') == '1 1 1 1 1'\nassert solution('''10\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '3 3 3 2 3 3 2 2 2 2'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4'\n\n------------------------------------------\n\n* Task\n\nYou need to write a function which will take in the following parameters:\n\n*  string of integers delimited by whitespace,\n*  the number of strings,\n*  a string of characters delimited by whitespace,\n*  the number of characters,\n*  a number,\n*  a string,\n*  a number,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of characters delimited by whitespace,\n*  the number of strings,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,\n*  the number of characters,\n*  a string,\n*  a string,\n*  a string,\n*  a string,\n*  the number of strings,\n*  the number of characters,\n*  a string of integers delimited by whitespace,"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 1 1 1 1\"\nassert solution(\"6\") == \"3 3 3\"\nassert solution(\"4\") == \"2 2 2 2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\"\n) == \"1 1 1 1 1 3 3 3 2 2 1 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '2 2 2 3 4 5 1'\nassert solution('''7\n5\n1 2 3 4 5 1\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1 2 2 2 3 4 5'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 6\") == \"8\"\nassert solution(\"3 5\") == \"5 -2 4 -1 2\"\nassert solution(\"-1 2 3\") == \"3\""
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n0 1\n\n''') == '8\n\nassert solution('''\n2\n3 -1\n\n''') == '-1 2 3'\n\nassert solution('''\n2\n0 3\n\n''') == '3 -1 2'\n\nassert solution('''\n3\n-1 2 3\n\n''') == '0 -1 2 3'\n\nassert solution('''\n3\n0 1\n\n''') == '1 2 0'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n1 2\n''') == \"5\"\nassert solution('''\n2 2\n1 1\n''') == \"0\"\nassert solution('''\n3 3\n2 1\n''') == \"2\"\nassert solution('''\n4 3\n3 1\n2 1\n''') == \"2\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n5\n0 3 1\n3 2 4\n7 8 9\n8 9 10\n2 6 1\n''') == '14'\nassert solution('''\n10\n0 5\n5 3\n0 1\n3 5\n5 1\n0 2\n4 6\n2 3\n''') == '10'\nassert solution('''\n5\n0 1\n1 2\n2 3\n3 4\n4 5\n''') == '12'\n\nassert solution('''\n1 1\n1 1\n''') == '1'\n\nassert solution('''\n2\n1\n''') == '1'"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 6\n1 5\n''') == '8'\nassert solution('''\n3 5\n0 3 1\n''') == '7'"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '7 5 -2 4 -1 2'"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 3\n5\n1 2 3\n''') == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 5\n''') == '8'\nassert solution('''\n3\n0 3 1\n''') == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == '', \"You forgot to pass stdin parameter!\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 6\\n\"\n    \"1 5\\n\"\n) == \"8\\n\"\nassert solution(\n    \"3 5\\n\"\n    \"0 3 1\\n\"\n) == \"7\\n\""
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"YES\"\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"NO\"\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"YES\"\n'''\n\nstdin = input()"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'NO'\n\n'''"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n4\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n'''\n) == 'YES'\n\nassert solution(\n    '''\n5\n4\n1 2\n1 3\n2 4\n2 3\n1 4\n\n3\n2 1\n1 2\n1 3\n1 4\n\n4\n1 2\n1 3\n1 4\n1 5\n'''\n) == 'NO'\n\nassert solution(\n    '''\n4\n3\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n'''\n) == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'NO'\nassert solution('5') == 'YES'\nassert solution('4') == 'YES'\n\n'''\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'NO'\nassert solution('''\n2\n5\n1 1\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'YES'\nassert solution() == 'RUUURRRRUU'\nassert solution() == 'NO'\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"RRRRUUU\"\n\n'''\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\n''') == 'YES'\n\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\n''') == 'NO'\n\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\n''') == 'YES'\n\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\n''') == 'NO'"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"YES\"\n\nassert solution('''\n4\n2\n0 1\n0 2\n1\n4 2\n''') == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n5 4\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n3 3\n\"\"\"\n) == \"YES\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\nassert solution('''\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '500'\nassert solution('''\n1\n10\n10\n''') == '0'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    'testcase_1\\n'\n    '2 1\\n'\n    '1 1\\n'\n) == '8'\nassert solution(\n    'testcase_2\\n'\n    '2 1\\n'\n    '1 1\\n'\n) == '0'\nassert solution(\n    'testcase_3\\n'\n    '2 1\\n'\n    '1 1\\n'\n) == '500'\nassert solution(\n    'testcase_4\\n'\n    '217871987498122 10\\n'\n    '100000000000000001 1\\n'\n) == '2128012501878'\nassert solution(\n    'testcase_5\\n'\n    '100000000000000001 1\\n'\n    '100000000000000001 1\\n'\n) == '9999999999999999999'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '2128012501878'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 1\"\n    ) == \"0\"\nassert solution(\n    \"1 1\"\n    ) == \"1\"\nassert solution(\n    \"500 4\"\n    ) == \"0\"\nassert solution(\n    \"217871987498122 10\"\n    ) == \"5\"\nassert solution(\n    \"100000000000000001 1\"\n    ) == \"6\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\nassert solution('''\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '500'\nassert solution('''\n5\n2 1\n1 1\n2 2\n217871987498122 10\n100000000000000001 1\n''') == '4'\nassert solution('''\n5\n2 1\n1 1\n5 1\n217871987498122 10\n100000000000000001 1\n''') == '1'\nassert solution('''\n5\n2 1\n1 1\n5 1\n217871987498122 10\n100000000000000001 1\n''') == '8'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '8'\nassert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '8'\nassert solution('''5\n2 1\n1 1\n1 1\n217871987498122 10\n100000000000000001 1''') == '0'\nassert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '0'\nassert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n217871987498122 10\n100000000000000001 1\n217871987498122 10\n100000000000000001 1''') == '500'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n') == '8'\n\n\n'''\nimport collections\nimport heapq"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"8\"\nassert solution(input()) == \"500\"\nassert solution(input()) == \"2128012501878\"\nassert solution(input()) == \"899999999999999999\""
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"13\") == \"3\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n8\n1 0 1 0 1 0 1 0\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8\n1 0 1 0 1 0 1 0\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n8\n1 0 1 0 1 0 1 0\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n8\n1 0 1 0 1 0 1 0\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0') == '2'\nassert solution('3\\n3\\n0 0 0') == '0'\nassert solution('4\\n3\\n1 0 0 1') == '4'\nassert solution('3\\n5\\n0 0 0 1') == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == '2'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") ) == \"2\"\nassert solution(input(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\")) == \"4\"\nassert solution(input(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\")) == \"1\"\nassert solution(input(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\")) == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"0\"\nassert solution(\"7\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1 0 0 1 0 1\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"2\"\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"0\"\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"4\"\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"1\""
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1''') == '2'\nassert solution('''10\n8\n0 0 1 0 1 0 1 0 1 1 1\n3\n1 0 0\n4\n1 1 0 0 1\n7\n1 0 0 0 0 1\n8\n1 1 0 1 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1''') == '3'\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '4'"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"4\\n3\\n1 0 0\\n5\\n1 1 0\\n4\\n1 0 0\\n3\\n1 0 0\\n\") == \"4\"\nassert solution(\"2\\n0\\n0\") == \"0\"\nassert solution(\"1\\n1\\n0\") == \"1\""
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'cbcaca'\nassert solution('3') == 'abcd'\nassert solution('4') == 'baabaa'\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n4 4\") == \"abcd\"\nassert solution(\"6 2\\n\") == \"baabab\"\nassert solution(\"1 10\") == \"a\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == 'aacbbac', 'test1'\nassert solution('5 3') == 'cbbbaca', 'test2'\nassert solution('7 3') == 'baabaaab', 'test3'\nassert solution('10 2') == 'cbcaabcbaaabbaaacaaaabbcdbbbbdbaabaaaaaabbaaacabbbab', 'test4'\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"aba\"\nassert solution(\"2\") == \"ba\"\nassert solution(\"1\") == \"\"\nassert solution(\"5\") == \"bacab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"cbcacab\"\nassert solution(\"4\") == \"abcd\"\nassert solution(\"6\") == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n7 3\\n4 4\\n6 2') == 'abcd\\nabcd\\nabcd'\nassert solution('5\\n8 8\\n5 5') == 'cbcab\\nccbba\\nabcba\\nabcba\\nabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"3\\n4 5\\n2 3\\n6 1\") == \"cbcacab\"\nassert solution(\"3\\n3 3\\n4 2\\n3 3\") == \"baabab\"\nassert solution(\"3\\n5 2\\n1 3\\n1 5\") == \"aba\"\nassert solution(\"10\\n26 26\\n11 22\\n23 11\") == \"aba\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\\n7 3\") == \"cbcacab\"\nassert solution(\"2\\n4\\n4\") == \"abcd\"\nassert solution(\"3\\n5\\n2\") == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'cbcacab'\nassert solution() == 'abcd'\nassert solution() == 'baabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"1\\n1 3\\n3 4\\n2 1\") == \"aba\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n1\\n\") == \"1 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1\\n7\\n1 1 1\\n\") == \"1 1000 0\"\nassert solution(\"\") == \"0 0\"\nassert solution(\"2\\n3\\n4\") == \"0 0\"\nassert solution(\"3\\n2\\n1\\n\") == \"1 2\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n1 2 3\n3\n2\n3\n1\n''') == '''\n6 23 21\n'''\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n\n''') == \"6 23 21\"\n\n\n'''\n--- Part Two ---\n\nAlice and Bob have a candy bar, with $n$ candies, some of which are red, some of which are black.\n\nAlice has a strategy: she eats greedily, beginning with the white candy and ending with the black candy.\n\nBob has a strategy: she eats greedily, beginning with the black candy and ending with the white candy.\n\nAlice and Bob have $a$ and $b$ candies. Each has an initial number of candies in their respective bag.\n\nThe game begins with Alice having the first bag and Bob having the second bag.\n\nAt every move, the loser of the previous move eats one candy from either the left or right side. \n\nThe loser's turn is over when the other side has the same number of candies as the current turn. \n\nIf they are not equal, the loser is eliminated and the winner takes all of the remaining candies, starting with the loser's side. \n\nThis process continues until the game ends.\n\nIf a player wins, they eat all their remaining candies. However, this can be confusing, especially if the size of their bag is large.\n\nFor example, if Alice and Bob each had $1000$ candies (the initial size of their bag), they could eat $1000$ candies by moving one candy at a time. Each move consumes one more candy than the previous move. So, if they both had $10$ candies, then Alice could move from $9$ to $10$, and Bob from $10$ to $10$ by moving one candy at a time. If they both had $100$ candies, then Alice could move from $99$ to $100$, and Bob from $100$ to $100$ by moving one candy at a time.\n\nGiven the initial values of $a$ and $b$ and the initial values of $n$ and $a$, print the size of the winner's side if it exists and how many moves it would take to determine the winner.\n\nIf the winner is not found, print -1.\n\nThe winner of the game is the side with the largest amount of candies. The winner also has the longest sequence of moves.\n\nInput\nThe first line contains an integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases in the input. The following are descriptions of the $t$ test cases.\n\nEach test case consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 1000$) \u2014 the number of candies. The second line contains a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1000$) \u2014 the sizes of candies in the order they are arranged from left to right.\n\nIt is guaranteed that the sum of the values of $n$ for all sets of input data in a test does not exceed $2\\cdot10^5$.\n\n\nOutput\nFor each set of input data print one integer \u2014 the size of the winner's side if it exists and how many moves it would take to determine the winner.\n\nIf the winner is not found, print -1.\n\n'''\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1\\n7\\n1 1 1') == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\\n4 4 3'\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 1\n1 2\n1 2\n''') == '1 2 1'\n\nassert solution('''2\n1\n1''') == '1 1'\n\nassert solution('''6\n1\n1 1 1 1 1 1\n1 2\n1 3\n2 2\n3 3\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n''') == '21 22'\n\nassert solution('''3\n1\n1 1\n1 2\n''') == '1 2 1'\n\nassert solution('''3\n1\n1 1\n1 2\n''') == '1 2 1'"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n6\n1 2 3 4 1\n1\n6\n1 2 3 4 1\n1\n''') == '''2 3\n1 5 2\n3 2\n'''\nassert solution('''\n4\n5\n1 5 2 1\n1\n5\n1 2\n1\n''') == '''2 3\n1 4 1\n1 4 1\n'''"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\\n5 5 2\\n6 6 2\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1\\n7\\n1 1 1') == '1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\\n5 4 3'\nassert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1\\n7\\n1 1 1') == '1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\\n5 4 3'\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n10\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1 1 1 1 1\n\n\"\"\") == \"6 23 21\"\n\nassert solution(\"\"\"\n2\n1\n5\n1 1 1 1 1\n5\n2 3 4 5 6 7 8 9 10 11 12 13\n\n\"\"\") == \"1 1000 0\"\n\nassert solution(\"\"\"\n3\n1\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1 1 1 1 1\n\n\"\"\") == \"3 2 1\"\n\nassert solution(\"\"\"\n3\n1\n1\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1 1 1 1 1\n\n\"\"\") == \"2 2 1\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n4\n1 2 3 4 5\n2\n3\n1\n1\n1''') == '''5\n3\n3'''"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\nassert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\nassert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '11'\nassert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '17'\nassert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 1\n1 2\n3 4\n''') == '6'\nassert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\nassert solution('''\n5\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\nassert solution('''\n3\n2 1\n1 2\n3 4\n''') == '6'\nassert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == \"27\"\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == \"39\"\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == \"11\"\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2 1\n1 2\n3 4''') == '27'\n\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3''') == '39'\n\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3''') == '11'\n\nassert solution('''3\n2 1\n1 2\n3 4''') == '27'\n\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3''') == '39'"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"27\"\nassert solution(\"2\") == \"39\"\nassert solution(\"4\") == \"11\"\nassert solution(\"10\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\n\nprint(solution('''\n3 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n'''))\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '6'\nassert solution('''\n2 2\n1 1\n4 4\n4 4\n4 4\n1 2 2 1\n4 4 5 4\n''') == '7'\nassert solution('''\n2 2\n1 1\n4 4\n4 4\n4 4\n1 2 2 1\n4 4 5 4\n''') == '7'\nassert solution('''\n2 2\n1 1\n4 4\n4 4\n4 4\n1 2 2 1\n4 4 5 4\n''') == '7'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '6'\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '11'\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '6'\nassert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\nassert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\nassert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '11'\nassert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n3 4\n2 2 5 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '6'\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5\n''') == '7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 2') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1') == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3 1 3 3 1 4 1\") == \"0 2 4 7 8 11 13 14 16 17\"\nassert solution(\"10 1\") == \"0\"\nassert solution(\"10 2\") == \"7 13 18 24 35 36 37 40 45\""
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"10 2\\n\"\n    \"7 6 18 6 16 18 1 17 17\\n\"\n    \"6 9 3 10 9 1 10 1 5\\n\"\n) == \"0 7 13 18 24 35 36 37 40 45\"\n\n\"\"\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1\\n3 2 3 1 3 3 1 4 1') == '0 2 4 7 8 11 13 14 16 17'"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"0 2 4 7 8 11 13 14 16 17\"\nassert solution(\"10 2\") == \"0 7 13 18 24 35 36 37 40 45\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5\n''') == '0 7 13 18 24 35 36 37 40 45 '\nassert solution('''\n10 1\n3 2 3 1 3 3 1 4 1\n1 2 3 4 4 1 2 1 3\n''') == '0 2 4 7 8 11 13 14 16 17 '"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 2') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1') == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n4 6 10 7\n5 6 7 9\n''') == '13 21 30 41 44 55 66'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\", \"Empty input!\"\nassert solution(\"5 1\") == \"aaabb\", \"Wrong result\"\nassert solution(\"5 2\") == \"aabab\", \"Wrong result\"\nassert solution(\"5 8\") == \"baaba\", \"Wrong result\"\nassert solution(\"5 10\") == \"bbaaa\", \"Wrong result\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aaaaabaaaaabaaaaaaaa\"\nassert solution('''\n4 1\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"abb\"\n'''"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"aaabb\"\nassert solution(\"2\") == \"aabab\"\nassert solution(\"3\") == \"baaba\"\nassert solution(\"4\") == \"bbaaa\"\nassert solution(\"5\") == \"abb\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2') == 'aaabb'\nassert solution('2\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2') == 'aabab'\nassert solution('10\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n10 1\n''') == 'aaabb'\nassert solution('''\n2\n10 2\n''') == 'aabab'\nassert solution('''\n2\n10 10\n''') == 'bbaaa'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"baaba\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n5 1\n5 2\n5 8\n5 10''') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aaaaabaaaaabaaaaaaaa\"\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aabab\"\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"bbab\"\nassert solution('''3 1\n3 2\n3 4\n''') == \"aaa\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n1\n4\n3 1\n1 5\n2 5\n1 2\n10 10\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == \"5\"\nassert solution('''2\n1 2\n1\n5\n3 1\n1 5\n2 5\n1 2\n10 10\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == \"6\"\nassert solution('''2\n1 2\n1\n20\n3 1\n1 5\n2 5\n1 2\n10 10\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == \"5\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '6'\n\n\"\"\"\n\n\nfrom typing import List\nimport itertools\nimport heapq\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n7 1\\n1 5 2 3 1 5 4') == '6'\nassert solution('2\\n7 1\\n1 5 2 3 1 5 4') == '1'\nassert solution('3\\n7 1\\n1 5 2 3 1 5 4') == '5'\nassert solution('4\\n7 1\\n1 5 2 3 1 5 4') == '10'\nassert solution('5\\n7 1\\n1 5 2 3 1 5 4') == '1'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '6'\nassert solution('''3\n1 2 1\n1 5 1\n1 8''') == '1'\nassert solution('''2\n3\n1 2\n1 2''') == '1'\nassert solution('''3\n1 2 2\n1 3 1\n1 2 2''') == '0'\nassert solution('''2\n2\n1 1\n1 1''') == '0'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 3\n1 3 2\n3 4\n1 4''') == '2'\n\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == '1'\n\nprint(solution('''6\n20 10\n19 19 8 1 8\n17 20 2 13 16\n16 8 9 1 7\n5 19 4 9 4\n7 8 2 1 9\n1 1\n1000000000\n1000000000\n5 10'''))"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3''') == '5'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3''') == '2'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\") == \"6\"\nassert solution(\"2\\n10 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n5 10\") == \"10\"\nassert solution(\"1\\n10 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n5 10\") == \"1\"\nassert solution(\"5\\n1000000000\\n1000000000\\n5 1000000000\\n10 1000000000\\n5 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1\n1\n1''') == '1'\nassert solution('''1\n1\n1\n1\n1\n1\n1''') == '1'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n1000000000\n1000000000''') == '5'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n1000000000\n1000000000''') == '10'\nassert solution('''2\n6\n1\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000''') == '1'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 3\n0\n1\n2\n2\n0\n0\n10\n''') == '1'\nassert solution('''4 3\n1\n2\n1\n2\n''') == '0'\nassert solution('''4 3\n1\n2\n1\n2\n''') == '0'\nassert solution('''4 3\n1\n2\n1\n2\n''') == '0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n0\") == \"1\"\nassert solution(\"4\\n3\\n2\\n1\\n0\") == \"3\"\nassert solution(\"4\\n4\\n2\\n1\\n0\") == \"4\"\nassert solution(\"4\\n4\\n3\\n2\\n0\") == \"4\"\nassert solution(\"5\\n4\\n3\\n2\\n0\") == \"4\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 3') == '1'\nassert solution('4 3') == '0'\n\nstdin = \"\"\"7 3\n0\n1\n2\n2\n0\n0\n10\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n0\\n1\\n2\\n2\\n\") == \"1\\n2\\n3\\n3\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\"\nassert solution(\"6 3\\n0\\n0\\n0\\n0\\n0\\n\") == \"2\\n2\\n2\\n2\\n2\"\nassert solution(\"7 3\\n0\\n0\\n0\\n0\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\""
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n4\\n4\\n7'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\\\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"1 49 20 40 30 50 10\"\nassert solution(\"\"\"\\\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"26 32 20 38 44 50 10\"\nassert solution(\"\"\"\\\n3\n1 1 2\n2 5 5\n1 2 1\n\"\"\") == \"1 2 1 2 1 2\""
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 1 49') == '1 49'\nassert solution('5 20 50') == '20 40 30 50 10'\nassert solution('6 20 50') == '26 32 20 38 44 50'\nassert solution('5 3 8') == '8 23 18 13 3'\nassert solution('9 13 22') == '1 10 13 4 19 22 25 16 7'"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 49 20 40 30 50 10 26 32 20 38 44 50 8 23 18 13 3 1 10 13 4 19 22 25 16 7'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == '3'\nassert solution('2 5 3') == '1 5'\nassert solution('4 3 2') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 49 20 40 30 50 10\\n26 32 20 38 44 50 10\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"1 49 \n20 40 30 50 10\n26 32 20 38 44 50 \n8 23 18 13 3 \n1 10 13 4 19 22 25 16 7\n\"\"\"\nassert solution(\"\"\"\n2\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"1 49 \n20 40 30 50 10\n26 32 20 38 44 50 \n8 23 18 13 3 \n1 10 13 4 19 22 25 16 7\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49 20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\""
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49 20 50 10 26 32 20 38 44 50 8 23 18 13 3 1 10 13 4 19 22 25 16 7'\nassert solution('5\\n2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49 20 50 10 26 32 20 38 44 50 8 23 18 13 3 1 10 13 4 19 22 25 16 7'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 49\n5 20 50\n6 20 50\n''') == '1 49 20 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\\n'''\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\"\"\") == \"\"\"1 49 \n20 40 30 50 10\n26 32 20 38 44 50 \n8 23 18 13 3 \n1 10 13 4 19 22 25 16 7\"\"\"\nassert solution(\"\"\"3\n1 2 3\"\"\") == \"\"\"1 2 3\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"5 1 2 3 4 5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"4 3 1 2\") == \"1 3 2 4\"\n\nsolution(\"1 2 3\") == \"1 2 3\"\nsolution(\"6 2 3 1 4 5\") == \"1 2 3 4 5 6\"\nsolution(\"10 5 3 2 1\") == \"1 2 3 4 5 6 7 8 9 10\""
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10\") == \"10 10 10 10 10 10 10 10 10 10\""
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('4 3 1 5 2') == '1 2 3 5'\nassert solution('6 5 2 1 4 3') == '1 2 3 4 5'\n\n\"\"\"\n\n\"\"\"\n1 3 1 2\n1 3 2\n\n1 1 1\n1 1 2\n1 1 3\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('10 11 2') == '2 11 10'\nassert solution('100 20 30') == '30 100 20'\nassert solution('2 3 5 7') == '7 2 5 3'"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '1 2 3'\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1 2\"\nassert solution(\"3 3 1 2\") == \"1 2 3\""
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '1 2 3'"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == output"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('6') == 'NO'"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\" or solution() == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2\\n3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\\n') == 'YES'\nassert solution('2\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n') == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5''') == 'YES'\nassert solution('''1\n2 3\n4\n1 2 3\n3\n4 5\n''') == 'NO'"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n\nimport math"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n2\n2 4\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == \"YES\"\nassert solution('''\n5\n3 1 2 3 5\n4\n2 1 2 3 4\n''') == \"NO\"\nassert solution('''\n6\n4 1 2 3 1 5\n3\n1 1 1 1\n2\n3\n''') == \"YES\"\nassert solution('''\n7\n2 5 9 2 8 7\n8\n5 8 5 5 8 8\n''') == \"YES\"\nassert solution('''\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10 10 10 10 10 10 10 10 10 10 10\n10\n10 10"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n3\n5\n''') == '5 6 3 1 2'\nassert solution('''\n1\n3\n5\n''') == '3 1 5 2'\nassert solution('''\n3\n1\n5\n''') == '1 3 5 2'\nassert solution('''\n3\n1\n5\n''') == '1 2 5 3'\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s) == \"9 6 10 8 4 7 3 1 5 2\""
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n10\\n2\\n4\\n6\\n7') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('6\\n13\\n9 7 11 8 4 1 3 5 2 6 10 12') == '5 1 3 6 2 4 7 3 5 8 4 1 9 7 11 8 13 12'"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n10\\n2\\n4\\n6\\n7') == '9 6 10 8 4 7 3 1 5 2'\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('4') == '5 3 6 2 4 1 7 8 9 10 11 12 13'\nassert solution('13') == '13 9 7 11 8 4 1 3 5 2 6 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 312 313 314315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 312 313 314315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 312 313 314315 316 317 318 319 320 321 322 323 24 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314315 316 317 318 319 320 321 322 323 24 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152153 154155 156157 58 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314315 316 317 318 319 320 321 322 323 24 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152153 154155 156157 58 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152153 154155 156157 58 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152153 154155 156157 58 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152153 154155 156157 58 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"4\") == \"1 3 2 4\"\n\n---\n\n<BEGIN PROBLEM>\n\n<END PROBLEM>\n\n----"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2\n4\n6\n7\n13\n\n''') == '9 6 10 8 4 7 3 1 5 2', 'Should be 9 6 10 8 4 7 3 1 5 2'\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('7') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == '3 1 4 2'\nassert solution('4') == '3 1 4 2'\nassert solution('6') == '9 6 10 8 4 7 3 1 5 2'\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '1'\nassert solution('''4\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2'\nassert solution('''3\n4\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '-1'\nassert solution('''6\n4\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n\n\n\n\nimport math"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n4\\n3 2 7 6\\n3') == '1'\nassert solution('4\\n4\\n3 2 7 6\\n3') == '0'\nassert solution('4\\n4\\n3 2 6 7\\n3') == '1'\nassert solution('4\\n4\\n3 2 6 7\\n3') == '0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '2'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '1'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '-1'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4\\n3 2 7 6\\n3\\n3 2 6\") == \"1\"\nassert solution(\"4\\n4\\n3 2 7 6\\n1\\n7\\n4 9 2 1 18 3 0\") == \"2\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(t=4, a=[3, 2, 7, 6]) == 1\nassert solution(t=4, a=[3, 2, 7, 6]) == 1\nassert solution(t=4, a=[3, 2, 7, 6]) == 1\nassert solution(t=4, a=[3, 2, 7, 6]) == 1\nassert solution(t=4, a=[3, 2, 7, 6]) == 1\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '1'\nassert solution('''1\n1\n1\n1''') == '0'\nassert solution('''2\n1\n1''') == '-1'"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2'\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '1'\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n3 2 7 6') == '2'\nassert solution('4\\n3 2 6') == '1'\nassert solution('4\\n3 2 6\\n1') == '0'\nassert solution('4\\n3 2 6\\n1\\n7\\n7') == '-1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"5\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 2 2 2 2 1 1 0 2\""
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == '2 2 2 2 1 1 0 2'\nassert solution('''\n7\n0 0 1 1 1 1 1\n1 2\n1 3\n2 4\n2 5\n3 6\n4 7\n\n''') == '0 -1 2 2 2 2 2 1 1 1'\nassert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == '0 -1 1 -1'\nassert solution('''\n5\n0 1\n0 2\n1 3\n2 4\n3 5\n\n''') == '0 1 -1 2 3 5'\nassert solution('''\n2\n0 0\n1 1\n\n''') == '0 -1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 2\\n3 4\\n4 5\\n5 6\\n1 6\\n7 8\\n8 9\\n3 8\\n9 10\\n8 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n3 7\\n11 12\\n13 14\\n15 16\\n16 17\\n11 17\\n12 18\\n13 19\\n14 20\\n15 20\\n16 21\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n') == \"2 2 2 2 2 1 1 0 2\"\nassert solution('1\\n0 2\\n1 2\\n2 2\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n') == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1 1 0 0 0 0 1\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\""
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"2 2 2 2 1 1 0 2\"\nassert solution(\"5\\n0 0 1 0 0\\n1 2\\n1 3\\n1 4\\n2 5\\n\") == \"0 -1 1 -1 2 2 1 1 0 2\""
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    4\n    0 0 1 0\n    1 2\n    1 3\n    1 4\n    ''') == '0 -1 1 -1'\nassert solution('''\n    4\n    0 0 1 0\n    1 2\n    1 3\n    1 4\n    ''') == '0 2 2 2 1 1 0 2'\nassert solution('''\n    4\n    0 1 1 0\n    1 2\n    1 3\n    1 4\n    ''') == '0 2 2 2 1 1 0 2'\nassert solution('''\n    4\n    0 1 1 0\n    1 2\n    1 3\n    1 4\n    ''') == '0 2 2 2 1 1 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 0 1 0\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n''') == '0 -1 1 -1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 0 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9') == '2 2 2 2 2 1 1 0 2'\nassert solution('4\\n0 0 1 0') == '0 -1 1 -1'"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n''') == '2 2 2 2 2 1 1 0 2 '\n\nassert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == '0 -1 1 -1 '\n\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"12345\") == \"36\""
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"12\") == \"36\"\nassert solution(\"12345\") == \"36\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n3\n12\n12345\n15116544\n387420489''') == '0'\nassert solution('''4\n-1\n-1\n-1\n-1\n6\n-1''') == '-1'\nassert solution('''4\n-1\n-1\n-1\n-1\n6\n-1''') == '-1'\nassert solution('''7\n1\n2\n3\n12\n12345\n15116544\n387420489''') == '2'\nassert solution('''7\n1\n2\n3\n12\n12345\n15116544\n387420489''') == '-1'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '-1'\nassert solution('1') == '0'\nassert solution('12') == '2'\nassert solution('12345') == '-1'\nassert solution('15116544') == '36'"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"12\") == \"2\"\nassert solution(\"12345\") == \"2\"\nassert solution(\"15116544\") == \"36\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2\n3\n12\n12345\n15116544\n387420489\n''') == '2'\nassert solution('''\n7\n1\n2\n3\n12\n12345\n15116544\n387420489\n''') == '12'\nassert solution('''\n6\n1\n2\n3\n12\n12345\n15116544\n387420489\n''') == '-1'\nassert solution('''\n5\n1\n2\n3\n12\n12345\n15116544\n387420489\n''') == '-1'\nassert solution('''\n4\n1\n2\n3\n12\n12345\n15116544\n387420489\n''') == '12'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"12345\") == \"36\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '-1', 'Should handle 1 correctly'\nassert solution('2') == '2', 'Should handle 2 correctly'\nassert solution('3') == '-1', 'Should handle 3 correctly'\nassert solution('12') == '2', 'Should handle 12 correctly'\nassert solution('12345') == '36', 'Should handle 12345 correctly'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('7') == '-1'"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nBGGGG\") == \"0\"\nassert solution(\"5 3\\nRBRGR\") == \"1\"\nassert solution(\"5 5\\nBBBRR\") == \"3\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 3\") == \"3\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n5 1\nBGBB\n5 3\nBRRB\n''') == '1'\nassert solution('''5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n5 1\nBGBB\n5 3\nBRRB\n''') == '3'\nassert solution('''5 5\nBBBRR\nBGBB\nBRRB\nRBRG\nBGBG\nBGBB\nBGBG\nBGBB\n''') == '2'\nassert solution('''5 5\nBBBRR\nBGBB\nBRRB\nRBRG\nBGBG\nBGBB\nBGBG\nBGBB\n''') == '3'\n\nassert solution('''4 2\nBBBB\nBBBB\nBBBB\nBBBB\n''') == '1'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\nBGGGG') == '0'\nassert solution('5 3\\nRBRGR') == '3'\nassert solution('5 5\\nBBBRR') == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n''') == '3'\n\nassert solution('''\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n''') == '0'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n''') == \"1\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(example_input_1) == \"0\"\nassert solution(example_input_2) == \"3\"\nassert solution(example_input_3) == \"1\""
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n3 1 2 3 1') == \"3\"\nassert solution('2\\n7\\n1 1 1 1 1 2 2') == \"3\""
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n3\n2\n2\n''') == '3'\nassert solution('''\n3\n1\n3\n2\n2\n''') == '3'"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3'\nassert solution('4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3'\nassert solution('5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == '3'\nassert solution('6\\n2 2 1 3 5 2\\n3\\n1 1 2\\n') == '4'\nassert solution('5\\n5 5 5 5 5 5 5\\n5\\n5 5 5 5 5 5 5\\n') == '5'\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"3\"\nassert solution(\"10\") == \"7\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n4\\n1 2 2 3\\n6\\n1 1 1 1 1\\n7\\n1 1 1 1 1 2 2\\n') == '3'\nassert solution('2\\n4\\n1 2 1 2\\n4\\n1 1 1 1 1\\n7\\n1 1 1 1 1 2 2\\n') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3'\nassert solution('''\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3'\nprint('solution() is ok')"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"1\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == \"3\"\nassert solution('''8\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == \"2\""
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n2 2 2 2 2 2\") == \"3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n2 1 2 3 3 4\") == \"3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n2 1 3 3 4\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3'\nassert solution('''2\n5\n1 2 1 1 2\n7\n2 4 1 1 4\n''') == '4'"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('6') == '1 5 2 4 3 6'\n\n\"\"\"\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"4 1 2 3\") == \"1 2 3 4\"\nassert solution(\"4 1 3 2\") == \"1 2 3 4\"\nassert solution(\"1\") == \"1\"\n\n'''\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 5 2 4 3'\n\nassert solution('''6\n5\n1 2 4 3\n1\n2\n1 3\n1 4\n4 3 2 1\n5\n''') == '1 2 3 4 5'\n\nassert solution('''3\n1\n3\n''') == '3 1'"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1 5 2 4 3\", \"Wrong answer\"\nassert solution(\"3\") == \"1 2 3 4 5\", \"Wrong answer\"\nassert solution(\"4\") == \"1 2 3 4 5\", \"Wrong answer\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 2 4 3'\nassert solution('''4\n4\n4 3 2 1\n''') == '1 4 3 2'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 2 4 3'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 2 3 4'\nassert solution('''4\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 2 3 4'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 5 2 4 3\"\nassert solution() == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 3 2 4 5'\nassert solution() == '1 2 4 3 5'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"YES\", \"Not sure\"\nassert solution(\"4\") == \"YES\", \"Wrong\"\nassert solution(\"5\") == \"YES\", \"Wrong\"\nassert solution(\"4 1 2 3\") == \"YES\", \"Wrong\"\nassert solution(\"3 1 2\") == \"YES\", \"Wrong\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"4\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n3 2 1 5 4\\n4\\n1 2 3 4\\n5\\n1 2 3 4\\n3\\n1 3 2\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n4\\n1 2 3 4') == 'YES'\nassert solution('5\\n3\\n1 2 3 4') == 'NO'\nassert solution('5\\n5\\n1 2 3 4') == 'NO'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n5') == 'YES'\nassert solution('5\\n5') == 'YES'\nassert solution('4\\n3') == 'NO'\nassert solution('5\\n3') == 'YES'\nassert solution('5\\n1') == 'YES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1') == 'YES'\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1') == 'NO'\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1') == 'YES'"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES'\nassert solution('4') == 'YES'\nassert solution('1 2 3 4') == 'YES'\nassert solution('3') == 'NO'\nassert solution('1') == 'YES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n4\\n1 2 3 4') == \"YES\"\nassert solution('5\\n3\\n1 2 3 5 4') == \"YES\"\nassert solution('5\\n1 2 3 4\\n5\\n1 2 3 5 4') == \"NO\"\nassert solution('5\\n1 2 3 4\\n5\\n1 3 2 4') == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"YES\"\nassert solution() == \"NO\"\nassert solution() == \"YES\"\nassert solution() == \"YES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == \"YES\"\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == \"YES\"\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == \"NO\"\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == \"NO\"\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == \"YES\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '7'\nassert solution('100000 50010') == '75015'"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '6'\nassert solution('100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '75015'\nassert solution('100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"18\"\nassert solution() == \"75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010''') == '18'\nassert solution('''5 3\n12 4\n9 5\n6 2\n12345''') == '12'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '5'\n\nassert solution('''\n5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '18'\n\nassert solution('''\n5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '10'\n\nassert solution('''\n5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '75015'"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n10000 1 0\") == \"10\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"18\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n') == '5'\nassert solution('2\\n5 2\\n12 7\\n6 2\\n100000 50010\\n') == '18'\nassert solution('3\\n5 2\\n12 7\\n6 2\\n100000 50010\\n') == '10'\nassert solution('4\\n5 2\\n12 7\\n6 2\\n100000 50010\\n') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '5'\nassert solution('''\n5 1\n1\n5\n''') == '5'\nassert solution('''\n3 1\n1\n3\n''') == '3'\nassert solution('''\n100000 50010\n5 2\n19 4\n12 7\n6 2\n''') == '3'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n10 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == 'YES 4 2 4'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"YES 2 2 2 2 2 2 2\"\nassert solution(\"8 10\") == \"YES 4 4 4 4 4 4 4 4\"\nassert solution(\"6 7\") == \"YES 6 6 6 6 6 6 6\"\nassert solution(\"1000000000 9\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\\n') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES 4 2 4'\nassert solution('''\n4 2\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES 55 5 5 35'\nassert solution('''\n7 5\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'NO'\nassert solution('''\n8 7\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES 55 5 5 35'\nassert solution('''\n5 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES 55 5 5 35'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n') == 'YES\\n4 2 4'\nassert solution('6 2\\n') == 'YES\\n55 5 5 35'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES'\nassert solution('''\n8 4\n10 1\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES'\nassert solution('''\n8 5\n10 1\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n3\n4\n''') == 'YES'\nassert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES'\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n''') == 'YES'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100''') == 'NO'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100''') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n5 2\n2 4\n4 3\n''') == 'YES'\nassert solution('''\n2\n2 1\n''') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    5 3\n    100 4\n    8 7\n    97 2\n    8 8\n    3 10\n    5 3\n    1000000000 9\n    \"\"\"\n) == \"\"\"YES 4 2 4\"\"\"\nassert solution(\n    \"\"\"\n    5 3\n    10 2\n    8 7\n    97 2\n    8 8\n    3 10\n    5 3\n    1000000000 9\n    \"\"\"\n) == \"\"\"YES 55 5 5 35\"\"\"\nassert solution(\n    \"\"\"\n    1 1 1 1 1 1 1 1\n    NO\n    YES\n    3 1 1\n    YES\n    111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\n    \"\"\"\n) == \"\"\"YES 1 1 1 1 1 1 1 1\"\"\"\nassert solution(\n    \"\"\"\n    NO\n    YES\n    3 1 1\n    YES\n    111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\n    \"\"\"\n) == \"\"\"YES 1 1 1 1 1 1 1 1\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 3\") == \"YES 2\"\nassert solution(\"100 4\") == \"YES 2\"\nassert solution(\"8 7\") == \"YES 2 2\"\nassert solution(\"97 2\") == \"YES 2 1\"\nassert solution(\"8 8\") == \"YES 2 2 2\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 3\") == \"1\"\nassert solution(\"1 1 10\") == \"10\"\nassert solution(\"10000000000000000 10000000000000000 10000000000000000\") == \"51\"\nassert solution(\"23 34 45\") == \"15000000000000000\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '56'\nassert solution('''\n1 2 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '55'\nassert solution('''\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '55'\nassert solution('''\n1 4 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '55'\nassert solution('''\n5 5 3\n5 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '55'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 10 100') == '55'\nassert solution('10000000000000000 10000000000000000 10000000000000000') == '51'\nassert solution('23 34 45') == '15000000000000000'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n    \"\"\"\n) == \"55000000000000000\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"0\\n56\\n55\\n\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"55\\n15000000000000000\\n\""
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '55'\nassert solution('''\n5\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '51'\nassert solution('''\n1\n1 10\n10000000000000000 10000000000000000\n''') == '10000000000000000'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO('')\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 3 4\\n\"\n    \"1 10 100\\n\"\n    \"10000000000000000 10000000000000000 10000000000000000\\n\"\n    \"23 34 45\\n\"\n) == \"55\"\n\nprint(solution(\n    \"1 3 4\\n\"\n    \"1 10 100\\n\"\n    \"10000000000000000 10000000000000000 10000000000000000\\n\"\n    \"23 34 45\\n\"\n))\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\n''') == '4'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n3\n4''') == '4'\n\nassert solution('''2\n1 2 3\n1 1 2''') == '3'\n\nassert solution('''5\n1\n8\n1000000000\n10000000000000000 10000000000000000 10000000000000000\n2\n100000000000000 10000000000000000''') == '6'\n\nassert solution('''2\n1\n10\n100''') == '50'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 3') == '3'\nassert solution('6 3') == '3'\nassert solution('7 1000') == '10'\nassert solution('5 4') == '4'\nassert solution('ababa') == '10'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3\\nabcbac\\n3 6') == '3'\nassert solution('6 3\\naaa\\n3 6') == '5'\nassert solution('6 3\\nababa\\n3 6') == '10'\nassert solution('6 3\\necbedececacbcbccbdec\\n5 4') == '15'\nassert solution('6 3\\nabzgyo\\n3 6') == '10'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"5 4\") == \"4\"\nassert solution(\"20 10\") == \"10\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\nabcbac\\n\") == \"3\"\nassert solution(\"6 3\\naaa\\n\") == \"5\"\nassert solution(\"6 3\\nababa\\n\") == \"10\"\nassert solution(\"6 3\\necbedececacbcbccbdec\\n\") == \"15\"\nassert solution(\"20 10\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n''') == '6'\nassert solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n''') == '5'\n'''"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6 3\nabcbac\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\naaa\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 3\nabcbac\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 3\naaa\n\"\"\") == \"5\"\nassert solution(\"\"\"\n6 3\nabcbac\n\"\"\") == \"6\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n''') == '6'\nassert solution('''\n1 2\n2 3\n''') == '1'\nassert solution('''\n2 3\n2 3\n''') == '2'\n'''\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 2\nab\nac\nad\nba\nbca\nbd\ncaa\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4 4\nabc\nabd\nade\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\na\nb\nc\nd\ne\nf\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '6'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\""
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test_cases.TEST_CASE_1) == \"YES\\n1 3 5\"\nassert solution(test_cases.TEST_CASE_2) == \"NO\"\nassert solution(test_cases.TEST_CASE_3) == \"YES\\n1 3 5\""
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2''') == 'YES\\n1 3 5\\nNO\\nNO'\nassert solution('''3\n10 4\n1 2 3 4 5 6 7 8 9 10\n4 5\n11 12 13 14 15 16''') == 'YES\\n1 2 3 4\\n1 5 6 7\\n1 10 11 12\\n2 13 14 15\\n2 16 17 18\\n2 20 21 22\\n2 25 26 27\\n3 28 29 30\\n3 31 32 33\\n3 36 37 38\\n4 39 40 41\\n4 42 43 44'''\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n3\\n1\\n5\\n4\\n\") == \"YES\\n1 3 5\\nNO\\nNO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n5 3\\n7 18 3 14 1') == 'YES\\n1 3 5'\nassert solution('5\\n4\\n1 2 3 4 5') == 'NO\\n'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"YES\\n1 3 5\\nNO\\nNO\"\nassert solution(\"\"\"\n1\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'YES'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == 'YES\\n1 3 5\\nNO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5\\n6 2') == 'NO\\n1 4\\n2 5\\nNO\\nNO\\nNO\\n'\nassert solution('1 2 3 4 5\\n6 2') == 'YES\\n1 3 5\\nNO\\nNO\\nNO\\nNO\\n'"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3 5\") == \"YES\\n1 3 5\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"6 2\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\\n\"\nassert solution(\"2\\n5 3\\n7 18 3 14 1\") == \"1 3 5\\n\"\nassert solution(\"2\\n5 4\\n1 2 3 4 5\") == \"NO\\n\"\nassert solution(\"3\\n5 4\\n1 2 3 4 5\") == \"YES\\n1 3 5\\n\"\nassert solution(\"3\\n5 2\\n1 2 3 4 5\") == \"NO\\n\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1001\"\nassert solution(\"0\") == \"0000\"\nassert solution(\"100\") == \"0001\"\nassert solution(\"111\") == \"1011\"\nassert solution(\"1000\") == \"1100\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('10111111111111111111111111111111') == '4294967293'\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10000000000000000000000000000\") == \"964176192\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('00000010100101000001111010011100') == '964176192'\nassert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('111111111111111111111111111111111') == '3221225471'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0011010100101000001111010011100') == '964176192'\nassert solution('111111111111111111111111111111111') == '3221225471'\nassert solution('1000000000000000') == '4294967293'\n\n'''\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"111111111111111111111111111111111\") == \"10111111111111111111111111111111\"\nassert solution(\"\") == \"\"\nassert solution(\"01010101010101010101010101010101010101\") == \"010101010101010101010101010101010101\"\nassert solution(\"111111111111111111111111111111111\") == \"10111111111111111111111111111111\"\n\n'''\n\n'''\n\n***try to do it with binary***\n\n'''"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''Reverse bits of a given 32 bits unsigned integer.\n\nNote that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n\nNote that in Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n\nFollow up:\n\nIf this function is called many times, how would you optimize it?''') == '964176192':\n    print('Success')\nelse:\n    print('Failed')\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('111111111111111111111111111111100') == '964176192'\nassert solution('00111001011110000010100101000000') == '964176192'\nassert solution('100000000000000') == '3221225471'\nassert solution('111111111111111111111111111111101') == '10111111111111111111111111111111'\nassert solution('00000010100101000001111010011100') == '964176192'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0000000000001010') == '1011010'\nassert solution('11111111111111111111111111111110') == '10111111111111111111111111111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11111111111111111111111111111111\") == \"3221225471\"\n\n'''"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\".5\") == \"[\\n1\\n1,1\\n1,2,1\\n1,3,3,1\\n1,4,6,4,1\\n]\\n\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(5) == \"[1,1,1,1,1]\", \"Wrong answer\""
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '[1, 1, 1, 2, 1, 3, 3, 2, 1, 4, 6, 4, 1]', f\"Actual: {solution(sys.stdin.read())} | Expected: {[1, 1, 1, 2, 1, 3, 3, 2, 1, 4, 6, 4, 1]}\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == stdin_res['ans']\n\n\"\"\"\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        res = []\n\n        for i in range(numRows):\n            row = [1] * (i + 1)\n            for j in range(1, i):\n                row[j] = res[i - 1][j - 1] + res[i - 1][j]\n            res.append(row)\n\n        return res\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '\\n'.join(['1', '1,1', '1,2,1', '1,3,3,1', '1,4,6,4,1'])\nprint('All tests passed!')\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5''') == '''[\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]'''\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\\n1\\n1\\n2\\n3\\n\"\nassert solution(\"4\") == \"1\\n1\\n2\\n3\\n\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n1\n2\n1\n2\n''') == '''[\n  [1],\n  [1,1],\n  [1,2,1]\n]'''\nassert solution('''7\n1\n1,1\n1,2,1\n1,3,3,1\n1,4,6,4,1\n1,5,10,10,5,1\n1,6,15,20,15,6,1\n''') == '''[\n  [1],\n  [1,1],\n  [1,2,1],\n  [1,3,3,1],\n  [1,4,6,4,1],\n  [1,5,10,10,5,1],\n  [1,6,15,20,15,6,1]\n]'''\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5''') == '''[\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]'''\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(['steph@hackerrank.com', 'john@hackerrank.com', 'paul@hackerrank.com']) == ['john@hackerrank.com', 'paul@hackerrank.com','steph@hackerrank.com']\nassert solution(['peter@hackerrank.com', 'jack@hackerrank.com']) == ['peter@hackerrank.com', 'jack@hackerrank.com']\nassert solution(['georgia@hackerrank.com', 'harry@hackerrank.com', 'paul@hackerrank.com']) == ['georgia@hackerrank.com', 'paul@hackerrank.com']\n'''\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1@1.com') == ['1@1.com'], 'First Test Case'\nassert solution('2\\n1@1.com 2@2.com') == ['1@1.com','2@2.com'], 'Second Test Case'\nassert solution('3\\n1@1.com 2@2.com 3@3.com') == ['1@1.com','2@2.com','3@3.com'], 'Third Test Case'\n\n'''\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\nuser1@gmail.com\") == \"user1@gmail.com\"\nassert solution(\"10\\nuser9@gmail.com\") == \"user9@gmail.com\"\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nAkhilesh\nakilesh@gmail.com\nakilesh@yahoo.com\nAkilesh''') == [\"akilesh@gmail.com\", \"akilesh@yahoo.com\"]\nassert solution('''1\nAkhilesh\nakilesh@gmail.com\nakilesh@yahoo.com\nAkilesh''') == [\"akilesh@yahoo.com\"]\n'''\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\n        'ajay.d@gmail.com',\n        'akshay.d@yahoo.com',\n        'akshay@gmail.com',\n        'ajay.d@yahoo.com',\n        'ajay.d@gmail.com',\n        'ajay.d@gmail.com',\n        'akshay@gmail.com',\n        'ajay.d@yahoo.com',\n        'ajay.d@gmail.com']) == sorted([\"ajay.d@gmail.com\", \"akshay.d@gmail.com\"])"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\njoe@google.com\\njoe@yahoo.com\\n') == ['joe@google.com', 'joe@yahoo.com']\nassert solution('2\\njoe@google.com\\njoe@yahoo.com\\n') == []\nassert solution('5\\njoe@google.com\\njoe@yahoo.com\\njoe@zmail.com\\njoe@yahoo.com\\n') == ['joe@google.com', 'joe@yahoo.com', 'joe@zmail.com']\nassert solution('100\\njoe@google.com\\njoe@yahoo.com\\njoe@zmail.com\\njoe@yahoo.com\\n') == ['joe@google.com', 'joe@yahoo.com', 'joe@zmail.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\ngmail.com\ngmail.com\ngmail.com\n''') == ['gmail.com']\nassert solution('''1\ngmail.com\ngmail.com\ngmail.com\ngmail.com\n''') == ['gmail.com']\nassert solution('''1\ngmail.com\ngmail.com\ngmail.com\ngmail.com\n''') == ['gmail.com']\nassert solution('''1\ngmail.com\ngmail.com\ngmail.com\ngmail.com\n''') == ['gmail.com']\nassert solution('''1\ngmail.com\ngmail.com\ngmail.com\ngmail.com\n''') == ['gmail.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\njoe@mail.com\") == [\"joe@mail.com\"], \"First Test Case Failed\"\nassert solution(\"2\\njoe@mail.com\\njane@mail.com\") == [\"jane@mail.com\", \"joe@mail.com\"], \"Second Test Case Failed\"\nassert solution(\"3\\njoe@mail.com\\njane@mail.com\\njoe@mail.com\") == [\"jane@mail.com\", \"joe@mail.com\"], \"Third Test Case Failed\"\nassert solution(\"4\\njoe@mail.com\\njane@mail.com\\njoe@mail.com\\njane@mail.com\") == [\"joe@mail.com\"], \"Fourth Test Case Failed\"\n\n===Sample Input===\n5\njoe@mail.com\njane@mail.com\njoe@mail.com\njane@mail.com\njane@mail.com\n\n===Sample Output===\n['jane@mail.com', 'joe@mail.com']\n\n\n\n\"\"\"\nimport re"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == stdout\n\n'''\nfrom itertools import combinations\n\nn = int(input())\nl = []\nfor i in range(n):\n    email = input()\n    if email.find('@')!= -1:\n        if email.find('.')!= -1:\n            if email.find('-')!= -1:\n                if email.find('_')!= -1:\n                    if len(email) <= 3:\n                        l.append(email)\n                        \nl.sort()\n\nfor i in range(len(l)):\n    l[i] = l[i].split('@')\n    l[i][1] = l[i][1].split('.')\n    l[i] = l[i][0] + '@' + l[i][1][0] + '.' + l[i][1][1]\n\nl.sort()\nfor i in range(len(l)):\n    l[i] = l[i].replace('-', '.')\n    l[i] = l[i].replace('_', '.')\n\nfor i in range(len(l)):\n    l[i] = l[i].replace('.', '')\n    l[i] = l[i].replace('_', '')\n\nl = list(set(l))\nfor i in range(len(l)):\n    l[i] = l[i].replace('.', '')\n    l[i] = l[i].replace('_', '')\n\nfor i in range(len(l)):\n    l[i] = l[i].replace('-', '')"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\ngmail.com\njames@gmail.com\nyahoo.com\nyahoo.com\n''') == ['gmail.com','james@gmail.com']\nassert solution('''2\ngmail.com\njames@gmail.com\nyahoo.com\nyahoo.com\n''') == ['gmail.com','james@gmail.com']\nassert solution('''2\ngoogle.com\njames@gmail.com\nyahoo.com\nyahoo.com\n''') == ['google.com','james@gmail.com']\n=====Test Case 2=====\nInput\n\n3\ngmail.com\njames@gmail.com\nyahoo.com\nyahoo.com\n\nOutput\n\n['gmail.com','james@gmail.com']\n\n=====Test Case 3=====\nInput\n\n4\nmail.by\ngigya@mail.com\nmail@by.com\ngigya@by.com\n\nOutput\n\n['mail.by','gigya@mail.com','gigya@by.com']\n\n=====Test Case 4=====\nInput\n\n5\nwww.google.com\nwebsite.by\nyours.com\nmail.by\nmail.by\n\nOutput\n\n['www.google.com','website.by','yours.com','mail.by']\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0 1 1 8 9'\n\nhttps://www.hackerrank.com/challenges/python-lambda-expression/problem?isFullScreen=true\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '[0, 1, 8, 27]'\n'''\n\nfrom functools import reduce\n\nN = int(input())"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == \"0 1 1 8 27\"\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([0,1,2,3,4]) == ['0', '1', '8', '27', '64']"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(6) == [0, 1, 8, 27, 64, 125]\n\nSolution:"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(15) == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 2467, 4181]\n\"\"\"\nimport sys"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == ['0','1','1','2','3']\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == [0, 1, 1, 8, 27, 439, 1324, 6561, 19683]\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1\\n2'\nassert solution('3') == '1\\n2\\n2\\n3'\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''<feed xml:lang='en'>\n  <title>Document</title>\n  <subtitle xml:lang='en'>Document</subtitle>\n  <link rel='alternate' type='text/html' href='http://example.com/doc.html'/>\n  <updated>2013-11-25T12:12:12Z</updated>\n</feed>''') == \"3\""
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n<feed xml:space='preserve'>\\n<title>How are you?</title>\\n<date>July 25, 2012</date>\\n</feed>\") == \"2\"\nassert solution(\"1\\n<feed xml:space='preserve'>\\n<title>How are you?</title>\\n<date>July 25, 2012</date>\\n</feed>\") == \"0\"\nassert solution(\"1\\n<feed xml:space='preserve'>\\n<title>How are you?</title>\\n<date>July 25, 2012</date>\\n</feed>\") == \"1\"\nassert solution(\"1\\n<feed xml:space='preserve'>\\n<title>How are you?</title>\\n<date>July 25, 2012</date>\\n</feed>\") == \"2\"\n\n=====Explanation=====\nThis is a simple problem with no loops and only if else statements."
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == \"2\"\n\"\"\")\n\n'''\nimport sys\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n<feed xml:lang='en'>\n<title>CoderRankings</title>\n<subtitle lang='en'>Programming Challenges</subtitle>\n<item>\n<title>Top 10 CoderRankings</title>\n<link>http://coderrankings.com/</link>\n<description lang='en'>How to find the best coder for a given programming challenge?</description>\n<category lang='en'>Coding Challenges</category>\n<language>Java</language>\n<date>2017-05-16</date>\n</item>\n<item>\n<title>Top 10 CoderRankings</title>\n<link>http://coderrankings.com/</link>\n<description lang='en'>How to find the best coder for a given programming challenge?</description>\n<category lang='en'>Coding Challenges</category>\n<language>Python</language>\n<date>2017-05-16</date>\n</item>\n</feed>\n\"\"\") == \"5\"\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    <feed xmlns=\"http://www.w3.org/2005/Atom\">\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\" />\n    <title>Some feed title</title>\n    <link href=\"http://example.com/rss\" />\n    <author>Some feed author</author>\n    <updated>2006-05-27T10:32:27Z</updated>\n    <subtitle></subtitle>\n    <icon>http://example.com/icon.png</icon>\n    <rights>Some feed rights</rights>\n    <category term=\"Tech\" />\n    <category term=\"News\""
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n<data><category><music><song><title>Never Give Up</title></song><author>Queen</author><singer>Queen</singer><duration>4:27</duration></music><song><title>Oh, No!</title><author>John</author><singer>James</singer><duration>4:26</duration></song><song><title>A Thousand Years</title><author>George</author><singer>Queen</singer><duration>4:27</duration></song></category></data>') == '2'\n\n=====Solution Explanation=====\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    <feed xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n        <title>Suffern</title>\n        <subtitle>The epoch</subtitle>\n        <updated>2007-09-10T11:42:23.25Z</updated>\n        <author>\n            <name>Suffern</name>\n        </author>\n        <link rel=\"alternate\" href=\"http://www.suffern.com/\"/>\n        <link href=\"http://www.suffern.com/\"/>\n        <category term=\"Web Services\" authority=\"W3C\" />\n        <category term=\"Suffern Blog Posts\" authority=\"Suffern.com\" />\n        <pubDate>Mon, 10 Sep 2007 10:42:23 -0500 (EDT)</pubDate>\n    </feed>\n''') == 0\n\n'''"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == \"2\"\n\"\"\")\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == \"2\"\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <author>\n        <name>HackerRank</name>\n        <uri>http://hackerrank.com</uri>\n        <email>hackerrank@hackerrank.com</email>\n    </author>\n</feed>\"\"\") == \"3\"\n\n========================================="
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>Coding Ninjas</title>\n    <subtitle lang='en'>Programmer</subtitle>\n    <link rel='alternate' type='text/html' href='http://example.com/'/>\n    <updated>2013-03-13T10:00:00</updated>\n    <entry>\n        <author>\n            <name>Arjun Choudhary</name>\n        </author>\n        <title>Version 0.1</title>\n        <id>urn:ietf:params:xml:ns:cri:CP:0.1</id>\n        <updated>2013-03-14T00:00:00</updated>\n        <link href='http://example.com/'/>\n        <category domain='example.com'>\n            <category term='programming'/>\n        </category>\n        <content type='html' url='http://example.com/feed.html'>\n            <div>\n                <p>Hi,</p>\n                <p>I am Arjun Choudhary</p>\n            </div>\n        </content>\n        <link rel='alternate' type='text/plain' href='http://example.com/'/>\n    </entry>\n</feed>\"\"\") == \"3\":\n    print(\"Test case 1 passed!\")\nelse:\n    print(\"Test case 1 failed!\")\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>Coding Ninjas</title>\n    <subtitle lang='en'>Programmer</subtitle>\n    <link rel='alternate' type='text/html' href='http://example.com/'/>\n    <updated>2013-03-13T10:00:00</updated>\n    <entry>\n        <author>\n            <name>Arjun Choudhary</name>\n        </author>\n        <title>Version 0.1</title>\n        <id>urn:ietf:params:xml:ns:cri:CP:0.1</id>\n        <updated>2013-03-14T00:00:00</updated>\n        <link href='http://example.com/'/>\n        <category domain='example.com'>\n            <category term='programming'/>\n        </category>\n        <content type='html' url='http://example.com/feed.html'>\n            <div>\n                <p>Hi,</p>\n                <p>I am Arjun Choudhary</p>\n            </div>\n        </content>\n        <link rel='alternate' type='text/plain' href='http://example.com/'/>\n    </entry>\n</feed>\"\"\") == \"2\":\n    print(\"Test case 2 passed!\")\nelse:\n    print(\"Test case 2 failed!\")\n=======\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n732123456789\\n7321234567890\\n732123456789\\n7321234567890\\n\") == \"YES\\nNO\\nNO\\nYES\\n\"\nassert solution(\"10\\n732123456789\\n7321234567890\\n732123456789\\n7321234567890\\n\") == \"YES\\nNO\\nNO\\nYES\\n\"\nassert solution(\"5\\n732123456789\\n7321234567890\\n732123456789\\n7321234567890\\n\") == \"YES\\nNO\\nNO\\nYES\\n\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n738273683\") == \"NO\"\nassert solution(\"938273683\\n\") == \"NO\"\nassert solution(\"\") == \"NO\"\nassert solution(\"1\\n738273683\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8\\n12345678\\n123456789\\n0\\n987654321') == \"YES\\nNO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"895-234-2345\") == \"NO\"\nassert solution(\"7-8765-4321\") == \"YES\"\nassert solution(\"\") == \"NO\"\nassert solution(\"8952345678\") == \"NO\"\nassert solution(\"7-8765-4321\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 8 9 10\") == \"YES\\nNO\"\nassert solution(\"7 8 5 10\") == \"NO\\nYES\"\nassert solution(\"3 9 5 10\") == \"NO\\nYES\"\nassert solution(\"7 8 5 10\") == \"YES\\nYES\"\nassert solution(\"3 9 5 10\") == \"NO\\nYES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == \"YES\\n\", \"YES\"\nassert solution('121') == \"NO\", \"NO\"\nassert solution('789') == \"YES\\n\", \"YES\"\nassert solution('979') == \"NO\", \"NO\"\nassert solution('987') == \"YES\\n\", \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n738476828\\n1718743652\\n+91 892 892 892 892\\n
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n744123456789') == 'YES', 'Should be YES'\nassert solution('8\\n6123456789') == 'NO', 'Should be NO'\n=====Test Cases=====\nInput\n2\n744123456789\n8\\n6123456789\n\nOutput\nYES\nNO\n'''\n\nfrom re import match\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n' + '79012345678\\n' + '987654321\\n' + '8989012345\\n' + '123456789\\n') == 'YES\\nNO\\nYES\\nNO\\nYES'\n\n==========\nSolution 1\n\nclass mobile_checker():\n    def check(self,num):\n        if len(num)==10 and num[0]=='7' or num[0]=='8' or num[0]=='9':\n            if num[1]=='7' or num[1]=='8' or num[1]=='9':\n                if num[2]=='7' or num[2]=='8' or num[2]=='9':\n                    if num[3]=='7' or num[3]=='8' or num[3]=='9':\n                        if num[4]=='7' or num[4]=='8' or num[4]=='9':\n                            if num[5]=='7' or num[5]=='8' or num[5]=='9':\n                                if num[6]=='7' or num[6]=='8' or num[6]=='9':\n                                    if num[7]=='7' or num[7]=='8' or num[7]=='9':\n                                        if num[8]=='7' or num[8]=='8' or num[8]=='9':\n                                            if num[9]=='7' or num[9]=='8' or num[9]=='9':\n                                                return True\n        else:\n            return False\n\n    def solution(stdin: str) -> str:\n        for line in stdin.split(\"\\n\"):\n            if mobile_checker().check(line):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n=====Input=====\n1\n79012345678\n987654321\n8989012345\n123456789\n\n=====Output=====\nNO\nNO\nYES\nYES\nYES\n\n>>>>>>> 2cb2f46... add some code\n\nclass mobile_checker():\n    def check(self,num):\n        if len(num)==10 and num[0]=='7' or num[0]=='8' or num[0]=='9':\n            if num[1]=='7' or num[1]=='8' or num[1]=='9':\n                if num[2]=='7' or num[2]=='8' or num[2]=='9':\n                    if num[3]=='7' or num[3]=='8' or num[3]=='9':\n                        if num[4]=='7' or num[4]=='8' or num[4]=='9':\n                            if num[5]=='7' or num[5]=='8' or num[5]=='9':\n                                if num[6]=='7' or num[6]=='8' or num[6]=='9':\n                                    if num[7]=='7' or num[7]=='8' or num[7]=='9':\n                                        if num[8]=='7' or num[8]=='8' or num[8]=='9':\n                                            if num[9]=='7' or num[9]=='8' or num[9]=='9':\n                                                return True\n        else:\n            return False\n\n    def solution(stdin: str) -> str:\n        for line in stdin.split(\"\\n\"):\n            if mobile_checker().check(line):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n>>>>>>> a8b4d81... add some code\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 4 5 9\n9 2 4 11 12\n''') == '2 5 11 12 9'\nassert solution('''4\n2 4 5 9\n9 2 4 11 12\n''') == '2 5 11 12 9'\nassert solution('''4\n2 4 5 9\n9 2 4 11 12\n''') == '2 5 11 12 9'\n\n'''\nstdin = input()\nm = set(map(int, input().split()))\nn = set(map(int, input().split()))\nprint(*sorted(m ^ n), sep='\\n')"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 4 5 7\\n5\\n3 7 11 12\") == \"2 5 7 11 12\"\nassert solution(\"4\\n2 4 5 7\\n5\\n3 7 11 12\") == \"2 5 7 11 12\"\nassert solution(\"4\\n2 4 5 7\\n5\\n3 7 11 12\") == \"2 5 7 11 12\"\nassert solution(\"4\\n2 4 5 7\\n5\\n3 7 11 12\") == \"2 5 7 11 12\"\nassert solution(\"4\\n2 4 5 7\\n5\\n3 7 11 12\") == \"2 5 7 11 12\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 2, 3, 4, 5]) == \"3 4 5 1 2\"\n\n'''\n\nn,m=map(int,input().split())\na=set(map(int,input().split()))\nb=set(map(int,input().split()))\nprint(*sorted(list(a^b)))\n\n'''\n\nn=int(input())\na=set(map(int,input().split()))\nb=set(map(int,input().split()))\nprint(*sorted(list(a^b)))\n\n\n=====EXPLANATION=====\n\nThe symmetric difference is a set of all values that exist in either a or b, but not in both. The terms symmetric difference and symmetric difference are used interchangeably.\n\nR.E.C.S.\n\n'''"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"6\"\n\"\"\"\nfrom collections import *\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 9, 12, 15, 1, 2]) == \"9 15 12 15 1 2\"\nassert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"1 8 9 2 5 6 7 4 3\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 5 8') == '3 5 7'\nassert solution('6 5 3 4 2 1 8') == '6 5 3 8 7 4 2'\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 4 5 9\\n4\\n8 7 1 12') == '5 9 1 12\\n7 1 8 9'\n\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n2 4 5 8\n9''') == '''2\n4\n5\n8\n9'''\nassert solution('''4\n2 4 5 8\n9''') == '''2\n4\n5\n8\n9'''\nassert solution('''5\n2 4 5 8\n9''') == '''2\n4\n5\n8\n9'''\nassert solution('''5\n2 4 5 8\n9''') == '''2\n4\n5\n8\n9'''\nassert solution('''6\n1 3 5 8\n10''') == '''1\n3\n5\n8\n9\n10'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 5 5\") == \"5 4\"\nassert solution(\"6 4 3 2\") == \"3 2\"\n\n>>>>>>> edeccddeeeb6524ac07f0e7e5d1a4f8e36da66f6b\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 3\\n3 3\") == \"2 1\\n3 3\"\nassert solution(\"4 4\\n2 2\\n2 2\\n2 2\") == \"1 1\\n2 3\"\n\n=====Sample Input=====\n5 4\n1 2 3 4 5\n5 1 2 3 4\n5 5 1 2 3 4\n5 5 1 1 2 3 4\n5 5 1 5 2 3 4\n=====Sample Output=====\n1 2 3 4 5\n1 2 5 4 3\n1 5 2 3 4 4\n1 5 5 1 1 2 3 4\n1 5 5 5 5 1 1 1 2 3 4"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\nA,2,3,4,5\\n1,2,3,4,5\\n6,7,8,9,10\\n6,7,8,9,10\\n\") == \"2.5\"\nassert solution(\"2\\nA,2,3,4,5\\n1,2,3,4,5\\n6,7,8,9,10\\n6,7,8,9,10\\n\") == \"3.0\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nA B C\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '3.14'\n=====Sample Test Case=====\nInput\n\nOutput\n\nExplanation\n\nTest Case 1\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 2\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 3\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 4\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 5\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 6\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 7\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 8\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 9\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 10\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 11\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 12\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 13\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 14\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 15\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 16\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 17\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 18\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 19\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 20\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 21\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 22\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 23\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 24\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 25\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 26\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 27\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 28\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 29\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 30\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 31\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 32\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 33\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 34\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 35\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 36\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 37\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 38\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 39\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 40\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 41\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 42\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 43\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 44\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 45\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 46\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 47\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 48\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 49\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 50\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 51\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 52\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 53\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 54\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 55\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 56\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 57\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 58\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 59\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 60\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 61\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 62\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 63\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 64\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 65\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 66\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 67\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 68\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 69\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 70\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 71\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 72\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 73\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 74\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 75\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 76\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 77\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 78\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 79\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 80\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 81\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 82\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 83\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 84\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 85\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 86\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 87\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 88\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 89\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 90\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 91\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 92\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 93\n\nInput\n\nOutput\n\nExplanation\n\nTest Case 94\n\nInput\n\nOutput\n\nExplanation"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2.91\"\n'''"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\nID,MARKS,CLASS,NAME\\n1001,67,2nd,John\\n1002,98,2nd,James\\n1003,76,3rd,Henry\\n1004,89,3rd,Peter\\n\") == \"89.86\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n2\\nabcd\\n1234\\nabcd\\n') == '2.00'\n=====Sample Test Cases=====\nInput\n\nOutput\n\nOutput\n\nTest Case 1\n\nInput\n\nOutput\n\nTest Case 2\n\nInput\n\nOutput\n\nTest Case 3\n\nInput\n\nOutput\n\nTest Case 4\n\nInput\n\nOutput\n\nTest Case 5\n\nInput\n\nOutput\n\nTest Case 6\n\nInput\n\nOutput\n\nTest Case 7\n\nInput\n\nOutput\n\nTest Case 8\n\nInput\n\nOutput\n\nTest Case 9\n\nInput\n\nOutput\n\nTest Case 10\n\nInput\n\nOutput\n\nTest Case 11\n\nInput\n\nOutput\n\nTest Case 12\n\nInput\n\nOutput\n\nTest Case 13\n\nInput\n\nOutput\n\nTest Case 14\n\nInput\n\nOutput\n\nTest Case 15\n\nInput\n\nOutput\n\nTest Case 16\n\nInput\n\nOutput\n\nTest Case 17\n\nInput\n\nOutput\n\nTest Case 18\n\nInput\n\nOutput\n\nTest Case 19\n\nInput\n\nOutput\n\nTest Case 20\n\nInput\n\nOutput\n\nTest Case 21\n\nInput\n\nOutput\n\nTest Case 22\n\nInput\n\nOutput\n\nTest Case 23\n\nInput\n\nOutput\n\nTest Case 24\n\nInput\n\nOutput\n\nTest Case 25\n\nInput\n\nOutput\n\nTest Case 26\n\nInput\n\nOutput\n\nTest Case 27\n\nInput\n\nOutput\n\nTest Case 28\n\nInput\n\nOutput\n\nTest Case 29\n\nInput\n\nOutput\n\nTest Case 30\n\nInput\n\nOutput\n\nTest Case 31\n\nInput\n\nOutput\n\nTest Case 32\n\nInput\n\nOutput\n\nTest Case 33\n\nInput\n\nOutput\n\nTest Case 34\n\nInput\n\nOutput\n\nTest Case 35\n\nInput\n\nOutput\n\nTest Case 36\n\nInput\n\nOutput\n\nTest Case 37\n\nInput\n\nOutput\n\nTest Case 38\n\nInput\n\nOutput\n\nTest Case 39\n\nInput\n\nOutput\n\nTest Case 40\n\nInput\n\nOutput\n\nTest Case 41\n\nInput\n\nOutput\n\nTest Case 42\n\nInput\n\nOutput\n\nTest Case 43\n\nInput\n\nOutput\n\nTest Case 44\n\nInput\n\nOutput\n\nTest Case 45\n\nInput\n\nOutput\n\nTest Case 46\n\nInput\n\nOutput\n\nTest Case 47\n\nInput\n\nOutput\n\nTest Case 48\n\nInput\n\nOutput\n\nTest Case 49\n\nInput\n\nOutput\n\nTest Case 50\n\nInput\n\nOutput\n\nTest Case 51\n\nInput\n\nOutput\n\nTest Case 52\n\nInput\n\nOutput\n\nTest Case 53\n\nInput\n\nOutput\n\nTest Case 54\n\nInput\n\nOutput\n\nTest Case 55\n\nInput\n\nOutput\n\nTest Case 56\n\nInput\n\nOutput\n\nTest Case 57\n\nInput\n\nOutput\n\nTest Case 58\n\nInput\n\nOutput\n\nTest Case 59\n\nInput\n\nOutput\n\nTest Case 60\n\nInput\n\nOutput\n\nTest Case 61\n\nInput\n\nOutput\n\nTest Case 62\n\nInput\n\nOutput\n\nTest Case 63\n\nInput\n\nOutput\n\nTest Case 64\n\nInput\n\nOutput\n\nTest Case 65\n\nInput\n\nOutput\n\nTest Case 66\n\nInput\n\nOutput\n\nTest Case 67\n\nInput\n\nOutput\n\nTest Case 68\n\nInput\n\nOutput\n\nTest Case 69\n\nInput\n\nOutput\n\nTest Case 70\n\nInput\n\nOutput\n\nTest Case 71\n\nInput\n\nOutput\n\nTest Case 72\n\nInput\n\nOutput\n\nTest Case 73\n\nInput\n\nOutput\n\nTest Case 74\n\nInput\n\nOutput\n\nTest Case 75\n\nInput\n\nOutput\n\nTest Case 76\n\nInput\n\nOutput\n\nTest Case 77\n\nInput\n\nOutput\n\nTest Case 78\n\nInput\n\nOutput\n\nTest Case 79\n\nInput\n\nOutput\n\nTest Case 80\n\nInput\n\nOutput\n\nTest Case 81\n\nInput\n\nOutput\n\nTest Case 82\n\nInput\n\nOutput\n\nTest Case 83\n\nInput\n\nOutput\n\nTest Case 84\n\nInput\n\nOutput\n\nTest Case 85\n\nInput\n\nOutput\n\nTest Case 86\n\nInput\n\nOutput\n\nTest Case 87\n\nInput\n\nOutput\n\nTest Case 88\n\nInput\n\nOutput\n\nTest Case 89\n\nInput\n\nOutput\n\nTest Case 90\n\nInput\n\nOutput\n\nTest Case 91\n\nInput\n\nOutput\n\nTest Case 92\n\nInput\n\nOutput\n\nTest Case 93\n\nInput\n\nOutput\n\nTest Case 94\n\nInput\n\nOutput\n\nTest Case 95\n\nInput\n\nOutput\n\nTest Case 96\n\nInput\n\nOutput\n\nTest Case 97\n\nInput\n\nOutput\n\nTest Case 98\n\nInput\n\nOutput\n\nTest Case 99\n\nInput\n\nOutput\n\nTest Case 100\n\nInput\n\nOutput\n\nTest Case 101\n\nInput\n\nOutput\n\nTest Case 102\n\nInput\n\nOutput\n\nTest Case 103\n\nInput\n\nOutput\n\nTest Case 104\n\nInput\n\nOutput\n\nTest Case 105\n\nInput\n\nOutput\n\nTest Case 106\n\nInput\n\nOutput\n\nTest Case 107\n\nInput\n\nOutput\n\nTest Case 108\n\nInput\n\nOutput\n\nTest Case 109\n\nInput\n\nOutput\n\nTest Case 110\n\nInput\n\nOutput\n\nTest Case 111\n\nInput\n\nOutput\n\nTest Case 112\n\nInput\n\nOutput\n\nTest Case 113\n\nInput\n\nOutput\n\nTest Case 114\n\nInput\n\nOutput\n\nTest Case 115\n\nInput\n\nOutput\n\nTest Case 116\n\nInput\n\nOutput\n\nTest Case 117\n\nInput\n\nOutput\n\nTest Case 118\n\nInput\n\nOutput\n\nTest Case 119\n\nInput\n\nOutput\n\nTest Case 120\n\nInput\n\nOutput\n\nTest Case 121\n\nInput\n\nOutput\n\nTest Case 122\n\nInput\n\nOutput\n\nTest Case 123\n\nInput\n\nOutput\n\nTest Case 124\n\nInput\n\nOutput\n\nTest Case 125\n\nInput\n\nOutput\n\nTest Case 126\n\nInput\n\nOutput\n\nTest Case 127\n\nInput\n\nOutput\n\nTest Case 128\n\nInput\n\nOutput\n\nTest Case 129\n\nInput\n\nOutput\n\nTest Case 130\n\nInput\n\nOutput\n\nTest Case 131\n\nInput\n\nOutput\n\nTest Case 132\n\nInput\n\nOutput\n\nTest Case 133\n\nInput\n\nOutput\n\nTest Case 134\n\nInput\n\nOutput\n\nTest Case 135\n\nInput\n\nOutput\n\nTest Case 136\n\nInput\n\nOutput\n\nTest Case 137\n\nInput\n\nOutput\n\nTest Case 138\n\nInput"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1 2 3 4 5\\n1 2 3 4\") == \"3.00\"\nassert solution(\"1\\n3 2\\n2 3\\n4 5\\n5 6\\n6 7\\n8 9\") == \"5.00\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\\nID,MARKS,CLASS,NAME\\n1,91,A,John\\n2,92,A,Mary\\n3,93,B,Isla\\n4,94,B,Sam\\n5,95,A,Jony\\n6,96,C,Bear\\n7,97,C,Bunny\\n8,98,A,Greg\\n9,99,A,Sam\\n10,100,B,Jony\") == \"94.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\nID    MARKS    NAME    CLASS\n1    56      Raymond    7\n2    78      Jaden      9\n3    76      Mitchell    9\n4    56      Yves      10\n5    42      Graham    7 ''') == '71.18'\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\nA B C\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == \"2.67\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"2.20\"\n\n=====Sample Input=====\n4\nID    MARKS    NAME    CLASS\n1    97  Sambhar  12B  \n2    75  Sambhar  12B  \n3    96  Sambhar  12B  \n4    91  Sambhar  12B\nSample Output\n2.20\n\n\n'''"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\""
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"21\") == \"Weird\"\nassert solution(\"24\") == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n4''') == 'Not Weird'\nassert solution('''6\n5''') == 'Not Weird'\nassert solution('''1\n3''') == 'Not Weird'\nassert solution('''20\n19\n18''') == 'Not Weird'\nassert solution('''14\n6\n1''') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(11) == 'Weird'\nassert solution(0) == 'Not Weird'\nassert solution(1) == 'Weird'\n\"\"\""
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(1) == \"Not Weird\"\nassert solution(2) == \"Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Weird'\nassert solution(input()) == 'Not Weird'\n=====Test cases=====\nInput:\n3\nOutput:\nWeird\n\nInput:\n6\nOutput:\nWeird\n\nInput:\n21\nOutput:\nWeird\n\n=====Code=====\nx=int(input())\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"5\") == \"Weird\"\nassert solution(\"6\") == \"Not Weird\"\nassert solution(\"10\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'Not Weird', 'n should be 4 or greater'\nassert solution('6') == 'Weird', 'n should be 5 or less'\nassert solution('20') == 'Not Weird', 'n should be 20 or greater'\nassert solution('1') == 'Weird', 'n should be 1 or less'\nassert solution('9') == 'Not Weird', 'n should be 9 or greater'"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == 'Not Weird'\nassert solution('20') == 'Weird'\nassert solution('1') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Weird\"\n=====Sample Input&Output=====\n>>> solution('''1\n>>> )\nWeird\n\n>>> solution('''2\n>>> )\nWeird\n\n>>> solution('''13\n>>> )\nWeird\n\n>>> solution('''5\n>>> )\nNot Weird\n\n>>> solution('''21\n>>> )\nWeird\n\n>>> solution('''50\n>>> )\nNot Weird\n\n>>> solution('''80\n>>> )\nWeird\n\n>>> solution('''400\n>>> )\nNot Weird\n\n>>> solution('''1000\n>>> )\nWeird\n\n>>> solution('''10000\n>>> )\nNot Weird\n\n''')\nWeird\n\n>>> solution('''1\n>>> )\nWeird\n\n>>> solution('''13\n>>> )\nWeird\n\n>>> solution('''5\n>>> )\nNot Weird\n\n>>> solution('''21\n>>> )\nWeird\n\n>>> solution('''50\n>>> )\nNot Weird\n\n>>> solution('''80\n>>> )\nWeird\n\n>>> solution('''400\n>>> )\nNot Weird\n\n>>> solution('''1000\n>>> )\nWeird\n\n>>> solution('''10000\n>>> )\nNot Weird\n\n''')\nWeird\n\n'''\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('<feed xml:lang=\"en\">\\n<title>XML Developer\\'s Guide</title>\\n<subtitle lang=\"en\">Tutorial for XML Developer\\'s Guide</subtitle>\\n<link rel=\"alternate\" href=\"http://www.w3schools.com/xml/\"/>\\n</feed>') == \"5\"\nassert solution('<feed xml:lang=\"en\">\\n<title>XML Developer\\'s Guide</title>\\n<subtitle lang=\"en\">Tutorial for XML Developer\\'s Guide</subtitle>\\n<link rel=\"alternate\" href=\"http://www.w3schools.com/xml/\"/>\\n</feed>') == \"6\"\nassert solution('<feed xml:lang=\"en\">\\n<title>XML Developer\\'s Guide</title>\\n<subtitle lang=\"en\">Tutorial for XML Developer\\'s Guide</subtitle>\\n<link rel=\"alternate\" href=\"http://www.w3schools.com/xml/\"/>\\n</feed>') == \"0\"\n=====Test Case 2: Valid XML document - 10 lines of code\n>>>>>>> 937a29d75acb7d9f7db9c6f0b9b62a3411c1b9\n>>>>>>> 8a05d58b4e1f1d5dae81c2621b9417b8a2b1b7\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '4'"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"<head><title>Solution</title></head>\") == \"1\"\nassert solution(\"<feed xml:lang='en'>\\n<title>Spam</title>\\n<title>Eggs</title>\\n</feed>\") == \"4\"\n\n=======================================================================================================================\n3. Write a Python program to create a histogram from a given list of integers.\nSample Data: [1, 2, 3, 4, 5, 1]\nExpected Result:\n1: 1\n2: 1\n3: 1\n4: 1\n5: 1\n6: 0\n7: 0\n8: 0\n9: 0\n10: 0\n11: 0\n12: 0\n13: 0\n14: 0\n15: 0\n16: 0\n17: 0\n18: 0\n19: 0\n20: 0\n21: 0\n22: 0\n23: 0\n24: 0\n25: 0\n26: 0\n27: 0\n28: 0\n29: 0\n30: 0\n31: 0\n32: 0\n33: 0\n34: 0\n35: 0\n36: 0\n37: 0\n38: 0\n39: 0\n40: 0\n41: 0\n42: 0\n43: 0\n44: 0\n45: 0\n46: 0\n47: 0\n48: 0\n49: 0\n50: 0\n51: 0\n52: 0\n53: 0\n54: 0\n55: 0\n56: 0\n57: 0\n58: 0\n59: 0\n60: 0\n61: 0\n62: 0\n63: 0\n64: 0\n65: 0\n66: 0\n67: 0\n68: 0\n69: 0\n70: 0\n71: 0\n72: 0\n73: 0\n74: 0\n75: 0\n76: 0\n77: 0\n78: 0\n79: 0\n80: 0\n81: 0\n82: 0\n83: 0\n84: 0\n85: 0\n86: 0\n87: 0\n88: 0\n89: 0\n90: 0\n91: 0\n92: 0\n93: 0\n94: 0\n95: 0\n96: 0\n97: 0\n98: 0\n99: 0\n100: 0\n101: 0\n102: 0\n103: 0\n104: 0\n105: 0\n106: 0\n107: 0\n108: 0\n109: 0\n110: 0\n111: 0\n112: 0\n113: 0\n114: 0\n115: 0\n116: 0\n117: 0\n118: 0\n119: 0\n120: 0\n121: 0\n122: 0\n123: 0\n124: 0\n125: 0\n126: 0\n127: 0\n128: 0\n129: 0\n130: 0\n131: 0\n132: 0\n133: 0\n134: 0\n135: 0\n136: 0\n137: 0\n138: 0\n139: 0\n140: 0\n141: 0\n142: 0\n143: 0\n144: 0\n145: 0\n146: 0\n147: 0\n148: 0\n149: 0\n150: 0\n151: 0\n152: 0\n153: 0\n154: 0\n155: 0\n156: 0\n157: 0\n158: 0\n159: 0\n160: 0\n161: 0\n162: 0\n163: 0\n164: 0\n165: 0\n166: 0\n167: 0\n168: 0\n169: 0\n170: 0\n171: 0\n172: 0\n173: 0\n174: 0\n175: 0\n176: 0\n177: 0\n178: 0\n179: 0\n180: 0\n181: 0\n182: 0\n183: 0\n184: 0\n185: 0\n186: 0\n187: 0\n188: 0\n189: 0\n190: 0\n191: 0\n192: 0\n193: 0\n194: 0\n195: 0\n196: 0\n197: 0\n198: 0\n199: 0\n200: 0\n201: 0\n202: 0\n203: 0\n204: 0\n205: 0\n206: 0\n207: 0\n208: 0\n209: 0\n210: 0\n211: 0\n212: 0\n213: 0\n214: 0\n215: 0\n216: 0\n217: 0\n218: 0\n219: 0\n220: 0\n221: 0\n222: 0\n223: 0\n224: 0\n225: 0\n226: 0\n227: 0\n228: 0\n229: 0\n230: 0\n231: 0\n232: 0\n233: 0\n234: 0\n235: 0\n236: 0\n237: 0\n238: 0\n239: 0\n240: 0\n241: 0\n242: 0\n243: 0\n244: 0\n245: 0\n246: 0\n247: 0\n248: 0\n249: 0\n250: 0\n251: 0\n252: 0\n253: 0\n254: 0\n255: 0\n256: 0\n257: 0\n258: 0\n259: 0\n260: 0\n261: 0\n262: 0\n263: 0\n264: 0\n265: 0\n266: 0\n267: 0\n268: 0\n269: 0\n270: 0\n271: 0\n272: 0\n273: 0\n274: 0\n275: 0\n276: 0\n277: 0\n278: 0\n279: 0\n280: 0\n281: 0\n282: 0\n283: 0\n284: 0\n285: 0\n286: 0\n287: 0\n288: 0\n289: 0\n290: 0\n291: 0\n292: 0\n293: 0\n294: 0\n295: 0\n296: 0\n297: 0\n298: 0\n299: 0\n300: 0\n301: 0\n302: 0\n303: 0\n304: 0\n305: 0\n306: 0\n307: 0\n308: 0\n309: 0\n310: 0\n311: 0\n312: 0\n313: 0\n314: 0\n315: 0\n316: 0\n317: 0\n318: 0\n319: 0\n320: 0\n321: 0\n322: 0\n323: 0\n324: 0\n325: 0\n326: 0\n327: 0\n328: 0\n329: 0\n330: 0\n331: 0\n332: 0\n333: 0\n334: 0\n335: 0\n336: 0\n337: 0\n338: 0\n339: 0\n340: 0\n341: 0\n342: 0\n343: 0\n344: 0\n345: 0\n346: 0\n347: 0\n348: 0\n349: 0\n350: 0\n351: 0\n352: 0\n353: 0\n354: 0\n355: 0\n356: 0\n357: 0\n358: 0\n359: 0\n360: 0\n361: 0\n362: 0\n363: 0\n364: 0\n365: 0\n366: 0\n367: 0\n368: 0\n369: 0\n370: 0\n371: 0\n372: 0\n373: 0\n374: 0\n375: 0\n376: 0\n377: 0\n378: 0\n379: 0\n380: 0\n381: 0\n382: 0\n383: 0\n384: 0\n385: 0\n386: 0\n387: 0\n388: 0\n389: 0\n390: 0\n391: 0\n392: 0\n393: 0\n394: 0\n395: 0\n396: 0\n397: 0\n398: 0\n399: 0\n400: 0\n401: 0\n402: 0\n403: 0\n404: 0\n405: 0\n406: 0\n407: 0\n408: 0\n409: 0\n410: 0\n411: 0\n412: 0\n413: 0\n414: 0\n415: 0\n416: 0\n417: 0\n418: 0\n419: 0\n420: 0\n421: 0\n422: 0\n423: 0\n424: 0\n425: 0\n426: 0\n427: 0\n428: 0\n429: 0\n430: 0\n431: 0\n432: 0\n433: 0\n434: 0\n435: 0\n436: 0\n437: 0\n438: 0\n439: 0\n440: 0\n441: 0\n442: 0\n443: 0\n444: 0\n445: 0\n446: 0\n447: 0\n448: 0\n449: 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == \"9\"\n\nprint(solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\"), \"9\")\n=====Explanation=====\n'''\n    Here, we are finding the total number of attributes for each node. \n    Then, calculating the score by multiplying that total number with each node. \n    At the end, returning the score.\n'''\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n<greeting>Hello!</greeting>\\n<greeting>Hi!</greeting>\\n<greeting>Greetings!</greeting>\\n<greeting>Hello everyone!</greeting>\\n') == 6\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '73.72', 'incorrect'\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '73.72', 'incorrect'\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == '73.72', 'incorrect'\n''')"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorial showing the use of basic XML tags</subtitle>\n<rights>Copyright &copy; 1999\u20132005 The XML Developer's Manual on XML.</rights>\n<feedback>No feedback at this point</feedback>\n</feed>\"\"\") == \"76\""
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\"\"\") == \"3\"\nassert solution(\"\"\"\n<feed xml:lang='en'>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\"\"\") == \"6\"\nassert solution(\"\"\"\n<feed xml:lang='en'>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\"\"\") == \"9\"\nassert solution(\"\"\"\n<feed xml:lang='en'>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\n<title>Document</title>\n<subtitle lang='en'>Of Mango</subtitle>\n<description lang='en'>Mango pie</description>\n</feed>\"\"\") == \"11\"\n=====Solution Explanation=====\n\n\"\"\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"<head><title>XML 1</title></head>\") == \"2\", \"First\"\nassert solution(\"<head><title>XML 2</title></head>\") == \"2\", \"Second\"\nassert solution(\"<head><title>XML 3</title></head>\") == \"3\", \"Third\"\nassert solution(\"<head><title>XML 4</title></head>\") == \"4\", \"Fourth\"\nassert solution(\"<head><title>XML 5</title></head>\") == \"5\", \"Fifth\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n<feed xml:lang='en'>\n    <title>XML Developer's Guide</title>\n    <subtitle lang='en'>A tutorial showing the use of XML</subtitle>\n    <link rel='alternate' href='http://www.xml.com/'/>\n    <updated>2006-01-28T13:00:00</updated>\n</feed>\n''') == '73'\n'''\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3.0 4.0 5.0 1.0 2.0') == '60.0'\nassert solution('1.5 1.5 2.0 3.0 4.0') == '45.0'\nassert solution('3.0 5.0 5.0 3.0') == '60.0'\nassert solution('0.0 1.0 2.0 3.0') == '60.0'\nassert solution('-1.0 1.0 2.0 3.0') == '60.0'\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2.7 3.7 3.1 -4.6\") == '67.79'\nassert solution(\"-4.6 -2.7 -3.1 3.7\") == '90.0'\n\nprint(solution(input()))\n\nprint(solution(input()))\n\nsolution(\"2.7 3.7 3.1 -4.6\")\nsolution(-4.6 -2.7 -3.1 3.7)\n\n\n\n=====Explanation=====\n===========================\nhttps://www.hackerrank.com/challenges/3d-vector/problem?isFullScreen=true\n\n=====Code=====\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0.00 0.00 0.00\n0.00 0.00 0.00''') == '90.00'\nassert solution('''0.00 1.00 0.00\n0.00 0.00 0.00''') == '180.00'\nassert solution('''0.00 0.00 1.00\n0.00 0.00 0.00''') == '90.00'\nassert solution('''0.00 0.00 0.00\n0.00 1.00 0.00''') == '180.00'\nassert solution('''0.00 0.00 0.00\n0.00 0.00 1.00''') == '90.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 0 0\n0 0 0\n0 1 0''') == '90.00'\nassert solution('''0 0 1\n0 0 0\n0 1 0''') == '45.00'\nassert solution('''0 1 0\n0 0 0\n0 1 0''') == '45.00'\nassert solution('''0 0 -1\n0 0 0\n0 1 0''') == '90.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(' 0.0 0.0 0.0 0.0') == '180.00'\n=====Test Case 2>>>>>>>\nInput\n0 0\n0 1\n1 0\nOutput\n180.00\n>>>>>>> Test Case 3\nInput\n0 0\n0 0\n1 0\nOutput\n90.00\n>>>>>>> Test Case 4\nInput\n0 0\n0 1\n-1 0\nOutput\n45.00\n>>>>>>> Test Case 5\nInput\n0 0\n1 1\n0 0\nOutput\n30.00\n\n>>>>>>> Test Case 6\nInput\n0 0\n1 1\n1 1\nOutput\n45.00\n\n>>>>>>> Test Case 7\nInput\n0 0\n0 1\n0 1\nOutput\n45.00\n\n>>>>>>> Test Case 8\nInput\n0 0\n0 1\n1 1\nOutput\n45.00\n\n>>>>>>> Test Case 9\nInput\n0 0\n0 1\n-1 1\nOutput\n30.00\n\n>>>>>>> Test Case 10\nInput\n0 0\n0 -1\n1 0\nOutput\n0.00\n\n>>>>>>> Test Case 11\nInput\n0 0\n1 1\n-1 1\nOutput\n0.00\n\n>>>>>>> Test Case 12\nInput\n0 0\n0 1\n0 1\nOutput\n45.00\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.0 1.0 1.0 1.0') == '90.0'\nassert solution('0.0 0.0 1.0 1.0') == '0.0'\n'''\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10.2 90 90 90.8') == '45.0'\nassert solution('20.3 11.8 29.7') == '97.3'\nassert solution('-10.2 90 90 90.8') == '-45.0'\nassert solution('20.3 11.8 29.7') == '97.3'\n\n=====Test Cases=====\nInput\nOutput\n\n================== RESTART: Shell =====================\n=====Problem Statement=====\nYou are given four points A, B, C and D in a 3-dimensional Cartesian coordinate system. You are required to print the angle between the plane made by the points A, B, C and B, C, D in degrees(not radians). Let the angle be PHI.\nCos(PHI) = (X.Y)/|X|Y| where X = AB x BC and Y = BC x CD.\nHere, X.Y means the dot product of X and Y, and AB x BC means the cross product of vectors AB and BC. Also, AB = B-A.\n\n=====Input Format=====\nOne line of input containing the space separated floating number values of the and coordinates of a point.\n\n=====Output Format=====\nOutput the angle correct up to two decimal places.\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10.0 11.0 -10.0 -10.0\") == \"180\"\nassert solution(\"0.0 0.0 0.0 0.0\") == \"0\""
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.0 0.0 0.0 1.0') == '60.0'\nassert solution('-1.0 0.0 0.0 -1.0') == '360.0'\nassert solution('0.1 0.0 0.0 -0.1') == '120.0'\nassert solution('0.0 0.1 0.0 -0.1') == '180.0'\nassert solution('0.0 0.0 -0.1 0.1') == '360.0'\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0\") == \"90.00\"\nassert solution(\"1 1 0 1\") == \"90.00\"\nassert solution(\"0 1 0 1\") == \"90.00\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4 5 3 2 1') == '4'\nassert solution('2 1 4 3 5') == '2'\n'''\n\n\nfrom itertools import combinations"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\neven\\nabcd\") == \"2\"\nassert solution(\"2\\nodd\\nabcd\") == \"1\"\nassert solution(\"2\\nodd\\nghi\") == \"0\"\n\n'''\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == 3\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\nHi') == '2'\nassert solution('4\\ncat dog fish') == '2'\nassert solution('5\\n') == '1'\nassert solution('5\\ncat') == '2'\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\neven\\nnine\\none\\none\\none\\none\\neven\\nnine\\none\\one\") == 2"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\nefli\\nfoofo') == 2\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == 2\nassert solution(\"1 2 1 2\") == 3\nassert solution(\"1 2 e 2\") == 2"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '0'\nFor example, a list of words with vowels and consonants is passed to the code. For the first word, the score will be 2 because there are 2 vowels. The score for the second word is 1 because there are 1 vowel and 1 consonant. The score for the third word is 1 because there are 1 vowel and 1 consonant. The sum of the scores is 5.\n\n=====Sample Input=====\n2\nthis is a sample\nword\n\n=====Sample Output=====\n5\n1\n1\n0\n'''\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 a 4\") == \"2\", \"Second test case\"\nassert solution(\"3 5 a 4 b 2\") == \"3\", \"Third test case\"\n=====Solution=====\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 words\") == \"3 1 1 1 1\"\nassert solution(\"2 words\") == \"2 1\"\n\n=====Sample Test Cases=====\nInput\nOutput\n\nInput\n5\nhappy\nbus\nalive\njoy\ngene\n\nOutput\n3 1 1 1 1\n3 1\n\nExplanation\nTest Case 1:\nAll 5 words are of even length. We set the score to 3 for each word, so the sum is 3 + 1 + 1 + 1 + 1 = 6.\nTest Case 2:\nAll 5 words are of odd length. We set the score to 1 for each word, so the sum is 1 + 1 + 1 + 1 + 1 = 6.\n'''"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('X') == True\nassert solution('XI') == True\nassert solution('XII') == True\nassert solution('XIII') == True\nassert solution('XIV') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"MCMXCIV\") == \"True\"\nassert solution(\"MMMCDXXXVII\") == \"True\"\nassert solution(\"DD\") == \"False\"\nassert solution(\"MMMCMXCIX\") == \"False\""
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"MMMCMXCIX\") == \"True\"\nassert solution(\"MMMCMXCIXI\") == \"True\"\nassert solution(\"MMMCMXCIXI\") == \"True\"\nassert solution(\"MMMCMXCIXI\") == \"True\"\nassert solution(\"MMMCMXCIXI\") == \"True\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('MCMXCIV') == True, \"Incorrect Solution\"\n=====Sample Input & Output=====\nInput\nMCMXCIV\nOutput\nTrue\nExplanation\nMCMXCIV, a valid Roman numeral, is equal to MMMXCIII.\n\n
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"X\") == True\nassert solution(\"VII\") == True\nassert solution(\"IX\") == False\nassert solution(\"MMMCMXCIX\") == True\nassert solution(\"MDCLXVI\") == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"True\"\nassert solution('V') == \"True\"\nassert solution('X') == \"False\"\nassert solution('XVII') == \"False\"\n=====Sample Test Case=====\nInput\n\"XVII\"\nOutput\nTrue\n\nInput\n\"X\"\nOutput\nFalse\n\nInput\n\"XIX\"\nOutput\nFalse\n\n=====Explanation=====\nX is the smallest integer and IX is X + 9. So, XVII is not a valid Roman numeral.\n\n'''\nimport re\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('XIX') == True\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('MMMDCCCLXXXVIII') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('X') == True, 'X should be True'\nassert solution('XI') == False, 'XI should be False'\nassert solution('I') == True, 'I should be True'\nassert solution('II') == False, 'II should be False'\nassert solution('V') == True, 'V should be True'\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('X') == True\nassert solution('V') == True\nassert solution('L') == True\nassert solution('XC') == True\nassert solution('C') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"X\") == True\nassert solution(\"VII\") == False\nassert solution(\"IX\") == False\nassert solution(\"MCMXCIV\") == True"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n91\\n81935268155\\n91\\n84621693821') == '+91 81935268155 84621693821'"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n+91 10086 10086\n+91 10022 10066\n+91 99876 10022\n+91 9000 86712\n\"\"\") == \\\n\"\"\"+91 99999 86712\n+91 99999 86712\n+91 99999 86712\n+91 99999 86712\n\"\"\".strip()\n\nassert solution(\"\"\"\n+91 9899 86712\n+91 9899 86712\n+91 9899 86712\n+91 9899 86712\n\"\"\") == \\\n\"\"\"+91 9899 86712\n+91 9899 86712\n+91 9899 86712\n+91 9899 86712\n\"\"\".strip()\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n+91 9876543210\\n\") == \"+91 9876543210\\n\", \"1st Test Case\"\nassert solution(\"2\\n+91 9876543210\\n+91 8763827142\\n\") == \"+91 9876543210\\n+91 8763827142\\n\", \"2nd Test Case\"\nassert solution(\"4\\n+91 9876543210\\n+91 8763827142\\n+91 8763827143\\n+91 0000000000\") == \"+91 9876543210\\n+91 8763827142\\n+91 8763827143\\n+91 0000000000\\n\", \"3rd Test Case\"\nassert solution(\"3\\n+91 987654321\\n+91 8763827142\\n+91 8763827143\") == \"+91 987654321\\n+91 8763827142\\n+91 8763827143\\n\", \"4th Test Case\"\nassert solution(\"5\\n+91 8763827142\\n+91 8763827143\\n+91 8763827142\") == \"+91 8763827142\\n+91 8763827143\\n+91 8763827142\\n\", \"5th Test Case\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n9212345678\\n3456789101112') == '+91 93212345678\\n+91 34567891011\\n+91 012 345678910\\n'\n\n\"\"\""
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(1) == \"+91 <test number>\"\nassert solution(2) == \"+91 <test number>\"\nassert solution(3) == \"+91 <test number>\"\nassert solution(4) == \"+91 <test number>\"\nassert solution(5) == \"+91 <test number>\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n''') == '''+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n+91 969 074 123\n'''\nprint('hello')\n'''"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n+91 99012345678\\n+91 99012345678\\n+91 99012345678\\n+91 99012345678\\n+91 99012345678\") == \"+91 99012345678\\n+91 99012345678\\n+91 99012345678\\n+91 99012345678\\n+91 99012345678\""
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n+91 9999999999\\n\") == \"1\\n+91 9999999999\\n\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n+91 123 456 789\n\"\"\") == \"+91 123 456 789\n\nassert solution(\"\"\"\n+91 456 789\n\"\"\") == \"+91 456 789\n\nassert solution(\"\"\"\n+91 123 456\n\"\"\") == \"+91 123 456\n\nassert solution(\"\"\"\n+91 456\n\"\"\") == \"+91 456\n\nassert solution(\"\"\"\n+91\n\"\"\") == \"+91\n\n=====Sample Test Cases=====\nTestcase 1\n\nprint(solution(\"\"\"\n+91 123 456 789\n\"\"\") == \"+91 123 456 789\")\n\nTestcase 2\n\nprint(solution(\"\"\"\n+91 456 789\n\"\"\") == \"+91 456 789\")\n\nTestcase 3\n\nprint(solution(\"\"\"\n+91 123 456\n\"\"\") == \"+91 123 456\")\n\nTestcase 4\n\nprint(solution(\"\"\"\n+91 123\n\"\"\") == \"+91 123\")\n\n=====\nCode for working of this decorator is given below:\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n91 99577764\\n955 8888') == '+91 99577764\\n+91 8888\\n+91 888\\n+91 878\\n+91 877\\n+91 876\\n'\nassert solution('4\\n1\\n91 99577764\\n955 8888') == '+91 99577764\\n+91 8888\\n+91 877\\n+91 876\\n'\nassert solution('2\\n1\\n91 99577764\\n955 8888') == '+91 99577764\\n+91 8888\\n'\nassert solution('1\\n91 99577764') == '91 99577764\\n'"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nalpha 100\\nbeta 50\\ngamma 20') == '50.0'\nassert solution('5\\nalpha 100\\nbeta 50\\ngamma 20\\ndelta 60') == '60.0'\nassert solution('5\\nalpha 100\\nbeta 50\\ngamma 20\\ndelta 60\\necho 80') == '80.0'\nassert solution('5\\nalpha 100\\nbeta 50\\ngamma 20\\ndelta 60\\necho 80\\n') == '80.0'\nassert solution('5\\nalpha 100\\nbeta 50\\ngamma 20\\ndelta 60\\necho 80\\n') == '80.0'\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\nalpha 100\\nbeta 80\\nalpha\\nbeta\\n\") == \"50.0\"\nassert solution(\"2\\nHarsh 25\\nAnurag 26\\nShashank 27\\n\") == \"28.5\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nalpha 100\\nbeta 50 50 50\\ngamma 20 20 20\\nalpha\\nbeta\\n') == '50.00'\n=====Test Cases=====\nInput:\n5\nalpha 100\nbeta 50 50 50\ngamma 20 20 20\nalpha\nbeta\n\nOutput:\n50.00\nExpected: 50.00\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\nalpha 100\\nbeta 50\\nalpha\\nteta 100\") == \"50.0\"\n\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\nalpha 100\nalpha 90\nbeta 70\nbeta 100\nbeta 85''') == '85.00'\nassert solution('''3\nalpha 100\nbeta 70\nalpha 90''') == '70.00'\nassert solution('''5\nalpha 100\nbeta 100\ngamma 50\nalpha 90\nalpha 80''') == '65.67'\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '50.00'\nassert solution('3') == '33.33'\nassert solution('5') == '38.00'\nassert solution('10') == '55.00'\nassert solution('1') == '99.00'\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\nalpha 100\\nbeta 50\\nalpha\\nalpha') == '50.0'\nassert solution('3\\nalpha 100\\nbeta 50\\nalpha') == '50.00'\nassert solution('3\\nalpha 100\\nbeta 50\\nalpha') == '50.0'\nassert solution('3\\nalpha 100\\nbeta 50\\nalpha') == '50.0'\nassert solution('3\\nalpha 100\\nbeta 50\\nalpha') == '50.0'\n'''\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nalpha 100\\nbeta 80\\nalpha 80\\ngamma 75\\ndelta 60\\n') == \"80.00\"\nassert solution('5\\nalpha 100\\nbeta 80\\nalpha 80\\ngamma 75\\ndelta 60\\nquery_name') == \"80.00\"\n'''\n\nstdin = input()\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\nalpha 100\\nbeta 50\\nalpha\\nalpha\\n') == '50.00'\nprint('Average:', solution('3\\nalpha 100\\nbeta 50\\nalpha\\nalpha\\n'), end = '\\n')\n\n\n\n===============================================================================================\n\n===== Problem =====\nCreate a function that takes in an array of student names. In the first line, print the total number of students in the array.\nIn the next line, print the names of each student in the order they were read in.\nIn the next line, print the average of the marks obtained by the particular student correct to 2 decimal places.\n\n=====Input=====\n\n=====Output=====\n3\nalpha 100\nbeta 50\n50.00\n\n=====Explanation=====\nThe input is:\nalpha 100\nbeta 50\nalpha\nalpha\nalpha\nThe output is:\n3\nalpha\n50.00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=========================================\n\n\n\nclass Solution:\n    def averageMarks(self, arr):\n        student_num = len(arr)\n        average = 0\n        for student in arr:\n            marks = float(student.split()[1])\n            average += marks\n        return \"%.2f\" % (average / student_num)\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nalpha 100\\nbeta 50\\nalpha\\nalpha\") == \"50.0\"\nassert solution(\"2\\nbeta 100\\nalpha 50\\nalpha\\nbeta\") == \"50.0\"\nassert solution(\"3\\nalpha 100\\nbeta 50\\nalpha\") == \"0.5\"\n\nassert solution(\"1\\n1\\n2\\n4\\n\") == \"1.0\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\nAlice 30 F\nBob 20 M\nCharlie 20 M\n\"\"\") == \"\"\"\nAlice\nCharlie\nBob\n\"\"\"\nassert solution(\"\"\"\n4\nAlice 30 F\nBob 20 M\nCharlie 20 M\nDennis 30 M\n\"\"\") == \"\"\"\nAlice\nCharlie\nDennis\nBob\n\"\"\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\nHENRY\\nD DAVID\\nM\\n\") == \"Mr. HENRY\\nMs. DAVID\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nHari\\nHari\\nKrishna\\n\") == \"Krishna\\nHari\\nHari\\n\"\nassert solution(\"1\\na\\nb\\n\") == \"a\\nb\"\nassert solution(\"5\\na\\nb\\nc\\nd\\n\") == \"a\\nb\\nc\\nd\"\nassert solution(\"4\\na\\na\\na\\n\") == \"a\\na\\na\\n\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nAlice 20 F\\nBob 20 M\\nCathy 20 F\\nDavids 20 M\\nMark 20 M') == 'Davids 20 M\\nAlice 20 F\\nMark 20 M\\nCathy 20 F\\nBob 20 M'\n\n\n\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6\nMarry Benjamin Franklin\n69\nM\n''') == 'Mr. Benjamin Franklin\\nMs. Mary George'''\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n   Davids Henry\n   12\n   M''') == 'Mr. Henry Davids\\n'\nassert solution('''2\n   Davids Henry\n   12\n   M''') == 'Ms. Henry Davids\\n'\nassert solution('''3\n   Davids Henry\n   12\n   M''') == 'Mr. Henry Davids\\n'\nassert solution('''1\n   Davids Henry\n   12\n   M''') == 'Ms. Henry Davids\\n'\nassert solution('''5\n   Davids Henry\n   12\n   M\n   Gullivansen Michael\n   16\n   M''') == 'Ms. Michael Gullivansen Davids\\nMs. Gabriel Pellen Gullivansen\\nMs. John Allen Pellen\\nMs. William Gullivansen Davids\\nMs. Oliver Peacock\\n'\n''')\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(TEST) == correct_output"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\", \"Test 1 fail\"\nassert solution(\"1\\nM\\n1\\nM\") == \"Mr. M\\n\"\nassert solution(\"2\\nM\\n1\\nM\") == \"Ms. M\\nMs. M\\n\"\nassert solution(\"3\\nF\\n1\\nM\") == \"Ms. F\\nMs. F\\nMs. F\\n\"\nassert solution(\"4\\nM\\n1\\nM\") == \"Mr. M\\nMs. M\\nMs. M\\nMs. M\\n\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nJohn\\n20\\nM\") == \"Ms. John\\n\"\nassert solution(\"2\\nHarry\\n22\\nM\") == \"Ms. Harry\\n\"\nassert solution(\"5\\nHenry\\n23\\nM\") == \"Mr. Henry\\nMs. Henry\\n\"\nassert solution(\"10\\nHenry\\n24\\nM\") == \"Mr. Henry\\nMs. Henry\\nMs. Henry\\nMs. Henry\\nMs. Henry\\nMs. Henry\\nMs. Henry\\n\"\n\n=====Sample Test Cases=====\nInput\nOutput\n\n=====Test Case 1=====\nInput\n\nOutput\n\n=====Test Case 2=====\nInput\n\nOutput\n\n=====Test Case 3=====\nInput\n\nOutput\n\n=====Test Case 4=====\nInput\n\nOutput\n\n=====Test Case 5=====\nInput\n\nOutput\n\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\nBill G\\n18\\nM\\n') == 'Bill G\\n'\nassert solution('2\\nBill G\\n18\\nM\\nKate P\\n19\\nF\\n') == 'Bill G\\nKate P\\n'\nassert solution('3\\nBill G\\n18\\nM\\nKate P\\n19\\nF\\n') == 'Kate P\\nBill G\\n'\nassert solution('3\\nBill G\\n18\\nM\\nKate P\\n19\\nF\\n') == 'Kate P\\nBill G\\n'"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1,1,1,3]) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\nassert solution([1,1,1,2]) == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n\nassert solution([2,2,2,2]) == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n\nassert solution([2,2,2,3]) == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n\nassert solution([2,3,2,2]) == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n\n=====Output Format=====\nPrint a list of all permutations of [i,j,k] on separate lines, such that the sum of i+j+k is not equal to n.\n\nExample 1\n\nInput\n1 1 2 3\nOutput\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\nExample 2\n\nInput\n1 1 1 2\nOutput\n[[0,0,0,0],[0,0,0,1],[0,0,0,2],[0,0,1,0],[0,0,1,1],[0,0,1,2],[0,0,2,0],[0,0,2,1],[0,0,2,2],[0,1,0,0],[0,1,0,1],[0,1,0,2],[0,1,1,0],[0,1,1,1],[0,1,1,2],[0,1,2,0],[0,1,2,1],[0,1,2,2],[0,2,0,0],[0,2,0,1],[0,2,0,2],[0,2,1,0],[0,2,1,1],[0,2,1,2],[0,2,2,0],[0,2,2,1],[0,2,2,2]]\n\n=====Example Test Case=====\nTest 1\n\nInput\n1 1 1 2\nOutput\n[[0,0,0,0],[0,0,0,1],[0,0,0,2],[0,0,1,0],[0,0,1,1],[0,0,1,2],[0,0,2,0],[0,0,2,1],[0,0,2,2],[0,1,0,0],[0,1,0,1],[0,1,0,2],[0,1,1,0],[0,1,1,1],[0,1,1,2],[0,1,2,0],[0,1,2,1],[0,1,2,2],[0,2,0,0],[0,2,0,1],[0,2,0,2],[0,2,1,0],[0,2,1,1],[0,2,1,2],[0,2,2,0],[0,2,2,1],[0,2,2,2]]\n\nTest 2\n\nInput\n1 1 1 2\nOutput\n[[0,0,0,0],[0,0,0,1],[0,0,0,2],[0,0,1,0],[0,0,1,1],[0,0,1,2],[0,0,2,0],[0,0,2,1],[0,0,2,2],[0,1,0,0],[0,1,0,1],[0,1,0,2],[0,1,1,0],[0,1,1,1],[0,1,1,2],[0,1,2,0],[0,1,2,1],[0,1,2,2],[0,2,0,0],[0,2,0,1],[0,2,0,2],[0,2,1,0],[0,2,1,1],[0,2,1,2],[0,2,2,0],[0,2,2,1],[0,2,2,2]]\n\n=====Coding Exercise=====\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1, 1, 1, 3]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution([2, 2, 2, 5]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution([1, 1, 1, 4]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution([2, 2, 2, 6]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution([2, 2, 2, 8]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n===SAMPLE RUN===\nInput:\n1 1 1 3\nOutput:\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\nInput:\n2 2 2 5\nOutput:\n[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,2,0],[0,2,1],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\nInput:\n1 1 1 4\nOutput:\n[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,2,0],[0,2,1],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\nInput:\n2 2 2 6\nOutput:\n[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,2,0],[0,2,1],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\nInput:\n2 2 2 8\nOutput:\n[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,2,0],[0,2,1],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\n=======Submission=======\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 1, 2, 3]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution([1, 1, 2, 3, 4, 5]) == [[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 3, 1], [1, 3, 2], [1, 3, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 3, 1], [3, 3, 2], [3, 3, 3]]\nassert solution([5, 5, 5]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution([5, 4, 5]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution([5, 4, 4]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 1, 2, 3]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nassert solution([1, 1, 2, 2]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nassert solution([3, 4, 5, 6]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1],\n                                  [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [3, 0, 0], [3, 0, 1], [3, 1, 0], [3, 1, 1]]\n\n=====Output Format=====\nPrint an array of the elements that do not sum to n = 3\n\n>>>>>>> 1.1<<<<<\n>>>>>>> 2.1<<<<<\n>>>>>>> 3.1<<<<<\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 1\") == '[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]'\nassert solution(\"1 1 1 3\") == '[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]'\nassert solution(\"10 10 10 2\") == '[[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]'\n\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nassert solution('3 2 3 4') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [0, 3, 0], [0, 3, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 3, 0], [1, 3, 1], [1, 3, 2], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 3, 0], [2, 3, 1], [2, 3, 2], [3, 0, 0], [3, 0, 1], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 3, 0], [3, 3, 1], [3, 3, 2]]\n\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3 4''') == '[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]'\nassert solution('''1 2 3 4''') == '[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]'\nassert solution('''2 3 3 4''') == '''[[0,0,0],[1,0,0],[1,1,0],[0,1,0],[1,1,1],[0,2,0],[1,2,0],[1,2,1],[2,1,0],[2,2,0],[2,2,1],[2,3,0],[1,3,0],[1,3,1],[3,0,0],[3,0,1],[3,1,0],[3,1,1],[3,2,0],[3,2,1],[3,2,2],[3,3,0],[3,3,1],[3,3,2]]'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1\n2\n3\n''') == '''\n[\n    [0, 0, 0],\n    [0, 0, 1],\n    [0, 0, 2],\n    [0, 1, 0],\n    [0, 1, 1],\n    [0, 1, 2],\n    [1, 0, 0],\n    [1, 0, 1],\n    [1, 0, 2],\n    [1, 1, 0],\n    [1, 1, 1],\n    [1, 1, 2]\n]\n'''\nassert solution('''\n2\n2\n3\n4\n''') == '''\n[[0, 0, 0],\n [1, 0, 0],\n [0, 1, 0],\n [1, 1, 0],\n [0, 0, 1],\n [1, 0, 1],\n [0, 1, 1],\n [1, 1, 1],\n [0, 0, 2],\n [1, 0, 2],\n [0, 1, 2],\n [1, 1, 2],\n [0, 2, 0],\n [1, 2, 0],\n [0, 2, 1],\n [1, 2, 1],\n [0, 2, 2],\n [1, 2, 2]]\n'''\n=====Output=====\n[\n    [0, 0, 0],\n    [0, 0, 1],\n    [0, 0, 2],\n    [0, 1, 0],\n    [0, 1, 1],\n    [0, 1, 2],\n    [1, 0, 0],\n    [1, 0, 1],\n    [1, 0, 2],\n    [1, 1, 0],\n    [1, 1, 1],\n    [1, 1, 2],\n    [2, 0, 0],\n    [2, 0, 1],\n    [2, 0, 2],\n    [2, 1, 0],\n    [2, 1, 1],\n    [2, 1, 2],\n    [3, 0, 0],\n    [3, 0, 1],\n    [3, 0, 2],\n    [3, 1, 0],\n    [3, 1, 1],\n    [3, 1, 2],\n    [4, 0, 0],\n    [4, 0, 1],\n    [4, 0, 2],\n    [4, 1, 0],\n    [4, 1, 1],\n    [4, 1, 2]\n]\n\n\n>>>>>>> Stashed changes\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == sorted([[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!= n])\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n=====Output=====\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n\"\"\"\nfrom itertools import combinations\n\nx, y, z, n = map(int, input().split())\n\nprint(list(combinations(list(range(x+y+z)), 3)))\n\nfor i in range(x+y+z):\n    for j in range(x+y+z):\n        for k in range(x+y+z):\n            if (i+j+k)!= n:\n                print([i, j, k])"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 'C+D'\nassert solution('1 1') == '2+2i'\nassert solution('-1 +2i') == '-3+4i'\n\n=====Explanation=====\nC is 1\nD is 1\nThe output should be 2+2i\nC+D\nC-D\nC*D\nC/D\nmod(C)\nmod(D)\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1.2+3.4i') == '1.2+3.4i', \"Wrong Answer\"\nassert solution('0.3+4.5') == '0.3+4.5', \"Wrong Answer\"\n=====Solution=====\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4.5 - 5.6\") == \"4.59-4.61\"\n\"\"\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 + 1j\n-1 + 1j\n1 + -1j\n1 - -1j\n1 - 1j\n''') == '''1+1j\n1-1j\n1+-1j\n1-+1j\n1-1j\n'''\nassert solution('''-1 - -1j\n1 + 1j\n-1 - 1j\n1 + -1j\n1 + 1j\n''') == '''0+0j\n-1+1j\n-1-1j\n1+1j\n1+1j\n'''\nassert solution('''1 + 1j\n1 + -1j\n1 + 1j\n1 + -1j\n1 + 1j\n''') == '''1+1j\n1+-1j\n1+1j\n1+-1j\n1+1j\n'''\nassert solution('''1 + 1j\n1 + -1j\n1 + 1j\n1 + -1j\n1 + 1j\n''') == '''1+1j\n1+-1j\n1+1j\n1+-1j\n1+1j\n'''\nassert solution('''-1 - -1j\n1 + 1j\n-1 - 1j\n1 + -1j\n1 + 1j\n''') == '''0+0j\n-1+1j\n-1-1j\n1+1j\n1+1j\n'''\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1.1+1.2j') == '1.1+1.2j', \"Should be '1.1+1.2j'\"\nassert solution('0.0+0.0j') == '0.00+0.00j', \"Should be '0.00+0.00j'\"\nassert solution('2.2-2.2j') == '2.2-2.2j', \"Should be '2.2-2.2j'\"\nassert solution('1.1+1.2i') == '1.1+1.2i', \"Should be '1.1+1.2i'\"\nassert solution('-2.2-1.1i') == '-2.2-1.1i', \"Should be '-2.2-1.1i'\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"8.20 -1.00i\"\n\n\"\"\""
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1.1 + 2.2i\") == \"1.1 + 2.2i\"\nassert solution(\"1.1 - 2.2i\") == \"1.1 - 2.2i\"\nassert solution(\"1.1 * 2.2i\") == \"1.1 * 2.2i\"\nassert solution(\"1.1 / 2.2i\") == \"1.1 / 2.2i\"\nassert solution(\"1.1 + 2.2i\") == \"1.1 + 2.2i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"5.00+2.00i\"\nassert solution(\"-4 2\") == \"-5.00+2.00i\"\nassert solution(\"3+5i\") == \"6.00+5.00i\"\nassert solution(\"3-5i\") == \"-6.00-5.00i\"\nassert solution(\"-3+5i\") == \"-6.00-5.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1\n1 1\n2 2\n2 2\n3 3\n3 3''') == '1 2\\n1 2\\n1 3\\n1 3'\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"-2+1i\") == \"-1+2i\"\nassert solution(\"1+2i\") == \"1.00+2.00i\"\nassert solution(\"-1+2i\") == \"-1.00+2.00i\"\nassert solution(\"-1.00+2i\") == \"-1.00+2.00i\"\n\n=====Submission Guidelines=====\nSubmission is not required to run the code.\nSubmission of this code is preferred.\nThis task can be solved using 1 line of code.\n\nThe function should have a single parameter which is a string. The string parameter will be the value of the expression.\nThe expression is composed of non-decimal characters only.\nThe string contains only the characters and the operators +, -, * and /.\nThe expression is guaranteed to be valid.\n\n=====Example=====\nInput\n\nThe input can be any value as per the specification.\n\nOutput\n\nOutput the solution.\n\nNote: For this question, assume that the complex numbers are represented as \u00b1z.\n\n====Explanation=====\n\nTest Case 1\n\n+\n\nOutput\n\n1.00+0.00i\n\nTest Case 2\n\n-\n\nOutput\n\n-1.00+0.00i\n\nTest Case 3\n\n-1.00+2.00i\n\nOutput\n\n-1.00+2.00i\n\nTest Case 4\n\n1.00+2.00i\n\nOutput\n\n1.00+2.00i\n\n====Solution====="
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\""
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\", \"Odd positions extracted incorrectly\"\nassert solution(\"abc\") == \"xaybzc\", \"Even positions extracted incorrectly\"\nassert solution(\"xz\") == \"xaybzc\", \"Odd positions extracted incorrectly\"\nassert solution(\"yz\") == \"xaybzc\", \"Even positions extracted incorrectly\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('xyz\\nabc') == 'xaybzc'"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"xyz\\nabc\") == \"xaybzc\""
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('01B0') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('01B0') == '00'\nassert solution('01B') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('01B0') == '00'\n\n----------------------------------------\n##\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"01\") == \"00\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('01B0') == '00'\nassert solution('1B0') == '10'\nassert solution('0B0') == ''\n'''\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('01B0') == '00'\nassert solution('1B0') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"01B0\") == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"\") == \"\"\nassert solution(\"01\") == \"00\"\nassert solution(\"00\") == \"\"\nassert solution(\"0\") == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('01B0') == '00'\n\n\"\"\"\nfrom itertools import chain, product, zip_longest\nfrom operator import add"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '01B0') == '00'\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([5, 2, 1, 4, 3]) == \"4\""
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4\""
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n3 7 5\n''') == '4'\nassert solution('''\n5\n3 2 6 8 4\n''') == '5'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5, 2, 1, 5, 4, 3]) == 4\nassert solution([3, 5, 4, 5, 2, 5, 5, 4, 3, 5, 4, 3]) == 0\nassert solution([3, 3, 5, 2, 5, 2, 5, 3, 5, 5, 2, 5]) == 7\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1000000000\") == \"5000000000\"\nassert solution(\"100\") == \"0\""
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"6\"\nassert solution(\"15\") == \"9\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 2 3\") == \"2\"\nassert solution(\"2\\n1 4 5\") == \"5\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2 1 5 4 3\n''') == '4'\nassert solution('''\n3\n1 2 1\n''') == '3'\nassert solution('''\n5\n1 1 1 1 1\n''') == '2'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''aca\naccc\nca''') == 'A'\nassert solution('''aaaaa\naaaaa\naaaaa\naaaaa\naaaaa\naaaaa''') == 'A'\nassert solution('''acaa\naaaaa\naaaaa\naaaaa\naaaaa\naaaaa''') == 'B'\nassert solution('''acab\nacaa\nacaa\naaaaa\naaaaa\naaaaa''') == 'C'\nassert solution('''acbb\nacaa\naaaaa\naaaaa\naaaaa\naaaaa''') == 'A'\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"aca\\naccc\\nca\"\n) == \"A\""
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"B\"\nassert solution(\"ca\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'A'\nassert solution('ca') == 'C'\n\n----------------------------------------------------------------------------------------------------------\n\nAnother input example is given below:"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\""
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'C'\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'C'"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"B\"\nassert solution(\"ca\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'C'\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 1 7\") == \"NO\"\nassert solution(\"5 7 1\") == \"YES\"\n\"\"\"\n\nstdin = input()\nA = stdin.split(' ')[0]\nB = stdin.split(' ')[1]\nC = stdin.split(' ')[2]"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('2 5 7') == 'NO'\nassert solution('5 5 7 1 1 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"7 7 5\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\nassert solution(\"7 5 7\") == \"YES\"\nassert solution(\"5 5 7\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == \"YES\"\nassert solution('5 5 7') == \"YES\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"6 1 2\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('1 1 2') == 'NO'\nassert solution('2 3') == 'NO'\n'''\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 7\\n') == 'YES'\n\n------Explaination------\nIroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nIroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. \nThe three phrases are AB, AC and BA. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\nIf she can construct a Haiku by using each of the phrases once, print YES (case-sensitive). Otherwise, print NO.\n\n-----Solution-----\nA short version of the solution, which is written in the language of IROSYS, is given below."
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"YES\"\nassert solution(\"5 3 7\") == \"YES\"\nassert solution(\"2 2 5\") == \"NO\"\nassert solution(\"3 2 5\") == \"YES\"\nassert solution(\"4 2 5\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3') == 'YES'\nassert solution('5 5 7') == 'YES'\nassert solution('5 6 5') == 'NO'\nassert solution('1 2 3 4') == 'NO'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n''') == '11'\nassert solution('''1\n''') == '2'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '11'\nassert solution('10') == '101'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '11'\nassert solution('4') == '10'\nassert solution('3') == '8'\nassert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"3\") == \"8\"\nassert solution(\"4\") == \"8\"\nassert solution(\"10\") == \"69\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '11'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('5') == '7'\nassert solution('10') == '1277'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"11\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '11'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '6'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '12'\nassert solution('6') == '18'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '7'\nassert solution('4') == '12'\nassert solution('2') == '6'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"6\"\nassert solution(\"2\") == \"4\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3.4\") == \"7.2\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\\n2\\n\") == \"7\""
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '7'\nassert solution('4') == '7'\nassert solution('2') == '7'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '7'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n2\") == \"7\"\nassert solution(\"4\\n5\\n7\") == \"10\"\nassert solution(\"5\\n4\\n3\") == \"8\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 3\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '17'\nassert solution('''4\n1 2 3\n''') == '17'\nassert solution('''3\n1 2 3\n''') == '11'"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '11'\nassert solution('5') == '945'\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"6\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '11'\nprint(solution())\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"11\", solution(\"2\")\nassert solution(\"3\") == \"11\", solution(\"3\")"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"15\", \"Basic\"\nassert solution(\"2\") == \"2\", \"Basic\"\nassert solution(\"6\") == \"16\", \"Basic\"\n\nassert solution(\"6\") == \"16\", \"Extra\"\nassert solution(\"5\") == \"15\", \"Extra\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"11\"\nprint(solution(input()))"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"11\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"8\""
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '11'\nassert solution('2\\n1 2') == '2'\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 2 2\") == \"NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 3') == 'YES'\nassert solution('5 6 7') == 'NO'\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\""
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 3\") == \"YES\"\nassert solution(\"4 4 3\") == \"NO\"\nassert solution(\"3 3 2\") == \"NO\"\nassert solution(\"6 2 3\") == \"NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 3 1\") == \"NO\"\nassert solution(\"4 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"YES\", \"Test 1 failed\"\nassert solution(\"1 2 3\") == \"NO\", \"Test 2 failed\"\nassert solution(\"2 3 1\") == \"NO\", \"Test 3 failed\"\nassert solution(\"1 2 3\") == \"YES\", \"Test 4 failed\"\nassert solution(\"4 3 2\") == \"YES\", \"Test 5 failed\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3 2') == 'YES'\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3 2\n''') == 'YES'\nassert solution('''\n4 5 2\n''') == 'NO'\nassert solution('''\n6 3 2\n''') == 'YES'\n'''\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"5 3 11\\n2\") == \"40\"\nassert solution(\"5 3 11\\n3\") == \"33\"\nassert solution(\"5 3 11\\n4\") == \"24\"\nassert solution(\"5 3 11\\n5\") == \"50\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"5 3 11\\n2\") == \"30\"\nassert solution(\"5 3 11\\n3\") == \"30\"\nassert solution(\"5 3 11\\n4\") == \"30\"\nassert solution(\"5 3 11\\n5\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 11') == '30'\nassert solution('1') == '1'\nassert solution('2') == '4'\nassert solution('3') == '7'\nassert solution('4') == '16'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"10 10 10\") == \"50\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 11') == '30'"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 11\\n\") == \"30\"\nassert solution(\"5 1 11\\n\") == \"10\"\nassert solution(\"5 3 11\\n\") == \"30\""
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == \"30\"\nassert solution(\"5 3 11\") == \"30\"\nassert solution(\"5 6 11\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 4') == '17'\nassert solution('5 3 11') == '30'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3 11\n1''') == '30'\nassert solution('''5 3 11\n2''') == '19'\nassert solution('''5 3 11\n2''') == '37'\nassert solution('''5 3 11\n3''') == '15'\nassert solution('''5 3 11\n3''') == '11'\n\nprint(solution('''5 3 11\n2'''))\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\") == \"30\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"7\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    'abaccaba'\n    ) == 'Yes'\nassert solution(\n    'aabbcdddd'\n    ) == 'No'\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abaccaba') == 'Yes'\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abbc') == 'No'\n\"\"\"\n\ns = input().lower()\nc = set(s)\nb = set(s)\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aac\") == \"No\"\nassert solution(\"abaca\") == \"No\"\nassert solution(\"aaaaaa\") == \"No\"\nassert solution(\"abbaba\") == \"Yes\"\n\n-----------------------------------\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('bbcccdddd') == 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"ababcaba\") == \"No\"\nassert solution(\"ababcbaa\") == \"Yes\"\nassert solution(\"ababcab\") == \"No\"\nassert solution(\"a\") == \"Yes\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abaccaba\") == \"Yes\", \"w = abaccaba\"\nassert solution(\"aaba\") == \"No\", \"w = aaba\"\nassert solution(\"abc\") == \"Yes\", \"w = abc\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\""
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abcde') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 4\n1 1\n2 2\n3 3\n\"\"\") == \"3\"\n\"\"\"\n\n1.    \nWrite a function that receives the array A and number K and finds the K-th smallest integer in the array A.\n\n2.    \nWrite a function that receives N and K, N numbers and K - 1 operations and finds the K-th smallest integer in the array.\n\n3.    \nWrite a function that receives N and K, N numbers and K - 1 operations and finds the K-th smallest integer in the array, where N is the size of the array and K is the number of operations.\n\n4.    \nWrite a function that receives N and K, N numbers and K - 1 operations and finds the K-th smallest integer in the array, where N is the size of the array and K is the number of operations, where K is the number of operations and N is the size of the array.\n\n5.    \nWrite a function that receives N and K, N numbers and K - 1 operations and finds the K-th smallest integer in the array, where N is the size of the array and K is the number of operations, where N is the size of the array and K is the number of operations, where N is the size of the array and K is the number of operations.\n\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n2 2\n3 3\n''') == '3', solution('Tests/sample_test.txt')\nassert solution('''\n1 1\n3 3\n3 3\n''') == '3', solution('Tests/sample_test.txt')\nassert solution('''\n3 4\n1 1\n2 2\n3 3\n''') == '3', solution('Tests/sample_test.txt')\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\""
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '3'\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_leetcode_exception(self):\n        self.assertRaises(Exception, solution, '1 1')"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '', 'Wrong output'\nassert solution('1 1\\n2 2\\n3 3') == '3', 'Wrong output'\nassert solution('2 3\\n4 5\\n1 2') == '2', 'Wrong output'\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 3\n1 1\n2 2\n3 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"3 4\n1 1\n2 2\n3 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"5 3\n1 1\n2 2\n3 3\n4 4\n5 5\n\"\"\") == \"5\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 10') == '67731145'\nassert solution('1 1') == '1'"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '2'\nassert solution('10 10') == '10'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\", \"Wrong\"\nassert solution(\"3 3\") == \"2\", \"Wrong\"\nassert solution(\"5 5\") == \"3\", \"Wrong\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 5\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '2'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 3\n5 10 15\n''') == '10'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 3') == '10'\nassert solution('20 10 3') == '17'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n\") == \"7\"\nassert solution(\"20 3\\n\") == \"10\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"20 3\") == \"10\"\nassert solution(\"15 20\") == \"15\"\nassert solution(\"8 3\") == \"8\"\nassert solution(\"16 20\") == \"16\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('20 3') == '10'\nassert solution('15 5') == '15'\nassert solution('10 10') == '0'"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 3\\n5 10 15') == '10'\nassert solution('10 20 3\\n5 10 15') == '10'\nassert solution('10 20 3\\n5 10 0 15') == '15'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''20 3\n5 10 15\n''') == '10'\nassert solution('''20 4\n10 9 9 3\n''') == '18'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 5 3\") == \"10\"\nassert solution(\"20 20 20\") == \"30\"\nassert solution(\"30 50 10\") == \"50\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20 3') == '10'\nassert solution('8 1') == '1'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"20 3\") == \"10\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"2 5 2 7\") == \"14\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"15 5 2 7\") == \"15\"\nassert solution(\"15 5 7 2\") == \"10\"\nassert solution(\"3 5 7 2\") == \"10\"\nassert solution(\"3 2 3 2\") == \"9\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"10 5 8 9\") == \"11\"\n\nfrom math import pi\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 2 7') == '15', 'Sample Test Failed'\nassert solution('5 5 7 5') == '15', 'Sample Test Failed'\nassert solution('1 1 7 1') == '7', 'Sample Test Failed'\nassert solution('1 1 1 1') == '1', 'Sample Test Failed'\nprint(solution(input()))\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '', 'Test Case 1 Failed'\nassert solution('A B C D') == 'A B C D', 'Test Case 2 Failed'\nassert solution('1 2 3 4') == '', 'Test Case 3 Failed'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('10 10 10 10') == '10'\nassert solution('100 10 10 10') == '100'\nassert solution('100 100 100 100') == '100'"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '1 4'\nassert solution('5 2 7 3') == '7'\nassert solution('4 1 8 3') == '8'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('3 5 2 6') == '6'\nassert solution('3 5 2 6 3') == '9'\nassert solution('3 5 2 3 6') == '3'\nassert solution('3 3 2 4') == '3'\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('3\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2'"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"AC x 3\"\nassert solution(\"6\") == \"WA x 1\"\nassert solution(\"6\") == \"TLE x 2\"\nassert solution(\"6\") == \"RE x 0\"\nassert solution(\"3\") == \"AC x 1\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n'\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3'\nassert solution('''\n5\nAC\nWA\nTLE\nWA\n''') == 'AC x 3'\nassert solution('''\n4\nAC\nAC\nWA\nWA\n''') == 'AC x 3'\nassert solution('''\n3\nAC\nWA\n''') == 'AC x 2'\nassert solution('''\n2\nAC\n''') == 'AC x 1'\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nAC\\nWA\\nAC\\nWA\\nAC\") == \"AC x 3\"\nassert solution(\"4\\nAC\\nWA\\nAC\\nWA\") == \"AC x 1\"\nassert solution(\"2\\nAC\\nWA\") == \"AC x 1\"\nassert solution(\"1\\nAC\") == \"AC x 1\"\nassert solution(\"0\\nAC\\nWA\\nAC\\nWA\") == \"AC x 3\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\nAC\nWA\nWA\nWA\nAC\nAC\nWA\nWA\nAC\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"AC x 3\"\nassert solution(\"6\") == \"WA x 1\"\nassert solution(\"6\") == \"TLE x 2\"\nassert solution(\"6\") == \"RE x 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\nAC\nWA\nWA\nWA\nAC\n\n6\nAC\nWA\nTLE\nAC\nAC\nWA\nTLE\n\"\"\") == \"AC x 3 WA x 1 TLE x 2 RE x 0\"\nassert solution(\"\"\"\n7\nAC\nWA\nWA\nWA\nWA\nWA\nAC\n\"\"\") == \"AC x 3 WA x 1 TLE x 2 RE x 0\"\nassert solution(\"\"\"\n10\nWA\nWA\nWA\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nWA\nWA\nWA\nWA\nWA\nWA\nWA\nWA\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\nAC\nAC\nAC\nWA\nWA\nWA\n\"\"\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\nassert solution(\"\"\"1\nAC\nAC\nWA\nWA\nWA\n\"\"\") == \"AC x 1\\nWA x 2\\nWA x 2\\n\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3 4 1 2 0'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('17') == '18'\nassert solution('14') == '20'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"21\n\"\"\") == \"27\"\nassert solution(\"\"\"1\n\"\"\") == \"24\"\nassert solution(\"\"\"2\n\"\"\") == \"24\"\nassert solution(\"\"\"3\n\"\"\") == \"24\"\nassert solution(\"\"\"4\n\"\"\") == \"24\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20') == '27'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '0'\nassert solution('18') == '6'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\nassert solution('22') == '28'\nassert solution('23') == '29'\nassert solution('24') == '30'\nassert solution('25') == '31'"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"24\") == \"27\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('21') == '27'\nassert solution('12') == '24'\nassert solution('21') == '27'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('22') == '2'\nassert solution('21') == '27'\nassert solution('24') == '1'\n\n'''"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == '7'\nassert solution('5 1') == '6'\nassert solution('10 10') == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"3\", \"Example test case\"\nassert solution(\"1 9\") == \"10\", \"Example test case\"\nassert solution(\"0\") == \"0\", \"Zero test case\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"-5 -1\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"10 0\") == \"error\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3'\nassert solution('4 5') == '9'\nassert solution('6 3') == 'error'\nassert solution('8 5') == '9'"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"error\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3', \"Wrong answer with input 1, 2\"\nassert solution('5 5') == '10', \"Wrong answer with input 5, 5\"\nassert solution('6 6') == 'error', \"Wrong answer with input 6, 6\"\n\n'''"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3') == '9'\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"2\", \"First\"\nassert solution(\"2 2\") == \"4\", \"Second\"\nassert solution(\"10 10\") == \"error\", \"Third\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"9\", \"Wrong Answer\"\nprint(\"All tests passed\")"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"7\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"1\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 7 9') == '7'\nassert solution('4 5 6 7') == '7'"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 7 9''') == '7'\nassert solution('''4 3 7 9''') == '10'\nassert solution('''10 2 3 7 9''') == '10'\nassert solution('''4 10 3 7 9''') == '19'\nassert solution('''2 5 3 7 9''') == '15'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n4\n2 3 7 9\n''') == '7'\nassert solution(\n'''\n5\n2 3 5 6 9\n''') == '7'\nassert solution(\n'''\n10\n6 6 6 6 8 5 6 9 5 1\n''') == '9'\nassert solution(\n'''\n3\n3 6 7\n''') == '1'\nassert solution(\n'''\n9\n5 1 1 1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '7'\nassert solution('5') == '7'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 3 3\n''') == '4'\nassert solution('''\n7\n1 3 1 5 7 3\n''') == '7'\nassert solution('''\n3\n2 2 2\n''') == '2'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 7 9') == '7'\nassert solution('10 2 3 5 6 7 8 9') == '7'\nassert solution('4 4 4 4 4 4 4 4') == '0'\nassert solution('3 3 3 3 3 3 3') == '3'\nassert solution('100 100 100 100 100 100 100') == '0'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n2 3 7 9\n''') == '7'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"1 1\") == \"Yes\""
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Yes'\nassert solution('1 4') == 'No'\nassert solution('3 5') == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == 'Yes'"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"Yes\""
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('5 6') == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('5 8') == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 'Yes'\nassert solution([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 'Yes'\nassert solution([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2]) == 'No'\nassert solution([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 'Yes'\nassert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('5 8') == 'No'\nassert solution('5 5') == 'Yes'\nassert solution('5 6') == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"5 6\") == \"No\"\nassert solution(\"8 1\") == \"Yes\"\nassert solution(\"4 8\") == \"No\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\n2 2\n1 1''') == \"Even\"\nassert solution('''3 4\n2 4\n1 2''') == \"Even\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == 'Even'\nassert solution('3 4') == 'Even'\n\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('1 2') == 'Odd'\nassert solution('10 9') == 'Odd'"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == 'Even'\nassert solution('5 5') == 'Odd'"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(1) == \"Even\"\n\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 6\"\n    ) == \"Even\"\nassert solution(\n    \"1 2\"\n    ) == \"Odd\"\nassert solution(\n    \"2 5\"\n    ) == \"Odd\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"5 6\"), \"Even\")\n        self.assertEqual(solution(\"1 2\"), \"Odd\")\n        self."
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2\n3 4''') == 'Even'\nassert solution('''1 3\n5 7''') == 'Even'\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'Even'"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n4\n''') == 'Even'\nassert solution('''\n3\n5\n''') == 'Odd'\nassert solution('''\n5\n4\n''') == 'Even'\n'''\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'Even'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 6') == '2'\nassert solution('2 5') == '3'\nassert solution('3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '2'\nassert solution('2 4') == '3'\nassert solution('3 3') == '4'\nassert solution('10 10') == '11'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 6\n''') == '2'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 6\") == \"2\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 6') == '2'\nassert solution('5 5') == '4'\nassert solution('30 30') == '12'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 6\n1 5\n4 8\n''') == '2'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"2 5\") == \"2\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6 9'\n\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"9\""
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6\\n9'\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2 1 4\n2\n1 1\n2 3\n''') == '6 9'\nassert solution('''\n1\n1\n1\n''') == '1'\nassert solution('''\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '2359'\nassert solution('''\n100\n1\n1\n''') == '55555'\nassert solution('''\n2\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6 9'"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 3\\n1\\n2 3\") == \"6 9\"\nassert solution(\"3\\n3 4 1\\n3\\n4 1\\n\") == \"6 9\"\nassert solution(\"3\\n4 4 1\\n3\\n4 1\\n\") == \"9 12\"\nassert solution(\"2\\n1 2 3\\n1\\n2 3\") == \"6 9\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\\n9\\n\"\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n4\\n1 1\\n2\\n2 1') == '6\\n9\\n'\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"2 1 4\") == \"6\", \"Wrong output\"\nassert solution(\"2 1 4 2\") == \"9\", \"Wrong output\"\n\n'''\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 8') == '2000'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 8') == '2000'\nassert solution('10 1') == '1'\nassert solution('50 3') == '50'\nassert solution('6 1') == '1'\nassert solution('1000 8') == '2000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2000\"\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 8') == '2000'"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\nassert solution('10 5\\n4 3 2 2') == '5'\nassert solution('100 20\\n100 10') == '100'\nassert solution('101 101\\n100 100') == '200'\nassert solution('120102\\n120102') == '120102'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2000'"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2000\""
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1000 8\n1 3 4 5 6 7 8 9\n''') == '2000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 5\") == \"2000\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 8') == '2000'\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\nassert solution(\"5 3\\n1 2 3 4 5\\n1 3\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"10 10\\n1 2 3 4 5 6 7 8 9 10\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n\") == \"10\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('1 3') == '0'"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == stdout_string\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"1\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n3 4\") == \"0\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n3 4\") == \"1\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3') == '2'\nassert solution('5 3\\n1 2 3 4 5\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6') == '3'\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n1 3\n2 3\n2 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '2'\n\n'''"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"10\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '10'\nassert solution('5\\n2') == '10'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2,3\") == \"6\"\nassert solution(\"1,1,2\") == \"4\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3') == '10'\nassert solution('4\\n5') == '25'\nassert solution('4\\n-3') == '-17'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n3\") == \"10\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"10\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(1) == \"0\"\nassert solution(0) == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(1) == \"0\"\nassert solution(0) == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '1'\nassert solution('0') == '0'\nassert solution('1') == '1'\n\"\"\"\nimport re\nimport sys\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n\nx = float(input())\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0.1\") == \"1\"\nassert solution(\"1.0\") == \"0\"\nassert solution(\"0.0\") == \"0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('125') == '176'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('123') == '6'\nassert solution('1234') == '18'\nassert solution('1+2+3') == '6'\nassert solution('1+1+1') == '3'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+1\") == \"2\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\""
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"11\") == \"4\"\nassert solution(\"0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"176\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('125') == '176'\nassert solution('4') == '12'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('125') == '176'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+25\") == \"26\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('125') == '176'\nassert solution('123') == '36'\nassert solution('5') == '5'\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('125') == \"176\"\nassert solution('123') == \"18\"\nassert solution('21') == \"6\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    5\n    1 2 3 4 5\n    \"\"\") == \"1\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    1\n    1 2\n    ''') == '1'\n    assert solution('''\n    2\n    1 2\n    ''') == '1'\n    assert solution('''\n    4\n    1 2 3 4\n    ''') == '1'\n    assert solution('''\n    4\n    1 2 3 4\n    ''') == '0'\n    assert solution('''\n    5\n    1 2 3 4 5\n    ''') == '0'\n''')\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n4 1 2 3\\n') == '1'\nassert solution('5\\n1 2 3 4\\n') == '3'\nassert solution('3\\n1 2 3\\n') == '4'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2 3 4 5 6') == '1'\nassert solution('6\\n1 2 3 4 5 6') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9') == '1'\n\n\"\"\",\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2\n''') == '0'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '1'\nassert solution('7') == '1'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('10') == '0'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"30\") == \"5\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '4200'\nassert solution('20') == '156000'\nassert solution('100') == '98000'\nassert solution('60') == '5200'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20') == '15800'\nassert solution('15') == '16000'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '8200'\nassert solution('4') == '15200'\nassert solution('8') == '31200'\nassert solution('10') == '30100'\nassert solution('1') == '800'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"15800\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '15800'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20\n''') == '15800'"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == str(16000 - 200)\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '900'\nassert solution('5') == '900'\nassert solution('6') == '900'\nassert solution('20') == '12000'\nassert solution('19') == '17500'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('16') == '15800'\nassert solution('19') == '18000'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20\n''') == '15800'\nassert solution('''\n5\n''') == '3600'\n''')"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\""
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ant\nobe\nrec\n''') == 'abc', 'Your code produced the following result: {}\\n{} is not the expected result.'.format(solution('''ant\nobe\nrec\n'''), 'abc')\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''ant\nobe\nrec\n''') == 'abc'\nassert solution('''camel\ncat\nbat\n''') == 'cadb'\nassert solution('''mat\ncat\nbat\n''') == 'atcb'\nassert solution('''bee\n''') == '''e'''\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"abc\""
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('101') == '2'\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('101') == '2'\n\n------SOURCE------\nhttps://stackoverflow.com/questions/56386969/python-testing-code-solution-for-summer-semester-project-b\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('101') == '2'"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"2\"\nassert solution(\"11\") == \"0\"\nassert solution(\"100\") == \"1\""
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('101') == '2'\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('101') == '2'\n\"\"\"\n\ns1, s2, s3 = list(map(int, input().split()))\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('101') == '2'\nassert solution('110') == '1'\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 2\nassert solution('101') == 2\nassert solution('10') == 2\nassert solution('00') == 3\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n10000\\n9000\") == \"48000\"\nassert solution(\"4\\n1\\n10000\\n9000\") == \"48000\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n\") == \"48000\"\nassert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n10000\n9000\n''') == '48000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"42\"\nassert solution(\"3\") == \"942\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\nassert solution('6\\n4\\n100\\n1000') == '10000000'\nassert solution('6\\n4\\n100\\n1000') == '1000000000'\nassert solution('2\\n2\\n1\\n1') == '1'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '48000'\nassert solution('3') == '0'\nassert solution('4') == '36000'\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"48000\"\nassert solution(\"10\") == \"150000\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '48000'\nassert solution('10') == '1168000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\nassert solution('1\\n5\\n100\\n200') == '0'\nassert solution('5\\n5\\n10000\\n10000') == '48000'\nassert solution('5\\n4\\n3\\n3') == '3'\nassert solution('5\\n1\\n5\\n5\\n') == '5'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 10000 90000\") == \"48000\"\nassert solution(\"4 3 10000 90000\") == \"46700\"\nassert solution(\"2 1 0 0\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 - 2') == '-1'\nassert solution('5 + 3') == '8'\nassert solution('5 - 3') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('-1 + 2') == '1'\nassert solution('1 - 2') == '-1'\nassert solution('-1 - 2') == '1'\nassert solution('1 - 2 + 1') == '2'\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 + 2') == '3'\nassert solution('1 + 2') == '3'\nassert solution('1 + 2') == '3'\n'''"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 - 2') == '-1'\nassert solution('2 - 1') == '1'\nassert solution('2 * 1') == '2'\nassert solution('1 + 1 + 1 + 1 + 1') == '2'\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 - 2') == '-1'\nassert solution('-1 + 2') == '1'\nassert solution('2 - 2') == '0'\nassert solution('1 - 2 - 3 + 4') == '-6'\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"3\"\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 + 2 * 4') == '14'\nassert solution('1 - 2') == '-1'\nassert solution('1 + 2 + 3 + 4') == '10'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ARC'\nassert solution('1200') == 'ABC'\nassert solution('1200') == 'ABC'"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1') == 'ARC'\nassert solution('2') == 'ABC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\nassert solution('1200') == 'ARC'\n'''\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000') == 'ARC'\nassert solution('12000') == 'ABC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\n\nassert solution('1200') == 'ARC'\n\nassert solution('1200') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(1) == 'ARC'\nassert solution(2) == 'ABC'\nassert solution(3) == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1') == 'ARC'\nassert solution('1200') == 'ARC'\nassert solution('1201') == 'ABC'\nassert solution('1202') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1100') == 'ARC'"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"1580 1750 1650\") == \"2900\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('700 600 780') == '1480'\nassert solution('700 600 780') == '1380'\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"1000 400 700\") == \"1400\"\nassert solution(\"1000000000 1000000000\") == \"10000000\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"1500 30000 880\") == \"1480\"\nassert solution(\"120 10 100\") == \"120\"\nassert solution(\"4 100\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"700 600 780\") == \"1300\"\nassert solution(\"700 600 780\") == \"1300\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"1200 600 780\") == \"1480\"\nassert solution(\"1000 700 600\") == \"1300\"\nassert solution(\"1200 1200\") == \"1200\"\n\n'''\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n5') == '1300'\nassert solution('4\\n2\\n8') == '1300'\nassert solution('1000\\n1000\\n1000') == '10000'\nassert solution('5000\\n5000\\n5000') == '10000'\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('12000 123456') == '12000'"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"3000 1000 1200\") == \"1300\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\nabc\\narc') == \"#####\\n#abc#\\n#arc#\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '#####\\n#abc#\\n#arc#\\n#####'\nassert solution('6 6') == '###\\n#ab#\\n###\\n#ac#\\n###\\n#ad#\\n###'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\na#\nb#\n''') == '#####\\n#abc#\\n#arc#\\n#####'\nassert solution('''1 2\na\nb\n''') == '#ab#'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"#####\\n#abc#\\n#arc#\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '###'\nassert solution('5 6') == '###'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"8 8\") == \"##########\\n##########\\n##########\\n##########\\n##########\\n##########\\n##########\\n##########\\n##########\\n##########\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\nabc\\narc') == '#####\\n#abc#\\n#arc#'\nassert solution('1 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#'\nassert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"IIDID\") == \"2\"\nassert solution(\"1D\") == \"1\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\nIIDID\\n\") == \"2\"\nassert solution(\"100\\nIIDID\\n\") == \"2\"\nassert solution(\"500\\nIIIIIIIIIIII\\n\") == \"1\"\nassert solution(\"1\\nIII\\n\") == \"1\"\nassert solution(\"1\\nDD\\n\") == \"2\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nIIDID\") == \"2\"\nassert solution(\"5\\nIIDI\") == \"2\"\nassert solution(\"5\\nIID\") == \"2\"\nassert solution(\"5\\nIDI\") == \"1\"\nassert solution(\"5\\nDI\") == \"0\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"8\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '1'\nassert solution('4') == '1'\n'''"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nIIDID') == '2'\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == '4'\nassert solution('1234') == '1'\nassert solution('8888') == '0'\nassert solution('54321') == '0'\nassert solution('11011') == '2'\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == \"4\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"1111\") == \"2\"\nassert solution(\"1 11\") == \"1\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11009 11332\") == \"4\"\nassert solution(\"11001 111002\") == \"2\"\nassert solution(\"11001 111002\") == \"2\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11009 11332') == '4'"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([11009, 11332]) == \"4\"\nassert solution([11011, 11111, 11211, 11311]) == \"4\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11009 11332') == '4'\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == \"4\"\nassert solution(\"11009 11332\") == \"4\"\nassert solution(\"1234 5678\") == \"1\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\n\npalindromes = 0\nfor i in range(A,B+1):\n    if str(i) == str(i)[::-1]:\n        palindromes += 1\n\nprint(palindromes)\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '11009 11332'\n    ) == '4'\n\nassert solution(\n    '123456 678'\n    ) == '3'\n\nassert solution(\n    '123456789'\n    ) == '0'"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"5 4 7\") == \"5\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(['3', '1', '4']) == '3'\nprint(solution(['3', '1', '4']))\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 4') == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1 5\n1 2 2\n2 1 3\n3 3 4\n4 3 3\n''') == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('2 3 1') == '3'\nassert solution('2 1 3') == '3'\nassert solution('1 4 3') == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 4') == '3'\nassert solution('2 2 2') == '1'"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n'''\n\nstdin = []\nfor _ in range(int(stdin.readline())):\n    a, b, c = map(int, stdin.readline().split())\n    if a == b == c:\n        print(1)\n    elif a == b or a == c or b == c:\n        print(3)\n    else:\n        print(2)"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"2 2 2\") == \"3\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12', 'Wrong solution'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5') == '12'"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"12\", \"Wrong\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '12'\nassert solution('5 2') == '5'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\nassert solution(\"5 4\\n1 2 3 5\") == \"8\"\nassert solution(\"5 3\\n1 2\") == \"3\""
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"12\"\nassert solution(\"8 2\") == \"16\"\nassert solution(\"16 7\") == \"23\"\nassert solution(\"2 6\") == \"8\"\nassert solution(\"8 3\") == \"10\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 2 3 4 5''') == '12'\nassert solution('''2 1\n1 2''') == '2'\nassert solution('''3 3\n1 2 3''') == '3'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"12\""
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"4\"\nassert solution(\"5 3\") == \"12\"\nassert solution(\"4 2\") == \"5\"\nassert solution(\"10 0\") == \"10\"\nassert solution(\"10 1\") == \"9\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"12\"\nassert solution(\"5 4\") == \"12\""
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 7') == 'B', 'Wrong result'\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\", \"Wrong\"\nassert solution(\"10 10 10\") == \"A\", \"Wrong\"\nassert solution(\"100 100 100\") == \"A\", \"Wrong\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"1 2 7\") == \"A\""
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"x a b\n\n\"\"\") == \"B\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 7') == 'B', \"Wrong\"\nassert solution('10 5 4') == 'A', \"Wrong\"\nassert solution('10 0 1') == 'A', \"Wrong\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'B'\n\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"A\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"3 4 5\") == \"A\"\nassert solution(\"1 5 1\") == \"B\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 3 4\") == \"3\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/25') == '2018/01/25'\nassert solution('2017/12/25') == '2017/12/25'\nassert solution('2020/01/07') == '2020/01/07'\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/01') == '2018/01/01'\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/08') == '2017/01/08'\nassert solution('2017/01/09') == '2017/01/09'"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/01/03\") == \"2018/01/03\"\nassert solution(\"2017/12/31\") == \"2018/12/31\"\nassert solution(\"2017/12/30\") == \"2017/12/30\"\nassert solution(\"2017/12/29\") == \"2017/12/29\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/12/1') == '2018/12/1'\nassert solution('2017/10/31') == '2018/10/31'"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/08') == '2018/01/08'\nassert solution('2017/01/09') == '2018/01/09'\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/01/28\") == \"2018/01/28\"\nassert solution(\"2017/01/09\") == \"2018/01/09\"\nassert solution(\"2017/01/28\") == \"2017/01/28\"\nassert solution(\"2017/01/10\") == \"2017/01/10\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\nassert solution(\"2017/01\") == \"2018/01\"\n\nassert solution(\"2017\") == \"2018\"\n\nassert solution(\"2017/\") == \"2018\"\n\nassert solution(\"2017/01\") == \"2018/01\""
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/02/07') == '2018/02/07'\nassert solution('2017/03/07') == '2018/03/07'\nassert solution('2017/04/07') == '2018/04/07'\nassert solution('2017/05/07') == '2018/05/07'\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'aac'\nassert solution('4') == 'caa'\nassert solution('5') == 'aac'\nassert solution('6') == ''\nassert solution('7') == ''\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'aac'\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aacab') == 'aac'\nassert solution('aacaba') == 'aac'\nassert solution('aaa') == 'aaa'\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n'\n    'cbaa\\n'\n    'daacc\\n'\n    'acacac') == 'aac'\nassert solution('3\\n'\n    'a\\n'\n    'd\\n'\n    'b\\n') == ''\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"a\"\nassert solution(\"123\") == \"aa\"\nassert solution(\"111111\") == \"a\"\nassert solution(\"abca\") == \"abac\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\nabc\\ndef\\nghi') == 'abc'"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\nCBAa\\ndAacc\\nACacAc') == 'Aac'\nprint(solution('3\\nCBAa\\ndAacc\\nACacAc'))\n\n'''"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\ncaa\\ndaacc\\nacacac\") == \"ac\"\n\"\"\"\n\n\"\"\"\nWrite a function:"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n24 30\\n') == '7'"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == '7'\nassert solution(\"\"\"\n1\n24 30\n\n\"\"\") == '7'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n24 30''') == '7'\nassert solution('''1\n24 25\n''') == '7'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '7'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == '7'\nassert solution(\"3\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '7'\nassert solution('3') == '6'\nassert solution('4') == '5'\nassert solution('5') == '5'\nassert solution('6') == '4'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '7'\nassert solution('2') == '7'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"2\") == \"7\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"3\") == \"7\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '7'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin) == '6'"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"6\"\nassert solution(\"3 3\") == \"1\"\n\"\"\"\n\nimport math\n\nn, m = list(map(int, input().split()))\n\nprint(math.factorial(2*n)//(math.factorial(n) * math.factorial(n+m)))\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 4') == '6'\nassert solution('4 5') == '10'\nassert solution('5 6') == '15'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '6'\n\nassert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('1 2') == '2'\n\nassert solution('4 1') == '6'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n''') == '6'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '6'\nassert solution('1 1') == '1'\nassert solution('5 2') == '5'\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"6\"\nprint(solution(\"3 4\"))\n\n'''"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"6\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('1 2') == 'Impossible'\n\"\"\"\nimport math\n\nA, B = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('2 4') == 'Impossible'\nassert solution('5 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2') == 'Possible'\nassert solution('3\\n2\\n1') == 'Impossible'\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"5 3\") == \"Impossible\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('8 3') == 'Impossible'\n\"\"\"\n\na, b = map(int, stdin.split())\n\na_number = a * 2\nb_number = b * 3\n\nprint(\"Possible\" if a_number == b_number else \"Impossible\")"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Possible\"\nassert solution(\"2 1\") == \"Impossible\"\nassert solution(\"3 1\") == \"Impossible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Possible'\nassert solution('3 4') == 'Impossible'\nassert solution('3 3') == 'Possible'\n\n---"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Possible\"\nassert solution(\"4\") == \"Impossible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 'Impossible', 'Basic Tests Failed'\nassert solution('2 4') == 'Possible', 'Basic Tests Failed'\nassert solution('4 2') == 'Impossible', 'Basic Tests Failed'\nassert solution('2 3') == 'Possible', 'Basic Tests Failed'\nassert solution('3 5') == 'Possible', 'Basic Tests Failed'\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Possible'\nassert solution('4 5') == 'Possible'\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'atcoder'\n\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"?tc????\") == \"atcoder\""
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('?tc????') == 'atcoder', 'Wrong result'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('?tc????') == 'atcoder', \"Wrong!\"\nassert solution('coder') == 'coder', \"Wrong!\"\nassert solution('ec') == 'ec', \"Wrong!\"\nassert solution('c') == 'c', \"Wrong!\"\nassert solution('?r') == '?r', \"Wrong!\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'atcoder'\nassert solution(input()) == 'UNRESTORABLE'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('?tc????') == 'atcoder'\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'tcoder'\nassert solution('atcoder') == 'tcoder'\nassert solution('atcoder?') == 'tcoder?'\nassert solution('atcoder??') == 'tcoder?'\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aabc\") == \"abc\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2002\") == \"2017\"\nassert solution(\"2017\") == \"2032\"\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)\n\nprint((a + b) // 2)"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2002\n2017\n\"\"\") == \"\"\"\n2032\n\"\"\", \"\"\"\n2002\n2017\n\"\"\", \"\"\"\n2030\n\"\"\", \"\"\"\n2034\n\"\"\", \"\"\"\n2030\n\"\"\", \"\"\"\n2030\n\"\"\", \"\"\"\n2025\n\"\"\", \"\"\"\n2027\n\"\"\", \"\"\"\n2028\n\"\"\", \"\"\"\n2027\n\"\"\", \"\"\"\n2027\n\"\"\", \"\"\"\n2026\n\"\"\", \"\"\"\n2026\n\"\"\", \"\"\"\n2023\n\"\"\", \"\"\"\n2022\n\"\"\", \"\"\"\n2021\n\"\"\", \"\"\"\n2021\n\"\"\", \"\"\"\n2019\n\"\"\", \"\"\"\n2022\n\"\"\", \"\"\"\n2026\n\"\"\", \"\"\"\n2029\n\"\"\", \"\"\"\n2033\n\"\"\", \"\"\"\n2037\n\"\"\", \"\"\"\n2040\n\"\"\", \"\"\"\n2043\n\"\"\", \"\"\"\n2045\n\"\"\", \"\"\"\n2047\n\"\"\", \"\"\"\n2042\n\"\"\", \"\"\"\n2041\n\"\"\", \"\"\"\n2037\n\"\"\", \"\"\"\n2036\n\"\"\", \"\"\"\n2033\n\"\"\", \"\"\"\n2030\n\"\"\", \"\"\"\n2029\n\"\"\", \"\"\"\n2028\n\"\"\", \"\"\"\n2025\n\"\"\", \"\"\"\n2021\n\"\"\", \"\"\"\n2020\n\"\"\", \"\"\"\n2019\n\"\"\", \"\"\"\n2018\n\"\"\", \"\"\"\n2017\n\"\"\", \"\"\"\n2016\n\"\"\", \"\"\"\n2015\n\"\"\", \"\"\"\n2014\n\"\"\", \"\"\"\n2013\n\"\"\", \"\"\"\n2012\n\"\"\", \"\"\"\n2011\n\"\"\", \"\"\"\n2010\n\"\"\", \"\"\"\n2009\n\"\"\", \"\"\"\n2008\n\"\"\", \"\"\"\n2007\n\"\"\", \"\"\"\n2006\n\"\"\", \"\"\"\n2005\n\"\"\", \"\"\"\n2004\n\"\"\", \"\"\"\n2003\n\"\"\", \"\"\"\n2002\n\"\"\", \"\"\"\n2001\n\"\"\", \"\"\"\n2000\n\"\"\", \"\"\"\n1999\n\"\"\", \"\"\"\n1998\n\"\"\", \"\"\"\n1997\n\"\"\", \"\"\"\n1996\n\"\"\", \"\"\"\n1995\n\"\"\", \"\"\"\n1994\n\"\"\", \"\"\"\n1993\n\"\"\", \"\"\"\n1992\n\"\"\", \"\"\"\n1991\n\"\"\", \"\"\"\n1990\n\"\"\", \"\"\"\n1989\n\"\"\", \"\"\"\n1988\n\"\"\", \"\"\"\n1987\n\"\"\", \"\"\"\n1986\n\"\"\", \"\"\"\n1985\n\"\"\", \"\"\"\n1984\n\"\"\", \"\"\"\n1983\n\"\"\", \"\"\"\n1982\n\"\"\", \"\"\"\n1981\n\"\"\", \"\"\"\n1980\n\"\"\", \"\"\"\n1979\n\"\"\", \"\"\"\n1978\n\"\"\", \"\"\"\n1977\n\"\"\", \"\"\"\n1976\n\"\"\", \"\"\"\n1975\n\"\"\", \"\"\"\n1974\n\"\"\", \"\"\"\n1973\n\"\"\", \"\"\"\n1972\n\"\"\", \"\"\"\n1971\n\"\"\", \"\"\"\n1970\n\"\"\", \"\"\"\n1969\n\"\"\", \"\"\"\n1968\n\"\"\", \"\"\"\n1967\n\"\"\", \"\"\"\n1966\n\"\"\", \"\"\"\n1965\n\"\"\", \"\"\"\n1964\n\"\"\", \"\"\"\n1963\n\"\"\", \"\"\"\n1962\n\"\"\", \"\"\"\n1961\n\"\"\", \"\"\"\n1960\n\"\"\", \"\"\"\n1959\n\"\"\", \"\"\"\n1958\n\"\"\", \"\"\"\n1957\n\"\"\", \"\"\"\n1956\n\"\"\", \"\"\"\n1955\n\"\"\", \"\"\"\n1954\n\"\"\", \"\"\"\n1953\n\"\"\", \"\"\"\n1952\n\"\"\", \"\"\"\n1951\n\"\"\", \"\"\"\n1950\n\"\"\", \"\"\"\n1949\n\"\"\", \"\"\"\n1948\n\"\"\", \"\"\"\n1947\n\"\"\", \"\"\"\n1946\n\"\"\", \"\"\"\n1945\n\"\"\", \"\"\"\n1944\n\"\"\", \"\"\"\n1943\n\"\"\", \"\"\"\n1942\n\"\"\", \"\"\"\n1941\n\"\"\", \"\"\"\n1940\n\"\"\", \"\"\"\n1939\n\"\"\", \"\"\"\n1938\n\"\"\", \"\"\"\n1937\n\"\"\", \"\"\"\n1936\n\"\"\", \"\"\"\n1935\n\"\"\", \"\"\"\n1934\n\"\"\", \"\"\"\n1933\n\"\"\", \"\"\"\n1932\n\"\"\", \"\"\"\n1931\n\"\"\", \"\"\"\n1930\n\"\"\", \"\"\"\n1929\n\"\"\", \"\"\"\n1928\n\"\"\", \"\"\"\n1927\n\"\"\", \"\"\"\n1926\n\"\"\", \"\"\"\n1925\n\"\"\", \"\"\"\n1924\n\"\"\", \"\"\"\n1923\n\"\"\", \"\"\"\n1922\n\"\"\", \"\"\"\n1921\n\"\"\", \"\"\"\n1920\n\"\"\", \"\"\"\n1919\n\"\"\", \"\"\"\n1918\n\"\"\", \"\"\"\n1917\n\"\"\", \"\"\"\n1916\n\"\"\", \"\"\"\n1915\n\"\"\", \"\"\"\n1914\n\"\"\", \"\"\"\n1913\n\"\"\", \"\"\"\n1912\n\"\"\", \"\"\"\n1911\n\"\"\", \"\"\"\n1910\n\"\"\", \"\"\"\n1909\n\"\"\", \"\"\"\n1908\n\"\"\", \"\"\"\n1907\n\"\"\", \"\"\"\n1906\n\"\"\", \"\"\"\n1905\n\"\"\", \"\"\"\n1904\n\"\"\", \"\"\"\n1903\n\"\"\", \"\"\"\n1902\n\"\"\", \"\"\"\n1901\n\"\"\", \"\"\"\n1900\n\"\"\", \"\"\"\n1899\n\"\"\", \"\"\"\n1898\n\"\"\", \"\"\"\n1897\n\"\"\", \"\"\"\n1896\n\"\"\", \"\"\"\n1895\n\"\"\", \"\"\"\n1894\n\"\"\", \"\"\"\n1893\n\"\"\", \"\"\"\n1892\n\"\"\", \"\"\"\n1891\n\"\"\", \"\"\"\n1890\n\"\"\", \"\"\"\n1889\n\"\"\", \"\"\"\n1888\n\"\"\", \"\"\"\n1887\n\"\"\", \"\"\"\n1886\n\"\"\", \"\"\"\n1885\n\"\"\", \"\"\"\n1884\n\"\"\", \"\"\"\n1883\n\"\"\", \"\"\"\n1882\n\"\"\", \"\"\"\n1881\n\"\"\", \"\"\"\n1880\n\"\"\", \"\"\"\n1879\n\"\"\", \"\"\"\n1878\n\"\"\", \"\"\"\n1877\n\"\"\", \"\"\"\n1876\n\"\"\", \"\"\"\n1875\n\"\"\", \"\"\"\n1874\n\"\"\", \"\"\"\n1873\n\"\"\", \"\"\"\n1872\n\"\"\", \"\"\"\n1871\n\"\"\", \"\"\"\n1870\n\"\"\", \"\"\"\n1869\n\"\"\", \"\"\"\n1868\n\"\"\", \"\"\"\n1867\n\"\"\", \"\"\"\n1866\n\"\"\", \"\"\"\n1865\n\"\"\", \"\"\"\n1864\n\"\"\", \"\"\"\n1863\n\"\"\", \"\"\"\n1862\n\"\"\", \"\"\"\n1861\n\"\"\", \"\"\"\n1860\n\"\"\", \"\"\"\n1859\n\"\"\", \"\"\"\n1858\n\"\"\", \"\"\"\n1857\n\"\"\", \"\"\"\n1856\n\"\"\", \"\"\"\n1855\n\"\"\", \"\"\"\n1854\n\"\"\", \"\"\"\n1853\n\"\"\", \"\"\"\n1852\n\"\"\", \"\"\"\n1851\n\"\"\", \"\"\"\n1850\n\"\"\", \"\"\"\n1849\n\"\"\", \"\"\"\n1848\n\"\"\", \"\"\"\n1847\n\"\"\", \"\"\"\n1846\n\"\"\", \"\"\"\n1845\n\"\"\", \"\"\"\n1844\n\"\"\", \"\"\"\n1843\n\"\"\", \"\"\"\n1842\n\"\"\", \"\"\"\n1841\n\"\"\", \"\"\"\n1840\n\"\"\", \"\"\"\n1839\n\"\"\", \"\"\"\n1838\n\"\"\", \"\"\"\n1837\n\"\"\", \"\"\"\n1836\n\"\"\", \"\"\"\n1835\n\"\"\", \"\"\"\n1834\n\"\"\", \"\"\"\n1833\n\"\"\", \"\"\"\n1832\n\"\"\", \"\"\"\n1831\n\"\"\", \"\"\"\n1830\n\"\"\", \"\"\"\n1829\n\"\"\", \"\"\"\n1828\n\"\"\", \"\"\"\n1827\n\"\"\", \"\"\"\n1826\n\"\"\", \"\"\"\n1825\n\"\"\", \"\"\"\n1824\n\"\"\", \"\"\"\n1823\n\"\"\", \"\"\"\n1822\n\"\"\", \"\"\"\n1821\n\"\"\", \"\"\"\n1820\n\"\"\", \"\"\"\n1819\n\"\"\", \"\"\"\n1818\n\"\"\", \"\"\"\n1817\n\"\"\", \"\"\"\n1816\n\"\"\", \"\"\"\n1815\n\"\"\", \"\"\"\n1814\n\"\"\", \"\"\"\n1813\n\"\"\", \"\"\"\n1812\n\"\"\", \"\"\"\n1811\n\"\"\", \"\"\"\n1810\n\"\"\", \"\"\"\n1809\n\"\"\", \"\"\"\n1808\n\"\"\", \"\"\"\n1807\n\"\"\", \"\"\"\n1806\n\"\"\", \"\"\"\n18"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\na,b = map(int, stdin.split())\nprint((a + b)/2)"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2002\") == \"2032\"\nassert solution(\"2017\") == \"2032\"\nprint(solution(input()))\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2002\") == \"2017\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2002') == '2032'\nassert solution('2017') == '2017'\nassert solution('2042') == '2043'\n\nTakahashi is a user of a site that hosts programming contests.\n\nWhen a user competes in a contest, the rating of the user (not necessarily an integer) changes according to the performance of the user, as follows:\n\n- Let the current rating of the user be a.\n- Suppose that the performance of the user in the contest is b.\n- Then, the new rating of the user will be the avarage of a and b.\nFor example, if a user with rating 1 competes in a contest and gives performance 1000, his/her new rating will be 500.5, the average of 1 and 1000.\nTakahashi's current rating is R, and he wants his rating to be exactly G after the next contest.\n\nFind the performance required to achieve it.  \n\n-----Constraints-----\n - 0 \\leq R, G \\leq 4500\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nR\nG\n\n-----Output-----\nPrint the performance required to achieve it.\n\n-----Sample Input-----\n2002\n2017\n\n-----Sample Output-----\n2032\n\nTakahashi's current rating is 2002.\n\nIf his performance in the contest is 2032, his rating will be the average of 2002 and 2032, which is equal to the desired rating, 2017.\n\"\"\"\n\nR = int(input())\nG = int(input())\n\nP = (R + G) // 2\n\nprint(P)\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\nprint(solution(\"2002\\n2017\"))\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2002') == '2032'\nassert solution('2017') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2002\") == \"2017\"\nassert solution(\"2017\") == \"2032\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2032\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"string\") == 6\nassert solution(\"letter\") == 4\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"string\") == 6\nassert solution(\"letter\") == 4\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"string\") == 6\nassert solution(\"letter\") == 4\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaaaaa\") == \"0\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"assesses\") == \"1\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '4'\n\nfor _ in range(2):\n    _ = stdin = input()\n    print(solution(stdin))\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('assesses') == 1\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"string\") == 6\nassert solution(\"letter\") == 4\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n100000000 500 3\n''') == 'TLE'\nassert solution('''\n100000000 50 3\n''') == 'AC'\nassert solution('''\n100000000 10001 5\n''') == 'TLE'\nassert solution('''\n100000000 10000 5\n''') == 'AC'\nassert solution('''\n19931568 1000000 6\n''') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"AC\"\nassert solution(input()) == \"AC\"\nassert solution(input()) == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3') == 'AC'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n100000000 500 3\n''') == 'AC'\nassert solution(\n'''\n100000000 50 3\n''') == 'AC'\nassert solution(\n'''\n100000000 10001 5\n''') == 'TLE'\nassert solution(\n'''\n100000000 10000 5\n''') == 'TLE'\nassert solution(\n'''\n19931568 1000000 6\n''') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\""
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100000000 500 3\nSample Input 2:\n100000000 50 3\nSample Output 2:\nAC\n\nSample Input 3:\n100000000 10001 5\nSample Output 3:\nTLE\n\nSample Input 4:\n100000000 10000 5\nSample Output 4:\nAC\n\nSample Input 5:\n19931568 1000000 6\nSample Output 5:\nTLE\n''') == 'AC'"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4') == '2 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 4\\n'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 4\\n\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n''') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n'\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\n''') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n''') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('''\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n''') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 0 0 0\\n32 32 32 0\\n'\nprint('You passed all tests!')"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\") == \"2 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1024 0 0 0\\n\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n1024 0 0 0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n') == '2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 32 16 32\\n0 0 2048 64'\nprint('all tests passed')\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0 0 2') == '4 0 0 0'\nassert solution('4 16 8 2') == '2 64 32 4'\nassert solution('2 64 32 4') == '2 1024 64 0'\nassert solution('2 1024 1024 64') == '2 0 0 2048 64'\nassert solution('3') == '0 0 0 4'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 2\") == \"4 0 0 0\"\nassert solution(\"4 16 8 2\") == \"2 64 32 4\"\nassert solution(\"2 64 32 4\") == \"1024 64 0 0\"\nassert solution(\"2 2 4 8\") == \"2 4 8 0\"\nassert solution(\"2 0 0 2\") == \"0 0 0 4\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0 2\") == \"4 0 0 0\"\nassert solution(\"2 0 0 2\") == \"4 16 8 2\"\nassert solution(\"2 0 0 2\") == \"2 64 32 4\"\nassert solution(\"2 0 0 2\") == \"2048 64 0 0\"\nassert solution(\"2\") == \"0 0 0 0\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\") == \"2 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 4\\n\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n''') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n'\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\n''') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n''') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('''\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\n''') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n'\nassert solution('''\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n''') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\\n'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '1'\nassert solution('CH3OH 1') == '1'\nassert solution('CH4') == '1'\nassert solution('C6H6OCH2O 10') == '12'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"C 2H 6\") == \"0\"\nassert solution(\"H C 3H 8\") == \"6\"\nassert solution(\"CH 3OH 1\") == \"1\"\nassert solution(\"C 6H 6OCH 2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"H2O\") == \"0\"\nassert solution(\"C3H8\") == \"3\"\nassert solution(\"H2O\") == \"0\"\nassert solution(\"CH3OH\") == \"1\"\nassert solution(\"HCN\") == \"0\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''H 2\nO\n''') == '0'\nassert solution('''C 2H6\nH\n''') == '0'\nassert solution('''C 3H8\nC\n''') == '6'\nassert solution('''CH3OH 1\nCH4\n''') == '1'\nassert solution('''C 6H6OCH2O 10\nC\n''') == '12'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\nassert solution('10') == '1'\nassert solution('1 H') == '1'\nassert solution('H 2') == '0'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"H2O\") == \"H2O\"\nassert solution(\"CH3OH\") == \"CH3OH\"\nassert solution(\"CH4\") == \"CH4\"\nassert solution(\"C6H6OCH2O\") == \"C6H6OCH2O\"\nassert solution(\"HCN\") == \"HCN\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"C2H6\") == \"0\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH\") == \"1\"\nassert solution(\"C6H6OCH2O\") == \"0\"\nassert solution(\"HCN\") == \"0\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"H 2\\nO\\n\") == \"0\"\nassert solution(\"C2H6 10\\nC3H8\") == \"6\"\nassert solution(\"CH3OH 1\\nCH4\") == \"1\"\nassert solution(\"C6H6OCH2O 10\\nHCN\") == \"0\"\nassert solution(\"C6H14 10\\nC5H10\") == \"12\""
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '1'\nassert solution('C 2H 6') == '0'\nassert solution('C 3H 8') == '6'\nassert solution('CH3OH 1') == '1'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\""
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    'ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution(\n    'ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution(\n    'ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution(\n    'SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    ABC HAPPYBIRTHDAYCACEY\n    ABC TRAGICBIRTHDAYCACEY\n    ''') == 'PASS'\nassert solution('''\n    ABC HAPPYBIRTHDAY\n    ABC TRAGICBIRTHDAY\n    ''') == 'FAIL'\nassert solution('''\n    ABC HAPPYBIRTHDAY\n    SECRET SOMECHORESARETOUGH\n    ''') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''ABC HAPPYBIRTHDAYCACEY''') == 'PASS'\nassert solution('''ABC HAPPYBIRTHDAY''') == 'FAIL'\nassert solution('''ABC HAPPYBIRTHDAYCACEY''') == 'FAIL'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == 'PASS'"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'ok so far'\nassert solution('8') == '] 7'\nassert solution('13') == '] 20'\nassert solution('21') == '] 20'\nassert solution('27') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n([] [] ]\n''') == '] 7'\nassert solution('''13\n(([] [[]] ())\n''') == 'ok so far'\nassert solution('''21\n[ { { } ]\n''') == '] 20'\nassert solution('''27\n[ { [[()]] (({})) } ] () {}\n''') == 'ok so far'\nprint('\"Run\" is good. Great job, now check if your solution is correct.')\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n([] [] ]\n''') == '] 7'\nassert solution('''\n(([] [[]] ())\n''') == '] 20'\nassert solution('''\n([] [] ]\n''') == 'ok so far'\n\nprint(solution(input()))"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n([] ())\n''') == '] 7'\n\nassert solution('''\n([] [])\n''') == 'ok so far'\n\nassert solution('''\n(([] []))\n''') == '] 20'\n\nassert solution('''\n(([[][]{()})[])\n''') == 'ok so far'\n\nassert solution('''\n(([] []))\n''') == 'ok so far'"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"([] ())\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n([] [] ]\n''') == '] 7'\nassert solution('''\n([] [] )\n''') == 'ok so far'\nassert solution('''\n([] [] ]\n''') == 'ok so far'\nassert solution('''\n([] [] )\n''') == 'ok so far'\nassert solution('''\n([] [] )\n''') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '8\\n'\n    '([] [] ]\\n'\n) == '] 7'\n\nassert solution(\n    '13\\n'\n    '(([] [[]] ())\\n'\n) == '] 20'\n\nassert solution(\n    '21\\n'\n    '[ { { () () () } ]\\n'\n) == '] 20'\n\nassert solution(\n    '27\\n'\n    '[ { [[()]] (({})) } ] () {}\\n'\n) == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == 'ok so far'"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n([] [] ]\n''') == '] 7'\nassert solution('''\n2\n() () () ()\n''') == 'ok so far'\nassert solution('''\n3\n(([] [[]] ()) ())\n''') == '] 20'\nassert solution('''\n4\n[ { { () } } ]\n''') == '] 20'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"ok so far\""
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game', 'First'\n\nassert solution('''\n3\napple\nextra\napple\n''') == 'Player 1 lost', 'Second'\n\nassert solution('''\n2\napple\nneat\n''') == 'Player 2 lost', 'Third'"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'Fair Game'\nassert solution('3') == 'Player 1 lost'\nassert solution('2') == 'Player 2 lost'\n\n'''\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple''') == 'Player 1 lost'\nassert solution('''2\napple\nneat''') == 'Player 2 lost'\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'Fair Game'\nassert solution('3') == 'Player 1 lost'\nassert solution('2') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''2\napple\nneat\n''') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''\n3\napple\nextra\napple\n''') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\napple\\near\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\nassert solution('1\\napple') == 'Player 2 lost'\nassert solution('6\\napple\\napple\\napple\\napple\\napple') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Player 1 lost\"\nassert solution(\"3\") == \"Player 2 lost\"\nassert solution(\"5\") == \"Fair Game\""
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"\n3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"\n2\napple\nneat\n\"\"\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\""
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == '10010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000\\n+\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000') == '100000'\nassert solution('10') == '1010'\nassert solution('+') == '1010'\nassert solution('*') == '10010'"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000') == '100000'\nassert solution('10000') == '100010'\nassert solution('10') == '1010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"100000\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000\\n+\\n100\\n\") == \"100000\"\nassert solution(\"10\\n+\\n1000\\n\") == \"10010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"100000\"\nassert solution(\"+\") == \"10010\"\nassert solution(\"+\") == \"10010\"\nassert solution(\"10\") == \"1010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1000\\n+\\n100\\n') == '100000', 'First example'\nassert solution(\n    '10000\\n+\\n10\\n') == '10010', 'Second example'\nassert solution(\n    '10\\n+\\n1000\\n') == '1010', 'Third example'\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000') == '100000'\nassert solution('10') == '10010'\nassert solution('+') == '1010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"100000\""
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 out\\n') == '3'\nassert solution('8 in\\n') == '6'\nassert solution('52 out\\n') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\""
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 out\n''') == '1'\nassert solution('''52 out\n''') == '8'\nassert solution('''8 out\n''') == '1'\nassert solution('''52 in\n''') == '8'\nassert solution('''8 in\n''') == '1'\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''menolaxios mox''') =='menolaxiosexmox'\nassert solution('''alemaxe maxos''') == 'alemaxexmaxos'\nassert solution('''pamoli toxes''') == 'pamolextoxes'"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"mano malpollo\") == \"manomalexmalpollo\"\nassert solution(\"pamolo migliore\") == \"pamolomegliore\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox', \"Wrong!\"\nassert solution('alemaxe maxos') == 'alemaxexmaxos', \"Wrong!\"\nassert solution('pamoli toxes') == 'pamolextoxes', \"Wrong!\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n'''"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\nprint(solution(input()))\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2018\n''') == 'yes'\nassert solution('''\n2019\n''') == 'no'\nassert solution('''\n2020\n''') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'no', '1'\nassert solution('2\\n') == 'yes', '2'\nassert solution('3\\n') == 'yes', '3'\nassert solution('4\\n') == 'no', '4'\nassert solution('5\\n') == 'yes', '5'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(0) == 'no'\nassert solution(1) == 'no'\nassert solution(2) == 'no'\nassert solution(3) == 'no'\nassert solution(4) == 'no'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2018\") == \"yes\", \"Expected: yes\"\nassert solution(\"2019\") == \"no\", \"Expected: no\"\nassert solution(\"2020\") == \"yes\", \"Expected: yes\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"yes\"\nprint(\"All Tests Passed for day5\")\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'yes'\nassert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 0 0 0 4 0 0 0 0 4\n3\n''') == '64'\nassert solution('''4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('1000') == '0'\nassert solution('100') == '0'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 0 0 0 4 0 0 0 0 4\n3\n''') == '64'\nassert solution('''\n4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\nassert solution('''\n100 100 100 100 100 100 100 100 100 100 100\n1\n''') == '1000000'\nassert solution('''\n4 4 4 4 4 4 4 4 4 4 4 4\n3\n''') == '1268'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '64'\nassert solution(input) == '64'\nassert solution(input) == '0'"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 0 0 0 4 0 0 0 0 4\n3\n''') == '64'\nassert solution('''\n4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 0 0 0 4 0 0 0 0 4\n3\n''') == '64'\nassert solution('''\n4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 0 0 0 4 0 0 0 0 4\n3''') == '64'\nassert solution('''4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 0 0 0 4 0 0 0 0 4\n4''') == '64'\nassert solution('''10 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 0\n30 270 995 996 997 998 999\n''') == '2 330'\nassert solution('''\n7 1\n30 270 995 996 997 998 999\n''') == '2 570'\nassert solution('''\n7 2\n30 270 995 996 997 998 999\n''') == '0 0'''"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 0\n30 270 995 996 997 998 999\n''') == '2 330'\nassert solution('''\n7 1\n30 270 995 996 997 998 999\n''') == '2 570'\nassert solution('''\n7 2\n30 270 995 996 997 998 999\n''') == '0 0'\nassert solution('''\n20 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 0') == '2 330'\nassert solution('7 1') == '2 570'\nassert solution('7 2') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 0\") == \"2 330\"\nassert solution(\"7 1\") == \"2 570\"\nassert solution(\"7 2\") == \"0 0\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999\n''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999\n''') == '2 570'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'''\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 0\") == \"2 330\"\nassert solution(\"7 1\") == \"2 570\"\nassert solution(\"7 2\") == \"0 0\""
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999\n''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999\n''') == '2 570'\nassert solution('''7 2\n30 270 995 996 997 998 999\n''') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999\nSample Output 1:\n2 330\n\nSample Input 2:\n7 1\n30 270 995 996 997 998 999\nSample Output 2:\n2 570\n\nSample Input 3:\n7 2\n30 270 995 996 997 998 999\nSample Output 3:\n0 0''') == '0 0'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aab') == 'ab'\nassert solution('abcdef') == 'def'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"6\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\naaaaaaaa\n''') == '1'\n\nassert solution('''\nabbbbbbb\n''') == '2'\n\nassert solution('''\nabbabaaa\n''') == '4'\n\nassert solution('''\na\n''') == '1'"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\naaaaaaaa\n''') == '1'\nassert solution('''\nabbaabbaabba\n''') == '2'\nassert solution('''\nabcdef\n''') == '6'\n''')\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '2'\nassert solution('''\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1'\nassert solution('''\n3 6\n1 2 3 4 5\n11 12 15 19 24 30\n''') == '0'"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 12\n1 2 4\n6 8 12 18 26 28 30 34 36 37 39 40''') == \"1 2\"\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9''') == \"1 2\"\nassert solution('''3 6\n1 2 3\n11 12 15 19 24 30''') == \"0\"\nassert solution('''2 4\n1 2 4 5''') == \"2\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\"\"\") == \"\"\"2\n1 2\"\"\"\n\nassert solution(\"\"\"5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\nSample Output 2:\n1\n1\"\"\") == \"\"\"1\n1\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"2\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"3 6\") == \"1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 12\\n2 4\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1'\nassert solution('3 6\\n1 2 3 4 5\\n11 12 15 19 24 30') == '0'\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 12\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1 2\"\nassert solution(\"3 6\\n1 2 3 4 5\\n11 12 15 19 24 30\") == \"0\""
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == '2'\nassert solution(sample_input_2) == '1 2'\nassert solution(sample_input_3) == '0'"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(f\"4 12\") == \"2\"\nassert solution(f\"5 10\") == \"1\"\nassert solution(f\"3 6\") == \"1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n\"\"\"\n) == \"\"\"2\"\"\"\n\nassert solution(\n\"\"\"\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n\"\"\"\n) == \"\"\"1\"\"\"\n\nassert solution(\n\"\"\"\n3 6\n1 2 3 4\n11 12 15 19 24 30\nSample Output 3:\n0\n1\n\n\"\"\"\n) == \"\"\"2\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6\") == \"1\"\nassert solution(\"4 12\") == \"2\"\nassert solution(\"5 10\") == \"1\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\nassert solution('5554567') == '0'\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5551212''') == '1'\nassert solution('''5519876''') == '0'\nassert solution('''5055555''') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '0'\nassert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\nassert solution('') == '0'"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5551212\\n') == '1'\nassert solution('5519876\\n') == '0'\nassert solution('5055555\\n') == '0'"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(55) == '1'\nassert solution(9900) == '0'\nassert solution(555555) == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5551212\n5519876\n5055555''') == '1'\n\nassert solution('''5551212\n5519876\n5055555''') == '0'"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == str(1)\nassert solution() == str(0)\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5551212\\n\") == \"1\"\nassert solution(\"5519876\\n\") == \"0\"\nassert solution(\"5055555\\n\") == \"0\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"32/1\"\n) == \"0/1\"\nassert solution(\n    \"33/1\"\n) == \"5/9\"\nassert solution(\n    \"-40/1\"\n) == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nprint(\"Congratulations! All test cases passed!\")\n------\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0/1\"\nassert solution(stdin) == \"5/9\"\nassert solution(stdin) == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nprint(solution(input()))\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''0/1''') == '0/1'\nassert solution('''32/1''') == '0/1'\nassert solution('''33/1''') == '5/9'\nassert solution('''-40/1''') == '-40/1'\nassert solution('''-40/1''') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"0/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5/3\n-5/6\n-10/4\n-90/10\n-76/30''') == '0/1'\n\nassert solution('''20/3\n-45/6\n-20/4\n-95/10\n-65/30''') == '5/9'\n\nassert solution('''4/3\n-12/6\n-21/4\n-39/10\n-35/30''') == '4/9'\n\nassert solution('''-12/6\n-21/4\n-39/10\n-35/30\n-40/1''') == '-4/9'\n\nassert solution('''-30/6\n-39/4\n-40/1\n-39/3''') == '-30/9'"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'Transposition'\nassert solution('7') == 'Inversion'\nassert solution('10') == 'Nonsense'\nassert solution('1') == 'Nonsense'\nassert solution('2') == 'Nonsense'"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nC E G\nD F# A\n''') == 'Transposition'\nassert solution('''7\nC C G G A A G\nC C F F D# D# F\n''') == 'Inversion'\nassert solution('''7\nA B C D E F G\nG F E D C B A\n''') == 'Retrograde'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nC E G\\nD F# A\\n') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F\\n') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A\\n') == 'Retrograde'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nC E G\nD F# A\n''') == \"Transposition\"\n\nassert solution('''7\nC C G G A A G\nC C F F D# D# F\n''') == \"Inversion\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"3\nC E G\nD F# A\n\"\"\") == \"Transposition\"\n\nassert solution(\n\"\"\"7\nC C G G A A G\nC C F F D# D# F\n\"\"\") == \"Inversion\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nC E G\\nD F# A\\n') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F\\n') == 'Inversion'\nassert solution('4\\nD C D# E G F# G A A\\nE E A E F E F#\\n') == 'Retrograde'\nassert solution('9\\nA A A A\\nB B A\\nC C A\\nD D D\\nE E E\\nF E E E\\nG G G E\\nA A A\\nB A A\\nC C A\\nD D D\\n') == 'Transposition'\nassert solution('11\\nC E G G F F A G F E D D\\nF E D E C E E D D F\\n') == 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) in (\n    \"Transposition\", \"Inversion\", \"Retrograde\")\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\nC E G\nD F# A\n''') == 'Transposition'\nassert solution('''5\nC D E F G\nC C F F D# D# F\n''') == 'Retrograde'\nassert solution('''2\nC E G\nD F# A\n''') == 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nC E G\nD F# A\n''') == 'Transposition'\nassert solution('''\n7\nC C G G A A G\nC C F F D# D# F\n''') == 'Inversion'\nassert solution('''\n7\nA B C D E F G\nG F E D C B A\n''') == 'Retrograde'\nassert solution('''\n1\nD E\n''') == 'Nonsense'\nassert solution('''\n2\nF E G\nF G\n''') == 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\nC E G\nD F# A\n''') == \"Transposition\"\nassert solution('''\n7\nC C G G A A G\nC C F F D# D# F\n''') == \"Inversion\"\nassert solution('''\n7\nA B C D E F G\nG F E D C B A\n''') == \"Retrograde\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\n[(num, val) for num, val in enumerate(stdin.split(), start=1)]\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\", \"First\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\", \"Second\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\", \"Third\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        queue = deque()\n        s = stdin.replace(\"-\", \" \")\n        queue.append((s[0], len(s) + 1))\n        for i in range(1, len(s)):\n            if s[i] == \" \":\n                queue.append((s[i + 1], len(s) + 1))\n            elif s[i] in \"bcdfghjklmnpqrstvwxyz\":\n                queue.append((s[i] + \" \" + s[i + 1], len(s) + 1))\n            elif s[i] == \"h\" and s[i + 1] == \"i\":\n                queue.append((s[i] + \"n\" + \" \" + s[i + 2], len(s) + 1))\n            elif s[i] == \"c\" and s[i + 1] == \"i\" and s[i + 2] == \"g\":\n                queue.append((s[i] + \"g\" + \" \" + s[i + 3], len(s) + 1))\n            elif s[i] == \"a\" and s[i + 1] == \"m\" and s[i + 2] == \"n\":\n                queue.append((s[i] + \"ah\" + \" \" + s[i + 3], len(s) + 1))\n            elif s[i] == \"p\" and s[i + 1] == \"o\" and s[i + 2] == \"l\":\n                queue.append((s[i] + \"oh\" + \" \" + s[i + 3], len(s) + 1))\n            elif s[i] == \"b\" and s[i + 1] == \"a\" and s[i + 2] == \"r\":\n                queue.append((s[i] + \"uh\" + \" \" + s[i + 3], len(s) + 1))\n            elif s[i] == \"s\":\n                queue.append((s[i] + \"h\", len(s) + 1))\n        while queue:\n            word, count = queue.popleft()\n            while word and count <= queue[0][1]:\n                queue.appendleft((word[1:], count + 1))\n                word = word[1:]\n        return \" \".join(queue)\n\ns = Solution()\nprint(s.solution(stdin))"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == output_string, \"Not correct\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n4\n''') == '14'\nassert solution('''\n5\n''') == '16'\nassert solution('''\n8\n''') == '16'\n'''\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"6\"\nassert solution(\"4\\n\") == \"16\"\nassert solution(\"3\\n\") == \"14\""
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '14'\nassert solution('4') == '16'\nassert solution('1') == '6'"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nassert solution('10') == '45'\nassert solution('25') == '105'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\""
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n3\n8\n7\n9\n5\n6''') == '10'\nassert solution('''1\n4\n3\n6\n2\n8''') == '14'\nassert solution('''1\n3\n6\n5\n2\n9\n4\n7''') == '14'\nassert solution('''3\n10\n10\n10''') == '19'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\""
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 6\n1 2 3 4 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 10\n4 8 1 9 7\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 10\n1 3 1 7\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\nassert solution('''10 10\n1 2 5 8 9 6 7 8 10\n''') == '7'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\nassert solution([5, 6, 7, 8, 9]) == \"2\"\nassert solution([1, 2, 3, 4, 5]) == \"1\"\nassert solution([1, 2, 3, 4, 5, 10, 5, 6, 5, 7]) == \"2\"\nassert solution([7, 3, 9, 4, 4, 5, 10]) == \"2\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '4'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '4'\nassert solution('4 8 1 9 7') == '2'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"4 8 1 9 7\") == \"4\"\nprint(solution(*[input() for _ in range(int(input()))]))"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '2'\nassert solution('4 10') == '4'"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '2'\nassert solution('4 10') == '4'\nassert solution('4 100') == '4'\nassert solution('100 100') == '100'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n3 2\\n\") == \"2\"\nassert solution(\"2 10\\n3 6\\n\") == \"1\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"1 2\") == \"possible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == \"possible\"\nassert solution('1 2') == \"impossible\"\nassert solution('1 2') == \"impossible\"\nprint(\"solution = ok\")\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('1 2') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"possible\"\nprint(solution(input_string))\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\nassert solution(\"1 2\\n0 1 0\\n1 0 1\\n\") == \"impossible\""
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0\\n') == 'impossible'"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\""
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 3\n1 0 0\n1 0 1\n1 0 0\n0 1 0\n1 0 1\n1 0 0\n0 1 0\n0 1 1\n1 0 0\n0 1 0\n1 0 1\n1 0 0\n''') == 'possible'\nassert solution('''\n10 3\n1 0 0\n1 0 1\n1 0 0\n0 1 0\n1 0 1\n1 0 0\n0 1 0\n0 1 1\n1 0 0\n0 1 0\n1 0 1\n1 0 0\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n0 1 1\n1 0 0\n1 0 1''') == 'possible'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1.875\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 2\") == \"4.25\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n1.8''') == '1.8'\nassert solution('''2 3\n1.875''') == '1.875'\nassert solution('''6 2\n4.25''') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\nassert solution('6 3') == '4.25'\nassert solution('10 8') == '9.5'"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 0\n''') == '0 0'\nassert solution('''\n4 2 7\n''') == '1 4'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\""
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1 0''') == '0 0'\nassert solution('''4 2 7''') == '1 4'\nassert solution('''3 0 0''') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1 1 0\n    \"\"\") == \"0 0\"\nassert solution(\"\"\"4 2 7\n    \"\"\") == \"1 4\"\nassert solution(\"\"\"3 0 0\n    \"\"\") == \"1 6\"\"\")"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 0\n4 2 7''') == '1 4'\nassert solution('''3 0 0\n1 4''') == '1 6'''\nprint('Done!')\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 0\n''') == '0 0'\nassert solution('''\n4 2 7\n''') == '1 4'\nassert solution('''\n3 0 0\n''') == '1 6'"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\""
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n') == '1'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\\n') == '0'\nassert solution('12\\nBWBWBWB\\nWBWBWBWB\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBWB\\nWBWBWBWBWB\\nWBWBWBWBWB\\nBWBWBWBWBWB\\nBWBWBWBWBWB\\nBWBWBWBWBWB\\nBBWBWBWBWBWB\\nBBWBWBWBWBWB\\nBBWBWBWBWBWB\\nBBWBWBWBWBWB\\nBWBWBWBWBWBWB\\nBWBWBWBWBWBWB\\nBWBWBWBWBWBWB\\nBWBWBWBWBWBWB\\n') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\nWBWB\\nBBWB\\n\") == \"1\"\nassert solution(\"2\\nBWBW\\nWBWB\\n\") == \"0\"\nassert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\\n\") == \"0\""
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n''') == '0'\nassert solution('''4\nBWWB\nWWBW\nWWBW\nBWBW\n''') == '1'\nassert solution('''2\nBBWWB\n''') == '0'\nassert solution('''20\nWBBW\nBWBW\nWBBW\nBWBW\nBBWW\nWBBW\nBWBW\nWBWB\nWBBW\nBBWW\nWBBW\nBWBW\nBWBW\nBBWW\nWBBW\nBWBW\nWBBW\nBBWW\nWBBW\nWBBW\nWBBW\nWBBW\nBBWW\nBBWW\nWBBW\nWBBW\nWBBW\nWBBW\nBBWW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nWBBW\nBBWW\nBBWW\n''') == '1'\nprint('Solution:'+ solution(''))\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('6') == '0'\nassert solution('8') == '0'\nassert solution('12') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\nWBBW\nWBWB\nBWWB\nBWBW''') == '1'\nassert solution('''4\nBWWB\nWBWB\nWBBW\nBWBW''') == '0'\nassert solution('''6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB''') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWBWB\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nWBWB\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nWBWB\\nWBWB\\nBWWB\\nBWBW\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\") == \"0\""
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('4') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1'\nassert solution('4') == '0'\nassert solution('6') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\nWBBW\nWBWB\nBWWB\nBWBW''') == '1'\nassert solution('''4\nBWWB\nWBWB\nBWWB\nBWBW''') == '0'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '3 1'\nassert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 3'\nassert solution('1\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '3 1'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2') == '3 4'\nassert solution('2 6 3 4') == '3 2'\nassert solution('2 4 1 3') == '3 2'\nassert solution('1 2 1 3') == '1 2'\nassert solution('1 4 5 8') == '3 7'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '3 4\\n3 2\\n3 7\\n1 2\\n3 7\\n'"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7\\n'"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 2\") == \"2 1\"\nassert solution(\"2 6 3 4\") == \"3 4\"\nassert solution(\"2 4 1 3\") == \"3 2\"\nassert solution(\"1 2 1 3\") == \"2 1\"\nassert solution(\"1 4 5 8\") == \"3 7\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7\\n'''\n\n\n-------Code-------\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7\\n'\n\nassert solution('''\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''') == '3 4\\n3 2\\n1 2\\n3 7\\n'\n\nassert solution('''\n10\n1 1 3 2 2 1 2 2 3\n2 1 5 4 1 2 2 1 3\n1 2 1 4 1 2 3 1 4\n2 2 1 1 1 1 1 2 1 3\n3 1 5 1 1 2 1 1 1 3\n1 1 1 1 1 1 2 2 3 1 4\n1 2 2 1 1 2 1 2 1 3\n3 1 1 1 2 1 1 2 1 3\n3 1 1 2 2 2 1 3 2 3\n1 1 2 2 1 1 1 1 1 3\n1 1 2 2 2 2 1 3 2 3\n1 3 1 1 1 1 1 1 1 1 2\n2 1 2 1 1 2 2 3 1 4\n''') == '1 2\\n2 1\\n3 1\\n3 2\\n3 3\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 1 2\") == \"2 1\"\nassert solution(\"2 6 3 4\") == \"3 4\"\nassert solution(\"2 4 1 3\") == \"3 2\"\nassert solution(\"1 2 1 3\") == \"1 2\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2 1\"\nassert solution(\"7\") == \"3 4\"\nassert solution(\"10\") == \"3 2\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"7\") == \"3 7\""
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\"\"\") == \"2 1\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3 4 5\n2\n1 2\n''') == 'true'\nassert solution('''\n1 2 3 4 5\n-1\n1 2\n''') == 'false'\n'''\nOutput\n\n5\nFalse\n\n'''"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nhead = [3,2,0,-4]\npos = 1\n\"\"\") == \"true\"\nassert solution(\"\"\"\nhead = [1,2]\npos = 0\n\"\"\") == \"true\"\nassert solution(\"\"\"\nhead = [1]\npos = -1\n\"\"\") == \"false\"\nassert solution(\"\"\"\nhead = []\npos = -1\n\"\"\") == \"false\""
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3,2,0,-4]) == \"true\"\nassert solution([1,2]) == \"true\"\nassert solution([1]) == \"false\"\nassert solution(\"\") == \"false\"\nassert solution(\"-1\") == \"false\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3,2,0,-4]) == True\nassert solution([1,2]) == True\nassert solution([1]) == True\nassert solution([]) == False"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3,2,0,-4], 1) == True\nassert solution([1,2], 0) == True\nassert solution([1], -1) == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('[1,2]') == 'true'\nassert solution('[1]') == 'true'\nassert solution('[1,2,3]') == 'false'\nassert solution('[1,2,3,4]') == 'true'\nassert solution('[1,2,3,4,5]') == 'false'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'false'"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"[3,2,0,-4]\") == \"true\"\nassert solution(\"[1,2]\") == \"true\"\nassert solution(\"[1]\") == \"false\"\n\n\"\"\"\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = fast = head\n        while slow and fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'false'\nassert solution('[2,0,0,1]') == 'false'\nassert solution('[1,2,3]') == 'false'"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('[3,2,0,-4]\\n1') == 'true'\nassert solution('[1,2]\\n0') == 'true'\nassert solution('[]\\n-1') == 'false'\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n''') == '0 1'\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n''')"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 7 11 15\") == \"0 1\"\nassert solution(\"2 7 11 15 12\") == \"0 1\"\nassert solution(\"7 4 3\") == \"0 1 2\"\nassert solution(\"7 4 3 4\") == \"0 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n3\n0\n-1\n\n''') == '0 1'"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 7 11 15') == '0 1'\nassert solution('6 7 2 3 4') == '2 0'\nassert solution('2 2 2') == '0 1'\n\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n7\n11\n15\n''') == '''\n0\n1\n'''\nassert solution('''\n1\n1\n''') == '''\n-1\n'''\nassert solution('''\n0\n0\n''') == '''\n-1\n'''\nassert solution('''\n0\n1\n''') == '''\n-1\n'''\nassert solution('''\n2\n2\n''') == '''\n-1\n'''\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 4\\n2 4 6 7 5\") == \"0 1\"\n\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 2 9\\n9\\n\") == '0 1'\nassert solution(\"5\\n4 5 2 9\\n9\\n\") == '1 2'\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1 2'"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"0 1\"\nassert solution(\"3\\n2\\n1\\n4\") == \"0 1\"\nassert solution(\"3\\n5\\n1\\n4\") == \"1 0\"\nassert solution(\"6\\n5\\n1\\n4\") == \"1 0\"\nassert solution(\"2\\n3\\n4\\n5\") == \"0 1\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"[2, 7, 11, 15] 9\") == \"0 1\"\nassert solution(\"[7, 11, 15] 9\") == \"1 2\"\nassert solution(\"[2, 3, 4, 5, 7, 9] 6\") == \"1 2\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n2\n1''') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n1 2 4\n1 3 2''') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\nprint(solution(input()))\n\n---SOLUTION---\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 0\n2 0''') == '0'\nassert solution('''5\n0 0\n1 0\n0 0\n2 0\n0 0''') == '1'\nassert solution('''3\n0 0\n0 0\n0 0''') == '0'\nassert solution('''6\n1 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '2'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\""
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1\n0\n-1\n0\n-1\n''') == '1'\n\nassert solution('''4\n-1\n0\n0\n0\n''') == '1'"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\n\nassert solution([\n    '4',\n    '1 2 0 0',\n    '3 1 0 0',\n    '0 0 0 0',\n    ]) == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n0\\n3\") == \"1\"\nassert solution(\"5\\n4\\n2\\n0\\n3\") == \"1\"\nassert solution(\"5\\n6\\n2\\n0\\n3\") == \"2\"\nassert solution(\"5\\n6\\n5\\n0\\n3\") == \"3\"\nassert solution(\"6\\n6\\n6\\n0\\n3\") == \"4\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 2 2 1\n''') == \"4\"\nassert solution('''\n1\n3 7\n''') == \"impossible\"\n''')\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"3\") == \"impossible\""
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3 2\n''') == 'impossible'\nassert solution('''\n3\n3 2 1\n''') == '2'\nassert solution('''\n1\n2 3\n''') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('1') == 'impossible'\nassert solution('3') == 'impossible'\n'''\n\nfrom math import inf"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"4\""
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == \"4\"\nassert solution('1') == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('1') == 'impossible'\nassert solution('3 7') == '4'"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '4'\nassert solution('3') == '4'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2 2 2 1\n''') == 'impossible'\nassert solution('''\n2\n3 7\n''') == '4'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '4'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 0\") == \"4\"\nassert solution(\"44 1\") == \"44\"\nassert solution(\"22 34\") == \"22\"\nassert solution(\"15000 1\") == \"15000\"\nassert solution(\"5555 56\") == \"5555\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"123450995\") == \"123451000\"\nassert solution(\"184\") == \"180\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    1 1\n''') == '1'\nassert solution('''\n    1 0\n''') == '1'\nassert solution('''\n    0 1\n''') == '1'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('123450995 1') == '123451000'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n168 1\n''') == '1780'\nassert solution('''\n1 2\n''') == '4'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"184 1\\n\"\n    \"12345995 1\"\n) == \"123451000\"\nassert solution(\n    \"163450995 1\\n\"\n    \"12345995 1\"\n) == \"1635451000\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('1000000000') == '1000000000'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\nassert solution(\"1000000000 1\") == \"100000000\""
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"123450995 1\") == \"123451000\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\nassert solution('3\\n0 0\\n1 1\\n1 1') == '1.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.000000'\nassert solution('3 4 5') == '2.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 1\n2 2\n3 3\n\"\"\") == \"0.000000\"\nassert solution(\"\"\"\n2\n1 1\n2 1\n\"\"\") == \"1.00000\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 1\n2 2\n3 3\n\"\"\") == \"0.000000\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0.000000'\nassert solution('3') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 1\n2 2\n3 3\n''') == '0.000000'\nassert solution('''\n10\n1 1\n2 2\n3 3\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == '0.000000'\nassert solution('''\n10\n1 1\n2 2\n3 3\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n''') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.000000'\nassert solution('1 1') == '0.000000'\nassert solution('2 2') == '0.000000'\nassert solution('3 3') == '0.000000'\nassert solution('3 2 4') == '0.000000'\n\n---Output---"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.000000'\nassert solution('3') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1\\n2 2\\n3 3\\n') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.000000'\nassert solution('1 1') == '0.000000'\nassert solution('2 2') == '1.000000'\nassert solution('3 3') == '0.000000'\nassert solution('0 1') == '0.000000'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1\\n2\\n4\\n'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2 4'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2 4'\nassert solution('''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '1 2 4 6 8'"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1\\n2\\n4\\n'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2') == '1 2 4 6 8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1') == '1\\n2\\n4\\n'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8\\n'"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1 2 4'\nassert solution() == '1 2 6'\nassert solution() == '6 8'\nassert solution() == '1 2 3 4 5 6 7 8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 1 2') == '1 2'\nassert solution('4\\n3 2 3 4') == '1 2'\nassert solution('8\\n5 4 2 6') == '4'\nassert solution('5\\n6 4 2 7 8') == '1 2 3 4 5 6 7 8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"1 2 4 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 4 8'\nprint('Congratulations!')"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\""
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"8\""
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('2 2 2') == '9'\nassert solution('3 4 5') == '60'"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4 5\n''') == '60'\nassert solution('''\n2 2 2\n''') == '8'\nassert solution('''\n1 2 3\n''') == '6'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3 4 5\n    ''') == '60'\nassert solution('''\n    2 2 2\n    ''') == '8'\n''')"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3 4 5') == '60'\nassert solution(\n    '2 2 2') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4 5\n\"\"\") == \"60\"\nassert solution(\"\"\"\n2 2 2\n\"\"\") == \"8\n\"\"\")\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nprint(solution(input))\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3 0 2') == '1.6666666666666667'\nassert solution('2\\n2 2 4') == '1.5'"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 0 2\n''') == '1.6666666666666667'\nassert solution('''\n3\n1 -1 4\n''') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1.6666667'\nassert solution('3 2 0') == '1.6666667'\nassert solution('3 2 1 2 1 1 1') == '2.5'"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1.6666666666666667\"\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 0 2') == '1.6666666666666667'\nassert solution('3\\n1 -1 4') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 0 2\n''') == '1.6666666666666667'\nassert solution('''3\n1 -1 4\n''') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3') == '2.3333333333333333'\nassert solution('3\\n0 0 1') == '1.0'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.5'\nassert solution('4') == '2.0'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 0 2\nSample Input 3:\n6\n6 1 2 3 4 -1\nSample Output 3:\n0.8\n\nSample Input 4:\n4\n4 -1 2 1\nSample Output 4:\n0.8333333333333334\n''') == '0.8333333333333334'\n\nassert solution('''7\n8 0 4 2 1 6 -1\nSample Output 5:\n1.1875\n''') == '1.1875'\n\nassert solution('''8\n8 0 4 2 1 6 -1\nSample Output 6:\n1.5\n''') == '1.5'\n\nassert solution('''9\n8 0 4 2 1 6 -1\nSample Output 7:\n0.0\n''') == '0.0'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 3') == '6'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '6'\nassert solution('7 3') == '7'\nassert solution('7 5') == '8'\nassert solution('7 13') == '7'\n\nstdin = \"\"\"7 3\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('10') == '9'\nassert solution('20') == '19'\nassert solution('100') == '97'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\""
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"12 15\") == \"7\"\nassert solution(\"15 6\") == \"7\"\nassert solution(\"13 20\") == \"8\"\n\n'''\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '6'\nassert solution('15') == '7'\nassert solution('22') == '7'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"1\"\nassert solution('''\n123864 123865\n''') == '1'\nassert solution('''\n198765 198769\n''') == '0'\n\nsolution.__doc__\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    123864 123865\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n    198765 198769\n\"\"\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution(\"123864 123865\") == '1'\nassert solution(\"198765 198769\") == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'\nassert solution(r'1116253') == '1'\nassert solution(r'132537') == '1'\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"123864 123865\"\"\") == \"1\"\nassert solution(r\"\"\"198765 198769\"\"\") == \"0\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n''') == '0.66666667'\nprint('PASSED')"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0\n''') == '0.66666667'\nprint('solution() finished successfully!')"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.50000000'\nassert solution('2') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == '0.50000000'\nassert solution('2\\n2') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.50000000'\nassert solution('2') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n''') == '0.66666667'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\""
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\"\nassert solution(\"10\") == \"single 9\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''180''') == 'triple 20'''"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'\nassert solution('95') =='single 9'"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1\n2\n3''') == \"impossible\"\nassert solution('''10\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3''') == \"impossible\"\nassert solution('''16\n4\n2\n5\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3''') == \"impossible\"\nassert solution('''30\n5\n5\n5\n4\n2\n4\n2\n4\n3\n2\n2\n2\n4\n5\n6\n2\n2\n4\n5\n6\n2\n4\n2\n2\n4\n4\n4\n2\n2\n2\n2\n2\n2\n2''') == \"impossible\"\nassert solution('''100\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20''') == \"impossible\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n180\n''') == 'impossible'\nassert solution('''\n96\n''') == 'impossible'\nassert solution('''\n180\n''') =='single 20'\nassert solution('''\n96\n''') == 'double 15'\nassert solution('''\n180\n''') == 'triple 20'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n180\n''') == \"triple 20\nassert solution('''\n96\n''') == \"triple 19\nassert solution('''\n156\n''') == \"single 9\n''')"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'\nprint(solution())\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 2\") == \"36\"\nassert solution(\"10 4 7\") == \"168\"\nassert solution(\"8 5 4\") == \"108\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\""
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"36\"\nassert solution(\"1 1 1\\n3 4 5\") == \"9\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '168'\nassert solution([10, 4, 7]) == '168'\nassert solution([5, 2, 2]) == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 2') == '36'\nassert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 7') == '36'\nassert solution('10 4 7') == '168'\nassert solution('100 100 100') == '1380'\nassert solution('5 3 1') == '8'\nassert solution('5 2 1') == '0'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 2') == '36'\nassert solution('10 4 7') == '168'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"36\"\nassert solution(\"8 3 3\") == \"48\"\nassert solution(\"3 4 5\") == \"120\"\nassert solution(\"16 4 7\") == \"280\"\nassert solution(\"11 10 9\") == \"1776\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 2''') == '36'\nassert solution('''5 4 7''') == '168'"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 2') == '36'\nassert solution('10 4 7') == '168'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"108\""
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 10\n3 7\n5 8\n''') == '2'\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n10 3\n10 3''') == '7'\nassert solution('''2\n1 0\n1 0''') == '0'\nprint('PASSED')\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n10 100\n10 100\n''') == '7'\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n3 10\n5 8\n''') == '1'\nassert solution('''\n3\n4 9\n5 8\n''') == '3'\n\n\"\"\"\nTests\n\"\"\"\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    (\"input_s\", \"expected\"),\n    (\n            (\n                    \"2\",\n                    \"1\",\n            ),\n            (\n                    \"3\",\n                    \"7\",\n            ),\n    ),\n)\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '7'\nassert solution('2') == '1'\n\"\"\"\n\ns = input()\n\ns = s.split(\" \")\n\nb = list(map(int,s))\n\nprint(b)\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n3 10\n5 8\n\"\"\") == \"7\"\nassert solution(\"\"\"\n2\n3 8\n5 8\n\"\"\") == \"1\"\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3 10\n5 8\n''') == '7'\n\nassert solution('''\n2\n3 8\n5 8\n''') == '1'\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\nsimonsays smile\\n') =='smile'\nassert solution('1\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.'\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nSimon says raise your right hand.\\nLower your right hand.') =='raise your right hand.\\nraise your left hand.'\nassert solution('1\\nSimon says') ==''"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nSimon says raise your right hand.\nSimon says raise your left hand.\n''') == 'raise your right hand.\\nraise your left hand.'\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"Simon says smile.\") == \" smile.\"\nassert solution(\"Simon says raise your right hand.\") == \" raise your right hand.\"\nassert solution(\"Simon says raise your left hand.\") == \" raise your left hand.\""
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\nassert solution('2\\nLower your right hand.\\n') =='lower your right hand.'\nassert solution('3\\nSimon says raise your right hand.\\n') =='raise your right hand.'"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') =='smile.'\nassert solution('2') == 'raise your right hand.'\nassert solution('3') == 'raise your left hand.'"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile'\nassert solution('2\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your left hand'\nassert solution('3\\nSimon says raise your right hand.\\nLower your left hand.\\n') == 'raise your right hand'\nprint('Congratulations! All test cases passed.')\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') =='raise your right hand.'\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"2\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your left hand.\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nLower your left hand.\nSimon says raise your right hand.\nLower your right hand.\n''') == 'raise your right hand.'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 0 4 6 10 12 16 18\n''') == '5'\nassert solution('''\n1 2 4 6 10 12 16 18\n''') == '0'\nassert solution('''\n0 0 4 6 10 12 16 18\n''') == '0'\nassert solution('''\n1 2 4 6 10 12 16 18\n''') == '0'\nassert solution('''\n1 2 4 6 10 12 16 18\n''') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0 4 6 10 12 16 18\n''') == '5'\nassert solution('''\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '0'\nassert solution('''\n0 0 4 6 10 12 16 18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1 3 5 7 11 13 17 19\n''') == '0'\nassert solution('''\n2 1 2 4 6 10 12 16 18\n''') == '5'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\""
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\nAA\nAT\nTT\nTC''') == '3'\n\nassert solution('''4 1\nA''') == '2'"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\nAA\\nAA\\n') == '2 0 1'\n\nstdin = read_input()\nprint_answer(solution(stdin))\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\nAA\\nAT\\nTT\\nTC\") == \"2\"\nassert solution(\"5 1\\nAA\\nA\\nG\\nT\") == \"1\"\nassert solution(\"5 1\\nAA\\nA\\nG\\nG\") == \"0\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\nAA\\nAT\\nTT\\nTC\\n\") == \"2\"\nassert solution(\"5 1\\nA\\nA\\nG\\nT\\n\") == \"2\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"1 2\"\nassert solution(\"4 1\") == \"0 1\"\nassert solution(\"4 2\") == \"0 1\"\nassert solution(\"4 3\") == \"0 1\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2'"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\nAA\nAT\nTT\nTC\n''') == '3'\nassert solution('''\n4 1\nA\nA\nG\nT\n''') == '2'\nassert solution('''\n4 5\nAA\nGA\nAA\nAG\nTA\n''') == '4'\nassert solution('''\n4 1\nA\nA\nG\nT\n''') == '0'\nassert solution('''\n10 3\nAC\nAG\nAT\nCA\nCC\nGA\nGT\nTA\nTC\n''') == '9'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4\\nAA\\nAT\\nTT\\nTC\") == \"2\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\""
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\nAA\nAT\nTT\nTC\n''') == '3'\nassert solution('''\n4 1\nA\nA\nG\nT\n''') == '2'"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaaa') == 'a', \"Error\"\nassert solution('ab') == '-1', \"Error\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == \"-\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''bbb\nccc''') == '-1'\nassert solution('''aabbab\nbaabaa''') == 'a'\n\nassert solution('''bbabab\nbaabaa''') == 'b'\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 'a', f'Expected `a`, found `{solution(\"aaaa\")}`'\nassert solution('ab') == '-1', f'Expected `-1`, found `{solution(\"ab\")}`'\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == \"-1\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('2 2') == 'Dr. Chaz needs 1 more piece of chicken!'"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4') == \"Dr. Chaz will have 4 piece of chicken left over!\"\nassert solution('3 3') == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution('4 20') == \"Dr. Chaz needs 3 more piece[s] of chicken!\"\nassert solution('5 100') == \"Dr. Chaz needs 1 more piece[s] of chicken!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == \"Dr. Chaz will have 1 piece of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 100\n2 3''') == 'Dr. Chaz will have 1 piece of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"1 2\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 100\\n') == 'Dr. Chaz will have 80 pieces of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''20 100\n    2 3\n    ''') == 'Dr. Chaz will have 1 piece of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10\n1\n''') == 'Dr. Chaz will have 2 pieces of chicken left over!'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Dr. Chaz needs 1 more piece of chicken!\"\nassert solution(\"2\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''20 100\n2 3\n''') == 'Dr. Chaz will have 1 piece of chicken left over!'\nprint(solution('''2 3\n'''))\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\""
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 10\n1 1 2\n2 2 2\n3 2 1\n''') == '-2'\nassert solution('''\n3 10\n1 1 1\n5 2 3\n5 2 1\n''') == '0'"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\n\nassert solution('''3 100\n10 10 10\n1 1 1\n2 2 2\n3 2 1\n4 4 4\n5 2 3\n5 2 1\n6 6 6\n7 2 1\n8 2 1\n9 2 1\n10 2 1''') == '0'\n\nassert solution('''3 10\n1 1 2\n2 2 2\n3 2 1\n4 4 4\n5 2 3\n5 2 1\n6 6 6\n7 2 1\n8 2 1\n9 2 1\n10 2 1''') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"-2\"\nassert solution(\"3 30\") == \"0\"\nassert solution(\"4 6\") == \"0\"\nassert solution(\"4 30\") == \"0\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 40\\n1 1 2\\n5 2 3\\n5 2 1\") == \"0\"\nassert solution(\"3 50\\n1 1 2\\n5 2 3\\n5 2 1\") == \"-2\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1') == '-2'\nassert solution('3 10') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 10\\n1 1 2\\n5 2 3\\n5 2 1\") == '0'"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '-2'\nassert solution('3 30') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 20\\n1 1 1\\n5 2 3\\n5 2 1\") == \"1\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"as\"\nassert solution(\"4 4\") == \"kala\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala', 'First'\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\n''') == 'as', 'Second'\nprint('Congratulations! All test cases passed.')\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nluka\\n\") == \"kala\"\nassert solution(\"2 2\\nluka\\nkula\\ni#as\\n\") == \"as\"\nassert solution(\"3 3\\nluka\\n\") == \"luka\"\nassert solution(\"3 3\\nluka\\n\") == \"luka\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\nluka\\n#kala#\\ni#as') == 'kala'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala', 'First'\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\n''') == 'luka', 'Second'\nassert solution('''4 4\nluka\nkula\no#a#\ni#a#\n''') == 'luka', 'Third'\nassert solution('''4 4\nluka\nkula\ni#a#\no#a#\n''') == 'kula', 'Fourth'\n\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\nas''') == 'as'\n\nprint(solution('''4 4\nluka\no#a#\nkula\ni#a#\nas'''))\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\nluka\no#a#\nkula\ni#a#\n\"\"\") == \"luka\", \"Should return kula\"\nassert solution(\"\"\"\n3 2\nas\no#a#\nkula\ni#a#\n\"\"\") == \"kala\", \"Should return kala\"\nassert solution(\"\"\"\n4 4\nluka\no#a#\nkula\ni#a#\n\"\"\") == \"kala\", \"Should return kala\"\nassert solution(\"\"\"\n4 4\nluka\no#a#\nkula\ni#a#\n\"\"\") == \"luka\", \"Should return luka\"\nassert solution(\"\"\"\n6 5\nkala\nluka\no#a#\ni#a#\nkul#a#\nluka#a#\n\"\"\") == \"luka\", \"Should return luka\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'as'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"WNEENWEENEEN\") == \"10\"\nassert solution(\"NWSW\") == \"4\"\nassert solution(\"NESW\") == \"4\"\nassert solution(\"NESWNESW\") == \"13\"\nassert solution(\"NWNESW\") == \"13\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('N') == '1'\nassert solution('NNNNN') == '3'\nassert solution('NNNEE') == '6'\nassert solution('NNNNESSE') == '13'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('NSEW') == '4'\n\nprint(solution('NSEW'))"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('EENW') == ''\nassert solution('NNWNN') == ''\nassert solution('NNWNNE') == 'WN'\nassert solution('NNWWWW') == 'WN'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('WNEENWEENE') == '10'\n\nassert solution('NNEENWWM') == '15'\n\nprint(solution('NNEENWWM'))\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('NNEEW') == '10'\nassert solution('N') == '5'\nassert solution('W') == '2'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NNESWN') == '7'\nassert solution('NSEW') == '4'\n\"\"\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n\n''') == '''10'''\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('NESWN') == 'NESWN'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"WNMWME\") == \"EEN\""
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\"\nassert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\"\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 4\n''') == \"1 - 2 = 3 - 4\", \"First\"\nassert solution('''\n0 4 2 2\n''') == \"0 * 4 = 2 - 2\", \"Second\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2 3 4''') == '1 - 2 = 3 - 4', \"1 - 2 = 3 - 4\"\nassert solution('''0 4 2 2''') == '0 * 4 = 2 - 2', '0 * 4 = 2 - 2'\nassert solution('''0 4 2 2''') == '0 + 4 = 2 * 2', '0 + 4 = 2 + 2'\nassert solution('''0 4 2 2''') == '0 / 4 = 2 - 2', '0 / 4 = 2 - 2'\nassert solution('''-12 - 5''') == '-12 + 5 = -13', '-12 + 5 = -13'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 3 4''') == '1 - 2 = 3 - 4'\nassert solution('''0 4 2 2''') == '0 * 4 = 2 - 2'\nassert solution('''1 2 3 4''') == '1 + 2 = 3 + 4'\nassert solution('''0 4 2 2''') == '0 / 4 = 2 - 2'\n\nassert solution('''1 2 3 4''') == '1 - 2 = 3 - 4'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4', \"First\"\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2', \"Second\""
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2 3 4''') == '1 - 2 = 3 - 4'\nassert solution('''0 4 2 2''') == '0 * 4 = 2 - 2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    1 2 3 4\n    \"\"\"\n) == \"\"\"\n1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\"\"\"\nassert solution(\n    \"\"\"\n    0 4 2 2\n    \"\"\"\n) == \"\"\"\n0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2'\nassert solution('0.2 1.2 2.2') == '0.2 * 1.2 = 2.2 / 2.2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '0 * 4 = 2 - 2\\n1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nprint('All tests passed!')"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2'\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''BANANA PIDZAMA\nSAMPLE OUTPUT 1\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....''') == '''.T..\nMAMA\n.T..\n.A..'''\n\nassert solution('''MAMA TATA\nSAMPLE OUTPUT 2\n.T..\nMAMA\n.T..\n.A..''') == '''.T..\nMAMA\n.T..\n.A..'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''BANANA PIDZAMA\nSample Output 1:\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....''') == '4\\n.P.\\n.I.\\n.D.\\n.Z.\\n.B.\\n.A.\\n'\n\nassert solution('''MAMA TATA\nSample Output 2:\n.T..\nMAMA\n.T..\n.A..\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABBA') == '4'\nassert solution('CCBB') == '3'\n'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\""
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\""
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\nassert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA'"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABBA') == '4'\n\n'''\nfrom collections import deque\n\nclass Solution:\n    def solution(self, A, B):\n        # Your code here\n        pass"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\nassert solution('MAMA') == '...'\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''BANANA PIDZAMA\nMAMA TATA''') == '''.P....\nMAMA\n.T..\n.A..\n'''\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n10 14\n13 17\n25 26\n''') == '10'\nassert solution('''\n2\n1 365\n20 28\n''') == '365'"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '10'\nassert solution('1 365') == '10'\nassert solution('2 1 365') == '365'"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n10 14\n13 17\n25 26\n\"\"\"\n) == \"10\"\nassert solution(\n\"\"\"\n2\n1 365\n20 28\n\"\"\"\n) == \"365\"\nassert solution(\n\"\"\"\n5\n2 1\n3 4\n5 6\n1 2\n1 3\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '10'\nassert solution('2') == '365'"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '10'\nassert solution('2') == '365'\nassert solution('1 365') == '365'\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\"\nassert solution(stdin=\"1 365\\n20 28\\n\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\"\nassert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 365\n10 11\n10 12\n10 13\n10 14\n10 15\n10 16\n10 17\n11 18\n11 19\n11 20\n11 21\n11 22\n11 23\n11 24\n11 25\n11 26\n12 27\n12 28\n12 29\n12 30\n12 31\n12 32\n12 33\n12 34\n12 35\n12 36\n12 37\n13 38\n13 39\n13 40\n13 41\n13 42\n13 43\n13 44\n13 45\n13 46\n13 47\n13 48\n13 49\n14 50\n14 51\n14 52\n14 53\n14 54\n14 55\n14 56\n14 57\n14 58\n14 59\n15 60\n15 61\n15 62\n15 63\n15 64\n15 65\n15 66\n15 67\n15 68\n15 69\n15 70\n15 71\n15 72\n15 73\n15 74\n15 75\n15 76\n15 77\n15 78\n15 79\n15 80\n15 81\n15 82\n15 83\n15 84\n15 85\n16 86\n16 87\n16 88\n16 89\n16 90\n16 91\n16 92\n16 93\n16 94\n16 95\n16 96\n16 97\n16 98\n16 99\n17 100\n17 101\n17 102\n17 103\n17 104\n17 105\n17 106\n17 107\n17 108\n17 109\n17 110\n17 111\n17 112\n17 113\n17 114\n17 115\n17 116\n17 117\n17 118\n17 119\n17 120\n17 121\n17 122\n17 123\n17 124\n17 125\n17 126\n17 127\n18 128\n18 129\n18 130\n18 131\n18 132\n18 133\n18 134\n18 135\n18 136\n18 137\n18 138\n18 139\n18 140\n18 141\n18 142\n18 143\n18 144\n18 145\n18 146\n18 147\n18 148\n18 149\n18 150\n18 151\n18 152\n18 153\n18 154\n18 155\n18 156\n18 157\n18 158\n18 159\n18 160\n18 161\n18 162\n18 163\n18 164\n18 165\n18 166\n18 167\n18 168\n18 169\n18 170\n18 171\n18 172\n18 173\n18 174\n18 175\n18 176\n18 177\n18 178\n18 179\n18 180\n18 181\n18 182\n18 183\n18 184\n18 185\n18 186\n18 187\n18 188\n18 189\n18 190\n18 191\n18 192\n18 193\n18 194\n18 195\n18 196\n18 197\n18 198\n18 199\n19 200\n19 201\n19 202\n19 203\n19 204\n19 205\n19 206\n19 207\n19 208\n19 209\n19 210\n19 211\n19 212\n19 213\n19 214\n19 215\n19 216\n19 217\n19 218\n19 219\n19 220\n19 221\n19 222\n19 223\n19 224\n19 225\n19 226\n19 227\n19 228\n19 229\n19 230\n19 231\n19 232\n19 233\n19 234\n19 235\n19 236\n19 237\n19 238\n19 239\n19 240\n19 241\n19 242\n19 243\n19 244\n19 245\n19 246\n19 247\n19 248\n19 249\n19 250\n19 251\n19 252\n19 253\n19 254\n19 255\n19 256\n19 257\n19 258\n19 259\n19 260\n19 261\n19 262\n19 263\n19 264\n19 265\n19 266\n19 267\n19 268\n19 269\n19 270\n19 271\n19 272\n19 273\n19 274\n19 275\n19 276\n19 277\n19 278\n19 279\n19 280\n19 281\n19 282\n19 283\n19 284\n19 285\n19 286\n19 287\n19 288\n19 289\n19 290\n19 291\n19 292\n19 293\n19 294\n19 295\n19 296\n19 297\n19 298\n19 299\n20 300\n20 301\n20 302\n20 303\n20 304\n20 305\n20 306\n20 307\n20 308\n20 309\n20 310\n20 311\n20 312\n20 313\n20 314\n20 315\n20 316\n20 317\n20 318\n20 319\n20 320\n20 321\n20 322\n20 323\n20 324\n20 325\n20 326\n20 327\n20 328\n20 329\n20 330\n20 331\n20 332\n20 333\n20 334\n20 335\n20 336\n20 337\n20 338\n20 339\n20 340\n20 341\n20 342\n20 343\n20 344\n20 345\n20 346\n20 347\n20 348\n20 349\n20 350\n20 351\n20 352\n20 353\n20 354\n20 355\n20 356\n20 357\n20 358\n20 359\n20 360\n20 361\n20 362\n20 363\n20 364\n20 365\n20 366\n20 367\n20 368\n20 369\n20 370\n20 371\n20 372\n20 373\n20 374\n20 375\n20 376\n20 377\n20 378\n20 379\n20 380\n20 381\n20 382\n20 383\n20 384\n20 385\n20 386\n20 387\n20 388\n20 389\n20 390\n20 391\n20 392\n20 393\n20 394\n20 395\n20 396\n20 397\n20 398\n20 399\n20 400\n20 401\n20 402\n20 403\n20 404\n20 405\n20 406\n20 407\n20 408\n20 409\n20 410\n20 411\n20 412\n20 413\n20 414\n20 415\n20 416\n20 417\n20 418\n20 419\n20 420\n20 421\n20 422\n20 423\n20 424\n20 425\n20 426\n20 427\n20 428\n20 429\n20 430\n20 431\n20 432\n20 433\n20 434\n20 435\n20 436\n20 437\n20 438\n20 439\n20 440\n20 441\n20 442\n20 443\n20 444\n20 445\n20 446\n20 447\n20 448\n20 449\n20 450\n20 451\n20 452\n20 453\n20 454\n20 455\n20 456\n20 457\n20 458\n20 459\n20 460\n20 461\n20 462\n20 463\n20 464\n20 465\n20 466\n20 467\n20 468\n20 469\n20 470\n20 471\n20 472\n20 473\n20 474\n20 475\n20 476\n20 477\n20 478\n20 479\n20 480\n20 481\n20 482\n20 483\n20 484\n20 485\n20 486\n20 487\n20 488\n20 489\n20 490\n20 491\n20 492\n20 493\n20 494\n20 495\n20 496\n20 497\n20 498\n20 499\n20 500\n20 501\n20 502\n20 503\n20 504\n20 505\n20 506\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n10 14\n13 17\n25 26\n''') == '10'\n\nassert solution('''\n2\n1 365\n20 28\n''') == '365'\n\nassert solution('''\n5\n6 8\n1 2\n1 3\n1 4\n1 5\n''') == '6'\n\nassert solution('''\n1\n10\n''') == '10'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n''') == '0 1'\nassert solution('''\n3\n''') == '2 3'\nassert solution('''\n6\n''') == '2 3'\nprint('All tests passed')"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '0 1'\nassert solution('4\\n') == '2 3'\nassert solution('3\\n') == '0 1'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n''') == '0 1'\nassert solution('''4\n''') == '2 3'\n''')\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '0 1'\nassert solution('2\\n') == '2 3'"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n''') == 'B 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\\n'''\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"A A 0 0.2653061224\"\nassert solution(\"5 3\") == \"B 100 49\"\nassert solution(\"4 4\") == \"A 0 99\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == 'B 100 49'\nassert solution('4 4') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98''') == 'B 100 49'\nassert solution('''5 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\nSample Output 2:\nA 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\n\n''') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n') == 'A 100 49\\nA 0 197\\n'\n\n'''"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n''') == 'A 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\\n'''\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n''') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\nprint(solution('''4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n'''))\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"A 100 49\"\nassert solution(\"\"\"\n4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n\"\"\") == \"A 0 99\"\nassert solution(\"\"\"\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"A 1 197\"\nassert solution(\"\"\"\n5 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n\"\"\") == \"A 0 99\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'A 100 49'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n') == 'A 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('5 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '168'\nassert solution('2') == '1'\nprint(\"You're doing it right, motherfucker! It's 10/100\")\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '168'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '168'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('4') == '3'\nassert solution('3') == '5'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '168'\nassert solution('2') == '1'"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"16\"\nassert solution(\"5\") == \"25\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '168'\nassert solution('2') == '1'"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '6'\nassert solution('4') == '6'\nassert solution('5') == '12'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '168'\nassert solution('10') == '100000000'\nassert solution('0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"CBADEF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\nA\\nB\") == \"AB\"\nassert solution(\"3\\nAB\\nCD\") == \"ABCD\"\nassert solution(\"3\\nAB\\nEF\") == \"ABEF\"\nassert solution(\"2\\nAB\\nAB\") == \"AB\"\nassert solution(\"1\\nA\") == \"A\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"CBADEF\"\nassert solution(\"3 3\") == \"CDBEAF\"\nassert solution(\"3 3\") == \"CDBEAF\""
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n3 3\nABC\nDEF\n0\n    ''') == 'CBADEF'\n    print('Assertion passed')\nassert solution(\n    '''\n3 3\nABC\nDEF\n1\n    ''') == 'EDCBFD'\n    print('Assertion passed')\nassert solution(\n    '''\n3 3\nABC\nDEF\n2\n    ''') == 'CEDAFB'\n    print('Assertion passed')\nassert solution(\n    '''\n3 3\nABC\nDEF\n3\n    ''') == 'CADBEB'\n    print('Assertion passed')\nassert solution(\n    '''\n3 3\nABC\nDEF\n4\n    ''') == 'DEFABB'\n    print('Assertion passed')\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\nABC\nDEF\n0\n\"\"\") == \"CBADEF\"\nassert solution(\"\"\"\n3 3\nABC\nDEF\n1\n\"\"\") == \"CDBEAF\"\nassert solution(\"\"\"\n3 3\nABC\nDEF\n1\n\"\"\") == \"CDEBFD\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CBADEF', 'First'\nassert solution('''\n3 3\nABC\nDEF\n0\n''') == 'CDBEAF', 'Second'\nassert solution('''\n6 3\nABCDE\nEFGHI\nJKLM\nNOPQR\nSTUVW\nXYZ\n''') == 'JKLMNOPQRSTUVWXYZ', 'Third'\nassert solution('''\n6 3\nABCDE\nEFGHI\nJKLM\nNOPQR\nSTUVW\nXYZ\n0\n''') == 'NOPQRSTUVWXYZABCDE', 'Fourth'\nassert solution('''\n6 3\nABCDE\nEFGHI\nJKLM\nNOPQR\nSTUVW\nXYZ\n5\n''') == 'XYZNOPQRSTUVW', 'Fifth'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n0\n''') == \"CBADEF\"\nassert solution('''\n4 4\nBCA\nDFF\n0\n''') == \"CDBADF\"\nassert solution('''\n2 4\nAABC\nCDEE\n0\n''') == \"CDCDDB\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CBADEF'\n\nassert solution('''\n4 4\nABBA\nDDCB\nABBA\nBDDD\n''') == 'CDBAECDABADB'\n\nassert solution('''\n10 10\nABABABAB\nABCDEF\nABABABAB\nABCDEF\nABABABAB\nABCDEF\nABABABAB\nABCDEF\nABABABAB\nABCDEF\nABABABAB\nABCDEF\n''') == 'CBAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACABECDABCABAADDBACAB"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\nABC') == 'ABCDEF'\nassert solution('2\\n3\\nABC') == 'CDEBFA'\nassert solution('3\\n3\\nABC') == 'ABCDEF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CBADEF\"\nassert solution(\"3 3\\nABCDEF\\nEFGHI\\n2\") == \"EFGHICDBEF\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 3:\n4''') == '5'"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n5') == '4'\nassert solution('2\\n5') == '3'\nassert solution('3\\n5') == '1'\nassert solution('4\\n5') == '2'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"6\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n5\\n20 T') == '5'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n') == '4'\n\n##\nGiven an integer N, write a function which returns a dictionary mapping each integer X to its number of occurrences in the integer range 1 to N. For example, if N=5 and X=3 then the function should return {1:2, 2:2, 3:1, 4:1, 5:1}.\n\n##\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '5'\nassert solution('''\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n''') == '4'\nassert solution('''\n1\n4\n100 T\n100 T\n100 T\n100 T\n100 T\n100 T\n100 T\n100 T\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N\n100 N"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == \"18\\n19\\n20\"\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == \"16\\n17\\n18\\n19\\n20\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\nassert solution('''5 2\n1 2\n1 3\n3 2\n3 4\n4 2''') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 8\") == \"22\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2') == '4'\nassert solution('6\\n8') == '22'"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('8') == '2'\nassert solution('12') == '6'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('4 4') == '8'\nassert solution('10 5') == '25'\nassert solution('20 19') == '19'\nassert solution('40 50') == '58'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '8'\nassert solution('2 1') == '3'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('1 4') == '0'"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 3\n2 3 2 2 2 3\n''') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 2 3\") == \"2\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n') == '1'\nassert solution('5 4\\n') == '1'\nassert solution('2 3\\n') == '1'\nassert solution('1 2\\n') == '0'\nassert solution('1 1\\n') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\nassert solution('''1 4\n4 3 2 1\nSample Output 3:\n0''') == '0'\nassert solution('''3 4\n3 2 1\n1 3 1\n5 5\nSample Output 4:\n0''') == '0'\nassert solution('''4 6\n4 3 2 1\n1 3 1\n1 1 3\n5 5\nSample Output 5:\n0''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 2 3\n6 5 4\n7 8 9\n''') == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(samples.sample_input_1) == '1'\nassert solution(samples.sample_input_2) == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 4\n4 3 2 1\n''') == '1'\nassert solution('''\n3 3\n1 2 3\n6 5 4\n7 8 9\n''') == '0'\nassert solution('''\n5 5\n1 2 3 4 5\n5 5 5 5\n5 4 3 2 1\n7 8 9\n''') == '1'\nassert solution('''\n8 5\n1 2 3 4 5\n4 3 2 1\n5 5 5 5\n5 4 3 2 1\n7 8 9\n''') == '0'\n\n'''\nExpected output for sample input:\n1\n'''\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '28'\nassert solution('3') == '16'\nassert solution('10') == '28'"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '28'\nassert solution('3') == '16'\nassert solution('10') == '28'\nassert solution('3') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n10') == '16'\nassert solution('1\\n5\\n10') == '16'\nassert solution('1\\n6\\n10') == '16'\nassert solution('1\\n7\\n10') == '16'\nassert solution('1\\n8\\n10') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '28'\nassert solution('20') == '16'\nprint(solution(input()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n4\n6\n2\n12\nSample Output 2:\n16\n''') == '28'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"10\\n3\\n4\\n6\\n2\"\n) == \"28\"\nassert solution(\n    \"10\\n3\\n10\\n2\"\n) == \"16\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n3\n4\n6\n2\n12\n''') == '28'\nassert solution('''1\n10\n2\n12\n''') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10\n3\n4\n6\n2''') == '28'\nassert solution('''10\n3\n10\n2''') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n3\n4\n6\n2\n''') == '28'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n3\n4\n6\n2\n''') == '28'\nassert solution('''\n10\n3\n10\n2\n12\n''') == '16'"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 'no hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n'''\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"aassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''A\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 'no hiss'\nassert solution('mississippi') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"octoheptoctoheptoctoheptoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoctoct"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\nassert solution() == \"5\""
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''c++\nC++\nc\nc#\n''') == '3'\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''c++\nC++\nc\nc#\n''') == \"3\"\n\nassert solution('''5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux''') == \"5\"\n\nassert solution('''10\ndocker\nswagger\nrest\n''') == \"2\"\n\nassert solution('''10\nc++\nC++\nc\nc#\n''') == \"3\"\n\nassert solution('''10\nlinux\n''') == \"0\""
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\\\n4\nC++\nC#\nc\nc++\n''') == '3'\n\nassert solution('''\\\n5\nartificial intelligence\nblockchain\ncomputer science\npython\n''') == '5'\n\nassert solution('''\\\n12\nc#\nc++\nC++\nC#\nC#\nC#\nJava\nJava\nJava\nc#\nc++\nC#\nJava\nJavascript\nPython\nPython\nPython\nPython\nPython\nPython\n''') == '9'\n\nassert solution('''\\\n1000\nC++\nC#\nC++\nC#\nPython\nPython\nPython\nPython\nPython\nPython\nPython\nPython\nC#\nC++\nJava\nJava\nJava\nJava\nJavascript\nJavascript\nJavascript\nJava\nPython\nPython\nPython\nPython\nPython\nPython\n''') == '1'\n\nprint('Time: %.2fms' % ((__import__('time').time() * 1000)))"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '3', 'Test 1 fail'\nassert solution('5') == '4', 'Test 2 fail'\nassert solution('6') == '5', 'Test 3 fail'\nassert solution('7') == '6', 'Test 4 fail'\nassert solution('8') == '7', 'Test 5 fail'\n\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nc++\nC++\nc\nc#\n''') == '3'\nassert solution('''\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nC++\\nC#\\nCryptography\\nblockchain\\n') == '3'\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\nc++\nC++\nc\nc#\n''') == '3'\nassert solution('''4\nc++\nC++\nc\nc#\n''') == '4'\nassert solution('''5\nCryptography\nBlockchain\nArtificial intelligence\nMachine-learning\nLinux\n''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''T\nC\nC\nT''') == \"1\"\nassert solution('''C\nT\nG\nC\nC\nT''') == \"9\"\nassert solution('''TC\nC\nG\nC\nC\nT''') == \"22\"\nassert solution('''TCGTTC''') == \"21\"\nassert solution('''CCC''') == \"9\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\nprint(solution(input()))\n\n---Type hints---"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\""
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\nassert solution(\"TGCGGGCTCC\") == \"81\"\nassert solution(\"CGCGGGCTCC\") == \"81\"\nassert solution(\"GCCGGGCTCC\") == \"81\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"21\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n315\n45\nSample Output 2:\n90\n''') == '90'\nassert solution('''\n180\n270\nSample Output 2:\n90\n''') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\""
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"315\") == \"90\"\nassert solution(\"180\") == \"90\"\nassert solution(\"45\") == \"90\""
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join(['20', '90'])) == '0'\nassert solution('\\n'.join(['-180', '270'])) == '-90'\n\nassert solution('\\n'.join(['90', '90'])) == '90'\nassert solution('\\n'.join(['-90', '-90'])) == '-90'\n\nassert solution('\\n'.join(['-360', '0'])) == '0'\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('90') == '90'\nassert solution('180') == '180'\nassert solution('270') == '180'\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nprint(solution(input()))"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('-45') == '90'\nassert solution('90') == '-45'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0\\n90\\n\") == \"90\"\nassert solution(\"180\\n270\\n\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"315\") == \"90\"\nassert solution(\"180\") == \"90\"\nassert solution(\"-180\") == \"90\"\nassert solution(\"90\") == \"0\"\nassert solution(\"-270\") == \"90\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('1') == '0'\nassert solution('20') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == '3'\nassert solution(sample_input_2) == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 23 18 13 99') == '3'\nassert solution('5 2 2 3 3 5') == '2'\nassert solution('5 4 6 7 8 9 10') == '1'\nassert solution('5 5 5 5 5 5') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1\n23\n18\n13\n99\n''') == '3'\nassert solution('''\n5\n11\n20\n33\n40\n55\n''') == '1'\n'''\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\n'''\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99\n''') == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1\n23\n18\n13\n99\n''') == '3'\n\nassert solution('''\n5\n11\n20\n33\n40\n55\n''') == '1'\n\nassert solution('''\n5\n1\n23\n18\n13\n99\n''') == '2'\n\nassert solution('''\n5\n1\n23\n18\n13\n99\n''') == '1'\n\nassert solution('''\n5\n1\n23\n18\n13\n99\n''') == '2'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n5 1 23 18 13 99\n    \"\"\") == \"3\"\n\nassert solution(\n    \"\"\"\n3\n    \"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n3\n    \"\"\") == \"0\"\n\nassert solution(\n    \"\"\"\n2\n    \"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n1\n    \"\"\") == \"1\""
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\n\nassert solution(\"WBWBWBWB\") == \"1\"\n\nassert solution(\"WBBBBBWB\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '1'\nassert solution('WWWWBBB') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\nassert solution('''WBWBWWBWBWBW\nWBBWBWBWBWBW\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBBBBWBWBWBW''') == '1'\nassert solution('''WBWBWBWBWBWB\nWBBWBWBWBWBW\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBBBBWBWBWBW''') == '0'\nassert solution('''WBWBWBWBWBWB\nWBBWBWBWBWBW\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBBBBWBWBWBW''') == '0'\nassert solution('''WBWBWBWBWBWB\nWBBWBWBWBWBW\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBWBWBWBWBWB\nWBBBBWBWBWBW''') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('WWWWBBW') == '1'\nassert solution('WWWWBBBB') == '0'\n\n'''\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    WWWWBBW\n''') == '0'\nassert solution('''\n    WWWWBBB\n''') == '1'\nassert solution('''\n    WBBWWWWBBBBW\n''') == '1'\nassert solution('''\n    WWWWBBBWBBBBW\n''') == '0'\nassert solution('''\n    WWWWBBBWBBBBW\n    WWWWBBW\n''') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWBBW') == '0'\nassert solution('WWWWWWWW') == '1'\nassert solution('WWWWWWWW') == '1'\nassert solution('WWWWWWWWBB') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('WWWWBBW') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nassert solution
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\nprint(solution(input()))\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1') == '1.299038105676658'\nassert solution('2 2 3 2') == '3.0'\nassert solution('2 3 4 3') == '12.0'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '1.299038105676658'\nassert solution('3 3 3 3') == '9'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\nassert solution('1') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3 3\") == \"9\"\nassert solution(\"3 3 3 3\") == \"9\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2 3 4\n\"\"\") == \"1.299038105676658\"\nassert solution(\"\"\"\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n\"\"\") == \"1.5\"\nassert solution(\"\"\"\n2 2 2 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == '1.299038105676658'\nassert solution('3 2 2 3') == '5'\nassert solution('1 1 1 1') == '1'\n\nprint('All test cases passed.')"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooooobert\") == \"robert\"\nprint(\"Congratulations! Your solution is correct.\")"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"robert\") == \"robert\"\nassert solution(\"roobrhert\") == \"robert\"\nassert solution(\"roobrherz\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\""
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roobetter\") == \"robert\"\nassert solution(\"roobetterb\") == \"robert\"\nassert solution(\"roobetterbber\") == \"robert\"\nassert solution(\"roobertbber\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('roobraert') == 'robert'\nassert solution('roobraerts') == 'robert'\nassert solution('roobraerts2') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"robert\") == \"robert\"\nassert solution(\"roobboobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nrobert\nroooobert\nroobie\nroobert\n''') == 'robert'\n\nassert solution('''\nroobert\nroobie\nroobert\n''') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert', \"First\"\nassert solution('rooobert') == 'robert', \"Second\"\nassert solution('robert') == 'robert', \"Third\""
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1000 9 7') == '108 4'\nassert solution('1 1000 900 7') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1000 9 7\n''') == 'Impossible'\nassert solution('''\n1000 900 7\n''') == '108 4'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 9 7') == '108 4'\nassert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\nassert solution('10 9 7 9 5') == 'Impossible'\nassert solution('1') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Impossible'\nassert solution('2 3') == '3'\nassert solution('1 1') == '2'"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1000 9 7') == '108 4'\nassert solution('1 1000 900 7') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\nprint(solution(input()))\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1000000 9 5\n6''') == 'Impossible'\nassert solution('''10000 100 2\n8''') == '8'\n'''\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4\\n#...\\n...X\\n...X\\n#...X') == '2'\nassert solution('4 4\\n#.X.\\n.X.X\\n.X.X\\n.X.X') == '5'\nassert solution('4 4\\n.X.\\n...X\\n...X\\n...X') == '2'"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '1'\nassert solution('4 4') == '9'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4\\n.#...\\n...X..\\n....X.\\n') == '1\\n1\\n2\\n1\\n0\\n'\nassert solution('3 3\\n.X..\\n...#\\n.X..\\n') == '4\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '1'\nassert solution('2 4') == '0'\nassert solution('10 10') == '100'\nassert solution('2 2') == '11'\nassert solution('10 10') == '100'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\""
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n.#.\n..X.\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\nX..\\nX..\\nX..\\nX..\\nX..\") == \"1 1 1 1 0\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1953566'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\nprint('all tests passed')"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n23\n17\n43\n52\n22''') == '102'\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n2\n20\n3\n30\n40\n''') == '1953566'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '1000000000'\nassert solution('2\\n3\\n5\\n4\\n9') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1953566'\nassert solution('5') == '102'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1953566'\nassert solution('5') == '102'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"10\"\nassert solution(sys.stdin.read()) == \"100\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n212\n1253\n''') == '1953566'\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 10 10\n3 3 3\n''') == '0.000000 0.000000 0.000000'\nassert solution('''\n1 1 1\n1 1 1\n''') == '0.098612 0.098612 0.098612'\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10 10 10\n3 3 3''') == '0.000000 0.000000 0.000000'\nassert solution('''9 9 9\n3 2 1''') == '0.000000 3.000000 6.000000'"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\nassert solution('30 10 10\\n3 2 1') == '1.444444 1.222222 1.333333'\n\n__EXAMPLE__\nInput:\n5\n0 1\n3\n0\n1\n0\nOutput:\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 10 10\n3 3 3\n''') == '0.000000 0.000000 0.000000'\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nprint('Congratulations! Your solution is accepted.')\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 10 10') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9') == '0.000000 3.000000 6.000000'\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 10 10\n3 3 3''') == '0.000000 0.000000 0.000000'\nassert solution('''9 9 9\n3 2 1''') == '0.000000 3.000000 6.000000'\nprint('Congratulations! Your solution ({}) is correct.'.format(solution('''10 10 10\n3 3 3''')))\n\n\"\"\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 10 10\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\") == \"0.000000 3.000000 6.000000\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 10 10\n3 3 3\n''') == '0.000000 0.000000 0.000000'\nassert solution('''\n9 9 9\n3 2 1\n''') == '0.000000 3.000000 6.000000'\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\nassert solution('10 10 10\\n4 4 4') == '0.750000 1.250000 3.250000'\nassert solution('9 9 9\\n4 2 1') == '1.000000 3.000000 5.000000'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n'''"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\""
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\""
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('foss<<rritun') == 'forritun'"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('<') == '<'\nassert solution('<><') == '<'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\n    \"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"MS\"\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\""
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\n---Snippet 1---\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('MS') == 'MS'"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Estate or Copper\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 1 0') == 'Estate'\nassert solution('2 1 0') == 'Province'"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 0') == 'Province or Gold'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 0') == 'Estate or Copper'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 1 0') == 'Estate'\nassert solution('2 1 0') == 'Province'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Estate or Copper\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 0 1') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\nassert solution('10 3\\n80 90\\n') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\nassert solution('10 3\\n80 90\\n') == '75.7142857'\nassert solution('15 30\\n35 25\\n') == 'impossible'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"impossible\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"3 2\") == \"75.7142857\"\nassert solution(\"4 2\") == \"75.7142857\"\nassert solution(\"5 2\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n70 50\n''') == '90.00'\nassert solution('''\n10 3\n80 90\n''') == '75.7142857'\nprint(\"You're all set!\")"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1\n70 50\n\"\"\") == '90.00\n\nassert solution(\"\"\"\n10 3\n80 90\n\"\"\") == '75.7142857\n\nassert solution(\"\"\"\n2 4\n90 80\n\"\"\") == 'impossible'"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\nassert solution('10 3\\n80 90\\n') == '75.7142857'\nprint('All tests passed!')\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'impossible'\nassert solution('2 2') == 'impossible'\nassert solution('2 1') == '90.00'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'\n'''\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7\n2 3 1 5 4 7 6''') == '4 2 3 5 7'\nassert solution('''5\n1 2 3 4 5''') == '5 1 2 3 4 5'\nassert solution('''4\n2 3 1 5 4 7 6''') == '4 2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"4,1,2,3,5\"\nassert solution(\"\"\"\n7\n2 3 1 5 4 7 6\n\"\"\") == \"2,3,5,7\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4'\nassert solution('5\\n1 2 3 4 5') == '5'"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '6'\nassert solution('5') == '5'\nassert solution('4') == '4'\nassert solution('3') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5 1 2 3 4 5'\nassert solution('6\\n1 2 3 4 5 6') == '5 1 2 3 4 5 6'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '2 3'\nassert solution('2\\n2 3') == '2 3'\nassert solution('8\\n5 4 2 7 3 6 1') == '5 4 2 7 3 6 1'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4, 3, 5, 7'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n1 1 2 3 4 5 6 7 7\n''') == '4'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4,2,3,5,7'\nassert solution('5 1 2 3 4 5') == '5,1,2,3,4,5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 2''') == '2 1'\nassert solution('''5\n1 2 3 4 5''') == '5 1 2 3 4 5'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n0 10\n\"\"\") == \"\"\"9 25\"\"\"\n\nassert solution(\n\"\"\"\n24 10\n\"\"\") == \"\"\"23 45\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0 0'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"0 0\n0 30\"\"\") == \"\"\"23 45\n\nSample Input 3:\n0 2\nSample Output 3:\n0 4\"\"\"[1:-1]\nassert solution(\"\"\"1 0\n1 30\"\"\") == \"\"\"0 4\"\"\"[1:-1]\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '5 25'\nassert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2 0'\nassert solution('3 20') == '2 40'\nassert solution('0 10') == '23 45'"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1.000000\"\n) == \"1.000000\", 'Question 1, Part 1'\nassert solution(\n    \"2.000000\"\n) == \"1.414214\", 'Question 1, Part 2'\n\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.000000') == '1.414214'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1.000000') == '1.414214'\nprint('Congratulations!')"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.36788\\n') == '1.414214', 'First Test'\nassert solution('1.000000\\n') == '1.000000', 'Second Test'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.000000') == '1.414214'\nassert solution('2.000000') == '1.414214'"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('1.000000') == '1.000000'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.000000') == '1.414214'"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.000000') == '1.414214'\nassert solution('3.000000') == '1.414214'\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('150') == '50,50:'\n\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n5\n10,10\n10,10\n10,10\n5,5\n''') == '4:2,1'\nassert solution('''20\n50\n50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3:\n2,1\n''') == '3:2,1'\nassert solution('''50\n50:\n2,1\n''') == '50:2,1'\nassert solution('''25\n25:\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n''') == '25:2,2,3,2,5,4,5,5,6,5,10,10,13,12,17,16,25,25'"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('100') == '2,1'\nassert solution('200') == '2,2'\nassert solution('300') == '3,2'\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1:'\nassert solution('2') == '2:\n2,1\n2,2'\nassert solution('5') == '5:\n3,2\n5,4\n5,5'\nassert solution('50') == '50:\n2,1\n2,2'\nassert solution('3') == '3:'\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3:\n2,1\n2,2\n3,2''') == '3:2,1\\n2,2\\n3,2'\nassert solution('''50\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"100\") == \"100:\"\nassert solution(\"1000\") == \"1000:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '0:0'\nassert solution('1') == '1:1'\nassert solution('2') == '2:1'\nassert solution('5') == '5:1'\nassert solution('6') == '6:1'\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n''') == '3:2,1,2,2,3,2,2,3,5,4,5,5,6,5,5,5,10,10,13,12,17,16,25,25'\n\n'''\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"6\") == \"2,1\"\nassert solution(\"1000000\") == \"100000:100000:\""
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 'no'\nassert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n'''\n\nstdin = input()"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"no\"\nassert solution(\"THERAININSAIN\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes', '\ubc18\ub840\uc785\ub2c8\ub2e4.'\nassert solution('IN THE RAIN AND THE SNOW') == 'no', '\ubc18\ub840\uc785\ub2c8\ub2e4.'\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''THE RAIN IN SPAIN''') == 'yes'\nassert solution('''IN THE RAIN AND THE SNOW''') == 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nprint(\"\u2705 Valid Test Case Passed.\")"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"yes\"\nassert solution(\"\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nprint(solution(input()))\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\nTHE RAIN IN SPAIN\n\"\"\") == \"yes\"\nassert solution(r\"\"\"\nIN THE RAIN AND THE SNOW\n\"\"\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nassert solution_v2(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution_v2(\"RBLLLBRR\") == \"CHCS\""
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\""
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint(solution(input()))\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''RRBBBLLR\nRBLLLBRR''') == 'SSKKKHHS'\nassert solution('''RRRRLLRRLRRRRRRRLLRRRRRRLLRRRRRRRLLRRRRRRRLRRRRRRLLRRRLLRRLRRRRRRRLLRRRLRLLRRRLRRRLRLRLRLRLRLRLRLRLRRLLRRLRLRLRRLRLRLRLRLLRLLRRLRLLRLLRLRLRLLLLLLRRLLRRLLRLRRLRLRLRLRLRLRLRLRLRLRLRLLRLLRLRRLRLRRRLRLRLRLRLRLRRRRLLRRRRRRRRRLLRRRRLLRRRRRRRRRRRLRRRRLLRRRRRRRRRRRLRRRRRLLRLLRLRLRRRRRLRLRLRLRRLLLLRRLLRRRRRLLRRRRLLRRRRRRRLLRRRRRLLRLRLRLRLRLRLRLRLRLRLLRRLLRRLRLRLRLRLRLRLRLRRRRLLRLRLRLRLRLLRRRLRLRLRLRLLRRLLRRRLRLRLRLRLRLRLRRRLLRRRLRRLRLRLRLRLRLRLRLRLLRLLRLRLRLRLLRLRLRLRRRLRRLRRRLRLRLRLRLLRRLLRLRLRLRLRRRLRLRLRRRLRLLRRRLRLRLRRRRRLLRLRRRLRLRLRLLLLRRLRLRLLRLRLRLRLRLRRLLRLRRLRLRLLRLRLRLRLRLRLRLRLRLRLLRRLRLRLRLRLLRLRRRLRLRLRRLRLRLRLRLRLRLLRRLRLRLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLLLLRLLRLRLRLRRLLRRLRLRLLRRLLRLLRRRRRRLLRRRRLLRRRRRRRLRRRRRLLRLRLRLRLRLRLRLRLRLRLRLRLLRRRLRRLRLRLRLRRRLRLRRRRRRRLLRRRLRRLRLRLRLRLRLLRLLRLRLRLLRRLRLRLRLRLRLRLRLRLRLRLRLRLLRRLLRLRLRLRLRLRLRLRRRRLLRLRLRLRLRLRLRLLRLRLRLRRLRLLRLRLRLRLLRLRLRLRLLRRLRLRLRLLRRLRLRLRLRLLRRRLRRLRLRLLRRRLRRRRRLRRLRRRLLRRRRRRLRRLRLRLRLRLRLRLRLRLRLRLRLLRRLRLRLRLRLRLRLRLRRRLLRLRLRLRLRLRLRLLRLRLRLRLLRRRRRLLRRRLRLRLRLRRRLRRRLLRRRRRRLRLLRLRLRLRLRRLLLLLLRLRLRLRLRLRLLLRLRLRRLLRRLRLRLRLRRLRLRLRLLRRRLRRRRRLLRLRLRLRLRRRRRRLLRLRLRLRLRLRLRLRLRLRLLRRLLRLRLRLRLRLRLRLRLRRRRLLLLRLRLRLRLRLRLRLRLLRRLRLRLRLRLLRLRLRLRLRLRLRLRLRLRLRLRLLRLLRLRLRLRRLLRRLRLRLRLLRLLRLRLRLRLRRLLRRLRLRLRLRRRLRLRLRLLRLLRLRLRLLRLRLRLRLRLRLRLRLRLLRLLRLRLRLRLLRLRLRLRLRLRLRLRLRLLLLRLRLRLRLRLRLRLRLRLRLRLRLLLLRLRLRLRLRLRLRLRLRLRRLLRLRLRLRLRLRLRLRRRLRLRLRLRLLRLRLRLRRLLRRLRLRLRLRRLLRRLRLRLRLLRLRLRLRRLLRRRLLRRRLRLRLRLLRRLRLRLRLLLRLRLRRRLRRLRLRLRLLLLRLRLRLRLRLRLRLRLRRLLLLRRLRLRLRLRRLRLRLLLLLRLRLRRRLRRLRLRLRLLRLLRLRRRLRLLRLRLRLRLRLRLRLRLRLRLRLLRRLLLLRLRLRLRLRRLRRRLRLRLRLLRLRLRLRLRLRRLLLLRLRLRLRLRRLLRLLRLRLRLLRLLRLRLRLRLLLLRRRRRLLRRRRRLLRRRLRRLLRRRRRRRRRRRRRRRRRLLLLRLRRRRRRRRRRRRRLLLRRRLLRRRLLRRRRRRRLLRRRLLRRRLLRLRLRLRLRLRLLRLRLRLRLLLLRLRLRLRLLRLLRLRLRLLRRLRLRLRRLRLLRRRLRRLRLRLLRLRLRLRLLLLLLRLRLRLLRLRLRLRLRLLRRLLRLRLRLRLRRLLRRRRLRLRRLRLRLLRRLRLRLRLLRRRLRLRLLRLLRLRLRLLRRRLRLRLRLRLLRRRRRRLRLRRLRLRLLLLLRLRLRLLRLRLRLRLLRRLRLRLRLRLLRRLLRLRLRLRRLLLLRLRLRLRLLLLRLRLRLRLLLLRLRLRLRLLLLRRRLRLRLRLLRLLRLRLRLRLLLLRLRLRLRLLRRLRLRLRLRLLRLRRRLLRRLRLRLRLRRLLRLRLRLRLRRLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLLRRLRLRLRLRRRRRRRRRLRRLRRRLRLLRRLRLRLRLLRLLRRRLRLRLLRLRLRLRRRLRLRLRLRLLRRLLRLRLRLRLLLRLRLRLRLLLLRRLRLRLLLLRLRLRLRLLRRRRRLRLRLRLLRLRLRLRLLLLRLRLRLRLLRLRLRLRLRLLLLRLRLRLRLLRLLLLRLRRLLLRRRRLRLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLRRRRRRRRRRRRRRRRLRRRLLRLLRLLRLLLRLRLRLRLRRLLRRRLLLLRRLRLRLLRRRRRLRLRLLRLRRRLRLLLLRRLLRLRRLRLRLRLLLRRRRLRLRRLRRLLRRLRRRRRRRRRRRRRRRLLLLRRRRRRRRRRRRRLLRR"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''RRBBBLLR''') == 'SSKKKHHS'\nassert solution('''RBLLLBRR''') == 'CHCS'\nassert solution('''RLLLBBRLL''') == 'CHCS'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\nimport sys\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_sample_1) == output_sample_1\nassert solution(input_sample_2) == output_sample_2"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\""
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3 7\n1\nFizz''') == '1 Fizz'\n\nassert solution('''2 4 7\n1\nFizz''') == '1 Fizz'\n\nassert solution('''3 4 7\n1\nFizz''') == '1 Fizz'\n\nassert solution('''10 11 9\n9\nFizzBuzz\nFizz\n3\nFizz\n7\nFizz\n11\nFizz\n13\nFizzBuzz\n11\nFizz\n13\nFizz''') == '9 FizzBuzz 13 Fizz 11 11 13 13 Fizz7 Fizz13 13'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz'\nprint(solution(input()))\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3 7\n''') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('''\n2 4 7\n''') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\nassert solution('''\n1\n''') == '1\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\\n\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\nassert solution(\"0\\n0\\n0\\n\") == \"0\\n0\\n0\\n\"\nassert solution(\"1\\n1\\n1\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2, 3, 7]) == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution([2, 4, 7]) == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '1\\nFizz\\n2\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\nFizz\\nBuzz\\n', \"Error\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == 'It hadn\u2019t snowed this early in 3 years!'\nassert solution('2 10') == 'It hadn\u2019t snowed this early in 0 years!'"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"It had never snowed this early!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 3 3 2\\n\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"5 10\\n0 100\\n\") == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"It hadn't snowed this early in 0 years!\"\nassert solution(\n    \"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == 'It hadn\u2019t snowed this early in 3 years!\\n'\nassert solution('5 3') == 'It had never snowed this early!\\n'\nassert solution('3 2') == 'It hadn\u2019t snowed this early in 0 years!\\n'\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n3 3 3 2\n''') == 'It hadn't snowed this early in 3 years!'\nassert solution('''2 10\n0 100\n''') == 'It hadn't snowed this early in 0 years!'"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '4 2\\n'\n    '3 3 3 2\\n'\n    '0 100'\n) == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n3 3 3 2\n''') == 'It hadn't snowed this early in 3 years!'\nassert solution('''2 10\n0 100\n''') == 'It hadn't snowed this early in 0 years!'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\""
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n5') == '1'\nassert solution('3\\n6') == '2'\nassert solution('3\\n7') == '1'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"5 10\") == \"7\"\n\nstdin = input()\nn, s = map(int, stdin.split())\n\nassert solution(stdin) == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"6 2\") == \"5\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == output_string, \"FAILURE\"\nprint(\"SUCCESS\")\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 2\n''') == '2', \"First\"\nassert solution('''\n10 10\n''') == '7', \"Second\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 2\n''') == '2'\nassert solution('''10 10\n''') == '7'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 1') == '2'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\", \"First\"\nassert solution(\"koaski\") == \"koaski\", \"Second\"\nassert solution(\"grafici\") == \"grafici\", \"Third\"\n\n---Input---\nbok\nkoaski\ngrafici\n\n---Output---\nkakosi\nkoaski\ngrafici\n\n---Explanation---\nHere is what your program has to do:\n\nIn the first case, you have to write a program that has to find a matrix that encodes the message \"bok\". The matrix must have a number of rows between 1 and 4 (inclusive), and a number of columns between 1 and 16 (inclusive). If there are more than one such matrix, choose the one with the most columns.\n\nIn the second case, you have to write a program that has to decode a message written in column-major order. The message must be read in row-major order.\n\nIn the third case, you have to write a program that has to decode a message written in row-major order. The message must be read in column-major order.\n\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n'''\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n\n'''"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n\n\"\"\"\n\n###############################################################################\nimport itertools"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''bok\nkoaski''') == 'kakosi'"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(6) == \"8 2\"\nassert solution(7) == \"8 3\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2 2'\nassert solution('10') == '8 2'\nassert solution('10 9') == '10 2'\nassert solution('1 2') == '2 2'\nassert solution('1 10') == '8 2'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '2 2'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"8 2\"\nassert solution(\"5\") == \"8 3\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4 1'\nassert solution('20') == '4 4'\nassert solution('8') == '8 2'\nassert solution('16') == '8 4'\nassert solution('20') == '4 4'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n') == '8 2\\n'\nassert solution('7\\n') == '8 3\\n'\nprint(solution.__doc__)"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2 2'\nassert solution('7') == '3 2'\nassert solution('1') == '1 1'"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"8 2\"\nassert solution(\"4\") == \"8 3\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nstairs\n2\nerres airs ears ares aires aires aires aires aires aires aires aires aires aires aires aires\neet eat\n2\napples and pears\nplates of meat\n''') == 'YES'\n\nassert solution('''\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frantic\nforever in doubt\napples and pears\n''') == 'YES'\n\nassert solution('''\n''') == 'NO'\n\nassert solution('''\n''') == 'NO'\n\nassert solution('''\n''') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"drought\") == \"NO\"\nassert solution(\"stairs\") == \"YES\"\nassert solution(\"sunny\") == \"YES\"\nassert solution(\"sunny\") == \"YES\"\nassert solution(\"difficult\") == \"YES\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\nstairs\n2\nerres airs ears ares aires aires ares aires aires ares aires ares ares ares aires ares aires ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares are"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'YES'\nassert solution('eet eat') == 'YES'\nassert solution('eet eat') == 'YES'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('stairs') == 'YES', 'Simple test'\nassert solution('drought') == 'NO', 'Simple test'\nassert solution('eet eat') == 'YES', 'Simple test'\nassert solution('5') == 'NO', 'Simple test'\nassert solution('tasty sprout') == 'YES', 'Simple test'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n    stairs\n    2\n    erres\n    airs\n    ares\n    airs\n    '''\n    ) == 'YES'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('bates') == 'NO'\nassert solution('rose') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"YES\"\nassert solution(\"eet eat\") == \"NO\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"erres\") == \"NO\"\nassert solution(\"eet eat\") == \"YES\"\nassert solution(\"worried and fearful\") == \"YES\"\nassert solution(\"tasty sprout\") == \"YES\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nstairs\n2\nerres airs ears ares aires aires ares aires ares aires ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares ares are"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'WIN'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"WIN\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"NEITHER\"\n\n=======\n'''\nimport os, sys\nfrom collections import Counter\n\nn = int(input())\nstudent_list = sorted(input().split())\n\nincrease = Counter(student_list)\ndecrease = Counter(student_list)"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n\") == \"NEITHER\"\nprint(\"All test cases passed\")"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\nJOE\nBOB\nANDY\nAL\nADAM\n''') == 'DECREASING'\nassert solution('''\n11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\n''') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING', 'First'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER', 'Second'"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == \"DECREASING\", \"Wrong\"\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == \"NEITHER\", \"Wrong\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == 'INCREASING'"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'INCREASING', 'First Test'\nassert solution('11') == 'DECREASING', 'Second Test'\nassert solution('123') == 'INCREASING', 'Third Test'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"INCREASING\"\nassert solution(\"11\") == \"NEITHER\"\n\nassert solution(\"3\") == \"DECREASING\"\nassert solution(\"12\") == \"INCREASING\"\nassert solution(\"6\") == \"DECREASING\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'DECREASING'\nassert solution('11') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'INCREASING'\nassert solution('11') == 'NEITHER'"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\nKelly 1\n\"\"\") == \"John wins!\"\nassert solution(\"\"\"\n4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\n\"\"\") == \"Nina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3''') == 'George wins!'\nassert solution('''4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\nSample Output 2:\nNina wins!'''') == 'Nina wins!'\nprint('All tests passed')"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\nKelly 1\n''') == 'George wins!'''\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\nKelly 1\n''') == 'George wins!'\nassert solution('''\n4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\n''') == 'Nina wins!'"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\nKelly 1\n''') == 'George wins!'\nassert solution('''\n4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\n''') == 'Nina wins!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nGeorge 3\\nKelly 1\\n') == 'George wins!'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n' == 'Nina wins!'\nassert solution('5 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n' == 'Nina wins!'\nassert solution('8 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n' == 'Nina wins!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 3') == 'Nina wins!'\nassert solution('3 2 3') == 'Jess wins!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"George wins!\"\nassert solution(\"5 10 13\") == \"Nina wins!\""
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 0 0 2 7 6') == '2.0'\nprint(solution(input()))\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '0.0'\nassert solution('5 1 7 0 3 2') == '1.0'\nassert solution('0 0 0 2 2 2') == '1.0'\nassert solution('0 2 0 2 0 0') == '0.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 3 0 0 5 4\n2\n1\n5\n1\n3\n2''') == '2.0'\nassert solution('''0 0 -10 -9 -8 -7\n10\n-5\n-3\n0\n-1\n2''') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 0 0 1 5\n6 7 2 3\n''') == '2.0'\nassert solution('''\n1 0 0 2 5\n0 3 1 4\n''') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 0 0 2 7 6') == '2.0'\nprint('Congratulations!')"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nassert solution('4342') == '0'\nassert solution('1111111111') == '0'\nassert solution('123456789') == '0'\nprint(\"Congratulations! All test cases passed!\")\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2345\") == \"2\"\nassert solution(\"76\") == \"8\"\nassert solution(\"59\") == \"0\"\nassert solution(\"91853\") == \"91853\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\""
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('90') == '91'\nassert solution('54') == '55'\nassert solution('33') == '33'\nassert solution('45') == '46'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\nSample Output 2:\n4\n\nSample Input 3:\n6 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n199999 180000 170000 120000\n150000 190000 180000 170000\nSample Output 3:\n3\n\nSample Input 4:\n6 5\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n199999 180000 170000 120000\n150000 190000 180000 170000\nSample Output 4:\n2\n\nSample Input 5:\n3 2\n190000 170000\n140000 160000\n199999 180000\nSample Output 5:\n1\n''') == '4'"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n''') == '4'\nassert solution('''\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n''') == '3'\n''')\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '4'\nassert solution('7') == '4'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == \"4\"\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == \"3\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\""
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == '4', \"Should return 4\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n150000 100000 160000 100000 180000''') == '4'\nassert solution('''5 4\n190000 170000 140000 160000''') == '3'\nassert solution('''6 4\n185000 180000 170000 120000''') == '5'\n''')\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"1\"\nassert solution(\"42\") == \"6\"\n\nstdin = \"\"\"\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n''') == \"10\"\n\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n''') == \"6\"\n\nassert solution('''\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n''') == \"1\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"42\") == \"6\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '10'\nassert solution('42\\n84\\n252') == '6'\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '10', 'Should output 10'\nassert solution('42') == '1', 'Should output 1'\nassert solution('84') == '1', 'Should output 1'\nassert solution('252') == '1', 'Should output 1'\nassert solution('840') == '1', 'Should output 1'\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == \"10\", \"Wrong Answer\"\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == \"1\", \"Wrong Answer\""
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '10'\nassert solution('42') == '6'\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"42\") == \"6\"\n\n---"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '10'\nassert solution('42') == '6'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n16 3\n''') == 'yes'\nassert solution('''\n1 0\n''') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'yes'\nassert solution('10 1') == 'no'\nassert solution('1 1') == 'yes'"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13 3\\n') == 'yes\\n'\nassert solution('1 0\\n') == 'no\\n'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n100\n98\n95\n96\n100\n''') == 'yes'\nassert solution('''\n5 3\n8\n7\n6\n5\n''') == 'no'\nassert solution('''\n5 3\n4\n3\n2\n1\n''') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == 'yes\\n'\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('13 3') == 'yes', \"Should return yes if all N files are compressed to at most b bits\"\nassert solution('1 0') == 'no', \"Should return no if none of the N files are compressed to at most b bits\"\n\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13 3\\n') == 'yes'\nassert solution('1 0\\n') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n3 5\\n') == 'no'\nassert solution('10 2\\n5 0\\n') == 'yes'\nassert solution('1000 2\\n50 0\\n') == 'yes'\nassert solution('1000 3\\n50 0\\n') == 'no'\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'yes'\nassert solution('1 0') == 'no'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\n##Write code to read lines from a text file\n##Create a function that reads lines from a text file and returns a list of the lines.\n\n##Write code to read lines from a text file and return a list of the lines.\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''P01K02H03H04\nH02H10P11H02''') == '12 12 11 13'\nprint('The local tests are done!')\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''P01K02H03H04\nH02H10P11H02''') == '12 12 11 13'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\""
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\", \"Should be 12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\", \"Should be GRESKA\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''P01K02H03H04''') == '12 12 11 13'\nassert solution('''H02H10P11H02''') == 'GRESKA'"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 5 3\n.....\n.*.*.\n.....\n.*.*.\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 5 2\n...*..\n...*..\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 3') == '1'\nassert solution('7 6 4') == '2'\nassert solution('11 3 4') == '0'\nassert solution('11 5 3') == '3'"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 5 3\n.....\n.*.*.\n.....\n*....*\n\"\"\") == \"1\", \"First Example\"\nassert solution(\"\"\"\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n\"\"\") == \"2\", \"Second Example\"\nassert solution(\"\"\"\n10 10 4\n*........*\n*........*\n.**.**.**.\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n\"\"\") == \"7\", \"Third Example\"\nassert solution(\"\"\"\n9 10 10\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n\"\"\") == \"15\", \"Fourth Example\"\nassert solution(\"\"\"\n16 10 6\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n*........*\n\"\"\") == \"35\", \"Fifth Example\""
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 5 3\n.....\n.*.*.\n.....\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n\"\"\") == \"2\"\nassert solution(\"\"\"\n14 11 4\n*....*.\n.*.*.*.\n........\n........\n.**.*...\n.*...*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**.*.*.\n.**"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 5 3\n.....\n.*.*.\n.....\n\"\"\") == \"1\"\nassert solution(\"\"\"7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\n\nassert solution('''3 5 3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\n\nassert solution('''10 10 2\n.......\n....*.\n.**.*.\n.*.*..\n..*...\n..*...\n.*...*\n.......\n''') == '1'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\nassert solution('''\n7 6 4\n.**.\n.**.\n.**.\n.**.\n.**.\n.**.\n*....*\n''') == '1'\n\nprint(solution(open('input.txt')))\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n*....''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*''') == '2'\nprint(solution('''10 8 9\n........\n*........\n*........\n*........\n*........\n*........\n*........\n*........\n........*'''))\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2C 4D 4H 2D 2H\") == \"3\"\nassert solution(\n    \"AC AD AH AS KD\") == \"4\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nAC AD AH AS KD\n''') == '4'\nassert solution('''\n2C 4D 4H 2D 2H\n''') == '3'\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''AC AD AH AS KD\n                    2C 4D 4H 2D 2H''') == '4'\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''AC AD AH AS KD\n                    CD HS JS KD''') == \"3\"\nprint(solution('''AC AD AH AS KD\n                    CD HS JS KD'''))\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5\\n2 1 1 1 0 1\\n') == '5'\nassert solution('3 2\\n2 1 1 1 1\\n') == '7'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6 5\n2 1 1 1 0 1\"\"\") == \"5\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\""
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5') == '5'\nassert solution('5 1') == '7'\nassert solution('5 0') == '6'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1\\n') == '5'\nassert solution('5 1\\n0 0 0 0 0\\n') == '7'"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2','sample case 1'\nassert solution('4 1') == '5','sample case 2'\nassert solution('5 1') == '7','sample case 3'\nassert solution('5 2') == '7','sample case 4'"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 5\n2 1 1 1 0 1''') == '5'\nassert solution('''6 1\n0 0 0 0 0''') == '6'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 5\n2 1 1 1 0 1''') == '5'\nassert solution('''5 1\n0 0 0 0 0''') == '7'\nprint(solution('''6 5\n2 1 1 1 0 1\n'''))"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5\n2 1 1 1 0 1\n''') == '5'\nassert solution('''\n5 1\n0 0 0 0 0\n''') == '7'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"5\"\nassert solution(\"6 5\") == \"7\"\nassert solution(\"10 10\") == \"41\""
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('what\\'s the Frequency, Kenneth?\\n') == '\\/\\/[-]@\\'][''$ \\'][\\'[-]3 #|Z3(,|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('Hello World!\\n') == 'Hello World!\\n'\nassert solution('What's the Frequency, Kenneth?\\n') == '@11` 0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('Atomic Habits:  10^10\\n') == '@1`0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_|1 0|_"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Hello World!') == '[-]3110 \\\\/\\/0|Z1|)!\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?'\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n                                                    '\\'][\\'$ \\'][\\'[-]3 #|Z3(,|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ \\'][\\'[-]3 #|Z3(,|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?'''"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"What's the Frequency, Kenneth?\\n\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\nassert solution(\"What's the Frequency, Kenneth?\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"hello world!\") == \"h-e-l-l-o-w-o-r-d-!\"\nassert solution(\"I love tea and coffee\") == \"i-n-_v-_g-r-_h-e-t-iy-n-a-l-iy-c-f-iy-o-r-iy-!\"\n\nstdin = \"hello world!\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''What's the Frequency, Kenneth?''') == '\\/\\/[-]@\\'][''$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3'\nprint(solution('''What's the Frequency, Kenneth?'''))\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\nprint(solution(input()))\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Hello World!') == '-3110 \\\\\\/ 0|Z1 |)!'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == 'Alice'\nassert solution('''\n2\n''') == 'Bob'\n'''\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Bob'\nassert solution('1') == 'Alice'\nassert solution('0') == 'Bob'\nassert solution('-1') == 'Alice'\nassert solution('-2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5''') == 'Alice'\nassert solution('''6''') == 'Bob'\nassert solution('''10''') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n''') == 'Alice'\nassert solution('''\n2\n''') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2''') == 'Bob'\nassert solution('''1''') == 'Alice'\nassert solution('''1000''') == 'Alice'\nassert solution('''100000''') == 'Alice'\nassert solution('''3''') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('4') == 'Bob'\nassert solution('10') == 'Alice'\nassert solution('2') == 'Bob'\n\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    this\n    sentence\n    has\n    $\n    letters\n''') == 'this sentence has thirtyone letters'\n\nassert solution('''\n    $\n    is\n    the\n    number\n    of\n    letters\n    here\n''') == 'thirty is the number of letters here'"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'thirty is the number of letters here'\nprint('all test cases are passed')\n\"\"\"\n\nimport sys\nsys.stdin = open(file='data/22/26-1.data')\n\nN = int(input())\n\nfor _ in range(N):\n    print(''.join(str(input()).count(i) for i in set(input())))\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'one'\nassert solution('2') == 'two'\nassert solution('3') == 'three'\nassert solution('4') == 'four'\nassert solution('5') == 'five'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == 'one two three four five six seven'\nassert solution('10\\nthis sentence\\nhas\\n$\\nletters\\nhere') == 'ten this sentence has $ letters here'\nassert solution('2\\n3\\n$\\nletters\\nhere') == 'three zeroes and $ letters here'\nassert solution('4\\n$\\nwords\\n$\\nwithout\\nnumbers\\nhere') == 'four zeroes and $ words without numbers here'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'this sentence has thirtyone letters'\nassert solution('7') == 'thirty is the number of letters here'"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\ntwo\\nthree\\nfour\\nfive\\nsix\\nseven\\neight\\nnine\\nten\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nthis\nsentence\nhas\n$\nletters\nSample Input 3:\n8\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n$\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n' +\n                 'a\\n'*10000 +\n                 'b\\n') == '1a'*10000 + 'b'"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == 'four', solution('4')\nassert solution('5') == 'five', solution('5')\nassert solution('5') == 'five', solution('5')\nassert solution('12') == 'twelve', solution('12')\nassert solution('12') == 'twelve', solution('12')\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''this\nsentence\nhas\n$\nletters\n''') == 'thirty is the number of letters here'\nassert solution('''$\nis\nthe\nnumber\nof\nletters\nhere\n''') == 'thirty is the number of letters here'\nassert solution('''$\nis\nthe\nnumber\nof\nletters\nhere\n$\n''') == 'thirty is the number of letters here'\nassert solution('''$\nis\nthe\nnumber\nof\nletters\nhere\n''') == 'thirty is the number of letters here'\nassert solution('''$\nis\nthe\nnumber\nof\nletters\nhere\n$\n''') == 'thirty is the number of letters here'\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\n'''"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\nassert solution('AA') == '2'\nassert solution('ABCD') == '2'\n\nassert solution('AAB') == '1'\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\nprint('Congratulations, have fun with Advent of Code!')\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\nassert solution('EaEbFAbG') == '0'\nassert solution('EaFAbBcG') == '1'\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\nassert solution('accccccbb') == 1\nassert solution('aaabccccbb') == 0\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == \"0\"\n\nassert solution('''\nE\n\na\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'Even 6'\nassert solution('3 3') == 'Odd 6'\n\n-----------------------------------------------------------\n\nWrite a program that takes a string of words and returns a string that is \nthe concatenation of the first word with all of its occurrences.\n\nA word is a sequence of characters that are not whitespace.\n\n-----------------------------------------------------------\n\nWrite a program that takes a string and returns the number of vowels in the \nstring. A vowel is defined as the following characters: 'a', 'e', 'i', 'o', 'u'.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns the largest\nvalue in the list.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of strings and returns the string that \nappears most often in the list.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of strings\nthat contains the integers in the list that are evenly spaced between 1 and \n10 (inclusive).\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of strings and returns a list of strings\nthat contains the strings in the list that are NOT in the list.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of words and returns a list of words that \ncontains all the letters in the list that are not repeated in the list.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns the number of integers \nin the list that are even.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of strings and returns a list of strings \nthat contains all the letters in the list that are not repeated in the list.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns the number of integers \nin the list that are odd.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 5.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3 but are \nalso not a multiple of 5.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are both a multiple of 3 and a \nmultiple of 5.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3 and are \nnot a multiple of 5.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3 and are \nalso not a multiple of 5 and are not a multiple of 7.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3 or 5 or \nare not a multiple of 7.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3 or 5 or \nare not a multiple of 7 and are not a multiple of 9.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7 \nand 9.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7 \nand 9 and are not a multiple of 11.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7 \nand 9 and are not a multiple of 11 and are not a multiple of 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, and 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, 9, \nand 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, and 13 and are not a multiple of 11 and are not a multiple of 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, 11, and 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, 11, and 13 and are not a multiple of 11 and are not a multiple of 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, 11, 13, and are not a multiple of 11 and are not a multiple of 13.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, 11, 13, and are not a multiple of 11 and are not a multiple of 13 and are \nnot a multiple of 17.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, 11, 13, and are not a multiple of 11 and are not a multiple of 13 and are \nnot a multiple of 17 and are not a multiple of 19.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all the numbers in the list that are not a multiple of 3, 5, 7, \n9, 11, 13, 17, and are not a multiple of 11 and are not a multiple of 13 \nand are not a multiple of 17 and are not a multiple of 19.\n\n-----------------------------------------------------------\n\nWrite a program that takes a list of integers and returns a list of integers \nthat contains all"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Even 6'\nassert solution('3 3') == 'Odd 6'\nassert solution('4 3') == 'Not a moose'\nassert solution('3 1') == 'Odd 1'\nassert solution('1 1') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\n### Test Case 2\n------Input------\nInput\n5 5\nOutput\nEven 10\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n\") == \"Odd 6\"\nassert solution(\"3 3\\n\") == \"Even 6\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Even 2\"\nassert solution(\"2 1\") == \"Odd 2\"\nassert solution(\"3 1\") == \"Odd 2\"\nassert solution(\"4 1\") == \"Odd 2\"\nassert solution(\"5 1\") == \"Odd 2\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\""
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\"tomo\", \"mono\", \"dak\", \"6666\"]) == \"2\""
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"j\"\nassert solution(\"abc\") == \"a\"\n\nassert solution(\"55\") == \"j\"\nassert solution(\"1111\") == \"j\"\n\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n2\\nabc\\ndef\\n4\\n5\\n6\\nghi\\njkl\\nmno\\npqrs\\ntuv\\nwxyz') == '3'\nassert solution('2\\nab\\ncd\\nef\\ngh\\nij\\nkl\\nmo\\npq\\ntu\\nxy\\n') == '2'\nassert solution('3\\n13\\n87\\n11\\n23\\n45\\n55\\n21\\n12\\n56\\n65\\n17\\n24\\n54\\n10\\n22\\n37\\n') == '1'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\n\n'''\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n2\\n4\\n') == '1\\n2'\nassert solution('2\\n4\\n') == '2'\nassert solution('4\\n') == '0'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\nja\\nla') == '2'\n\nassert solution('3\\ntomo\\nmono\\ndak') == '1'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\ntomo\nmono\ndak\n6666\n''') == '1', 'First'\n\nassert solution('''\nja\nla\n52\n''') == '2', 'Second'\n\n\"\"\"\n\nfrom itertools import cycle"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n3\n''') == '2', 'First'\n\nassert solution('''\n1\n1\n2\n''') == '1', 'Second'\n\nassert solution('''\n5\n12\nabcd\n123\nabcd\nbaca\n123\nbaca\n''') == '3', 'Third'\n\nprint(solution('''\n1\n1\n2\n'''))\n\nprint(solution('''\n2\n1\n2\n'''))\n\nprint(solution('''\n5\n12\nabcd\n123\nabcd\nbaca\n123\nbaca\n'''))\n\nprint(solution('''\n6\n12\nabcd\n123\nabcd\nbaca\n123\nbaca\n'''))\n\nprint(solution('''\n7\n12\nabcd\n123\nabcd\nbaca\n123\nbaca\n'''))\n\nprint(solution('''\n10\n12\nabcd\n123\nabcd\nbaca\n123\nbaca\n1234\nabc\n123\nabcd\nbaca\n123\nbaca\n'''))\n\nprint(solution('''\n100\n12\nabcd\n123\nabcd\nbaca\n123\nbaca\n1234\nabc\n123\nabcd\nbaca\n123\nbaca\n'''))\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '1\\n2\\n4\\n8\\n'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\ntomo\nmono\ndak\n''') == '1'\nassert solution('''\n1\nka\n''') == '2'\n\nassert solution('''\n2\nja\nla\n''') == '2'\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nprint(solution(input()))\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\""
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('A') == '..#..'\nassert solution('DOG') == '..#...#...*..'\n'''"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\nstdin = 'A'\nprint(solution(stdin))\n\nstdin = 'DOG'\nprint(solution(stdin))\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('A') == '..#..'\nassert solution('DOG') == '..#...#...*..'\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"DOG\") == \"...#..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('A') == '..#..'\nassert solution('DOG') == '..#...#...*..'\nprint('All tests passed.')\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\""
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"3.141593\"\nassert solution(\"21\\n\") == \"1385.442360\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n\nstdin = '1'"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2.000000'\nassert solution('21') == '1385.442360'\nassert solution('1') == '3.141593'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 -2 3\n''') == '2'\nassert solution('''\n5\n129 44 394 253 147\n''') == '0'\nassert solution('''\n''') == '0'"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '0'\nassert solution('1 2 3') == '4'\nassert solution('129 44 394 253 147') == '0'\nassert solution('-4 -5 0') == '-4'"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 -2 3\n''') == '2'\nassert solution('''\n3\n1 -2 3\n''') == '2'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 -2 3') == '2'\nassert solution('5129 44 394 253 147') == '0'\nassert solution('3-4 5') == '1'\nassert solution('5-6 1') == '1'\nassert solution('1 2 2') == '3'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    1 -2 3\n    ''') == '2'\nassert solution('''\n    5\n    129 44 394 253 147\n    ''') == '0'\n''')\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 -2 3\n''') == '2'\nassert solution('''\n5\n129 44 394 253 147\n''') == '0'\nprint('All tests passed!')\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2\\n') == '6'\nassert solution('3\\n4 1 2\\n') == '8'\n\nIn the second test, both teams are already prepared. The first and the third team will not be taught an algorithm, and thus the third team will not learn the first team. Therefore, the second team has to wait for the first team to finish, which will take 2 hours. So the total time will be 10 hours.\n\n### n = int(input())\n### algo_a = list(map(int, input().split()))\n### algo_b = list(map(int, input().split()))\n### algo_a.sort(reverse=True)\n### algo_b.sort(reverse=True)\n### algo_a.extend(algo_b)\n### algo_a.sort()\n### print(sum(algo_a))\n\n### n = int(input())\n### algo_a = list(map(int, input().split()))\n### algo_b = list(map(int, input().split()))\n### algo_a.sort(reverse=True)\n### algo_b.sort(reverse=True)\n### algo_a.extend(algo_b)\n### algo_a.sort()\n### print(sum(algo_a[:n]))\n\n####\n\na = input()\nlist_a = list(map(int, input().split()))\na.sort(reverse=True)\nlist_a.sort(reverse=True)\nlist_a.extend(a)\nlist_a.sort()\nprint(sum(list_a[:int(a)]))\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 2 2 2') == '8'\nassert solution('6\\n2 2 2 1 2') == '10'\nassert solution('8\\n5 5 4 4 4 2 2') == '14'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('3') == '8'\nprint(solution(input()))\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '8'"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"8\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"8\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '8'\nassert solution('4') == '11'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('7') == '9'\nassert solution('12') == '18'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    2 2 2\n    \"\"\"\n) == \"6\"\n\nassert solution(\n    \"\"\"\n    3\n    4 1 2\n    \"\"\"\n) == \"8\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '8'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 4 4\n1111\n1S01\n1011\n0L11\nSample Output 2:\nNOT POSSIBLE\n''') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 4\n1111\n1S01\n1011\n0U11\nSample Output 2:\n2''') == '2'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4 4\n1111\n1S01\n1011\n0U11\n''') == '2'\nassert solution('''\n2 5 5\n1011101\n011111\n1011111\n1S01\n1011101\n011111\n1011111\n1S01\n1011111\n011111\n1011111\n1S01\n1011111\n011111\n1011111\n1S01\n1011111\n011111\n1011111\n''') == '1'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 2\n1S10\n01S11\n''') == '2'\nassert solution('''\n3 3 4\n1S11\n01L01\n0U00\n''') == '3'\n'''\nSample Input 3:\n2 2 3\n11\n1S0\n'''\nassert solution('''\n2 3 2\n11\n1S0\n''') == 'NOT POSSIBLE'\n'''\nSample Input 4:\n2 2 2\n11\n1S0\n01U1\n'''\nassert solution('''\n2 2 2\n11\n1S0\n01U1\n''') == 'NOT POSSIBLE'\n'''\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 4 4\n1111\n1S01\n1011\n0U11\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 4 4\n1111\n1S01\n1011\n0L11\n\"\"\") == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 1\n1\n1 1\n1\n1 1\n1\n0 1\n1 1\n1\n1\n1\n0 1\n1\n0 1\n1 1\n1 1\n1\n1 1\n1\n0 1\n1 1\n1\n1\n1\n0 1\n1 1\n1\n0 1\n1 1\n1\n1\n1\n1\n0 1\n1 1\n1 1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n0 1\n1 1\n1\n0 1\n1 1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0 1\n1 1\n1\n1\n1\n1\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == '2'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n3 1 2 1 1\n''') == '4'\nassert solution('''\n7 5\n1 5 4 3 2 1 1\n''') == '3'\nassert solution('''\n6 4\n1 5 4 3 2 1\n''') == '2'\nassert solution('''\n10 10\n1 5 4 3 2 1 1 2 2 3\n''') == '5'\nassert solution('''\n3 1\n2 1 1\n''') == '2'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n5 5\n3 1 2 1 1\n''') == '4'\n\nassert solution(\n'''\n7 5\n1 5 4 3 2 1 1\n''') == '3'\n\nassert solution(\n'''\n1 5\n1 1\n''') == '1'\n\nassert solution(\n'''\n1 5\n1 1\n''') == '1'\n\nassert solution(\n'''\n5 5\n1 2 1 2 1\n''') == '5'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution('5 5') == \"4\"\nassert solution('7 5') == \"3\""
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1') == '4'\nassert solution('5 1') == '5'\nassert solution('5 2') == '4'\nassert solution('5 3') == '3'\nassert solution('5 4') == '2'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"4\"\nassert solution(\"7 5\") == \"3\""
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 5\") == \"4\"\nassert solution(\"10 7\") == \"3\"\nassert solution(\"5 1 2 1 1\") == \"4\""
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n) == \"2\"\nassert solution(\n    \"5 5\\n\"\n    \"1 1 1 1 1\\n\"\n) == \"4\"\nassert solution(\n    \"10 10\\n\"\n    \"2 1 3 2 1\\n\"\n) == \"2\""
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 3\n1 3 1 1 2 1 2 2\n''') == '4'\nprint('PASSED')"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n3 1 2 1 1\n''') == '4', '''Sample Test'''\nassert solution('''\n7 5\n1 5 4 3 2 1 1\n''') == '3', '''Sample Test'''"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 1 2 1 1\n''') == '4'\nassert solution('''\n7\n1 5 4 3 2 1 1\n''') == '3'\nassert solution('''\n5\n1 2 1 1 1\n''') == '1'\nassert solution('''\n7\n1 1 2 2 2 2 1 1\n''') == '1'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '5'\n\nassert solution(input()) == '10'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\nSSPPR\n3\nPPRRS\nRRSSP''') == '10'\nassert solution('''5\nSSPPR\n3\nPPRRS\nRRSSP\nPPRRS''') == '15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\nSPPRSS\") == \"4\\n10\"\nassert solution(\"4\\nPPSSP\") == \"4\\n5\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('2') == '10'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"3\") == \"15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nSSPPR\n1\nSSPPR\n2\nPPRRS\nRRSSP''') == '10'\n\nassert solution('''5\nSSPPR\n1\nSSPPR\n2\nPPRRS\nRRSSP''') == '15'"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nSSSSPSP\\n\") == \"15\"\nassert solution(\"2\\nSPPRS\\n\") == \"10\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\"\nassert solution(\"5\\nSSPPR\\n1\\nPPRRS\\nRRSSP\") == \"15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\nSPSR\\nPPSR\\nPPSR\\nRPSR\") == \"15\"\nassert solution(\"3\\nSS\\nP\\nR\") == \"10\""
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') =='still running'\nassert solution('2') == '4'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '4'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\\n5\\n2\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == None\nassert solution(\"\") == \"\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nassert solution('5') =='still running'\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"5\") == \"still running\""
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('5') =='still running'\nassert solution('11') == '10'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n''') =='still running'\nassert solution('''\n5\n2\n5\n9\n10\n''') == '4'\nassert solution('''\n2\n3\n''') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('5') =='still running'\nassert solution('12') =='still running'\nassert solution('21') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"5\") == \"still running\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"3 2\") == \"0.6\"\nassert solution(\"1 3 2\") == \"impossible\"\nassert solution(\"1 2 3\") == \"0.6\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"0.6\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n6 1 3 2 2 3\n''') == '0.6'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 2\\n') == 'impossible'\nassert solution('7\\n3 5 2 5 2 5\\n') == '0.42'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == 'impossible'\nassert solution('2\\n2 1') == 'impossible'\nassert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('7\\n7 1 2 2 3 3') == '0.6'\nassert solution('8\\n8 1 2 2 3 3') == 'impossible'"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''\n2 2\n''') == 'impossible'\nassert solution('''\n5 3 1 3 2\n''') == '1.0'\nassert solution('''\n5 1 1 3 2\n''') == 'impossible'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n') == 'impossible'\n\nassert solution('2\\n1 2\\n') == '0.5'\n\nassert solution('2\\n1 2\\n') == 'impossible'"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''\n2\n2 2\n''') == 'impossible'\nassert solution('''\n1\n1 1\n''') == '1.0'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"Emma\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6\n''') == 'Emma'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4 1 4') == \"Emma\"\nassert solution('1 6 1 6') == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'Emma'\nassert solution(input()) == 'Gunnar'"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == 'Emma'\n\"\"\"\n\n\nimport sys\n\nprint(solution(input()))\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2 2 2\n1 3 1 3\n\"\"\") == \"Tie\"\nassert solution(\"\"\"\n3 4 1 6\n1 2 1 5\n\"\"\") == \"Emma\""
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4 1 4') == 'Emma'\nassert solution('1 6 1 6') == 'Gunnar'\nassert solution('1 10 2 5') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"Emma\"\n\n'''\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Gunnar\"\n\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3 mumble 5\n1 2 3 mumble mumble 7 mumble 8\n''') =='something is fishy'\nassert solution('''\n1 1 1 mumble mumble mumble\n1 1 1 mumble mumble mumble\n''') =='makes sense'\n''')\n\n\n'''\nhttps://www.hackerrank.com/challenges/counting-valleys/problem\n\nCounting Valleys\n\nA valley is a group of consecutive steps with a positive step to the right, going up or down (but not diagonally) in the same direction. Every step up is equal to 2, except for the step up from a step down.\n\nThe steps up and down are counted distinctly, they are not added together. The steps to the left or right are counted as separate steps. A step from one valley to another valley is considered a single step.\n\nGiven a series of steps, count the number of valleys traversed.\n\n\n------SOLUTION"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3\nmumble 5\n7 mumble 8''') =='makes sense'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\nmumble mumble mumble mumble mumble mumble''') =='something is fishy'"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 mumble 5\") == \"makes sense\", \"Check your work!\"\n\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\", \"Check your work!\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2 3 mumble 5\n1 2 3 mumble mumble 5''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8''') =='something is fishy'\nassert solution('''6\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble mumble 8''') =='something is fishy'\nassert solution('''11\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble mumble 8''') =='makes sense'\n\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3\nmumble 5\n''') == \"makes sense\"\nassert solution('''8\n1 2 3\nmumble mumble 7 mumble 8\n''') == \"something is fishy\"\nassert solution('''12\n1 2 3\nmumble mumble mumble mumble 7 mumble 8\n''') == \"something is fishy\"\nassert solution('''12\n1 2 3\nmumble mumble mumble mumble 7 mumble 8\n''') == \"something is fishy\"\nassert solution('''0\n1 2 3\nmumble mumble 7 mumble 8\n''') == \"makes sense\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\n'''\n\nn=int(input())\nlist_of_words=list(map(str,input().split()))\nfor i in range(n):\n    if list_of_words[i]=='mumble':\n        list_of_words[i]='0'\n    elif list_of_words[i].isnumeric():\n        list_of_words[i]=int(list_of_words[i])\nprint(list_of_words)\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3 mumble 5\n1 2 3 mumble mumble 7 mumble 8\n''') =='something is fishy'\nassert solution('''\n5\n1 2 3 mumble 5\n1 2 3 mumble mumble 7 mumble 8\n''') =='makes sense'\nassert solution('''\n8\n1 2 3 mumble mumble 7 mumble 8\n''') =='something is fishy'\n''')\n\n'''\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n''') =='something is fishy'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n''') =='makes sense'\n''')\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 6 9 12 15\n''') == '1 18'\nassert solution('''4 9 25 49 81\n''') == '2 121'''\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3 4 5 6 7 8 9') == \"1 2\"\nassert solution('4 4 8 8') == \"1 16\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 6 9 12 15\") == \"1 18\"\nprint(solution(input()))\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 9 25 49 81\") == \"2 121\"\nassert solution(\"5 3 6 9 12 15\") == \"1 18\""
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"CORRECT\"\nassert solution(\"4 6\") == \"INCORRECT\"\nassert solution(\"0 1\") == \"CORRECT\"\nassert solution(\"0 2\") == \"INCORRECT\"\nassert solution(\"0 3\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 5\\n6 2\\n3 1') == 'CORRECT'\nassert solution('3\\n1 5\\n6 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 0\\n0 2\\n3 1\\n') == 'CORRECT'\nassert solution('4 6\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 3\n1 0\n0 2\n3 1\n''') == 'CORRECT', 'First sample'\nassert solution('''\n3\n1 2\n0 1\n3 0\n''') == 'INCORRECT', 'Second sample'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n3\n1 0\n0 2\n3 1\n''') == 'CORRECT', \"First\"\nassert solution('''5\n5\n0 2\n1 3\n2 4\n3 0\n4 1\nSample Output 3:\nINCORRECT\nSample Input 4:\n1\n3\n1 0\n0 2\n3 1\nSample Output 4:\nINCORRECT\n'''"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'INCORRECT'\nassert solution('3\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open(\"test_files/Q_20_Puzzle_1.in\").read()) == \"CORRECT\"\nassert solution(open(\"test_files/Q_20_Puzzle_2.in\").read()) == \"CORRECT\"\nassert solution(open(\"test_files/Q_20_Puzzle_3.in\").read()) == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == 'CORRECT'\nassert solution('4 6') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n2 3\\n1 0\\n0 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'INCORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('1\\n0 2\\n0 3\\n4 5\\n0 6\\n7 8\\n0 9\\n10 11\\n0 12\\n13 14\\n0 15\\n16 17\\n0 18\\n19 20\\n0 21\\n22 23\\n0 24\\n25 26\\n0 27\\n28 29\\n0 30\\n31 32\\n0 33\\n34 35\\n0 36\\n37 38\\n0 39\\n40 41\\n0 42\\n43 44\\n0 45\\n46 47\\n0 48\\n49 50\\n0 51\\n52 53\\n0 54\\n55 56\\n0 57\\n58 59\\n0 60\\n61 62\\n0 63\\n64 65\\n0 66\\n67 68\\n0 69\\n70 71\\n0 72\\n73 74\\n0 75\\n76 77\\n0 78\\n79 80\\n0 81\\n82 83\\n0 84\\n85 86\\n0 87\\n88 89\\n0 90\\n91 92\\n0 93\\n94 95\\n0 96\\n97 98\\n0 99\\n100 101\\n0 102\\n103 104\\n0 105\\n106 107\\n0 108\\n109 110\\n0 111\\n112 113\\n0 114\\n115 116\\n0 117\\n118 119\\n0 120\\n121 122\\n0 123\\n124 125\\n0 126\\n127 128\\n0 129\\n130 131\\n0 132\\n133 134\\n0 135\\n136 137\\n0 138\\n139 140\\n0 141\\n142 143\\n0 144\\n145 146\\n0 147\\n148 149\\n0 150\\n151 152\\n0 153\\n154 155\\n0 156\\n157 158\\n0 159\\n160 161\\n0 162\\n163 164\\n0 165\\n166 167\\n0 168\\n169 170\\n0 171\\n172 173\\n0 174\\n175 176\\n0 177\\n178 179\\n0 180\\n181 182\\n0 183\\n184 185\\n0 186\\n187 188\\n0 189\\n190 191\\n0 192\\n193 194\\n0 195\\n196 197\\n0 198\\n199 200\\n0 201\\n202 203\\n0 204\\n205 206\\n0 207\\n208 209\\n0 210\\n211 212\\n0 213\\n214 215\\n0 216\\n217 218\\n0 219\\n220 221\\n0 222\\n223 224\\n0 225\\n226 226\\n0 227\\n228 228\\n0 229\\n230 230\\n0 231\\n232 233\\n0 234\\n235 235\\n0 236\\n237 238\\n0 239\\n240 241\\n0 242\\n243 244\\n0 245\\n246 246\\n0 247\\n248 249\\n0 250\\n251 252\\n0 253\\n254 255\\n0 256\\n257 258\\n0 259\\n260 261\\n0 262\\n263 264\\n0 265\\n266 267\\n0 268\\n269 270\\n0 271\\n272 273\\n0 274\\n275 276\\n0 277\\n278 279\\n0 280\\n281 282\\n0 283\\n284 285\\n0 286\\n287 288\\n0 289\\n290 291\\n0 292\\n293 294\\n0 295\\n296 297\\n0 298\\n299 300\\n0 301\\n302 303\\n0 304\\n305 306\\n0 305\\n307 308\\n0 306\\n309 310\\n0 307\\n311 312\\n0 308\\n313 314\\n0 309\\n315 316\\n0 310\\n317 318\\n0 311\\n319 320\\n0 312\\n321 322\\n0 313\\n323 324\\n0 314\\n325 326\\n0 315\\n327 328\\n0 316\\n329 330\\n0 317\\n331 332\\n0 318\\n333 334\\n0 319\\n335 336\\n0 320\\n337 338\\n0 321\\n339 340\\n0 322\\n341 342\\n0 323\\n343 344\\n0 324\\n345 346\\n0 325\\n347 348\\n0 326\\n349 350\\n0 327\\n351 352\\n0 328\\n353 354\\n0 329\\n355 356\\n0 330\\n357 358\\n0 331\\n359 360\\n0 332\\n361 362\\n0 333\\n363 364\\n0 334\\n365 366\\n0 335\\n367 368\\n0 336\\n369 370\\n0 337\\n371 372\\n0 338\\n373 374\\n0 339\\n375 376\\n0 340\\n377 378\\n0 341\\n379 380\\n0 342\\n381 381\\n0 343\\n383 382\\n0 344\\n385 384\\n0 345\\n387 385\\n0 346\\n387 386\\n0 347\\n389 388\\n0 348\\n391 390\\n0 349\\n393 392\\n0 350\\n395 396\\n0 351\\n397 398\\n0 352\\n399 400\\n0 353\\n401 402\\n0 354\\n403 404\\n0 355\\n405 406\\n0 356\\n407 408\\n0 357\\n409 410\\n0 358\\n411 412\\n0 359\\n413 414\\n0 360\\n415 416\\n0 361\\n417 418\\n0 362\\n419 420\\n0 363\\n421 422\\n0 364\\n423 424\\n0"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"CORRECT\"\nassert solution(\"3\") == \"INCORRECT\"\nassert solution(\"5\") == \"INCORRECT\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1', 'First'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11', 'Second'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n0 1 1\n1 0 1\n1 1 0\n\"\"\"\n    ) == \"1 1 1\"\n\nassert solution(\n\"\"\"\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n\"\"\"\n    ) == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2 1\n1 0 1''') == '1 2 1'\n\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0\n''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"5\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n\"\"\") == \"1 2 3 1 11\""
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\"\n                ) == \"1 2 3 1 11\"\nprint(solution(input()))\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 1 1\n1 0 1\n1 1 0\n''') == '1 1 1'\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 3 1 11'"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday', 'Should be Thursday'\nassert solution('1 1') == 'Thursday', 'Should be Thursday'\nassert solution('17 1') == 'Saturday', 'Should be Saturday'\nassert solution('17 1') == 'Saturday', 'Should be Saturday'"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Tuesday\"\nassert solution(\"17 1\") == \"Saturday\""
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\""
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Thursday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"Wednesday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\""
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n100\n4\n''') == '4'\nassert solution('''\n100\n500\n12\n''') == '129'\nassert solution('''\n100\n500\n1\n''') == '99'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n7\\n4\\n3') == '129\\n480'\nassert solution('5\\n1\\n1') == '5\\n1'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"100\") == \"40\"\nassert solution(\"1\") == \"129\"\nassert solution(\"100\") == \"480\"\nassert solution(\"1\") == \"129\""
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"100\") == \"40\"\nassert solution(\"500\") == \"480\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"100\") == \"40\"\nassert solution(\"1000000\") == \"12\""
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('500') == '129'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n5\n1\n''') == '4'\nassert solution('''100\n100\n1\n''') == '40'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('500') == '129'\nassert solution('12') == '480'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('100') == '100'\nassert solution('500') == '500'\nassert solution('12') == '129'\nassert solution('123456789') == '12'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('400') == '128'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n5 1\\n3 3') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n5 1\\n3 3') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '4.0'\nassert solution('3 2') == '6.0'\nassert solution('3 1') == '3.0'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n5 1') == '4.0\\n3\\n'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3\\n'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '4.0'\nassert solution('5 4') == '6.0'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"4.0\"\nassert solution(\"2 2\") == \"5.0\"\nassert solution(\"4 2\") == \"9.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n5 1\\n3 3') == '4.0'\nassert solution('3 2\\n5 4\\n1 6\\n3') == '6.0'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"4.0\"\nassert solution(\"3 2\") == \"6.0\""
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\nprint(solution(input()))\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"4\"\nassert solution(5) == \"5\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n3\n3\n3\n''') == '2'\nassert solution('''30\n3\n3\n3\n3\n''') == '7'\n\nprint('All tests passed.')"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '10'\nassert solution('10**5') == '100'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('10') == '5'\nassert solution('100') == '25'\nassert solution('1000') == '125'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n5\n10\n10''') == '1'\nassert solution('''30\n10\n8\n8''') == '3'\nassert solution('''3\n10\n5\n10''') == '5'"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\nassert solution('45') == '8'\nassert solution('5') == '4'\nassert solution('15') == '5'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"9A-USKOK\") == \"1\"\nassert solution(\"I-NTERPOL\") == \"1\"\nassert solution(\"G-MI6\") == \"1\"\nassert solution(\"RF-KGB1\") == \"1\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '1'\nassert solution('G-MI6') == '1'\nassert solution('RF-KGB1') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '1'\nassert solution('G-MI6') == '1'\nassert solution('RF-KGB1') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"9A-USKOK\") == \"1\"\nassert solution(\"I-NTERPOL\") == \"1\"\nassert solution(\"G-MI6\") == \"1\"\nassert solution(\"RF-KGB1\") == \"1\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '1'\nassert solution('G-MI6') == '1'\nassert solution('RF-KGB1') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '1'\nassert solution('G-MI6') == '1'\nassert solution('RF-KGB1') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\nF-BI-12\") == \"HE GOT AWAY!\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\nF-BI-12\\nF-BI-12\") == \"2\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\nF-BI-12\\nF-BI-12\") == \"2\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('N-FBI2') == '2'\nassert solution('N-FBI3') == '3'\nassert solution('N-FBI4') == '4'\nassert solution('N-FBI5') == '5'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 3') == \"8.0\"\nassert solution('3 4 5') == \"6.843530573929037\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"8.0\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n3 3 3\\n4 4 5') == '8.0'\nassert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"8.0\""
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n2\\n3\\n') == '8.0'\nassert solution('2\\n5\\n7\\n5\\n') == '4.5'\nassert solution('3\\n2\\n3\\n') == '1.6180339887'\nassert solution('5\\n6\\n3\\n7\\n7\\n') == '8.0139860136'"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 3 3\\n4 5 4\\n') == '8.0'\nprint('YOUR CODE SUCCESSFULLY EXECUTED!')"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '8.0'\nassert solution('2') == '6.843530573929037'\n\nfor _ in range(2):\n    print(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '8.0'\nassert solution('3') == '6.843530573929037'"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '8.0'\nassert solution('3') == '8.0'\nassert solution('4') == '6.843530573929037'\nassert solution('5') == '7.0'\nprint(solution(input()))"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '8.0'\nassert solution('1') == '9.0'\n\n'''\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        import math\n        n = int(input())\n        arr = list(map(int, input().split()))\n        result = math.inf\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if i == j or i == k or j == k:\n                        continue\n                    else:\n                        temp_arr = arr.copy()\n                        temp_arr[i] = math.inf\n                        temp_arr[j] = math.inf\n                        temp_arr[k] = math.inf\n                        if sum(temp_arr) > result:\n                            result = sum(temp_arr)\n        return str(result)\n\n\ns = Solution()\nprint(s.solution(stdin))\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '5'\nassert solution('10') == '11'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('9') == '3'\nassert solution('5') == '5'\nassert solution('50') == '60'\nassert solution('10') == '11'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('12') == '12'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '8'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"23\") == \"23\"\nassert solution(\"24\") == \"27\"\nassert solution(\"25\") == \"27\"\nassert solution(\"26\") == \"29\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"12\") == \"12\"\nassert solution(\"25\") == \"27\"\nassert solution(\"35\") == \"35\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '11'\nassert solution('14') == '21'\nassert solution('15') == '22'\nassert solution('23') == '43'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1+9+8+4\"\n) == \"7\"\n\nassert solution(\n    \"1+2+3+4+5+6+7+8+9\"\n) == \"188\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == '7'"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1+9+8+4\n''') == '7'\nassert solution('''\n1+2+3+4+5+6+7+8+9\n''') == '188'\nassert solution('''\n1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1+9+8+4''') == '7'\nassert solution('''1+2+3+4+5+6+7+8+9''') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1+9+8+4\n1+9+8+4''') == '7'\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+5\") == \"21\""
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1+9+8+4\n''') == '7'"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(examples[0]) == \"7\"\nassert solution(examples[1]) == \"188\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\""
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 2') == '2 5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"-1 1 0\") == \"0\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 5 2''') == '2 5'\nassert solution('''2 2 -4 5''') == '5 -2 4'"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '2 5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nprint(solution(input()))\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n2 1 2 1 2\n''') == '2 2 2 1 1'\nassert solution('''9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\nprint('All tests passed!')"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"2 2 2 1 1\", \"1 1 1 3 3 3 2 2 2\"\nassert solution(\"9 3\") == \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\"\nassert solution(\"1 3\") == \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n2 1 2 1 2\n''') == '2 2 2 1 1'\nassert solution('''\n9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\nassert solution('''\n20 20\n8 1 7 1 1 1 8 1 1 7 1 1\n''') == '1 1 1 8 1 1 7 1 7 1 1 1 1 7 1 1'\nassert solution('''\n1\n7\n''') == '7'\nassert solution('''\n1\n7\n''') == '7'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n2 1 2 1 2\n''') == '2 1 2 1 2'\nassert solution('''\n9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2\n2 1 2 1 2\n''') == '2 2 1 1 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5 3\") == \"2 3 1\""
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\") == \"1 1 1 3 3 3 2 2 2\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 1 2 1 2\n''') == '2 2 1 1 2'\nassert solution('''6 5\n2 1 2 1 2 1 3\n''') == '1 2 1 3 1 2 2'\nassert solution('''10 7\n2 1 2 3 3 1 1 1 1 2 1 2\n''') == '1 2 1 3 2 1 1 2 1 1'\nassert solution('''11 7\n3 3 3 1 1 1 2 2 2 1 1 2\n''') == '3 1 1 2 2 1 1 3 3 1'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '2 2 2 1 1'\nassert solution('9 3') == '1 1 1 3 3 3 2 2 2'"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 50') == '900'\nassert solution('40 100') == '900'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 24') == '875'\nassert solution('100 1') == '100'\nassert solution('10 1') == '10'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n38 24\n''') == '875'\nassert solution('''\n1 100\n''') == '100'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('18 5') == '19'\nassert solution('42 3') == '43'\nprint(solution(input()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 100') == '100'\nassert solution('38 24') == '875'\nassert solution('5 10') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 7\\n1000') == '875'\nassert solution('1 100\\n10') == '100'\nassert solution('1 100\\n0') == '1'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('18 7') == '1'\nassert solution('12 20') == '3'\nassert solution('38 24') == '875'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 50') == '40'\nassert solution('3 1') == '20'\nassert solution('4 3') == '23'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 9') == '875'\nassert solution('5 10') == '100'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"875\"\nassert solution(\"3 1\") == \"100\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''221 231''') == '132'\nassert solution('''734 893''') == '437'\nassert solution('''69 53''') == '43'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline().rstrip()\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n1\\n') == 'programming'\nassert solution('2 3\\n1\\n') == 'impossible'\nassert solution('5 5\\n3\\n') == 'programming'\nassert solution('20 10\\n7\\n') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([11, 131]) == \"programming\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([11, 131]) == \"programming\"\nassert solution([7, 96]) == \"contest\""
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''11 131\nprogramming''') == 'programming'\n\nassert solution('''7 96\ncontest''') == 'contest'\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('23 45') == 'impossible'\nassert solution('0 11') == 'impossible'\nassert solution('1 1') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 1\nc a\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz''') == 'contest'\n\nassert solution('''7 4\ni\no\np\nq\nr\nt\nu''') == 'impossible'\n\nassert solution('''15 7\na\nc\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15''') == 'programming'\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"programming\"\nassert solution(\"11 131\") == \"programming\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n'''"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 1\nprogramming''') == 'programming'\nassert solution('''6 1\ncontest''') == 'contest'\nassert solution('''6 0\nabc''') == 'impossible'\nassert solution('''5 0\nprogramming''') == 'programming'\nassert solution('''5 1\nabc''') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 131\\n') == 'programming'\nassert solution('7 96\\n') == 'contest'\n'''\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 'X'\") == \"X^\\n--\\n\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBBABABABABAB\\nABABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 'X'\nX^\n--\n\n.X\n--\n\n2 2 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '\\n'.join(\n    [\n        'ABABABABABAC',\n        'BBBABABABABA',\n        'BBABABABABAB',\n    ]\n)\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 \"X\"') == '.^'\nassert solution('3 12 \"A\"') == 'BABABABABABAB'\nassert solution('4 12 \"A\"') == 'BBABABABABABA'\nassert solution('5 12 \"A\"') == 'BAABABABABABB'\nassert solution('6 12 \"A\"') == 'BAABABABABABB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '.^'\nassert solution(input()) == '--'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n\n3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '''.^\n--\n\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n'''\nassert solution('''1 10 'A'\nA\n--\n\n2 10 'B'\nB\n--\n\n3 10 'C'\nC\n--\n\n4 10 'D'\nD\n--\n\n5 10 'E'\nE\n--\n\n6 10 'F'\nF\n--\n\n7 10 'G'\nG\n--\n\n8 10 'H'\nH\n--\n\n9 10 'I'\nI\n--\n\n10 10 'J'\nJ\n--\n\n11 10 'K'\nK\n--\n\n12 10 'L'\nL\n--\n\n13 10 'M'\nM\n--\n\n14 10 'N'\nN\n--\n\n15 10 'O'\nO\n--\n\n16 10 'P'\nP\n--\n\n17 10 'Q'\nQ\n--\n\n18 10 'R'\nR\n--\n\n19 10 'S'\nS\n--\n\n20 10 'T'\nT\n--\n\n21 10 'U'\nU\n--\n\n22 10 'V'\nV\n--\n\n23 10 'W'\nW\n--\n\n24 10 'X'\nX\n--\n\n25 10 'Y'\nY\n--\n\n26 10 'Z'\nZ\n--\n\n27 10 'a'\na\n--\n\n28 10 'b'\nb\n--\n\n29 10 'c'\nc\n--\n\n30 10 'd'\nd\n--\n\n31 10 'e'\ne\n--\n\n32 10 'f'\nf\n--\n\n33 10 'g'\ng\n--\n\n34 10 'h'\nh\n--\n\n35 10 'i'\ni\n--\n\n36 10 'j'\nj\n--\n\n37 10 'k'\nk\n--\n\n38 10 'l'\nl\n--\n\n39 10'm'\nm\n--\n\n40 10 'n'\nn\n--\n\n41 10 'o'\no\n--\n\n42 10 'p'\np\n--\n\n43 10 'q'\nq\n--\n\n44 10 'r'\nr\n--\n\n45 10's'\ns\n--\n\n46 10 't'\nt\n--\n\n47 10 'u'\nu\n--\n\n48 10 'v'\nv\n--\n\n49 10 'w'\nw\n--\n\n50 10 'x'\nx\n--\n\n51 10 'y'\ny\n--\n\n52 10 'z'\nz\n--\n\n53 10 '0'\n0\n--\n\n54 10 '1'\n1\n--\n\n55 10 '2'\n2\n--\n\n56 10 '3'\n3\n--\n\n57 10 '4'\n4\n--\n\n58 10 '5'\n5\n--\n\n59 10 '6'\n6\n--\n\n60 10 '7'\n7\n--\n\n61 10 '8'\n8\n--\n\n62 10 '9'\n9\n--\n\n63 10 '+'\n+\n--\n\n64 10 '='\n='\n--\n\n65 10 '-'\n-\n--\n\n66 10 '.'\n.\n--\n\n67 10 '/'\n/\n--\n\n68 10 '_'\n_\n--\n\n69 10''\n\n100 9 'a'\nA\n--\n\n101 9 'b'\nB\n--\n\n102 9 'c'\nC\n--\n\n103 9 'd'\nD\n--\n\n104 9 'e'\nE\n--\n\n105 9 'f'\nF\n--\n\n106 9 'g'\nG\n--\n\n107 9 'h'\nH\n--\n\n108 9 'i'\nI\n--\n\n109 9 'j'\nJ\n--\n\n110 9 'k'\nK\n--\n\n111 9 'l'\nL\n--\n\n112 9'm'\nM\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n''') == '.^'\n\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\nSample Output 2:\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n''') == 'BBBABABABABA'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 X') == 'X^'\nassert solution('3 12 A') == 'ABABABABABAC'\nassert solution('6 2 A') == 'ABABABABABAC'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n\n''') == '''.^\n--\n\n'''"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n''') == '''.^\n--\n\nSample Input 3:\n5 2 'A'\nAAAB\nBABA\nAAAB\nAAAB\nABAB\nSample Output 3:\nAAAB\nBABA\nAAAB\nAAAB\nABAB\nSample Input 4:\n2 5 'A'\nAAAB\nBABA\nAAAB\nAAAB\nABAB\nSample Output 4:\nAAAB\nABAB\nAAAB\nAAAB\nABAB\nSample Input 5:\n3 5 'A'\nAAAB\nBABA\nAAAB\nAAAB\nABAB\nSample Output 5:\nAAAB\nBABA\nAAAB\nAAAB\nABAB\n''' == solution('''5 2 'A'\nAAAB\nBABA\nAAAB\nAAAB\nABAB\n''')"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 'X'\") == \".\"\nassert solution(\"3 12 'A'\") == \"BBABABABABAB\"\nassert solution(\"4 3 'A'\") == \"BBABABABABAB\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(['2 4 4 14', '0 0 3', '1 1 2', '1 3 0', '3 0 2', '3 1 1', '3 2 0', '5 0 1', '5 1 0', '7 0 0']) == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\nprint(solution(['2 4 4 14', '0 0 3', '1 1 2', '1 3 0', '3 0 2', '3 1 1', '3 2 0', '5 0 1', '5 1 0', '7 0 0']))\nassert solution(['0 0 4', '0 3 0', '1 1 2', '1 3 0', '3 0 2', '3 1 1', '3 2 0', '5 0 1', '5 1 0', '7 0 0']) == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\nprint(solution(['0 0 4', '0 3 0', '1 1 2', '1 3 0', '3 0 2', '3 1 1', '3 2 0', '5 0 1', '5 1 0', '7 0 0']))\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\nprint('Almost done! Click \"Check\" to earn cool rewards via email!')"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2,4,4,14]) == \"1 0 3\"\nassert solution([100,80,60,240]) == \"0 0 4\"\nassert solution([7,0,0,0]) == \"0 0 4\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 4 14') == '1 0 3'\nassert solution('100 80 60 240') == '0 0 4'\nassert solution('3 1 4 0') == '1 2 1'\nassert solution('3 2 4 1') == '2 1 0'\n\n'''\n\nimport math"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 4 4 14\n''') == '1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n3 2 0\n5 0 1\n5 1 0\n7 0 0''')"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 1\\n1 3 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'impossible'\nassert solution('0') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2') == '1 0 3'\nassert solution('3') == '1 1 2'\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n7 0 0\"\nassert solution(\"5 0 1\\n5 1 0\") == \"3 0 2\\n3 1 1\\n3 2 0\"\n\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9') == \"good job\"\nassert solution('2') == \"1, 3\"\nassert solution('4') == \"1, 2, 3, 4\"\nassert solution('5') == \"1, 2, 3, 4, 5\"\nassert solution('7') == \"1, 2, 3, 4, 5, 6, 7\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\\n\"\nassert solution(\"\") == \"good job\"\nassert solution(\"1\\n2\\n3\\n4\") == \"1\\n3\\n\"\nassert solution(\"5\\n2\\n3\\n4\\n1\") == \"2\\n\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1 3 6 12'\nassert solution('10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100') == '10 20 30 40 50 60 70 80 90 100'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1 3 6 10'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9') == 'good job'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '6'\nassert solution('7') == '12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '12'\nassert solution('12') == '12'\nassert solution('5') == '7'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == 'good job'\nassert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('6') == '6'\nassert solution('12') == '12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9') == 'good job'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '6'\nassert solution('7') == '12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == \"good job\"\nassert solution('2') == \"3\"\nassert solution('4') == \"6\"\nassert solution('5') == \"12\"\nassert solution('6') == \"13\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    \"\"\"\n) == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\"\n\nassert solution(\n    \"\"\"\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    26\n    27\n    28\n    29\n    30\n    31\n    32\n    33\n    34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    51\n    52\n    53\n    54\n    55\n    56\n    57\n    58\n    59\n    60\n    61\n    62\n    63\n    64\n    65\n    66\n    67\n    68\n    69\n    70\n    71\n    72\n    73\n    74\n    75\n    76\n    77\n    78\n    79\n    80\n    81\n    82\n    83\n    84\n    85\n    86\n    87\n    88\n    89\n    90\n    91\n    92\n    93\n    94\n    95\n    96\n    97\n    98\n    99\n    100\n    \"\"\"\n) == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\\n\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"1 1.1 1.1 1.1\") == \"0.121640608897\"\nassert solution(\"100 100000 2000000 1.1\") == \"0.6925427842612\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 8.9 40075000 272.1\n''') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"1000000 2.0 2.0 4.0 6.0\") == \"90.233658897934\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6') == '10.75'\nassert solution('5 4 3 2 1') == '5.75'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 1.1') == '0.594071575597398'\nassert solution('5 10 1.1') == '3.655510232162029'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 3 7.5 1000000 2\n5 4.1 0.3\n10 5.8 9.1\n5 3.1 0.7\n10 8.9 40075000 272.1\n5 5.8 9.1\n10 5.8 9.1\n5 3.1 0.7\n10 8.9 40075000 272.1\n10 5.8 9.1\n5 3.1 0.7\n10 8.9 40075000 272.1\n5 5.8 9.1''') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 0.1\\n') == '157079.04857106 0.397814'\nassert solution('4 200 0.00010\\n') == '6.816741113895986 4.64992639268798'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 8.9 40075000 272.1''') == '157079.04857106 15.598261092309'"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 8.9 40075000 272.1''') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('6 9.9 50075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('5 8.9 50075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('4 8.9 30075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('10 8.9 50075000 272.1') == '157079.04857106 15.598261092309'"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\nhello\\nworld') == '1\\nhello\\nworld'\nassert solution('6\\nhello\\nworld\\ntwitter\\njoke\\nmoney\\n') == '4\\nhello\\nworld\\ntwitter\\njoke'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution('3') == '1'\nassert solution('4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '5'"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('8') == '4'\nassert solution('20') == '16'\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('7') == '5'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '3'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\n'''\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nA\nB\nC\nD\n''') == '3'\n\nassert solution('''\nD\nD\nD\nD\n''') == '3'\n\nassert solution('''\nD\nD\nD\nB\n''') == '3'\n\nassert solution('''\nD\nD\nC\nD\n''') == '2'\n\nassert solution('''\nD\nC\nB\nD\n''') == '2'"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nB\\nB\\nB\\nB\") == \"3\"\nassert solution(\"4\\nB\\nA\\nB\\nB\") == \"3\"\nassert solution(\"4\\nB\\nB\\nA\\nB\") == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\n'''\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\nA\nA\nA\nA\n''') == '3'\n\nassert solution('''\n5\nC\nD\nD\nD\n''') == '0'\n\nassert solution('''\n8\nA\nA\nD\nD\nA\nD\nD\nD\n''') == '3'\n\nassert solution('''\n1\nA\nA\nA\nA\n''') == '1'"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\nA\\nA\\nA\\n') == '3'\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\nD\nD\nD\nB\n''') == '3'\n\nSample Input:\n2\nB\nA\nSample Output:\n0\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\nA\nA\nA\nA\n''') == '3'\n\nassert solution('''\n4\nA\nD\nA\nC\n''') == '0'\n\n''')\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nA\n1\nA\n1\nA\n1\nA\n1\nA\n1\n''') == \"3\"\n\nassert solution('''\n2\nC\nB\n''') == \"1\"\n\nassert solution('''\n3\nC\nA\nB\n''') == \"2\"\n\nassert solution('''\n4\nB\nB\nB\nC\n''') == \"1\"\n\nassert solution('''\n5\nC\nB\nA\nB\n''') == \"3\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3 1 2\n.x.\nx.x\n.x.\n\"\"\") == \"..xx..\"\nassert solution(\"\"\"\n3 3 2\n.x.\nxx.\n.x.\n\"\"\") == \"xx..xx\"\nassert solution(\"\"\"\n3 3 1\nxx.\nx.x\n.x.\n\"\"\") == \"xx..xx\"\nassert solution(\"\"\"\n3 3 1\nxx.\nx.xx\n.x.\n\"\"\") == \"xx..xx\"\nassert solution(\"\"\"\n3 3 1\nxx.\nx.xx\n.x.\n\"\"\") == \"xx..xx\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 1 2') == '..xx..', 'First example'\nassert solution('4 3 1 2') == 'xx..xx', 'Second example'\nassert solution('5 3 1 2') == 'xx..xx', 'Third example'\nassert solution('1 1 1') == 'xx', 'Fourth example'\n\nstdin = input()\nR, C, ZR, ZC = list(map(int, stdin.split()))\n\nmatrix = []\nfor _ in range(R):\n    matrix.append(input())"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '..xx..'\nassert solution('4 4 1 2') == '..x.x.x.x'\n\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2') == '..xx..'\n\"\"\"\n\nr, c, zr, zc = list(map(int, stdin.split()))\nfor _ in range(r):\n    for _ in range(c):\n        print(\".\" * (zr * _ + zc))\n        print(\".x.\" * (zr * (r - _ - 1) + zc))\n        print(\"..xx..\")\n\n\"\"\"\nr, c, zr, zc = map(int, stdin.split())\n\nfor _ in range(r):\n    for _ in range(c):\n        print(\".\" * (zr * _ + zc))\n        print(\".x.\" * (zr * (r - _ - 1) + zc))\n        print(\"..xx..\")\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '..xx..'\nassert solution('3 4 1 3') == 'x.x.x.'\nassert solution('8 8 2 2') == 'x.x.x.x.x.x'\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 3, 1, 2]) == \"..xx..\"\n\nSample Input:\n4 4 3 2\na.\nab.\n.x.\nxab\nSample Output:\nab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab.ab"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"\"\"..xx..\nxx..xx\n..xx..\"\"\"\n\nassert solution(\n    \"1 2 1 1\\n.x.\\nx.x\\n.x.\\n\") == \"\"\"..xx..\nxx..xx\n..xx..\"\"\"\n\nassert solution(\n    \"1 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"\"\"..xx..\nxx..xx\n..xx..\"\"\"\n\nassert solution(\n    \"4 5 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"\"\"..xx..\nxx..xx\n..xx..\"\"\"\n\nassert solution(\n    \"10 10 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"\"\"..xx..\nxx..xx\n..xx..\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3\") == \"xxxy\"\nassert solution(\"2 2 2\") == \"xxx\"\nassert solution(\"3 2 2\") == \"x.x.x\"\nassert solution(\"3 3 2\") == \"x.x.x\"\n\nThe following inputs would all return a matrix of characters:\nSample Input:\n3 3 1 2\n.x.\nx.x\n.x.\nSample Output:\n..xx..\nxx..xx\n..xx..\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1\\n.x.\\nx.x\\n.x.\\n') == 'x.x.\\nxx.x\\nxx.x\\nxx.x\\n'\nassert solution('2 2 1 2\\nxx.x\\nx.x.\\nxx.x\\nxx.x\\nxx.x\\n') == 'xx.x.\\nxx.xx.\\nxx.xx.\\nxx.xx.\\nxx.xx.\\nxx.xx.\\n'\nassert solution('2 3 1 2\\nxx.x.\\nx.x.\\nxx.x\\nxx.x\\nxx.x\\n') == 'xx.x.\\nxx.x.\\nxx.xx.\\nxx.xx.\\nxx.xx.\\nxx.xx.\\n'\nassert solution('3 3 1 2\\nxx.x.\\nx.x.\\nxx.x\\nxx.x\\nxx.x\\n') == 'xx.x.\\nxx.x.\\nxx.x.\\nxx.x.\\nxx.x.\\nxx.x.\\n'\nassert solution('1 1 1 2\\n.x.\\nx.x.\\n.x.\\n.x.\\n.x.\\n') == 'x.x.\\nxx.x\\nxx.xx\\nxx.x\\nxx.x\\nxx.x\\n'\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 2') == 'x.x'\nassert solution('2 1 2 4') == 'x.xx'\nassert solution('3 3 1 2') == 'xx..'\nassert solution('3 1 2 4') == 'xx..'\nassert solution('3 1 4 3') == 'xx..xx'\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\nF 60 13 20\") == \"14 20\"\nassert solution(\"2\\nF 60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\nassert solution(\"F 60 13 20\") == \"13 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('F 60 13 20\\n') == '14 20'\nassert solution
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('F 60 13 20') == '14 20'\nassert solution('F 60 0 0') == '60 0 0'\nassert solution('B 60 -10 20') == '60 -10 20'"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\nassert solution(\"B 10 20 30\") == \"10 20\""
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"14 20\"\n\nSample Input:\n2\nF 60 13 20\nB 5 10 40\nSample Output:\n12 21 35\n\"\"\"\n\n\"\"\"\nAt any point, the clock is at hour $H$ and minute $M$\n1. if current day is Tuesday, then it can only be at hour $H$ (5:00-7:59) and minute $M$ (00:00-59:59)\n2. if current day is Saturday, then it can only be at hour $H$ (5:00-7:59) and minute $M$ (00:00-59:59)\n3. if current day is Sunday, then it can only be at hour $H$ (5:00-7:59) and minute $M$ (00:00-59:59)\n4. if current day is Monday, then it can only be at hour $H$ (5:00-7:59) and minute $M$ (00:00-59:59)\n5. if current day is Tuesday and it is currently after 5:00, then it can only be at hour $H$ (6:00-7:59) and minute $M$ (00:00-59:59)\n6. if current day is Tuesday and it is currently before 5:00, then it can only be at hour $H$ (00:00-5:59) and minute $M$ (00:00-59:59)\n7. if current day is Tuesday and it is currently between 5:00 and 6:59, then it can only be at hour $H$ (00:00-5:59) and minute $M$ (00:00-59:59)\n8. if current day is Tuesday and it is currently between 7:00 and 8:59, then it can only be at hour $H$ (07:00-8:59) and minute $M$ (00:00-59:59)\n9. if current day is Tuesday and it is currently between 9:00 and 10:59, then it can only be at hour $H$ (09:00-10:59) and minute $M$ (00:00-59:59)\n10. if current day is Tuesday and it is currently between 11:00 and 12:59, then it can only be at hour $H$ (11:00-12:59) and minute $M$ (00:00-59:59)\n11. if current day is Tuesday and it is currently between 13:00 and 14:59, then it can only be at hour $H$ (13:00-14:59) and minute $M$ (00:00-59:59)\n12. if current day is Tuesday and it is currently between 15:00 and 16:59, then it can only be at hour $H$ (15:00-16:59) and minute $M$ (00:00-59:59)\n13. if current day is Tuesday and it is currently between 17:00 and 18:59, then it can only be at hour $H$ (17:00-18:59) and minute $M$ (00:00-59:59)\n14. if current day is Tuesday and it is currently between 19:00 and 20:59, then it can only be at hour $H$ (19:00-20:59) and minute $M$ (00:00-59:59)\n15. if current day is Tuesday and it is currently between 21:00 and 22:59, then it can only be at hour $H$ (21:00-22:59) and minute $M$ (00:00-59:59)\n16. if current day is Tuesday and it is currently between 23:00 and 24:59, then it can only be at hour $H$ (23:00-24:59) and minute $M$ (00:00-59:59)\n17. if current day is Tuesday and it is currently between 0:00 and 1:59, then it can only be at hour $H$ (00:00-01:59) and minute $M$ (00:00-59:59)\n18. if current day is Tuesday and it is currently between 2:00 and 3:59, then it can only be at hour $H$ (02:00-03:59) and minute $M$ (00:00-59:59)\n19. if current day is Tuesday and it is currently between 4:00 and 5:59, then it can only be at hour $H$ (04:00-05:59) and minute $M$ (00:00-59:59)\n20. if current day is Tuesday and it is currently between 6:00 and 7:59, then it can only be at hour $H$ (06:00-07:59) and minute $M$ (00:00-59:59)\n21. if current day is Tuesday and it is currently between 8:00 and 9:59, then it can only be at hour $H$ (08:00-09:59) and minute $M$ (00:00-59:59)\n22. if current day is Tuesday and it is currently between 10:00 and 11:59, then it can only be at hour $H$ (10:00-11:59) and minute $M$ (00:00-59:59)\n23. if current day is Tuesday and it is currently between 12:00 and 13:59, then it can only be at hour $H$ (12:00-13:59) and minute $M$ (00:00-59:59)\n24. if current day is Tuesday and it is currently between 14:00 and 15:59, then it can only be at hour $H$ (14:00-15:59) and minute $M$ (00:00-59:59)\n25. if current day is Tuesday and it is currently between 16:00 and 17:59, then it can only be at hour $H$ (16:00-17:59) and minute $M$ (00:00-59:59)\n26. if current day is Tuesday and it is currently between 18:00 and 19:59, then it can only be at hour $H$ (18:00-19:59) and minute $M$ (00:00-59:59)\n27. if current day is Tuesday and it is currently between 20:00 and 21:59, then it can only be at hour $H$ (20:00-21:59) and minute $M$ (00:00-59:59)\n28. if current day is Tuesday and it is currently between 22:00 and 23:59, then it can only be at hour $H$ (22:00-23:59) and minute $M$ (00:00-59:59)\n29. if current day is Tuesday and it is currently between 0:00 and 1:59, then it can only be at hour $H$ (00:00-01:59) and minute $M$ (00:00-59:59)\n30. if current day is Tuesday and it is currently between 2:00 and 3:59, then it can only be at hour $H$ (02:00-03:59) and minute $M$ (00:00-59:59)\n31. if current day is Tuesday and it is currently between 4:00 and 5:59, then it can only"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 21\"\nassert solution(\"B 20 30 45 15\") == \"15 30 45\"\nassert solution(\"F 20 30 45 15\") == \"14 35 45\"\nassert solution(\"B 20 30 45 15\") == \"15 30 45\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''F 60 13 20''') == '14 20'\nassert solution('''B 60 13 20''') == '13 20'\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\nassert solution(\"B 60 0 2\") == \"2 0\"\nassert solution(\"F 60 0 2\") == \"0 0\"\nassert solution(\"B 60 60 60\") == \"0 0\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 20') == 'nope'"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('FEB 9') == 'yup'\nassert solution('FEB 26') == 'nope'\nassert solution('JAN 1') == 'nope'\nassert solution('FEB 9') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 26') == 'nope'\nassert solution('FEB 1') == 'nope'\nassert solution('FEB 2') == 'nope'\nassert solution('FEB 3') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\", solution(\"OCT 31\")\nassert solution(\"NOV 30\") == \"nope\", solution(\"NOV 30\")\nassert solution(\"JAN 29\") == \"nope\", solution(\"JAN 29\")"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 3') == 'nope'\nassert solution('FEB 9') == 'yup'"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('OCT 31') == 'yup', \"Sample test case\"\nassert solution('DEC 25') == 'nope', \"Sample test case\"\nassert solution('FEB 2') == 'nope', \"Sample test case\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"JAN 9\") == \"nope\"\nassert solution(\"JAN 9_\") == \"nope\"\nassert solution(\"FEB 9\") == \"yup\"\nassert solution(\"FEB 9_\") == \"yup\""
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 25\") == \"nope\"\nassert solution(\"FEB 29\") == \"nope\"\nassert solution(\"JUN 11\") == \"yup\"\nassert solution(\"JAN 15\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"JAN 26\") == \"nope\"\nassert solution(\"FEB 9\") == \"yup\"\nassert solution(\"JAN 8\") == \"nope\"\nassert solution(\"FEB 2\") == \"nope\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#\"\nassert solution(\"5 1\") == \".\""
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '#.##.'\nassert solution('3 3') == '#.#.#.'\nassert solution('5 5') == '#.#..#.'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4\\n2 2 2 2') == '#.#.#.#.\\n#.honi#.\\n#.nera#.\\n#.irak#.'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '#.#.#.#.'\nassert solution('2 2 2 2') == '#.honi#.'\nassert solution('honi') == '#.honi#.'\nassert solution('nera') == '#.nera#.'\nassert solution('irak') == '#.irak#.'\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#\"\nassert solution(\"12 20\") == \"#.honi#.\\n.#nera#.\\n.#irak#.\\n#.nera#.\\n.#irak#.\\n#.nera#.\\n#honi#.\\n#nera#.\\n#irak#.\\n#.nera#.\\n#.irak#.\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n#.1#.\\n#.2#.\\n#.3#.\") == \"1#1#1#\"\n\n----Hints----\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak#.\\n#.#.#.#.\\n#.#.#.#.#'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n2 2 2 2\nhoni\noker\nnera\nirak\n''') == '''#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 4\n2 2 2 2\nhoni\noker\nnera\nirak\n\"\"\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n''') == '+---+---+---+---+---+---+---+---+'"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K.|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"Black: Ke1,Qd1,Ra1,Rh1,Bc1,Ng1,Nc1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\"\"\"\n\nstdin = \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P.|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\" == solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\")\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\" == solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\")\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\" == solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\")\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\" == solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\")\nassert solution(\"White: Ke1,Qd1"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"White: Kq1,Rb1,Rb2,Rb3,Rb4,Rb5,Rb6,Rb7,Rb8,Rb9,Ra1,Ra2,Ra3,Ra4,Ra5,Ra6,Ra7,Ra8,Ra9,Rh1,Rh2,Rh3,Rh4,Rh5,Rh6,Rh7,Rh8,Rh9,Rh10,Rh11,Rh12,Rh13,Rh14,Rh15,Rh16,Rh17,Rh18,Rh19,Rh20,Rh21,Rh22,Rh23,Rh24,Rh25,Rh26,Rh27,Rh28,Rh29,Rh30,Rh31,Rh32,Rh33,Rh34,Rh35,Rh36,Rh37,Rh38,Rh39,Rh40,Rh41,Rh42,Rh43,Rh44,Rh45,Rh46,Rh47,Rh48,Rh49,Rh50,Rh51,Rh52,Rh53,Rh54,Rh55,Rh56,Rh57,Rh58,Rh59,Rh60,Rh61,Rh62,Rh63,Rh64,Rh65,Rh66,Rh67,Rh68,Rh69,Rh70,Rh71,Rh72,Rh73,Rh74,Rh75,Rh76,Rh77,Rh78,Rh79,Rh80,Rh81,Rh82,Rh83,Rh84,Rh85,Rh86,Rh87,Rh88,Rh89,Rh90,Rh91,Rh92,Rh93,Rh94,Rh95,Rh96,Rh97,Rh98,Rh99,Rh100,Rh101,Rh102,Rh103,Rh104,Rh105,Rh106,Rh107,Rh108,Rh109,Rh110,Rh111,Rh112,Rh113,Rh114,Rh115,Rh116,Rh117,Rh118,Rh119,Rh120,Rh121,Rh122,Rh123,Rh124,Rh125,Rh126,Rh127,Rh128,Rh129,Rh130,Rh131,Rh132,Rh133,Rh134,Rh135,Rh136,Rh137,Rh138,Rh139,Rh140,Rh141,Rh142,Rh143,Rh144,Rh145,Rh146,Rh147,Rh148,Rh149,Rh150,Rh151,Rh152,Rh153,Rh154,Rh155,Rh156,Rh157,Rh158,Rh159,Rh160,Rh161,Rh162,Rh163,Rh164,Rh165,Rh166,Rh167,Rh168,Rh169,Rh170,Rh171,Rh172,Rh173,Rh174,Rh175,Rh176,Rh177,Rh178,Rh179,Rh180,Rh181,Rh182,Rh183,Rh184,Rh185,Rh186,Rh187,Rh188,Rh189,Rh190,Rh191,Rh192,Rh193,Rh194,Rh195,Rh196,Rh197,Rh198,Rh199,Rh200,Rh201,Rh202,Rh203,Rh204,Rh205,Rh206,Rh207,Rh208,Rh209,Rh210,Rh211,Rh212,Rh213,Rh214,Rh215,Rh216,Rh217,Rh218,Rh219,Rh220,Rh221,Rh222,Rh223,Rh224,Rh225,Rh226,Rh227,Rh228,Rh229,Rh230,Rh231,Rh232,Rh233,Rh234,Rh235,Rh236,Rh237,Rh238,Rh239,Rh240,Rh241,Rh242,Rh243,Rh244,Rh245,Rh246,Rh247,Rh248,Rh249,Rh250,Rh251,Rh252,Rh253,Rh254,Rh255,Rh256,Rh257,Rh258,Rh259,Rh260,Rh261,Rh262,Rh263,Rh264,Rh265,Rh266,Rh267,Rh268,Rh269,Rh270,Rh271,Rh272,Rh273,Rh274,Rh275,Rh276,Rh277,Rh278,Rh279,Rh280,Rh281,Rh282,Rh283,Rh284,Rh285,Rh286,Rh287,Rh288,Rh289,Rh290,Rh291,Rh292,Rh293,Rh294,Rh295,Rh296,Rh297,Rh298,Rh299,Rh300,Rh301,Rh302,Rh303,Rh304,Rh305,Rh306,Rh307,Rh308,Rh309,Rh310,Rh311,Rh312,Rh313,Rh314,Rh315,Rh316,Rh317,Rh318,Rh319,Rh320,Rh321,Rh322,Rh323,Rh324,Rh325,Rh326,Rh327,Rh328,Rh329,Rh330,Rh331,Rh332,Rh333,Rh334,Rh335,Rh336,Rh337,Rh338,Rh339,Rh340,Rh341,Rh342,Rh343,Rh344,Rh345,Rh346,Rh347,Rh348,Rh349,Rh350,Rh351,Rh352,Rh353,Rh354,Rh355,Rh356,Rh357,Rh358,Rh359,Rh360,Rh361,Rh362,Rh363,Rh364,Rh365,Rh366,Rh367,Rh368,Rh369,Rh370,Rh371,Rh372,Rh373,Rh374,Rh375,Rh376,Rh377,Rh378,Rh379,Rh380,Rh381,Rh382,Rh383,Rh384,Rh385,Rh386,Rh387,Rh388,Rh389,Rh390,Rh391,Rh392,Rh393,Rh394,Rh395,Rh396,Rh397,Rh398,Rh399,Rh400,Rh401,Rh402,Rh403,Rh404,Rh405,Rh406,Rh407,Rh408,Rh409,Rh410,Rh411,Rh412,Rh413,Rh414,Rh415,Rh416,Rh417,Rh418,Rh419,Rh420,Rh421,Rh422,Rh423,Rh424,Rh425,Rh426,Rh427,Rh428,Rh429,Rh430,Rh431,Rh432,Rh433,Rh434,Rh435,Rh436,Rh437,Rh438,Rh439,Rh440,Rh441,Rh442,Rh443,Rh444,Rh445,Rh446,Rh447,Rh448,Rh449,Rh450,"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\"\n\n'''"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6''') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p.|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P.|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P.|...|:P.|.P.|:P.|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K.|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n''')\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 \\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'White:.o.r.o.a.p.q.k.b.c.d.f.g.h.a.e4. \\nBlack:.k.q.d.r.n.h.b.g.f.c.p.o.p.p.p.p.a.b.c.d.e7.f7.h7.h6'\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Nc6, a7, b7, c7, d7, e7, f7, h7, h6, a3, e4, f2, g2, h2, b2, c2, d2, r2, q2, k2, n2, p1, p2, r, b, q, k, n, p, f, i, h, a, l, m, p, t, s, d, f, e, g, j, h, g, g, k, q, p, r, s, q, p, s, p, p, p, g, q, p, r, g, g, k, q, p, r, p, p, p, p, p, p, r, q, p, r, q, q, k, q, p, r, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p,"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.000000 2.000000') == 'Need more materials!'"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == \"Diablo is happy!\\n\"\nassert solution(\"1.000000 4.000000\") == \"Need more materials!\\n\"\nassert solution(\"2.000000 3.000000\") == \"Need more materials!\\n\"\nassert solution(\"4.000000 5.000000\") == \"Need more materials!\\n\"\nassert solution(\"5.000000 6.000000\") == \"Need more materials!\\n\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0.000000 4.000000''') == 'Diablo is happy!'\nprint(solution('''1.000000 4.000000'''))\nprint(solution('''0.000000 100.000000'''))\nprint(solution('''1.000000 10.000000'''))\nprint(solution('''0.000000 10.000000'''))\n'''\n\n##############################################################################################################"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '0.000000 4.000000'\n) == 'Need more materials!'\nassert solution(\n    '1.000000 5.000000'\n) == 'Diablo is happy!'\n\"\"\"\n\nstdin = '0.000000 4.000000'\n\nimport math\n\nA, B = map(float, stdin.split())"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('2.234567 1.234567') == 'Need more materials!'\nassert solution('4.000000 3.3') == 'Need more materials!'\nassert solution('5.234567 3.3') == 'Need more materials!'\nassert solution('10.000000 9.3') == 'Need more materials!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"Diablo is happy!\"\nassert solution(input) == \"Need more materials!\"\n'''\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.000000 8.000000') == 'Need more materials!'\nassert solution('1.000000 10.000000') == 'Need more materials!'\n'''"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('100.000000 100.000000') == 'Need more materials!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('4.000000 3.000000') == 'Need more materials!'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 2 3\\n') == 'use the stairs'\nassert solution('10 1 10 2 1') == '6'\n'''\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('2 1 3 2 4') == 'use the stairs'\nassert solution('5 1 5 3 4') == '2'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1 10 2 1\n''') == 'use the stairs'\nassert solution('''\n10 2 9 3 1\n''') == '6'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 3 3') == '4'\nassert solution('20 1 20 5 5') == '19'\n\"\"\"\nimport time\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 4 2') == '6'\nassert solution('5 1 4 2') == 'use the stairs'\nassert solution('10 1 10 2') == 'use the stairs'\nassert solution('5 1 4 2') == '6'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('10 10 10 10 10') == 'use the stairs'\nassert solution('10 10 10 10 10 10 10 10') == 'use the stairs'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"20 10 15 2 5\") == \"15\"\nassert solution(\"20 10 20 20 20 5\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 4 2 1') == 'use the stairs'\nassert solution('10 1 10 2 1') == '6'\nassert solution('100 100 100 100') == 'use the stairs'\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5\n3\n1 2 3 4 5''') == '2'\nassert solution('''3 2\n1 2 3''') == 'use the stairs'\nassert solution('''7 8\n1 2 3 4 5 6 7''') == 'use the stairs'\nassert solution('''1 1\n2''') == 'use the stairs'\nassert solution('''4 6\n1 2 3 4 5 6''') == '2'\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"128.8\"\nassert solution(\"4\") == \"89.0\"\nassert solution(\"10\") == \"89.0\"\nassert solution(\"15\") == \"89.0\"\nassert solution(\"16\") == \"89.0\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"128.8\"\nassert solution(\"5\") == \"90.5\"\nassert solution(\"1000000000\") == \"10.11\"\nassert solution(\"1000000000.01\") == \"9.11\"\nassert solution(\"-0.5\") == \"-0.5\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"128.8\"\nassert solution(\"10\") == \"89.0\"\nassert solution(\"1.0\") == \"0.0\"\nassert solution(\"0.9\") == \"0.0\"\nassert solution(\"0.5\") == \"0.5\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '128.8'\nassert solution('3.3') == '127.3'\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '128.8'\nassert solution('5') == '89.0'\nassert solution('6') == '89.0'\nassert solution('7') == '89.0'\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n500\\n120\\n75\\n') == '128.8'\n\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n500\n120\n75\n\"\"\"\n) == \"128.8\"\n\nassert solution(\n\"\"\"\n5\n1000\n1000\n1000\n1000\n1000\n\"\"\"\n) == \"2.0\"\n\nassert solution(\n\"\"\"\n4\n100\n100\n100\n100\n\"\"\"\n) == \"2.0\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n500\\n120\\n75') == '128.8'\nassert solution('2\\n0\\n0\\n0') == '0.0'\nassert solution('3\\n1000\\n900\\n800') == '100.0'"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '128.8'\nassert solution('2') == '89.0'\nprint(solution(input()))\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"128.8\"\nassert solution(\"10\") == \"89.0\"\nassert solution(\"10\") == \"89.0\"\nassert solution(\"1000000\") == \"89.0\"\nassert solution(\"1000000\") == \"89.0\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 45 65 84 346') == '4'\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\nassert solution('4\\n2 30 23 11') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 45 65 84 346\") == \"4\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 45 65 84 346\\n') == '4'\nassert solution('2\\n1 1 2\\n') == '1'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 45 65 84 346\n2 3 4\n1 4 5''') == '4'\n\nassert solution('''3\n1 45 65 84 346\n2 3 4\n1 4 5''') == '0'\n\nassert solution('''3\n1 45 65 84 346\n2 3 4\n1 4 5''') == '5'\n\nassert solution('''10\n3 45 65 84 346\n2 3 4\n1 4 5\n1 4 6\n1 4 7\n1 4 8\n1 4 9\n1 4 10\n1 4 11\n1 4 12\n1 4 13\n1 4 14\n1 4 15\n1 4 16''') == '8'\n\nassert solution('''2\n1 3\n3 5\n2 5''') == '0'"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\nassert solution('5\\n1 44 65 84 346') == '5'\nassert solution('5\\n1 43 65 84 346') == '4'\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 45 65 84 346\") == \"4\"\nassert solution(\"2 1 7 10 1\") == \"2\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n\"\"\"\nfrom typing import Dict\nimport collections\nimport itertools\nimport math\nimport re\n\nWIDTH = None\nHEIGHT = None"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n'\n                'P\\n') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('100 5\\n########\\n#P.GTG#\\n#..TGG#\\n########\\n########\\n#P.GTG#\\n#..TGG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n#P.GTG#\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n########\\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\n\nsolution(\"3 3\\n#######\\n.P.GTG#\\n#..TGG#\\n#######\") == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '1\\n'\n\"\"\""
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n20\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 4\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$_$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$''') == '5'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('13 50') == '5'\nassert solution
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"13 50\") == \"5\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\n'''"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$_$$____$___$__$__$___$_$__$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == '5'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$_$____$___$__$__$___$_$__$__\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == '5'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"13 50\") == \"5\"\nassert solution(\"1 1\") == \"1\"\n\n'''\nimport itertools\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([13, 50]) == '5'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n\"\"\"\n\nimport itertools\n\nclass Public_School:\n    def __init__(self, rows, cols):\n        self.grid = [['_' for col in range(cols)] for row in range(rows)]\n        self.row_size = rows\n        self.col_size = cols\n        self.size = rows * cols\n\n    def add_row(self, row_data):\n        for col_idx in range(self.col_size):\n            self.grid[row_idx][col_idx] = row_data[col_idx]\n\n    def remove_row(self, row_idx):\n        for col_idx in range(self.col_size):\n            self.grid[row_idx][col_idx] = '_'\n\n    def add_column(self, col_data):\n        for row_idx in range(self.row_size):\n            self.grid[row_idx][col_idx] = col_data[row_idx]\n\n    def remove_column(self, col_idx):\n        for row_idx in range(self.row_size):\n            self.grid[row_idx][col_idx] = '_'\n\n    def print(self):\n        for row in self.grid:\n            print(row)"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 5') == '1'\nassert solution('100 50') == '0'\nassert solution('0 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i'm a big old man\") == \"iyay ma'am biglalay\"\nassert solution(\"this is is a big old man\") == \"this is is a biglalay\"\nassert solution(\"this is a big old man\") == \"this is a biglalay\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('I cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('There yay eenway olay itay.') == 'Thereyay eenway yay itay olay'\nassert solution('I can speak pig latin.') == 'I can speak pig latin.'\n'''\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('this is it') == 'thay is otay isay it'\nassert solution('and this is to be at the same pace') == 'and this is otay tobay otay isay otay beay tay beay pace'\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"i can speak pig latin\") == \"iyay antcay eakspay igpay atinlay\", solution(\"i can speak pig latin\")\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\"\"\"\n\nimport re\n\nwords = list(map(lambda line: line.split(), stdin.split('\\n')))\n\nfor w in words:\n    for i in range(len(w)):\n        if re.match(r'[a-zA-Z]', w[i]):\n            if w[i][0] not in 'aeiouy':\n                w[i] = w[i][1:] + w[i][0]\n            w[i] += 'ay'\n            break\n    print(' '.join(w))"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay', f'wrong result for \"{stdin}\"'"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n\ns = stdin.read().split('\\n')\n\ns = [s.split() for s in s]\n\nfor i in s:\n    for j in range(len(i)):\n        if i[j][0].lower() in \"aeiou\":\n            i[j] = i[j][1:] + i[j][0] + \"ay\"\n        else:\n            i[j] = i[j][1:] + i[j][0]\n    i =''.join(i)\n\nprint(i)\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npea soup\\npunsch\\n') == 'nymble'\nprint('all test cases passed')\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble', 'First'\nassert solution('''\n1\nq\npancakes\n3\npancakes\n''') == 'Anywhere is fine I guess', 'Second'"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\nq\\npotatoes\\n') == 'nymble'\nassert solution('2\\nq\\nsalad\\n') == 'Anywhere is fine I guess'\nassert solution('2\\nq\\npea soup\\n') == 'Anywhere is fine I guess'\nassert solution('2\\nq\\npancakes\\n') == 'Anywhere is fine I guess'\nassert solution('2\\nq\\nsalad\\n') == 'Anywhere is fine I guess'\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == \"nymble\"\nassert solution('''\n3\nq\npotatoes\nsalad\n3\npea soup\npancakes\n''') == \"Anywhere is fine I guess\"\n'''"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nq\\npotatoes\") == \"nymble\"\nassert solution(\"3\\nnymble\\npunsch\\n\") == \"Anywhere is fine I guess\"\nassert solution(\"1\\npotatoes\\n\") == \"Anywhere is fine I guess\"\nassert solution(\"1\\n\") == \"Anywhere is fine I guess\"\nassert solution(\"1\") == \"Anywhere is fine I guess\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open(\"input.txt\").read()) == \"punsch\"\nassert solution(open(\"input_test.txt\").read()) == \"pea soup\""
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\nassert solution('''\n2\n3\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'Anywhere is fine I guess'\n'''\n\nn = int(input())\nwhile n > 0:\n    n -= 1\n    line = input()\n    items = line.split()\n    while len(items) > 1:\n        i = 1\n        while items[i] == \"pancakes\":\n            i += 1\n        if i == len(items):\n            break\n        if items[0] == \"pea soup\":\n            print(items[1])\n            break\n        elif items[0] == \"salad\":\n            print(items[1])\n            break\n        i += 1\n    else:\n        print(\"Anywhere is fine I guess\")\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'Anywhere is fine I guess'\nassert solution('2') == 'Anywhere is fine I guess'"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\nassert solution('3\\n1\\nsalad\\nq\\n1\\npancakes\\npea soup\\n3\\n') == 'Anywhere is fine I guess'\nassert solution('3\\n1\\npea soup\\nsalad\\nq\\n1\\npancakes\\n') == 'Anywhere is fine I guess'\nassert solution('1\\n1\\n') == 'Anywhere is fine I guess'"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 0 15\n''') == '3'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('6 0 18') == '2'\nassert solution('0 0 10') == '0'\nassert solution('0 0 9') == '1'\nassert solution('0 0 8') == '1'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''5 0 15\n''') == '3'\nassert solution(\n'''5 0 1\n''') == '0'\n\n'''\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == '3'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"20 4 5\") == \"5\"\nassert solution(\"10 30 20\") == \"3\"\nassert solution(\"1 0 5\") == \"1\"\nassert solution(\"4 0 0\") == \"1\""
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 0 15\") == \"3\""
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('15 0 5') == '2'\nassert solution('20 0 5') == '2'\nassert solution('20 0 15') == '1'\nassert solution('15 0 20') == '1'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"5 1 50\") == \"5\"\nassert solution(\"15 1 50\") == \"16\"\nassert solution(\"15 0 50\") == \"16\"\nassert solution(\"0 1 50\") == \"16\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"15 9\") == \"13\""
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"5 9\") == \"15\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"4 1\") == \"7\"\nassert solution(\"12 2\") == \"15\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n11 15\n10\n''') == '10', \"Wrong\"\nassert solution('''\n12 14\n5\n''') == '5', \"Wrong\"\n'''\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 10\n''') == '19'\nprint('All test cases passed')"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 20\") == \"25\"\nprint(solution(input()))\n\n\n\n3\n3\n5\nOutput:\n3"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    11 15\n    \"\"\"\n    ) == \"19\"\n\nassert solution(\n    \"\"\"\n    13 30\n    \"\"\"\n    ) == \"34\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 15') == '19', 'Should return $19$'"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 20\n''') == '30'\nprint(solution('''\n10 20\n'''))\nassert solution('''\n100 200\n''') == '200'\nprint(solution('''\n100 200\n'''))\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n11 15\n''') == '19'\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 15') == '19'"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South East') == 'Yes'\nassert solution('North East South West') == 'No'\nassert solution('North East South East') == 'Yes'\nassert solution('North East South East') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North South South') == 'No'\nassert solution('East North South East') == 'No'\nassert solution('North West East') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('North South West') == 'Yes'\nassert solution('North South East') == 'No'\nassert solution('East North West') == 'No'\n\n\"\"\"\n\nNorth, South, East, West = 'North', 'South', 'East', 'West'"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South South East') == 'No'\nprint('solution() finished')\n\n\"\"\"\n\nimport re\nfrom itertools import product\nfrom collections import Counter\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North South West\") == \"No\"\nassert solution(\"North North East\") == \"Yes\"\nassert solution(\"North South East\") == \"Yes\"\nassert solution(\"North South South East\") == \"Yes\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('North') == 'Yes'\nassert solution('South') == 'No'\nassert solution('East') == 'Yes'\nassert solution('West') == 'Yes'\nassert solution('West East') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"North East\") == \"Yes\"\nassert solution(\"North South South East\") == \"Yes\"\nassert solution(\"North South South West\") == \"No\"\nassert solution(\"North North South South South East\") == \"No\"\nassert solution(\"North East South East\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\nassert solution('North South South') == 'Yes'\nassert solution('North East South') == 'No'\nassert solution('North South East') == 'Yes'\n\n---> Sample Output 2 (More examples in the test cases)\nYes\nNo\nYes\nNo\nYes\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North South West') == 'Yes'\nassert solution('North East West') == 'No'\nassert solution('North East East') == 'Yes'\nassert solution('North South East') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"North South East\") == \"Yes\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') =='marywasnosyagain'\nassert solution('7 3') == 'xbvvxrhg'\n\n\nclass Solution:\n    def solution(self, n, m, *args):\n        # write your code in Python 3.6\n        # prefix = ''.join(args[:n])\n        # return prefix + args[n].upper()\n        return ''.join([args[0][i] if i <= len(args[0]) else args[1][i-len(args[0])] for i in range(n, n+m)])\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 6\nagain\npirpumsemoystoal\n''') =='marywasnosyagain'\nassert solution('''5 3\nhello\npirpumsemoystoal\n''') == 'hello'\nassert solution('''5 4\nm\npirpumsemoystoal\n''') =='m'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('10 8\\nabcd\\nefg\\njkl\\nmnop\\nqrst\\nuvw\\nxyz\\n') == 'zvybqrstuvwxyz'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 16 \\n again \\n pirpumse') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n'\n                '3\\n'\n                'a b') == 'a b'\nassert solution('4\\n'\n                '5\\n'\n                'aaa') == 'aaa'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6\\npirpumseamoystoal\\n') =='marywasnosyagain'\nprint(solution(input()))\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nabc\\ndef\") == \"def\"\nassert solution(\"2\\nghi\\njkl\") == \"kjl\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n' +''.join(['again','moo', 'pepe']) + '\\n' + '4 6\\n' +'moo'.join(['again', 'pim', 'pepe', 'pepe','moo','moo']) + '\\n') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 16\\nagain\\npirpumse\\nmoystoa\\n') =='marywasnosyagain'\n'''\n\nn, m = map(int, input().split())\na = input()\nc = input()"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\npirpumsemoystoal') == 'again'\nassert solution('2\\n5\\nkqpgqpldozmzhhdm)') =='mwasos'\n'''"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == \"Either\"\nassert solution('2') == \"Either\"\nassert solution('3') == \"Even\"\nassert solution('4') == \"Odd\"\nassert solution('5') == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'Either'\nassert solution(input()) == 'Odd'\nassert solution(input()) == 'Even'"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Even'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"Either\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"8\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\nassert solution(\"15\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == \"Even\"\nassert solution('2') == \"Odd\"\nassert solution('3') == \"Either\"\n'''"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Even'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'Either'\nassert solution('4') == 'Either'\nassert solution('5') == 'Odd'\nassert solution('8') == 'Odd'\nassert solution('9') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('7') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Either'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897\\n') == '3\\n1\\n4\\n1\\n5\\n'\nassert solution('7\\n1\\n999999\\n') == '1\\n4\\n'\nassert solution('7\\n1\\n9999999\\n') == '1\\n4\\n'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n314\n1\n5926\n5\n35897''') == '3'\nassert solution('''1\n314\n1\n5926\n5\n35897''') == '1'\nassert solution('''6\n314\n1\n5926\n5\n35897\n10''') == '4'\nassert solution('''5\n314\n1\n5926\n5\n35897\n10''') == '4'\nassert solution('''100\n314\n1\n5926\n5\n35897\n10''') == '5'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3'\nassert solution('4\\n1\\n3\\n5') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '10'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '4'\nassert solution('4') == '1'\nassert solution('6') == '2'"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\n100\\n5\\n2') == '3'\nassert solution('3\\n100\\n5\\n2') == '1'\nassert solution('10\\n100\\n10\\n2') == '4'\nassert solution('1\\n100\\n100\\n2') == '5'\nassert solution('3\\n10\\n100\\n2') == '1'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('4') == '1'\nassert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('10') == '4'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897\\n') == '3\\n1\\n4\\n1\\n5'\nassert solution('5\\n3210\\n1\\n5\\n3\\n') == '1\\n4\\n1\\n2\\n1'\nassert solution('5\\n3210\\n1\\n5\\n3\\n') == '1\\n4\\n1\\n1\\n1'\nassert solution('5\\n3210\\n1\\n5\\n3\\n') == '1\\n1\\n1\\n1\\n1'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('314') == '3'\nassert solution('1') == '1'\nassert solution('5926') == '4'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1'\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n314\n1\n5926\n5\n35897\n''') == '3'\n\nassert solution('''\n5\n1\n1\n1\n1\n1\n''') == '4'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == 'yes'\n\nassert solution('''5 7\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == 'yes'\n\nassert solution('''8 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == 'no'\n\nassert solution('''5 7\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 5\\nc t\\n\\nk p\\n\\no c\\n\\nr o\\n\\nt e\\n\\nt f\\n\\nu h\\n\\nwe we\\n\\ncan the\\n\\nwork people\\n\\nit of\\n\\nthe out the\\n') == 'no'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\n\\nwe we\\n\\ncan the\\n\\nwork people\\n\\nit of\\n\\nthe out the\\n') == 'yes'\nassert solution('9 5\\nq g\\n\\ns a\\n\\nk p\\n\\nt e\\n\\nt f\\n\\nu h\\n\\nwe we\\n\\ncan the\\n\\nwork people\\n\\nit of\\n\\nthe out the\\n') == 'no'\nassert solution('9 5\\nq g\\n\\ns a\\n\\nk p\\n\\nt e\\n\\nt f\\n\\nu h\\n\\nwe we\\n\\ncan the\\n\\nwork people\\n\\nit of\\n\\nthe out the\\n') == 'yes'\nassert solution('9 5\\nq g\\n\\ns a\\n\\nk p\\n\\nt e\\n\\nt f\\n\\nu h\\n\\nwe we\\n\\ncan the\\n\\nwork people\\n\\nit of\\n\\nthe out the\\n') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9 5') == 'yes'\nassert solution('10 3') == 'no'\nassert solution('9 5') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"9 5\\nct\\nir\\nkr\\noc\\nre\\nte\\ntef\\nuh\\nwp\\nwe we\\ncan the\\nwork people\\ni of\\nthe out the\\n\") == \"yes\"\nassert solution(\"10 1\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca\\nca"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 5') == 'yes'\nassert solution('5 2') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 4\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nct kp o c r o t e f u h we\") == \"no\"\nassert solution(\"4 5\\nt i r\\nc t\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe\") == \"yes\"\nassert solution(\"10 4\\nct kp o c r o t e f u h we\\nt i r\\nc t\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe\") == \"no\"\nassert solution(\"6 4\\nk p\\nc t\\nk o\\nt e\\nf u h\\nwe\") == \"no\""
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == 'yes'\n\nassert solution('''\n1 2\ni\n''') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"9 5\\nc t\\n i r\\nk p\\no c\\n r o\\n t e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nassert solution(\n    \"9 5\\n t\\n i r\\nk p\\no c\\n r o\\n t e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\nassert solution(\n    \"9 5\\n t\\n i r\\nk p\\no c\\n r o\\n t e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nassert solution(\n    \"9 5\\n c\\n i r\\nk p\\no c\\n r o\\n t e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\"\nassert solution(\n    \"9 5\\n t\\n i r\\nk p\\no c\\n r o\\n t e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"no\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 5\\nctt\\nir\\nrkr\\nopc\\nrot\\nte\\nftf\\nuhh\\nwpm\\nwpc\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n') == 'yes\\nno\\nno\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\n'\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\n9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\nSample Output:\nyes\nno\nno\nyes\nyes\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"carrots?\") == \"1\"\nassert solution(\"bunnies\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2 1\\ncarrots?\\nbunnies') == '1'\nprint('\"Run\" is the variable name used in Python for lists and dictionaries. Try using \"list\" and \"dict\" to see what you are dealing with.')"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\ncarrots?') == '1'\nassert solution('2 1\\nbunnies?') == '1'"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 5\\nAab?\\nCc?\\nCd?\\nEf?\") == \"1\"\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\ncarrots?') == '1'\nassert solution('2\\nbunnies') == '1'"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\ncarrots?\nbunnies\n''') == '1'\nassert solution('''\n10 2\ncarrots?\nbunnies\n''') == '1'\nassert solution('''\n4 1\ncarrots?\nbunnies\n''') == '2'\nassert solution('''\n20 10\ncarrots?\nbunnies\n''') == '4'\nassert solution('''\n1 1\ncarrots?\nbunnies\n''') == '0'\n'''\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == \"1\"\nassert solution(\"5 2\\n1 2 1 1 2\\n\") == \"1\"\nassert solution(\"3 3\\n2 2 2\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"1\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\ncarrots?') == '1'\nassert solution('2 1\\nbunnies?') == '2'\n\n---Input---\n1 3\npikachu\nsableye\n\n---Output---\n2\n\n---Explanation---\nhttps://stackoverflow.com/questions/3490951/how-do-i-check-if-an-integer-is-even-or-odd-in-python\n\n\"\"\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\n---\nSample Input:\nK:a,a:b,b:c,c:d,d:e,e:f,f:g,g:h,h:i,i:j\na:j:k,b:l,c:m,d:n,e:o,f:p,g:q,h:r,i:s,j:t\n\na:t,b:u,c:v,d:w,e:x,f:y,g:z,h:a,i:b,j:c,k:d,l:e,m:f,n:g,o:h,p:i,q:j,r:k,s:l,t:m,u:n,v:o,w:p,x:q,y:r,z:s,a:t,b:u,c:v,d:w,e:x,f:y,g:z,h:a,i:b,j:c,k:d,l:e,m:f,n:g,o:h,p:i,q:j,r:k,s:l,t:m,u:n,v:o,w:p,x:q,y:r,z:s,a:t,b:u,c:v,d:w,e:x,f:y,g:z,h:a,i:b,j:c,k:d,l:e,m:f,n:g,o:h,p:i,q:j,r:k,s:l,t:m,u:n,v:o,w:p,x:q,y:r,z:s\n\na:t,b:u,c:v,d:w,e:x,f:y,g:z,h:a,i:b,j:c,k:d,l:e,m:f,n:g,o:h,p:i,q:j,r:k,s:l,t:m,u:n,v:o,w:p,x:q,y:r,z:s,a:t,b:u,c:v,d:w,e:x,f:y,g:z,h:a,i:b,j:c,k:d,l:e,m:f,n:g,o:h,p:i,q:j,r:k,s:l,t:m,u:n,v:o,w:p,x:q,y:r,z:s,a:t,b:u,c:v,d:w,e:x,f:y,g:z,h:a,i:b,j:c,k:d,l:e,m:f,n:g,o:h,p:i,q:j,r:k,s:l,t:m,u:n,v:o,w:p,x:q,y:r,z:s\n\nK:a,a:b,b:c,c:d,d:e,e:f,f:g,g:h,h:i,i:j\na:j:k,b:l,c:m,d:n,e:o,f:p,g:q,h:r,i:s,j:t\n\na:t,b:u,c:v,d:"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,a100,a101,a102,a103,a104,a105,a106,a107,a108,a109,a110,a111,a112,a113,a114,a115,a116,a117,a118,a119,a120,a121,a122,a123,a124,a125,a126,a127,a128,a129,a130,a131,a132,a133,a134,a135,a136,a137,a138,a139,a140,a141,a142,a143,a144,a145,a146,a147,a148,a149,a150,a151,a152,a153,a154,a155,a156,a157,a158,a159,a160,a161,a162,a163,a164,a165,a166,a167,a168,a169,a170,a171,a172,a173,a174,a175,a176,a177,a178,a179,a180,a181,a182,a183,a184,a185,a186,a187,a188,a189,a190,a191,a192,a193,a194,a195,a196,a197,a198,a199,a200,a201,a202,a203,a204,a205,a206,a207,a208,a209,a210,a211,a212,a213,a214,a215,a216,a217,a218,a219,a220,a221,a222,a223,a224,a225,a226,a227,a228,a229,a230,a231,a232,a233,a234,a235,a236,a237,a238,a239,a240,a241,a242,a243,a244,a245,a246,a247,a248,a249,a250,a251,a252,a253,a254,a255,a256,a257,a258,a259,a260,a261,a262,a263,a264,a265,a266,a267,a268,a269,a270,a271,a272,a273,a274,a275,a276,a277,a278,a279,a280,a281,a282,a283,a284,a285,a286,a287,a288,a289,a290,a291,a292"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+') == 'White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+') == 'White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|...|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P.|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K.|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == '''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n''':\n    print(solution(stdin))\nelse:\n    print(f'The result is {solution(stdin)}!')"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,b3,f4,h4,g4,a5,e5,h5,g5,h6,i6,b7,i7,h7,g7,h8,i8,b8,i9,h9,g9,i10,h10,g11,i11,h12,i12,h13,i13,i14,i15,h15,i16,h17,i18,h19,i20,h21,i22,h22,i23,i24,h24,i25,h26,i27,h28,i29,h30,i31,h32,i33,h34,i35,h36,i37,h38,i39,h40,i41,h42,i43,h44,i45,h46,i47,h48,i49,h50,i51,h52,i53,h54,i55,h56,i57,h58,i59,h60,i61,h62,i63,h64,i65,h66,i67,h68,i69,h70,i71,h72,i73,h74,i75,h76,i77,h78,i79,h80,i81,h82,i83,h84,i85,h86,i87,h88,i89,h90,i91,h92,i93,h94,i95,h96,i97,h98,i99,h100,i101,h102,i103,h104,i105,h106,i107,h108,i109,h110,i111,h112,i113,h114,i115,h116,i117,h118,i119,h120,i121,h122,i123,h124,i125,h126,i127,h128,i129,h130,i131,h132,i133,h134,i135,h136,i137,h138,i139,h140,i141,h142,i143,h144,i145,h146,i147,h148,i149,h150,i151,h152,i153,h154,i155,h156,i157,h158,i159,h160,i161,h162,i163,h164,i165,h166,i167,h168,i169,h170,i171,h172,i173,h174,i175,h176,i177,h178,i179,h180,i181,h182,i183,h184,i185,h186,i187,h188,i189,h190,i191,h192,i193,h194,i195,h196,i197,h198,i199,h200,i201,h202,i203,h204,i205,h206,i207,h208,i209,h210,i211,h212,i213,h214,i215,h216,i217,h218,i219,h220,i221,h222,i223,h224,i225,h226,i227,h228,i229,h230,i231,h232,i233,h234,i235,h236,i237,h238,i239,h240,i241,h242,i243,h244,i245,h246,i247,h248,i249,h250,i251,h252,i253,h254,i255,h256,i257,h258,i259,h260,i261,h262,i263,h264,i265,h266,i267,h268,i269,h270,i271"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|...|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P.|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R.|.N.|:B.|.Q.|:K.|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,b4,f4,h4,a5,e5,f5,g5,h5,a6,e6,f6,g6,h6,a7,e7,f7,g7,h7,a8,e8,f8,g8,h8,a9,e9,f9,g9,h9,a10,e10,f10,g10,h10,a11,e11,f11,g11,h11,a12,e12,f12,g12,h12,a13,e13,f13,g13,h13,a14,e14,f14,g14,h14,a15,e15,f15,g15,h15,a16,e16,f16,g16,h16,a17,e17,f17,g17,h17,a18,e18,f18,g18,h18,a19,e19,f19,g19,h19,a20,e20,f20,g20,h20,a21,e21,f21,g21,h21,a22,e22,f22,g22,h22,a23,e23,f23,g23,h23,a24,e24,f24,g24,h24,a25,e25,f25,g25,h25,a26,e26,f26,g26,h26,a27,e27,f27,g27,h27,a28,e28,f28,g28,h28,a29,e29,f29,g29,h29,a30,e30,f30,g30,h30,a31,e31,f31,g31,h31,a32,e32,f32,g32,h32,a33,e33,f33,g33,h33,a34,e34,f34,g34,h34,a35,e35,f35,g35,h35,a36,e36,f36,g36,h36,a37,e37,f"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,Kd8,Qc8,Ra8,Rh8,Bf8,Bg8,Nf8,Nh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6,Ke8,Qc8,Ra8,Rh8,Bf8,Bg8,Nf8,Nh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"|.r.|:q:|.k.|:r:|.b.|:n.|:k.|:p:|:p:|.n.|:r:|.p.|:n.|:p.|:n.|:p.|:p:|:p:|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p.|:p"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|...|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P.|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R.|.N.|:B.|.Q.|:K.|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n\nprint(solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|...|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P.|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R.|.N.|:B.|.Q.|:K.|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,Kb1,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6,Kb8,Qd7,Ra6,Rh6,Bc6,Ng6,Nc5,a5,b5,c5,d5,e5,f5,h5,a4,e4,Kb3,Qd2,Ra1,Rh1,Bc1,Ng1,Nc1,a1,b1,c1,d1,e1,f1,h1,a2,e2,Kb2,Qd4,Ra2,Rh2,Bc2,Ng2,Nc2,a2,b2,c2,d2,e2,f2,h2,a3,e3,Kb3,Qd5,Ra3,Rh3,Bc3,Ng3,Nc3,a3,b3,c3,d3,e3,f3,h3,a4,e4,Kb4,Qd6,Ra4,Rh4,Bc4,Ng4,Nc4,a4,b4,c4,d4,e4,f4,h4,a5,e5,Kb5,Qd7,Ra5,Rh5,Bc5,Ng5,Nc5,a5,b5,c5,d5,e5,f5,h5,a6,e6,Kb6,Qd8,Ra6,Rh6,Bc6,Ng6,Nc6,a6,b6,c6,d6,e6,f6,h6,a7,e7,Kb7,Qd9,Ra7,Rh7,Bc7,Ng7,Nc7,a7,b7,c7,d7,e7,f7,h7,a8,e8,Kb8,Qd10,Ra8,Rh8,Bc8,Ng8,Nc8,a8,b8,c8,d8,e8,f8,h8,a9,e9,Kb9,Qd11,Ra9,Rh9,Bc9,Ng9,Nc9,a9,b9,c9,d9,e9,f9,h9,a10,e10,Kb10,Qd12,Ra10,Rh10,Bc10,Ng10,Nc10,a10,b10,c10,d10,e10,f10,h10,a11,e11,Kb11,Qd13,Ra11,Rh11,Bc11,Ng11,Nc11,a11,b11,c11,d11,e11,f11,h11,a12,e12,Kb12,Qd14,Ra12,Rh12,Bc12,Ng12,Nc12,a12,b12,c12,d12,e12,f12,h12,a13,e13,Kb13,Qd15,Ra13,Rh13,Bc13,Ng13,Nc13,a13,b13,c13,d13,e13,f13,h13,a14,e14,Kb14,Qd16,Ra14,Rh14,Bc14,Ng14,Nc14,a14,b14,c14,d14,e14,f14,h14,a15,e15,Kb15,Qd17,Ra15,Rh15,Bc15,Ng15"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('0 5') == 'Your wish is granted!'\nassert solution('10 10') == 'Your wish is granted!'\nassert solution('1 1') == 'You will become a flying monkey!'\nassert solution('1 2') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3\\nfalse\\nfalse\\nfalse\\ntrue\\ntrue\\nfalse') == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('6 2') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n'''"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('4 5') == 'You will become a flying monkey!'\n'''\nfrom itertools import permutations"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 8') == 'You will become a flying monkey!'\nassert solution('100 2') == 'You will become a flying monkey!'\n\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3\\n') == 'Your wish is granted!'\nassert solution('8 6\\n') == 'You will become a flying monkey!'\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"10 5\") == \"You will become a flying monkey!\""
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 3\n''') == 'Your wish is granted!'''\n\nstdin = input().split()\nn,k = int(stdin[0]),int(stdin[1])\nflag = False\nfor num in range(2,n+1):\n    if flag:\n        print('Your wish is granted!')\n        break\n    else:\n        for i in range(k):\n            if num%2==0:\n                continue\n            else:\n                if i==k-1:\n                    print('Your wish is granted!')\n                    flag = True\n                    break\n                else:\n                    continue\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '0'\nassert solution('''\n16\n''') == '918'\nassert solution('''\n16\n''') == '0'\nassert solution('''\n5\n''') == '8'\nassert solution('''\n10\n''') == '8'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"16\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8\n''') == '80'\nassert solution('''16\n''') == '81'"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('16') == '16'\nassert solution('32') == '32'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"16\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    Old MacDonald had a farm, and on that farm she had a square-shaped pasture, and on that pasture she had a cow that was prone to escape. So now Old MacDonald wants to set up a fence around the pasture. Given the area of the pasture, how long a fence does Old MacDonald need to buy? \n    ''') == '16'\nassert solution('''\n    Old MacDonald had a farm, and on that farm she had a square-shaped pasture, and on that pasture she had a cow that was prone to escape. So now Old MacDonald wants to set up a fence around the pasture. Given the area of the pasture, how long a fence does Old MacDonald need to buy? \n    ''') == '10'\n''')"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('8') == '8'\nassert solution('0') == '0'\nassert solution('a') == 'error'\n\n'''"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('16') == '16'\nassert solution('123456') == '100000000000000000'\nassert solution('1000000000000') == '1000000000000'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"16\"\n\"\"\"\n\nimport math\n\na = int(input())\n\nprint(math.ceil(math.sqrt(a)))"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nassert solution('6 180\\n1 2 3 4 5 6') == '6'\nassert solution('6 180\\n1 2 3 4 5') == '3'\nassert solution('6 180\\n1 2 3 4') == '1'\nassert solution('6 180\\n1 2') == '0'\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '4'\n\n\"\"\"\nimport sys\nimport math\ninput = sys.stdin.readline\n\nn, t = map(int, input().split())\n\ntasks = list(map(int, input().split()))\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20\\n') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 180\n45 30 55 20 80 20\n''') == '4'\n\nassert solution('''\n6 180\n40 50 20 90 10 20\n''') == '3'\n\nassert solution('''\n6 180\n40 40 20 20 20 20\n''') == '1'\n\nassert solution('''\n6 180\n40 40 20 20 20 20\n''') == '1'\n\n'''"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 180\n45 30 55 20 80 20\n''') == '4', \"WA\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nassert solution('8 30 80\\n55 20 90 40 15 70 40\\n80 70 50 30') == '7'\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\"\nprint(\"Check your answer: \", end=\"\")\nprint(solution(*input().split()))\n\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == \"4\""
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n') == '6', \"Wrong!\"\n\n##\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '79'\nassert solution('1') == '79'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '79'\nassert solution([21, 34, 18, 9]) == '79'"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2', solution('3')\nassert solution('5') == '7', solution('5')\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '79\\n'\nassert solution('3\\n') == '79\\n'\nassert solution('2\\n') == '79\\n'\n\n--Challenge:--\nThis is a very difficult problem. You will be given a short rod and a long rod and you must try to figure out which rod is bigger.\n\nYou must figure out the logic used to decide the length of the long rod, but there are several options that will lead to different solutions. You must figure out which one of these options is the correct one.\n\n---Explanation---"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '9', 'First'\nassert solution('4') == '18', 'Second'\nassert solution('5') == '35', 'Third'\nassert solution('6') == '90', 'Fourth'\nassert solution('7') == '61', 'Fifth'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('3\\n21\\n22\\n22') == '109'\nassert solution('2\\n21\\n22\\n22') == '109'"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n10\\n\") == \"20\\n\"\nassert solution(\"3\\n2\\n1\\n\") == \"13\\n\"\nassert solution(\"3\\n2\\n1\\n\") == \"12\\n\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\""
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\nassert solution('7') == '58'\nassert solution('8') == '58'\nassert solution('9') == '58'"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('2 0 1\\n3 4 5') == '0 1 3'\n\"\"\"\n\nfrom collections import deque\nimport itertools\nimport functools"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == \"2 3 0\"\nassert solution('4 1 4 4\\n1 1 1 1') == \"3 1 1\"\nassert solution('4 1 4 4\\n1 1 1 1') == \"impossible\""
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 0\\n') == '2 3 0'\nassert solution('3 3 0\\n') == '2 3 0'\nassert solution('2 3 2 0\\n') == '2 3 2 0'\nassert solution('2 4 4 0\\n') == '2 3 2 0'\nassert solution('2 2 3 4 0\\n') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n3 1 0\") == \"3 2 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n4 3 0\") == \"4 3 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n4 3 2\") == \"4 3 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n4 3 2\\n2 3 2\") == \"4 3 2\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3 3 4\n0 1 4\n''') == '2 3 0'\n\"\"\""
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 4\") == \"2 3 0\"\nassert solution(\"1 3 3 4\") == \"2 3 0\"\nassert solution(\"2 2 2 2\") == \"impossible\"\nassert solution(\"2 2 2 2\") == \"2 3 0\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\\n\") == \"2 3 0\""
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\") == \"2 3 0\"\nassert solution(\"5 1 2 4\") == \"0 3 1\"\nassert solution(\"10 1 1 1\") == \"1 1 0\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 4\") == \"2 3 0\"\nassert solution(\"1 3 3 4\") == \"3 3 0\"\nassert solution(\"10 10 5 10\") == \"10 10 1\"\nassert solution(\"0 1 1 0\") == \"0 1 0\"\nassert solution(\"0 1 0 1\") == \"0 1 0\"\n\"\"\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 3 4\n0 1 4\n''') == '2 3 0'\nassert solution('''5 3 3 4\n1 1 4\n''') == '1 1 0'\nassert solution('''5 3 3 4\n0 1 4\n0 1 0\n''') == '2 2 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 4 5 4 2\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2 4 2 1\") == \"1 0 0 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 0 0 0 0 1'\nprint(solution())\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n0 1 2 2 2 7\n\"\"\") == \"\"\"\n1 0 0 0 0 1\n\"\"\"[:-1]\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 2 2 7 8') == '2 0 0 0 0 1 2'\nassert solution('0 1 2 2 2 7 8 9') == '0 0 0 0 0 1 2 3'\n\n'''"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\""
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n123456 0.6666\nqwerty 0.3334\n''') == \"1.3333\"\n'''\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n12345 6.6666') == '12345'\nassert solution('2\\nqwerty 0.3334') == 'qwerty'\n\nThe way that the problem can be solved is by using a for loop and if-else conditional. If the password in the loop is the correct one then we don\u2019t need to check the password again.\n\nDefine a function that takes as input the password list. It must return the password that is of the optimal length and has the highest probability.\n\nThe length and probability of the password must be the same as in the input.\n\nThe password in the input is of the optimal length and the probability of it being the correct one is the maximum probability. If there are more than one password with the same length and probability then the password with the smaller length must be returned.\n\nThe password in the input is of the optimal length and the probability of it being the correct one is the maximum probability. If there are more than one password with the same length and probability then the password with the smaller length must be returned.\n\nThe password in the input is of the optimal length and the probability of it being the correct one is the maximum probability. If there are more than one password with the same length and probability then the password with the smaller length must be returned.\n\nInput:\n2\n123456 0.6666\nqwerty 0.3334\n\nOutput:\n12345\nqwerty\n'''"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n123456 0.6666\nqwerty 0.3334\n\"\"\") == \"1.3334\"\n\nassert solution(\"\"\"\n1\n3\n1.00000\n\"\"\") == \"2.00000\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1234 qwer') == '1234'\nassert solution('5\\n1234 qwer') == '12345'\nassert solution('5\\n1234 qwer') == '23455'\nassert solution('5\\n1234 qwer') == '12345'\nassert solution('5\\n1234 qwer') == '23455'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('2\\n1 0.3334\\nqwerty 0.6666') == '1.3334'\nassert solution('2\\n1 0.3334\\nqwerty 0.6666') == '1.3334'\nassert solution('2\\n1 0.3334\\nqwerty 0.6666') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2\\n\"\n    \"123456 0.6666\\n\"\n    \"qwerty 0.3334\"\n) == \"1.3334\"\nprint(solution(\n    \"2\\n\"\n    \"123456 0.6666\\n\"\n    \"qwerty 0.3334\"\n))\n\n\n\"\"\""
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1\\n1 2 3 4') == \"1\"\nassert solution('7 2\\n2 3 3 4 4 4 5\\n3 5 6 7') == \"6\"\nassert solution('1 10\\n0 0 0 0 0 0') == \"5\"\nassert solution('10 1\\n0 0 0 0 0 0 0 0 0 0 0 0') == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    4 1\n    2 3 4\n    3 4 5 6\n    ''') == '1'\nassert solution('''\n    3 1\n    2 3 4\n    3 4 5 6\n    ''') == '2'\nassert solution('''\n    1 1\n    2 3 4\n    3 4 5 6\n    ''') == '4'\n''')"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n3\n1 2 4''') == '1'''\nassert solution('''3\n1\n2 4''') == '2'''\nassert solution('''3\n1\n2 3\n4 5 6''') == '2'''\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n1 2 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 1\n1 2 4 8 9 6 7 10 6\n\"\"\") == \"8\"\nassert solution(\"\"\"\n10 1\n2 3 4 5 6 7 8 9 10\n\"\"\") == \"7\""
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == \"1\"\nassert solution('4 5 6') == \"3\""
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 3\n1 2 3''') == '1'\nassert solution('''3 1\n1 2 3''') == '1'''\nassert solution('''3 1\n1 1 2''') == '2'''\nassert solution('''3 1\n1 2 3''') == '2'''\nassert solution('''4 1\n1 3 2 3''') == '3'''"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n1 2 4\n''') == '1'\nassert solution('''3 3\n2 6 5\n''') == '1'\nassert solution('''4 1\n1 2 3 4\n''') == '3'\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 4\n''') == '1'\nassert solution('''\n5 1\n1 2 3 4 5\n''') == '1'\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\nassert solution('''\n5 2\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2''') == '''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                   \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''13\n
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('27') == \"\"\"G:\nF:\nE:\nD:\nC:\nB:\nA:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n\"\"\"\nassert solution('18') == \"\"\"E:\nD:\nC:\nB:\nA:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''11\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                   \ne: ----------------------------------------------------------\nd:                                                   \nc:                                                   \nb:                                                   \na: ----------------------------------------------------------'''\n\nassert solution('''0\n''') == '''\n'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == '''G:     \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                               \ne: ----------------------------------------------------------\nd:                                                               \nc:                                                               \nb:                                                               \na: ----------------------------------------------------------'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"G:        \\nF:        \\nE:        \\nD:        \\nC:        \\nB:        \\nA:        \\ng:        \\nf:        \\ne:        \\nd:        \\nc:        \\nb:        \\na:        \\n\"\nassert solution(\"21\") == \"G:        \\nF:        \\nE:        \\nD:        \\nC:        \\nB:        \\nA:        \\ng:        \\nf:        \\ne:        \\nd:        \\nc:        \\nb:        \\na:        \\n\"\nassert solution(\"3\") == \"G:        \\nF:        \\nE:        \\nD:        \\nC:        \\nB:        \\nA:        \\ng:        \\nf:        \\ne:        \\nd:        \\nc:        \\nb:        \\na:        \\n\"\nassert solution(\"29\") == \"G:        \\nF:        \\nE:        \\nD:        \\nC:        \\nB:        \\nA:        \\ng:        \\nf:        \\ne:        \\nd:        \\nc:        \\nb:        \\na:        \\n\"\nassert solution(\"27\") == \"G:        \\nF:        \\nE:        \\nD:        \\nC:        \\nB:        \\nA:        \\ng:        \\nf:        \\ne:        \\nd:        \\nc:        \\nb:        \\na:        \\n\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('27') == 'G:      \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:    \\ng: -----------------------------------------------*----------\\nf:                                                   \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"27\") == \"\"\"\nG:\nF:\nE:\nD:\nC:\nB:\nA:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n\"\"\"\nassert solution(\"2\") == \"\"\"\nG:\nF:\nE:\nD:\nC:\nB:\nA:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n\"\"\"\nassert solution(\"4\") == \"\"\"\nG:\nF:\nE:\nD:\nC:\nB:\nA:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2''') == '''G:\nF: --------*-----\nE:       *   *        \nD: ----*-------*--------------------\nC: * *     *      * *     **    *           *         ** **\nB: ------------------------**-----------------*-----*------\nA:                                                  *        \ng: --------*-----*-----------------*----------*------\nf:                                               *        \ne: --------*-----*----------*----------*------*------\nd:       *   *          *             *   *                \nc: --------*-------*-------------*-------*----------------\nb:                                               *        \na: --------*-----*-----------------*----------*------'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2''') == '''G:                                                                                                    \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                               \ne: ----------------------------------------------------------\nd:                                                               \nc:                                                               \nb:                                                               \na: ----------------------------------------------------------'''\n\nassert solution('''31\nG:\nF:\nE:\nD:\nC:\nB:\nA:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n''') == '''A:\ng:\nf:\ne:\nd:\nc:\nb:\na:\n'''"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"possible\"\nassert solution(\"10\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('1\\n1 1 1') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1 1\n2 1 1\n3 2 1\n2 2 1\n1 3 1\n2 3 1\n1 1 3\n1 1 1\n3 3 1\n1 3 1\n3 2 1\n2 2 1\n1 2 1\n2 2 1\n2 2 1\n1 1 2\n1 2 2\n1 3 2\n1 3 2\n1 2 3\n3 1 2\n2 1 1\n2 1 2\n1 2 2\n1 2 3\n2 1 2\n3 1 2\n1 2 3\n3 3 1\n1 3 1\n1 1 3\n1 3 2\n2 3 1\n1 2 3\n2 1 1\n1 1 2\n1 1 1\n1 3 2\n1 3 1\n2 1 1\n2 1 2\n2 1 3\n2 2 1\n1 3 2\n1 3 1\n3 2 1\n1 3 1\n1 2 3\n2 1 1\n1 1 3\n2 1 2\n2 1 1\n2 1 2\n1 1 3\n1 1 2\n1 2 3\n1 3 1\n1 3 2\n2 1 1\n1 3 1\n2 1 1\n1 2 2\n1 1 2\n1 1 1\n2 1 1\n2 1 1\n1 1 1\n1 3 2\n2 1 1\n1 1 3\n2 1 2\n2 1 1\n2 1 2\n1 1 3\n2 1 3\n1 1 3\n1 1 1\n1 1 1\n1 2 1\n1 3 2\n1 2 3\n1 3 1\n2 1 3\n1 3 1\n1 1 3\n2 3 1\n1 3 1\n1 3 2\n2 1 1\n1 3 1\n1 3 1\n1 1 1\n1 3 2\n1 1 3\n2 1 1\n2 1 2\n1 1 1\n1 1 1\n2 1 1\n1 3 2\n1 2 3\n1 3 1\n1 1 3\n1 1 1\n2 1 1\n1 1 2\n1 1 1\n1 1 1\n1 3 2\n2 1 1\n1 1 3\n1 3 1\n1 1 1\n1 1 3\n1 1 1\n1 1 1\n2 1 1\n1 1 2\n1 1 1\n1 1 1\n1 1 2\n1 1 1\n2 1 1\n1 1 2\n2 1 1\n1 2 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"possible\"\nassert solution(\"3 3 1\") == \"impossible\"\nassert solution(\"2 1 2\") == \"impossible\"\nassert solution(\"2 2 2\") == \"impossible\""
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"possible\"\n\nimport sys\nimport re\n\nN, *L = map(int, sys.stdin.read().split())"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n') == 'impossible'\nassert solution('4\\n') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 2 1') == 'impossible'\n'''"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1 1\n1 1 1\n1 1 1\n''') == 'possible'\nassert solution('''4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == 'impossible'\nassert solution('''20\n
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'possible'\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == '3'\nassert solution(input_2) == '4'\nassert solution(input_3) == '5'"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3\\n1 2 3\") == \"3\"\nassert solution(\"5\\n1 5 1 3 5\\n2 2 1 1\\n3 1 2 1\\n3 3 2 1\\n2 2 3 1\") == \"5\"\nassert solution(\"5\\n1 5 1 3 5\\n2 2 1 1\\n3 1 2 1\\n3 3 2 1\\n2 2 3 1\") == \"6\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n1 2 1\") == \"2\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\nassert solution(\"100\\n2 3 1 1 2 3 1 2 1 2\") == \"4\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '3'\nassert solution('10') == '4'\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\nassert solution('3\\n5 4 4 3 1') == '0'\nassert solution('5\\n1 4 4 4 2') == '3'\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '3'\nassert solution('4 3 3 2 1 2 2 1 1 3') == '3'"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4 3 3 2 1 2 2 1 1 3\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n20 15 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4 3 3 2 1 2 2 1 1 3') == '3'\nassert solution('4\\n5 5 5 5 5 5 5 5') == '1'\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '3'\nassert solution('1000') == '100'\nassert solution('0000') == '1'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"35.54\"\nassert solution(\"5\") == \"35.54\"\nassert solution(\"12\") == \"35.54\"\nassert solution(\"4\") == \"35.54\"\nassert solution(\"1\") == \"35.54\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'ASHMEADE'\nassert solution('20') == 'ASHMEADE'\nassert solution('6') == 'ASHMEADE'\nassert solution('40') == 'ASHMEADE'\nassert solution('80') == 'ASHMEADE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '35.54'\nassert solution('5') == '40.86'\nassert solution('7') == '36.28'\nassert solution('13') == '29.45'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\nassert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nPOWELL\\nBLAKE\\nFRATER'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\n''') == '35.54':\n    print('Test 1 successful')\nelse:\n    print('Test 1 failed')\n\nassert solution('''\n6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == 'BLAKE':\n    print('Test 2 successful')\nelse:\n    print('Test 2 failed')\n''')\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == 'BLAKE'\nassert solution('''\n6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == 'BLAKE'\nassert solution('''\n10\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == 'BLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '35.54'\nassert solution('12') == '35.54'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '35.54'\nassert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"5.55\\nBLAKE\\nPOWELL\\nASHMEADE\"\nassert solution(\"3\") == \"14.00\\nASHMEADE\\nBOLT\\nFRATER\"\nassert solution(\"1\") == \"0.00\\n\"\nassert solution(\"2\") == \"0.00\\n\"\nassert solution(\"0\") == \"0.00\\n\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"35.54\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\nassert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\nassert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\n'''\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2 3\n2 6\n''') == '1'\n\nassert solution('''\n3\n3 1\n2 5\n''') == '2'\n\nassert solution('''\n3\n1 1\n3 3\n''') == '1'\n\nassert solution('''\n3\n1 2\n1 5\n''') == '2'\n\nassert solution('''\n4\n2 1 1\n3 3 1\n1 4 4\n''') == '1'"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"\nassert solution(\"5\\n1 2\\n2 4\\n3 5\\n4 6\") == \"4\"\nassert solution(\"7\\n1 2\\n2 4\\n3 5\\n4 6\\n6 7\\n6 5\") == \"4\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('3\\n2 3\\n1 2\\n5 6') == '1'\nassert solution('4\\n1 1\\n2 2\\n3 3\\n4 4') == '0'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\nassert solution('''3\n5 1\n4 2\n2 4''') == '1'''\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('1 2') == '2'\nassert solution('2 4') == '2'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('2\\n1 2\\n2 4') == '1'\nassert solution('4\\n1 2\\n1 3\\n3 4') == '1'\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"he\") == \"hehe\"\n\nassert solution(\"hey\") == \"hehey\"\n\nassert solution(\"heey\") == \"hehey\"\n\nassert solution(\"heyey\") == \"hehey\"\n\nassert solution(\"yee\") == \"ye\""
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('hey') == 'heye'\nassert solution('hey') == 'heye'\nassert solution('heeey') == 'heeee'\nprint('Day 1 - Yes')\nprint('You solved the problem!')\n'''"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('hey') == 'hee'\nassert solution('hehe') == 'hehe'\nassert solution('hehehe') == 'hehehe'\nassert solution('hehehey') == 'hehehey'\nassert solution('heyye') == 'heyye'\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('hey') == 'heey'\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('hey') == 'hee'\nassert solution('heyy') == 'heyy'\nassert solution('heeeeeeeeeeeeeeee') == 'heeeeeeeeeeeeee'\nassert solution('hello world') == 'hello world'\n\nimport sys\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hey') == 'heyy'\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'heey'\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('hey') == 'hey'\nassert solution('hehe') == 'hehehe'\n"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hee' * 3) == 'heey'\nassert solution('hello' * 1000) == 'hellohellohellohellohellohello'\nassert solution('hehe' * 500) == 'hehehehehehehehehehehehehehe'\nassert solution('i' * 10) == 'i' * 10\n\n'''"
    },
    {
        "number": 4899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hey') == 'heey'\nassert solution('heeee') == 'heeee'\nassert solution('bye') == 'bye'\nassert solution('heyhey') == 'heyhey'\nassert solution('wonderful') == 'wonderful'\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 2\\n1 3\\n1 4'\nassert solution('4') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == stdin"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n''') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n\"\"\") == \"1 2\\n1 3\\n1 4\\n\"\"\nassert solution(\"\"\"\n2\n0 1\n1 2\nSample Output:\n1 2\n\"\"\") == \"1 2\\n\"\nassert solution(\"\"\"\n5\n0 1 1 1 2\n1 0 2 3 3\n1 2 0 3 4\n1 3 2 0 3\n1 4 2 3 0\nSample Output:\n1 2\n1 4\n1 3\n\"\"\") == \"1 4\\n1 3\\n\"\nassert solution(\"\"\"\n20\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"1 2\"\nassert solution(\"4 1 2 3\") == \"1 2\"\nassert solution(\"4 1 2 3 1 3\") == \"1 2\"\nassert solution(\"4 0 1 2\") == \"1 3\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n''') == '1 2\\n1 3\\n1 4\\n'\n\nassert solution('''\n10\n0 1 1 1 1 2 2 2 2 3 3 3 3\n1 0 2 3 3 3 0 2 1 1 1\n1 1 0 1 3 3 2 3 1 1 1\n2 3 3 0 1 1 3 3 2 1 1\n2 3 3 1 1 3 3 3 2 1 1\n3 3 3 3 1 1 3 3 3 2 1\n3 1 1 3 3 3 3 1 1 1 1\n3 2 3 3 1 1 3 3 3 3 1\n3 3 3 1 3 3 3 3 2 1 1\n3 3 1 2 1 3 3 3 3 2 1\n3 1 3 3 1 1 3 3 3 2 1\n2 3 3 3 3 2 3 2 3 2 1\n2 2 2 2 2 1 1 1 1 1 1\n2 2 2 2 1 1 1 1 1 1 1\n2 2 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1 1\n2 2 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 1 1 1 1 1\n2 3 1 1 1 3 3 3 2 1 1\n2 3 3 3 3 3 3 3 3 3 1\n2 3 3 3 3 3 3 3 2 3 1\n2 3 2 2 2 3 3 2 2 3 1\n2 2 3 2 2 3 3 2 2 3 1\n2 1 1 1 1 1 1 1 1 1 1\n1 3 3 3 3 1 1 3 3 3 3\n1 2 1 1 1 1 1 1 1 1 1\n1 2 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n''') == '1 2\\n1 3\\n1 4\\n'\n\nassert solution('''\n5\n0 0 1 1 2\n1 1 0 2 3\n2 1 0 1 3\n3 2 1 0 1\n4 2 3 2 1\n4 3 1 1 2\n''') == '1 2\\n1 3\\n1 4\\n'\n\nassert solution('''\n10\n0 1 1 1 1 1 2 2 2 2 3 3 3 3\n1 0 2 3 3 3 0 2 1 1 1 1\n1 1 0 1 3 3 2 3 1 1 1 1\n2 3 3 0 1 1 3 3 2 3 1 1\n2 3 3 1 1 3 3 3 2 3 1 1\n3 3 3 3 1 1 3 3 3 2 3 1\n3 1 1 3 3 3 3 1 1 3 3 1\n3 2 3 3 1 1 3 3 3 3 1 1\n3 3 3 1 1 3 3 3 3 3 1 1\n3 3 1 2 1 3 3 3 3 3 1 1\n3 1 3 3 1 1 3 3 3 3 1 1\n2 3 3 3 3 2 3 2 3 2 3 1\n2 2 2 2 2 1 1 1 1 1 1 1\n2 2 2 2 1 1 1 1 1 1 1 1\n2 2 1 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1 1 1\n2 2 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 1 1 1 1 1 1\n2 3 1 1 1 3 3 3 2 3 1 1\n2 3 3 3 3 3 3 3 3 3 3 1\n2 3 3 3 3 3 3 3 3 3 3 1\n2 3 2 2 2 3 3 2 2 3 1 1\n2 2 3 2 2 3 3 2 2 3 1 1\n2 1 1 1 1 1 1 1 1 1 1 1\n1 3 3 3 3 1 1 3 3 3 3 1\n1 2 1 1 1 1 1 1 1 1 1 1\n1 2 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '1 2\\n1 3\\n1 4\\n'\n\nassert solution('''\n5\n0 0 1 1 2\n1 1 0 2 3\n2 1 0 1 3\n3 2 1 0 1\n4 2 3 2 1\n4 3 1 1 2\n''') == '1 2\\n1 3\\n1 4\\n'"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4\\n'\n\nassert solution('8\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n0 3 3 3\\n2 4 4 4\\n0 5 5 5\\n4 5 5 5') == '1 2\\n1 3\\n1 4\\n1 5\\n'\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\""
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''EWPGAJRB''') == 'ABCD'\nassert solution('''VFJCYGIRVZBSMZDXLZDTKZKGOWBTVOYQEKWNWXRKNFBQWBZUHZUZWKVUWLPZDXZUCHIWPQIHKTRDPWZSQGDFAVDRMNFBYTRGPSXJAGTVWZGXWHGMJYLYQRREWJLRQGPVTRVJHVNCSSRLERGQFZGPDQKMDPHAAIOTZCDHCSZSGMAYQZCHYTZKQZPQCRMYKZVNMQCUHXTRPZTGZOSQZMZHAQHTZSXDQFQAZEIHMJZFZDZDCRINDRZQGRQSZBDUZECSSBSZPVZUZHWAMKGKPTDRZVQGZJZVDRWXZEDADRPQZTQQAQADZQXDCDZPDQNRMPSTZPQGXMGQZRQZPCRQCSAXAIKPXUZHZKGZPQNCQUBBZSVFVDRWXPZAZQFZGAKQZWQZQSYEQWQZDZQQQDPZDUHZUZQTQAQHUZVAMACQQZUDQZQRSZQDUZQQQRZQQZUZQXQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQRZQQZUZQQQR"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''EWPGAJRB''') == 'ABCD', 'Should be ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'ABCD'\nassert solution('EWPGAJRB') == 'ABCD'\nassert solution
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('AJRBEWPGAJRB') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''EWPGAJRB''') == 'ABCD', 'Failed on input EWPGAJRB'\n\n'''\n"
    },
    {
        "number": 4901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\nSample Input:\nEWPGAJRB\nSample Output:\nABCD\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abc') == 'bca'\nassert solution('aab') == 'aab'\nassert solution('abcba') == 'cab'\nassert solution('abcbaa') == 'cab'\nassert solution('abcbaabbbccc') == 'cbbcc'\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('cba') == 'bac'\nassert solution('abb') == 'b'\nassert solution('a') == 'a'\nassert solution('ab') == 'b'\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaabbbccc\") == \"aabbbc\", \"Should be aabbbc\"\nassert solution(\"abc\") == \"c\", \"Should be c\"\nassert solution(\"\") == \"\", \"Should be empty\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcab\") == 1\nassert solution(\"abccba\") == 3\nassert solution(\"abcdba\") == 3\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abd\") == \"ab\"\nassert solution(\"abb\") == \"bb\"\nassert solution(\"abcb\") == \"ab\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"a\"\nassert solution(\"aabb\") == \"ab\"\nassert solution(\"add\") == \"ad\"\nassert solution(\"bba\") == \"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abc') == 'b'\nassert solution('abcd') == 'bcd'\nassert solution('abcdc') == 'abcdc'\nassert solution('z') == 'z'\nassert solution('x') == 'x'\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"add\") == 1\nassert solution(\"da\") == 1\nassert solution(\"d\") == 1\nassert solution(\"ed\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abc') == 'a'\nassert solution('dddd') == 'dd'\nassert solution('abb') == 'ab'"
    },
    {
        "number": 4902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abc') == '2'\nassert solution('cdcd') == '3'\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''aaah\naaaaah''') == 'no'\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''aaah\naaaaah''') == 'no'\nassert solution('''aaah\naaaah''') == 'yes'\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"a\") == \"no\"\nassert solution(\"h\") == \"no\"\nassert solution(\"a\") == \"no\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'no'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\""
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == 'go'\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaah') == 'no'\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaah') == 'go'\nassert solution('aaah') == 'no'\nassert solution('aaaaah') == 'no'\nassert solution('aaah') == 'no'\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"go\"\nassert solution(\"hihihihihi\") == \"no\"\nassert solution(\"hihihihihi\") == \"no\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"hahah\") == \"go\"\nassert solution(\"aaahhh\") == \"no\"\nassert solution(\"hhaa\") == \"no\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'B'\nassert solution('B2A1A2B2A1A2A2A2') == 'A'\nassert solution('A2A2A2A2A2A2A2A') == 'B'\nassert solution('A2A2A2A2A2A2A2') == 'B'\n"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A3B2B1A2B1A2A2A2') == 'B'\nassert solution('A1B2A1B2A1A1A2A1') == 'A'"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\n    \"B2B1A2B2A1A2A2A2\") == \"B\"\nassert solution(\n    \"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\n    \"A1A1B1B1A1A1A1A1\") == \"B\"\nassert solution(\n    \"B1A1A1B1A1A1A1A1\") == \"A\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B1A1B2B1A2B1B2A1A2') == 'A'\nassert solution('B1A1B2B1A2B1B2A1A2A2') == 'B'"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''A2B1A2B2A1A2A2A2''') == 'A'\nassert solution('''A2B1A2B2A1A2A2A2B2A1''') == 'A'\nassert solution('''A2B1A2B2A1A2A2A2B2A1A2A2A2''') == 'A'\nassert solution
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n"
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B2A2A2A2A2') == 'B'\n\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'A'\n\"\"\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n\"\"\") == \"21\"\nassert solution(\"\"\"\n3 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n\"\"\") == \"17\"\nassert solution(\"\"\"\n5 4\n1 2 10\n1 3 5\n1 4 3\n1 5 6\n2 3 9\n2 4 3\n3 6 10\n3 5 15\n\"\"\") == \"17\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\nassert solution('1\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n') == '21'"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15''') == '21'\nassert solution('''4 5\n1 2 3\n1 2 3\n1 3 4\n2 4 5''') == '17'\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n''') == '21'\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5') == '15'\nassert solution('1 1 2 2') == '2'\nassert solution('2 2 3 2') == '5'\nassert solution('2 2 4 2') == '7'\nassert solution('3 1 5 2') == '11'\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\nassert solution('1 5 100 20\\n3 5 50 40\\n2 3 40\\n1 4 20\\n5 5 50\\n2 4 60\\n1 5 50\\n3 3 10\\n2 4 30\\n2 2 20\\n5 5 100\\n5 6 30\\n5 1 50\\n4 6 40\\n5 1 50\\n1 1 20') == '16'\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n''') == '21'\nassert solution('''\n4 5\n1 2 2\n1 3 3\n2 4 4\n3 5 4\n''') == '6'\nassert solution('''\n4 5\n1 2 2\n1 3 3\n2 4 4\n3 5 4\n''') == '10'\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n''') == '21'\n'''\n"
    },
    {
        "number": 4905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D E 2 9 2 4 4 2 9 2 9') == 'W1o3r4l2d1!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution('D HHHeellloWooorrrrlld!!') == \"HHHeellloWooorrrrlld!!\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!'\nassert solution('D H3e2l3o1W1o3r4l2d1!2') == 'HHHeellloWooorrrrlld!!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('E') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D') == 'HHHeellloWooorrrrlld!!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''E HHHeellloWooorrrrlld!!''') == 'H3e2l3o1W1o3r4l2d1!'"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!'\nassert solution('D HHHeellloWooorrrrlld!!') == 'HHHeellloWooorrrrlld!!'\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''E HHHeellloWooorrrrlld!!''') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution
    },
    {
        "number": 4906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''E\nH3e2l3o1W1o3r4l2d1!2''') == 'HHHeellloWooorrrrlld!!'\nassert solution('''D\nH3e2l3o1W1o3r4l2d1!2''') == 'H3e2l3o1W1o3r4l2d1!2'\n''')"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('2\\n2') == 'Bob'\nassert solution('2\\n1') == 'Alice'\nassert solution('2\\n3') == 'Bob'\nassert solution('2\\n4') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('5') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Alice'\nassert solution('5') == 'Bob'\nassert solution('6') == 'Bob'\nassert solution('10') == 'Alice'\nassert solution('25') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Alice'\n\nassert solution('2') == 'Bob'\n\nassert solution('1') == 'Alice'\n\nassert solution('7') == 'Alice'\n\nassert solution('4') == 'Bob'"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Bob'\nassert solution('5') == 'Alice'\nassert solution('7') == 'Bob'\nassert solution('8') == 'Bob'\nassert solution('11') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\nprint(solution(input()))\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"100\") == \"Bob\"\n\"\"\"\nn = int(input())\n"
    },
    {
        "number": 4907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n') == 'Alice'\nassert solution('2\\n2\\n') == 'Bob'\nassert solution('3\\n4\\n') == 'Bob'\nassert solution('4\\n5\\n') == 'Alice'\nassert solution('5\\n6\\n') == 'Bob'\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3 8\n    ''') == '5+3=8'\nassert solution('''5 3 8\n    ''') == '5+3=8'\n'''\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('4 5 2') == '4+2=6'\nassert solution('2 2 2') == '2*2=4'\nassert solution('3 3 2') == '3*2=6'\nassert solution('10 12 8') == '10+12=22'\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 4\") == \"5+3=7\"\nassert solution(\"5 3 5\") == \"5+3=8\"\nassert solution(\"5 3 -5\") == \"5+3=7\"\nassert solution(\"5 3 4 5\") == \"5+3=9\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 4 8\") == \"2+4=8\"\nassert solution(\"5 2 7\") == \"5+2=7\"\nassert solution(\"10 2 7\") == \"10+2=7\"\nassert solution(\"4 1 9\") == \"4+1=9\"\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 2 5\") == \"5+2=7\""
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('10 9 5') == '10+9=15'\nassert solution('7 6 9') == '7+6=13'\nassert solution('1 1 1') == '1+1=2'\nassert solution('3 5 7') == '3+5=8'\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 7\") == \"5+3=7\"\nassert solution(\"5 7 3\") == \"5+3=8\"\nassert solution(\"3 5 7\") == \"5+3=8\"\nassert solution(\"6 4 7\") == \"6+4=7\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 8') == '5+3=8', \"123\"\nassert solution('4 5 8') == '4+5=9', \"456\"\nassert solution('8 4 3') == '8-4=5', \"345\"\nassert solution('1 2 3') == '1-2=1', \"12\"\n\"\"\"\n\nimport sys\nimport io\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\"\"\"\n\nn1, n2, n3 = map(int, input().split())\n"
    },
    {
        "number": 4908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('1 1 5') == '1+1=2'\nassert solution('1 1 1') == '1'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\nassert solution([8, 3, 2, 2, 1, 1, 1, 3, 1, 1, 1]) == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n1\n2\n2\n1\n1\n1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\n1\n1\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n4\n2\n2\n1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"8\") == \"NO\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n8\n3 2 2 1 1 3 1 1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 2 1 1 3 1 1\n''') == 'YES'\nassert solution('''\n7\n2 2 1 1 3 1 1 2\n''') == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('4\\n2 2 3 3') == 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''7\n3 2 1 1 2 1 1''') == 'NO'\nassert solution('''100\n
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == 'YES'\nassert solution('5') == 'YES'\nassert solution('1') == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 2 2 1 1 3 1 1\n''') == 'YES'\nassert solution('''\n10\n3 2 2 1 1 3 2 1 3 1\n''') == 'NO'\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == 'ghost'\n\"\"\"\nimport collections\nimport itertools\nimport random\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"demon\"\nassert solution(\"5\") == \"mummy\"\nassert solution(\"1\") == \"ghost\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5, 'ghost','mummy', 'witch', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon', 'demon']) == 'ghost'\nassert solution([4, 'ghost','mummy', 'witch', 'demon','mummy', 'ghost', 'witch','mummy', 'ghost', 'witch', 'witch','mummy', 'demon','mummy','mummy','mummy', 'witch', 'witch', 'witch','mummy', 'ghost', 'witch', 'ghost','mummy', 'witch']) =='mummy'\nassert solution([3, 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch']) == 'witch'\nassert solution([2, 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch']) == 'witch'\nassert solution([1, 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch', 'witch']) == 'witch'\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n' +'mummy\\n' + 'witch\\n' +'mummy\\n' + 'ghost\\n' +'mummy\\n' + 'ghost\\n' +'mummy\\n' + 'witch\\n' +'mummy\\n' + 'ghost\\n') =='mummy'\nassert solution('5\\n' + 'ghost\\n' + 'ghost\\n' + 'witch\\n' + 'witch\\n' + 'ghost\\n' + 'witch\\n' + 'ghost\\n' + 'witch\\n' + 'witch\\n') == 'witch'\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nghost\nmummy\nwitch\ndemon\ndemon''') == 'ghost'\nassert solution('''3\nhell\nhell\nhell''') == 'hell'\n'''\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"ghost\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == 'ghost'\nassert solution('3') == 'witch'\nassert solution('30') =='mummy'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"ghost\"\nassert solution(\"5\") == \"mummy\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == 'ghost', 'Input/Output mismatch'\n"
    },
    {
        "number": 4910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"demon\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"Artist Album Song_Title Length_seconds\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"3\\n\"\n    \"Artist\\n\"\n    \"Album\\n\"\n    \"Song_Title\\n\"\n    \"Length_seconds\\n\"\n    \"Sample Output:\\n\"\n    \"Artist Album Song_Title Length_seconds\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"def solution(stdin: str) -> str:\\n\"\n    \"    pass\\n\"\n    \"assert solution(\\\"Artist Album Song_Title Length_seconds\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"3\\n\"\n    \"Artist\\n\"\n    \"Album\\n\"\n    \"Song_Title\\n\"\n    \"Length_seconds\\n\"\n    \"Sample Output:\\n\"\n    \"Artist Album Song_Title Length_seconds\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"def solution(stdin: str) -> str:\\n\"\n    \"    pass\\n\"\n    \"assert solution(\\\"Artist Album Song_Title Length_seconds\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"3\\n\"\n    \"Artist\\n\"\n    \"Album\\n\"\n    \"Song_Title\\n\"\n    \"Length_seconds\\n\"\n    \"Sample Output:\\n\"\n    \"Artist Album Song_Title Length_seconds\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"def solution(stdin: str) -> str:\\n\"\n    \"    pass\\n\"\n    \"assert solution(\\\"Artist Album Song_Title Length_seconds\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"3\\n\"\n    \"Artist\\n\"\n    \"Album\\n\"\n    \"Song_Title\\n\"\n    \"Length_seconds\\n\"\n    \"Sample Output:\\n\"\n    \"Artist Album Song_Title Length_seconds\\n\"\n    \"George_Winston Summer Lullaby 215\\n\"\n    \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n    \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n    \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"def solution(stdin: str) -> str:\\n\"\n    \"    pass\\n\"\n    \"assert solution(\\\"Artist Album Song_Title Length_seconds\\n\"\n    \"Tchaikovsky Piano_Favorites November 163\\n\"\n    \"James_Taylor Dad_L"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"George_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\nassert solution('2') == '\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n'\nassert solution('4') == '\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    1\n    1\n    3\n    1\n    2\n    3\n    1\n    3\n    2\n    1\n    3\n    1\n    2\n    2\n    1\n    2\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    2\n    1\n    3\n    2\n    2\n    3\n    2\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    2\n    1\n    3\n    2\n    1\n    2\n    1\n    2\n    2\n    2\n    1\n    2\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    2\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    1\n    3\n    "
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\") == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215'\nassert solution(\"Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n1\\n3\\n2\\n5\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\") == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n3\\n4\\n5\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\") == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n3\\n4\\n5\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\") == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n2\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n'\nassert solution(\"Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n3\\n4\\n5\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\\nSong_Title\\nLength_seconds\") == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n2\\n4\\n5\\n6\\n7\\n8\\n9"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'George_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\nassert solution('3') == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\") == \"\"\"\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\n\"\"\"\n\nassert solution(\"\"\"\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\") == \"\"\"\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\n\"\"\"\n\nassert solution(\"\"\"\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\") == \"\"\"\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\n\"\"\"\n\nassert solution(\"\"\"\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\") == \"\"\"\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\n\"\"\"\n\nassert solution(\"\"\"\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\") == \"\"\"\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n3\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds\\n') == 'George_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\ntest_cases\\n3\\nA\\nB\\nC') == 'A\\nB\\nC'\n"
    },
    {
        "number": 4911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds') == 'George_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nGeorge_Winston Summer Lullaby 215\\n'\n\nassert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\nLength_seconds') == 'James_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n'\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5 5 5 5\\n5 5 5 5 5 5 5\\n5 5 5 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 10 7\n5 5 5 5 5 5\n''') == 'YES'\nassert solution('''\n4 1 2 3\n1 2\n''') == 'NO'\nassert solution('''\n6 6 6\n1 1 1\n''') == 'YES'\nassert solution('''\n6 6 6\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 10 7\") == \"YES\"\nassert solution(\"2 1 5\") == \"NO\"\nassert solution(\"4 4 1 2\") == \"YES\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"4\\n1 1 1 2 2\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 10 7\n5 5 5 5 5 5\n''') == 'YES', 'First example'\nassert solution('''\n3 10 7\n5 6 6 6 6 5\n''') == 'NO', 'Second example'\nassert solution('''\n2 10 3\n10 10 10\n''') == 'NO', 'Third example'\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 2 5\n5 5 5 5 5 5 5\n''') == \"YES\", \"First\"\nassert solution('''\n10 2 5\n4 4 5 4 4 5 4\n''') == \"NO\", \"Second\"\nassert solution('''\n10 2 5\n5 5 5 5 5 5 5\n''') == \"YES\", \"Third\"\n'''\n"
    },
    {
        "number": 4912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 5 5 5 5 5\n5 5 5 5 5 5\n''') == 'YES'\nassert solution('''\n5 5 5 5 5 5\n5 5 5 5 5 5\n''') == 'NO'"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Not Effective'\nassert solution('2') == '66.666667'\nassert solution('10') == 'Not Effective'\nassert solution('3') == 'Not Effective'\nassert solution('4') == '50.000000'\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Not Effective\"\nassert solution(\"11\") == \"Not Effective\"\nassert solution(\"NYNY\") == \"Not Effective\"\nassert solution(\"NNYY\") == \"Not Effective\"\nassert solution(\"NYYY\") == \"Not Effective\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Not Effective'\nassert solution('10') == '66.666'\nprint(solution(open('sample_in.txt')))\nprint(solution(open('input.txt')))\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Not Effective'\nassert solution('2') == '66.666'\nassert solution('3') == '50.0'\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\nNNNY\nNYNN\nSample Output:\nNot Effective\n0.0\n\"\"\") == \"0.0\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Not Effective'\nassert solution('2') == '66.666667'"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nNYNY\nNNYY\nNYYY\nNYNN\nNNNY\nYYNN\nYYYY\nYYYY\nYYNN\nYYNN\n''') == '66.666667'\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Not Effective\"\nassert solution(\"1\") == \"66.66\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\nNYNY\nNNYY\nNYYY\nNYYN\n''') == 'Not Effective'\nassert solution('''\n2\nNYNY\nNNNY\n''') == '50.000000'\nassert solution('''\n2\nNYNY\nNNNY\n''') == 'Not Effective'\nassert solution('''\n5\nNYNY\nNNNY\nNYYY\nNYYN\n''') == 'Not Effective'\n"
    },
    {
        "number": 4913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == 'Not Effective'\nassert solution('1') == 'Not Effective'\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nBAACC') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '3'\nassert solution('5') == '3'\n\"\"\"\n\nn = int(input())\na = input()\nb = input()\nc = input()\n\ncounts = {}\n\nfor i in a:\n    counts[i] = counts.get(i, 0) + 1\nfor i in b:\n    counts[i] = counts.get(i, 0) + 1\nfor i in c:\n    counts[i] = counts.get(i, 0) + 1\n\nprint(max(counts, key=counts.get))"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nABBACCCD\") == \"3\"\nassert solution(\"4\\nABCABCD\") == \"4\"\nassert solution(\"7\\nAAAABBBCCDDDD\") == \"5\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nBAACC') == 'Bruno'\n'''\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\nBAABC\\nBACD') == 'Bruno'\nassert solution('7\\nCABAB\\nBAABC\\nBCBAB\\nABCBA\\nACABB\\nBAABC') == 'Goran'\nassert solution('8\\nCABAB\\nBAABC\\nBCBAB\\nABCBA\\nACABB\\nBAABC\\nABCBA') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Bruno'\nassert solution('10') == 'Adrian'\n"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\nCBAB\nABACC\n''') == 'Bruno'\n\nassert solution('''\n1\nA\n''') == 'Adrian'\n\nassert solution('''\n1\nA\n''') == 'Goran'\n\nassert solution('''\n1\nB\n''') == 'Goran'"
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\nBAACC\\n\") == \"Bruno\"\nassert solution(\"5\\nABAACA\\n\") == \"Goran\""
    },
    {
        "number": 4914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n\"\"\") == \"543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1''') == \"3 543\"\n\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong''') == \"7 543\"\n\nassert solution('''8 D right\n8 E wrong\n30 A wrong\n50 A wrong\n100 D wrong\n200 A wrong\n250 B wrong\n300 A wrong''') == \"8 901\"\n\nassert solution('''3 H right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D wrong\n-1''') == \"3 616\"\n\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong''') == \"7 616\""
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n''') == '543'\nassert solution('''\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '502'\n'''\n"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n''') == '3 543'\nassert solution('''\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '7 543'\n'''"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n''') == '543'\n\nassert solution('''\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '702'\n\nassert solution('''\n6 A wrong\n10 H wrong\n15 H wrong\n30 H wrong\n45 H wrong\n60 H wrong\n90 A wrong\n''') == '6 36'\n\nassert solution('''\n1 A wrong\n1 C wrong\n1 D wrong\n1 F wrong\n1 G wrong\n1 H wrong\n1 I wrong\n1 J wrong\n1 K wrong\n1 L wrong\n1 M wrong\n1 N wrong\n1 O wrong\n1 P wrong\n1 Q wrong\n1 R wrong\n1 S wrong\n1 T wrong\n1 U wrong\n1 V wrong\n1 W wrong\n1 X wrong\n1 Y wrong\n1 Z wrong\n2 A wrong\n2 C wrong\n2 D wrong\n2 F wrong\n2 G wrong\n2 H wrong\n2 I wrong\n2 J wrong\n2 K wrong\n2 L wrong\n2 M wrong\n2 N wrong\n2 O wrong\n2 P wrong\n2 Q wrong\n2 R wrong\n2 S wrong\n2 T wrong\n2 U wrong\n2 V wrong\n2 W wrong\n2 X wrong\n2 Y wrong\n2 Z wrong\n4 A wrong\n4 C wrong\n4 D wrong\n4 F wrong\n4 G wrong\n4 H wrong\n4 I wrong\n4 J wrong\n4 K wrong\n4 L wrong\n4 M wrong\n4 N wrong\n4 O wrong\n4 P wrong\n4 Q wrong\n4 R wrong\n4 S wrong\n4 T wrong\n4 U wrong\n4 V wrong\n4 W wrong\n4 X wrong\n4 Y wrong\n4 Z wrong\n5 A wrong\n5 C wrong\n5 D wrong\n5 F wrong\n5 G wrong\n5 H wrong\n5 I wrong\n5 J wrong\n5 K wrong\n5 L wrong\n5 M wrong\n5 N wrong\n5 O wrong\n5 P wrong\n5 Q wrong\n5 R wrong\n5 S wrong\n5 T wrong\n5 U wrong\n5 V wrong\n5 W wrong\n5 X wrong\n5 Y wrong\n5 Z wrong\n6 A wrong\n6 C wrong\n6 D wrong\n6 F wrong\n6 G wrong\n6 H wrong\n6 I wrong\n6 J wrong\n6 K wrong\n6 L wrong\n6 M wrong\n6 N wrong\n6 O wrong\n6 P wrong\n6 Q wrong\n6 R wrong\n6 S wrong\n6 T wrong\n6 U wrong\n6 V wrong\n6 W wrong\n6 X wrong\n6 Y wrong\n6 Z wrong\n7 H wrong\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '7 36'\n"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == \"7 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1''') == '3 543'"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n''') == '543'\nassert solution('''\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n100 A right\n200 A right\n250 C wrong\n300 D wrong\n-1\n''') == '398'\n"
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\"\"\") == \"3 543\"\n\nassert solution(\n\"\"\"\n20 G right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\"\"\") == \"6 513\"\n\nassert solution(\n\"\"\"\n20 G right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D wrong\n-1\"\"\") == \"6 805\"\n\nassert solution(\n\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\"\"\") == \"4 613\"\n\nassert solution(\n\"\"\"\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D wrong\n-1\"\"\") == \"4 803\""
    },
    {
        "number": 4915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\n''') == '543'\n\nassert solution('''\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '7 404'\n\nassert solution('''\n2 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 D wrong\n-1\n''') == '2 527'\n\nassert solution('''\n1 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 D wrong\n-1\n''') == '1 527'\n\nassert solution('''\n-1\n''') == '-1'\n'''\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '5'\n\nassert solution('''20 20\n10 1 3 4 2 4 2 1 2 1\n5 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '-1'\n\nassert solution('''30 30\n10 1 3 4 2 4 2 1 2 1\n5 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '17'\n\nassert solution('''50 50\n10 1 3 4 2 4 2 1 2 1\n5 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '36'\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 5') == '5'\nassert solution('15 7') == '-1'\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n\nassert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"-1\"\n\nassert solution(\"4 5\\n1 1 1 2 3 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n\") == \"4\"\n\nassert solution(\"3 5\\n1 2 3 4 5\\n3 2 4 1 5\\n4 5 1 3 2\\n5 1 3 2 4\\n5 2 1 4 3\\n\") == \"0\"\n\nassert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"4\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n') == '5'"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"10 5\\n\"\n    \"5 1 3 4 2 4 2 1 2 1\\n\"\n    \"4 5 3 4 1 5 3 1 1 4\\n\"\n    \"5 2 1 5 5 3 5 2 3 2\\n\"\n    \"5 5 2 3 2 3 1 5 5 5\\n\"\n    \"3 4 2 4 2 2 4 4 2 3\\n\"\n    \"1 5 1 1 2 5 4 1 5 3\\n\"\n    \"2 2 4 1 2 5 1 4 3 5\\n\"\n    \"5 3 2 1 4 3 5 2 3 1\\n\"\n    \"3 4 2 5 2 5 3 4 4 2\\n\"\n    ) == \"5\""
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '5'\nassert solution('''\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '-1'\n\nimport sys\nfrom collections import deque\nimport heapq\n\nn, k = map(int, sys.stdin.readline().split())\ntiles = [[int(n) for n in sys.stdin.readline().split()] for _ in range(n)]\ntiles_nums = {tiles[i][j]: (i, j) for i in range(n) for j in range(n)}\n\nheap = []\n\nfor i in range(1, n):\n    for j in range(1, n):\n        if tiles[i][j] == k:\n            # it's the start\n            heapq.heappush(heap, (0, (i, j)))\n\nwhile heap:\n    curr_dist, (i, j) = heapq.heappop(heap)\n\n    if i + 1 < n and tiles[i][j] == tiles[i + 1][j]:\n        # go down\n        tiles[i][j] = tiles[i + 1][j]\n        tiles[i + 1][j] = tiles[i][j]\n        curr_dist += 1\n        heapq.heappush(heap, (curr_dist, (i + 1, j)))\n    elif i - 1 >= 0 and tiles[i][j] == tiles[i - 1][j]:\n        # go up\n        tiles[i][j] = tiles[i - 1][j]\n        tiles[i - 1][j] = tiles[i][j]\n        curr_dist += 1\n        heapq.heappush(heap, (curr_dist, (i - 1, j)))\n    elif j + 1 < n and tiles[i][j] == tiles[i][j + 1]:\n        # go right\n        tiles[i][j] = tiles[i][j + 1]\n        tiles[i][j + 1] = tiles[i][j]\n        curr_dist += 1\n        heapq.heappush(heap, (curr_dist, (i, j + 1)))\n    elif j - 1 >= 0 and tiles[i][j] == tiles[i][j - 1]:\n        # go left\n        tiles[i][j] = tiles[i][j - 1]\n        tiles[i][j - 1] = tiles[i][j]\n        curr_dist += 1\n        heapq.heappush(heap, (curr_dist, (i, j - 1)))\n\n    # print('updated:', i, j, tiles[i][j])\n\nfor row in tiles:\n    print(' '.join(map(str, row)))\n"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n') == '5'"
    },
    {
        "number": 4916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n') == '5'\n"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n7\\n5 5') == 'gunilla has a point'\nassert solution('1\\n0\\n0') == 'edward is right'\nassert solution('1\\n0\\n1') == 'edward is right'\nassert solution('1\\n1\\n1') == 'gunilla has a point'\nassert solution('2\\n1\\n1') == 'edward is right'\n"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 7\n5 5\n''') == 'gunilla has a point'\nassert solution('''\n2 1\n1 2\n''') == 'edward is right'\nassert solution('''\n1 2\n2 3\n''') == 'gunilla has a point'\nassert solution('''\n2 3\n3 4\n''') == 'gunilla has a point'\nassert solution('''\n2 3\n4 5\n''') == 'gunilla has a point'\n"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"gunilla has a point\"\nassert solution(\"1 2\") == \"gunilla has a point\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"gunilla has a point\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 7\n5 5\n\"\"\") == \"gunilla has a point\"\nassert solution(\"\"\"\n2\n1 4\n2 2\n\"\"\") == \"edward is right\"\nassert solution(\"\"\"\n2\n1 4\n5 3\n\"\"\") == \"gunilla has a point\"\nassert solution(\"\"\"\n3\n1 4\n5 3\n5 4\n\"\"\") == \"edward has a point\"\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"gunilla has a point\""
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"gunilla has a point\"\nassert solution(\"1\") == \"edward has a point\"\nassert solution(\"1 2\") == \"gunilla has a point\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"gunilla has a point\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"edward has a point\""
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'gunilla has a point'\nassert solution('3') == 'gunilla has no point'\n"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 7\n5 5\n''') == 'gunilla has a point'\n\nassert solution('''4\n1 9\n10 2\n10 4\n5 6\n''') == 'edward is right'\n\nprint('solution ='+ str(solution('''6\n1 8\n12 1\n13 1\n15 1\n16 1\n17 1\n''')))"
    },
    {
        "number": 4917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('2\\n1 7\\n5 5') == 'edward is right'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('10 11') == '4'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\n\nassert solution('''\n1\nt 1\n''') == '1'\n\nassert solution('''\n5\ns 1\ns 2\ns 3\ns 4\ns 5\n''') == '5'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\n\nassert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\nassert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\nassert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\n'''"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 2\") == \"2\"\nassert solution(\"1 2\\n1 3\") == \"2\"\nassert solution(\"1 2\\nt 3\\n4\\n5\\n6\") == \"6\"\nassert solution(\"1 3\\n1 2\") == \"4\"\nassert solution(\"1 3\\nt 2\") == \"3\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\""
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\n\nassert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '4'\n"
    },
    {
        "number": 4918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2015\"\nassert solution(\"4\") == \"1982\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2015\"\nassert solution(\"3\") == \"1982\"\nassert solution(\"4\") == \"2016\"\nassert solution(\"5\") == \"1983\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2015\"\nassert solution(\"3\") == \"1982\"\nassert solution(\"2\") == \"2016\"\n\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1983'\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1982\"\nassert solution(\"3\") == \"1999\"\nassert solution(\"2\") == \"16\"\nassert solution(\"1\") == \"1\"\nassert solution(\"6\") == \"16\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\"\nassert solution(\n    \"2\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"1982\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2\n''') == '2015'\nassert solution('''3\nIceland 1986\nIceland 1983\nIceland 1985\nIceland 1987\nIceland 1988\nIceland 1989\nIceland 1991\nIceland 1993\nIceland 1994\nIceland 1995\nIceland 1996\nIceland 1997\nIceland 1998\nIceland 1999\nIceland 2000\nIceland 2001\nIceland 2002\nIceland 2003\nIceland 2004\nIceland 2005\nIceland 2006\nIceland 2007\nIceland 2008\nIceland 2009\nIceland 2010\nIceland 2011\nIceland 2012\nIceland 2013\nIceland 2014\nIceland 2015\nIceland 2016\nIceland 2017\nIceland 2018\nIceland 2019\nIceland 2020\nIceland 2021\nIceland 2022\nIceland 2023\nIceland 2024\nIceland 2025\nIceland 2026\nIceland 2027\nIceland 2028\nIceland 2029\nIceland 2030\nIceland 2031\nIceland 2032\nIceland 2033\nIceland 2034\nIceland 2035\nIceland 2036\nIceland 2037\nIceland 2038\nIceland 2039\nIceland 2040\nIceland 2041\nIceland 2042\nIceland 2043\nIceland 2044\nIceland 2045\nIceland 2046\nIceland 2047\nIceland 2048\nIceland 2049\nIceland 2050\nIceland 2051\nIceland 2052\nIceland 2053\nIceland 2054\nIceland 2055\nIceland 2056\nIceland 2057\nIceland 2058\nIceland 2059\nIceland 2060\nIceland 2061\nIceland 2062\nIceland 2063\nIceland 2064\nIceland 2065\nIceland 2066\nIceland 2067\nIceland 2068\nIceland 2069\nIceland 2070\nIceland 2071\nIceland 2072\nIceland 2073\nIceland 2074\nIceland 2075\nIceland 2076\nIceland 2077\nIceland 2078\nIceland 2079\nIceland 2080\nIceland 2081\nIceland 2082\nIceland 2083\nIceland 2084\nIceland 2085\nIceland 2086\nIceland 2087\nIceland 2088\nIceland 2089\nIceland 2090\nIceland 2091\nIceland 2092\nIceland 2093\nIceland 2094\nIceland 2095\nIceland 2096\nIceland 2097\nIceland 2098\nIceland 2099\nIceland 2100\nIceland 2101\nIceland 2102\nIceland 2103\nIceland 2104\nIceland 2105\nIceland 2106\nIceland 2107\nIceland 2108\nIceland 2109\nIceland 2110\nIceland 2111\nIceland 2112\nIceland 2113\nIceland 2114\nIceland 2115\nIceland 2116\nIceland 2117\nIceland 2118\nIceland 2119\nIceland 2120\nIceland 2121\nIceland 2122\nIceland 2123\nIceland 2124\nIceland 2125\nIceland 2126\nIceland 2127\nIceland 2128\nIceland 2129\nIceland 2130\nIceland 2131\nIceland 2132\nIceland 2133\nIceland 2134\nIceland 2135\nIceland 2136\nIceland 2137\nIceland 2138\nIceland 2139\nIceland 2140\nIceland 2141\nIceland 2142\nIceland 2143\nIceland 2144\nIceland 2145\nIceland 2146\nIceland 2147\nIceland 2148\nIceland 2149\nIceland 2150\nIceland 2151\nIceland 2152\nIceland 2153\nIceland 2154\nIceland 2155\nIceland 2156\nIceland 2157\nIceland 2158\nIceland 2159\nIceland 2160\nIceland2161\nIceland2162\nIceland2163\nIceland2164\nIceland2165\nIceland2166\nIceland2167\nIceland2168\nIceland2169\nIceland2170\nIceland2171\nIceland2172\nIceland2173\nIceland2174\nIceland2175\nIceland2176\nIceland2177\nIceland2178\nIceland2179\nIceland2180\nIceland2181\nIceland2182\nIceland2183\nIceland2184\nIceland2185\nIceland2186\nIceland2187\nIceland2188\nIceland2189\nIceland2190\nIceland2191\nIceland2192\nIceland2193\nIceland2194\nIceland2195\nIceland2196\nIceland2197\nIceland2198\nIceland2199\nIceland2200\nIceland2201\nIceland2202\nIceland2203\nIceland2204\nIceland2205\nIceland2206\nIceland2207\nIceland2208\nIceland2209\nIceland2210\nIceland2211\nIceland2212\nIceland2213\nIceland2214\nIceland2215\nIceland2216\nIceland2217\nIceland2218\nIceland2219\nIceland2220\nIceland2221\nIceland2222\nIceland2223\nIceland2224\nIceland2225\nIceland2226\nIceland2227\nIceland2228\nIceland2229\nIceland2230\nIceland2231\nIceland2232\nIceland2233\nIceland2234\nIceland2235\nIceland2236\nIceland2237\nIceland2238\nIceland2239\nIceland2240\nIceland2241\nIceland2242\nIceland2243\nIceland2244\nIceland2245\nIceland2246\nIceland2247\nIceland2248\nIceland2249\nIceland2250\nIceland2251\nIceland2252\nIceland2253\nIceland2254\nIceland2255\nIceland2256\nIceland2257\nIceland2258\nIceland2259\nIceland2260\nIceland2261\nIceland2262\nIceland2263\nIceland2264\nIceland2265\nIceland2266\nIceland2267\nIceland2268\nIceland2269\nIceland2270\nIceland2271\nIceland2272\nIceland2273\nIceland2274\nIceland2275\nIceland2276\nIceland2277\nIceland2278\nIceland2279\nIceland2280\nIceland2281\nIceland2282\nIceland2283\nIceland2284\nIce"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == '10'\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == '10'\nassert solution('aabababababab') == '8'\n\"\"\"\n"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abbcccddddeeeee') == '10'"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abbcccddddeeeee') == '10'"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abbcccddddeeeee') == '10'\n"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abbcccddddeeeee') == '10'\nassert solution('abcddddddddeeeee') == '0'\n"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abbcccddddeeeee') == '10'\n"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '10'\n"
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abbcccddddeeeee\") == \"10\""
    },
    {
        "number": 4920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    ab\n    c\n    dd\n    ''') == '10'\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency... and its humanity'''\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\") == \"Engineering, will save, the, world, from, inefficiency,. is, a, blight, on,.. and, its, humanity,.\""
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity\") == \"Engineering will save the world from inefficiency.. and its humanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''Engineering\nwill save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering. will save the world from inefficiency... and its. humanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering. will save the world from.. and its humanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering. will save the world from.. and its humanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Engineering will save the world from inefficiency') == 'Engineering will save the world from inefficiency.'\nassert solution('Inefficiency is a blight on the world and its humanity') == 'Inefficiency is a blight on the world and its humanity.'\nassert solution('I have a plane and a car and I want to go to work') == 'I have a plane and a car and I want to go to work.'\nassert solution('I want to go to work but this is bad') == 'I want to go to work.. and this is bad.'\nassert solution('A s s is a s s') == 'A s s is a s s'\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity\") == \\\n    \"Engineering will save the world from inefficiency...\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity\\n') == 'Engineering will save the world from inefficiency... and its humanity.'\nassert solution('i am a smart boy') == 'i.. am.. a.. b. o.. y.. t.. h.. i.. n.. g... y
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering\\n.\\nis\\na\\nblight\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.\\n.\\nis\\na\\nblight\\n.'\n"
    },
    {
        "number": 4921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency.. and its humanity'\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"satisfactory\"\nassert solution(stdin=\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') =='satisfactory'\nassert solution('10 3\\n-1 -2 3\\n-1 2 -3\\n-1 3 -2\\n-1 4 -2\\n1 -2 3 -4\\n1 2 3 -4\\n1 3 -2 -4\\n1 4 -3 -2\\n1 5 -3 -4\\n1 6 -3 -4\\n1 7 -3 -4\\n1 8 -3 -4\\n1 9 -3 -4\\n1 10 -3 -4\\n') =='satisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n''') =='satisfactory'\nassert solution('''\n5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n''') == 'unsatisfactory'\n'''\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\n\n'''"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''3 3\n-1 -2 3\n1 -2 3\n1 -2 -3''') =='satisfactory'\nassert solution('''8 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 -2 -3\n2 2 -3''') =='satisfactory'\nassert solution('''5 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 -2 -3''') =='satisfactory'\nassert solution('''5 3\n-1 2 3\n1 2 3\n-1 -2 3\n1 -2 3\n1 2 -3\n1 -2 -3\n2 -2 3''') =='satisfactory'\n\n'''\n\nn, m = list(map(int, input().split()))\nans = \"satisfactory\"\nclauses = []\nfor _ in range(m):\n    clauses.append(list(map(int, input().split())))\n\nfor c1 in range(len(clauses)):\n    for c2 in range(c1+1, len(clauses)):\n        for c3 in range(c2+1, len(clauses)):\n            if clauses[c1] == -clauses[c2] or clauses[c1] == clauses[c3] or clauses[c2] == clauses[c3]:\n                ans = \"unsatisfactory\"\n                break\nprint(ans)\n\n'''"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') =='satisfactory'\nassert solution('10 2\\n-1 -2 3\\n-1 -2 -3\\n1 -2 -3\\n1 -2 -5\\n1 2 -3\\n1 2 -5\\n1 -2 -3\\n1 -2 -5\\n1 -2 -7\\n1 2 -7\\n') == 'unsatisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == \"satisfactory\"\nassert solution('5 3') == \"satisfactory\"\nassert solution('5 2') == \"unsatisfactory\"\nassert solution('5 2 0 -1 -1 0 0') == \"satisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"satisfactory\"\nassert solution() == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"satisfactory\"\nassert solution(input_) == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n-1 2 3') =='satisfactory'\nassert solution('2\\n-1 2 3') == 'unsatisfactory'\nassert solution('3\\n-1 2 3') == 'unsatisfactory'\nassert solution('4\\n-1 2 3') == 'unsatisfactory'\nassert solution('5\\n-1 -2 3') =='satisfactory'\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1 1 5 3 4 6 6\") == \"4\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 3') == '2'\nassert solution('3 2') == '3'\nassert solution('2 3') == 'none'\nassert solution('1 1 1 5 3 4 6 6') == '4'\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == \"4\"\nassert solution('8\\n1 1 1 5 3 4 6 6') == \"4\"\nassert solution('8\\n1 1 1 5 3 4 6 6') == \"4\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('3') == 'none'\nassert solution('0') == 'none'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"1 1 1 5 3 4 6 6\") == \"none\"\nassert solution(\"1 1 1 5 3 4 6 6\") == \"none\"\nassert solution(\"1 1 1 5 3 4 6 6\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 5 3 4 6 6') == '4'"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 5 3 4 6 6') == \"4\"\nassert solution('2') == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1 1 5 3 4 6 6\n''') == '4'\n\nassert solution('''\n5\n1 1 1 5 3 4 6 6\n''') == '4'\n\nassert solution('''\n7\n1 1 1 5 3 4 6 6\n''') == '3'\n'''\n4\n1 1 1 5 3 4 6 6\n'''\n"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '10'"
    },
    {
        "number": 4923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8\n1 1 1 5 3 4 6 6\n''') == '4', 'First'\nassert solution('''8\n6\n''') == 'none', 'Second'\nassert solution('''8\n2 2 2 2 2 2 2 2\n''') == '2', 'Third'\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20:00:00\\n04:00:00') == '08:00:00'\nassert solution('20:00:00\\n05:00:00') == '09:00:00'\nassert solution('20:00:00\\n19:00:00') == '00:00:00'\nassert solution('20:00:00\\n00:00:00') == '00:00:00'\nassert solution('21:00:00\\n00:00:00') == '00:00:00'\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20:00:00\\n04:00:00') == '08:00:00'\n\n\"\"\"\nimport datetime\n\ncurrent_time = list(map(int, input().split(':')))"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20:00:00\\n04:00:00') == '08:00:00'"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('01:00:00') == '01:00:00'\nassert solution('01:00:00') == '00:00:00'\nassert solution('01:00:00') == '00:00:00'\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '08:00:00'\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20:00:00\\n04:00:00') == '08:00:00'\nassert solution('08:00:00\\n07:00:00') == '04:00:00'"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '20:00:00\\n'\n    '04:00:00'\n    ) == '08:00:00'\nprint(solution(\n    '20:00:00\\n'\n    '04:00:00'\n    ))\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"15:00:00\") == \"02:00:00\"\nassert solution(\"12:00:00\") == \"20:00:00\"\nassert solution(\"12:00:00\") == \"08:00:00\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\\n04:00:00\") == \"08:00:00\"\nassert solution(\"24:59:59\") == \"07:00:00\"\nassert solution(\"01:00:00\") == \"00:00:00\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"100 100\") == \"100\"\nassert solution(\"16 30\") == \"0\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n15\n3\n1\n1\n8\n15\n''') == '4'\n\nassert solution('''\n4\n1\n2\n2\n1\n8\n8\n''') == '3'\n"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n5') == '4'\nassert solution('2\\n10') == '2'\nassert solution('3\\n3') == '4'\nassert solution('10\\n10') == '10'\n"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"4\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"5 6\") == \"4\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '4'\nassert solution('1') == '1'\nassert solution('8') == '8'\n'''"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1', \"Woo hoo!\"\nassert solution('2 1') == '2', \"Ooo hoo!\"\nassert solution('2 1') == '4', \"Noooo!\"\n\nimport time\nstart = time.time()\nprint(solution('2 3'))\nprint(time.time() - start)"
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 4925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"31\n6\"\"\") == \"4\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('0') == '0.0'\nassert solution('1') == '1.0'\nassert solution('10') == '9.5'\nassert solution('100') == '99.0'\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('0') == '1.0'\nassert solution('1') == '1.0'\nassert solution('-1') == '0.6666666666666665'\nassert solution('10000') == '23.999999999999997'\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('12') == '6.042904290429043'\nassert solution('10000') == '7.0710678118654755'\n'''\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2.6666666666666665'\nprint(solution(input()))\n\"\"\"\n\n\nfrom math import e\nfrom functools import reduce\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"10\") == \"20.0000\"\n\"\"\"\nimport math\nn=int(input())\nsum=0\nfor i in range(1,n+1):\n    sum+=math.factorial(i)/(math.factorial(i-1)*math.factorial(i))\nprint(sum)\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2.718281828459045'\nassert solution('1') == '1.0'\nassert solution('1000') == '3.14159265358979'\nassert solution('10000') == '2.718281828459045'\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('5') == '2.714213562373095'\nassert solution('10') == '2.71828182845905'\nassert solution('20') == '3.141592653589793'\nassert solution('-2') == '1.414213562373095'\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('123') == '5.0'\nassert solution('5') == '2.8'\nassert solution('1234567') == '26.0'\nassert solution('999999') == '2.0'\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2.0'\nassert solution('3') == '2.82842712475'\n\n'''\n"
    },
    {
        "number": 4926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2.6666666666666665'\n"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\""
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'paul'\n>>> "
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"5 3 7\"\"\") == \"paul\", f\"actual: {solution(\n        stdin\n    )}, expected: paul\"\nassert solution(\n    \"\"\"3 3 1\"\"\") == \"paul\", f\"actual: {solution(\n        stdin\n    )}, expected: paul\"\nassert solution(\n    \"\"\"3 1 2\"\"\") == \"opponent\", f\"actual: {solution(\n        stdin\n    )}, expected: opponent\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 7') == 'paul'"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3 7\n\n4\n6\n8\n''') == 'paul'\nassert solution('''3 3 7\n\n2\n1\n\n''') == 'opponent'\n"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('10 5 7') == 'opponent'\n'''"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'paul'\n\nSample Input:\n5 10 7\nSample Output:\nopponent"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 7') == 'opponent'\n"
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"paul\""
    },
    {
        "number": 4927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 7') == 'opponent'"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '4'\nassert solution('7') == '5'\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('1') == '2'\nassert solution('2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"124\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"123\\n123a\") == \"No\"\nassert solution(\"3a7b\\n7ab3\") == \"Yes\"\nassert solution(\"1a\\n1a\") == \"No\"\nassert solution(\"ab\\n1a\") == \"Yes\"\nassert solution(\"a\\nb\") == \"Yes\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Yes'\n\nSolution\n'''\nS = input()\nP = input()\n\ns_dict = {\n    '0': '0',\n    '1': '1',\n    '2': '2',\n    '3': '3',\n    '4': '4',\n    '5': '5',\n    '6': '6',\n    '7': '7',\n    '8': '8',\n    '9': '9',\n}\np_dict = {\n    '0': '0',\n    '1': '1',\n    '2': '2',\n    '3': '3',\n    '4': '4',\n    '5': '5',\n    '6': '6',\n    '7': '7',\n    '8': '8',\n    '9': '9',\n}"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"123\\n123a\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"No\""
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\n\n----Hints----\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '123'\n) == 'No'\nassert solution(\n    '123a'\n) == 'Yes'\nassert solution(\n    '1234'\n) == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123') == 'No', '123a'\n\nassert solution('123321') == 'Yes', '123'\n\nassert solution('54321a') == 'No', '123a'\n\nassert solution('123123') == 'No', '123123'\n\nassert solution('12a2b3c4') == 'Yes', '123'"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n123\n123a\n''') == 'No'\nassert solution('''\n12a\n12a\n''') == 'No'\nassert solution('''\n123\n123a\n''') == 'Yes'\nassert solution('''\n123\n123\n''') == 'Yes'\nassert solution('''\n12a\n12a\n''') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nprint('Congratulations! All test cases passed!')"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"zelena paprika\"\nprint(solution(input()))"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(Luka) == 'zelena paprika'\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    'zepelepenapa papapripikapa') == 'zelena paprika'\n"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n"
    },
    {
        "number": 4930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('zepelenapapaprika') == 'zelena paprika'\nassert solution('zepelenapapaprinapa') == 'zelena paprika'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5\n5\n3''') == \"-1.3333333333333333\"\n\nassert solution('''1 5\n5\n2''') == \"IMPOSSIBLE\"\n\nassert solution('''1 5\n5\n-2''') == \"IMPOSSIBLE\"\n\nassert solution('''1 5\n5\n2''') == \"-3.3333333333333333\"\n\nassert solution('''1 5\n5\n-2''') == \"IMPOSSIBLE\""
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('32 2') == '-32'\nassert solution('-100 100') == 'IMPOSSIBLE'\nassert solution('10 10') == '10 10'"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 -2') == 'IMPOSSIBLE'"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '-32'\n"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'IMPOSSIBLE'\nassert solution('0 0') == 'ALL GOOD'\nassert solution('25 25') == '25 25'\nassert solution('-5 10') == 'ALL GOOD'\nassert solution('5 -5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == 'IMPOSSIBLE'\nassert solution('1 1') == 'ALL GOOD'\nassert solution('-22 1') == '-22'\n"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"ALL GOOD\"\n\n---Input---\nInput consists of two space-separated integers, $X$ and $Y$. $X$ is the point on $B$ where $A$ is zero. $Y$ is the number of degrees in $B$ that equal a change of a single degree in $A$.\n\n-----Output-----\nOutput the temperature where both scales are the same. This number must have an absolute or relative error of at most $10^{-6}$. If no such temperature exists, output \u201cIMPOSSIBLE\u201d (without the quotes) instead. If more than one such point exists, output \u201cALL GOOD\u201d (without the quotes) instead.\n\n-----Limits-----\n - $-100 \\leq X \\leq 100$\n - $1 \\leq Y \\leq 100$\n\n-----Examples-----\nSample Input:\n30 2\nSample Output:\n-30\n"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"32 2\") == \"-32\", solution\nassert solution(\"32 1\") == \"IMPOSSIBLE\", solution\nassert solution(\"32 1.1\") == \"IMPOSSIBLE\", solution\nassert solution(\"100 10\") == \"ALL GOOD\", solution\nassert solution(\"100 -1\") == \"-100\", solution\n"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 2') == '3'\nassert solution('-20 2') == '-17'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('32 2') == '-32'\nassert solution('-4 2') == '-4'\nassert solution('2 4') == '10'\nassert solution('-100 10') == '-100'\nassert solution('100 10') == '100'\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"2 2 3 3\") == \"none\"\nassert solution(\"1 2 3\") == \"none\"\nassert solution(\"3 3 3\") == \"none\"\n\"\"\"\n\na = input().split()\na1 = int(a[0])\nb = int(a[1])\nc = int(a[2])\nd = int(a[3])\n\np = input().split()\np1 = int(p[0])\nm = int(p[1])\ng = int(p[2])"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 5\n7\n''') == 'both'\n\nassert solution('''\n2\n3 5\n7\n''') == 'both'\n\nassert solution('''\n1\n3 3\n3\n''') == 'one'\n\nassert solution('''\n1\n3 3\n3\n''') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"both\"\nassert solution(\"1 2 3\") == \"one\"\nassert solution(\"1 2 3\") == \"none\"\n\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('5 6 7') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'both'\n\n\"\"\"\n\nfrom math import floor, ceil\nfrom itertools import combinations"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('2 3 4') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2 3 3\"\n    ) == \"both\"\n\nassert solution(\n    \"1 3 4\"\n    ) == \"one\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('2 4 6') == 'none'"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('-1 -1 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 6 8\") == \"10\"\n\nassert solution(\n    \"5 6 7\") == \"10\"\n\nassert solution(\n    \"8 4 6\") == \"10\"\n\nassert solution(\n    \"-9 -3 -1\") == \"10\"\n\nassert solution(\n    \"100 -100 100\") == \"10\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('-1 -100 -3 -5') == '-50'\nassert solution('-100 100 30 80') == '80'\nassert solution('-1 -100 100 30 80') == '80'\n\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 6 8') == '10'\n\nassert solution('-4 -6 8') == '10'\n\nassert solution('-2 -8 7') == '10'\n\nassert solution('-4 5 7') == '10'\n\nassert solution('-1 -6 -8') == '10'"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 2 4\") == \"5\"\nassert solution(\"-100 -100 -100\") == \"0\"\nassert solution(\"-100 100 -100\") == \"1\"\n\n-----------------------------------------------------------------------------------------------------------------------------------\n\n12.\n    Write a program that finds the least common multiple of the following numbers.\n\n    The four numbers are 5, 10, 25 and 50.\n\n-----Input-----\nThe input contains 2 integers between $-100$ and $100$ on a single line, separated by single spaces.\n\nNote: the input data will guarantee that a solution, although not necessarily unique, will always exist.\n\n-----Output-----\nOutput any number which could have been the least common multiple of the numbers.\n\n-----Examples-----\nSample Input:\n3 1\nSample Output:\n3\n"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6 7\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    4\n    6\n    8\n''') == '10'\n"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"-4 -6 -8\") == \"-10\""
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 4 7\") == \"10\"\nassert solution(\"1 2 3\") == \"10\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"-100 -10 2 1\") == \"10\"\nassert solution(\"-100 -10 2 1\") == \"10\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('8 6 3') == '10'\nassert solution('3 8 1') == '10'\nassert solution('8 1 1') == '10'\nassert solution('1 1 1') == '10'\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n500 70\n''') == '533'\nassert solution('''\n1000 10\n''') == '1000'\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"10 50\") == \"867\"\nassert solution(\"10 90\") == \"1000\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('500 70') == '533'\nassert solution('20 40') == '22'\nassert solution('15 20') == '22'\nassert solution('5 20') == '22'\nassert solution('5 2') == '6'\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 5\") == \"7\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 5\") == \"7\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('500 70') == '533'\nassert solution('500 55') == '531'\n\n---Input---\n450 110\n---Output---\n534\n---Input---\n800 90\n---Output---\n549\n---Input---\n1000 100\n---Output---\n902\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"533\"\nassert solution(\"500 70\") == \"533\"\nassert solution(\"600 70\") == \"583\"\nassert solution(\"100 20\") == \"80\"\nassert solution(\"1000 10\") == \"960\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''500 70''') == '533'\nassert solution('''500 80''') == '517'\nassert solution('''500 50''') == '451'\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"\") == \"\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"100 100\") == \"100\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('500 70') == '533'\nassert solution('500 70 100') == '522'\nassert solution('500 70 1') == '521'\n"
    },
    {
        "number": 4934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5''') == '60'\nassert solution('''4''') == '60'\nassert solution('''5''') == '60'\nassert solution('''5''') == '60'\nassert solution('''5''') == '60'\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2 9\n69 60\n100 60\"\"\") == \"39.0\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == \"0.0\"\nassert solution(\"1\") == \"0.0\"\nassert solution(\"1 10\") == \"0.0\"\nassert solution(\"2\") == \"0.0\"\nassert solution(\"2 9\") == \"39.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '4.0'\n\"\"\"\n\nfrom math import atan\nfrom math import degrees as deg"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 9\n69 60\n100 60''') == '39.0'\nassert solution('''2 3\n100 100\n1 3\n2 3''') == '30.0'\nprint('All tests passed!')\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.000000'\nassert solution('3 1\\n7 3\\n10 1') == '33.333333'\nassert solution('4 1\\n5 3\\n7 3\\n10 3') == '44.66666666'\nassert solution('5 1\\n7 3\\n10 3\\n3 3') == '70.0'\nassert solution('6 1\\n11 3\\n3 3\\n5 3') == '22.66666666'\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"10.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"39.0 30.0\""
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 9') == '39.0'\nassert solution('100 60') == '30.0'\n\"\"\""
    },
    {
        "number": 4935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 9\") == \"39.0\"\nassert solution(\"1 10\") == \"30.0\"\nassert solution(\"2 10\") == \"29.832\"\nprint('All tests passed!')"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\""
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('6\\n-20 -10 0 20 30 20') == '1 30'\nassert solution('1\\n-2') == '0'\n"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"2 28\"\nassert solution(\"4\\n2 3 6 7\") == \"4 5\"\nassert solution(\"6\\n5 7 9 10 10 11\") == \"7\"\nassert solution(\"1\\n4 3 2 1\") == \"4\"\nassert solution(\"2\\n10 15 20 5 15 20\") == \"7\""
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n23 27 31 28 30\n\"\"\") == \"28 30\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '2 28'\nassert solution('3\\n') == '3 14'\nassert solution('10\\n') == '8 25'\nassert solution('1\\n') == '1 9'\nassert solution('9\\n') == '1 1'\n"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0 -20\n-20 -5\n-5 5''') == '28'\nassert solution('''\n1\n13\n''') == '13'\nprint(\"You're all set!\")\n\n'''\n--- Part Two ---\nNow that you've determined which day you'd like to visit the lake, you'd better figure out how to schedule your trips. As with the first question, you'll be scheduling a three-day trip to visit the lake. \n\nThe weather forecast in your vacation also becomes more predictable as it is truly sunny. The overall maximum temperature during a day will be a few degrees above and below average (min $1$ and max $25$), and around a quarter of average ($\\mu=13.5$) during a sunny day. \n\nFor example, if the forecast is 55 degrees and the temperature is 34 degrees, then there is a possibility that on the next day you will have a maximum of $16$ degrees. If it were 7 degrees, you would spend the next two days staying in the lake. If it were 10 degrees, you would spend the next two days hiking, and then come back to the lake. \n\nYour first day in your trip is day 1, so you will travel that day at the lowest possible temperature, and stay at the lake for the rest of your three days. \n\nYour trip goes from day 2 to day 3 and takes $24$, which is below average and has a maximum of $25$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 3 to day 4 and takes $17$, which is below average and has a maximum of $18$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 4 to day 5 and takes $12$, which is below average and has a maximum of $13$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 5 to day 6 and takes $10$, which is below average and has a maximum of $11$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 6 to day 7 and takes $5$, which is below average and has a maximum of $6$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 7 to day 8 and takes $3$, which is below average and has a maximum of $4$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 8 to day 9 and takes $1$, which is below average and has a maximum of $2$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 9 to day 10 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 10 to day 11 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 11 to day 12 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 12 to day 13 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 13 to day 14 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 14 to day 15 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 15 to day 16 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 16 to day 17 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 17 to day 18 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 18 to day 19 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 19 to day 20 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 20 to day 21 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 21 to day 22 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 22 to day 23 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 23 to day 24 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 24 to day 25 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 25 to day 26 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 26 to day 27 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 27 to day 28 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 28 to day 29 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 29 to day 30 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 30 to day 31 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 31 to day 32 and takes $0$, which is below average and has a maximum of $1$. You would spend the next two days hiking, and then stay at the lake. \n\nYour trip goes from day 32 to day 33 and takes $0$, which is below average and has a maximum of $1$."
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('8\\n-20 -22 -24 -25 -24 -21 -17 -14 -10 -6 -4 -2 -2 -4 -6 -8') == '3 17'\n\n--Solutions--\n"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n23 27 31 28 30\n''') == '2 28'\nassert solution('''\n1\n10\n''') == '10'\nassert solution('''\n2\n10\n''') == '1 2'\nassert solution('''\n3\n10\n''') == '1 2'\nassert solution('''\n2\n30\n''') == '1 2'\n"
    },
    {
        "number": 4936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\\n-5\") == \"3\"\nassert solution(\"2\\n-1\") == \"1\"\nassert solution(\"3\\n2\\n1\") == \"1\"\nassert solution(\"4\\n-2\\n-1\") == \"2\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 1') == '3'\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\n\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 2 3\\n\"\n) == \"2\"\nassert solution(\n    \"4\\n\"\n    \"1 1 1 1\\n\"\n) == \"3\"\nassert solution(\n    \"5\\n\"\n    \"2 2 1 1 1\\n\"\n) == \"2\"\nassert solution(\n    \"6\\n\"\n    \"2 3 1 1 1\\n\"\n) == \"3\"\nassert solution(\n    \"7\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n) == \"1\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2') == '2'\nassert solution('3\\n1 2 3') == '2'\nassert solution('4\\n1 2 1 2') == '2'\nassert solution('5\\n1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5\\n2 4 5') == '2'\nassert solution('3 6\\n1 2 3') == '1'\nassert solution('1 5\\n1 2 3') == '0'\nassert solution('3 1\\n4 2 5') == '1'\nassert solution('3 1\\n2 3 4') == '0'\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\n\nassert solution('3 10') == '4'\n\nassert solution('7 9') == '4'\n\nassert solution('5 9') == '5'\n\nassert solution('5 8') == '4'"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\", \"First\"\nassert solution(\"\"\"\n5\n1 2 1 3 2\n\"\"\") == \"3\", \"Second\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2 3') == '2'\nassert solution('3 3\\n1 2 2') == '2'\n"
    },
    {
        "number": 4937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 2 3\"\"\") == \"2\"\nassert solution(\"\"\"3 3 1\"\"\") == \"3\"\nassert solution(\"\"\"10 10 1\"\"\") == \"1\"\nassert solution(\"\"\"6 1 1\"\"\") == \"1\""
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n''') == '9'\nassert solution('''\n3\nMMMM\n''') == '2'\nassert solution('''\n5\nMMMMMMMMMMM\n''') == '2'\nassert solution('''\n1\nWW\n''') == '0'\nassert solution('''\n0\n''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\nMMWMWMMWM\n''') == '9'\nassert solution('''1\nWWWMMMMM\n''') == '10'\nassert solution('''1\nWWMWMMM\n''') == '10'\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('-1') == '1'\nassert solution('4') == '3'\nassert solution('123') == '11'\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(1) == \"9\""
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\nassert solution('1') == '9'\nassert solution('2') == '8'\nassert solution('3') == '7'\nassert solution('4') == '6'\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\nMWWMWMMWWMWMMW\n''') == '11'\nassert solution('''\n0\nWMM\n''') == '1'\nassert solution('''\n0\nMM\n''') == '1'\n'''\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nW\nMMMMMMMMMM\n''') == '9'\n\nassert solution('''\nW\nMMWMMMMMMM\n''') == '6'\n\nassert solution('''\nW\nWWWMMWWWMM\n''') == '4'\n\nassert solution('''\nM\nWWWWWWMMW\n''') == '10'\n\nassert solution('''\nM\nWWWWWWWWW\n''') == '7'"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('WMMMMMMW') == '4'\nassert solution('WWWMMMMM') == '3'\nassert solution('WMMMMMMMMM') == '2'\nassert solution('WMMMMMMMMMW') == '1'\n"
    },
    {
        "number": 4938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\n\n--\n'''\n\na = int(input())\nstdin = input()\na = abs(len(stdin)-len(stdin.replace(\"M\",\"\")))\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('5 2\\n10 12 5 10 undo 2') == '12'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\nassert solution(\"5 1\\n8 -1 undo 1\") == \"4\"\nassert solution(\"5 6\\n8 2\\n2\") == \"6\"\nassert solution(\"5 2\\n-8 1\\n1\") == \"1\"\nassert solution(\"10 10\\n30 -1\\n1\") == \"9\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4\\n8 -2 3 undo 2\"\n) == \"3\"\nassert solution(\n    \"10 5\\n6 -1 undo 1 undo 2 undo 3\"\n) == \"2\"\nassert solution(\n    \"20 10\\n7 -1 3 5 -1 undo 2 undo 1 undo 2\"\n) == \"5\"\nassert solution(\n    \"3 1\\n-2 undo 2\"\n) == \"2\"\nassert solution(\n    \"10 0\\n-1 undo 1 undo 2 undo 3\"\n) == \"1\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n4') == '3'\nassert solution('1\\n2\\n-2') == '4'\nassert solution('1\\n-2\\n-2') == '3'\nassert solution('1\\n-2\\n-2\\n-2') == '3'\nassert solution('1\\n-2\\n-2\\n-2\\n-2') == '3'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n8 -2 3 undo 2''') == '3'\nassert solution('''5 4\n8 -2 3 undo 2\nundo 5''') == '4'\nassert solution('''5 10\n2 3 6 7 8 9 4 6 4 8''') == '4'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2\\n') == '3'\nassert solution('1000000 1000000\\n-40000 5000 604 30 0') == '1000000'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n-2 3 undo 2\n''') == '3'\nassert solution('''5 4\n-2 3 undo 2\n''') == '4'\nassert solution('''5 10\n-2 3 undo 2\n''') == '3'\nassert solution('''5 10\n-2 3 undo 2\n''') == '4'\nassert solution('''5 10\n-2 3 undo 2\n''') == '5'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('6 2\\n1 -2 1 undo 2') == '1'\nassert solution('10 5\\n4 -3 4 undo 1') == '5'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('6 1\\n4 2 -2 1 2 -1 undo 2') == '2'\nassert solution('5 4\\n3 6 1 1 undo 2') == '1'\nassert solution('5 4\\n3 6 1 1 undo 3') == '1'\nassert solution('5 4\\n3 4 1 1 undo 2') == '1'\n"
    },
    {
        "number": 4939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nprint(solution(input()))\n"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 2 3\n3 2 1\n''') == '6 7'\nassert solution('''\n2 4\n3 1 2 4\n1 4 3 2\n''') == '8 9'\n'''\n"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6 7'\nassert solution('3 2') == '6 7'\n"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6 7'\nassert solution('1 2 3') == '6 7'\nassert solution('3 2 1') == '6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6 7'\nassert solution('1 2 3') == '3 1 2'\nprint('PASSED')"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6 7\""
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n3 2 1\n''') == '6 7'\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n1 2 3\n3 2 1\n''') == '6 7'\nassert solution('''\n3 3\n1 2 3\n3 2 1\n''') == '7 8'\nassert solution('''\n2 2\n1 2\n''') == '3 3'\n"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '6 7'\nassert solution('1 2 3') == '6 7'\nassert solution('1 1 2 3') == '6 7'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10 12 18 22 26 28 30 32 36 40 44 48'\n"
    },
    {
        "number": 4940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6 7'\nassert solution('3 2') == '7 6'\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    1\n    als\n    mollen\n    moles\n    mollen\n    destroy\n    mollen\n    moles\n    mollen\n    moles\n    moles\n    destroy\n    mollen\n    destroy\n    moles\n    moles\n    destroy\n    moles\n    destroy\n    mollen\n    destroy\n    moles\n    moles\n    moles\n    moles\n    destroy\n    \"\"\") == \"\"\"\n    64 correct\n    665 incorrect\n    \"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nmollen moles\\nmollen destroy\\nmollen mills\") == \"64 incorrect\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == '64 incorrect\\n665 correct\\n'\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\nals mollen mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"64 incorrect\\n65 correct\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmoles correct\\nmoles destroy correct\\nmoles mills incorrect\\n') == '64 correct\\n665 incorrect'"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n') == '64 correct\\n665 incorrect'\nassert solution('10\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n5\\nthe dog is barking\\n') == '1000 correct\\n'\nassert solution('8\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n5\\nHello how are you\\n') == '800 correct\\n800 incorrect'\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills correct') == '64 correct\\n665 incorrect'\nassert solution('4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n668 incorrect'\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Ik ben in de war\\n\"\nassert solution(\"2\") == \"Ik ben in de war\\n\"\nassert solution(\"3\") == \"Ik ben in de war\\n\"\nassert solution(\"4\") == \"Ik ben in de war\\n\"\nassert solution(\"5\") == \"Ik ben in de war\\n\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\") == \"19 correct\\n182 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n"
    },
    {
        "number": 4941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\nals mollen mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == \"64 incorrect\\n165 incorrect\\n\"\n'''\n"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3 4\\n') == '7'\n"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n2 3 4 3\n''') == '7'\nassert solution('''\n3\n1 3 2\n''') == '1'\nassert solution('''\n3\n3 3 4\n''') == '1'\nassert solution('''\n4\n2 3 4 3\n''') == '3'\nassert solution('''\n4\n2 2 2 2\n''') == '1'\n'''\n"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n2 3 4 3\n''') == '7'\nprint('all test cases passed...!')\nassert solution('''3\n1 1 1\n''') == '1'\nprint('all test cases passed...!')\nassert solution('''5\n2 1 3 4 2\n''') == '2'\nprint('all test cases passed...!')\nassert solution('''8\n2 1 1 2 3 1 3\n''') == '6'\nprint('all test cases passed...!')\nassert solution('''100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2 3\n3\n''') == '7'\nassert solution('''\n2\n1 2\n1\n''') == '2'\n'''\nExplanation:\nFarmer Jon has recently bought $1$ tree seedlings that he wants to plant in his yard. He can plant them in a single day.\n\nFarmer Jon has recently bought $2$ tree seedlings that he wants to plant in his yard. He can plant them in a single day.\n\nFarmer Jon has recently bought $3$ tree seedlings that he wants to plant in his yard. He can plant them in a single day.\n\nFarmer Jon has recently bought $4$ tree seedlings that he wants to plant in his yard. He can plant them in a single day.\n\nFarmer Jon has recently bought $5$ tree seedlings that he wants to plant in his yard. He can plant them in a single day.\n\nSo, Farmer Jon is able to plant all the trees in a single day.\n''')"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n4\n3''') == '7'\nassert solution('''3\n3\n4\n3''') == '3'\nassert solution('''7\n4\n3\n2''') == '5'\nassert solution('''10\n10\n20\n15\n10\n5\n4\n3''') == '12'"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nassert solution(\"4\\n3 3 3 4\") == \"7\"\nassert solution(\"4\\n3 2 3 4\") == \"7\"\nassert solution(\"4\\n3 4 4 3\") == \"7\"\nassert solution(\"4\\n3 3 2 3\") == \"7\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 3 4 3') == '7'\nassert solution('5\\n4 3 3 2') == '6'\nassert solution('5\\n4 3 3 2 3') == '6'\nassert solution('5\\n4 3 3 2 2') == '6'\nassert solution('5\\n5 1 3 2 2 3') == '4'\n"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 4 3') == '7'\nassert solution('1 1 1 1') == '1'\nassert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 3 4 3\n''') == '7'\nassert solution('''\n10\n2 3 4 4 6 7 8 10 8 1\n''') == '9'\nassert solution('''\n3\n1 2 2\n''') == '3'\nassert solution('''\n3\n1 2 3\n''') == '2'"
    },
    {
        "number": 4942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == '7'"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('4') == '0.0 0.0\\n1.0 2.0\\n0.0 4.0\\n2.0 2.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.0 0.0'\nassert solution('5') == '2.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1.0 0.0\\n1 1\\n0 2\\n4\\n') == '2.0 2.0\\n0 4.0\\n'\nassert solution('5\\n') == '0.0 0.0\\n1.0 0.0\\n2.0 0.0\\n4.0 0.0\\n'"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('10') == '0.0 0.0\\n4.0 4.0\\n0.0 2.0'\nassert solution('20') == '0.0 0.0\\n8.0 8.0\\n0.0 2.0'\nassert solution('100') == '0.0 0.0\\n16.0 16.0\\n0.0 4.0'\nassert solution('1000') == '0.0 0.0\\n32.0 32.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"2.0 2.0\\n0 4.0\\n\"\nassert solution(\"5\\n-3 -3\\n-1 -3\\n3 3\\n-5 -4\\n-1 5\\n4 -2\\n\") == \"-1.0000000000000002 -2.0000000000000004\\n0.5000000000000004 1.0000000000000002\\n-1.0000000000000002 0.5000000000000004\\n0.0000000000000001 -1.0000000000000004\\n\"\nassert solution(\"4\\n-1 1\\n-1 1\\n1 0\\n1 -1\\n\") == \"0.0 0.0\\n0.0 0.0\\n0.0 0.0\\n0.0 0.0\\n\"\nassert solution(\"12\\n-3 1\\n-1 2\\n3 0\\n2 1\\n1 0\\n0 0\\n-2 0\\n-2 2\\n0 -3\\n0 1\\n0 0\\n\") == \"0.0 0.0\\n2.0 -0.0\\n2.0 0.0\\n-1.0000000000000002 0.0\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n0.0 -1.0000000000000002\\n\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 2\\n4\\n5\\n0 2\\n0 0\\n1 1\\n2 2\\n5 5') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('2') == '0.0 0.0\\n1.0 1.0\\n0.0 2.0'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '1', 'First'\nassert solution('''\n2\n''') == '2', 'Second'\nassert solution('''\n3\n''') == '3', 'Third'\nassert solution('''\n4\n''') == '4', 'Fourth'\n'''"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\""
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '4'\nassert solution('5') == '5'\nassert solution('7') == '6'\nassert solution('10') == '9'"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"6\"\nassert solution(\"13\") == \"7\"\nassert solution(\"20\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1', '1'\nassert solution('10') == '10', '10'\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('6') == '3'\nassert solution('10') == '3'\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('5') == '5'\nassert solution('100') == '101'\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '0'\nassert solution('1 1') == '1'\nassert solution('0 0') == '0'"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n12 16\n''') == '34'\nassert solution('''\n3 1\n16 8\n''') == '16'\nassert solution('''\n3 1\n12 6\n''') == '12'\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1\n10 10\n''') == '17'\n\nassert solution('''4 2\n20 10\n''') == '30'\n\nassert solution('''10 1\n10 10\n''') == '20'"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"34\"\nassert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"5 1\\n25 10\\n35\") == \"30\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1\n12 16''') == '34'\nassert solution('''3 2\n11 3\nSample Input:\n4 8\n15 16\nSample Output:\n17\n''') == '17'\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '12'\nassert solution('1 1') == '12'\nassert solution('3 1') == '34'\nassert solution('3 2') == '14'\nassert solution('4 5') == '6'\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1\n12 16\n2 1\n3 2\n''') == '34'\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n12 16') == '34'\nassert solution('1 1\\n10 10') == '9'\n"
    },
    {
        "number": 4945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n12 16\n''') == '34', 'Failed: Your solution is Wrong.'\n"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\nprint(solution())\n"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 3 1\n''') == '3'\nassert solution('''2\n1 2\n''') == '1'\nassert solution('''2\n1 2\n''') == '0'\nassert solution('''2\n1 2\n''') == '0'\nassert solution('''4\n1 2 3 1\n''') == '3'\n"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n\"\n    \"1 2 3 1\"\n) == \"3\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 1') == '3'"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\n\nassert solution(stdin=\"1 2 3 1\") == '3'\n"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 2 3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n0 1 2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n1 2 3 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9\n\"\"\") == \"9\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2\n    3 2\n    1 2\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n    4\n    1 1 2 2\n    1 3\n    3 1\n    3 2\n    \"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\n    10\n    1 3 5 4 2 6 8 7 9 5\n    2 3 7 5 4 1 6 8 9\n    6 4 9 8 5 1 3 7 2\n    3 4 5 1 6 8 9 7\n    8 4 9 5 1 7 6 3\n    5 4 3 6 8 9 7\n    7 4 5 3 6 9 8\n    9 4 7 5 6 8 3\n    6 4 5 3 8 9 7\n    3 4 5 7 6 8 9\n    5 4 7 8 9 6 3\n    7 4 5 9 6 8 3\n    9 4 6 5 8 7 3\n    5 4 6 8 9 7\n    8 4 9 5 6 7 3\n    9 4 7 5 6 8\n    6 4 5 3 8 9\n    7 4 5 3 8 9\n    5 4 3 6 8 9\n    3 4 5 7 6 8\n    8 4 5 7 6 9\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    8 4 5 7 6 9\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    8 4 5 7 6 9\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    8 4 5 7 6 9\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8 7\n    6 4 5 3 8 9\n    3 4 5 7 6 8\n    5 4 7 8 9 6\n    7 4 5 9 6 8\n    9 4 6 5 8"
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 4946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\nassert solution('4\\n1 2 3 1') == '3'\nassert solution('10\\n10 10 10 10 10 10 10 10') == '1'\nassert solution('100\\n1 2 3 1 2 3 3') == '4'\nassert solution('1000\\n1 2 3 1 2 3 3 4') == '3'\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.1') == '1.1', \"Wrong solution!\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1.0') == '1088'\nassert solution('1.2') == '1089'\nassert solution('5.2') == '5678'\nassert solution('1.5') == '1091'\nassert solution('2.5') == '1292'\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.0') == '1088'\nassert solution('9.999') == '8368'\nassert solution('9.8999') == '8368'\nassert solution('5.95') == '58'\nassert solution('99.9') == '1000'"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1.0') == '1088'\nassert solution('10.4') == '1088'\nassert solution('10.00') == '1088'\nassert solution('1.5') == '1000'\nassert solution('1.123') == '1123'\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1088'\nassert solution('0.1') == '1.0'\nassert solution('0.00') == '0'\nassert solution('0.000001') == '0.00001'\nassert solution('0.0000001') == '0.00001'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.0') == '1088'\nprint(solution('1.0'))\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.0') == '1088', 'Test 1 Failed'\nassert solution('1.1') == '1120', 'Test 2 Failed'\nassert solution('1.01') == '1118', 'Test 3 Failed'\nassert solution('1.001') == '1114', 'Test 4 Failed'\nassert solution('1.0001') == '1113', 'Test 5 Failed'\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.0') == '1088'\nassert solution('3.12') == '2031'\nassert solution('15.6') == '2031'\nassert solution('0.0') == '0'\nassert solution('-1.0') == '-1088'\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.0') == '1088'\nassert solution('0.5') == '500'\nassert solution('10.8') == '1088'\nassert solution('1.8') == '1128'\nassert solution('100') == '1000'\n"
    },
    {
        "number": 4947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.0') == '1088'\nassert solution('2.0') == '1010'\nassert solution('10.0') == '1010'\nassert solution('99.99') == '10088'\nassert solution('100.0') == '10088'\n"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 4') == '25.000000000'\nassert solution('0 5') == '28.99999999'\nassert solution('5 4') == '28.99999999'\nassert solution('5 4') == '28.99999999'\n"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 4\\n') == '25.000000000'\nassert solution('10 5\\n') == '33.33333333'\nassert solution('5 5\\n') == '37.5'"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0 4\n1 1.78\n1 1.78\n1 1.78\n1 1.78\n0 0.25\n1 1.78\n1 1.78\n1 1.78\n0 0.25\n1 1.78\n1 1.78\n1 1.78\n0 0.25\n1 1.78\n1 1.78\n1 1.78''') == '25.000000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n\") == \"25.000000000\"\nassert solution(\"10 10 10\\n\") == \"25.000000000\"\nassert solution(\"0 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2 1 2\\n3 2 1\\n5 4 4\\n0 0 0\\n10 10 10\\n1 2 3\\n2"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 4\") == \"25.000000000\"\n\"\"\"\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 4\") == \"25.000000000\"\nassert solution(\"0 1 2 3\") == \"26.000000000\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 4\\n') == '25.000000000'\nassert solution('0 5\\n') == '21.000000000'\nassert solution('0 10\\n') == '12.500000000'\nassert solution('0 100\\n') == '4.4999999999999996'\nassert solution('0 1000\\n') == '1.800000000000001'"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '1 1.333333333333333 2 2.0'\nassert solution('6 6') == '1 1.6 1.6 2 1.6 2.6 2.6 2.6'\n\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 4\\n') == '25.000000000'\nassert solution('1 1 1 1\\n') == '0.000000000'\nassert solution('0 0 0 0\\n') == '25.000000000'\nassert solution('2 2 2 2\\n') == '25.000000000'\nassert solution('4 2 2 2\\n') == '25.000000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n1 0.4 1\n1 0.1 0.5\n2 0.5 1\n''') == '25.000000000'\n''')\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA'\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3 4\n3\n4\n5\n6\n7\"\"\") == \"DA\"\nassert solution(\"\"\"5 5\n3\n4\n5\n6\n7\"\"\") == \"DA\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'DA'\nassert solution('2\\n') == 'DA'\nassert solution('3\\n') == 'DA'\nassert solution('4\\n') == 'NE'\nassert solution('5\\n') == 'NE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\n\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 4\\n5\\n6') == 'DA'\nassert solution('10\\n20 10 10') == 'DA'\nassert solution('10\\n20 10 10') == 'NE'\n'''"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n5\n6\n''') == \"DA\"\nassert solution('''\n3\n4\n4\n''') == \"DA\"\nassert solution('''\n3\n4\n5\n''') == \"NE\"\n'''\nFind all the matches in the box whose total length is the same as the length of the matched match.\n\nGiven $N$ matches of various lengths and $W$ and $H$, return the length of the matches that fit inside the box. The total length should be the same as the total length of the matched matches.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 50$), the number of matches on the floor, and two integers $W$ and $H$, the dimensions of the box ($1 \\leq W \\leq 100$, $1 \\leq H \\leq 100$).\n\nEach of the following $N$ lines contains a single integer between $1$ and $1000$ (inclusive), the length of one match.\n\n-----Output-----\nFor each match, in the order they were given in the input, output on a separate line \u201cDA\u201d if the match fits in the box or \u201cNE\u201d if it does not.\n\n-----Examples-----\nSample Input:\n5 3 4\n3\n4\n5\n6\n7\nSample Output:\nDA\nDA\nDA\nNE\nNE\n'''"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA'\nassert solution('''5 3 4\n5\n4\n3\n2\n1''') == 'NE'\nassert solution('''5 1 4\n3\n4\n5\n6\n7''') == 'NE'\n\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'DA'\nassert solution('4') == 'DA'\nassert solution('5') == 'DA'\nassert solution('6') == 'DA'\nassert solution('7') == 'NE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"DA\"\nassert solution(\"2\") == \"DA\"\nassert solution(\"3\") == \"DA\"\nassert solution(\"4\") == \"DA\"\nassert solution(\"5\") == \"DA\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n0 0\n7 42\n\"\"\") == \"6\"\nassert solution(\"\"\"\n10\n0 1\n6 7\n3 5\n4 6\n4 7\n2 6\n1 6\n0 1\n1 1\n2 1\n0 2\n1 2\n\"\"\") == \"7\""
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == '6'\nassert solution('''\n3\n0 2\n10 5\n10 3\n''') == '11'\nassert solution('''\n3\n0 1\n8 1\n2 6\n''') == '10'\nassert solution('''\n8\n0 0\n5 5\n6 6\n0 0\n0 0\n1 1\n0 0\n0 0\n0 0\n0 0\n''') == '6'\n"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\nassert solution('2\\n0 0\\n1 0') == '10'\n\n=========================================\n3. Longest Substring Without Repeating Characters\n\nYou are given a string. \nYour task is to find the length of the longest substring without repeating characters.\n\nFor example, the length of \u201cabcabcbb\u201d is 3, because we must find the substring without \u201cbbbbb\u201d. The length of \u201cpwwkew\u201d is 4, because we must find the substring without \u201cwke\u201d."
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([\n    '3',\n    '0 5',\n    '1 6',\n    '2 7',\n])) == '6'\n\nassert solution('\\n'.join([\n    '5',\n    '0 0',\n    '1 1',\n    '2 2',\n    '3 3',\n    '4 4',\n    '5 5',\n])) == '10'\n\nassert solution('\\n'.join([\n    '4',\n    '0 0',\n    '1 1',\n    '2 2',\n    '3 3',\n    '4 4',\n    '5 5',\n    '6 6',\n])) == '6'"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n0 0\n7 42\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3\n0 0\n1 45\n3 45\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3\n0 0\n2 1\n3 8\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n5\n0 0\n3 3\n7 12\n2 25\n8 24\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n5\n0 0\n1 5\n5 4\n4 1\n4 5\n\"\"\") == \"16\""
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0\\n7 42') == '6'\nassert solution('2\\n0 0\\n7 4') == '6'\nassert solution('3\\n0 0\\n7 4\\n14 12') == '12'\n"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n7 42\\n') == '6'\nassert solution('2\\n10 10\\n20 20\\n') == '4'"
    },
    {
        "number": 4950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\nassert solution('1\\n0\\n3\\n12') == '8'\nprint('All tests passed!')"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'correct'\nassert solution('2') == '1'\nassert solution('1') == 'correct'"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\nassert solution('2\\n-> A\\n-> B\\n-> C') == 'correct'\nassert solution('2\\n-> A\\n-> C\\n-> D') == '2'\nassert solution('1\\n-> A\\n-> A') == 'correct'\nassert solution('1\\n-> A\\n-> A') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n-> FERMAT\n-> SPENT\n-> ALICE\n-> PERSEVER\n-> FERMAT\n-> EXCEPTS\n-> PERSEVER\nALICE PERSEVER -> EXCEPTS\n-> FERMAT\n-> SPENT\n-> FERMAT\n-> EXCEPTS\n-> PERSEVER\nALICE PERSEVER -> EXCEPTS\n-> FERMAT\n-> EXCEPTS\n-> PERSEVER\nPERSEVER -> ALICE\n-> ALICE\n-> FERMAT\n-> EXCEPTS\nALICE -> PERSEVER\nALICE -> ALICE\nALICE -> PERSEVER\nPERSEVER -> PERSEVER\nALICE PERSEVER -> ALICE\nALICE PERSEVER -> PERSEVER\nPERSEVER PERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nALICE -> PERSEVER\nPERSEVER -> ALICE\nPERSEVER -> PERSEVER\nALICE -> PERSEVER\nALICE -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> ALICE\nALICE -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nALICE -> PERSEVER\nALICE -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER -> PERSEVER\nPERSEVER ->"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == 'correct'\nassert solution('''\nALICE -> BOB\nALICE BOB -> CARL\n''') == '2'\nassert solution('''\nALICE BOB -> CARL\nALICE BOB -> CARL\n''') == 'correct'\n''')\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n-> A\\n-> B') == 'correct'\nassert solution('2\\n-> A\\n-> B\\n-> C') == 'correct'\nassert solution('1\\n-> A\\n-> B\\n-> C') == '1'\nassert solution('1\\n-> A\\n-> B\\n-> A') == 'correct'\nassert solution('1\\n-> A\\n-> A') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\n-> ALICE\\n-> BOB\\n-> CARL\") == \"1\"\nassert solution(\"1\\n-> A\\n-> A\\n-> A\\n-> A\") == \"2\"\nassert solution(\"2\\n-> B\\n-> B\") == \"1\"\nassert solution(\"1\\n-> B\\n-> B\") == \"1\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n-> A\\n-> B\\nA B -> C\\n') == 'correct'\nassert solution('3\\n-> A\\n-> B\\nALICE BOB -> CARL\\n') == 'correct'\nassert solution('5\\n-> A\\n-> B\\nALICE BOB -> CARL\\n') == 'correct'\nassert solution('5\\n-> A\\n-> B\\nALICE BOB -> CARL\\n') == 'correct'\nassert solution('5\\n-> A\\n-> B\\nALICE BOB -> CARL\\n') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == 'correct'\nassert solution('2\\n-> BOB\\n') == 'correct'\nassert solution('3\\n-> ALICE\\n-> BOB\\n') == '2'\nassert solution('4\\n-> DONE\\n-> BOB\\n-> CARL\\n-> DONE\\n') == '3'\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n-> A\\n-> B') == 'correct'\nassert solution('1\\n-> A\\n-> B\\n-> A') == 'correct'\nassert solution('1\\n-> A\\n-> A\\n-> A') == 'correct'\nassert solution('1\\n-> A\\n-> A\\n-> A\\n-> A') == 'correct'\nassert solution('2\\n-> A\\n-> B\\n-> C\\n-> A') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"3\\n-> BOB\\n-> CARL\\nALICE CARL -> BOB\") == \"2\""
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nPenny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\n''') == 'Connie Froggatt'\nassert solution('''\nConnie Froggatt\nConnie Froggatt\nConnie Froggatt\nConnie Froggatt\nConnie Froggatt\nConnie Froggatt\nPenny Franklin\nPenny Franklin\n***\n''') == 'Connie Froggatt'\nassert solution('''\nBarbara Skinner\nPenny Franklin\nMarti Graham\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\n''') == 'Connie Froggatt'\n''')"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\") == \"Connie Froggatt\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nConnie Froggatt\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nConnie Froggatt\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nConnie Froggatt\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nConnie Froggatt\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Barbara Skinner\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Brucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Brucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Brucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Brucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nConnie Froggatt\\nBrucie Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\n"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"Connie Froggatt\"\nassert solution(input + input) == \"Penny Franklin\"\n\"\"\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt''') == \"Connie Froggatt\"\nprint(solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt'''))\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***\nRunoff!''') == \"Runoff!"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Penny Franklin') == 'Connie Froggatt'\nassert solution('Marti Graham') == 'Connie Froggatt'\nassert solution('Connie Froggatt') == 'Connie Froggatt'\nassert solution('Joseph Ivers') == 'Penny Franklin'\nassert solution('Connie Froggatt') == 'Connie Froggatt'\n"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Connie Froggatt'\nprint(solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***'''))"
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***\nConnie Froggatt''') == 'Connie Froggatt'\nprint(solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***\nConnie Froggatt'''))\nprint(solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***\nConnie Froggatt'''))\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Penny Franklin'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Penny Franklin'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Penny Franklin'\n\n'''\n"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"7\\n\"\n    \"Jabba-the-Hutt Huttese\\n\"\n    \"Bib-Fortuna Huttese Basic\\n\"\n    \"Boba-Fett Basic Huttese\\n\"\n    \"Chewbacca Shyriiwook Basic\\n\"\n    \"Luke Basic Jawaese Binary\\n\"\n    \"Grakchawwaa Shyriiwook Basic Jawaese\\n\"\n    \"R2D2 Binary Basic\\n\"\n) == \"2\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nSample Input:') == '4'\n"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''9\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '3'\nassert solution('''13\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nLuke-R2D2 Huttese Basic\nLuke-R2D2 Jawaese Basic\nLuke-R2D2 Jawaese Basic\nLuke-R2D2 Jawaese Basic\nLuke-R2D2 Jawaese Basic\nLuke-R2D2 Jawaese Basic\nLuke-R2D2 Jawaese Basic\n''') == '5'"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n') == '2'\nassert solution('6\\nJabba the Huttese\\nBib Fortuna Huttese Basic\\nBoba Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwok Basic Jawaese\\nR2D2 Binary Basic\\n') == '3'\nassert solution('4\\nJabba the Huttese\\nBib Fortuna Huttese Basic\\nBoba Fett Basic Huttese\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwok Basic Jawaese\\n') == '1'\nassert solution('3\\nJabba the Huttese\\nBib Fortuna Huttese Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwok Basic Jawaese\\n') == '1'\nassert solution('2\\nJabba the Huttese\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwok Basic Jawaese\\n') == '1'\n"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '2'\nassert solution('''8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '3'\nassert solution('''9\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '2'\nassert solution('''10\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '3'\nassert solution('''1\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '1'\n"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '2'\nassert solution('''17\nBoromir Darby Gladys Sdaly Basic\nR2D2 Basic R2D2 Basic\nLuke Cryomir Sentry Basic\nLuke Sentry Basic Hail Mihaly Bird Basic\nLuke Sentry Basic Cydone Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sentry Basic\nLuke Sentry Basic Sent"
    },
    {
        "number": 4953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('5\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese') == '1'"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1000 2 3') == '900'\nassert solution('2 1000 2 3') == '900'\nassert solution('3 1000 2 3') == '900'\nassert solution('4 1000 2 3') == '900'\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n\") == \"900\"\nassert solution(\"3 10001 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n\") == \"10001\"\nassert solution(\"3 10001 2 3\\n10001\\n0 2 2\\n300\\n27 3 20\\n\") == \"10001\"\nassert solution(\"3 10001 2 3\\n10001\\n0 2 2\\n300\\n27 3 20\\n\") == \"10001\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1000 2 3') == '900'\nassert solution('3 1000 2 3') == '900'\nassert solution('3 1000 2 3') == '900'\nassert solution('3 1000 2 3') == '900'\nassert solution('3 1000 2 3') == '900'\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2000 3 3\n0 2 0\n0 2 2\n''') == '2000'\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n\"\"\") == \"900\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\nassert solution('''5 1000 2 3\n200\n1 2 2\n300\n27 3 20''') == '2000'\nassert solution('''5 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '3000'\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 200 2 3\n200\n0 2 2\n300\n27 3 20\n''') == '900', 'First example'\nassert solution('''\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') == '900', 'Second example'"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1000 2 3') == '900'\nassert solution('10 100 1 1') == '0'\nassert solution('5 1000 2 3') == '900'\n"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') == '900', 'Simple test case fails'\n\nassert solution('''\n4 1 2 3\n1\n1\n0\n4\n''') == '0', 'Simple test case fails'\n\nassert solution('''\n3 1000 2 3\n200\n1 2 2\n300\n27 3 20\n''') == '0', 'Simple test case fails'\n\nassert solution('''\n3 1000 2 3\n200\n1 2 2\n300\n27 3 20\n''') == '900', 'Simple test case fails'\n\nassert solution('''\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') == '900', 'Simple test case fails'"
    },
    {
        "number": 4954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1000 2 3') == '900'\nassert solution('7 1 4 1') == '11'\nassert solution('5 6 1 1') == '11'\nassert solution('7 5 4 2') == '10'\nassert solution('2 1 2 2') == '8'\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'none'\nassert solution('5') == 'none'\nassert solution('7') == 'A C D E F F G A'\nassert solution('19') == 'G# A B C# D# E F# F# G# A#'"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''C D F D C D F F C''') == 'A# C D# F'\nassert solution('''D D D D D D D D D D''') == 'D D D D D D D D D'\nassert solution('''D D D D D D D D D D D D D D D''') == 'D D D D D D D D D D D D D D D'\nassert solution('''D D D D D D D D D D D D D D D D D D D D D D D''') == 'D D D D D D D D D D D D D D D D D D D D D D'\nassert solution('''D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D''') == 'D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D D'\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"A# C D# F\"\nprint(solution.__name__, \":\", __import__('time').timeit(solution, number=1))\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"3\\nG D# F E D F G\") == \"G# A D# F# E\"\nassert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"100\\nC D F D C D F F F C\") == \"C\"\nassert solution(\"100\\nG D# F E D F G\") == \"G# A D# F# E\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\nC D F D C D F F F C\n''') == \"A# C D# F\"\nassert solution('''\n12\nA B C D E F G\n''') == \"A# D# F\"\nassert solution('''\n12\nA C D E F G\n''') == \"A# D# F\"\n'''\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'none'\nassert solution('2') == 'none'\nassert solution('3') == 'none'\nassert solution('4') == 'A'\nassert solution('5') == 'none'\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"A# C D# F\""
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"A# C D# F\"\nassert solution(\"8 A# B C D E F# G A#\") == \"A# C D# F# G A#\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\nA D E F A G\\n\") == \"A# C D# F\\n\"\n\"\"\""
    },
    {
        "number": 4955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\nC D F D C D F F F C \n''') == \"A# C D# F\"\nassert solution('''\n20\nG F F F G E E E E E E\n''') == \"E F# G A G#\"\n\n'''"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"dae ae ju traeligt va\"\"\") == \"dae ae ju traeligt va\", \"First example failed\"\nprint(\"First example passed!\")\nassert solution(r\"\"\"haer talar vi rikssvenska\"\"\") == \"haer talar vi rikssvenska\", \"Second example failed\"\nprint(\"Second example passed!\")\nassert solution(r\"\"\"ae ae ju traeligt va\"\"\") == \"ae ae ju traeligt va\", \"Third example failed\"\nprint(\"Third example passed!\")\nprint(\"Congratulations, all examples passed!\")\n"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\n\n------SAMPLE TESTS (f\u00f6r koden)------\n"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\n\nSample Input:\nhaer talar vi rikssvenska\nSample Output:\nhaer talar vi rikssvenska'''"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ae oe ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"ae oe ju haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\""
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va', \"Solution is wrong!\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('\u00e4j\u00e4t jo vaalaa') == '\u00e4j\u00e4t jo vaalaa'\nassert solution('\u00c4j\u00e4t jo vaalaa') == '\u00c4j\u00e4t jo vaalaa'\n"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nprint('All test cases passed.')\n\nNotes:\n\nEvery word must contain at least one \u00f6stg\u00f6tska letter.\nAll words must be a maximum of $15$ letters long.\nWords are not case sensitive.\nFor simplicity, the function should not maintain any additional state.\nThe input is guaranteed to be valid.\n\n'''\n"
    },
    {
        "number": 4956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''dae ae ju traeligt va''') == 'dae ae ju traeligt va'\n''')\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"E..E#.\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n..#.#\\n##.#E\\n#E..#\\n.##.#\\n###.#\") == \".E#E#E\"\nassert solution(\"5 10\\n##...#\\n#...##\\n.#.###\\n.###.#\\n###.##\") == \"..#..#.\"\nassert solution(\"5 5\\n#E#E#\\n###.E#\\n#.E.E#\\n#.E#E#\\n#.#.#E#\") == \"....#.\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n##\\n###\\n\") == \"###\\n###\\n###\\n\"\nassert solution(\"2 2\\n..#\\n##.\\n.##\\n\") == \"..E#\\n#.E#\\n##E#\\n###E#\\n\"\nassert solution(\"4 4\\n###\\n###\\n###\\n\") == \"###\\n###\\n###\\n###\\n###\\n###\\n\"\nassert solution(\"9 9\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n###\\n###\\n###\\n\") == \"###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nassert solution(\"4 3\") == \"E.E#.\"\nassert solution(\"6 6\") == \"E#.E#E#.E#E#\"\nassert solution
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n.#..\n.##.\n..#.\n.....\n.....''') == 'E..E#E'\nassert solution('''5 5\n...#.\n...#.\n...#.\n...#.\n.#...''') == 'E.E.#'"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6\\n...#.\\n...#.\\n#.....\\n......\\n##...#\\n') == 'E...E\\n..E#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\""
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\n'''\n"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n5\n1\n8\n7\n''') == '1 5 3 8 7 4'\nassert solution('''12 8 2 4 10 3 25 14\n4\n3\n''') == '3 8 2 12 4 10 7 25 14'\n"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 2 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"1 1 2 2 3 3\") == \"1 1 2 2 3\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"2 1 1 2\") == \"1 1 2\"\nassert solution(\"1 2 2\") == \"1 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('1 1 1 1 1 1 1') == '1 1 1 1 1 1'\nassert solution('2 2 2 2 2 2') == '2 2 2 2 2 2'\nassert solution('2 2 3 2 2 3') == '2 3 2 2 3 2'\nassert solution('2 4 4 4 5 5 5') == '2 4 5 4 5 5'\n"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\nimport heapq"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'"
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == None\nassert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('1 1 1 1 1 1') == '1 1 1 1 1 1'\nassert solution('1 1 2 3 4') == '1 1 2 3 4'\nassert solution
    },
    {
        "number": 4958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '12 10 3 8 4 2'''\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2') == \"4\"\nassert solution('3\\n2 2') == \"0\"\nassert solution('2\\n1 2') == \"2\"\n\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '2'\nassert solution('2 4 4') == '0'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 0 0\") == \"0\"\nassert solution(\"8 1 3\") == \"2\"\nassert solution(\"20 1 10\") == \"11\"\nassert solution(\"10 0 20\") == \"0\""
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 0 3') == '4'\nassert solution('9 0 3') == '4'\nassert solution('10 0 3') == '5'\nassert solution('9 5 3') == '6'\nassert solution('10 5 3') == '5'\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('0 0 0') == '1'\nassert solution('3 4 5') == '6'\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 2') == '4'\nassert solution('9 0 3') == '4'\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\nassert solution([\n    \"10 0 5\",\n    \"100 2\",\n    \"1000 2\",\n    \"10000 2\",\n    \"10000 1\",\n    \"100000000 1\",\n]) == '4'\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution('1\\n2\\n3') == '3'\nassert solution('2\\n3\\n1') == '4'\nassert solution('3\\n3\\n3') == '4'\nassert solution('3\\n4\\n3') == '0'\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n10 0 3\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n9 0 3\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n5 0 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0 2\\n1 2\\n1 1\\n0 0\\n0 0') == '4'\nassert solution('0\\n1 2\\n1 1\\n0 0\\n0 0') == '1'\nassert solution('1\\n1 2\\n1 1\\n0 0\\n0 0') == '2'\nassert solution('2\\n2 2\\n1 1\\n0 0\\n0 0') == '1'"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1010') == '12'\nassert solution('1111') == '31'\nassert solution('1010') == '12'\n"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1010') == '12'\nassert solution('11111') == '255'"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('010101010') == '2145'\nprint(solution('010101010'))\n\nSample Input:\n01010101\nSample Output:\n1441\nprint(solution('01010101'))\n\nSample Input:\n1011010101\nSample Output:\n124529\nprint(solution('1011010101'))\n\nSample Input:\n1010110101\nSample Output:\n124529\nprint(solution('1010110101'))\n\nSample Input:\n110001010101\nSample Output:\n1458763\nprint(solution('110001010101'))\n\nSample Input:\n101011010101\nSample Output:\n1458763\nprint(solution('101011010101'))\n\nSample Input:\n10110110101\nSample Output:\n14591861\nprint(solution('10110110101'))\n\nSample Input:\n11000100010101\nSample Output:\n14591861\nprint(solution('11000100010101'))\n\nSample Input:\n101011010101\nSample Output:\n14591861\nprint(solution('101011010101'))\n\nSample Input:\n11000100010101\nSample Output:\n14591861\nprint(solution('11000100010101'))\n\nSample Input:\n101011010101\nSample Output:\n14591861\nprint(solution('101011010101'))\n\nSample Input:\n1001101000001010\nSample Output:\n12588714\nprint(solution('1001101000001010'))\n\nSample Input:\n101010101000001010\nSample Output:\n12588714\nprint(solution('101010101000001010'))\n\nSample Input:\n101010101000001010\nSample Output:\n12588714\nprint(solution('101010101000001010'))\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10001110''') == '12'"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11100\") == \"13\"\nassert solution(\"101\") == \"13\"\nassert solution(\"1111\") == \"31\"\nassert solution(\"11111111\") == \"31\"\nassert solution(\"1010110100\") == \"33\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"01\") == \"1\"\nassert solution(\"010\") == \"2\"\nassert solution(\"101\") == \"3\"\nassert solution(\"110\") == \"4\"\nassert solution(\"111\") == \"5\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1011\") == \"13\"\nassert solution(\"1100\") == \"10\"\nassert solution(\"1111\") == \"15\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1011\") == \"19\"\nassert solution(\"1010\") == \"12\"\nassert solution(\"10111\") == \"19\"\nassert solution(\"101011\") == \"19\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"12\"\n\n---Input Format---\nThe first line contains a binary numeral.\n\n---Output Format---\nOutput the number in octal.\n\nSample Input:\n1010\nSample Output:\n12\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1010') == '12'"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n..o\no..\n''') == '2'\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 4\") == \"2\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1\n.o\n.o\nSample Input 2:\n2 4\n.ooo\noo..\nSample Output 2:\n4''') == '4'\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n.o.\\no.') == '2'\nassert solution('3 3\\n.o.\\no.\\no.') == '3'\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('.o.ooo..o.oo.ooo..o.o.ooo.') == \"3\"\nassert solution('oo.ooo..o.oo.ooo..o.o.ooo.') == \"4\"\n\nassert solution('ooo.ooo..o.oo.ooo..o.o.ooo.') == \"1\""
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n...o\no..\n\n''') == '2'\n\nassert solution('''\n1 1\n.\n\n''') == '1'\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n.o.\n.o.''') == '2'\nassert solution('''2 3\n.o.\no.o''') == '1'\n'''"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3\\n.o\\n.o\"\n    ) == \"2\"\nassert solution(\n    \"1 2\\n1\\n.o\\n.o\"\n    ) == \"2\"\nassert solution(\n    \"1\\n.o\\n.o\\n.o\\n.o\\n.o\"\n    ) == \"3\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n.o\\no..\") == \"2\"\nassert solution(\"1 2\\noo\\n.oo\") == \"2\"\n\n---Output---\n2\n\n'''\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'SMECE'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'SMECE'\nassert solution('''\n5 3\n1 2\n1 2\n1 3\n1 3\n1 2\n''') == 'LADICA'\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'SMECE'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 3\n1 2\n1 2\n''') == 'SMECE'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 3\n1 3\n1 2\n''') == 'SMECE'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 3\n1 2\n1 2\n''') == 'SMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'SMECE'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\nassert solution('''\n5 3\n2 5\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\n'''\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 2\\n1 3\") == \"SMECE\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 2\\n1 3\") == \"LADICA\"\nassert solution(\"3 3\\n1 2\\n1 3\\n1 2\") == \"SMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nSMECE\\nSMECE\\nSMECE\\nSMECE\"\nassert solution(\"5 4\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nSMECE\\nSMECE\\nLADICA\\nSMECE\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 2\") == \"LADICA\\nSMECE\\nSMECE\\nLADICA\\nLADICA\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 2\") == \"LADICA\\nSMECE\\nSMECE\\nSMECE\\nSMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'SMECE'\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'SMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"SMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'LADICA'\nassert solution('2 1') == 'LADICA'\nassert solution('1 1') == 'SMECE'\nassert solution('2 3') == 'SMECE'\nassert solution('2 1') == 'SMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'LADICA'"
    },
    {
        "number": 4962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA'\nassert solution('''5 4\n1 2\n1 2\n1 3\n1 2\n1 3\n''') == 'SMECE'\nassert solution('''10 5\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 2\""
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n0\\n\") == \"1 2\""
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0\\n') == '1 2'\nassert solution('2\\n0 1\\n') == '1 2'\nassert solution('3\\n0 1 2\\n') == '1 2 3'\nassert solution('4\\n0 1 2 3\\n') == '1 2 3 4'\nassert solution('5\\n0 1 2 3 4\\n') == '1 2 3 4 5'\n"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 1') == '1 2'\nassert solution('3\\n0 1 2') == '1 2 3'\nassert solution('4\\n0 1 2 3') == '1 2 3 4'\nassert solution('5\\n0 1 2 3 4') == '1 2 3 4 5'"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 2'\nassert solution('2') == '1 2'\n\nassert solution('3') == '1 2 1'\nassert solution('4') == '1 2 1 2'\nassert solution('5') == '1 2 1 2 1'\n"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 2\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0\n''') == '1 2'\nprint('PASSED!')"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 1 2 3 4') == '1 2 3 4 0'\n"
    },
    {
        "number": 4963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0') == '1 2'\n"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == '1'\nassert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == '0'\n'''\n"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'\nassert solution('7 4 5\\n0 0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 0\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n3 5\\n4 0\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n5 0\\n5 1\\n5 2\\n5 3\\n5 4\\n5 5\\n') == '4'"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\n\n----\n\nimport sys\nimport heapq\nfrom collections import defaultdict\n\nN, H, L = list(map(int, sys.stdin.readline().strip().split()))\n\nmovies = list(map(int, sys.stdin.readline().strip().split()))\nmovies_on_horror = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 0 1\\n2 1\\n1 1') == '1'\nassert solution('8 6 0 0 1\\n0 4 2\\n1 1\\n3 5\\n2 3') == '2'\nassert solution('5 5 0 0 1\\n4 4\\n2 2\\n2 2') == '3'\n"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 6 5') == '1'\nassert solution('5 2 3 4 5') == '5'\nassert solution('5 2 1 3 4 5') == '5'\nassert solution('5 1 2 3 4 5') == '5'\nassert solution('6 5 2 1 3 4 5') == '1'\n"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '1'\n\nstdin = \"\"\"\n9 8 3\n4 5 1\n4 5\n5 7\n0 6\n0 0\n0 1\n3 4\n0 2\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == \"1\"\n\nassert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == \"1\"\n\nassert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == \"1\"\n\nassert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == \"1\"\n\nassert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == \"2\""
    },
    {
        "number": 4964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\nassert solution(\"3 3 3\\n0 1\\n1 1\\n1 0\") == '0'\nassert solution(\"4 4 4\\n0 1\\n1 1\\n1 0\") == '1'\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n-15 9 16 4 -2\n''') == '4 3 1'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '4 3 1'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '4 3 1'\n\nassert solution('''\n5\n-20 -15 5 -12 -6\n''') == '-12 -6 -20 5 -15'\n\nassert solution('''\n5\n-20 -15 5 -12 -6\n''') == '-12 -6 -20 5 -15'"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'impossible'\nassert solution('4') == '1 3 4'\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"5 3 4 1\"\nassert solution(\"15\") == \"15 3 4 5 3 6 7 8 9 10 12 11 14\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 4\\n') == '4 3 1'\nassert solution('5\\n1 2 3 4 5\\n') == '5 1 2 3 4 5'"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"6\\n4 3 2 1 5 7\") == \"4 3 2 1 5 7\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '4 3 1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '4 3 1'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 4') == '4 3 1'\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"4\\n1 3 4\") == \"3 4 1\"\nassert solution(\"6\\n1 2 4 5 7\") == \"5 7 2 4 1\"\nassert solution(\"5\\n1 4 3 6 7\") == \"5 7 3 6 4 1\"\nassert solution(\"5\\n1 4 3 6 7\") == \"7 5 3 6 4 1\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 1 3') == '-1'\nassert solution('3\\n-2 1 3') == '-3'\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 5\\n2 10') == '18.400'\nassert solution('1\\n0 1\\n1 100') == '100.000'"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 20 15\") == \"18.400\"\nassert solution(\"2 16 15\") == \"12.000\"\nassert solution(\"4 10 10\") == \"10.000\"\nassert solution(\"2 17 10\") == \"10.000\"\nassert solution(\"2 1 1\") == \"1.000\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 20 15') == \"18.400\", 'Expected: 18.400'\nassert solution('1 1 5') == \"6.000\", 'Expected: 6.000'\n\nsolution('')\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nassert solution('3 4 0\\n2 1\\n2 2\\n2 3\\n3 4\\n3 5') == '7.000'\nassert solution('7 4 0\\n2 1\\n2 2\\n2 3\\n3 4\\n3 5') == '10.000'\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 50 50\n1\n''') == '55.000', solution.__doc__\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3.0\", \"didn't work\"\nassert solution(\"2 3\") == \"1.3333333333333333333333333\", \"didn't work\"\nassert solution(\"2 2 2 2\") == \"1.0\", \"didn't work\"\nassert solution(\"2 3 3 2\") == \"0.5\", \"didn't work\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '1.000'\nassert solution('1\\n2\\n2') == '1.000'\nassert solution('2\\n1\\n1') == '2.000'\nassert solution('2\\n3\\n2') == '1.800'\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 20 15\") == \"18.400\"\nassert solution(\"2 20 10\") == \"20.100\"\nassert solution(\"1 2 3 4\") == \"3.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 20 15\") == \"18.400\"\nassert solution(\"2 10\") == \"1.333\""
    },
    {
        "number": 4966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\") == \"18.400\"\nassert solution(\"2 1 2\") == \"1.200\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('.S.H.S.H.H.H.') == '4'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n.H.\\n.S.') == '2'\nassert solution('3\\n.S.\\n...H') == '5'\nassert solution('5\\n.H.\\n.....\\nS...\\n.H..') == '9'\nassert solution('4\\n.H.\\n.S.\\n...H\\n...S') == '4'\nassert solution('1\\n.S.') == '0'\n"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\""
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n.HH.H\n.HH.H\n.H.HH\n.H.HH\nS.HH''') == '3'\nassert solution('''3\n.HH.H\n.HH.H\n.H.HH''') == '4'\nassert solution('''3\n.HH.H\n.HH.H\n.H.HH''') == '4'\n'''\n"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\""
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 5"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"5\\n\"\nassert solution(\"1\\n1\\n2\\n3\\n4\\n5\\n6\") == \"2\\n\"\nassert solution(\"1\\n1\\n1\\n2\\n2\\n3\\n4\\n5\\n6\") == \"2\\n\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n6\") == \"2\\n\"\nassert solution(\"1\\n3\\n4\\n5\\n6\\n6\\n6\") == \"2\\n\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nS...\\n.H..') == '5'\nassert solution('1\\nS..\\n.H.') == '0'\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n....H\n.....\nS....\n....H\n.....\n''') == '5'\nassert solution('''\n10\n....H\n.....\nS....\n....H\n.....\n.S.H\n.....\n.H.S\n.....\n.S.H\n.....\nS.....\n''') == '15'\nassert solution('''\n10\n.S..S\n...S\n...S\n...S\n...S\n...S\n...S\n...S\n...S\n.....\n''') == '0'\nassert solution('''\n10\n...S\n...S\n...S\n...S\n...S\n...S\n...S\n...S\n...S\n.....\n''') == '11'\n'''\n"
    },
    {
        "number": 4967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nH.\\n.S.') == '5'\nassert solution('2\\n.H.') == '1'\n'''"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r'''\n4 2 3\n2 4\n1 3 5\n''') == '0'\nassert solution(r'''\n5 2 3\n2 4\n1 3 5\n''') == '1'\nassert solution(r'''\n10 2 3\n2 4\n1 3 5\n6 7\n8 9\n10 11\n12 13\n''') == '2'"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 2 3\\n\"\n    \"2 4\\n\"\n    \"1 3 5\"\n) == \"0\"\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport common\n"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '0'\nassert solution('2 4') == '1'\nassert solution('1 3 5') == '2'\nassert solution('4 8') == '1'\n"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('4 1 1\\n1 2\\n2 3') == '3'\n"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '0'"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"1\"\nassert solution(\"10 10 10 10\") == \"2\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\n\nassert solution('''5 2 3\n2 3\n1 4\n3 5\n4 5''') == '1'\n\nassert solution('''5 2 3\n2 3\n1 4\n3 5\n4 5''') == '2'\n\nassert solution('''5 2 3\n2 3\n1 4\n3 5\n4 5''') == '3'\n\nassert solution('''5 2 3\n2 4\n1 3 5\n3 5\n4 5''') == '2'"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5\\n') == \"0\"\nassert solution('8 4 3\\n5 6\\n1 2\\n3 4\\n5 6\\n1 2\\n3 4\\n3 5\\n') == \"0\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2 1\n2 4\n1 3 5\n''') == '0'\nassert solution('''\n5 2 2\n3 2\n1 3 4\n''') == '1'\nassert solution('''\n5 4 2\n2 1\n4 1\n''') == '3'\n"
    },
    {
        "number": 4968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('3 3') == '0.3333333333'\n"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.000000000'"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('2 2') == '0.25000000'\nassert solution('3 3') == '0.5000000'\nassert solution('4 4') == '0.75000000'\nassert solution('5 5') == '1.000000000'\n\"\"\"\nfrom math import pi\n\nR, C = map(int, input().split())\n\nprint(R ** 2 * pi / (R ** 2 + C ** 2) - C)\n"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('5 3') == '0.3333333333333333'\nassert solution('1 4') == '0.20000000'\nassert solution('5 2') == '0.6666666666666666'\n"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\n'''"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('1.1') == '0.0'\nassert solution('1.0000001') == '0.0'\nassert solution('0.99') == '0.99'\nassert solution('1.000') == '1.000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('0 1') == '0.500000'\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.000000000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('10 10') == '0.9999999999'\nassert solution('15 9') == '0.9999999999'"
    },
    {
        "number": 4969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.000000000'\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"5\"\n\n########################\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '3'\nassert solution('6') == '5'\nassert solution('10') == '9'\nassert solution('50') == '49'\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\n''') == '2'\nassert solution('''\n2\n100 101 102 103 488\n100 200 300 101 102\n''') == '0'\nassert solution('''\n3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\n''') == '1'\nassert solution('''\n5\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\n200 400 500 101 102\n100 200 300 101 102\n''') == '0'\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n') == '2'\nassert solution('5\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n100 200 300 101 102\\n103 102 101 488 100\\n') == '1'\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\""
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n"
    },
    {
        "number": 4970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == \"2\""
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1730') == '1729'\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10\\n') == '10'\nassert solution('1000\\n') == '999'\nassert solution('100000\\n') == '99999'\nassert solution('10\\n') == '9'\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == None\nassert solution('3\\n') == '3'\nassert solution('4\\n') == None\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '6'\nassert solution('1000') == '1000'\nassert solution('200') == '199'\nassert solution('5000') == '5000'\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7') == '7'\nassert solution('13') == '13'\nassert solution('28') == '28'\nassert solution('15') == '28'\nassert solution('35') == '35'\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1729\""
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"12\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"400000\") == \"1729\"\nassert solution(\"-1\") == \"None\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n4\n5\n6\n7\n''') == '5'\nassert solution('''\n8\n17\n32\n43\n67\n72\n82\n92\n''') == '92'\nassert solution('''\n13\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000\n''') == '900'\nassert solution('''\n5000\n''') == 'None'\nassert solution('''\n''') == 'None'"
    },
    {
        "number": 4971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n2') == None"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('65536') == '16'\nassert solution('12345') == '2'\nassert solution('80') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('65536') == '16'\nassert solution('1000000') == '27'\n\n---Input: a = '2'\n---Output: '1'\n---Explanation: 2^2 = 4\n---Input: a = '4'\n---Output: '1'\n---Explanation: 4^2 = 16\n---Input: a = '16'\n---Output: '1'\n---Explanation: 16^2 = 256\n---Input: a = '256'\n---Output: '2'\n---Explanation: 256^2 = 65536\n---Input: a = '65536'\n---Output: '16'\n---Explanation: 65536^2 = 1048576\n---Input: a = '1048576'\n---Output: '2'\n---Explanation: 1048576^2 = 262144\n"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''17\n10\n7 8 9 10 11 12 13 14 15 16''') == '16'\nassert solution('''1\n3\n5\n7\n11\n13\n17\n19''') == '14'\n"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('65536') == '16'\nassert solution('12345') == '16'\nassert solution('8') == '1'\nassert solution('5') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"65536\") == \"16\"\n\nassert solution(\"1000000000\") == \"1\"\n\nassert solution(\"100000000\") == \"2\"\n\nassert solution(\"10000000000\") == \"3\"\n\nassert solution(\"100000000000\") == \"4\""
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"65536\") == \"16\"\nassert solution(\"9\") == \"1\"\n\n\"\"\"\n\nx = int(input())\ns = []\nwhile True:\n    if len(s) == 0:\n        s.append(x)\n    else:\n        if x < s[-1] and x % s[-1] == 0:\n            s.append(x)\n        else:\n            break\nprint(len(s))\n"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('65536') == '16'"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n10\n1 2 3 4 5\n6''') == '6'\nassert solution('''10\n4\n1 2 3 4 5\n8''') == '4'\nassert solution('''65536\n1\n65536''') == '16'\n"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"65536\") == \"16\"\nprint(\"Congratulations! All tests passed!\")"
    },
    {
        "number": 4972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('65536') == '16'"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n.\n.\n\n1\n''') == '-1'\n\nassert solution('''\n4\n....\n....\n....\n...K\nSample Output:\n3\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"18\"\nassert solution(\"12345678910111213141516171820212223\") == \"14\""
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n..#.#\\n#.#.K') == '1'\nassert solution('5\\n.#...#\\n...##.\\n###..#\\n..#....') == '3'\nassert solution('2\\n###\\n#.K') == '-1'\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n....\n....\n....\n...K\n''') == '-1'\n\nassert solution('''8\n....\n....\n....\n...K\n.....\n....\n....\n.....\n''') == '4'\n\nassert solution('''5\n....\n....\n....\n...K\n.K.\n''') == '3'\n\nassert solution('''4\n....\n....\n....\n...K\n''') == '-1'\n\nassert solution('''7\n....\n....\n....\n...K\n.....\n....\n....\n.....\n''') == '-1'"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n....\n....\n....\n...#\nSample Output:\n-1''') == '-1'\nassert solution('''5\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n.....\\n.....\\n#K\\n\") == \"2\"\nassert solution(\"2\\n.....\\n....\\n.K\\n\") == \"-1\"\nassert solution(\"2\\n....\\n.....\\n.K\\n\") == \"-1\"\nassert solution(\"2\\n.....\\n.....\\n.#K\\n\") == \"1\"\nassert solution(\"5\\n#####\\n#.#.\\n##.#\\n.#.K\\n#####\\n#K.\\n\") == \"4\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"6\"\nassert solution(\"100\") == \"400\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n..\\n...\\n.K\") == \"-2\"\nassert solution(\"1\\nK\") == \"1\"\nassert solution(\"1\\nK\\n.\\n\") == \"1\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"too late\"\nassert solution(\"1\") == \"23\"\nassert solution(\"1 2\") == \"23\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"too late\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n3\\n99') == 'too late'\nassert solution('3\\n1\\n2') == 'too late'\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 5\n42\n2\n99\n1\n''') == '23'\n\nassert solution('''\n100 2\n42\n1\n99\n1\n''') == 'too late'\n\nassert solution('''\n100 1\n42\n1\n99\n1\n''') == 'too late'\n\nassert solution('''\n100 1\n42\n1\n''') == 'too late'\n\nassert solution('''\n100 5\n42\n1\n2\n3\n99\n''') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100 5\n42\n3\n2\n99\n1\n''') == '23'\nassert solution('''\n100 2\n5\n3\n2\n99\n1\n''') == 'too late'\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"too late\"\nassert solution(\"10 5\") == \"too late\"\nassert solution(\"100 5\") == \"23\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nassert solution(\"10 30\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30\") == \"too late\"\nprint(\"You passed this test!\")"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n100 5\n42\n3\n2\n99\n1\n''') == '23'\nassert solution('''\n100 5\n42\n3\n2\n99\n1\n''') == 'too late'\n"
    },
    {
        "number": 4974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n100 5\n42\n3\n2\n99\n1\n''') == '23'\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('playfair example') == 'MYVJJROHZCQBPJDRQZBHWHNQNLPXSG'\nassert solution('anjik crm') == 'DKNREN'\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"playfair example\") == \"IHRGKHMWQGXEDABSQDNYYNPIVQT\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('playfair example') == 'ZQBSJXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'MCXZMDMGZJPUGLSBKTMHEIF'\n'''\n\nimport collections"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    playfair example\n    hide the gold in the tree stump\n    ''') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('HIDE THE GOLD IN THE TREE STUMP') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\n'''\n\n'''\nfrom itertools import product"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n"
    },
    {
        "number": 4975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'playfair example',\n    'hide the gold in the tree stump'\n    ) == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.000 1.000 2.000 2.000') == 'The gopher can escape through the hole at ($1$,$2$).'\nassert solution('1.000 1.000 2.000 2.000') == 'The gopher can escape through the hole at ($1$,$2$).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3.000 1.000 5.000 1.000\") == \"The gopher can escape through the hole at ($1$, $1$).\"\nassert solution(\"1.000 2.000 1.000 1.000\") == \"The gopher can escape through the hole at ($1$, $1$).\"\nassert solution(\"1.000 1.000 1.000 1.000\") == \"The gopher can escape through the hole at ($1$, $1$).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5.000 2.000 5.000 1.000\") == \"The gopher can escape through the hole at ($x$,$y$).\"\nassert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher cannot escape.\""
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n') == 'The gopher can escape through the hole at ($1.500,$1.500).'\nassert solution('1.000 1.000 2.000 2.000\\n1.500 2.000\\n') == 'The gopher can escape through the hole at ($1.500,$2.000).'\nassert solution('1.000 1.000 2.000 2.000\\n2.000 1.500\\n') == 'The gopher can escape through the hole at ($2.000,$1.500).'\nassert solution('1.000 1.000 2.000 2.000\\n1.500 2.000\\n') == 'The gopher can escape through the hole at ($1.500,$2.000).'"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.0 1.0 2.0 1.0') == 'The gopher can escape through the hole at ($1$,$1$).'\nassert solution('1.5 1.5') == 'The gopher can escape through the hole at ($1.5$,$1.5$).'\nassert solution('2.5 2.5') == 'The gopher can escape through the hole at ($2.5$,$2.5$).'\n\"\"\"\n\nfrom math import inf\nimport math\nimport sys\n\n\nclass Gopher:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.speed = 1\n\n    def is_inside_gopher_hole(self, hole):\n        return hole.x <= self.x <= hole.x + hole.hole_width and hole.y <= self.y <= hole.y + hole.hole_height\n\n\nclass Hole:\n    def __init__(self, x, y, hole_width, hole_height):\n        self.hole_width = hole_width\n        self.hole_height = hole_height\n        self.x = x\n        self.y = y\n        self.hole_center = (self.x + self.hole_width / 2, self.y + self.hole_height / 2)\n\n    def is_inside_gopher_hole(self, gopher):\n        return math.sqrt((gopher.x - self.hole_center[0]) ** 2 + (gopher.y - self.hole_center[1]) ** 2) <= self.hole_height / 2\n"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1.000 1.000 2.000 2.000\\n1.500 1.500\",\n) == \"The gopher cannot escape.\"\n\nassert solution(\n    \"1.000 1.000 2.000 2.000\\n1.500 2.000\",\n) == \"The gopher can escape through the hole at ($1$,$1$).\"\n\nassert solution(\n    \"1.000 1.000 2.000 2.000\\n0.000 1.000\",\n) == \"The gopher can escape through the hole at ($0$,$1$).\"\n\nassert solution(\n    \"1.000 1.000 2.000 2.000\\n0.000 0.000\",\n) == \"The gopher can escape through the hole at ($0$,$0$).\""
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5.000 -3.000 4.000 3.000\n1.500 1.500\n5.000 -3.000 4.000 2.000\n''') == 'The gopher can escape through the hole at (1.500,1.500).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher can escape through the hole at ($x$,$y$).\"\nassert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher can escape through the hole at ($x$,$y$).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.000 1.000 2.000 2.000') == 'The gopher can escape through the hole at (1, 1).'\nassert solution('1.500 1.500') == 'The gopher can escape through the hole at (1, 1).'\nassert solution('0.000 0.000') == 'The gopher cannot escape.'\nassert solution('1.000 0.000') == 'The gopher cannot escape.'\nassert solution('-1.000 -1.000') == 'The gopher cannot escape.'\n"
    },
    {
        "number": 4976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.000 1.000 2.000 2.000') == 'The gopher can escape through the hole at ($1$,$1$).'\nassert solution('0.500 0.500') == 'The gopher can escape through the hole at ($0.5$,$0.5$).'\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == 'Y'\nassert solution('4 5\\n3 3\\n4\\n') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n3 4\\n3\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"Y\"\nassert solution(\"3 3\") == \"Y\"\nassert solution(\"3\") == \"N\"\nassert solution(\"\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"Y\"\nassert solution(\"1 4\\n3 4\\n5\") == \"N\"\nassert solution(\"3 4\\n3 3\\n5\") == \"Y\"\nassert solution(\"1 3\\n3 4\\n5\") == \"Y\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'N'\nassert solution('2') == 'Y'\nassert solution('3') == 'Y'\nassert solution('4') == 'Y'\nassert solution('5') == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"Y\"\nassert solution([3, 3]) == \"Y\"\nassert solution([3, 4]) == \"N\"\nassert solution([4, 3]) == \"N\"\nassert solution([4, 4]) == \"Y\"\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'Y'\nassert solution('1 4') == 'Y'\nassert solution('3 3') == 'Y'\nassert solution('3') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"Y\", \"Should return Y\"\nassert solution(\"4 3\") == \"Y\", \"Should return Y\"\nassert solution(\"3 3\") == \"Y\", \"Should return Y\"\nassert solution(\"3 4\") == \"N\", \"Should return N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n3 3\n3''') == 'Y'\nassert solution('''5 10\n7 8\n7\nSample Input:\n1\n2\n3\nSample Output:\nN\n''') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'Y', 'Sample Test 1'\nassert solution('1 1') == 'Y', 'Sample Test 2'\n\n'''"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n.V.\\n.V.') == '#.V.\\n.V.\\n.V.'\nassert solution('6 6\\n.V.\\n.V.\\n.#.\\n.#.\\n.#.\\n.#.') == '.V.\\n.V.\\n.V.\\n.V.\\n.V.\\n.V.'\nassert solution('5 5\\n.V.\\n.V.\\n.V.\\n..V\\n..V\\n.V.') == '.V.\\n.V.\\n.V.\\n.V.\\n.V.'\nassert solution('6 7\\n.V.\\n..V\\n..V\\n..V\\n.V.\\n.#.\\n.#.') == '.V.\\n.V.\\n.V.\\n.V.\\n.V.\\n.V.'\n\n'''"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\\n\") == \".................\\n.................\\n.................\\n.................\\n.................\\n\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7\") == stdin"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 7\n...V...\n.......\n.......\n...#...\n..###..\n\"\"\") == \"\"\"\n...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\n\"\"\".strip()\n\nassert solution(\n\"\"\"\n5 7\n...V...\n.......\n.......\n...#...\n..###..\n\"\"\") == \"\"\"\n...V...\n...#...\n..VVV..\n.VV#VV.\n.V###V.\n\"\"\".strip()\n\nassert solution(\n\"\"\"\n5 7\n...V...\n...V...\n...V...\n...#...\n..###..\n\"\"\") == \"\"\"\n...V...\n...#...\n...V...\n...V...\n..VVV..\n\"\"\".strip()\n"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"\\n\\n\") == \"\"\nassert solution(\"...V...\\n\\n\\n...V...\\n\\n\\n\\n...V...\\n\\n\") == \"\"\"...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 7\n.#.V..\n...##.\n..V##.#\n"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 7\n...V...\n.......\n.......\n...#...\n..###..\n''') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.''')\n"
    },
    {
        "number": 4978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n\"\n        \".V...\\n\"\n        \".......\\n\"\n        \".......\\n\"\n        \"...#...\\n\"\n        \"..###..\\n\") == \".V...\\n\"\nassert solution(\"5 7\\n\"\n        \".......\\n\"\n        \".......\\n\"\n        \"...#...\\n\"\n        \"..###..\\n\") == \"...V...\\n\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('13') == '11'\nassert solution('1111') == '0'\nassert solution('111') == '1'\nassert solution('01') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1011\""
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13') == '11'\nassert solution('10') == '1'\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13') == '11'\nassert solution('10') == '1'\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"101\") == \"11\"\nprint(\"Cheers, Codewars!\")\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string = \"\"\"\n13\n\"\"\") == \"11\"\nassert solution(input_string = \"\"\"\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13') == '11'\nassert solution('123') == '321'\n"
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\""
    },
    {
        "number": 4979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\n"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == '9'\nassert solution('1') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'I must watch Star Wars with my daughter', \"DONE\"\nassert solution('8') == 'I must watch Star Wars with my daughter', \"DONE\"\nassert solution('7') == 'I must watch Star Wars with my daughter', \"DONE\"\nassert solution('6') == 'I must watch Star Wars with my daughter', \"DONE\"\nassert solution('1') == 'I must watch Star Wars with my daughter', \"DONE\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''12\npink\ntequilaSunrose\nmExicanPInK\nCoquelicot\nturqrose\nroSee\nJETblack\npink\nbabypink\npInKpinkPinK\nPInkrose\nlazerlemon\n''') == '9'\nprint(solution('''8\nLorEx\nLorEx\nLorEx\nLorEx\nLorEx\nLorEx\nLorEx\nLorEx\nLorEx\n'''))"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\") == \"9\"\nassert solution(\"10\\npink\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\") == \"6\"\nassert solution(\"12\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\") == \"7\"\nassert solution(\"8\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\") == \"5\"\nassert solution(\"8\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"9\"\nassert solution(\"1\") == \"I must watch Star Wars with my daughter\""
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == \"9\"\nassert solution('10') == \"I must watch Star Wars with my daughter\""
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"9\"\nassert solution(\"123456789\") == \"6\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"9\", \"Should be 9\"\nassert solution(\"1\") == \"I must watch Star Wars with my daughter\", \"Should be I must watch Star Wars with my daughter\"\n\n'''"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '9'\n"
    },
    {
        "number": 4980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"9\"\nassert solution(\"10\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('2 1 4') == '1 4 2'\n\nprint('Tests passed')\n\n\n## 14. (2 points) First, write the function that determines if a string has the same number of vowels as the other string\n"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1 5 3\\n'\n    'ABC'\n) == '1 3 5'\nassert solution(\n    '2 4 1\\n'\n    'BCA'\n) == '2 4 1'\n"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 3') == '1 3 5'"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 2 3\") == \"1 3 2\"\nassert solution(\"A B C\") == \"C B A\"\nassert solution(\"D E F\") == \"F E D\"\nassert solution(\"a b c\") == \"c b a\"\n\"\"\"\n\nA, B, C = input().split()"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"2 4 1\") == \"1 2 4\"\nassert solution(\"4 5 2\") == \"2 4 5\"\nassert solution(\"10 3 5\") == \"3 5 10\""
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"2 4 3\") == \"4 2 3\"\nassert solution(\"5 5 3\") == \"3 5 2\"\nassert solution(\"10 20 10\") == \"10 20 10\""
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('2 3 4') == '4 3 2'\nassert solution('1 4 2') == '1 2 4'\nassert solution('2 4 1') == '4 1 2'\nassert solution('3 4 1') == '1 3 4'\n"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('5 1 3') == '1 3 5'\nassert solution('4 4 4') == '4 4 4'\nassert solution('5 4 3') == '3 4 5'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n') == '8.00000000'\nassert solution('buy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\n') == '4.00000000'\nassert solution('buy 1 2\\nbuy 1 2\\nbuy 1 2\\nsell 1 5\\nsell 1 5\\n') == '10.00000000'\nassert solution('sell 1 2\\nsell 1 2\\nsell 1 2\\nbuy 1 2\\nbuy 1 2\\n') == '4.00000000'\nassert solution('buy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\nbuy 1 2\\n') == '2.00000000'\n"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nbuy 1 15\nsell 1 5\ndie 4\n\"\"\") == \"8.00000000\"\n\nassert solution(\"\"\"\nbuy 1 15\nsell 1 5\nmerge 3\ndie 4\n\"\"\") == \"11.00000000\"\n\nassert solution(\"\"\"\nbuy 1 15\nsell 1 5\nbuy 2 10\nmerge 3\ndie 4\n\"\"\") == \"11.00000000\"\n\nassert solution(\"\"\"\nbuy 1 15\nsell 1 5\nsell 4 5\nmerge 3\nsell 2 10\ndie 4\n\"\"\") == \"15.00000000\"\n\nassert solution(\"\"\"\nbuy 1 15\nsell 1 5\nsell 4 5\nmerge 3\nsell 2 10\nmerge 4\nsell 2 10\ndie 4\n\"\"\") == \"21.00000000\""
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nbuy 1 15\nsell 1 5\nsell 1 6\nsplit 3\ndie 4\n\"\"\") == \"8.00000000\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nbuy 1 5\nsell 1 5\nbuy 1 2\nsell 1 8\nbuy 1 9\nsplit 4\n\"\"\") == \"2.7500000000000001\"\nassert solution(\"\"\"\nbuy 2 10\nsell 3 1\nbuy 1 5\nsell 1 6\nsell 1 3\nbuy 1 3\nbuy 1 4\nbuy 1 1\nsplit 4\n\"\"\") == \"6.50000000284700855\"\nassert solution(\"\"\"\nbuy 3 2\nsell 2 6\nbuy 4 2\nsell 3 6\nsell 1 2\nbuy 4 1\nsell 4 1\nbuy 6 8\nsell 6 6\nsell 4 2\nsell 1 1\nbuy 7 1\nsell 7 4\n\"\"\") == \"7.50000000284700855\""
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('buy 1 15\\nbuy 3\\nsell 1 5\\ndie 4') == '8.00000000'\n"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('buy 1 15') == '8.0'\nassert solution('split 3') == '2.5'\nassert solution('sell 1 5') == '7.0'\nassert solution('die 4') == '1.5'\nprint(solution(input()))"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"8.00000000\""
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n\"\"\") == \"8.00000000\"\nassert solution(\"\"\"\nbuy 1 10\nsplit 2\nsell 1 5\ndie 5\n\"\"\") == \"7.50000000000000004\"\nassert solution(\"\"\"\nbuy 4 10\nsplit 2\nsell 1 5\ndie 6\n\"\"\") == \"5.900000000000001\"\nassert solution(\"\"\"\nbuy 2 10\nsplit 2\nsell 2 5\ndie 3\n\"\"\") == \"3.5000000000000005\"\nassert solution(\"\"\"\nbuy 1 9\nsplit 2\nsell 1 5\ndie 6\n\"\"\") == \"1.9000000000000011\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\nbuy 1\nbuy 1\nbuy 1\nbuy 1\nbuy 1\nsell 1\nbuy 1\nsell 1\nsell 1\ndie 1\ndie 1\ndie 1\ndie 1\ndie 1\n\"\"\") == \"5.00000000\"\nassert solution(\"\"\"\nbuy 10\nbuy 20\nbuy 10\nsell 20\nbuy 10\nsell 10\nbuy 10\nsell 10\nsell 10\ndie 10\nsell 10\n\"\"\") == \"40.00000000\"\nassert solution(\"\"\"\nbuy 1\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10\nsell 10"
    },
    {
        "number": 4982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    buy 1 15\n    split 3\n    sell 1 5\n    die 4\n    \"\"\") == \"8.00000000\"\n    \"\"\"\nSample Input:\n    buy 1 15\n    split 3\n    sell 1 5\n    die 4\n    buy 1 5\n    sell 1 5\n    \"\"\"\n    \"\"\"\nSample Output:\n    7.995945\n    \"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('808') == '8'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"8\") == \"2\""
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n''') == '4'\nassert solution('''\n15\n''') == '1'\nassert solution('''\n123\n''') == '3'\nassert solution('''\n937\n''') == '9'\nassert solution('''\n1009\n''') == '3'\n"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n800\n''') == '8'\nassert solution('''\n7\n''') == '2'\nassert solution('''\n1\n''') == '1'\n''')"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8''') == '8'\nassert solution('''64''') == '2'\nassert solution('''6''') == '2'\nassert solution('''2''') == '2'"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('808') == '8'\nassert solution('1') == '1'\nassert solution('123789') == '7'\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"8\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == \"0\"\nassert solution(\"6 5\\nWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWW\\nWWWWWWWWWWWWWW\") == \"1\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 1') == '0'\nassert solution('LWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCWLCW"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\nC\nC\nC\nC\nC\n''') == '0'\nassert solution('''4\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n''') == '4'\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\\\n4 5\nCCCC\nCCCC\nCCCC\nCCCC\"\"\") == \"0\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2\nLCC\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\nLLC\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4\nCCC\nCCC\nCCL\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4\nCCCC\nCCCC\nCCCC\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\nL\n1\n\n''') == '1', 'First'\n\nassert solution('''\n3\nLCCCC\nCCCC\nCCCC\nCCCC\nSample Output:\n4\n''') == '4', 'Second'\n\nassert solution('''\n3\nCCCC\nCCCC\nCCCC\n''') == '1', 'Third'\n\nassert solution('''\n1\nLL\nSample Output:\n2\n''') == '1', 'Fourth'\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n1\\n') == 1\nassert solution('2\\n3\\n1\\n3\\n1\\n') == 1\nassert solution('2\\n3\\n2\\n3\\n1\\n') == 2\nassert solution('1\\n2\\n1\\n1\\n') == 1\nassert solution('3\\n3\\n1\\n3\\n1\\n') == 1\n"
    },
    {
        "number": 4984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\nLCCCC\nLLCCCC\nLLCCCC\nCCCCCC\nCCCCCC\n''') == '4'\n"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 S\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"60\""
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 S\") == \"6\"\nassert solution(\"4 D\") == \"12\"\nassert solution(\"2 D\") == \"6\"\nassert solution(\"2 H\") == \"2\"\nassert solution(\"2 S\") == \"4\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 S') == '60'\nassert solution('2 Q') == '41'\nassert solution('2 9') == '39'\n"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 S') == '3'\nassert solution('3 T') == '10'"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\n\nassert solution('''4 S\nAC\nAH\nAC\n2S\nJS''') == '42'\n\nassert solution('''100 H\n3D\nTH\n9C\n2S\n8D\nKS''') == '306'\n\nassert solution('''2 S\n9C\nJS\n9C\nKS\nQS\nJS\nJD''') == '42'\n\nassert solution('''1 S\n9C\n2S\n8D\nJS\nQS\nJD''') == '12'"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n''') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\nTH\nKS\nQS\n\n2\nTH\n\n6\nTH\nQS\nKS\nQS\n''') == '60'\n'''"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\nprint('PASSED')\n"
    },
    {
        "number": 4985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 S\") == \"60\"\nassert solution(\"TH\") == \"61\"\nassert solution(\"KS\") == \"62\"\nassert solution(\"QS\") == \"63\"\nassert solution(\"JS\") == \"64\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''this is very annoying\nthiss iss veery annoying\n''') =='se'\nassert solution('''this is very annoying\nthiss iss veery annoying\n''') =='me'\nassert solution('''this is very annoying\nthiss iss veery annoying\n''') == 'ah'"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('this is very annoying\\nthis iss veery annoying\\n') =='se'\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"very funny\") == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\nthiss iss veery annoying\n\"\"\") == \"se\"\n\"\"\"\nsolution(\"\"\"\ns\n\n\"\"\") == \"se\"\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''this is very annoying\nthiss iss veery annoying\n''') =='se'\nassert solution('''this is very annoying\nthiss iss veery annoying\nand so is this''') =='se'\nassert solution('''this is very annoying\nthiss iss veery annoying\nand so is this\n''') =='se'\nassert solution('''this is very annoying\nthiss iss veery annoying\nand so is this\nand so is this\n''') =='se'\nassert solution('''this is very annoying\nthiss iss veery annoying\nand so is this\nand so is this\n''') =='se'\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"hello world\") == \"h e l l o w o r l d\"\nassert solution(\"thisf\") == \"thi s\"\nassert solution(\"abc\") == \"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"test\") == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"this is very annoying\\nthiss iss veery annoying\") == \"se\"\n\n'''\n"
    },
    {
        "number": 4986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\n'''\nfrom collections import deque\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3 0\n0 0 1 1 2\n''') == '3'\nassert solution('''\n5 3 0\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5 3 0\n0 0 1 1 2\n''') == '3'\n''')\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 0\\n0 0 1 1 2') == '3'\nassert solution('1 2 1\\n1 2 1\\n2 2 1\\n0 0 1 1 2') == '1'\nassert solution('1 3 0\\n0 0 1 1 2\\n2 2 1\\n0 0 1 1 2') == '2'\nassert solution('5 3 0\\n0 0 1 1 2\\n0 0 1 1 2\\n2 2 1\\n0 0 1 1 2') == '1'"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 2') == '1'\nassert solution('8 3 2') == '2'\nassert solution('8 3 4') == '0'\nassert solution('8 3 3') == '0'\nassert solution('8 3 5') == '1'\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 1') == '1', 'Should be 1'\nassert solution('2 2 2') == '1', 'Should be 1'\nassert solution('10 2 10') == '3', 'Should be 3'\nassert solution('5 3 0') == '3', 'Should be 3'\nassert solution('10 5 10') == '4', 'Should be 4'\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 0') == '1'\nassert solution('2 2 0') == '2'\nassert solution('2 0 0') == '1'\nassert solution('0 0 0') == '0'\nassert solution('1 1 1 1') == '2'\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n') == \"4\"\nassert solution('1 2 3 4 5\\n6 7 8 9 10\\n') == \"2\"\nassert solution('1 2 3 4 5\\n10 1 2 3 4\\n') == \"2\"\nassert solution('1 2 3 4 5\\n5 1 2 3 4\\n') == \"1\"\nassert solution('1 2 3 4 5\\n0 1 2 3 4\\n') == \"0\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 0') == '3'\nassert solution('10 5 0') == '2'\nassert solution('5 5 10 0') == '1'\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 0\") == \"3\"\nassert solution(\"5 3 1\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 3 5\") == \"1\"\nassert solution(\"5 3 0 0 0 0 1 1 2\") == \"3\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 0\") == \"3\"\nassert solution(\"5 3 1\") == \"2\"\nassert solution(\"5 3 2\") == \"2\"\nassert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 3 4\") == \"1\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == '3'\nassert solution('2 3 1 4 0') == '4'\nassert solution('3 4 2 0 1') == '4'\nassert solution('4 2 0 3 1') == '2'\nassert solution('1') == '0'\nprint('All tests passed!')\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\") == \"3\"\nassert solution(\"1\\n3\\n10\") == \"6\"\nassert solution(\"10\\n10\\n10\") == \"1\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"6\"\nassert solution(\"6\") == \"3\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1\n2\n3''') == '1'\nassert solution('''5\n1\n2\n3\n4\n5''') == '5'\nassert solution('''1\n1\n1\n1''') == '1'\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"6\""
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('1\\n10\\n20') == '6'\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n4\") == \"6\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3') == '6'\n"
    },
    {
        "number": 4988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\"\nassert solution(\"2\\n1\\n2\") == \"2\"\nassert solution(\"3\\n1\\n2\") == \"6\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4 2'\nassert solution('3 1 2') == '4 2'\nassert solution('3 5 9 10') == '9 12'\nassert solution('10 3 8 7') == '2 3'\n"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '2 5'\nassert solution('10\\n0 1 2 3 4 5 6 7 8 9 10\\n') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('1\\n') == '1'\nassert solution('3\\n') == '3'\nprint('all tests passed')\n"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('4 1 2 3') == '3 3 3'"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n3 1 2') == '4 2'\nassert solution(\n    '4\\n4 5 6 1') == '7 6 5'\n\nNote: In python, we use int() to convert a string into a number, which is a more efficient way of doing this.\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"6\""
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '4'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"4 2\"\nassert solution(\"3 1 2\") == \"4 2\"\nassert solutionn"
    },
    {
        "number": 4989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n\") == \"4 2\"\nassert solution(\"3 1 2\\n\") == \"4 2\"\nassert solution(\"2 1 3\\n\") == \"4 2\"\nassert solution(\"2 3 1\\n\") == \"4 2\"\nassert solution(\"3 3 1\\n\") == \"4 2\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"2\"\nassert solution(\"6 2 3\") == \"2\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"6 2 3\") == \"0\"\nassert solution(\"8 2 5\") == \"3\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2 1\n''') == '2'\nassert solution('''\n10 3 4\n''') == '7'\nassert solution('''\n20 3 4\n''') == '7'\nassert solution('''\n21 3 4\n''') == '7'\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('4 3 5') == '3'\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 1') == '2'\nassert solution('5 2 1') == '3'\nassert solution('2 5 3') == '2'\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '2'\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2 1\n''') == '2'\nassert solution('''10 2 5\n''') == '5'\nassert solution('''1000 4 5\n''') == '8'\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 2 1\"\n) == \"2\"\nassert solution(\n    \"4 4 2\"\n) == \"5\"\nassert solution(\n    \"5 3 2\"\n) == \"3\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n\") == \"2\"\nassert solution(\"10 2 6\\n\") == \"4\"\nassert solution(\"10 2 10\\n\") == \"10\"\nassert solution(\"7 2 5\\n\") == \"9\"\nassert solution(\"10 3 10\\n\") == \"10\"\n\n'''\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2 1\n''') == '2'\nassert solution('''\n5 2 6\n''') == '3'\nassert solution('''\n5 2 1\n''') == '2'\nassert solution('''\n3 5 3\n''') == '1'\nassert solution('''\n10 10 4\n''') == '0'\n''') == '1'\n"
    },
    {
        "number": 4990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 1\n3\n5''') == '1'\nassert solution('''10 4 1\n10''') == '2'\nassert solution('''10 4 2\n10''') == '2'\nassert solution('''4 1 4\n4''') == '2'\nassert solution('''5 1 2\n1''') == '2'\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '36'\n\nassert solution('9') == '55'\n\nassert solution('10') == '55'\n\nassert solution('12') == '85'\n\nassert solution('15') == '63'"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '36', 'Sample Test Failed'\n\nassert solution('1') == '1', 'Sample Test Failed'\nassert solution('2') == '1', 'Sample Test Failed'\nassert solution('4') == '2', 'Sample Test Failed'\nassert solution('5') == '36', 'Sample Test Failed'\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '36'\nassert solution('1') == '1'\nassert solution('7') == '288'\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n7\n8\n3\n2\n1''') == '288'\nassert solution('''8\n5\n4\n2\n1''') == '36'"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '36'\n\n'''\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n') == '36'\nassert solution('1\\n') == '1'\nassert solution('-2\\n') == '-1'\nassert solution('-8\\n') == '-16'\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1\n'''\n) == '36'\nassert solution(\n'''\n2\n'''\n) == '1'\nassert solution(\n'''\n3\n'''\n) == '1'\nassert solution(\n'''\n4\n'''\n) == '7'\nassert solution(\n'''\n5\n'''\n) == '36'"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '36'\n\nSample Input:\n7\nSample Output:\n288\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n7\n11\n34\n17\n52\n26\n13\n40\n20\n10\n5\n16\n8\n4\n2\n1''') == '288'\n"
    },
    {
        "number": 4991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '36'\nassert solution('10') == '32'\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3 3 1') == '2 3 4 1'\nassert solution('3\\n2 4 5 1') == '3 1 2 4 5'\nprint('all tests passed')\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"5 3 2 1\") == \"2 3 4 1 5\"\nassert solution(\"4 5 2 2 1\") == \"1 3 4 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '1 2'\nassert solution('3') == '1 3'\nassert solution('4') == '1 4'\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"impossible\", \"impossible\"\nassert solution(\"2\\n2 1\") == \"2 3 4 1\", \"impossible\"\nassert solution(\"3\\n2 1 2\") == \"2 3 4 1\", \"impossible\"\nassert solution(\"5\\n2 1 2 4 5\") == \"2 3 4 5 1\", \"impossible\"\nassert solution(\"5\\n2 4 1 3 2\") == \"2 4 5 1 3\", \"impossible\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '2 3 4 1'"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 2 1 1\") == \"2 3 1 1\"\nassert solution(\"3\\n3 2 2 1\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n2\\n3\\n1') == '2 3 1'\nassert solution('3\\n2 3 1\\n3\\n1\\n2\\n3') == '2 3 1'\nassert solution('5\\n1 3 2 5\\n2 4 1 3\\n3 4 1 2\\n4 5 1 3\\n5 6 1 4') == '1 3 2 5 4 5 6'\nassert solution('7\\n1 3 5 7\\n2 4 1 3\\n3 4 1 2\\n4 5 1 3\\n5 6 1 4\\n6 7 1 5') == '1 3 2 5 4 5 6 7'\nassert solution('10\\n1 3 2 5 4 3 7 6 8 9 6 7 8 9 10\\n2 4 1 3\\n3 4 1 2\\n4 5 1 3\\n5 6 1 4\\n6 7 1 5\\n7 8 1 6\\n8 9 1 7\\n9 10 1 8\\n10 11 1 9') == '1 3 2 5 4 3 7 6 8 9 6 7 8 9 10 11'\n\n## 1-line solution:\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('1\\n3') == '3'\nassert solution('2\\n3') == '3'\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n2 3 2\n\"\"\") == \"2 3 1\"\n\nassert solution(\"\"\"4\n5 3 3 1\n\"\"\") == \"2 3 4 1\"\n\nassert solution(\"\"\"10\n10 2 5 3 4 9 8 6 7 1\n\"\"\") == \"8 6 7 9 1 2 5 3 4\"\n\nassert solution(\"\"\"10\n3 1 4 2 5 6 7 8 9\n\"\"\") == \"9 8 7 6 5 4 3 2 1\"\n\nassert solution(\"\"\"10\n2 3 4 1\n\"\"\") == \"2 3 4 1\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 3 1\\n\") == \"2 3 4 1\", 'Wrong answer'\nassert solution(\"4\\n2 3 3 1\\n\") == \"2 3 4 1\", 'Wrong answer'\nassert solution(\"5\\n2 3 3 1\\n\") == \"2 3 4 1\", 'Wrong answer'\n\n##\n\n3\n1 2 1 1\n3\n1 2 3 1\n2\n\n2\n1\n2\n1\n\n##\n\nn = int(input())\nrooms = sorted(list(map(int, input().split())))\n\nans = []\nfor i in range(n):\n    ans.append(i)\n    if i!= 0:\n        for j in range(i):\n            ans.append(j)\n    if i!= n - 1:\n        for j in range(i + 1, n):\n            ans.append(j)\n    \nprint(' '.join(str(i) for i in ans))\n\n##\n\n2\n2\n1 2\n3\n1 2 3\n\n##\n\n1\n1\n2\n3\n\n##\n\n2\n3\n3\n3\n\n##\n\n3\n1 2 1 1\n2 3 3 1\n1 2 3 1\n\n##\n\n2\n1\n2\n1\n\n##\n\n2\n1\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n1\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n1\n1\n2\n\n##\n\n1\n1\n2\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n\n##\n\n2\n1\n1\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nassert solution('5 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\nSample Input: \\n3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\nsolution('')\n''\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"3\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\n') == '4'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\n') == '4'\nassert solution('5 3\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\n') == '3'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\\n') == '1'\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '9'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14') == '13'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17') == '17'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19') == '18'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23') == '23'\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nassert solution('''1\n1\n1\n1''') == '2'\nassert solution('''1\n1\n2\n1''') == '2'\n'''\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5\\nleft_oar') == '4'\nassert solution('2 5\\nleft_oar left_oar') == '5'\nassert solution('3 5\\nleft_oar left_oar left_oar') == '0'\nassert solution('4 5\\nleft_oar left_oar left_oar hull') == '4'\nassert solution('5 5\\nleft_oar left_oar left_oar right_oar') == '1'\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\nhull\nhull\nhull\n''') == '4'\nassert solution('''\n2\nleft_oar\nhull\nright_oar\n''') == '3'\nassert solution('''\n3\nright_oar\nhull\nleft_oar\n''') == '1'\nassert solution('''\n6\nleft_oar\nright_oar\nhull\nleft_oar\nhull\nright_oar\n''') == '6'\nassert solution('''\n2\nright_oar\nleft_oar\n''') == '2'\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '4'\nassert solution('2 5') == '4'\nassert solution('3 2') == '1'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2 5\nhull\nleft_oar\nright_oar\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6 5\nright_oar\nleft_oar\nleft_oar\nhull\nright_oar\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 1\nhull\nleft_oar\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5\nhull\nright_oar\n\"\"\") == \"0\""
    },
    {
        "number": 4993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''left_oar\nright_oar\nleft_oar\nhull\nright_oar\n''') == '4'\nassert solution('''3\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\n''') == '5'\n'''\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\n5 7\\n7 5\\n') == '7 7'\nassert solution('1\\n1 2\\n1 3 4\\n') == '4 4'\nassert solution('5 7\\n5 7\\n7 5\\n') == '7 7'\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('1 1\\n1 2\\n2 1') == '1 1'\nassert solution('0 0\\n1 2\\n2 2') == '1 2'\nassert solution('1 1\\n2 2\\n2 2') == '2 2'\nassert solution('1 2\\n1 2\\n2 2') == '1 2'\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"7 7\"\nassert solution(\"1 2 3 4 5 2\") == \"7 7\"\nassert solution(\"1 2 3 4 5 1\") == \"7 7\"\nassert solution(\"1 2 3 4 5 1 6\") == \"7 7\"\nassert solution(\"1 2 3 4 5 1 2\") == \"7 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2 2'\nassert solution('5 5') == '5 5'\nassert solution('7 5') == '7 7'\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('4 4') == '4 4'\nassert solution('5 5') == '5 5'\nassert solution('5 7') == '7 5'\nassert solution('7 5') == '7 7'\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"7 7\"\nassert solution(\"10 20\") == \"40 40\"\nassert solution(\"2 2\") == \"2 2\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n5 5\\n5 7\\n7 5\\n\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n\") == \"5 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n\") == \"5 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n\") == \"5 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n\") == \"5 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '7 7'"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n5 7\") == \"7 7\"\nassert solution(\"3 5\\n10 10\") == \"10 10\"\nassert solution(\"4 5\\n5 10\") == \"10 10\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '7 7'\nassert solution('5 5\\n7 4\\n2 5\\n6 6\\n4 5') == '7 7'\nassert solution('5 5\\n7 4\\n2 5\\n6 6\\n1 1') == '7 7'\nassert solution('6 6\\n1 2\\n4 4\\n2 4\\n5 6\\n2 5') == '7 7'\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\nassert solution('2\\n1 61\\n10 30') == '1.0'\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1 61\n''') == '1.016666667'\nassert solution('''\n2\n1 60\n''') == '1.000000000'\nassert solution('''\n3\n1 90\n''') == '1.000000000'\nassert solution('''\n4\n1 9\n''') == '1.000000000'\nassert solution('''\n5\n1 0\n''') == '1.000000000'\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 61\\n') == \"1.016666667\"\nassert solution('2\\n2 26\\n') == \"1.594444444\"\nassert solution('3\\n3 26\\n') == \"1.25\"\nassert solution('4\\n4 36\\n') == \"2.0\"\nassert solution('5\\n5 36\\n') == \"0.0\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1 61\\n') == '1.016666667', \"Sample Test Case\"\nassert solution('2\\n1 61\\n') == '1.016666667', \"Sample Test Case\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1.016666667\"\nassert solution(\"1 1\") == \"1.1\"\nassert solution(\"1 1\\n1 2\") == \"1.2\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1 61\n''') == '1.016666667', \"First\"\nassert solution('''\n3\n1 61\n5 66\n1 23\n''') == '1.234166666666', \"Second\"\nassert solution('''\n20\n1 1\n999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n99999999999999999\n999999999999"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1.016666667'\nassert solution('2') =='measurement error'"
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1.016666667\"\nassert solution(\"5 1 9\\n1 2 5\\n2 3 8\\n3 4 9\\n4 5 10\\n\") == \"1.57\""
    },
    {
        "number": 4995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1 61') == \"1.016666667\", \"Your solution is not correct!\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('A-5B-3C-D-9E-1F-AAA-BBBBBBBBBBB') == 'MY-NAME-IS-A-CHILD-OF-LORENZ-FRUIT-FACTORY-PATIENT'\n"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('CPMCRYY','ALBERTA') == 'CALGARY'\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\",\"ALBERTA\") == \"CALGARY\""
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\"\nassert solution(\"CCBBBAA\\nFABDZIO\") == \"ABCDEFGH\"\nassert solution(\"CDBCAB\\nCDEFGHI\") == \"CDEFGHI\"\nassert solution(\"CBDCDAA\\nEAFDZIO\") == \"EFGHEI\"\nassert solution(\"EBABABA\\nQABDBAD\") == \"BABCAB\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\",\"ALBERTA\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    'CPMCRYY', 'ALBERTA'\n) == 'CALGARY'\n"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input) == sample_output"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CPMCRYY','ALBERTA') == 'CALGARY'"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nCPMCRYY\nALBERTA\n''') == 'CALGARY'\n"
    },
    {
        "number": 4996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('CPMCRYY', 'ALBERTA') == 'CALGARY'\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('AB') == '3'\nassert solution('ABB') == '2'\nassert solution('CBA') == '1'\nassert solution('CAB') == '2'\nassert solution('CBAB') == '1'\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nAB\nAB\nAB\nAC\n\nA\nB\nC\n''') == \"1\"\n\nassert solution('''\nBC\n\nA\nB\nC\n\n''') == \"1\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AB') == '3'\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AB') == '3'\nassert solution('ABB') == '2'\nassert solution('ABCC') == '3'\nassert solution('ABCCC') == '2'\nassert solution('ABCD') == '2'\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''A\nAB\nBA\nCAB\nBA''') == '1'\nassert solution('''BB\nBAC\nBCA\nBACA\nBABC\nBCBC\nBACB\nBCBA\nBCBC''') == '3'\nassert solution('''CAB\nCAB\nBCC\nCAB\nBC''') == '2'\nassert solution('''CBB\nCAC\nCABA\nBABC\nCBB''') == '2'\nassert solution('''AB\nAB\nAC''') == '1'\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AB') == '3'\nassert solution('BA') == '2'\nassert solution('CA') == '1'\n\n'''"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AB') == '3'\nassert solution('BA') == '2'\nassert solution('CB') == '1'\nassert solution('BB') == '1'\nassert solution('ABC') == '1'"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nSample Input:\nACDCB\nSample Output:\n4\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CB\") == \"2\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"CBA\") == \"3\"\nassert solution(\"ABA\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nB\nAB\nAC\nAD\nBC\nCA\n''') == \"2\"\n\nassert solution('''\nAB\nBC\nCD\n''') == \"3\"\n\nassert solution('''\nAB\nBD\nBA\n''') == \"1\"\n\nassert solution('''\nAC\nAB\nAD\nBC\nCC\nDD\n''') == \"2\"\n\nassert solution('''\nA\nAB\nAC\n''') == \"2\""
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\n\nassert solution('5 5 5 5') == '10'\n\nassert solution('0 0 0 0') == '0'\n\nassert solution('100 100 100 100') == '100'\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\""
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\n----Hints----\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"2 2 3 4 5\") == \"3\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 3 5 2\") == \"5\"\nassert solution(\"1 2 3 4 5\") == \"10\"\nassert solution(\"4 4 4 4 4\") == \"8\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 2\") == \"3\"\nassert solution(\"1 2 1 2\") == \"3\"\nassert solution(\"1 2 1 2 1 2 2 3 4\") == \"4\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 2') == '0'\nassert solution('1 3 2 2') == '2'\nassert solution('1 3 3 3') == '3'\nassert solution('2 2 2 2') == '0'\n"
    },
    {
        "number": 4998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 1 1 1') == '1'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 1 1') == '1'\nassert solution('1 1 2 1') == '2'\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"103 27\") == \"4\"\nassert solution(\"18 30\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"103 27\") == \"4\""
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n4') == '2', \"First\"\nassert solution('4\\n16') == '2', \"Second\"\nassert solution('16\\n64') == '3', \"Third\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"4\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 3\") == \"2\"\nassert solution(\"12 4\") == \"2\"\nassert solution(\"1 9\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\nassert solution('''\n89 472 858\n''') == \"1\"\nassert solution('''\n2\n1\n''') == \"1\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n        \"2 3\\n\"\n        \"1 1\\n\"\n        \"1 1\\n\"\n        \"1 1\\n\"\n        \"0\") == \"1\"\n\nassert solution(\n        \"10 4\\n\"\n        \"3 1\\n\"\n        \"5 1\\n\"\n        \"5 1\\n\"\n        \"0\") == \"0\"\n\nassert solution(\n        \"5 9\\n\"\n        \"4 2\\n\"\n        \"8 5\\n\"\n        \"8 5\\n\"\n        \"1\") == \"5\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('80 70') == '2'\nassert solution('153 119') == '2'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\n\n'''"
    },
    {
        "number": 4999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 5') == '4'\nassert solution('10 7') == '3'\n"
    }
]