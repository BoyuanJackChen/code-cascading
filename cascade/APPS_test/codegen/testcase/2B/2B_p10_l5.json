[
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\nassert solution('1 2') == '1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5 1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n4 6\n''') == '5'\nassert solution('''\n3\n1 2\n2 3\n3 4\n''') == '3'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '3'\nassert solution('''\n2\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''\n1\n1 2\n2 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5'\nassert solution('''10\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n5 7\n6 7\n6 8''') == '8'\nprint('all test cases passed')\n\n\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '5'\nassert solution('''\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '1 8 6'\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '1 8 6'\n'''\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == \"5\"\nassert solution('''\n3\n1 2\n2 3\n3 4\n''') == \"1 4\"\nassert solution('''\n3\n1 2\n2 3\n3 4\n''') == \"2 3\""
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5 1 8 6'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5 1 8 6'"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n3 4\") == \"1 8 6\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\\n4 5 6\\n5 4 6\\n4 6\") == \"1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n') == '5 1 8 6'\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"20 8\""
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"20 8\""
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\nassert solution('''\n100\n10 2 8 1 2 4 1 20 4 5''') == '100 10'\nassert solution('''\n1000\n10 2 8 1 2 4 1 20 4 5''') == '1000 100'\n\n'''))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\"\"\") == \"2 1\"\nassert solution(\"\"\"\n2\n1\"\"\") == \"1 1\"\nassert solution(\"\"\"\n3\n1 2 3\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n4\n1 1 2 2\"\"\") == \"2 1\"\nassert solution(\"\"\"\n5\n1 1 3 1 2\"\"\") == \"1 1 3 1 2\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n6 6 6') == '6 6'\nassert solution('5\\n5 5 5 5 5') == '5 5'\nassert solution('4\\n3 3 3 3') == '3 3'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n10 2\\n10 2\\n10 4\\n20 4') == '2 20'\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 8 1 2 4 1 20 4 5''') == '20 8'\n\nassert solution('''\n10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\nassert solution('''\n20\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\nassert solution('''\n8\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n\nassert solution('''\n4\n8 10 2 8 1 2 4 1 20 4 5''') == '8 10'"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == \"56\"\nassert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n''') == \"24\"\nassert solution('''\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n''') == \"56\"\nassert solution('''\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n''') == \"216\"\nassert solution('''\n2 3 2\n2 2 1 2\n2 1 2 1\n''') == \"1\"\nassert solution('''\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n''') == \"16\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 4') == '56'\nassert solution('6 2 1') == '2'\nassert solution('3 3 4') == '24'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5 4') == '56'\nassert solution('2 2 4') == '2'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == \"56\""
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''') == '56'\nassert solution('''3 3 3\n2 5 3 2 1\n4 4 5 4 1\n1 2 3 3''') == '17'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n''') == \"24\"\n\nassert solution('''\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n''') == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\") == \"24\"\nassert solution(\"5 5 4\") == \"56\"\nassert solution(\"15 5 7 7 1 1 2 2 3 3\") == \"36\"\nassert solution(\"1000000000 50000500 1000000000 0\") == \"0\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"6\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nans = 0\n\nfor i in range(n):\n    min_ind = i\n    for j in range(i, n):\n        if a[j] < a[min_ind]:\n            min_ind = j\n    a[i], a[min_ind] = a[min_ind], a[i]\n    ans += 1\n\nprint(ans)\nprint(' '.join(map(str, a)))\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 4 3 2''') == '4'\nassert solution('''7\n1 3 5 6 5 4 2''') == '6'\nassert solution('''3\n2 2 2''') == '1'\nassert solution('''4\n1 2 4 3''') == '4'"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 4 3 2\n''') == \"4\"\nassert solution('''\n7\n1 3 5 6 5 4 2\n''') == \"6\"\nassert solution('''\n3\n2 2 2\n''') == \"1\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_str) == output_str"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nRRRR'\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nRRRLRRRL'\nassert solution('3\\n2 2 2\\n') == '1\\nR'\nassert solution('4\\n1 2 4 3\\n') == '3\\nLLRR'\n\n\"\"\"\n\nfrom bisect import bisect_left, bisect_right\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 2 1\n''') == '3'\nassert solution('''2\n2 2 1\n''') == '2'"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nRRLRRR'\n\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nRLRRRRLRR'\n\nassert solution('4\\n2 2 2') == '1'\n\nassert solution('3\\n2 2 2') == '1\\nRR'\n\nassert solution('2\\n1 1') == '1\\nR'"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"3\\n2 2 2\") == \"1\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('7') == '6'\nassert solution('3') == '1'\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == \"LRRR\"\nassert solution('7') == \"LRLRRR\"\nassert solution('4') == \"LLRR\"\nassert solution('5') == \"LLRR\"\n\n\n\n'''\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '3'\n\nassert solution('''\n5\n1 2 5 2 5\n''') == '3'\n\nassert solution('''\n3\n1 2 4\n''') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n4\n1 3 4 5\n''') == '-1'\nassert solution('''\n6\n2 8 4 7 4 1\n''') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4 4 7 4 1') == '3'\nassert solution('2 2 5 2 5') == '3'\nassert solution('5 2 2 5 2 5') == '3'\nassert solution('1 3 2 4 5') == '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 4 4 7 4 1\n''') == '3'\n\nassert solution('''\n5\n2 8\n''') == '-1'\n\nassert solution('''\n4\n1 3 3 7\n''') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 4 7 8 5\n''') == '3'\n\nassert solution('''\n4\n2 2 5 2 5\n''') == '3'\n\nassert solution('''\n5\n1 3 5 6 9\n''') == '-1'\n\nassert solution('''\n3\n1 3 5 6\n''') == '-1'\n\nassert solution('''\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 4 4 7 4 1\n''') == '3', \"Wrong\"\nassert solution('''\n5 2 5 2 5\n''') == '3', \"Wrong\"\nassert solution('''\n5\n5 5 5 5\n''') == '-1', \"Wrong\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\\n\") == \"3\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"-1\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 4 4\n1 1 3 5\n3 1 5 5\n''') == 'NO'\nassert solution('''\n3 3 7 5\n0 0 4 6\n0 0 7 4\n''') == 'YES'\nassert solution('''\n5 2 10 5\n3 1 7 6\n8 1 11 7\n''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 4 4\n1 1 3 5\n3 1 5 5\n''') == 'NO'\nassert solution('''\n5 2 10 5\n3 1 7 6\n8 1 11 7\n''') == 'YES'\nassert solution('''\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\n\n\"\"\"\n\n\nimport math\nimport unittest"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 4 4') == 'NO'\nassert solution('1 1 3 5') == 'YES'\nassert solution('3 1 5 5') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 4 4\n1 1 3 5\n3 1 5 5\n''') == 'NO'\n\nassert solution('''\n3 3 7 5\n0 0 4 6\n0 0 7 4\n''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"3 3 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '1\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('4\\n') == '2\\n'\nassert solution('10\\n') == '20\\n'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\""
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"20\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\nassert solution('1') == '1'"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1098\") == \"20\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1009\n''') == \"20\"\nassert solution('''\n10\n''') == \"19\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1 0 0\") == \"1 2 4 5 3\"\nassert solution(\"5 2 0 0 2 4\") == \"5 2 3 1 4\"\nassert solution(\"5 4 0 0 2 4\") == \"5 2 4 3 1\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\") == \"7\""
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n5 0 0 2 4\n''') == '5 3 1 2 4'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n5 0 0 2 4\n''') == '5 3 1 2 4'\nassert solution('''\n7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\nassert solution('''\n7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3 5 4 7 6'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7 3 2 1 4 5 6'\nassert solution() == '2 3 4 5 6 7'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3 1 2 4 5'\nassert solution('7') == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n5 0 0 2 4\n''') == '5 3 1 2 4'\nassert solution('''3\n5 0 0 2 4\n''') == '5 3 1 2 4'\nassert solution('''6\n3 3 3 3 1 3\n''') == '3 3 3 3 1 3'\n\nassert solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\n\nassert solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n5 0 0 2 4\n\"\"\") == \"5 3 1 2 4\"\nassert solution(\"\"\"\n7\n7 0 0 1 4 0 6\n\"\"\") == \"7 3 2 1 4 5 6\"\nassert solution(\"\"\"\n5\n2 1 0 0 0\n\"\"\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\") == \"5\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n3 2 1 2 3\n''') == 'YES'\nassert solution('''5 2\n2 1 1 2 1\n''') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"10 2\") == \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == \"YES\"\nassert solution(input_2) == \"YES\"\nassert solution(input_3) == \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"6 2\") == \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n1 2 2 3\n''') == 'YES'\nassert solution('''\n5 2\n3 2 1 2 3\n''') == 'YES'\nassert solution('''\n5 2\n2 1 1 2 1\n''') == 'NO'\n''')"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"1 2 1 2 3\") == \"YES\"\nassert solution(\"5 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == 'YES 1 1'\nassert solution('5 2') == 'YES 2 1 1 2 1'"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 5 2\n11010100101\n''') == '1'\nassert solution('''\n11 5 1\n11010100101\n''') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\nassert solution('''11 5 1\n11010100101''') == '3'"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''11 5 2\n11010100101''') == \"1\"\nassert solution('''11 5 1\n11010100101''') == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\nassert solution('''11 5 1\n11010100101''') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 2\") == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"11 5 2\n11010100101\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"11 5 1\n11010100101\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 2 1\\n\"\n    \"5\\n\"\n    \"1 2 2 3 2\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n    ) == \"YES\"\n\nassert solution(\n    \"3\\n\"\n    \"3\\n\"\n    \"1 2 1\\n\"\n    \"5\\n\"\n    \"1 2 2 3 2\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n    ) == \"NO\"\n\nassert solution(\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n    ) == \"YES\"\n\nassert solution(\n    \"5\\n\"\n    \"1 2 2 1\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n    ) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'YES\\nYES\\nNO\\nYES\\nNO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 2 1\\n\"\n    \"5\\n\"\n    \"1 2 2 3 2\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n) == \"YES\"\nassert solution(\n    \"3\\n\"\n    \"1 2 1\\n\"\n    \"5\\n\"\n    \"1 2 2 3 2\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n) == \"NO\"\nassert solution(\n    \"2\\n\"\n    \"1 2 1\\n\"\n    \"5\\n\"\n    \"1 2 2 3 2\\n\"\n    \"3\\n\"\n    \"1 1 2\\n\"\n    \"4\\n\"\n    \"1 2 2 1\\n\"\n    \"10\\n\"\n    \"1 1 2 2 3 3 4 4 5 5\\n\"\n) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3\n2 1 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n3\n2 1 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3\n5\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'YES\\nYES\\nYES\\nYES\\nYES'\nassert solution('''1\n3\n5\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5''') == 'NO\\nNO\\nYES\\nYES\\nYES'\nassert solution('''2\n3\n3\n1 1 2\n3\n1 1 2''') == 'NO\\nYES\\nYES'''\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"YES\"\nassert solution(solution.__annotations__) == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES\\nYES\\nNO\\nNO\\nNO'"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('5\\n4\\n1 2 1 1 2\\n5\\n1 2 2 2 3 2') == 'NO'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2') == 'NO'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 1') == 'YES'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '1553'"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1337\\n1 2 5 4 6 6 3 1 9') == '1557'\nassert solution('5\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"2\") == \"22\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"12345678\") == \"12345678\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '1555'\nassert solution('5') == '99999'\nassert solution('2') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '99999'\nassert solution('''\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1553'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2 5 4 6 6 3 1 9\") == \"1557\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1337\n1 2 5 4 6 6 3 1 9''') == '1553'\nassert solution('''5\n11111\n9 8 7 6 5 4 3 2 1''') == '99999'\nassert solution('''2\n33\n1 1 1 1 1 1 1 1 1''') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1337\\n1 2 5 4 6 6 3 1 9\\n') == '1553'\nassert solution('5\\n11111\\n9 8 7 6 5 4 3 2 1\\n') == '99999'\nassert solution('10\\n4321\\n1 1 1 1 1 1 1 1 1 1\\n') == '4321'\nassert solution('100\\n3333\\n1 1 1 1 1 1 1 1 1 1\\n') == '3333'\nassert solution('1000000\\n1 1 1 1 1 1 1 1 1 1 1\\n') == '1000000'\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n12\n8 4 7 6 5 4 3 2 1\n''') == '1557'\nassert solution('''\n2\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999'\nassert solution('''\n2\n2 2 2 2 2 2 2 2 2 2\n''') == '4'\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 2\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"102\"\nassert solution(\"5 10 15\") == \"4\"\nassert solution(\"15 18 21\") == \"1 1 3\"\nassert solution(\"100 100 101\") == \"7\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    1 2 3\n    123 321 456\n    5 10 15\n    15 18 21\n    100 100 101\n    1 22 29\n    3 19 38\n    6 30 46\n    ''') == '1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n'''\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '3 1 1 3', solution('''')\n\nassert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '1 1 1 1', solution('''')\n\nassert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '6 2 8 4', solution('''')\n\nassert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '1 6 2 8 4', solution('''')\n\nassert solution('''\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '0 1 1 3', solution('''')"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n2\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n3\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n4\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n5\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\") == \"1 1 1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1 1 3'\nassert solution('123 321 456') == '1 1 1 3'\nassert solution('5 10 15') == '4 4 4 4'\nassert solution('15 18 21') == '10 4 4 4'\nassert solution('100 100 101') == '9 9 9 9'\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"102\"\nassert solution(\"5 10 15\") == \"114 228 456\"\nassert solution(\"15 18 21\") == \"1 1 3\"\nassert solution(\"100 100 101\") == \"7\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '1 1 3'\nassert solution('''\n3\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '102'\n'''\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n''') == '1 1 3'\nassert solution('''\n2\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n''') == '1 1 1'\nassert solution('''\n1\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n''') == '1 1 1'\nassert solution('''\n2\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n''') == '2 2 2'\nassert solution('''\n3\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n''') == '2 2 2'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 3\n7\n''') == '2'\n\nassert solution('''\n2\n1 100000\n''') == '0'\n\nprint(solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n'''))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 100000') == '0'\nassert solution('4\\n1 3 3 7') == '2'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 3 3 7\n''') == '2'\nassert solution('''\n2\n1 100000\n''') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 3 3 7\n''') == '2'\nassert solution('''2\n1 100000\n''') == '0'"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([1, 3, 3, 7]) == 2\nassert solution([1, 100000, 3, 7]) == 0\n\nstdin = \"\"\"\n4\n1 3 3 7\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('8') == '0'\nassert solution('4') == '3'\nassert solution('3') == '1'"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 3 3 7\n''') == '2'\n\nassert solution('''\n2\n1 100000\n''') == '0'"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 3 3 7\n\n''') == '2'\nassert solution('''\n2\n1 100000\n\n''') == '0'\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3 \nassert solution('''3 2\n1 3 1\n1 2 1\n''') == '-1\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1\n''') == '2 2 2 1 1 0 4 3 4 4 \n'''\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3'\n\nassert solution('''3 2\n1 3 1\n1 2 1\n''') == '-1'\n\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1\n''') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_lines) == '1 2 3 0 3', 'Should be 1 2 3 0 3'\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3'\n\nassert solution('''3 2\n1 3 1\n1 2 1\n''') == '-1'\n\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1\n''') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n1 10 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\n    \"3 2\\n1 3 1\\n1 2 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == stdout_"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == \"1 2 3 0 3\"\nassert solution('3 2') == \"-1\"\nassert solution('10 3') == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(input_string) == \"1 2 1 1 0 4 3 4\"\nassert solution(input_string) == \"1 2 1 1 0 4 3 4\""
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 3 0 3'\nassert solution('5 2') == '1 2 3 0 3'\nassert solution('10 3') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('120 51840\\n') == '7'\nassert solution('42 42\\n') == '0'\nassert solution('48 72\\n') == '-1'"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''120 51840\n42 42\n48 72''') == '7'\nassert solution('''48 72\n42 42''') == '0'\nassert solution('''72 72\n42 42''') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n120 51840\n''') == '7'\n\nassert solution('''\n42 42\n''') == '0'\n\nassert solution('''\n48 72\n''') == '-1'\n\nassert solution('''\n25920 51840\n''') == '7'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''120 51840\n42 42''') == '7'\nassert solution('''48 72''') == '0'\nassert solution('''48 72''') == '-1'\n\n\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''120 51840''') == '7'\nassert solution('''42 42''') == '0'\nassert solution('''48 72''') == '-1'"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"7\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\\n\") == \"7\"\nassert solution(\"42 42\\n\") == \"0\"\nassert solution(\"48 72\\n\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n'''\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\naba\n''') == 'ababababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'ababababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"ababababa\"\nassert solution(input()) == \"catcat\""
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == 'catcat'"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\naba\") == \"ababababa\"\nassert solution(\"3 2\\ncat\") == \"catcat\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin := '3 4\\naba\\n') == 'ababababa'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"ababababa\"\nassert solution(\"a\" * 10) == \"a\" * 10\nassert solution(\"ab\" * 100) == \"ab\" * 100\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'abc'\nassert solution('2 1') == 'ab'\nassert solution('2 4') == 'abc'\nassert solution('3 3') == 'abc'\nassert solution('3 1') == 'ab'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 4\\n'\n    'aba'\n) == 'ababababa'\nassert solution(\n    '3 2\\n'\n    'cat'\n) == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nba\n''') == 'ba'\nassert solution('''6\nbaa\n''') == 'baa'\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"0\""
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\"\nassert solution(\"4\\n8 3 5 2\") == \"2\"\nassert solution(\"3\\n2 1 2 4 3\") == \"0\""
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\nassert solution(input(2)) == '1'\nassert solution(input(4)) == '0'\nassert solution(input(6)) == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n2 5 1 2 2\n''') == '3'\nassert solution('''4\n8 3 5 2\n''') == '2'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\nprint('\"Run\" is good, remember!')"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"2\\n4 1 5\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n5\n2 5 1 2 2\n''') == '3'\nassert solution(\n'''\n4\n8 3 5 2\n''') == '2'\nassert solution(\n'''\n5\n2 1 2 4 3\n''') == '0'\nassert solution(\n'''\n5\n2 1 2 4 3\n''') == '0'\nassert solution(\n'''\n5\n2 1 2 4 3\n''') == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1, 4'\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '0'\nassert solution('2') == '1'"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 3 4 5 6 7\") == \"7\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"2\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 5 1 2 2\n''') == '3'\n\nassert solution('''\n4\n8 3 5 2\n''') == '2'\n\nassert solution('''\n5\n2 1 2 4 3\n''') == '0'"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\nabaca\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'\nassert solution('4 5') == '-1'\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"15\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"10 100\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n\") == \"4\"\nassert solution(\"5 6\\n\") == \"15\"\nassert solution(\"10 100\\n\") == \"233\"\nassert solution(\"0 0\\n\") == \"-1\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\naaaa\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nwords = input()"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '-1'\nassert solution('4') == '4'\nassert solution('5') == '15'\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 4\nassert solution(input()) == -1"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"10 100\") == \"233\""
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5\nasdf\n''') == '4'\nassert solution('''5 6\naaaaa\n''') == '15'\nassert solution('''10 100\najihiushda\n''') == '233'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 1') == 'YES'\nassert solution('4 5 1') == 'YES'\nassert solution('4 4 3') == 'YES'\nassert solution('4 4 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1()) == \"YES\"\nassert solution(input_2()) == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 1') == 'YES'\nassert solution('4 5 3') == 'YES'\nassert solution('4 4 3') == 'NO'\nassert solution('4 5 2') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES'\nassert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES'\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES'\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\") == \"YES\\n1 2\\n1 3\\n4 1\"\nassert solution(\"4 4 3\") == \"NO\"\nassert solution(\"6 6 5\") == \"YES\\n1 2\\n1 3\\n2 4\\n3 5\\n4 5\\n5 6\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES'\nassert solution('''\n4 5 3\n1 2\n1 4\n2 3\n3 4\n''') == 'YES'\nassert solution('''\n4 4 3\n1 2\n1 4\n2 3\n3 4\n''') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\"\nassert solution(\"5 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\"\nassert solution(\"5 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10:00\n11:00\n\n''') == '10:30'\n\nassert solution('''\n11:10\n11:12\n\n''') == '11:11'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:30'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '02:02'"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"10:30\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\""
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10:00\n11:00\n''') == '10:30'\nassert solution('''\n11:10\n11:12\n''') == '11:11'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nassert solution('123') == '123'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '1'"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"42\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1\") == \"1\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n\"\"\"\n\na = int(input())\n\nfor i in range(1, a + 1):\n    for j in range(1, i):\n        print(j, end=\" \")\n    print(i)\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nprint('Congratulations!')\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n0\n''') == '0'"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '1'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 3\n2 6\n0 4\n3 3\n''') == '1'\n\nassert solution('''\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2'\n\nassert solution('''\n3\n4 5\n1 2\n9 20\n''') == '0'\n\nassert solution('''\n2\n3 10\n1 5\n''') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('6') == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3') == '1'\nassert solution('5\\n2 6') == '2'\nassert solution('3\\n4 5') == '0'\nassert solution('2\\n3 10') == '7'\n\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\n1 3\n2 6\n0 4\n3 3\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n2\n3 10\n1 5\n\"\"\"\n) == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n1 3') == '1'\nassert solution('5\\n2 6') == '1'\nassert solution('3\\n4 5') == '2'\nassert solution('2\\n3 10') == '7'\nassert solution('5\\n1 20') == '2'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 3\n2 6\n0 4\n3 3\n''') == '1'\n\nassert solution('''\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2'\n\nassert solution('''\n3\n4 5\n1 2\n9 20\n\n''') == '0'\n\nassert solution('''\n2\n3 10\n1 5\n\n''') == '7'\n\nimport itertools\n\na, b, c, d, e = map(int, input().split())\nprint(max(map(lambda x: max(map(lambda y: x[0] * x[1],\n                                  itertools.combinations(map(int, input().split()), 2))),\n               [a, b, c, d, e])))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 3\n2 6\n0 4\n3 3\n''') == '1'\nassert solution('''\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2'\nassert solution('''\n3\n4 5\n1 2\n9 20\n''') == '0'\nassert solution('''\n2\n3 10\n1 5\n''') == '7'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''\n3\n4 5 3\n''') == 'NO'\nassert solution('''\n2\n10 10\n''') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''3\n4 5 3\n''') == 'NO'\nassert solution('''2\n10 10\n''') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 1 1 2 5\"\n) == \"YES\"\n\nassert solution(\n    \"3\\n\"\n    \"4 5 3\"\n) == \"NO\"\n\nassert solution(\n    \"2\\n\"\n    \"10 10\"\n) == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\n\nassert solution(input()) == 'NO'"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\nassert solution('3') == \"NO\"\nassert solution('2') == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('2') == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n\n''') == 'YES'\nassert solution('''\n3\n4 5 3\n\n''') == 'NO'\nassert solution('''\n2\n10 10\n\n''') == 'YES'"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n\nassert solution(input()) == \"15\"\n\nassert solution(input()) == \"233\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"10 100\") == \"233\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('10 100') == '233'\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"10 100\") == \"233\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5\\n asdf\") == \"4\"\nassert solution(\"2 6\\n asdf\") == \"-1\"\nassert solution(\"3 7\\n asdf\") == \"-1\"\nassert solution(\"4 8\\n asdf\") == \"233\"\nassert solution(\"5 9\\n asdf\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"233\"\n\nassert solution(\"5 6\") == \"15\"\n\nassert solution(\"5 7\") == \"-1\"\n\nassert solution(\"10 100\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"10 100\") == \"233\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"4 7\") == \"4\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('10 100') == '233'\nassert solution('5 7') == '-1'\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"10 100\") == \"233\"\nassert solution(\"1 1\") == \"1\""
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 4\n\nassert solution(input()) == -1\n\nassert solution(input()) == 233\n\n\"\"\"\n\ns = input()\nk, n = map(int, input().split())"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\nassert solution('1 200 1') == '2'\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\nassert solution('1 0 0') == '1'\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1 1''') == '4'\nassert solution('''3 2 2''') == '7'\nassert solution('''1 100 1''') == '3'\nassert solution('''30 20 10''') == '39'\nassert solution('''3 4 2''') == '6'\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 1''') == '4'\nassert solution('''3 2 2''') == '7'\nassert solution('''1 100 1''') == '3'\nassert solution('''30 20 10''') == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1 1\n''') == '4'\n\nassert solution('''\n3 2 2\n''') == '7'\n\nassert solution('''\n1 100 1\n''') == '3'\n\nassert solution('''\n30 20 10\n''') == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 100 1\n''') == '4'\nassert solution('''\n3 2 2\n''') == '7'\nassert solution('''\n30 20 10\n''') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1 1\n''') == '4'\nassert solution('''3 2 2\n''') == '7'\nassert solution('''1 100 1\n''') == '3'\nassert solution('''30 20 10\n''') == '39'\nassert solution('''30 20 10\n''') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"4\""
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\") == \"YES\"\nassert solution(\"6\\n3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\") == \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('1 1') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1 1') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n''') == 'YES'\nassert solution('''\n1 1\n1 1\n1 1\n''') == 'YES'\nassert solution('''\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n''') == 'YES'\nassert solution('''3 3\n1 1\n2 2\n2 1\n''') == 'NO'\nassert solution('''3 5\n1 1\n2 3\n4 4\n5 5\n6 6\n''') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"YES\", \"3 4\"\nassert solution(\"1 2\") == \"YES\", \"1 2\"\nassert solution(\"5 6\") == \"YES\", \"5 6\"\nassert solution(\"5 7\") == \"NO\", \"5 7\"\nassert solution(\"7 4\") == \"YES\", \"7 4\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"1000000000\") == \"0\"\nassert solution(\"79999999999999999999999999999999999999999999999999\") == \"1\"\nprint(solution(input()))"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n''') == \"0\"\nassert solution('''5\n''') == \"1\"\nassert solution('''6\n''') == \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n5\n7\n''') == \"1\"\nassert solution('''6\n5\n7\n''') == \"1\"\nassert solution('''6\n5\n7\n''') == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n''') == '1'\nassert solution('''\n5\n''') == '1'\nassert solution('''\n6\n''') == '1'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) in range(-10, 10)\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n()))()\n''') == '5'\nassert solution('''3\n(()\n\n''') == '4'\nassert solution('''2\n(((\n\n''') == '0'\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n()))()\n\n''') == \"5\"\n\nassert solution('''\n3\n(()\n\n''') == \"4\"\n\nassert solution('''\n2\n(((\n\n''') == \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '4'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n()))()\n\nOutput\n5\n''') == \"5\"\n\nassert solution('''3\n(()\n\nOutput\n4\n''') == \"4\"\n\nassert solution('''2\n(((\n\nOutput\n0\n''') == \"0\"\n\nassert solution('''2\n(()\n\nOutput\n4\n''') == \"4\""
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '4'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10000000\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n(()))()\n\n''') == '5'\nassert solution('''\n2\n(((\n\n''') == '4'\n\nassert solution('''\n3\n(()\n\n''') == '0'\n\nassert solution('''\n2\n(((\n\n''') == '0'\n\nassert solution('''\n1\n()\n\n''') == '0'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5071') == '4', \"Wrong result in first example of standard input\"\nassert solution('705') == '1', \"Wrong result in second example of standard input\"\nassert solution('1241367') == '-1', \"Wrong result in third example of standard input\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == -1\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"9\\nabacbecfd\\n\"\n) == \"2\\n1 1 2 1 2 1 2 1 2!\"\n\nassert solution(\n    \"8\\naaabbcbb\\n\"\n) == \"2\\n1 2 1 2 1 2 1 1\\n\"\n\nassert solution(\n    \"7\\nabcde\\n\"\n) == \"3\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '2'\nassert solution('7') == '3'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abacbe') == '1 1 1 1 1'\nassert solution('abababc') == '1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\na\nb\nc\n''') == '1'\nassert solution('''9\nabacbecfd\n''') == '2'\nassert solution('''8\naaabbcbb\n''') == '2'\nassert solution('''7\nabcdedc\n''') == '3'\nassert solution('''5\nabcde\n''') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1 1 1'\nassert solution('4') == '1 1 1 1 1'\nassert solution('5') == '1 1 1 1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 2 1'\nassert solution('2') == '1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\nabcd') == '1'\nassert solution('6\\nabcdef') == '2'\nassert solution('10\\nabcdeabcde') == '1'\nassert solution('4\\nabcd') == '2'\nassert solution('11\\nabcdabcd') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9\nabacbecfd\n''') == '2'\nassert solution('''\n8\naaabbcbb\n''') == '2'\nassert solution('''\n7\nabcdedc\n''') == '3'\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'YES'\nassert solution('5') == 'YES'\nassert solution('5') == 'NO'\nassert solution('5') == 'NO'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'NO'\nassert solution('5') == 'YES'\nassert solution('10') == 'YES'\nassert solution('5') == 'YES'\nassert solution('10') == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n\") == \"NO\"\nassert solution(\"5\\n\") == \"YES\"\nassert solution(\"5\\n\") == \"YES\"\nassert solution(\"4\\n\") == \"NO\"\nassert solution(\"3\\n\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES', 'Should be \"YES\"'\nassert solution('3') == 'NO', 'Should be \"NO\"'\nassert solution('3') == 'NO', 'Should be \"NO\"'\nassert solution('4') == 'NO', 'Should be \"NO\"'\nassert solution('5') == 'YES', 'Should be \"YES\"'"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\naba\nabacaba\nba\naba''') == 'YES'\nassert solution('''5\na\naba\nabacaba\nba\naba''') == 'NO'\nassert solution('''3\nqwerty\nqwerty\nqwerty''') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\nab\") == \"YES\"\nassert solution(\"4\\nabc\") == \"YES\"\nassert solution(\"4\\nabc\") == \"NO\""
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n4 2 3 1 5 1 6 4''') == '5'\nassert solution('''5 100\n12 34 55 43 21\n''') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"8 4\") == \"5\"\nassert solution(\"5 100\") == \"5\""
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '5'\nassert solution(input('4 2 3 1 5 1 6 4')) == '5'\nassert solution(input('8 4')) == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n4 2 3 1 5 1 6 4''') == 5\n\nassert solution('''5 100\n12 34 55 43 21\n''') == 5\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '5'\nassert solution('8 4') == '5'\nassert solution('5 100') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 4\n4 2 3 1 5 1 6 4\n''') == '5'\nassert solution('''5 2\n3 1 2 1 3\n''') == '0'\nassert solution('''5 100\n12 34 55 43 21\n''') == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n3 1 2 1 3''') == \"5\"\nassert solution('''5 100\n12 34 55 43 21''') == \"5\"\nassert solution('''5 100\n12 34 55 43 21\n1 2 3 4 5''') == \"100\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([5, 2, 3, 1, 5, 1, 6, 4]) == 5\n\nassert solution([10, 2, 3, 1, 5, 1, 6, 4]) == 10\n\nassert solution([100, 2, 3, 1, 5, 1, 6, 4]) == 100"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([4, 4]) == \"12\"\nassert solution([3, 9]) == \"14\"\nassert solution([3, 6]) == \"12\"\nassert solution([506, 2708]) == \"3218\"\nassert solution([9, 3]) == \"14\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 9\") == '14'\nassert solution(\"4 4\") == '12'\nassert solution(\"3 6\") == '12'\nassert solution(\"506 2708\") == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 6\n''') == '18'\nassert solution('''\n4 4\n''') == '12'\nassert solution('''\n3 9\n''') == '14'\nassert solution('''\n3 6\n''') == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '14'\nassert solution(input(stdin)) == '12'\nassert solution(input(stdin)) == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n''') == '12'\nassert solution('''\n3 9\n''') == '14'\nassert solution('''\n3 6\n''') == '12'\nassert solution('''\n506 2708\n''') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n''') == '12'\n\nassert solution('''\n3 9\n''') == '14'\n\nassert solution('''\n3 6\n''') == '12'\n\nassert solution('''\n506 2708\n''') == '3218'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == 'NO'\nassert solution('8') == 'NO'\nassert solution('3') == 'YES'\nassert solution('7') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('4') == 'NO'\nassert solution('6') == 'NO'\nassert solution('12') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12') == 'NO'\nassert solution('6') == 'YES'\nassert solution('7') == 'YES'\nassert solution('11') == 'YES'\nassert solution('2') == 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\nabacbecfd\n''') == 'YES'\nassert solution('''\n8\naaabbcbb\n''') == 'YES'\nassert solution('''\n7\nabcdedc\n''') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nabacbecfd\n''') == \"NO\"\nassert solution('''\nabacbecfd\n''') == \"YES\"\nassert solution('''\n8\naaabbcbb\n''') == \"YES\"\nassert solution('''\n7\nabcde\n''') == \"NO\"\nassert solution('''\n5\nabcde\n''') == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\na\n1\n1\n0\n''') == 'NO'\nassert solution('''1\na\n0\n0\n0\n''') == 'YES'\nassert solution('''5\nabcde\n\nOutput\nYES\n01011011\n''') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6\nabacbecfd\n''') == 'YES'\nassert solution('''8\naaabbcbb\n''') == 'YES'\nassert solution('''7\nabcdedc\n''') == 'NO'\nassert solution('''5\nabcde\n''') == 'YES'\nassert solution('''4\nacbc\n''') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"YES\"\n\"\"\"\nfrom itertools import groupby\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n''') == '25'\nassert solution('''\n3 4\n''') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"25\"\nassert solution(\"2 2\") == \"25\"\nassert solution(\"4 1\") == \"25\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 2') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"100 100\") == \"100\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"10 10\") == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '25'\nassert solution('4 2') == '-1'\nassert solution('0 0') == '-1'\nassert solution('1 1') == '1'\nassert solution('3 3') == '25'\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 2') == '-1'\nassert solution('1 2') == '-1'\nassert solution('1 2') == '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"25\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"3 2\") == \"25\"\nassert solution(\"4 2\") == \"25\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n''') == '25'\nassert solution('''1 1\n''') == '-1'\nassert solution('''1 1\n''') == '-1'\nassert solution('''1 1\n''') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 1') == '-1'\nassert solution('5 5') == '-1'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n13 2\n''') == 'NO'\n\nassert solution('''\n13 1\n''') == 'YES'\n\nassert solution('''\n13 1\n''') == 'NO'\n\nassert solution('''\n1 1\n''') == 'YES'\n\nassert solution('''\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n26 6\n''') == 'YES'\nassert solution('''\n8 3\n''') == 'YES'\nassert solution('''\n1 1\n''') == 'YES'\nassert solution('''\n9 4\n''') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n10 4\n\"\"\") == \"\"\"\nYES\n1 2 3 4 5 6 7 8 9 10 \n\n\"\"\"\n\nassert solution(\n\"\"\"\n10 3\n\"\"\") == \"\"\"\nNO\n\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"4 5\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == 'NO'\nassert solution('8 3') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n6\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n6\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n8\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 6') == 'YES\\n1 2 4 5 6 8\\n'\nassert solution('3 3') == 'NO\\n'\nassert solution('4 4') == 'NO\\n'\nassert solution('5 4') == 'YES\\n1 2 3 4\\n'\nassert solution('10 10') == 'NO\\n'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '3'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 20') == '5'\nassert solution('3 2') == '3'"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n\nOutput\n3\n''') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == '3'\n\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\n\nprint('Time: {0:.3f}s'.format(time() - start))\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\nstdin = \"\"\"\n3 4\n4 6\n10 -2\n8 -1\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 20\") == \"5\"\nassert solution(\"3 2\") == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == '3'\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\nassert solution('''3 2\n300 -300\n1 299''') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '3'\nassert solution('5 20') == '5'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('6') == 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"1 8 8 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 8 8 1\"\"\") == \"YES\"\nassert solution(r\"\"\"1 4 4 1 3 5 1 3 2 1 1 3 2 5 4 2 2 3 5 4\"\"\") == \"YES\"\nassert solution(r\"\"\"2\n1\n1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n8 8 1 2 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\"\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n4 5 6\n7 8 9''') == \"NO\"\nassert solution('''4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == \"YES\"\nassert solution('''3\n1 2 3\n4 5 6\n7 8 9''') == \"YES\"\nassert solution('''4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == \"YES\"\nassert solution('''4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"NO\", \"Case 1\"\nassert solution(\"3\") == \"YES\", \"Case 2\"\nassert solution(\"4\") == \"NO\", \"Case 3\"\nassert solution(\"5\") == \"NO\", \"Case 4\"\nassert solution(\"3\") == \"YES\", \"Case 5\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 1\n3 2 2\n1 2 1\n''') == 'NO'\n\nassert solution('''\n4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n''') == 'YES'\n\nassert solution('''\n3\n1 1 1 1 1 3 3 3 3\n''') == 'NO'\n\nassert solution('''\n3\n1 2 1\n3 2 2\n1 2 1\n''') == 'YES'\n\n\nassert solution('''\n4\n1 1 1 1 1 3 3 3 3\n''') == 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"4 5\") == \"YES\"\nassert solution(\"3 10\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''\n4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''\n3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n'''\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"YES\", '3 4'\nassert solution(\"3 5\") == \"YES\", '3 5'\nassert solution(\"4 4\") == \"YES\", '4 4'\nassert solution(\"5 4\") == \"YES\", '5 4'\nassert solution(\"6 4\") == \"NO\", '6 4'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\n\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\n\nassert solution('''\n4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\n\nassert solution('''\n4 5\n4 -5\n4 -2\n1 3\n''') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"3 10\") == \"NO\"\nassert solution(\"4 10\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"YES\"\n\nsolution(input)\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 3 2') == \"YES\"\nassert solution('10 1 11') == \"YES\"\nassert solution('10 1 5') == \"YES\"\nassert solution('20 5 12') == \"NO\"\nassert solution('16 4 2') == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"5 4 2\\n2\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"5 4 2\\n3\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"5 4 2\\n4\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"5 4 2\\n5\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"7 3 2\\n1 2 1\"\n) == \"YES\\n0 1 0 2 2 0 3\"\n\nassert solution(\n    \"10 1 11\\n1\"\n) == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n\nassert solution(\n    \"10 1 5\\n2\"\n) == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 3 2\n1 2 1\n''') == \"YES\"\nassert solution('''10 1 11\n1\n''') == \"YES\"\nassert solution('''10 1 5\n2\n''') == \"YES\"\nassert solution('''7 5 1\n2\n''') == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 3 2\n1 2 1\n''') == 'YES'\nassert solution('''\n10 1 11\n1\n''') == 'YES'\nassert solution('''\n10 1 5\n2\n''') == 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 3 2') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 1 11\") == 'YES\\n0 0 0 0 1 1 0 0 0 0 2 2 0 3'\nassert solution(\"10 1 5\") == 'YES\\n0 0 0 0 1 1 0 0 0 0 0 1 1 0 2'"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 2\n1 2 1\n\n3 3 2\n1 2 1''') == \"YES\"\nassert solution('''5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1''') == \"YES\"\nassert solution('''5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1\n\n5 1 10\n1''') == \"YES\"\nassert solution('''7 3 2\n1 2 1\n\n7 3 2\n1 2 1\n\n7 3 2\n1 2 1\n\n7 3 2\n1 2 1\n\n7 3 2\n1 2 1\n\n7 3 2\n1 2 1\n\n7 3 2\n1 2 1''') == \"YES\"\nassert solution('''10 1 11\n1\n\n10 1 11\n1\n\n10 1 11\n1\n\n10 1 11\n1\n\n10 1 11\n1\n\n10 1 11\n1\n\n10 1 11\n1''') == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 0 1 1 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 3 2\n1 2 1\n''') == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution('''\n10 1 11\n1\n''') == 'YES\\n0 0 0 0 0 0 0 0 0 1\\n'\nassert solution('''\n10 1 5\n2\n''') == 'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == \"3\"\nassert solution(\"bb\") == \"2\"\nassert solution(\"abcde\") == \"0\"\nassert solution(\"abcde\") == \"0\""
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"baaba\") == 2\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaabbbbdddd\") == 2\nassert solution(\"aaabbbbdddddd\") == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('test') == 1\nassert solution('tst') == 2\nassert solution('tt') == 1\nassert solution('et') == 2\nassert solution('testtest') == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\nassert solution(\"asdfasdf\") == 3\nassert solution(\"csdgfhijk\") == 1"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"asdfasdf\") == \"0\"\nassert solution(\"abcde\") == \"2\"\nassert solution(\"baaba\") == \"3\""
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('ab') == 2\nassert solution('asdfasdf') == 3\nassert solution('a') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('ab') == 2\nassert solution('abcde') == 0\nassert solution('abcde') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('bba') == 2\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t1) == '3 2'\nassert solution(t2) == '10 3'\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nassert solution('5.063255') == '8 8'"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n3\n5\n4\n5''') == '3 2\\n1 1\\n1 3\\n2 3\\n2 3\\n3 4\\n3 5\\n4 5\\n4 5\\n5 5\\n5 5\\n'''\n\nassert solution('''1\n2\n2\n3\n4\n5''') == '3 2\\n1 1\\n1 3\\n2 3\\n2 3\\n3 4\\n3 5\\n4 5\\n4 5\\n5 5\\n5 5\\n'''\n\nassert solution('''1\n2\n3\n2\n3\n5''') == '3 2\\n1 1\\n1 3\\n2 3\\n2 3\\n3 4\\n3 5\\n4 5\\n4 5\\n5 5\\n5 5\\n'''"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\n'''\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\nassert solution(\"0.11111111\") == \"1 1\"\nassert solution(\"-0.22222222\") == \"1 1\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nassert solution('0.000000000') == '1 1'\nassert solution('123.00') == '1 1'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3 3\n''') == 'YES'\nassert solution('''\n10 4 3\n''') == 'YES'\nassert solution('''\n6 2 3\n''') == 'NO'\nassert solution('''\n6 3 3\n''') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3 3\n''') == 'YES'\nassert solution('''\n6 2 3\n''') == 'NO'\nassert solution('''\n10 4 3\n''') == 'YES'\nassert solution('''\n8 5 3\n''') == 'YES'\nassert solution('''\n1 1\n1 2\n2 1\n''') == 'YES'"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3 3\n''') == 'YES'\nassert solution('''\n6 2 3\n''') == 'NO'\nassert solution('''\n10 4 3\n''') == 'YES'\nassert solution('''\n8 5 3\n''') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 5 3') == 'YES'\nassert solution('8 5 3') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3 3') == \"YES\"\nassert solution('6 2 3') == \"NO\"\nassert solution('10 4 3') == \"YES\"\nassert solution('10 4 3') == \"YES\"\nassert solution('11 10 3') == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"10 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"10 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"1100\"\n\nimport itertools"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"1100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\nassert solution('5 3 6') == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"1100\", solution(\"2 2 1\")\nassert solution(\"3 3 3\") == \"101100\", solution(\"3 3 3\")\nassert solution(\"5 3 6\") == \"01010100\", solution(\"5 3 6\")\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\""
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2 1\"\n    ) == \"1100\"\nassert solution(\n    \"3 3 3\"\n    ) == \"101100\"\nassert solution(\n    \"5 3 6\"\n    ) == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nab\\nbc') == 'YES'\nassert solution('2\\nab\\nbc') == 'NO'\nassert solution('3\\naa\\nbc') == 'YES'\nassert solution('4\\nab\\nbc') == 'NO'\nassert solution('5\\nab\\nbc') == 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\nab\nbc\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3\naa\nbc\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1\ncb\nac\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\nababab\nbbbbbb\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n8\naaaaaaaa\naaaaaaaa\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\nab\\nbc') == \"YES\"\nassert solution('3\\naa\\nbc') == \"YES\"\nassert solution('1\\ncb\\nac') == \"YES\"\nassert solution('1\\nbc\\nca') == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'NO', solution('2')\nassert solution('3') == 'YES', solution('3')\nassert solution('1') == 'YES', solution('1')\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\nc''') == 'NO'\n\nassert solution('''2\naa\nbb''') == 'YES'\n\nassert solution('''3\ncb\nac\n''') == 'YES'\n\nassert solution('''4\nab\nac\nc\n''') == 'YES'\n\nassert solution('''5\nabc\nac\ncd\n''') == 'NO'"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\"\"\"\n\n\"\"\"\nApproach\n- To find the length of the longest common prefix,\n  use the three pointers (slow, fast and fast)\n  and move fast along the string as fast will increase after it\n- Check if fast is at the end of string\n  - If so, the prefix is the longest common prefix\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == \"NO\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"ac\") == \"YES\"\nassert solution(\"cb\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\nab\nbc\n\n\"\"\") == \"acbbac\"\n\nassert solution(\"\"\"\n1\ncb\nac\n\n\"\"\") == \"cacbacbab\"\n\nassert solution(\"\"\"\n3\naa\nbc\n\n\"\"\") == \"NO\""
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 2 3 4 5\"\nassert solution() == \"1 2 3 4 5\"\nassert solution() == \"1 2 3 4 5\"\nprint(solution())"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1 2'\nassert solution('4') == '1 3 4'\nassert solution('5') == '1 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 1 1 1''') == '1 2 3 4 5'\nassert solution('''7\n-2 1\n-1 2\n1 -1\n2 -1\n3 -1\n4 1\n5 1''') == '1 2 3 4 5'\nprint('all tests passed')"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 2 3 4 5'\nassert solution('6') == '1 5 2 4 3'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('5') == '1 2 3 4 5'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n-2 1\\n') == '3 1 2'\nassert solution('5\\n1 1 1 1\\n') == '1 2 3 4 5'\nassert solution('6\\n1 1 1 2 2 1\\n') == '1 2 3 4 5 6'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n-2 1\n''') == '3 1 2 \nassert solution('''5\n1 1 1 1\n''') == '1 2 3 4 5 \nassert solution('''4\n-1 2 2\n''') == '-1'\nassert solution('''10\n-10 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10\n''') == '-10 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10'"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3 1'\nassert solution('3') == '3 1 2'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('5') == 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"5 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n5\n2 2 2 3 3\n''') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''5\n2 2 2 3 3\n''') == '2'\nassert solution('''4\n3 1 1 1\n''') == '3'\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''5\n2 2 2 3 3\n''') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1', \"Wrong!\"\nassert solution('5 2 2 3 3') == '2', \"Wrong!\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_sample_1) == \"1\"\nassert solution(input_sample_2) == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\n\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"1\"\nassert solution(input_) == \"2\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"5\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"11\"\nassert solution(\"8\") == \"13\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\n\") == \"5\\n\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '5'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\""
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '5'\nassert solution('100') == '50'\nassert solution('999') == '100'\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\\n\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\\n\") == \"0 15\"\nassert solution(\"319\\n10 53 256\\n182 103 34\\n\") == \"119 226\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0 1'\nassert solution('15') == '0 15'\nassert solution('319') == '119 226'\nassert solution('319') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 1 1\n1 1 0\n''') == '0 1'\nassert solution('''\n15\n5 5 5\n5 5 5\n''') == '0 15'\nassert solution('''\n319\n10 53 256\n182 103 34\n''') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 1 1\n1 1 0\n''') == '0 1'\n\nassert solution('''\n2\n0 1 1\n1 1 0\n''') == '0 1'\n\nassert solution('''\n3\n0 0 3\n5 5 5\n5 5 5\n''') == '0 15'\n\nassert solution('''\n686\n479 178 29\n11 145 530\n''') == '119 226'\n\nassert solution('''\n319\n10 53 256\n182 103 34\n''') == '119 226'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n0 1 1\") == \"0 1\"\nassert solution(\"2\\n0 1 1\") == \"0 1\"\nassert solution(\"3\\n0 1 1\") == \"0 1\"\n\nassert solution(\"15\\n5 5 5\") == \"0 15\"\nassert solution(\"15\\n5 5 5\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"0 1\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"5\") == \"0 1\"\nassert solution(\"6\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '0 1'\nassert solution('3') == '0 1'\nassert solution('4') == '0 1'\nassert solution('5') == '0 1'\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0 1'\nassert solution('15') == '0 15'\nassert solution('319') == '119 226'"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"15\") == \"0 15\"\nassert solution(\"3\") == \"3 3\"\nassert solution(\"319\") == \"119 226\"\nassert solution(\"687\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"0 1\"\nassert solution(s) == \"0 15\"\nassert solution(s) == \"119 226\"\n\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = a+b\n\nc.sort()\n\nprint(\"0\", c[-1]-c[0], c[-2]-c[0])"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '4 4 4 4'\nassert solution('4\\n') == '4 4 4 4'\nassert solution('4\\n1 1 1 1') == '3 3 3 3'"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n-1 1 1\n''') == '1 2'\nassert solution('''\n3\n-2 1 1\n''') == '2 3'\nassert solution('''\n4\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2 4'\nassert solution('''\n4\n1 1 1 1\n''') == '4 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4 4\"\nassert solution(\"3\") == \"3 4\"\nassert solution(\"2\") == \"3 4\"\nassert solution(\"2\") == \"4 4\"\nassert solution(\"3\") == \"3 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '3'\nassert solution('11') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n4 1 2 2 1 5 3\n''') == '3'\nassert solution('''\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '4 4'\nprint(solution('''\n5\n7 1 1 1 1\n'''))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\nassert solution(\"3\\n2 3\\n1 1\") == \"4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n4 1 2 2 1 5 3\n''') == '3'\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7') == '3'\nassert solution('11') == '2 3 4 5'"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n1 1 1 1\\n') == '4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 1 2 2 1 5 3\n''') == '2 3'\n\nassert solution('''\n3\n4 1 2 2 1 5 3\n''') == '3 4'\n\nassert solution('''\n8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n\nassert solution() == \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3\\n') == 'YES'\nassert solution('4\\n3 1 2\\n') == 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'YES'\nassert solution('3') == 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n') == 'NO'\nassert solution('2\\n1 3 2\\n') == 'YES'"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '4'\nassert solution('4') == '-1'\nassert solution('5') == '3 5 4 5'\n\n\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\nabcdef\nabdfec\n''') == '-1'\n\nassert solution('''4\nabcd\naccd\n''') == '3 5 4 5'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nabcd\\naccd') == '-1'\nassert solution('4\\nabcd\\naccd') == '4 3 5 4 5'\nassert solution('10\\nabcdabcdbcd\\naccd') == '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '-1'\nassert solution('3') == '5'\nassert solution('4') == '-1'\nassert solution('5') == '4'\nassert solution('6') == '3'"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"6\\n\"\n    \"abcdef\\n\"\n    \"abdfec\"\n) == \"4\"\n\nassert solution(\n    \"3\\n\"\n    \"abcd\\n\"\n    \"accd\"\n) == \"-\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"-1\"\nassert solution(\"6\") == \"4\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\nabcdef\nabdfec\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n''') == '4'\nassert solution('''\n4\nabcd\nabcdef\n''') == '0'\nassert solution('''\n2\na\nb\n''') == '0'\nassert solution('''\n2\nab\nac\n''') == '3'\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\nabcd\naccd\n\n''') == '-1'\nassert solution('''\n4\nabcd\naccd\n\n''') == '4'\n\nassert solution('''\n10\nabcdefghij\nuabcd\n\n''') == '5'\nassert solution('''\n10\nabcdefghij\nuabc\n\n''') == '-1'\nassert solution('''\n10\nabcdefghij\nuabc\n\n''') == '10'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'SPPSPSPS'\nassert solution(input()) == 'PSPS'\nassert solution(input()) == 'SPS'\nassert solution(input()) == 'SP'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\na\naa\naaa\n''') == 'PS'\nassert solution('''2\na\nc\n''') == 'PS'\nassert solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == 'SPPSPSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"PS\"\nassert solution(\"2\") == \"PS\"\nassert solution(\"1\") == \"SP\"\nassert solution(\"5\") == \"PSPSPS\""
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\naba\\nab') == 'PS'\nassert solution('3\\nba\\naa\\nab') == 'PS'\nassert solution('4\\na\\naa\\nab') == 'PPS'\nassert solution('5\\nabab\\nab') == 'PPSPPSPPSPPSPPSPS'\nassert solution('6\\nab\\nca\\nab') == 'SP'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'PPSS'\nassert solution(input()) == 'SPPS'\nassert solution(input()) == 'SPSP'\nassert solution(input()) == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\nab\nba\na\nab\n\n5\na\naa\naa\na\n\n6\na\nc\n\n''') == \"SPPSPSPS\"\nassert solution('''\n3\na\naa\naa\na\n\n2\na\nc\n\n''') == \"PS\"\nassert solution('''\n2\na\naa\naa\na\n\n1\naa\na\na\n\n''') == \"SPSP\"\nassert solution('''\n3\na\naa\naa\na\n\n2\na\naa\naa\na\n\n1\naa\na\na\n\n''') == \"SPSP\""
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == 'SPPSPSPS'\nassert solution('''\n3\na\nc\n\n''') == 'PS'\nassert solution('''\n2\na\nc\n\n''') == 'PS'\nprint(solution(input()))"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"SPPSPSPS\"\nassert solution(input()) == \"SPPSPSPS\"\nassert solution(input()) == \"SPPSPSPS\"\nassert solution(input()) == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'SPPSPSPS'\nassert solution('3') == 'PS'\nassert solution('2') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"SPPSPSPS\"\nassert solution(\"2\") == \"PS\"\nassert solution(\"3\") == \"PS\"\nassert solution(\"1\") == \"P\"\n\n\n\n\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430.\n\n\u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\n\npython solution.py < input.txt\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443:\n\npython solution.py < input_test.txt\n\n\u0414\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443:\n\npython solution.py > output.txt\n\n\u0412 \u0444\u0430\u0439\u043b\u0435 output.txt \u0432\u0441\u0435 \u0432\u044b\u0432\u043e\u0434\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430.\n\n\u0420\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ (1 \\le n \\le 100). \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e. \u0412 \u043d\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u043e \u043f\u043e \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430: 'P' \u0438 'S', \u0430 \u0442\u0430\u043a\u0436\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 'P' \u0438\u043b\u0438 'S'; \u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u0446\u0438\u043a\u043b\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445-----\n\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445-----\n\nSPPSPSPS\n\nPPSSPPS\n\nPSSPSPPS\n\nPSSPS\n\nPPSSP\n\nPSSP\n\nPPS\n\nPS\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435-----\n\n\u0414\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b, \u0430 \u043d\u0435 \u0446\u0438\u043a\u043b\u044b.\n\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0438\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b, \u043d\u043e \u0442\u043e\u0433\u0434\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 2 3 3\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"2\"\nassert solution(\"3 4 2 3 2\") == \"3\"\nassert solution(\"2 4 3 2 3\") == \"2\"\nassert solution(\"2 1 2 2 3\") == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4 5 6 7 8') == '1'\nassert solution('2 4 6 8 10 12') == '3'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4 6 8 10\n''') == '1'\nassert solution('''\n4 6 8 10\n''') == '0'\n''')\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(['1','2','3']) == '1'\nassert solution(['4','5','6']) == '2'\nassert solution(['7','8','9']) == '3'\nassert solution(['10','11','12']) == '4'\nassert solution(['13','14','15']) == '5'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '1', \"Wrong!\"\nassert solution('2 4 6 8 10') == '3', \"Wrong!\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3 4 5''') == '1'\nassert solution('''6 7 8 9 10''') == '6'"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 7 10\n''') == '1'\nassert solution('''10 1 10\n''') == '1'\nprint(solution('''1 2 3 4 5\n'''))"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 6 8 10') == '1'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 6 8 10\n''') == '1'\nassert solution('''\n3 7 4 8 10\n''') == '2'\n'''\n\n\n\n\n\n###########################\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '2'\nassert solution('5') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0'\nassert solution('10') == '2'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1 0 1 1 0 1 0 1 0\n''') == '2'\nassert solution('''\n5\n1 1 0 0 0\n''') == '0'\nassert solution('''\n4\n1 1 1 1\n''') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n1 1 0 1 1 0 1 0 1 0\n''') == '2'\nassert solution('''\n5\n1 1 0 0 0\n''') == '0'\nassert solution('''\n4\n1 1 1 1\n''') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '1'\nassert solution('6\\n90 12 18 30 18') == '4'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n\nassert solution(input()) == \"4\""
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n3\n4\n5''') == '1'\nassert solution('''6\n90\n12\n18\n30\n18''') == '4'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == '1'\nassert solution('6 90 12 18 30 18') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '4'\nassert solution('7') == '1'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3 4 5\"\n    ) == \"1\"\n\nassert solution(\n    \"6 90 12 18 30 18\"\n    ) == \"4\"\n\nassert solution(\n    \"5\"\n    ) == \"1\"\n\nassert solution(\n    \"3\"\n    ) == \"1\"\n\nassert solution(\n    \"2\"\n    ) == \"1\""
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('6\\n6 90 12 18 30 18\\n') == '4'"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '4'\nassert solution('1') == '1'\nassert solution('6 90 12 18 30 18') == '4'"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"1\""
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    2\n    1 2\n    ''') == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n10\n''') == '2'\nassert solution('''\n1\n20\n''') == '1'\nassert solution('''\n2\n10\n''') == '1'\nassert solution('''\n2\n10\n''') == '1'\nassert solution('''\n3\n10\n''') == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n2\n2\n2\n2\n''') == '2'\nassert solution('''\n1\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n1\n1\n1\n1\n1\n1\n''') == '1'\n\nprint(solution())\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n1 2 4 3 3 2''') == '2'"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '3'\nassert solution('10 4') == '-1'"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '3'\n\nassert solution('10 10') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''\n5 3\n1 0 0 0 1\n''') == '2'\nassert solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\nassert solution('''\n11 4\n1 0 0 0 1 1 0 1 0 0 1\n''') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"10 -1\") == \"0\"\nassert solution(\"10 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"1 0 0 0 1\") == \"1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''\n5 3\n1 0 0 0 1\n''') == '2'\nassert solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '3'\nassert solution('6 10') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''\n5 3\n1 0 0 0 1\n''') == '2'\nassert solution('''\n10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\nassert solution('''\n10 10\n0 0 0 0 0 0 1 1 1 1\n''') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\\n\") == \"2\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''5 3\n1 0 0 0 1\n''') == '2'\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '4'\n'''"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n''') == '3'\n\n'''\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(5) == '3'\nassert solution(8) == '4'\nassert solution(11) == '3'\nassert solution(3) == '1'\nassert solution(4) == '2'\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n\n3\n\n1\n\n''') == '3'"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '3\\n', \"Error\"\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '3'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('7') == '6'\nassert solution('2') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''(((())\n''') == '3'\nassert solution('''()()()\n''') == '0'\nassert solution('''((()))\n''') == '0'\nassert solution('''(())(((()))\n''') == '3'\nassert solution('''())\n''') == '0'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == str(3)"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(((())') == '3'\nassert solution('())') == '0'\nassert solution('(((()))') == '3'\nassert solution('((())') == '0'\nassert solution('()(((((((((()))))))))))') == '6'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(in1) == \"3\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '3'"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('(((())') == '3'\nassert solution('())') == '0'\nassert solution('(((())') == '4'\nassert solution('(((()))') == '3'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(inp) == out"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n(((()))\n''') == '3'\nassert solution('''\n
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"ttt\") == 2\nassert solution(\"tttt\") == 2\nassert solution(\"tttttt\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"bbaba\"\n) == 3\nassert solution(\n    \"baaba\"\n) == 2\nassert solution(\n    \"abcde\"\n) == 0\nassert solution(\n    \"asdfasdf\"\n) == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == \"abcde\"\nassert solution(\"bbaba\") == \"3\"\nassert solution(\"baaba\") == \"2\"\nassert solution(\"asdfasdf\") == \"0\""
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''bbaba\nbb''') == '2'\nassert solution('''baaba\nab''') == '2'\nassert solution('''abcde\nabcde''') == '0'\nassert solution('''asdfasdf\nfasd''') == '3'"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == 0, solution(stdin)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bbaba\") == \"3\"\nassert solution(\"baaba\") == \"2\"\nassert solution(\"abcde\") == \"0\"\nassert solution(\"asdfasdf\") == \"3\""
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abcde') == 'abcde'\nassert solution('bbaba') == 'bbaba'\nassert solution('baaba') == 'baaba'\nassert solution('bbaba') == 'abcde'\n\nstdin = 'asdfasdf'\nprint(solution(stdin))\n\nassert solution('') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 2\nassert solution(\"aaaaa\") == 1"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bbaba\") == 3, \"First example\"\nassert solution(\"baaba\") == 2, \"Second example\""
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == 0\nassert solution(\"asdfasdf\") == 3\nassert solution(\"asdfasfasdf\") == 3\nassert solution(\"asdfasfasd\") == 0\nassert solution(\"asdf\") == 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 2, 1, 1]) == \"2\"\nassert solution([2, 1, 1, 1]) == \"2\"\nassert solution([2, 3, 2, 1]) == \"4\"\nassert solution([2, 6, 6, 6]) == \"24\"\nassert solution([2, 9, 9, 9]) == \"18\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1, 2, 1, 1]) == \"2\"\nassert solution([2, 1, 1, 1]) == \"2\"\nassert solution([1, 2, 1, 2]) == \"2\"\nassert solution([2, 1, 1, 2]) == \"2\"\nassert solution([1, 2, 2, 1]) == \"2\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('1 1 2 1') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('0 0 1 1') == '1'\nassert solution('1 2 3 4') == '6'\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 2 1 2 3\") == \"3\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"-1 -1 -1 -1\") == \"2\"\nassert solution(\"2 3 4 -1\") == \"3\"\nassert solution(\"9 2 5 1\") == \"10\"\nassert solution(\"0 0 1 0\") == \"1\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '2'\nassert solution('1 2 1 1') == '2'\nassert solution('4 5 3 5') == '15'\nassert solution('1 100 100') == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 5 1 5\") == \"1\""
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n9 1 4 4 6 7\") == \"2\"\nassert solution(\"3\\n9 1 4 4 6 7\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    6\n    9 1 4 4 6 7\n''') == '2'\nassert solution('''\n    5\n    1 2 3 4 5\n''') == '1'\nassert solution('''\n    4\n    1 4 3 2\n''') == '2'\nassert solution('''\n    3\n    1 4 3\n''') == '2'\nassert solution('''\n    2\n    1 4\n''') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '2'\nassert solution('10') == '1'\nassert solution('9') == '1'\nassert solution('6') == '2'"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n2\n4 5''') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '2'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 4 4 6 7\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"6\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8 9\") == \"1\"\nassert solution(\"7\\n3 4 5 6 7 8\") == \"4\"\nassert solution(\"5\\n1 4 5 6 7\") == \"5\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('8') == '1'\nassert solution('9') == '2'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\nassert solution('7 6 15 20 8 12 4 17 11\\n7 1 3 8 9 2 4 5 4 6\\n') == '4'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\nassert solution('''5 24 21 23\n16 17 14 20 20 11 22\n''') == '4'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 24 21 23') == '3'\nassert solution('7 25 20 23') == '2'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"7 24 21 23\\n\"\n    \"16 17 14 20 20 11 22\"\n) == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 24 21 23') == '3'"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\""
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 24 21 23\\n\"\n    \"16 17 14 20 20 11 22\"\n) == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\n\nassert solution('''\n5\n2 10 50 110 250\n''') == '1'\n\nassert solution('''\n6\n4 7 12 100 150 199\n''') == '3'"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\", \"2\"\nassert solution(\"3\") == \"1\", \"3\"\nassert solution(\"4\") == \"2\", \"4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\nassert solution(input_string=\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(input_string=\"6\\n4 7 12 100 150 199\\n\") == \"1\"\nassert solution(input_string=\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\""
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_1) == \"4\"\nassert solution(input_2) == \"1\"\nassert solution(input_3) == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('2\\n2 10 50 110 250') == '1'\nassert solution('3\\n4 7 12 100 150 199') == '2'\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 5 6 7 10 21 23 24 49\n\n''') == '4'\nassert solution('''3\n2 10 50 110 250\n\n''') == '1'\nassert solution('''6\n4 7 12 100 150 199\n\n''') == '3'"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"10\\n\"\n    \"1 2 5 6 7 10 21 23 24 49\\n\"\n    ) == \"4\\n\"\n\nassert solution(\n    \"5\\n\"\n    \"2 10 50 110 250\\n\"\n    ) == \"1\\n\"\n\nassert solution(\n    \"6\\n\"\n    \"4 7 12 100 150 199\\n\"\n    ) == \"3\\n\"\n\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('5\\n5 2 11 3 7') == '2 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 2 4 8 3 6\"\n    ) == \"1 2\", \"First\"\nassert solution(\n    \"5 2 11 3 7\"\n    ) == \"2 4\", \"Second\""
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 2\"\nprint(solution())\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 2'\nassert solution('5') == '1 2'"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 4 3 2 1\"\n) == \"1 2\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 5 11 3 7\") == \"2 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '1 2'\nassert solution('6') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '1 2'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"021\"\nassert solution(\"6\") == \"001122\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('211200') == '211200', '211200'\nassert solution('120110') == '120120', '120110'\nassert solution('120120') == '120120', '120120'\nassert solution('120120') == '120120', '120120'\nassert solution('001100') == '001100', '001100'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n121\n\n3\n211200\n\n3\n120110\n\n''') == '021'\nassert solution('''\n5\n0011100\n\n4\n011101\n\n''') == '10011'\nassert solution('''\n3\n0000000000\n\n4\n011101\n\n''') == '10101'\nassert solution('''\n4\n101001\n\n1\n111110\n\n''') == '101011'\nassert solution('''\n3\n121221\n\n1\n221121\n\n''') == '121222'"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '211220'\nprint(solution())\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '121'\nassert solution() == '021'\nassert solution() == '001122'\nassert solution() == '211200'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2\n''') == '021'\nassert solution('''\n10\n111221\n''') == '111221'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == '120120'\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"111\") == \"1\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n121\n\nOutput\n021\n''') == '021'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '4'\nassert solution('3 2') == '3'\nassert solution('4 2') == '3'\nassert solution('5 2') == '2'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '4'\nassert solution('6 2') == '4'\nassert solution('6 3') == '2'\nassert solution('6 4') == '2'\nassert solution('6 5') == '1'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"4\", \"Wrong solution\"\nassert solution(\"6 1\") == \"5\", \"Wrong solution\"\nassert solution(\"1 1\") == \"0\", \"Wrong solution\"\nassert solution(\"4 2\") == \"3\", \"Wrong solution\"\nassert solution(\"4 3\") == \"4\", \"Wrong solution\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1\\n3') == '4'\nassert solution('6 2\\n4') == '3'\nassert solution('6 4\\n5') == '2'\nassert solution('6 5\\n6') == '1'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 1\") == \"4\"\nassert solution(\"5 3\") == \"4\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"4 2\") == \"1\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6 1'\n) == '4'\n\nassert solution(\n    '3'\n) == '0'\n\nassert solution(\n    '2 2'\n) == '1'\n\nassert solution(\n    '4 3'\n) == '0'\n\nassert solution(\n    '8 5'\n) == '0'"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '6 1'\n    ) == '4'\nassert solution(\n    '7 1'\n    ) == '1'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '4'\nassert solution('10 1') == '9'\nassert solution('8 1') == '8'\nassert solution('7 1') == '7'\nassert solution('6 1') == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"4\"\nassert solution(\"3\") == \"2\""
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '4'\nassert solution('5 2') == '1'\nassert solution('10 2') == '9'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('2 2 3') == '1'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\nX K D\n''') == '2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('4 7 5') == '4'\nassert solution('5 9 2') == '3'\nassert solution('-9 -9 7') == '0'\nassert solution('2 4 -2') == '-2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"-4 3\") == \"4\"\nassert solution(\"-10 10\") == \"10\"\nassert solution(\"100 100\") == \"100\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"10 2 4\") == \"4\"\nassert solution(\"0 2 4\") == \"2\"\nassert solution(\"4 1 10\") == \"4\"\nassert solution(\"6 2 6\") == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"7 0 7\") == \"1\"\nassert solution(\"9 0 7\") == \"1\"\nassert solution(\"2 0 5\") == \"2\"\nassert solution(\"5 0 5\") == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('8 12 4') == '4'\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4\") == \"2\"\nassert solution(\"1 1 4\") == \"1\"\nassert solution(\"6 2 4\") == \"2\"\nassert solution(\"2 2 -4\") == \"0\"\nassert solution(\"6 -2 4\") == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"1 2 4\") == \"3\"\nassert solution(\"-1 2 4\") == \"3\"\nassert solution(\"4 2 5\") == \"3\"\nassert solution(\"5 2 -3\") == \"1\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3''') == \"6\"\nassert solution('''5\n10\n15''') == \"3\"\nassert solution('''99\n210\n3''') == \"0\"\nassert solution('''31809\n338092\n4''') == \"1\""
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '3'\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(11) == \"2\"\nassert solution(14) == \"0\"\nassert solution(61441) == \"2\"\nassert solution(571576) == \"3\"\nprint(solution(int(input())))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"3\""
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n7\n10\n14\n''') == '10'\nassert solution('''7\n20\n8\n4\n''') == '0'\nassert solution('''2\n5\n3\n8\n''') == '3'\nassert solution('''5\n2\n1\n4\n''') == '2'\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\nassert solution('2128506') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"20\") == \"2\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '10'\nassert solution('571576') == '3'\nassert solution('123456789') == '1'"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(3) == \"27\"\n\n\n\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"27\"\n\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '1'\n) == '1'\nassert solution(\n    '5'\n) == '1'\nassert solution(\n    '4'\n) == '4'\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"27\""
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '32'\nassert solution('1') == '1'\nassert solution('30') == '1022'"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1,2,3,4,5\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\nassert solution('10') == '10'\nassert solution('11') == '11'\nassert solution('20') == '20'\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '27'\nassert solution('4') == '24'\nassert solution('5') == '25'\nassert solution('6') == '21'\nassert solution('7') == '27'\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('10') == '1'\nassert solution('30') == '1'\nassert solution('123') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"13\\n\") == \"1\"\nassert solution(\"927\\n\") == \"1\"\nassert solution(\"48\\n\") == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('27') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == \"1\"\nassert solution('48') == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(927) == \"1\"\nassert solution(48) == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '4'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 1\") == \"5\"\nassert solution(\"5 3 1 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 3 1') == 4\n\n\n'''"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 3 1') == 4\nassert solution('10 20 30 40') == 40\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(4) == \"4\"\nassert solution(5) == \"10\"\nassert solution(6) == \"21\"\nassert solution(7) == \"35\"\n\n\"\"\"\nimport unittest\nimport io\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    2\n    2 5 3 1\n''') == '4', 'Error'\n\"\"\"\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\nassert solution(\"3 3 2 1\") == \"1\"\nassert solution(\"2 3 4 1\") == \"3\"\nassert solution(\"1 4 2 3\") == \"0\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 5 3 1\n''') == '4'\n\nassert solution('''\n3\n2 3 1\n''') == '0'\n\nassert solution('''\n5\n2 5 3 1 1\n''') == '2'\n\n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 5 3 1\\n\") == \"4\\n\", \"wrong\"\nassert solution(\"1\\n1\\n\") == \"2\\n\", \"wrong\"\nassert solution(\"7\\n1 1 1\\n\") == \"6\\n\", \"wrong\"\nassert solution(\"6\\n2 2 2\\n\") == \"7\\n\", \"wrong\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"0\\n\", \"wrong\"\n\"\"\"\n\nimport sys\nimport functools\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n999999733 999999733\n''') == '1'\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\n\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\nassert solution('''5\n1 3\n1 2\n2 2\n2 2\n1 1\n2 3\n''') == '4'\nassert solution('''5\n1 3\n1 2\n2 2\n2 2\n1 1\n2 3\n''') == '3'"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '8'\nassert solution('''6\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\nassert solution('''10\n5 9\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\nassert solution('''9\n4 3\n4 2\n6 10\n999999733 999999732\n999999733 999999733\n''') == '999999733'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '8'\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n\nassert solution(input()) == '8'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1\\n8\\n1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution() == \"1\"\nassert solution() == \"999999733\"\nassert solution() == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '2'\nassert solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\nassert solution('''\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '1'\nassert solution('''\n5\n8 7\n8 1\n6 10\n9999999999 999999732\n9999999999 999999733\n''') == '9999999999'\nassert solution('''\n5\n8 7\n8 1\n6 10\n9999999999 999999732\n9999999999 999999733\n''') == '9999999999'\n'''\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n2 1 2\n1 2\n0 1\n''') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\", \"Sample Test 1\"\nassert solution(\"3 3\") == \"4\", \"Sample Test 2\"\nassert solution(\"4 4\") == \"4\", \"Sample Test 3\"\nassert solution(\"5 5\") == \"4\", \"Sample Test 4\""
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1\\n') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2') == '1'\nassert solution('2 2\\n2 1 2\\n0 1') == '0'\nassert solution('3 3\\n1 1 2\\n1 3\\n3 3') == '0'\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 2]) == \"1\"\nassert solution([2, 1]) == \"1\"\nassert solution([1, 2]) == \"1\"\nassert solution([0, 1]) == \"1\"\nassert solution([2, 1, 0, 1]) == \"4\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\nassert solution(\"2 5\\n2 1 1 2 3 5\\n1 2\\n0 1\\n\") == \"4\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 1 2') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4\") == \"5.00000000000000000000\"\nassert solution(\"1 2 3 4 5\") == \"7.8235714285714286\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 9 0') == '5.0'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '3.428571428571429'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1') == '1.0000000000000002'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4 9 0''') == \"5.00000000000000000000\"\nassert solution('''3 6 9 0''') == \"6.00000000000000000000\"\nassert solution('''3 4 9 1''') == \"4.99999\"\nassert solution('''4 5 6 2''') == \"16.00000\"\nassert solution('''5 5 6 3''') == \"13.00000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('1 1 1 0') == '1.00000000000000000000'\nassert solution('4 3 2 0') == '4.00000000000000'\nassert solution('2 1 1 0') == '1.00000000000000'\nassert solution('1 0 1 0') == '0.00000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 9 0') == '5.00000000000000000000'\nassert solution('3 2 8 0') == '4.99999999999999999'\nassert solution('3 3 3 4') == '5.0000000000000005'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('1 1 0 0') == '1.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '5.0'\nassert solution('1 2 3') == '5.0'\nassert solution('1 2 3') == '5.0'\nassert solution('1 2 3') == '5.0'\nassert solution('1 2 3') == '5.0'\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"6 9 12 2\") == \"7.0\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1 9 0\") == \"5.00000000000000000000\"\nassert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 9 0') == '5.0000000000'\nassert solution('10 8 4 0') == '8.0000000000'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 4\n1 4 5 60 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"3 1\n1 1 1\n\"\"\") == \"6\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '8'\nassert solution('15 2') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"8\"\nassert solution(\"5 4\") == \"8\"\nassert solution(\"15 2\") == \"97\"\nassert solution(\"30 1\") == \"48\""
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1 4 5 60 4\\n') == '8'\nassert solution('3 1\\n1 1 1\\n') == '6'"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 4\n1 4 5 60 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"3 1\n1 1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\"\"\") == \"97\"\n\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5, 4, 3, 1, 1]) == '8'\nassert solution([15, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == '97'"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n5 4\n1 4 5 60 4\n\"\"\") == \"8\"\n\nassert solution(\n    \"\"\"\n3 1\n1 1 1\n\"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\"\"\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, 4, 1, 4, 5, 60, 4]) == 8\nassert solution([3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 6\nassert solution([15, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == 97\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n1 4 5 60 4\\n') == '8'\nassert solution('3 1\\n1 1 1\\n') == '6'\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n1 4 5 60 4\n''') == '8'\nassert solution('''3 1\n1 1 1\n''') == '6'\nassert solution('''15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n''') == '97'"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 0\") == \"0\"\nassert solution(\"5 4\") == \"6\"\nassert solution(\"2 -2 3 1 2\") == \"4\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"4 5\") == \"2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n3 2\\n'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6'\nassert solution('''1 0\n1000000\n\nOutput\n0\n0''') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 4\\n\"\n    \"2 -2 3 1 2\\n\"\n    \"1 3\\n\"\n    \"4 5\\n\"\n    \"2 5\\n\"\n    \"1 3\\n\"\n    ) == \"6\\n\"\n\nassert solution(\n    \"5 4\\n\"\n    \"2 -2 3 1 2\\n\"\n    \"3 5\\n\"\n    \"3 4\\n\"\n    \"2 4\\n\"\n    \"2 5\\n\"\n    ) == \"7\\n\"\n\nassert solution(\n    \"1 0\\n\"\n    \"1000000\\n\"\n    ) == \"0\\n\""
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0') == '0'\nassert solution('5 4') == '6'\nassert solution('1 1000000') == '0'\nassert solution('1 0') == '0'\nassert solution('5 4') == '7'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6'\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''') == '7'\nassert solution('''1 0\n1000000\n''') == '0'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\nA\naA\nAba\nBb\naa\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\nH\nhH\nx\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\nA\naA\nAba\nBb\naa\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\nf\nf\nf\nf\nf\nf\nf\nf\nf\nf\n\"\"\") == \"Yes\""
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nfced\\nxyz\\nr\\ndabcef\\naz\\n') == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('fced') == 'Yes', \"Your solution doesn't match the expected result.\"\nassert solution('xyz') == 'Yes', \"Your solution doesn't match the expected result.\"\nassert solution('r') == 'Yes', \"Your solution doesn't match the expected result.\"\nassert solution('dabcef') == 'Yes', \"Your solution doesn't match the expected result.\"\nassert solution('az') == 'No', \"Your solution doesn't match the expected result.\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8\\nfced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\\n') == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\n'\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"\n5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n\"\"\"\n) == \"7\"\n\nassert solution(\n\"\"\"\n1 0\n1000000\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n-1 3 1\n3\n-3 4\n-1 2''') == '4 1 \nassert solution('''5\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\nOutput\n6\n2\n3 2 \n\nInput\n1 0\n1000000\n\nOutput\n0\n0''') == '7'\nassert solution('''4\n1 2 3 4\n1 1 2\n2 3 4\n3 1 2\n\nOutput\n2\n4 1 \n\nInput\n1 0\n1000000\n\nOutput\n0\n0''') == '3'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 0') == '0'\nassert solution('5 4') == '6'\nassert solution('5 4') == '7'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1 0\n1000000\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0') == '0'\nassert solution('5 4') == '6'\nassert solution('2 -2 3 1 2') == '4'\nassert solution('1 3') == '3'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n\n\"\"\") == \"7\"\nassert solution(\n\"\"\"\n1 0\n1000000\n\n\"\"\") == \"0\""
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"1 0\") == \"0\"\n\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 0\") == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3') == '6\\n2\\n3 2\\n'\nassert solution('5 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == '6'\nassert solution('3 4') == '7'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n4 1'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"7 1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\") == \"LLL\"\nassert solution(\"4\") == \"LLR\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_stdin) == '4'"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == \"4\"\nassert solution('7') == \"7\"\nassert solution('3') == \"LLL\"\nassert solution('4') == \"LLR\""
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"4\"\nprint(solution(input))\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1 5 4 3\n''') == '4'\nassert solution('''7\n1 3 5 6 7 4 2\n''') == '7'\nassert solution('''3\n1 2 3\n''') == 'LLL'\nassert solution('''4\n1 2 4 3\n''') == 'LLRL'\nassert solution('''8\n1 2 3 4 5 6 7 8\n''') == 'LLRRRLLL'"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRRR\"\nassert solution(\"5\\n2 1 5 4 3\") == \"5\\nRRRLLL\""
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n\n'''\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == 'LLRL'\n\n'''"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(example_input) == \"4\"\nassert solution(input) == \"7\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7\n6 5 4 3 2 4 3\n''') == '2'\nassert solution('''\n10\n10 5 9 3 7 8 4 2 1\n''') == '6'"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 5 3 4\\n') == '4'\nassert solution('7\\n6 5 4 3 2 4 3\\n') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 5 3 4\n''') == '4'\nassert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n7\n6 5 4 3 2 4 3\n''') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 5 3 4\n''') == \"4\"\nassert solution('''\n2\n1 2\n''') == \"2\"\nassert solution('''\n7\n6 5 4 3 2 4 3\n''') == \"2\""
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7\\n6 5 4 3 2 4 3') == 2\nassert solution('5\\n1 2 5 3 4') == 4\nassert solution('1\\n2') == 1\nassert solution('7\\n1 2 5 3 4') == 5\nassert solution('9\\n9 5 4 3 2') == 6\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == '2'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '4'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('2') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''\n5 3\n1 2 3 3 3\n''') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 2 2 4 5\n''') == '1'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution() == '0'\nassert solution() == '1'"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'\nassert solution('5 3') == '0'\nassert solution('5 3') == '0'\n\n\"\"\"\nfrom math import ceil, floor\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\nassert solution('''5 3\n1 2 3 4 5''') == '2'\nassert solution('''5 3\n1 2 3 4 5''') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '2'\nassert solution('5 3') == '0'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\") == \"4\"\nassert solution(\"2 2 4\") == \"1\"\nassert solution(\"10 10 20 10 20 20 10 20 20 20 20 20 20 20 20 20 20\") == \"12\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 3 4\") == \"4\"\nassert solution(\"20 0 0\") == \"20\"\nassert solution(\"3 8 10\") == \"10\"\n\nimport sys\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\") == \"4\"\nassert solution(\"8 3 4\") == \"4\"\nassert solution(\"10 2 5 4\") == \"5\"\nassert solution(\"10 2 5 4\") == \"4\"\nassert solution(\"10 2 5 4\") == \"5\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"8 3 4\"\"\") == \"4\"\nassert solution(\"\"\"20 10 3\"\"\") == \"13\"\nassert solution(\"\"\"20 10 0\"\"\") == \"20\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('1 1 1') == '3'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('5 1 2') == '1'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '4'\nassert solution(['10', '10', '10', '10', '10', '10', '10', '10', '10', '10']) == '8'\nassert solution(['3', '3', '3', '3', '3', '3', '3', '3', '3', '3']) == '3'\nassert solution(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == '10'\nassert solution(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9']) == '9'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3 4') == '4'\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8 3 4\") == \"4\"\nassert solution(\"10 3 5\") == \"2\"\nassert solution(\"13 7 8\") == \"1\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n7\n2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n9\n2 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 1 2 3 5\n\"\"\") == \"5\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n8 2 12 6 4 24 16 3\n1\n2\n''') == '4', 'First example'\nassert solution('''\n2\n7\n2 1\n1\n2\n''') == '1', 'Second example'"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8\n8 2 12 6 4 24 16 3''') == '48'\nassert solution('''1\n1''') == '1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"8\") == \"48\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\n8 2 12 6 4 24 16 3\n''') == '48', 'Minimal number'\nassert solution('''\n1\n2\n''') == '-1', 'Contradictory'\nprint(solution('''\n2\n10\n1\n''')) == '1', 'Expected result'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '-1', 'Case 1'\nassert solution('2') == '4', 'Case 2'\nassert solution('5') == '-1', 'Case 3'\nassert solution('4') == '4', 'Case 4'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n10\n2\n1\n4\n6\n3\n4\n5\n6\n3\n5''') == '1'\nassert solution('''1\n10\n8\n2\n1\n4\n6\n3\n4\n5\n6\n3\n5''') == '1'\nassert solution('''1\n10\n8\n2\n1\n4\n6\n3\n4\n5\n6\n3\n5''') == '1'\nassert solution('''1\n10\n8\n2\n1\n4\n6\n3\n4\n5\n6\n3\n5''') == '1'\nassert solution('''1\n10\n8\n2\n1\n4\n6\n3\n4\n5\n6\n3\n5\n7\n3\n5''') == '3'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-2\") == \"1\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('10') == '9'\nassert solution('15') == '10'\nassert solution('18') == '14'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    2\n    8 2 12 6 4 24 16 3\n    1\n    2\n    ''') == '48'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == output"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"3\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2'\nassert solution(input(2)) == '2 4'\nassert solution(input(3)) == '1'\nassert solution(input(4)) == '3'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '3\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"5\") == \"6\"\nassert solution(\"5\") == \"6\""
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == '3\\n6 7 8 9'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 5 5 1 6 1\n\n''') == '3\n\nassert solution('''\n5\n2 4 2 4 4\n\n''') == '2\n\nassert solution('''\n5\n6 6 6 6 6\n\n''') == '1\n'''\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('5') == '6'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('7') == '6'\nassert solution('20') == '19'\nassert solution('-1') == '0'\nassert solution('2147483647') == '2147483648'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"2 4\"\nassert solution(\"5\\n1 2 2 4 4\") == \"2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"42\""
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\nstdin = \"142\"\nassert solution(stdin) == \"143\"\nstdin = \"141\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('13') == '15'\nassert solution('87') == '89'\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"32\") == \"32\"\nassert solution(\"9\") == \"12\"\nassert solution(\"937\") == \"937\""
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '435'\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\n''') == 'aac', 'first'\nassert solution('''\n4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\n''') == 'b','second'\nassert solution('''\n4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\n''') == 'aba', 'third'\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''abac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0''') == \"aac\"\nassert solution('''abac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0''') == \"aac\"\nassert solution('''abac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0''') == \"aac\"\nassert solution('''abac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0''') == \"aac\"\nassert solution('''abac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0''') == \"aac\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"aba\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"1 0 1 0\") == \"1\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''a\n2\n2 3 5\n\nab\n2\n2 3 5\n\nabac\n3\n2 1 0\n\nabc\n1\n0\n\nabba\n3\n1 0 1\n\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == 'c'\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\naba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aac\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"b\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aba\"\nassert solution('''\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n''') == \"aba\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abac\\n3\\n2 1 0\\nabc\\n1\\n0\\nabba\\n3\\n1 0 1\\necosdcefr\\n10\\n38 13 24 14 11 5 3 24 17 0\") == \"aba\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'aba', solution()\n\n\n\n-------code-------------\n\ns,m,b=input().split()\n\nm=int(m)\n\nst=set(input().split())\n\ntt=[]\n\nfor i in range(m):\n    tt.append(len(input()))\n\ntt=sorted(tt)\n\nprint(\" \".join(st))\n\nprint(\" \".join(list(map(lambda x: str(tt.index(int(x))+1),st))))\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\nabac\") == \"aac\"\nassert solution(\"2 1 0\\nabc\") == \"aba\"\nassert solution(\"3\\n38 13 24 14 11 5 3 24 17 0\\n\") == \"aba\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('3') == 'c'\nassert solution('4') == 'd'\nassert solution('5') == 'e'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline().strip()\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'b'\nassert solution('4') == 'z'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('3') == 'c'\nassert solution('4') == 'd'\nassert solution('5') == 'e'\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"a\"\nprint(solution(input()))"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1000000000000001\na\naa\naab\naac\naaaa\naab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"b\"\nprint(\"Hurray! All done! :-)\") if __name__ == '__main__' else None"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"b\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(6) == '12'\nassert solution(10) == '13'\nassert solution(6) == '11'"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '12'\nassert solution('10') == '13'\nassert solution('6') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == ''\nassert solution('1') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '11'\nassert solution('''\nto be or not to be\n''') == '12'\nassert solution('''\naa bb aa aa bb bb\n''') == '11'\nassert solution('''\nAB aa AB bb''') == '11'\nassert solution('''\nto be or not to be\n''') == '11'"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\nto be or not to be\n\"\"\") == \"12\"\nassert solution(\"\"\"\n10\na ab a a b ab a a b c\n\"\"\") == \"11\"\nassert solution(\"\"\"\n6\naa bb aa aa bb bb\n\"\"\") == \"13\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\nto be or not to be\n''') == '12'\nassert solution('''10\na ab a a b ab a a b c\n''') == '13'\nassert solution('''6\naa bb aa aa bb bb\n''') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '12'\nassert solution('10') == '13'\nassert solution('6') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"10\") == \"13\"\nassert solution(\"6\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nto be or not to be\n''') == '12'\nassert solution('''\n10\na ab a a b ab a a b c\n''') == '13'\nassert solution('''\n6\naa bb aa aa bb bb\n''') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"12\"\nassert solution(input()) == \"13\"\nassert solution(input()) == \"11\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n1 1 1 1 1\n''') == '1'\nassert solution('''\n5 2\n1 2000 2000 2\n''') == '2000 2'\nassert solution('''\n4 2\n1 2000 2000 2\n''') == '4000 2'\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('5 1') == '1'\nassert solution('8 3') == '20'\nassert solution('5 1') == '5'\nassert solution('4 2') == '4'"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3') == '20'\nassert solution('5 1') == '1'\nassert solution('4 2') == '4000'\nassert solution('1 1 1 1 1') == '5'\nassert solution('10 100000 1000') == '100000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 1\"\n) == \"1\"\n\nassert solution(\n    \"4 2\"\n) == \"2\"\n\nassert solution(\n    \"8 3\"\n) == \"20\"\n\nassert solution(\n    \"5 1\"\n) == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4000\"\nassert solution(stdin=\"5 1\") == \"5\"\nassert solution(stdin=\"4 2\") == \"2 2\""
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n8 3\n5 4 2 6 5 1 9 2\n\"\"\") == \"20\"\n\nassert solution(\"\"\"\n5 1\n1 1 1 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 2\n1 2000 2000 2\n\"\"\") == \"4000\"\n\nassert solution(\"\"\"\n9 5\n1 1 1 1 1 1 1 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n1 2000 2000 2\n''') == '4000'\nassert solution('''\n8 3\n5 4 2 6 5 1 9 2\n''') == '20'\nassert solution('''\n5 1\n1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2\n''') == '20'\nassert solution('''5 1\n1 1 1 1 1\n''') == '1'\nassert solution('''4 2\n1 2000 2000 2\n''') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '20 3 2 3'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 -5 3 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9') == '6'\nassert solution('8') == '3'\nassert solution('16 -5 -11 -15 10 5 4 -4') == '0'\n\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"15\") == \"0\"\nassert solution(\"9\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('9') == '6'\nassert solution('8') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 -5 3 2\n''') == '1'\n\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\n\nassert solution('''\n8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 -5 3 2\\n') == '1'\nassert solution('5\\n4 -2 3 -9 2\\n') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1\\n') == '6'\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4\\n') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"1\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 -5 3 2\n1 -5 3 2\n''') == '1'\nassert solution('''4 -2 3 2\n''') == '0'\nassert solution('''5\n1 -5 3 2\n''') == '1'"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"9\") == \"6\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 -5 3 2\n''') == '1'\n\nassert solution('''\n5\n4 -2 3 -9 2\n''') == '0'\n\nassert solution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n4 -2 3 2\n''') == '1'\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '0'\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '0\n2\n10\n1000000000\n2000000000''')\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"10\""
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '0\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '2'\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '10'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\n2 1\n1 5\n2 1000000000''') == '0'\nassert solution('''1 100\n2 2\n5 5\n2 1000000000''') == '2'\nassert solution('''1 100\n2 2\n5 5\n2 1000000000''') == '10'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '2'\nassert solution('''\n3\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '0'\nassert solution('''\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '10'\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 100\n2 2''') == '0'\nassert solution('''5 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '10'\nassert solution('''5 1\n2 1\n1 1\n2 1000000000\n1000000000 1000000000\n''') == '2'"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n''') == '0\n2\n10\n1000000000\n2000000000''')"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'\nassert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n') == '2'\nassert solution('5\\n1000000000 1000000000\\n') == '10'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '-1'\nassert solution(\"1,2,3,4,5,6,7,8,9,10\") == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('101') == '4'\nassert solution('7') == '-1'\nassert solution('77') == '4'\nassert solution('777') == '4'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == -1\nassert solution('') == -1\nassert solution('1') == -1\nassert solution('10') == -1\nassert solution('100') == -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\nassert solution('111') == 'None'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"None\"\nassert solution(\"101\") == \"4\"\nassert solution(\"101001\") == \"None\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('100') == '-1'\nassert solution('101') == '4'\nassert solution('10000') == '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\\n2 3 4 5 1\") == \"4\"\nassert solution(\"3 7\\n1 2 3 4 5 6\") == \"2\"\nassert solution(\"3 7\\n1 2 3 4 5 1\") == \"2\"\nassert solution(\"6 6\\n1 2 3 4 5 1\") == \"1\"\nassert solution(\"4 5\\n1 2 3 4 5 6\") == \"1\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n2 4 5 3 1''') == '4'\nassert solution('''5 5\n1 2 3 4 5''') == '1'\nassert solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 4\n2 4 5 3 1\n\"\"\") == \"4\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\n\"\"\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == '4'\nassert solution(\"5 5\") == '1'\nassert solution(\"15 8\") == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == str(correct)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\""
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 26\") == \"1\"\nassert solution(\"5 16\") == \"2\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == \"4\"\nassert solution('''5 16\n5 5 5 5 5\n''') == \"2\"\nassert solution('''5 26\n5 5 5 5 5\n''') == \"1\"\nassert solution('''5 30\n5 5 5 5 5\n''') == \"2\""
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 8\\n2 3 1 1 2\\n') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2\\n') == '2'\nassert solution('5 16\\n5 5 5 5 5\\n') == '1'\nassert solution('5 26\\n5 5 5 5 5\\n') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 8\n2 3 1 1 2\n''') == '4'\n\nassert solution('''\n5 16\n5 5 5 5 5\n''') == '2'\n\nassert solution('''\n5 26\n5 5 5 5 5\n''') == '-1'\n\nassert solution('''\n5 31\n2 1 2 3 4 1 5\n''') == '-1'\n\nassert solution('''\n5 27\n3 4 2 1 2 3\n''') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 16\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 16\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 16\") == \"1\"\nassert solution(\"5 26\") == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution('5 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '2'\nassert solution('5 26') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''\n5 16\n5 5 5 5 5\n''') == '2'\nassert solution('''\n5 26\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"4\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n\") == \"3\"\nassert solution(\"2\\n\") == \"0\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"5\\n\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == '3'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n24 21 14 10''') == '3'\nassert solution('''2\n500 500\n''') == '0'\nassert solution('''5\n1 3 6 9 12\n''') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\\n\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()[:-1]\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n24 21 14 10\n''') == '3'\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'\nassert solution('''\n3\n14 5 1\n''') == '-1'\nassert solution('''\n5\n1 3 6 9 12\n''') == '2'\nprint('OK')\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('5') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 2') == '5'\nassert solution('6 1') == '6'\nassert solution('6 1') == '6'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 15 15 15\n''') == '5'\nassert solution('''\n6 1\n36 4 1 25 9 16\n''') == '2'\nassert solution('''\n3 2\n1 2 3\n''') == '3'\nassert solution('''\n4 4\n1 10 100 1000\n''') == '4'"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '5 2\\n'\n    '1 2 15 15 15\\n'\n) == '5'\n\nassert solution(\n    '6 1\\n'\n    '36 4 1 25 9 16\\n'\n) == '4'\n\nprint(solution(*map(int, input().split())))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n1 2 15 15 15\n''') == '5'\nassert solution('''\n6 1\n36 4 1 25 9 16\n''') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 4\n10 100\n1000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 4\n1 2 3 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '4'\nassert solution('5 2') == '5'\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"10 10\") == \"10\"\n\n\n'''\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\") == \"8\"\nassert solution(\"5 6 7\") == \"9\"\nassert solution(\"8 11 3 7\") == \"7\"\nassert solution(\"10 12 12 9 5\") == \"3\"\nassert solution(\"8 1 2 5 7\") == \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"./test_files/test_solution.txt\") == \"8\", \"Your solution doesn't pass the test\"\nprint(\"Everything passed\")"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\") == \"8\"\nassert solution(\"5 10 7\") == \"9\"\nassert solution(\"5 10 7\") == \"10\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\") == \"8\"\nassert solution(\"1 1 2 3\") == \"4\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 7') == '8'\nassert solution('5 10 7 4') == '-1'\n\"\"\"\nimport math\n\nN, K, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nmax_score = 0\nfor i in range(N):\n    max_score += A[i]\nmax_score = int(max_score / N)\n\nmin_score = float('inf')\nfor i in range(N):\n    if A[i] == max_score:\n        min_score += M\n    else:\n        min_score += max(M - (K - A[i]), 0)\n\nprint(int(min_score))\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input := '3 10 7') == '8'\nassert solution(input := '4 10 8') == '-1'"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"5 10 7\\n3 2 4 5 6\\n2 5 3 4 6\") == \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\") == \"8\", \"Wrong answer\"\nassert solution(\"4 5 7\") == \"7\", \"Wrong answer\"\nassert solution(\"6 8 5\") == \"1\", \"Wrong answer\"\nassert solution(\"10 10 10\") == \"0\", \"Wrong answer\"\nassert solution(\"6 5 7\") == \"4\", \"Wrong answer\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"15 4 7\\n6 9 3 6\") == \"-1\"\nassert solution(\"5 1\\n2 3\") == \"2\""
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 7') == '8'\nassert solution('4 4 2') == '-1'\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 3 4') == 'No\\nNo\\nYes'\nassert solution('6 3 4') == 'No\\nNo\\nYes'\nassert solution('6 5 4') == 'No\\nNo\\nYes'"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n3\n2\n''') == \"Yes\"\nassert solution('''\n5\n3\n3\n2\n2\n''') == \"No\"\nassert solution('''\n6\n3\n3\n2\n3\n2\n''') == \"Yes\"\nassert solution('''\n6\n5\n3\n2\n3\n2\n''') == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3 4') == 'No'\nassert solution('1 1 2') == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 3 4\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\") == \"No\\nNo\\nYes\"\nassert solution(\"10 3 6\") == \"No\\nNo\\nYes\"\nassert solution(\"3 7 3\") == \"Yes\\nYes\\nYes\"\nassert solution(\"7 10 3\") == \"Yes\\nYes\\nYes\"\nassert solution(\"7 10 10\") == \"Yes\\nYes\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_line) == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\n\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 3 4') == 'No\\nNo\\nYes'\nassert solution('5 1 0') == 'Yes'"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\") == \"No\\nNo\\nYes\""
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3 4') == 'No\\nNo\\nYes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == ['No', 'No', 'Yes', 'No', 'No', 'No', 'Yes']"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n''') == 'YES'\nassert solution('''\n3 3\n0 0 0\n1 0 1\n1 1 0\n''') == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 3\") == \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution('''\n1 1\n0 1\n''') == \"00\"\nassert solution('''\n2 2\n1 1\n0 1\n''') == \"YES\"\nassert solution('''\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n''') == \"YES\"\nassert solution('''\n5 5\n0 0 0 1 1\n0 0 0 0 1\n0 0 0 0 1\n0 0 0 0 1\n1 1 1 1 1\n''') == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"0 0 0 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n''') == 'YES'\n\nassert solution('''\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n''') == 'YES'\n\nassert solution('''\n3 3\n0 0 0\n1 0 1\n1 1 0\n''') == 'NO'\n\nassert solution('''\n5 5\n0 0 1 1 0\n0 0 1 1 0\n1 1 1 1 0\n1 1 1 1 0\n1 1 1 1 0\n''') == 'YES'\n\nassert solution('''\n5 5\n0 0 0 1 1\n1 0 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('10 2') == 'NO'\nassert solution('5 5') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\nassert solution(\"3 2\") == \"NO\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n\n=======\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\nassert solution('123') == 'No'\nassert solution('341') == 'Yes'\nassert solution('12343') == 'No'\nassert solution('1234345') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"333\") == \"Yes\"\nassert solution(\"124\") == \"No\"\nassert solution(\"123\") == \"Yes\"\nassert solution(\"12\") == \"No\"\nassert solution(\"9\") == \"No\"\n\nstdin = \"433\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == 'Yes'\nassert solution('374') == 'No'\nassert solution('1000') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n''') == 'Yes'\nassert solution('''\n456\n''') == 'No'\nassert solution('''\n1\n''') == 'Yes'\nassert solution('''\n19\n''') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == 'Yes'\nassert solution('373') == 'Yes'\nassert solution('121') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"3\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\\n1 0 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''\n6 2 1\n1 0 0 1 0 1\n''') == '3'\nassert solution('''\n6 2 1\n1 0 0 1 0 1\n''') == '6'"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''\n6 2 1\n1 0 0 1 0 1\n''') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 1') == '5'\nassert solution('6 2 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == '3'"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution(\n    '6 2 1\\n1 0 0 1 0 1\\n') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('4 2 1') == '2'\nassert solution('10 2 1') == '10'\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n\n3 2 1\n1 0 1 1 0\n\n4 2 1\n1 0 0 1 0\n\n5 2 1\n0 1 0 1 0\n\n6 2 1\n1 0 0 1 0 1\n\n7 2 1\n1 0 0 1 0 1 1\n\n8 2 1\n1 0 0 1 0 1 1 1''') == '5'\n\nassert solution('''6 2 1\n1 0 0 1 0\n\n3 2 1\n1 0 1 1 0\n\n4 2 1\n1 0 0 1 0\n\n5 2 1\n0 1 0 1 0\n\n6 2 1\n0 1 0 1 0 1\n\n7 2 1\n1 0 0 1 0 1 1\n\n8 2 1\n1 0 0 1 0 1 1 1''') == '7'\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8-7+6-5+4-3+2-1-0''') == '4'\nassert solution('''112-37''') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\""
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4', \"Solution is wrong\"\nassert solution('112-37') == '375', \"Solution is wrong\"\nassert solution('+4+5') == '9', \"Solution is wrong\"\nassert solution('-4-5') == '-9', \"Solution is wrong\"\nassert solution('2+2') == '4', \"Solution is wrong\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"11111-11111\") == \"400\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n8-7+6-5+4-3+2-1-0\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n2+2\n\"\"\") == \"-46\"\nassert solution(\n\"\"\"\n112-37\n\"\"\") == \"375\"\nassert solution(\n\"\"\"\n1-2+3\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n-1+2+3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8-7+6-5+4-3+2-1-0''') == '4'\nassert solution('''2+2''') == '-46'\nassert solution('''112-37''') == '375'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"20 4\") == \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('15 10') == 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"12 1\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('2 1') == '1 3'\nassert solution('5 6') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n\") == \"YES\", \"First\"\nassert solution(\"4 3\\n\") == \"YES\", \"Second\"\nassert solution(\"10 4\\n\") == \"YES\", \"Third\"\nassert solution(\"13 4\\n\") == \"NO\", \"Fourth\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"10 1\") == \"NO\"\nassert solution(\"13 4\") == \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == \"18\"\nassert solution('''6 1 5\n10 30 30 70 10 10\n''') == \"-1\""
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '100'\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == '100'\nassert solution(input_2) == '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"18\""
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\") == \"18\"\nassert solution(\"6 1 5\") == \"100\""
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('5 2 3') == '-1'\nassert solution('6 1 5') == '100'\nassert solution('4 3 1') == '100'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == \"3\"\nassert solution('1 2') == \"1\"\nassert solution('1') == \"-1\"\nassert solution('1 1 1') == \"0\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"18\"\nassert solution([5, 1, 3, 10, 1]) == \"18\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_stdin) == \"21\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2\n00100\n''') == '3'\nassert solution('''\n6 1\n000000\n''') == '4'\nassert solution('''\n4 1\n0011\n''') == '4'\nassert solution('''\n12 6\n000010000100\n''') == '15'\nassert solution('''\n15\n''') == '15'\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n00100''') == '3'\nassert solution('''6 1\n000000''') == '4'\nassert solution('''12 6\n000010000100''') == '15'\nassert solution('''4 1\n0011''') == '4'\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 1') == '4'\nassert solution('12 6') == '15'\nassert solution('4 1') == '4'"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"4\"\nassert solution(\"12 6\") == \"15\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"12 0\") == \"13\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"4\"\nassert solution(\"12 6\") == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 1\") == \"4\"\nassert solution(\"12 6\") == \"15\"\nassert solution(\"4 1\") == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"21\""
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == '3'\nassert solution(\"6 1\") == '4'\nassert solution(\"12 6\") == '15'"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 1') == '4'\nassert solution('12 6') == '15'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'apple'\nassert solution('abb') == 'bbb'\nassert solution('aabb') == 'bbba'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\n\nprint('solution=',solution(input()))\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'azzel'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"azzel\") == \"Yes\", \"Error with input\"\n\n----"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'azzel'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('azzel') == 'apple'\nassert solution('apple') == 'azzel'"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('orange') == 'No'\n\"\"\"\nimport re"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5 1 1 2 5 3\") == \"8\"\nassert solution(\"8\") == \"0\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"0\"\nassert solution(\"100\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1\\n2\\n1\\n2\\n1\\n2\\n\") == \"3\"\nassert solution(\"5 5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"9\""
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n10\\n100\\n0\\n5') == '20'\nassert solution('6\\n1\\n2\\n0\\n5\\n1\\n2\\n3\\n0\\n4') == '22'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2\\n1\\n1\\n') == 'Yes'\nassert solution('5\\n4\\n3\\n3\\n2\\n4\\n2\\n1\\n') == 'No'\nassert solution('7\\n10\\n8\\n11\\n5\\n7\\n4\\n6\\n1\\n') == 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10 100\") == \"1\"\nassert solution(\"10 10 100\") == \"1\"\nassert solution(\"5 10 100\") == \"4\"\nassert solution(\"10 10 100\") == \"4\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 0\\n1 1 1\\n2 3 3\") == \"X\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"1000000 3\") == \"1000000\"\nassert solution(\"10000 5\") == \"10000\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"X\"\nassert solution(\"4\") == \"X\"\nassert solution(\"5\") == \"X\"\nassert solution(\"10\") == \"X\"\nassert solution(\"1\") == \"X\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n3\\n2\\n1\\n') == '4'\nassert solution('1\\n2\\n3\\n4\\n') == '8'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '8'\n\nstdin = '5\\n6\\n8\\n10\\n12\\n'\nprint(solution(stdin))\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"5 800\") == \"4\"\nassert solution(\"3 500\") == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 10\") == \"0\"\nassert solution(\"9 10\") == \"9\"\nassert solution(\"3 10\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\") == \"7\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"5 800\") == \"5\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 700') == '3'\nassert solution('3 200') == '1'\nassert solution('1 200') == '1'\nassert solution('2 200') == '2'\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 700\") == \"3\"\nassert solution(\"4 700\") == \"5\""
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"5 800\") == \"3\"\nassert solution(\"2 100\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 700') == '3'\nassert solution('3 800') == '3'\nassert solution('3 200') == '2'\nassert solution('2 300') == '1'\n\n------SOLUTION----\nd,g = map(int,stdin.split())"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5 4 5 4 5\n''') == '2'\n\nassert solution('''8\n4 8 8 7 8 4 4 5\n''') == '3'\n\nassert solution('''9\n2 3 4 2 2 3 2 2 4\n''') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7\n5 5 4 5 5 5 6\n''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5\n''') == '3'\nassert solution('''9\n2 3 4 2 2 3 2 2 4\n''') == '3'"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '3'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n5 5 4 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n5 4 5 5 5 6\n''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5\n''') == '3'\nassert solution('''9\n2 3 4 2 2 3 2 2 4\n''') == '3'"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '2'\nassert solution('8') == '3'\nassert solution('9') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n5 5 4 5 5 5 6''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5''') == '3'\nassert solution('''9\n2 3 4 2 2 3 2 2 4''') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"2\"\nassert solution(input_2) == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n5 5 4 5 5 5 6\n''') == '2'\nassert solution('''\n8\n4 8 8 7 8 4 4 5\n''') == '3'\nassert solution('''\n9\n2 3 4 2 2 3 2 2 4\n''') == '3'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2 3\n5 1 3 10 1\n''') == '18'\nassert solution('''\n6 1 5\n10 30 30 70 10 10\n''') == '100'\nassert solution('''\n4 3 1\n1 100 1 1\n''') == '100'\nassert solution('''\n5 2 1\n2 1 2 1\n''') == '-1'\nassert solution('''\n4 3 1\n1 100 1 1\n''') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"18\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"18\""
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '100'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n2\\n4 5\\n') == '5\\n2\\n4\\n5\\n'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1 5') == '-1'\nassert solution('5 1 3') == '18'\nassert solution('4 3 1') == '100'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 3') == '18'\nassert solution('6 1 5') == '100'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == '18'\n\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '18'\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"18\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'No'\nassert solution('11') == 'Yes'"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'Yes'\nassert solution('1') == 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"11\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n1\n3\n5\n7\n4\"\"\") == \"Yes\"\nassert solution(\"\"\"3\n1\n3\n5\n7\n4\"\"\") == \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"No\"\nassert solution(\"12\") == \"Yes\"\n\n---Output---\n------Sample Input 2----\n20\n\n------Sample Output 2----\nYes\n\nIf you buy one cake, one doughnut, and one, two cakes, the total will be 11 + 12 + 18 = 44 dollars.\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'Yes'\nassert solution('10') == 'No'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0 0 0\"\nassert solution(\"2 3 5\") == \"2 3 5\"\nassert solution(\"2 1 5\") == \"2 1 5\"\nassert solution(\"1 2 5\") == \"1 2 5\"\nassert solution(\"3 2 5\") == \"2 2 5\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\nassert solution('5\\n1 2 3\\n3 4 5\\n6 7 8\\n9 10 11') == '1 2 3\\n3 4 5\\n6 7 8\\n9 10 11'\nassert solution('5\\n-1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1'\nassert solution('10\\n0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('5\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '1 2 3\\n4 5 6\\n7 8 9\\n10 11 12'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n''') == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\nassert solution('4\\n1 2 5\\n1 1 5\\n2 2 5\\n2 1 5') == '1 1 5'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2 2 6\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 6') == '2 2 6'\nassert solution('3 4 5') == '2 2 5'\nassert solution('10 10 6') == '10 10 6'\nassert solution('4 8 8') == '3 3 8'\nassert solution('10 10 10') == '10 10 10'"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2 2 6'\nassert solution(input('')) == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\nassert solution(\"6\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n4 2 5\\n5 2 5\\n\") == \"2 2 6\""
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('redcoder') == '1'\nassert solution('code') == '2'\nassert solution('odd') == '1'\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('redcoder') == '1'\n'''"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '1'\n\n<10 ms>\n\n'''\n\nimport collections\n\ninput = input()\ncount = 1\nleft = 0\nright = len(input) - 1\n\nwhile left < right:\n    if input[left]!= input[right]:\n        if (input[left]!= 'a' and input[left]!= 'e' and input[left]!= 'i' and input[left]!= 'o' and input[left]!= 'u') and (input[right]!= 'a' and input[right]!= 'e' and input[right]!= 'i' and input[right]!= 'o' and input[right]!= 'u'):\n            left += 1\n            continue\n\n        if input[left] == 'a':\n            input = input[:left] + 'b' + input[left + 1:]\n        elif input[left] == 'e':\n            input = input[:left] + 'f' + input[left + 1:]\n        elif input[left] == 'i':\n            input = input[:left] + 'j' + input[left + 1:]\n        elif input[left] == 'o':\n            input = input[:left] + 'p' + input[left + 1:]\n        elif input[left] == 'u':\n            input = input[:left] + 'q' + input[left + 1:]\n\n        count += 1\n\n    left += 1\n    right -= 1\n\nprint(count)"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == \"1\""
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == \"1\"\nassert solution(\"hello\") == \"2\"\nassert solution(\"abc\") == \"1\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\nassert solution(input()) == 5\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == \"1\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('redcoder') == '1'\nassert solution('mamamen') == '2'\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('redcoder') == '1'"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"4\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Yes\"\n\nassert solution(\"10\") == \"Yes\"\n\nassert solution(\"10\") == \"No\"\n\nassert solution(\"10\") == \"No\"\n\nassert solution(\"10\") == \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\nassert solution('10') == 'No'\nassert solution('10') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"Yes\", \"Should be Yes\"\nassert solution(\"2\") == \"No\", \"Should be No\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Yes'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == 'Yes'\nassert solution('1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n\") == \"No\"\nassert solution(\"10\\n\") == \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Yes\", \"Test 1 Failed\"\nassert solution(\"5\") == \"Yes\", \"Test 2 Failed\"\nassert solution(\"8\") == \"No\", \"Test 3 Failed\""
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n4 4 9 7 5') == \"5\"\nassert solution('6\\n5 6 7 8 9') == \"0\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\nassert solution('8\\n7 8 8 8') == '1'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\nassert solution(\"1000000000 10000000 1000000000 1000\") == \"1000000000\"\nassert solution(\"1000000000 1000000000 1000000000 1000000000 1000000\") == \"1000000000\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n4 4 9 7 5''') == '5'\nassert solution('''6\n4 4 9 8 7 5''') == '7'\n\n'''\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '5\\n'\nassert solution('2\\n6\\n8\\n10\\n') == '11\\n'\nassert solution('6\\n8\\n10\\n') == '11\\n'\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1', \"Wrong result in first sample\"\nassert solution('2') == '3', \"Wrong result in second sample\"\nassert solution('3') == '6', \"Wrong result in third sample\"\nassert solution('4') == '10', \"Wrong result in fourth sample\"\nassert solution('5') == '21', \"Wrong result in fifth sample\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '-1', solution('')\nassert solution('1 2') == '-1', solution('1 2')\nassert solution('2 3') == '-1', solution('2 3')\nassert solution('3 4') == '12', solution('3 4')\nassert solution('4 5') == '10', solution('4 5')\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5') == '10'\nassert solution('5 2') == '10'\nassert solution('5 2') == '-1'\nassert solution('2 5') == '-1'\n\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\nInput\nOutput\nSample\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '10'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\", \"Sample\"\nassert solution(\"1 1\") == \"1\", \"Sample\"\nassert solution(\"5 2\") == \"-1\", \"Sample\"\nassert solution(\"1 2\") == \"2\", \"Sample\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_format) == output_format\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\""
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input(\"\")) == \"-\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 5\n''') == '10'\nassert solution('''1 2\n''') == '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\nassert solution('2 5\\n10 11 3 1 4 4') == '5'\nassert solution('2 5\\n1 11 3 1 4 4') == '4'\nassert solution('2 5\\n1 11 3 1 4 4') == '4'\nassert solution('2 5\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"6 7\\n2 3 5 1 4 7 8 9\\n1 2 3 4 5 6 7\") == \"4\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"2 5\") == \"5\""
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 3') == '2'\nassert solution('4 6 3') == '1110'\nassert solution('5 6 2') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3 3') == '2'\nassert solution('4 6 3') == '1'\nassert solution('5 6 2') == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4 3\n1 2\n2 3\n1 4\n4 3\n''') == '2'\n\nassert solution('''4 6 3\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n''') == '1'"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n4 3\n\n''') == '1110'\nassert solution('''4 6 3\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\n''') == '111100'\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\n''') == '110110'"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 2') == '1'\nassert solution('4 6 3') == '1110'\nassert solution('1 2') == '01'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n4 3\n1 2\n2 3\n1 4\n4 3\n\"\"\"\n) == \"1110\"\n\nassert solution(\n    \"\"\"\n4 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 3\") == \"1110\"\nassert solution(\"4 6 3\") == \"101001\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\") == \"2\"\nassert solution(\"5 6 2\") == \"1\"\nassert solution(\"4 6 3\") == \"1\"\nassert solution(\"5 6 4\") == \"2\"\nassert solution(\"4 5 2\") == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution() == '101001'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'YES'\nassert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n''') == 'NO'\nassert solution('''\n2\n10 10\n''') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 1 1 2 5\n\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n\n''') == 'NO'\nassert solution('''\n3\n1 2 3\n\n''') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\nassert solution(\"2 3\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('10') == 'NO'\nassert solution('1') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('2') == 'YES'"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 6') == '9'\nassert solution('1000000000000 5') == '4999999999996'\nassert solution('10 4') == '-1'\nassert solution('-1 0 0 0 0') == '4999999999996'\nassert solution('-1 0 0 0 0 -4') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"10 2\") == \"9\"\nassert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\""
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\") == \"9\"\nassert solution(\"1000000000000 5\") == \"4999999999996\"\nassert solution(\"10 4\") == \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000000000000 5') == '9'\nassert solution('1000000000000 -1') == '4999999999996'\nassert solution('10 4') == '-1'\nassert solution('-1 0 0 0 0') == '4999999999996'\n\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000 6') == '9'\nassert solution('1000000000000 5') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    6 4\n    -3 -6 5 4\n    \"\"\"\n) == \"4999999999996\"\n\nassert solution(\n    \"\"\"\n    10 4\n    -3 -6 5 4\n    \"\"\"\n) == \"4999999999996\"\n\nassert solution(\n    \"\"\"\n    20 0\n    \"\"\") == \"0\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'AB'\nassert solution('5') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\nABACABA') == 'AB'\nassert solution('5\\nZZZAA') == 'ZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"AA\"\nassert solution(\"4\") == \"AA\"\nassert solution(\"3\") == \"AA\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\nZZZAA\n''') == 'ZZ'\nassert solution('''\n7\nABACABA\n''') == 'AB'\n'''\nInput\n4\nOXXOXX\n'''\n'''\nOutput\nOO\n'''"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"AB\"\nassert solution(\"5\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7\\nABACABA') == 'AB'\nassert solution('5\\nZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10\nBBBACCA\n\"\"\") == \"AC\"\nassert solution(\"\"\"\n15\nABCABCDCDC\n\"\"\") == \"ABCDCDC\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\nABACABA''') == 'AB'\nassert solution('''5\nZZZAA''') == 'ZZ'\nassert solution('''4\nAABAAAA''') == 'AA'\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"AB\"\nassert solution(input()) == \"ZZ\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('test') == 2\nassert solution('west') == 9\nassert solution('yes') == 7\nassert solution('b') == 1"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(test) == 2\nassert solution(west) == 9\nassert solution(b) == 1\n\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a') == \"\"\nassert solution('ab') == \"ab\"\nassert solution('test') == \"test\"\nassert solution('b') == \"b\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('west') == 'here'\nassert solution('test') == 'here'\nassert solution('yes') == 'yes'\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('test') == 2\nassert solution('west') == 9\nassert solution('codeforces') == 7\nassert solution('b') == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"west\") == \"here\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"test\") == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == str(int(input)+1)\n\nprint(solution(input))"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''test\nwest''') == 2\nassert solution('''codeforces\nyes''') == 7\nassert solution('''test\nyes''') == 9\nassert solution('''b\nab''') == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == str(input()) + str(input())\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"7 4\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 5') == '2'\nassert solution('100 100') == '50'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3,3],[1,7,11]) == \"2\""
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('12 0') == '12'\nassert solution('10 10') == '12'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 2') == '2'\nassert solution('8 8') == '5'\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 3]) == \"2\"\nassert solution([1, 7, 11]) == \"2\"\nassert solution([3, 1, 5, 7, 9, 11]) == \"4\""
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n3 5\\n1 2\\n3 4\") == \"3\"\nassert solution(\"10 10\\n3 5\\n3 2\\n4 1\") == \"5\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"akas\") == \"No\"\nassert solution(\"akas\") == \"No\"\nassert solution(\"kaas\") == \"Yes\"\nassert solution(\"tas\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"ade\") == \"No\"\nassert solution(\"aade\") == \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('akasaka') == 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('aba') == 'Yes'\nassert solution('ka') == 'No'\nassert solution('ab') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('a') == 'No'\nassert solution('a') == 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('akasakab') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('akasakd') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'\n\n\"\"\"\n\nimport sys\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217', \"Wrong answer!\"\nassert solution('123.321') == '123', \"Wrong answer!\"\nassert solution('-100.00') == '-100', \"Wrong answer!\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"198 1.01\") == \"212\"\nassert solution(\"198\") == \"219\"\nassert solution(\"198.01\") == \"219.1\"\nassert solution(\"198.01\") == \"219.1\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('198 1.10') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\nassert solution('0 1.1') == '1'\nassert solution('1 1.1') == '1'\nassert solution('2 1.2') == '2'\nassert solution('7 1.8') == '7'\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"198 1.2\") == \"217\"\nassert solution(\"198 1.100\") == \"217\"\nassert solution(\"198 1.13\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\nA, B = map(int, input().split())\nprint(A*B)\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217', \"Wrong Answer\"\nassert solution('198 1.100') == '217', \"Wrong Answer\"\nassert solution('3 4') == '12', \"Wrong Answer\"\nassert solution('9 6') == '12', \"Wrong Answer\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n\nn = int(input())\nm = int(input())\nprint(n*m)"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"0.00001 0.00001\") == \"0\"\nassert solution(\"10000 100\") == \"10000\"\nassert solution(\"100.0000\") == \"100\"\nassert solution(\"100.0000 1.10\") == \"100.01\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1', '3'\nassert solution('6') == '3', '6'\nassert solution('7') == '0', '7'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n7\n1\n2\n3\n2000000000\n763243547\n''') == \"3\"\nassert solution('''\n6\n7\n1\n2\n3\n1000000000\n763243547\n''') == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\") == \"1\"\nassert solution(\"2\\n5\") == \"1\"\nassert solution(\"6\\n8\") == \"2\"\nassert solution(\"10\\n100\") == \"3\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n4\n2\n3\n1\n''') == '3'\nassert solution('''\n4\n7\n2\n1\n''') == '0'\nassert solution('''\n3\n5\n3\n1\n''') == '1'\nassert solution('''\n6\n7\n4\n5\n''') == '0'\nassert solution('''\n100000\n3\n7\n2\n''') == '999999999'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n7\n1\n2\n3\n2000000000\n763243547\n''') == '3', 'First'\nassert solution('''\n6\n7\n1\n2\n3\n2000000000\n763243547\n''') == '0', 'Second'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n1\n1\n1\n2''') == '3'\n\nassert solution('''1\n2\n1\n2\n1\n2''') == '0'\n\nassert solution('''8\n2\n1\n1\n1\n2\n1\n2''') == '2'\n\nassert solution('''7\n2\n1\n1\n1\n2\n1\n2''') == '1'\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\") == \"3\\n0\", '0'\nassert solution(\"4\\n5\") == \"0\"\nassert solution(\"1\\n3\") == \"4\"\nassert solution(\"10\\n12\") == \"60\"\nassert solution(\"3\\n2\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1\n2\n3''') == '3'\nassert solution('''4\n1\n2\n3''') == '0'\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n''') == \"3\"\nassert solution('''\n5 4 5\n1 2\n2 3\n3 4\n4 1\n''') == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4 5\n1 2\n2 3\n3 4\n4 1\n\n''') == \"1\"\nassert solution('''9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n\n''') == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 4 5\n1 2\n2 3\n3 4\n4 1\n''') == '1'\nassert solution('''\n5 4 5\n1 2\n2 3\n3 4\n4 1\n''') == '1'\nassert solution('''\n6 6 6\n1 2\n2 3\n3 4\n4 1\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n''') == '0'\nassert solution('''\n5 6 6\n1 2\n2 3\n3 4\n4 1\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n''') == '3'\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 5 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 6\\n6 1\\n1 8\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('9 9 1') == '3'\nassert solution('5 4 5') == '1'\nassert solution('9 8 7') == '1'\n\n'''\n\n\n'''\n1. Standard way to solve the problem\n    - Iterate over the cities, store all the cities that are not reachable from the current city and add the current city to the set of reachable cities\n    - Iterate over the roads, check if the current road is already in the set of reachable cities. If yes, then add that to the set of the reachable cities. \n    - Finally, return the size of the set of reachable cities\n2. One line of code \n    - Iterate over the roads, store all the roads that are not reachable from the current city in a set. Then iterate over the cities, check if they are reachable from the current city, if yes, add them to the set of reachable cities \n    - return the size of the set of reachable cities\n'''"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == str(3)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4 5') == '1'\nassert solution('5 5 5') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 5') == '1'\nassert solution('3 4 5') == '2'"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 5\\n1 1\\n5 4\\n5 5\\n\") == \"2\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n3 2 4 1\n''') == '4'\nassert solution('''6\n1 1 1 4 4 4\n''') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\nassert solution() == '5'\nassert solution() == '6'"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n3 2 4 1\n''') == '4'\nassert solution('''6\n1 1 1 4 4 4\n''') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('10\\n1 1 1 4 4 4 5 5 5 5') == '10'\nassert solution('100\\n1 1 1 4 4 4 5 5 5 5') == '100'\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n3 2 4 1''') == '4'\nassert solution('''6\n1 1 1 4 4 4''') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 4 1\\n') == '4'\nassert solution('6\\n1 1 1 4 4 4\\n') == '5'"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 2 4 1\\n\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\\n\") == \"5\""
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 32\\n\"\n    \"2 63\\n\"\n    \"1 12\\n\"\n    ) == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 3]) == \"000001000002\""
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '000001000002'\nassert solution('1 2') == '000002000001'\nassert solution('1 3') == '000001000001'\nassert solution('2 1') == '0010001000002'\nassert solution('2 2') == '001002000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n\nassert solution('''\n2 4\n1 21\n3 54\n2 65\n2 76\n''') == '000001000002\\n000002000001\\n000001000001\\n00000210001\\n000001660003'\n\nassert solution('''\n2 2\n1 32\n2 63\n''') == '000001000002\\n000002000001\\n00000210001\\n000001660003'\n\nassert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001\\n000001120001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == '000001000002'\nassert solution(sys.stdin.read()) == '000002000001'\nassert solution(sys.stdin.read()) == '000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001\\n'''\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 32\\n\"\n    \"2 63\\n\"\n    \"1 12\"\n) == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3\n1 32\n2 63\n1 12\n\"\"\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input) == \"2\"\nassert solution(input) == \"2\""
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n2 10 8 40\n''') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"2\"\nassert solution(\"100\") == \"74\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\nassert solution('6\\n5 1 5 5 5 2') == '1'\n\n\"\"\"\n\nimport math\nimport random\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 8 40\\n') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 5 8\\n2 10 8 40') == '2'\nassert solution('3 4\\n3 10 5 20\\n5 20\\n') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n2 10 8 40\"\"\") == \"2\"\nassert solution(\"\"\"3\n1 2 1\"\"\") == \"1\"\nassert solution(\"\"\"5\n1 1 3 5\n1 1 1 1\n1 1 3 5\n1 1 3 5\n1 1 3 5\"\"\") == \"3\"\n\"\"\"\nRuntime: 44 ms, faster than 94.41% of Python3 online submissions for Monster Truck.\nMemory Usage: 15.5 MB, less than 5.03% of Python3 online submissions for Monster Truck.\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\""
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == \"0010\"\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == \"false\"\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. \") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\" ) == \"0101\"\nassert solution(\"?(__-___+__-___):-___>__.\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(...) == \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'false'\nassert solution('(_-_/___*__):-___>__.') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == \"0010\"\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == \"false\"\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == \"0250341\""
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"???(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\""
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('?(_-_/___*__):-___>__.') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.    ') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\nassert solution('?(__+___+__-___):-___>__.') == '0101'\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('?(_-_/___*__):-___>__.') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\nassert solution('?(__+___+__-___):-___>__.') == '0101'\nassert solution('?(___+___+___-___):-___>__.') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\\n\") == \"3\"\nassert solution(\n    \"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"5\"\nassert solution(\n    \"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\n    \"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"5\"\nassert solution(\n    \"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"3 3 11\n2 1 5\n7 10 0\n12 6 4\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4\n''') == \"3\"\n\nassert solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\\n\") == \"3\"\nassert solution(\n    \"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"5\"\nassert solution(\n    \"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 11\\n2 1 5\\n7 10 0\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n''') == '3'\nassert solution('''\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '5'\nassert solution('''\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4\n''') == '3'\n\nassert solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '5'\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0'\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"codeforces\"\nassert solution(\"16\") == \"plmaetwoxesisiht\"\nassert solution(\"1\") == \"z\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == 'codeforces'\nassert solution('16') == 'thisisexampletwo'\nassert solution('1') == 'z'\n'''"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'z'\nassert solution('2') == 'thisisexampletwo'\nassert solution('3') == 'thisisexampletwo'\nassert solution('4') == 'thisisexampletwo'\nassert solution('5') == 'thisisexampletwo'\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'acdf'\nassert solution('10') == 'itsec'\nassert solution('16') == 'thisese'\nassert solution('1') == 'z'"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'rocesfedoc'\nassert solution(input()) == 'thisisexampletwo'\n\nimport math\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"abcd\"\nassert solution(\"7\") == \"sdfgh\"\nassert solution(\"11\") == \"mjmno\"\nassert solution(\"1\") == \"z\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == 'codeforces'\nassert solution('16') == 'thisisexampletwo'\nassert solution('1') == 'z'\n\n\n\nNote\nYou can solve this problem using the fact that the pattern divisors of $n$ are in descending order, i.e.  all divisors are equal or smaller than $n$.\n\nYou can write a smart solution that works even when $n$ is not a perfect power of two.\n\nYou can use the solution of this problem as a base for your solution of the problem of the next level.\n\nIf you like this kata, maybe try:\n\nhttps://www.codewars.com/kata/5639b7dbb7e55a8f9a000016\n\nHint:\nYou can solve this problem using the power function:\n\nx^y\n\n\n'''\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n'codeforces'\n\n''') == 'codeforces'\n\nassert solution('''16\nplmaetwoxesisiht\n\n''') == 'thisisexampletwo'\n\nassert solution('''1\nz\n\n''') == 'z'"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"rocesfedoc\"\nassert solution(\"16\") == \"thisisexampletwo\"\nassert solution(\"1\") == \"z\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == 'abcdef'\nassert solution('10') == 'codeforces'\nassert solution('1') == 'z'\n\n\n\n\n''''"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\nstdin = '5 14'\na = int(stdin.split()[0])\nb = int(stdin.split()[1])\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 14\n''') == '19'\nassert solution('''\n381 492\n''') == '873'\nprint('You are a wise guy and you have completed this mission.')\n\n'''\n--- Part Two ---\n\nA friend of yours has a friend who keeps writing perfect squares and numbers to a safe. \nNow, the problem is: how many perfect squares?\n\nIn a perfect square, the sum of each of its sides equals the square itself. \nFor example, 4 is a perfect square, because its sum is 4 and 4 is squared. \n6 is not a perfect square, because 6 is not a perfect square, because it is not a perfect square divided by any perfect square.\n\nSo in this example, 4 is not a perfect square because it is not a perfect square divided by a perfect square. \nBut in this example, 6 is a perfect square because it is.\n\nWrite a function that takes a positive integer n and returns the number of perfect squares that exist up to and including n. \nTwo perfect squares are different, if they can be written as a sum of two perfect squares, and the sum is different.\n\nInput: n = 7\nOutput: 1\nInput: n = 12\nOutput: 2\nInput: n = 10\nOutput: 4\n'''\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('1 0') == '1'\nassert solution('1 1') == '2'\nassert solution('2 2') == '4'\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('0 5') == '5'\nassert solution('1 5') == '5'\nassert solution('0 1') == '1'\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('6 -2 3 4 5') == '9'\nprint('all tests passed')\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\""
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1+2*3+4''') == '++++++++>+>++++>++>+++>+<<<.>>+.>--.>+++.>+++.''''"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2+3''') == '++>'\nassert solution('''9-7''') == '+++++++++>'\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2+3\") == \"++>\", \"Wrong answer!\"\nassert solution(\"9-7\") == \"++++++++>\", \"Wrong answer!\""
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"++>\", \"Check the correctness of your code\"\nassert solution(\"9-7\") == \"+++++++++>\", \"Check the correctness of your code\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"++>\", \"2+3\"\nassert solution(\"9-7\") == \"+++++++++>\", \"9-7\"\nassert solution(\"3+3\") == \"<[<+>-]<\", \"3+3\"\nassert solution(\"4+2\") == \"<[[->-]<]<\", \"4+2\"\nassert solution(\"8-3\") == \"<[[-><]<]<\", \"8-3\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''2+3\n''') == \"++>\n++++++++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\n'''9-7\n''') == \"+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++>\", \"Test 1 Failed\"\nassert solution(\"9-7\") == \"++++++++>\", \"Test 2 Failed\"\nprint(\"all tests passed\")"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2+3') == '++>', 'Should be ++>'\nassert solution('9-7') == '+++++++++>', 'Should be +++>'\nassert solution('100') == '+++++>', 'Should be +++>'"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2+3\") == \"++>\"\nassert solution(\"9-7\") == \"<[<->-]<\"\n\n\n\"\"\"\n\nimport sys\nimport time\nimport traceback"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"38\") == \"2\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"15\") == \"8\"\nassert solution(\"20\") == \"2\"\nassert solution(\"24\") == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '5'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1\n5\n8''') == '2'\nassert solution('''6\n1\n8\n8''') == '0'\nassert solution('''6\n5\n8\n8''') == '3'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"0\"\n\"\"\"\nfrom itertools import count\nfrom math import sqrt\nfrom sys import stdin\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"38\") == \"2\"\nassert solution(\"56\") == \"0\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2132\") == \"2\"\nassert solution(\"506\") == \"4\"\nassert solution(\"999999999999999999\") == \"1\""
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '0'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('575') == '4'\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"6\"\nassert solution(\"10\") == \"8\"\nassert solution(\"100\") == \"10\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''575\n        356\n        355\n        373\n        357\n        375\n        377\n        377\n        378\n        381''') == \"4\"\nassert solution('''1\n        2\n        3\n        4\n        5\n        6\n        7\n        8\n        9''') == \"9\"\nassert solution('''1\n        2\n        3\n        4\n        5\n        6\n        7\n        8\n        9\n        0''') == \"5\"\nassert solution('''1\n        2\n        3\n        4\n        5\n        6\n        7\n        8\n        9\n        10''') == \"10\"\nassert solution('''1\n        2\n        3\n        4\n        5\n        6\n        7\n        8\n        9\n        10\n        11''') == \"10\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('575') == '4'\nassert solution('1000000') == '4'"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '4'\nassert solution('575') == '4'\nassert solution('1') == '0'"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == \"4\"\nprint(\"You passed the tests!\")\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"200\") == \"0\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''575\n357 375 537 573\n''') == \"4\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"000\") == \"1\"\nassert solution(\"001\") == \"0\"\nassert solution(\"010\") == \"0\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"000\") == 1\nassert solution(\"111\") == 3\nassert solution(\"101\") == 2\nassert solution(\"1011\") == 4\nassert solution(\"00001\") == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"000\") == \"1\"\n\nassert solution(\"0111\") == \"1\"\n\nassert solution(\"1101\") == \"1\"\n\nassert solution(\"1110\") == \"0\""
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"000\") == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''000''') == 1, 'Wrong answer!'\nassert solution('''1111''') == 2, 'Wrong answer!'\nassert solution('''11111''') == 4, 'Wrong answer!'\nassert solution('''01011101''') == 2, 'Wrong answer!'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 0 0 1 1 1 1 1\n''') == '4'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"1\", \"Should be 1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"00000\") == \"1\"\nassert solution(\"00001\") == \"2\"\nassert solution(\"00010\") == \"2\"\nassert solution(\"00011\") == \"1\"\nassert solution(\"00100\") == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('000') == '1'\nassert solution('001') == '1'\nassert solution('010') == '0'\nassert solution('011') == '0'\nassert solution('100') == '0'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"000\") == \"1\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n6 7 9 10\\n\") == \"APPROVED\"\nassert solution(\"3\\n1 2 3\\n\") == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n6 7 9 10 31\n''') == 'APPROVED', 'test 1 failed'\nassert solution('''\n5\n9 9 9 10 11\n''') == 'DENIED', 'test 2 failed'\nassert solution('''\n5\n6 7 9 10 11\n''') == 'APPROVED', 'test 3 failed'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"APPROVED\"\nassert solution(\"3\") == \"DENIED\"\nassert solution(\"6\") == \"APPROVED\"\n\"\"\"\n\nN = int(input())\nnumbers = input()\nnumbers = numbers.split(\" \")\n\nfor i in numbers:\n    if int(i) % 2 == 0:\n        if int(i) % 3 == 0 or int(i) % 5 == 0:\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")\n    else:\n        print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"APPROVED\"\nassert solution(\"10\") == \"APPROVED\"\nassert solution(\"10\") == \"DENIED\"\nassert solution(\"13\") == \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'APPROVED'\nassert solution('6') == 'APPROVED'\nassert solution('10') == 'APPROVED'\nassert solution('1010') == 'DENIED'\nassert solution('9999') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"APPROVED\"\nassert solution(\"6\") == \"DENIED\"\nassert solution(\"7\") == \"APPROVED\"\nassert solution(\"10\") == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n6 7 9 10 31\\n') == 'APPROVED', 'First Test'\nassert solution('5\\n6 7 9 10\\n') == 'DENIED', 'Second Test'\nassert solution('5\\n6\\n') == 'APPROVED', 'Third Test'\nassert solution('5\\n6\\n') == 'DENIED', 'Fourth Test'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4 5 6') == 'DENIED'\nassert solution('2\\n4 6') == 'APPROVED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\nassert solution('2\\n1 2') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n6 7 9 10 31\n''') == 'APPROVED'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RDDDRD\") == \"No\"\nassert solution(\"DRUDRURD\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\"R\", \"U\", \"D\"]) == \"Yes\"\nassert solution([\"L\", \"U\", \"D\"]) == \"No\"\nassert solution([\"R\", \"D\", \"U\"]) == \"Yes\"\nassert solution([\"L\", \"R\", \"U\"]) == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUUDLR') == 'No'\nassert solution('LUDDRR') == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDUDD') == 'No'\nassert solution('RRRULD') == 'Yes'\nassert solution('UDDDRR') == 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RRDRRUD') == 'No'\nassert solution('RRUDDDUDRRRD') == 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('UUDLLDRR') == 'No'\n'''\n\nstdin = input()"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LLURDD') == 'No'\nassert solution('UDDDRRUURD') == 'Yes'\nassert solution('RRUURDD') == 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDLDDRUUDLU') == 'No'\nassert solution('RUDRDUDRUDLU') == 'Yes'\nassert solution('RUDRDUDRUDLUUDRDUDLUUDLUUDLDRUDDUDLUUDLUUDLRDUDRUDLUUDLRDUDRUDLDRDUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLRDUDRUDLRDUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUDLUUD"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDDUDR\") == \"No\"\nassert solution(\"RUUDDUDDUDDDDD\") == \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('UUUURDLRDDD') == 'No'\nassert solution('RUDLUDRUDRDDD') == 'Yes'\nassert solution('UUUURDRDDRDDD') == 'No'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\nassert solution('''10\n3\n2\n4\n3\n5''') == '6'"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"5 3\") == \"11\"\nassert solution(\"5 4\") == \"16\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '7'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\nassert solution('''5\n3\n2\n4\n3\n5''') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\n    '5',\n    '3',\n    '2',\n    '4',\n    '3',\n    '5',\n]) == '7'"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3') == '7'\nassert solution('10\\n3\\n5\\n2\\n5\\n4\\n3\\n6') == '9'\nassert solution('1\\n1\\n1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1') == '0'"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\nassert solution('''7\n1\n2\n4\n3\n5''') == '9'\nassert solution('''12\n2\n3\n3\n2\n2\n2\n2''') == '15'\nassert solution('''20\n2\n2\n2\n3\n3\n3\n3''') == '16'\nassert solution('''20\n2\n3\n2\n2\n2\n2\n2''') == '16'\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\nassert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == \"10\""
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\n\"\"\"\n\n\"\"\"\nn = int(input())\n\ncount = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        if i == 1:\n            print(str(i) + '\\t' + str(9))\n        else:\n            print(str(i) + '\\t' + str(0))\n    else:\n        if i == 1:\n            print(str(i) + '\\t' + str(9))\n        else:\n            print(str(i) + '\\t' + str(0))\n\nprint(count)\n\"\"\"\n\nimport math"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '2'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n\n\"\"\"\n\nn = int(input())\n\na = []\n\nfor i in range(1,10):\n    a.append(i)\n    a.append(0-i)\n\ncount = 0\n\nfor i in range(n):\n    if a[i] == 0 or a[i] == 9:\n        count+=1\n\nprint(count)"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '2'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '1'\nassert solution('5\\n') == '0'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '2'"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(4) == '5'\nassert solution(2) == '3'\nassert solution(1) == '2'\nassert solution(5) == '7'\nassert solution(8) == '11'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\n\") == \"9\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '7'\nassert solution('3') == '5'\nassert solution('1') == '2'\nassert solution('9') == '11'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '11'\nassert solution('5') == '5'\nassert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20') == '23'\nassert solution('100') == '97'\nassert solution('123') == '121'\nassert solution('11') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '5'\nassert solution('5\\n') == '5'\nassert solution('5\\n') == '5'\nassert solution('5\\n') == '5'\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"20\") == \"23\"\nassert solution(\"5\") == \"5\"\nassert solution(\"16\") == \"17\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"23\"\nprint(solution(open(\"input.txt\", \"r\").read()))"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\nassert solution(\"10\\n5 3 1 6 2 4 8 4\") == \"2\"\nassert solution(\"10\\n1 4 5 3 1 6 2 4\") == \"3\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\nassert solution('6\\n1 1 1 1 1 1') == '2'\nassert solution('5\\n1 1 1 1 1') == '1'"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n3 1 3 2\n''') == '1'\nassert solution('''6\n4 7 5 6 2 3\n''') == '2'\nassert solution('''10\n5 5 4 3 2 1 3 2 2\n''') == '0'\nassert solution('''14\n1 2 3 5 4 7 8 9 10 11 13 15 16 17 19\n''') == '13'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 1 3 2') == '1'\nassert solution('4\\n1 1 3 2') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '3'"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n3 1 3 2\n''') == '1'\nassert solution('''\n5\n1 1 2 3 5\n''') == '2'\n\nimport itertools\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '0'\nassert solution('10') == '3'\nassert solution('1000000') == '22'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 3 2') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6\n1 2 3 4 5 6''') == '2'\nassert solution('''3\n1 2 3''') == '1'\nassert solution('''4\n2 1 1 3''') == '2'\nassert solution('''5\n1 2 3 4 5''') == '1'\nassert solution('''6\n1 2 3 4 5''') == '1'\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"1\""
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 100 90 80\\n98\\n40\\n30\\n21\\n80\"\n    ) == \"23\"\nassert solution(\n    \"2\\n3\\n10\\n\"\n    ) == \"18\"\nassert solution(\n    \"2\\n4\\n2\\n\"\n    ) == \"9\"\nassert solution(\n    \"3\\n10\\n\"\n    ) == \"11\"\nassert solution(\n    \"2\\n4\\n8\\n\"\n    ) == \"14\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80 98 40 30 21 80\") == \"27\"\nassert solution(\"5 100 90 80 98 40 30 21 80 98 40 30 21 80\") == \"26\"\nassert solution(\"5 100 90 80 98 40 30 21 80\") == \"23\"\nassert solution(\"5 100 90 80 98 40 30 21 80 98 40 30 21 80 98 40 30 21 80\") == \"28\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\nassert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\nassert solution('''2\n1\n2\n1\n3\n1\n1\n5\n1\n2\n3\n''') == '12'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 100 90 80') == '23'\nassert solution('3 2 3') == '6'\nassert solution('4 1 5') == '8'\nassert solution('5 1 3') == '2'\nassert solution('3 3 3') == '3'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 100 90 80') == '23'\nassert solution('10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '10'\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\nassert solution('2\\n1\\n3\\n2\\n4\\n1\\n5\\n6') == '10'\nassert solution('4\\n8\\n2\\n1\\n3\\n5\\n6\\n1\\n7') == '10'\nassert solution('3\\n100\\n90\\n80\\n2\\n3\\n4\\n5\\n1\\n6') == '11'\nassert solution('1\\n5\\n3\\n2\\n1\\n3\\n5\\n4\\n6\\n7') == '1'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 100 90 80\n98\n40\n30\n21\n80''') == '23'\nassert solution('''4 5 100 90 80\n98\n40\n30\n21\n80''') == '35'\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 100 90 80\\n\"\n    \"98\\n\"\n    \"40\\n\"\n    \"30\\n\"\n    \"21\\n\"\n    \"80\"\n) == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\nassert solution('''3 10 50 90 80\n98\n40\n30\n21\n80''') == '22'\nassert solution('''6 10 90 80 90 90\n98\n40\n30\n21\n80''') == '23'\nassert solution('''10 5 100 90 80\n98\n40\n30\n21\n80''') == '15'\nassert solution('''10 5 100 90 80\n98\n40\n30\n21\n80''') == '15'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\"\nassert solution(\"5\\nABCXYZ\") == \"DEFGHIJK\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nABCXYZ\n''') == 'CDEZAB'\nprint(solution('''\n2\nABCXYZ\n'''))"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input) == \"CDEZAB\"\nassert solution(input) == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'CDEZAB'\nassert solution('3') == 'ZYXWV'\nassert solution('4') == 'QRSTU'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\""
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\nABCXYZ') == 'CDEZAB'\nassert solution('3\\nABCXYZ') == 'CDEZAB'\n'''\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nAB\\n\") == \"CDE\\nZBA\\n\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2', 'ABCXYZ') == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 3\"\nassert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"3 4 2\"\nassert solution(\"3\") == \"2 3 4\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5 2 3 2 4\n''') == '4 2 3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\", \"No solutions\"\nassert solution(\"1\") == \"\", \"No solutions\"\nassert solution(\"2\") == \"2\", \"Wrong answer\"\nassert solution(\"3\") == \"3 4 2\", \"Wrong answer\"\nassert solution(\"3 5 2 3 2 4\") == \"3 4 2 5 2 3 2\", \"Wrong answer\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 5 2 3 2 4\n''') == '3 4 2'\nassert solution('''\n1\n2750131 199999\n''') == '199999'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n5 2 3 2 4\n''') == '3 4 2'\nassert solution('''\n1\n2750131 199999\n''') == '199999'\nprint('tests done')\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 2\n3 4''') == '2 1 4 3'\nassert solution('''1\n2\n3''') == '2 3'\nassert solution('''3\n2 1 3\n3 2 4''') == '2 1 3 3 2 4'\nassert solution('''3\n3 1 2\n3 2 4''') == '3 2 1 3 2 4'\nassert solution('''3\n2 4 1\n3 2 4''') == '2 4 1 3 2 4'\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n3 5 2 3 2 4\n''') == '3 4 2'\nassert solution('''\n1\n3 6\n''') == '6'\nassert solution('''\n2\n1 2 3\n''') == '2 3'\nassert solution('''\n3\n1 2 3\n''') == '1 2 3'\nassert solution('''\n3\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 4 5 3 1\n''') == '11111'\n\nassert solution('''5 1\n2 1 3 5 4\n''') == '22111'\n\nassert solution('''7 1\n7 2 1 3 5 4 6\n''') == '1121122'\n\nassert solution('''7 1\n7 2 1 3 5 4 6\n''') == '1121122'\n\nassert solution('''3\n1 3 5 4\n''') == '11'"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"22111\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\""
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 4 5 3 1\") == \"111111\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"221112\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 2\\n2 4 5 3 1\\n\") == \"11111\"\nassert solution(\n    \"5 1\\n2 1 3 5 4\\n\") == \"22111\"\nassert solution(\n    \"7 1\\n7 2 1 3 5 4 6\\n\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"211122211\"\nprint(solution(s))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('10 1\\n10 2 1 3 5 4 6 7 8 9 10') == '0001101001101101001011110001101001101011101111110111000110111011100011011101111001001010111010011101001011101011110101110111011101001110100101110111010011101001011101110100111010010111010011101001011101011101001110100101110101110101110111010111010111010111010111011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101011101"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 4 5 3 1\n\n''') == '11111'\nassert solution('''5 1\n2 1 3 5 4\n\n''') == '22111'\nassert solution('''7 1\n7 2 1 3 5 4 6\n\n''') == '1121122'\nassert solution('''3 1\n1 1 1\n\n''') == '2112'\n\nprint(solution('''5 1\n1 2 3 4 5\n\n'''))\nprint(solution('''5 1\n2 1 2 3\n\n'''))\nprint(solution('''5 1\n1 3 5 2\n\n'''))\nprint(solution('''5 1\n1 1 1 1\n\n'''))\nprint(solution('''5 1\n1 2 3 4\n\n'''))\nprint(solution('''5 1\n1 1 1 1\n\n'''))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('8 1\\n1 1 1 1 1 1 1 1 1 1') == '1111111111111111111111111111111111'\n\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 1 2 3''') == '2'\nassert solution('''4\n100 1''') == '4'\nassert solution('''8\n1 3 3 5 6 7 3''') == '2'\nassert solution('''7\n1 3 2 3 4 5 3''') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2 3') == '2'\nassert solution('1 3 1 2 3') == '2'\nassert solution('100 1') == '2'"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2 3') == '2'\nassert solution('2 4 1 2 3') == '4'\nassert solution('100 1') == '2'\nassert solution('1 3 1 3 1') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('2\\n100 1') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '4'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1\n1\n1\n''') == '0'\n\nassert solution('''\n2\n1 2 1 2 3\n\n''') == '2'\n\nassert solution('''\n4\n1 3 3 7\n\n''') == '4'\n\nassert solution('''\n3\n6 4 2 6\n\n''') == '0'\n\nassert solution('''\n5\n1 2 1 2 3\n\n''') == '1'"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1 2 3') == '2'\nassert solution('100 1') == '2'\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '2'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1\n16\n''') == '1'\nassert solution('''5\n1\n1\n1023\n''') == '0'\nassert solution('''4\n1 1 1 1023\n''') == '2'"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"0\"\n\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 7 1 5 4 9''') == \"1\"\nassert solution('''1\n16''') == \"1\"\nassert solution('''4\n1 1 1 1023''') == \"0\""
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('5') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\nassert solution('6') == '1'\n\n\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('5') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0011\") == \"4\""
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('000000') == '1'\nassert solution('000100') == '4'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0011\n1111''') == '4'\nassert solution('''00011111''') == '1'\nassert solution('''11111''') == '3'\nassert solution('''0111''') == '2'\nassert solution('''00001111''') == '4'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0011\") == \"4\"\nassert solution(\"0000\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0011\") == \"4\"\nassert solution(\"00110\") == \"3\"\nassert solution(\"01110\") == \"2\"\nassert solution(\"011110\") == \"1\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0011\") == \"4\"\nassert solution(\"0100\") == \"3\"\nassert solution(\"1111\") == \"0\""
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '4'\nassert solution('0011') == '4'\nassert solution('001101') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0011\") == \"4\"\nassert solution(\"1111\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0011') == '4'\nassert solution('10111') == '5'\nassert solution('11111') == '1'\nassert solution('01') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0111\") == \"4\"\nassert solution(\"0011\") == \"4\"\nassert solution(\"0010011\") == \"4\"\nassert solution(\"0000\") == \"0\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '2'\nassert solution('1 3') == '1'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\nassert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 5\\n1 2\\n3 4\\n4 5\\n5 2\") == \"2\"\nassert solution(\"7 1\\n3 1\\n4 1\\n5 1\\n1 6\\n1 4\\n4 6\") == \"4\"\nassert solution(\"10 10\\n1 2\\n4 3\\n5 6\\n7 8\\n1 1\\n7 8\\n5 1\\n4 8\\n7 8\\n3 3\\n1 2\\n2 7\\n5 8\\n5 4\\n3 3\\n6 3\\n5 1\\n2 8\\n5 4\\n8 4\\n6 5\\n4 6\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"10 2\") == \"4\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"12 3\") == \"3\"\nassert solution(\"12 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"10 1\") == \"1\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 3\n2 4\n4 1\n1 2''') == '1'\nassert solution('''4 4\n1 3\n2 4\n4 1\n1 2''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '2'\nassert solution('1 3') == '1'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 2 1\n''') == '2'\nassert solution('''\n3\n1 2 2 1\n''') == '1'\nassert solution('''\n2\n1 2 1\n''') == '0'\n\n------------------------------\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nassert solution('2\\n1 2 1') == '1'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"0\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"4\\n1 2 2 1\") == \"2\""
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nassert solution('4\\n1 2 2 1') == '1'\nassert solution('4\\n1 2 2 1') == '1'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2 2 1\n''') == '2'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 2 1\\n') == '2'\nassert solution('4\\n1 2 2 1\\n') == '2'\nassert solution('4\\n1 2 2 1\\n') == '2'\nassert solution('4\\n1 2 2 1\\n') == '2'\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\"\nassert solution(input_string) == \"2\""
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5\n2 1 -3''') == '3'\nassert solution('''2 4\n-1 1''') == '4'\nassert solution('''4 10\n2 4 1 2''') == '2'\nassert solution('''4 10\n-1 1''') == '0'\nassert solution('''4 10\n1 2 3 4''') == '1'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 5\n2 1 -3\n\n''') == '3'\n\nassert solution('''2 4\n-1 1\n\n''') == '4'\n\nassert solution('''4 10\n2 4 1 2\n\n''') == '2'"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4') == '4'\nassert solution('4 10') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"4 10\") == \"2\""
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"4 10\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 5\n2 1 -3\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n2 4\n-1 1\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n4 10\n2 4 1 2\n\"\"\") == \"2\""
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 5\n2 1 -3\n''') == '3'\n\nassert solution('''2 4\n-1 1\n''') == '4'\n\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"4 10\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4') == '4'\nassert solution('4 10') == '2'\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 1'\nassert solution('4') == '1 1 2 3'\nassert solution('6') == '1 1 1 1 2 3'\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n4 8 6 3 12 9\\n') == '9 3 6 12 4 8'\nassert solution('4\\n42 28 84 126\\n') == '126 42 84 28'\n\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3 2'\nassert solution('4') == '4 3 2 1'\nassert solution('6') == '6 3 2 1 4'\nassert solution('8') == '8 3 2 1 4 5'\nassert solution('12') == '12 3 2 1 4 5 6'\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2\\n'\n    '1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\nassert solution(\n    '4\\n'\n    '42 28 84 126') == '126 42 84 28 \n\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n4 8 6 3 12 9\n''') == '9 3 6 12 4 8'\n\nassert solution('''\n2\n1000000000000000000 3000000000000000000\n''') == '3000000000000000000 1000000000000000000'\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('6') == '6'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '9 3 6 12 4 8'\nassert solution(input()) == '126 42 84 28'\nassert solution(input()) == '3000000000000000000 1000000000000000000'\nassert solution(input()) == '1000000000000000000 3000000000000000000'"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '9 3 6 12 4 8'\nassert solution() == '126 42 84 28'\nassert solution() == '3000000000000000000 1000000000000000000'\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n4 8 6 3 12 9\n''') == '9 3 6 12 4 8 \nassert solution('''\n2\n1000000000000000000 3000000000000000000\n''') == '3000000000000000000 1000000000000000000 "
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('2\\n1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n5 4 7 10 12\n''') == '3'\nassert solution('''\n5\n-1 2 5 8 11\n''') == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n4 5 7\n8''') == \"3\"\nassert solution('''5\n-1 2 5 8 11\n''') == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n3 5 4 7 10 12\n''') == '3 5 7 10'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '7'\nassert solution('4') == '9'\nassert solution('5') == '7'"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n-1 2 5 8 11\n''') == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"8\"\nassert solution(\"-1 2 5 8 11\") == \"1 8\"\nassert solution(\"5\") == \"8\""
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '1 2'\nassert solution('5\\n') == '4'\nassert solution('6\\n') == '1 2 3 4 5'\nassert solution('7\\n') == '1 2 3 4 5 6 7'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1 2 3 4 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"8 11\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '3 5 4 7 10 12'\nassert solution('5') == '8 7 5'\nassert solution('-1 2 5 8 11') == '8 11 7'\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n3 5 4 7 10 12\n''') == '3'\nassert solution('''5\n-1 2 5 8 11\n''') == '1'"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"2 1 2\") == \"1 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s) == \"0 2\"\nassert solution(s) == \"0 2\"\n'''\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '0 2'\nassert solution('2 1 1') == '0 2'\nassert solution('3 1 1') == '0 2'\n\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3\") == \"0 2\""
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 3') == '0 2'\nassert solution('1 1 1') == '1 1 1'\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"0 2\"\nassert solution(\"2 1 4\") == \"0 2\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('103') == '3'\nassert solution('101') == '1'\nassert solution('102') == '2'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100') == '3'\nassert solution('10') == '1'\nassert solution('101') == '1'\nassert solution('10_') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('103') == '3'\nassert solution('1') == '0'\nassert solution('101') == '1'\nassert solution('10') == '0'\nassert solution('1020') == '0'\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"1\"\nassert solution(\"300\") == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"103\") == \"3\""
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"-101\") == \"3\"\nassert solution(\"-103\") == \"3\"\nassert solution(\"-1020\") == \"4\"\nassert solution(\"-1011\") == \"2\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"100\") == \"3\"\nassert solution(\"1000\") == \"4\"\nassert solution(\"10000\") == \"5\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"104\") == \"2\"\nassert solution(\"105\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"-1\") == \"0\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('4') == '13'\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"9\""
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"4\"\n\n'''\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '9'\n\n---------------------------------------------------------------"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '3'\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\", \"Should be empty\"\nassert solution(\"2\") == \"9\", \"Should be 9\""
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n5''') == \"9\"\nassert solution('''4\n1''') == \"1\"\nassert solution('''2\n5''') == \"9\"\nassert solution('''3\n5''') == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n''') == '9'\nassert solution('''\n2\n''') == '9'\nassert solution('''\n3\n''') == '9'\nassert solution('''\n4\n''') == '9'\nassert solution('''\n5\n''') == '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '10'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3 4 6') == '10'\nassert solution('1\\n3 4 6') == '3'\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nmax_value = -math.inf\n\nfor i in range(N):\n    if i % a[i] == 0:\n        max_value = max(max_value, i + a[i])\n\nprint(max_value)\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"10\"\nassert solution(\"3 4 6\") == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 4, 6]) == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 4 6\n''') == '10', 'Should be 10'\nassert solution('''\n2\n1 2\n''') == '3', 'Should be 3'"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '10'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 4 6') == '10'\nassert solution('2\\n4 5 6') == '9'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '10'\nassert solution('4') == '10'\nassert solution('6') == '10'\nassert solution('3 4 6') == '10'\nassert solution('4 4 4 4 4 4') == '12'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 4 6''') == \"10\"\nassert solution('''4\n3 4 5 6''') == \"14\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '10'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'Yes', \"sample tests\"\nassert solution('1') == 'No', \"sample tests\"\nassert solution('2') == 'No', \"sample tests\"\nassert solution('3') == 'No', \"sample tests\"\nassert solution('4') == 'No', \"sample tests\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"2\") == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"6\") == \"No\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n3\n2 2\n1 1\n1 1\n\"\"\") == \"Yes\"\nassert solution(r\"\"\"\n6\n5 6\n4 4\n3 3\n4 4\n4 4\n5 4\n\"\"\") == \"Yes\"\nassert solution(r\"\"\"\n10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n3 2\n3 2\n3 2\n3 2\n\"\"\") == \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3') == \"Yes\"\nassert solution('10\\n1 2\\n6 6\\n4 4\\n3 3\\n5 5\\n8 8\\n7 7') == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"3\") == \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"6\") == \"Yes\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'Yes'\nassert solution('1') == 'No'\n\n\"\"\"\n\nN = int(input())\nd1 = list(map(int, input().split()))\nd2 = list(map(int, input().split()))\n\nd1 = [(d1[i], d1[i + 1]) for i in range(len(d1) - 1)]\nd2 = [(d2[i], d2[i + 1]) for i in range(len(d2) - 1)]\n\nfor i in range(N):\n    if d1[i][1] == d2[i][1] and d1[i + 1][1] == d2[i + 1][1] and d1[i + 2][1] == d2[i + 2][1]:\n        print('Yes')\n        break\n    elif d1[i][1] == d2[i][1] or d1[i + 1][1] == d2[i + 1][1] or d1[i + 2][1] == d2[i + 2][1]:\n        print('No')\n        break\nelse:\n    print('No')\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n6 6\\n4 4') == 'Yes'\nassert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'No'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\nassert solution('4') == '8'\n\n--\n\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n- a circle is larger than its neighbor\n-"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"4\""
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\"2\"]) == \"4\"\nassert solution([\"1\"]) == \"1\""
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '4'\nassert solution('3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '4'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n4\\n8\\n') == 'Yes'\nassert solution('4\\n5\\n8\\n') == 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\n\n'''\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n10 1 2 3 4 5\") == \"Yes\"\nassert solution(\"2\\n2 1\") == \"No\"\nassert solution(\"2\\n10 10\") == \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2 2\\n') == 'Yes\\n'\nassert solution('4\\n3 3 3 1\\n') == 'No\\n'\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"3\\n3 5 1\") == \"Yes\"\nassert solution(\"3\\n3 7 5\") == \"No\"\nassert solution(\"4\\n8 3 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Yes', 'Expected True'\nassert solution('2') == 'No', 'Expected False'\n\"\"\"\n\nn = int(stdin.readline().strip())\nside_l = list(map(int, stdin.readline().strip().split(' ')))\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"3\\n2 3 1\") == \"Yes\"\nassert solution(\"1\\n1\") == \"Yes\"\nassert solution(\"5\\n2 1 5 4 8\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('8\\n3 8 5 1') == 'No'\n\"\"\"\nimport math\nimport sys\n\nn = int(input())\nx_1, y_1 = map(int, input().split())\nx_2, y_2 = map(int, input().split())\nx_3, y_3 = map(int, input().split())\nx_4, y_4 = map(int, input().split())"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'Yes'\nassert solution('8') == 'Yes'\nassert solution('9') == 'No'\nassert solution('7') == 'No'"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '702'\nassert solution('4 5') == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '702'\nassert solution('2 3') == '1'\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 7\n3 2\n1 7''') == '702'\nassert solution('''6 3\n1 2\n5 4\n1 3\n3 3\n1 4\n5 4''') == '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4') == '712'\nassert solution('3 2') == '712'\nassert solution('3 2 3') == '712'\nassert solution('3 3') == '712'\nassert solution('3 3 1') == '712'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"702\""
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '702'\nassert solution('2 2') == '-1'\nassert solution('5 1') == '1'\nassert solution('3 1') == '1'\nassert solution('5 2') == '2'\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"./test/test_input.txt\") == \"702\"\nassert solution(\"./input/input_input.txt\") == \"702\"\nassert solution(\"./input/input_test.txt\") == \"702\"\nassert solution(\"./input/input_real.txt\") == \"965\""
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"702\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\\n\") == \"702\"\nassert solution(\"3 3\\n0 0\\n3 2\\n0 0\\n\") == \"-\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 9') == '702'\nassert solution('4 3') == '702'\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '9'\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == '9', solution(None)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '9'\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 1 1\n1 2 2\n1 3 3\n2 2 2\n2 3 3\n3 2 3''') == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\nassert solution('1 1 1') == '3'\nassert solution('1 2 1') == '4'\nassert solution('2 3 2') == '6'\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"3 3\") == \"12\""
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"15 5\") == \"23\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '9'\nprint(solution(input()))"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"-9\") == \"1011\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1\") == \"1\"\nassert solution(\"-10\") == \"1010\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\n\nprint(solution(input()))\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"1234\") == \"1020\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('-9') == '1011'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '10'\nassert solution('4') == '100'\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"-10\") == \"1010\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == '12'"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\nassert solution(\"10 5\\n4 9\\n2 4\") == \"16\"\nassert solution(\"5 4\\n4 9\\n2 4\") == \"8\"\nassert solution(\"6 5\\n2 4\\n1 4\") == \"5\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"12\"\nassert solution(\"2 5\") == \"12\""
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n4 9\") == \"12\"\nassert solution(\"2 5\\n2 4\") == \"4\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"12\"\n\n'''"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('2 4') == '4'\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"12\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"12\"\n\nprint(solution(input()))"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"12\""
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1') == '3'\nassert solution('5 1') == '5 1'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"3\"\nassert solution(\"9\") == \"4\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n10 4 8 7 3') == \"2\"\nassert solution('8\\n1 2 3 4 5 6 7') == \"8\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('8') == '1'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2 3 4''') == '1'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('10 4 8 7 3') == '3'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\nassert solution('5\\n0 0 0 0 0') == '0'"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\nassert solution('20\\n60 20 40 40 50 50 50 60 60 60 60') == '8'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == 1\nassert solution(\"4 5\") == 0\nassert solution(\"1 5\") == 2\nassert solution(\"10 3\") == 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"6 3\") == \"2\"\nassert solution(\"2 3\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 3') == '1'\nassert solution('5 3') == '0'\nassert solution('5 3') == '0'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 2 2 4 5\n''') == '1'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5 3\n1 2 3 3 3\n''') == '0'"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 3\\n1 2 2 4 5'\n) == '1'\nassert solution(\n    '5 3\\n1 2 3 4 5'\n) == '2'\nassert solution(\n    '5 3\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5'\n) == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 2 2 4 5\n''') == '1'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '2'\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '0'\nassert solution('''\n5 4\n1 2 3 4 5\n''') == '2'\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\nassert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 3 3\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\nassert solution(stdin='''\n5 3\n1 2 2 4 5\n''') == \"1\"\nassert solution(stdin='''\n5 3\n1 2 3 4 5\n''') == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 3\") == \"0\"\nassert solution(\"5 3\") == \"0\""
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n') == '1'\nassert solution('5 3\\n') == '2'\nassert solution('5 3\\n') == '0'\nassert solution('5 3\\n') == '0'\nassert solution('5 3\\n') == '0'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5') == '3'\nassert solution('7 5') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n\n'''\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5') == '3'\nassert solution('7 5') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n5') == '3'\nassert solution('6\\n5') == '3'\nassert solution('7\\n5') == '4'\nassert solution('8\\n5') == '1'\nassert solution('9\\n5') == '1'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 5\n3 3 2 1 1 1 3\n'''\n    ) == '3'\n    \nassert solution(\n'''\n1 1\n1\n'''\n    ) == '2'\n    \nassert solution(\n'''\n4 5\n3 3 2 1 1 1 3\n'''\n    ) == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2 4 2 3') == '3'\nassert solution('6 5') == '4'\nassert solution('3 3 2 1 1 1 3') == '4'\nassert solution('7 5') == '5'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6 5\n1 2 2 4 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"7 5\n3 3 2 1 1 1 3\n\"\"\") == \"4\"\nprint('Tests passed!')"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n3 1\n''') == '1'\nassert solution('''\n3 5\n1 2 2 4 2 3\n\n''') == '3'\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 5\n1 2 2 4 2 3\n''') == '3'\nassert solution('''\n6 5\n3 3 2 1 1 1 3\n''') == '4'\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10\"\nassert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"9\""
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1 3\n1 3\n2 3\n''') == \"10\"\nassert solution('''\n2\n1 3\n1 3\n1 3\n''') == \"10\"\nassert solution('''\n3\n1 3\n1 3\n1 3\n''') == \"10\""
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n7 1 3\n3 3 3\n''') == '9'\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    10 1 3\n    7 3 2\n    1 1000 1\n    1000000000000 42 88\n    ''') == '10'\nassert solution('''\n    10 0 0\n    7 0 0\n    1 0 0\n    1 1 0\n    ''') == '1000000000000'\n''')\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\") == \"1000\"\n\nassert solution(\"\"\"\n6\n5 1 3\n3 1 2\n1 0 1\n1 1000000 1\n1 1000000 1000000 1\n1 1000000 1\n\"\"\") == \"1000000000000\"\n\nassert solution(\"\"\"\n1\n1 5 3\n5 5 2\n1 0 1\n1 1000000 1\n1 1000000 1000000 1\n1 1000000 1\n\"\"\") == \"1000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n''') == \"10 9 42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\nassert solution('3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 1 2') == '1\\n1\\n1\\n1'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6') == '2'\nassert solution('5 6') == '2'\nassert solution('1 2') == '1'\nassert solution('5 3') == '0'\nassert solution('5 6') == '1'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1', 'First'\nassert solution('10 20') == '0', 'Second'"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"3 4 5\") == \"2\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 4 5\") == \"2\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 6]) == 2\nassert solution([3, 4, 5]) == 1\nassert solution([3, 4, 5, 1]) == 2"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == \"2\""
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 4 5') == '2'\nassert solution('3 4 5 6') == '3'\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"3 6\") == \"2\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\nhoge\\nhoge\") == \"No\"\nassert solution(\"2\\nenglish\\neven\\ncat\\n\") == \"Yes\"\nassert solution(\"3\\nmice\\nis\\ncat\\n\") == \"Yes\"\nassert solution(\"4\\nneih\\nneih\\nneih\\neih\\n\") == \"No\"\nassert solution(\"5\\nneih\\neih\\neih\\neih\\neih\\n\") == \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma\\n') == 'No'\n\"\"\"\nn = int(input())\nfor i in range(n):\n    stdin = input()\n    if stdin == 'Yes':\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma\\n') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"10\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\\nchocolate\") == \"Yes\"\nassert solution(\"2\\ncat\\nthe\\ncat\") == \"Yes\"\nassert solution(\"1\\ncat\\nthe\\ncat\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\nassert solution('4\\nhoge\\neng\\nhoge\\nenigma') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\neenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\neasdfg\\nhoge\\nenigma\") == \"Yes\"\nassert solution(\"5\\nhoge\\neasdfg\\neasdfg\\nhoge\\nenigma\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\\n\") == \"No\"\nassert solution(\"3\\napple\\norange\\nbanana\\n\") == \"Yes\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 1') == '1'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '6'\nassert solution('3 3') == '6'\n\n'''"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"10 10\") == \"25\"\nassert solution(\"10 10\") == \"25\""
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"6\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"6\"\nassert solution(\"2 3\") == \"6\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution) == '6'\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 5\") == \"18\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"zebra\") == \"zebra\"\nassert solution(\"kitten\") == \"kittek\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"maze\") == \"xzzzmzzzzzmz\"\nassert solution(\"buzz\") == \"xzzzbzzbzz\"\nassert solution(\"mim\") == \"xzzzmzzzzzzzzzmim\"\nassert solution(\"me\") == \"xzzzmzzzzzzzzzzm\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABCD\") == \"ABCD\", \"ABCD is correct.\"\nassert solution(\"sardine\") == \"xxxxxx\", \"sardine is correct.\"\nassert solution(\"Aardvark\") == \"xxxxxx\", \"Aardvark is correct.\"\nassert solution(\"Coder\") == \"Cxoderxo\", \"Coder is correct.\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"robin\") == \"xoxxro\"\nassert solution(\"r\") == \"r\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nassert solution('We Are Happy') == 'xWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxWxW"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('sardine') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"hannah\") == \"xxxxxhnannn\"\nassert solution(\"hello\") == \"xxxxxelll\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"8\") == \"No\"\nassert solution(\"0\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == 'Yes'\n\n'''\n\n'''\nApproach:\n    \nFirst, we need to calculate the maximum height for each square from left to right.\n\nthen, we need to do two operations:\n    - If the square is smaller than its left neighbor, then we should check if the square is smaller than its right neighbor.\n    - If it is smaller than its right neighbor, we should check if the square is smaller than its left neighbor.\n\nWe can remove the duplicates and then see if the heights are decreasing from left to right.\n\n'''\n\n'''"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'Yes'\nassert solution('10') == 'No'\nassert solution('4') == 'Yes'\nassert solution('3') == 'No'\nassert solution('2') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 1 3\\n') == 'Yes\\n', 'Wrong answer'\nassert solution('6\\n1 2 1 1 1 1\\n') == 'No\\n', 'Wrong answer'\nassert solution('1\\n1\\n') == 'Yes\\n', 'Wrong answer'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('10\\n1 2 1 1 3 5 4 6 7') == 'No'\nassert solution('20\\n1 2 1 1 3 5 4 6 7 8 9') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'Yes'\nassert solution('10') == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 1 3\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 3 1 4\\n\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n1 2 1 1 3\\n') == 'No'\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == \"1\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 -10\") == \"1\"\nassert solution(\"2 3 1\") == \"0\"\nassert solution(\"2 3 2\") == \"1\"\nassert solution(\"2 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 -10') == '1'\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom test_utils import *\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('3 5 -20\\n3 3 3 1\\n1 2 2 1\\n1 2 3 1\\n1 2 2 2\\n1 2 1 1\\n2 2 1 1\\n2 1 1 1') == '2'\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == \"1\"\nassert solution(\"4 2 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n2 1 2\\n\") == \"1\"\nassert solution(\"6 2 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n2 1 2\\n3 2 2\\n\") == \"3\"\nassert solution(\"12 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n2 1 2\\n3 2 2\\n4 3 2\\n\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\") == \"1\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 2 2\") == \"0\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('2 3 -10\\n3 2 1\\n1 2 2\\n1 2 2') == '2'"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 -10') == '1'\nassert solution('2 3 1') == '0'\n\n'''"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10000') == '100'"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '100'\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12') == '2'\nassert solution('20') == '1'\nassert solution('1000') == '0'\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"15\") == \"2\"\nassert solution(\"20\") == \"2\"\nassert solution(\"30\") == \"3\"\nassert solution(\"35\") == \"4\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('100') == '100'\n\nInput:\n100\nOutput:\n2\n\n\"\"\"\nfrom math import log10"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1900') == '100'\nassert solution('10000') == '100'\nassert solution('19999') == '100'\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '0'"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '100'\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"100\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n20\n30\n40\n50\n60''') == '2'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3 5 2\n4 5''') == '9'\nassert solution('''4\n3 6 1\n5 4\n3 5\n6 1''') == '10'\nassert solution('''2\n3 5 2\n4 5\n3 5''') == '7'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2\") == \"9\"\nassert solution(\"2 3 5 2\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\nassert solution('3') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n3 5 2\n4 5\"\"\") == \"9\"\nassert solution(\"\"\"3\n5 4\n1 2 3 4 5\"\"\") == \"8\"\nassert solution(\"\"\"3\n5 4\n1 2 3 4 5\"\"\") == \"8\"\nassert solution(\"\"\"4\n5 4\n1 2 3 4 5\"\"\") == \"8\"\nassert solution(\"\"\"4\n5 4\n1 2 3 4 5\"\"\") == \"8\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n3 5 2\n4 5\n''') == '9'"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string=\"2\") == \"9\"\nassert solution(input_string=\"3 5 2\") == \"9\"\nassert solution(input_string=\"4 5\") == \"11\"\nassert solution(input_string=\"4 5\") == \"11\"\nassert solution(input_string=\"1\") == \"1\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\nassert solution(\"1\\n1 1 1\\n2 2\") == \"2\"\nassert solution(\"1\\n1 1 1\\n2 2\") == \"1\"\n\nInput\n2\n3 5 2\n4 5\nOutput\n9\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"3 2 10 20\") == \"War\"\n\n\"\"\"\n\nn, m, x, y = map(int, input().split())\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if i < x and j < y:\n            pass\n        else:\n            print(\"No War\")\n            exit(0)\n\nprint(\"War\")\n\n\"\"\"\nOutput:\nn, m, x, y = map(int, input().split())\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if i < x and j < y:\n            pass\n        else:\n            print(\"No War\")\n            exit(0)\n\nprint(\"War\")\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 10 20') == 'No War'\nassert solution('3 2 10 20') == 'War'\nassert solution('3 2 10 20') == 'War'"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 10 20') == 'War'\nassert solution('3 2 10 20') == 'No War'\nassert solution('4 1 3 9') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 10 20') == 'No War'\nassert solution('3 2 10 20') == 'War'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'War'\nassert solution('4 5 6') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 10 20') == 'War'\nassert solution('3 3 5 1') == 'No War'\n\n'''"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 10 20') == 'War'\nassert solution('3 2 10 20') == 'No War'\nassert solution('6 7 4 10') == 'War'"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 10 20') == 'No War'\nassert solution('3 2 12 50') == 'War'\nassert solution('3 2 12 60') == 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\") == \"No War\"\nassert solution(\"3 2 15 20\") == \"No War\"\nassert solution(\"3 2 15 16 20\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 10 20') == 'War'\nassert solution('3 2 10 20') == 'No War'\nassert solution('3 2 10 20') == 'War'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6'\nassert solution
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n3\n\n''') == '6'\nassert solution('''3\n2\n4\n\n''') == '6'\nassert solution('''4\n2\n5\n\n''') == '9'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('2\\n2\\n4') == '5'\nassert solution('2\\n3\\n3') == '5'\nassert solution('2\\n3\\n5') == '4'\nassert solution('2\\n4\\n3') == '4'\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n\"\n    \"3\"\n) == \"6\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '18'\n'''\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"1\\n3\\n3\") == \"6\"\nassert solution(\"2\\n1\\n2\") == \"10\"\nassert solution(\"2\\n2\\n1\") == \"10\"\nassert solution(\"2\\n3\\n2\") == \"8\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"60\"\nassert solution(\"5\") == \"1440\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n4\\n3\") == \"3\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n5') == '7'\nassert solution('2\\n3\\n2') == '4'\nassert solution('2\\n3\\n1') == '1'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n3\n''') == \"0\"\nassert solution('''3\n1\n2\n''') == \"1\"\nassert solution('''7\n5\n6\n''') == \"3\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2') == '0'\nassert solution('3\\n1 2 3') == '0'\nassert solution('2\\n2 3') == '1'\nassert solution('2\\n3') == '1'\nassert solution('2\\n-1 -2') == '1'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"5\\n1 2 3 2 5\") == \"1\"\nassert solution(\"10\\n1 2 3 2 4 5 6 7 8 9 10\") == \"0\""
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nprint(solution(\"3 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\"))\nprint(solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\"))\nprint(solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\"))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution('''4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"4 3\") == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\n\nassert solution('''\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '2'\n\nassert solution('''\n3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"3 4\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"5 4\") == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution('''4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '0'\nassert solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution('''4 3\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3 3\n3 2 1\n1 2 3\n4 5 6\n''') == '6'\nassert solution(\n'''\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '2'\nassert solution(\n'''\n3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n''') == '0'\nprint(solution(\n'''\n10 9 10 9\n9 8 8 7\n6 5 4 3\n'''))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"99\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"5\""
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == \"5\"\nassert solution(input_2) == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '5'\nassert solution('2') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '5'\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n4 3 2 1''') == '3'\nassert solution('''2\n1 100''') == '99'\nprint('All tests passed!')\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(6, *map(int, stdin.split())) == 5\nassert solution(2, *map(int, stdin.split())) == 99\n\n\n------Task------\nThe goal of this task is to check the correctness of the solution.\n\nYou could test the correctness of your code by typing `nosetests -v test1.py` in the terminal.\n\n\n------Detail------\n\n### Solution\n\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\nprint(solution(input))\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nassert solution('''\n5\n1 0 1 0 1\n''') == '2'\nassert solution('''\n6\n0 1 0 1 1 0 1\n''') == '3'\nassert solution('''\n7\n1 0 1 1 1 0 1\n''') == '0'\nassert solution('''\n3\n0 0 0\n''') == '0'"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n1 0 1 0 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6\n0 1 0 1 1 0\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6\n0 1 0 1 1 0\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n7\n0 0 0\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n3\n0 0 0\n\"\"\"\n) == \"0\""
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 0 1 0 1\n''') == '2'\n\nassert solution('''6\n0 1 0 1 1 0\n''') == '2'\n\nassert solution('''3\n0 0 0\n''') == '0'\n\nassert solution('''4\n0 0 0\n''') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\""
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\nassert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0 1\\n\") == \"3\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 0 1 0 1\n''') == '2'\nassert solution('''6\n0 1 0 1 1 0\n''') == '3'\nassert solution('''3\n0 0 0\n''') == '0'\nassert solution('''7\n1 0 1 1 1 0 1\n''') == '3'"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '3'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('8') == '0'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n3\n5\n4\n10\n12\n15\n''') == '0'"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('7') == '0'"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n\n6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n\n9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"8\") == \"3\"\n\n'''"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(input())\n        d = {}\n        for _ in range(n):\n            cheese, type = input().split()\n            d[cheese] = type\n        return len(set(d.values()))\n\n\nsolution = Solution().solution\n\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == \"3\"\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n') == \"4\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(['brie soft', 'camembert soft', 'feta soft', 'goat soft','muenster soft', 'asiago hard', 'cheddar hard', 'gouda hard','swiss hard']) == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == \"3\", \"3\"\nassert solution('6') == \"4\", \"4\""
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('6') == '4'\nassert solution('7') == '6'\nassert solution('10') == '7'\n\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"3\"\nassert solution(\"6\") == \"4\""
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"3\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\"\"\") == \"4\"\n\n\"\"\"\n\n1. Read and split data\n\n2. Use two dictionaries, one to store all the cheeses, and the other to store the types of each cheese.\n\n3. If a type is present in both dictionaries, increment the count for the given type.\n\n4. Print the number of cheeses with a given type.\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n\") == \"1 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1\\n') == '1 0 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2'\nassert solution('''\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 0 0 2 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0 0 0 1 0 2'\nassert solution('7') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8\n4 2 0 5 3 2 1\n1 0 1 2\n\n''') == '0 0 0 1 0 2 4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2'\n\nassert solution('''\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1 0 0 2'\nassert solution('7') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 1 2 1\n3 2 1 1\n\n''') == '1 0 0 2 \n\nassert solution('''\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\n''') == '0 0 0 1 0 2 4"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0\\n1\\n1\\n0') == '0'\nassert solution('1\\n0\\n1\\n0') == '1'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0\\n1\\n1\\n0') == '0'\nassert solution('1\\n1\\n1\\n0') == '0'\nassert solution('0\\n0\\n1\\n0') == '1'\nassert solution('1\\n0\\n1\\n0') == '1'\nassert solution('0\\n0\\n0\\n1') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"1\"\n\n'''"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(['0', '1', '1', '0']) == '0'\n\nimport sys\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([0, 1, 1, 0]) == 0\nassert solution([1, 0, 0, 1]) == 1\n\"\"\"\n\nimport io\nimport unittest\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1\\n') == '1'\nassert solution('1\\n1') == '1'\n\n---\n\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def solve(self, stdin: str) -> str:\n        pass\n    \n    def solve_part(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''0\n1\n1\n0''') == '0'\nassert solution('''1\n1\n1\n0''') == '0'\nassert solution('''1\n0\n1\n1''') == '0'\nassert solution('''1\n0\n0\n1''') == '1'\nassert solution('''1\n0\n1\n0''') == '1'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('10 15 80') == 'No'\nassert solution('1 1000 10') == 'Yes'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2 10\") == \"Yes\"\nassert solution(\"100 5 30\") == \"Yes\"\nassert solution(\"1 10 10\") == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 15 5\") == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 12 80') == 'No'\nassert solution('1 1 1') == 'Yes'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 100') == 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 15\") == \"Yes\"\nassert solution(\"100 1000\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 15 90\") == \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1000 10 20\") == \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'Yes', \"Wrong\"\nassert solution('1000 15 80') == 'Yes', \"Wrong\"\nassert solution('1000 10000 15 80') == 'Yes', \"Wrong\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'No'\nassert solution('89') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'No'\nassert solution('7') == 'No'\nassert solution('89') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'No'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\") == \"Yes\"\nassert solution(\"74 99 75\\n77 99 11\\n69 99 10\\n7\\n99\\n10\\n82\\n81\\n74\") == \"No\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"89\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\\n\"\nassert solution(\"11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n\") == \"No\\n\""
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n') == 'Yes'\nassert solution('0\\n0\\n0\\n0\\n0') == 'No'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n') == 'Yes'\nassert solution('0\\n0\\n0\\n0\\n0') == 'No'"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '30'\nassert solution('41 2') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '-1'\nassert solution('1 2') == '30'\nassert solution('1 2') == '30'"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''41 2\n5 6\n''') == '30'\nassert solution('''1 10\n1 1\n''') == '10'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('41 2') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\nassert solution(\"41 2\\n3 2\") == \"1\"\nassert solution(\"40 3\\n5 3\") == \"2\"\nassert solution(\"40 3\\n0 1\") == \"1\"\nassert solution(\"41 2\\n3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '30'\nassert solution('42 2') == '30'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"30\", \"Wrong result for sample case!\"\nassert solution(\"41 2\") == \"30\", \"Wrong result for sample case!\"\nassert solution(\"41 3\") == \"30\", \"Wrong result for sample case!\"\nassert solution(\"41 4\") == \"30\", \"Wrong result for sample case!\"\nassert solution(\"41 5\") == \"30\", \"Wrong result for sample case!\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3\\n10 20 30 40\\n') == '30'\nassert solution('4 3\\n10 20 30 40\\n') == '30'\nassert solution('4 3\\n10 20 30 40\\n') == '30'\nassert solution('4 3\\n10 20 30 40\\n') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('41 2\\n5 6') == '30'\nassert solution('41 2\\n1 2') == '-1'\n\"\"\"\nimport math"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"30\"\nassert solution(\"41 2\") == \"30\"\nassert solution(\"41 1\") == \"31\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 5') == '5'\nassert solution('1 2') == '2'\nassert solution('0 1') == '1'\nassert solution('0 2') == '2'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 5') == '5'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '5'\nassert solution('0 1') == '5'\nassert solution('0 1 2') == '2'\nassert solution('0 1 2 3') == '3'\nassert solution('0 1 2 3 4') == '4'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '5'\nassert solution('0 5') == '5'\nassert solution('0 0') == '5'\nassert solution('0 1') == '5'\nassert solution('2 2') == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 5\\n') == '5'\nassert solution('1 2\\n') == '1'\nassert solution('2 3\\n') == '2'\nassert solution('3 4\\n') == '4'\nassert solution('4 5\\n') == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\nassert solution(\"0 1\\n\") == \"1\"\nassert solution(\"0 2\\n\") == \"2\"\nassert solution(\"0 3\\n\") == \"3\"\nassert solution(\"0 4\\n\") == \"4\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '5'\nassert solution('0 5') == '5'"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 5') == '5'\nassert solution('0 1') == '1'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 5') == '5'\nassert solution('0 10') == '1'\nassert solution('1 2') == '2'\nassert solution('0 2') == '2'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n6 5 7 8\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6\n6 7 8 9\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n6 5 7\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n5 3\n\"\"\") == \"1\""
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"15\") == \"5\"\nassert solution(\"23\") == \"7\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n7 6 8\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n7 3 4\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n10 2 8\n\n\"\"\") == \"2\""
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('7') == '2'\nassert solution('10') == '1'\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\nassert solution(\"3\\n9 8 10\") == \"2\"\nassert solution(\"1\\n\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000\") == \"2\"\n\n'''"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '3 1 2'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3 1 2\"\nassert solution(\"3 2 1\") == \"3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\nassert solution('10\\n5 1 3 2 7 4') == '5 1 7 3 2 4'"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"5\") == \"1 3 2 4 5\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"3 1 2\"\nprint(\"You're all set!\")"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"3\") == \"3 1 2\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '3 1 2'\nassert solution('3\\n2 1') == '1 2 3'"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n2 3 1\"\"\") == \"3 1 2\"\nassert solution(\"\"\"4\n1 3 2 4\"\"\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3\n''') == '3'\nassert solution('''5 3 2\n''') == '2'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"1 2 0\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"7 7 100\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"20 40 60 80\") == \"20\"\nassert solution(\"20 80 80 80\") == \"20\"\nassert solution(\"10 3 100\") == \"0\"\nassert solution(\"10 7 200\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 7 100') == '9'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 7 100''') == '9'\nassert solution('''10 10 10''') == '0'\nassert solution('''10 100 100''') == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 7 100') == '9'\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"10 7 100\"\n) == \"9\"\n\nassert solution(\n    \"10 1 100\"\n) == \"10\"\n\nassert solution(\n    \"10 10 100\"\n) == \"0\"\n\nassert solution(\n    \"10 1 1\"\n) == \"0\"\n\nassert solution(\n    \"10 1 100\"\n) == \"0\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3,1,2,3]) == '2'\nassert solution([2,2,2,2]) == '1'\nassert solution([3,2,3,2]) == '0'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n100 90 150\\n\") == \"2\"\nassert solution(\"2 3\\n1 2 1\\n\") == \"1\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 1\n1 3\n1 3\n1 3''') == '2'\nassert solution('''4 5\n4 2\n2 1\n1 2\n2 2\n3 3''') == '4'\nassert solution('''10 10\n10 9\n9 10\n9 10\n9 10\n9 8\n8 9\n7 10\n6 9\n6 10\n5 9\n5 8\n4 8\n4 9\n4 9''') == '10'\nassert solution('''100 150\n150 140 100 200\n200 150 100 100\n100 150 100 100\n150 140 100 100\n100 150 100 100\n100 150 100 100\n150 140 100 100\n100 140 100 100\n100 150 100 100\n150 140 100 100\n100 140 100 100\n100 140 100 100\n100 140 100 100\n150 140 100 100\n100 140 100 100\n100 140 100 100\n100 140 100 100\n150 140 100 100\n100 140 100 100\n100 140 100 100\n150 140 100 100\n100 140 100 100\n100 140 100 100\n100 140 100 100\n100 140 100 100\n150 140 100 100\n100 140 100 100\n100 140 100 100\n150 140 100 100\n100 140 100 100\n100 140 100 100\n100 140 100 100''') == '100'\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\nprint(solution('''4 150\n150 140 100 200'''))\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 150\") == \"2\""
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Yes', 'Should return Yes'\nassert solution('4 1') == 'No', 'Should return No'"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == 'Yes'\nassert solution('5 1') == 'No'\nassert solution('4 1') == 'Yes'\nassert solution('5 1') == 'Yes'\nassert solution('1 1') == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"5 5\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == 'Yes', 'Should return Yes if number of votes equals to the total number of votes.'\nassert solution('4 1') == 'No', 'Should return No if number of votes is less than the total number of votes.'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n5 4 2 1\\n') == 'Yes'\nassert solution('4\\n2\\n5 4 2 1\\n') == 'No'\n\"\"\"\nimport math"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == 'Yes'\nassert solution('5 1') == 'No'\nassert solution('5 5') == 'No'\nassert solution('10 3') == 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"3 2\") == \"Yes\"\nassert solution(\"3 2\") == \"Yes\"\nassert solution(\"6 1\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"8 7 5 3\\n1 2 4 5 6 7 8\\n2 5 4 3\") == \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n5 4 2 1\n''') == 'Yes'\nassert solution('''\n4 1\n5 4 2 1\n''') == 'No'\nassert solution('''\n4 1\n4 4 2 1\n''') == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"8 1\") == \"Yes\""
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == '5'"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 2') == '5'\nassert solution('7 9 1') == '5'\nassert solution('7 9 4') == '0'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 2') == '5'\nassert solution('6 4 4') == '13'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5 2\n###\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '5'\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 2') == '5'\nassert solution('2 3 2') == '4'\nassert solution('1 1 1') == '2'\nassert solution('1 2 2') == '2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 2') == '5'\nassert solution('3 3 2') == '5'"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 2 2\n..#\n###\n''') == \"5\"\nassert solution('''\n5 6 1\n##.#\n##.#\n##.#\n##.#\n##.#\n''') == \"1\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\") == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\nassert solution('''6 1 1\n..#\n###\n''') == '5'\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == '2'\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"2020 2042\") == \"1\"\nassert solution(\"2000 2000\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"2000 2200\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2020 2040') == '2'\nassert solution('123 5678') == '5'\n\n\"\"\"\n\nL, R = list(map(int, input().split()))\n\ni = 0\nwhile True:\n    if L <= i < R:\n        if L % i == 0 and R % i == 0:\n            print(i)\n            break\n    i += 1"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2020 2040\\n\") == \"2\"\nassert solution(\"2020 2041\\n\") == \"\""
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2020 2040\\n\") == \"2\""
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2020 2040') == '2'\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2020 2040') == '2'\nassert solution('2020 2100') == '4'\nassert solution('2020 1040') == '10'\nassert solution('2020 1130') == '3'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\", \"Wrong answer\"\n\nIn the other case, I just found that you can't create a for loop in Python\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 'AC', 'WA'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABCD') == 'AC'\nassert solution('AACC') == 'WA'\nassert solution('A') == 'AC'\nassert solution('AB') == 'WA'\nassert solution('AC') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtcoBcer\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ATCODER') == 'AC'\nassert solution('LOLOL') == 'WA'\nassert solution('ACACBCD') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == \"AC\", \"Should be AC\"\nassert solution(\"ATCODER\") == \"WA\", \"Should be WA\"\nassert solution(\"AbCdEf\") == \"WA\", \"Should be WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC', solution\nassert solution('ABC') == 'WA', solution\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 'AC'\nassert solution('AtCoder') == 'WA'\nassert solution('AtCODER') == 'WA'\nassert solution('AtcodER') == 'WA'\nassert solution('AtCoder123') == 'WA'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1324\") == \"1333224444\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1324\") == \"1333324444\"\nassert solution(\"13241214\") == \"132\"\nassert solution(\"1324121422\") == \"1\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"1212\") == \"2\"\nassert solution(\"1212\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1214') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"123456789\") == \"56789\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1234567890\") == \"567890\"\nassert solution(\"123456789\") == \"56789\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1324') == '1'\nassert solution('1214') == '2'"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1215\") == \"0\"\nassert solution(\"1216\") == \"4\"\nassert solution(\"1217\") == \"5\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"14\") == \"0\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES'\nassert solution('5\\n5 2 3 4 1') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 3 4 1') == 'YES', solution\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"3 5 2 4 1\") == \"NO\"\nassert solution(\"3 4 1 5 2\") == \"NO\"\nassert solution(\"9 3 2 1 4 8 7 5 6\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('10 2 3 4 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('2 1 4 3 5') == 'NO'\nassert solution('2 1 5 4 3') == 'NO'\n\n----------------------------------------------------------------------\nThere are at least two possible permutations that can be obtained from the sequence [1, 2, 3, 4, 5]: {1, 2, 3, 4, 5}, {1, 5, 2, 4, 3}, and {1, 3, 2, 4, 5}. However, no permutation of the sequence can be obtained by swapping any two numbers.\n\nThe goal of this problem is to find the smallest number of swaps required to sort the sequence.\n\nYou have a list of N integers, where N is an input.\n\nYou need to find out the minimum number of swaps that you need to make to sort the list.\n\nNote that N is not an ordered list, and the integers may be repeated.\n\nInput\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test case contains a single line of input, containing N, the length of the list.\n\nOutput\nFor each test case, print a single line containing a single integer denoting the minimum number of swaps required to sort the sequence.\n\nConstraints\n1 \\leq T \\leq 100\n1 \\leq N \\leq 100\n1 \\leq N \\leq 100\n\nExample Input\n2\n4\n2\n3\n1\n\nExample Output\n1\n2\n\nNOTE: The output should always be a single line, and each number in the output must be an integer.\n\nExplanation\nTestcase 1:\nTestcase 1 contains only one test case.\n\nExplanation:\nTestcase 1:\nThe given sequence is {2, 3, 1}.\n\nSo the sequence has to be sorted in ascending order by swapping the 1st and the 3rd elements, and then the 2nd and the 3rd elements, and finally the 1st and the 3rd elements.\n\nSo the minimum number of swaps required is 2.\n-----------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        swaps = 0\n        i = 0\n        n = len(nums)\n        while i < n:\n            if nums[i]!= i+1:\n                tmp = nums[i]\n                nums[i] = nums[tmp-1]\n                nums[tmp-1] = tmp\n                swaps += 1\n                i = 0\n            else:\n                i += 1\n        return swaps\n\nimport heapq\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n        for i in range(len(nums)):\n            if i!= heapq.heappop(heap):\n                return -1\n        return len(nums)\n\nimport heapq\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        d = {}\n        heap = []\n        for i,num in enumerate(nums):\n            d[num] = i\n            heapq.heappush(heap, num)\n        res = 0\n        for i in range(len(nums)):\n            if i!= d[heapq.heappop(heap)]:\n                res += 1\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        d = {}\n        heap = []\n        for i,num in enumerate(nums):\n            d[num] = i\n            heapq.heappush(heap, num)\n        res = 0\n        for i in range(len(nums)):\n            if i!= d[heapq.heappop(heap)]:\n                res += 1\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        n = len(nums)\n        d = {}\n        for i in range(n):\n            d[nums[i]] = i\n        res = 0\n        for i in range(n):\n            if nums[i]!= i+1:\n                nxt = i+1\n                while nxt!= nums[i] and nxt!= nums[d[nxt]]:\n                    nxt = d[nxt]\n                res += d[nxt]!= i+1\n                d[nums[i]] = i\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        n = len(nums)\n        d = {}\n        for i in range(n):\n            d[nums[i]] = i\n        res = 0\n        for i in range(n):\n            nxt = i+1\n            while nxt!= nums[i] and nxt!= nums[d[nxt]]:\n                nxt = d[nxt]\n            if nxt!= i+1:\n                res += 1\n                d[nums[i]] = i\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        n = len(nums)\n        d = {}\n        for i in range(n):\n            d[nums[i]] = i\n        res = 0\n        for i in range(n):\n            nxt = i+1\n            while nxt!= nums[i] and nxt!= nums[d[nxt]]:\n                nxt = d[nxt]\n            if nxt!= i+1:\n                res += 1\n                d[nums[i]] = i\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        n = len(nums)\n        d = {}\n        for i in range(n):\n            d[nums[i]] = i\n        res = 0\n        for i in range(n):\n            nxt = i+1\n            while nxt!= nums[i] and nxt!= nums[d[nxt]]:\n                nxt = d[nxt]\n            if nxt!= i+1:\n                res += 1\n                d[nums[i]] = i\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        n = len(nums)\n        d = {}\n        for i in range(n):\n            d[nums[i]] = i\n        res = 0\n        for i in range(n):\n            nxt = i+1\n            while nxt!= nums[i] and nxt!= nums[d[nxt]]:\n                nxt = d[nxt]\n            if nxt!= i+1:\n                res += 1\n                d[nums[i]] = i\n        return res\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        n = len(nums)\n        d = {}\n        for i in range(n):\n            d[nums[i]] = i\n        res = 0\n        for i in range(n):\n            nxt = i+1\n            while nxt!= nums[i] and nxt!= nums[d["
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n12345\n''') == '2'\nassert solution('''\n3121\n''') == '2'\nassert solution('''\n6\n''') == '1'\nassert solution('''\n1000000000000000000000000000000000\n''') == '33'\nassert solution('''\n201920181\n''') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\nassert solution('37') == '1'\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3121\"\n) == \"2\"\nassert solution(\n    \"6\"\n) == \"1\"\nassert solution(\n    \"201920181\"\n) == \"4\"\nassert solution(\n    \"1000000000000000000000000000000000\"\n) == \"33\"\nassert solution(\n    \"2|0|1|9|201|81\"\n) == \"2\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"91929383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949383949"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''201920181\n1000000000000000000000000000000000\n''') == '4'\n\nassert solution('''3121\n1000000000000000000000000000000000\n''') == '2'\n\nassert solution('''201920181\n''') == '4'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 2 3\n2 4 7 11 3\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n13 37 39\n1 2 3\n\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n0 0 0 0\n1 2 3\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n0 0 0 0\n1 2 3\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '3'\nassert solution('4') == '0'\nassert solution('3') == '3'"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n2 4 7 11 3\n''') == \"2\"\nassert solution('''\n3\n1 2 3\n1 2 3\n''') == \"0\"\nassert solution('''\n4\n0 0 0 0\n1 2 3\n''') == \"0\""
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '0'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\n\nassert solution('''\n3\n1 2 -1\n-6 -12 6\n''') == '0'\n\nassert solution('''\n4\n0 0 0 0\n1 2 3 4\n''') == '3'\n\nassert solution('''\n3\n1 2 3\n2 4 7\n''') == '0'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '3'\nassert solution('''4\n0 0 0 0\n1 2 3\n''') == '0'\nassert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n2 4 7 11 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n2 4 7 11 3\n\"\"\") == \"2\"\nassert solution(\"\"\"3\n13 37 39\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"4\n0 0 0 0\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"3\n1 2 -1\n-6 -12 6\n\"\"\") == \"3\""
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n2 4 7\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n0 0 0 0\n1 2 3\n\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 2 3\n2 4 7\n\n\"\"\") == \"3\""
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3''') == '2'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '0'\nassert solution('''4\n0 0 0 0\n1 2 3\n-6 -12 6\n''') == '3'"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5\\nabaca?b\\nzabbbcc\\n'\n) == '5\\n7 8\\n2 3\\n4 6\\n7 4\\n1 2'\nassert solution(\n    '7\\nabaca?b\\nzabbbcc\\n'\n) == '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2'\nassert solution(\n    '10\\ncode??????\\n??????test'\n) == '0\\n'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\ncodeforces\ndodivthree\n\nOutput\n5\n7 8\n4 9\n2 2\n9 10\n3 1\n\nInput\n7\nabaca?b\nzabbbcc\n\nOutput\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nInput\n9\nbambarbia\nhellocode\n\nOutput\n0\n''') == '10'\nassert solution('''\n10\ncodeforces\ndodivthree\n\nOutput\n5\n7 8\n4 9\n2 2\n9 10\n3 1\n\nInput\n7\nabaca?b\nzabbbcc\n\nOutput\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nInput\n9\nbambarbia\nhellocode\n\nOutput\n0\n''') == '6'\nassert solution('''\n10\ncodeforces\ndodivthree\n\nOutput\n5\n7 8\n4 9\n2 2\n9 10\n3 1\n\nInput\n7\nabaca?b\nzabbbcc\n\nOutput\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nInput\n9\nbambarbia\nhellocode\n\nOutput\n0\n''') == '5'\nassert solution('''\n10\ncodeforces\ndodivthree\n\nOutput\n5\n7 8\n4 9\n2 2\n9 10\n3 1\n\nInput\n7\nabaca?b\nzabbbcc\n\nOutput\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nInput\n9\nbambarbia\nhellocode\n\nOutput\n0\n''') == '4'\nassert solution('''\n10\ncodeforces\ndodivthree\n\nOutput\n5\n7 8\n4 9\n2 2\n9 10\n3 1\n\nInput\n7\nabaca?b\nzabbbcc\n\nOutput\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nInput\n9\nbambarbia\nhellocode\n\nOutput\n0\n''') == '2'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"7\") == \"6 2\"\nassert solution(\"9\") == \"6 2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"7\") == \"6 2\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\nbambarbia\nhellocode\n''') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '0'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"6 2\"\nassert solution(\"10\") == \"10 9\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('7') == '6'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11\\n!a#b\\nabca?b') == '5'\nassert solution('11\\nabca?b\\n!a#b\\n#a#b') == '4'\nassert solution('11\\nabca?b\\n!a#b\\n?a#b') == '0'\nassert solution('11\\nabca?b\\na#b\\n#a#b') == '10'\nassert solution('11\\nabca?b\\na#b\\n#a#b') == '6'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n5') == '5 5 5 5 5'\nassert solution('4\\n1 2 3') == '4 4 4'\nassert solution('3\\n-3 5 1') == '3 4'\nassert solution('2\\n-3 -2') == '2 3'\nassert solution('2\\n1 3') == '2 3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == '3'\nassert solution('11') == '4 4 4 4 4'\nassert solution('-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2 4 4 4 4 4'"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n''') == '2'\nassert solution('''\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n''') == '4'\nassert solution('''\n3\n1\n2\n5\n4\n''') == '2'\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) in {'3 4', '4 4', '1 1', '2 2', '3 3', '4 5'}\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n4 1 2 2 1 5 3\n\"\"\"\n    ) == \"3 7 7 2 3\"\nassert solution(\n\"\"\"\n7\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\"\n    ) == \"3 4 4 1 1\"\nassert solution(\n\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n    ) == \"1 1 3 3 5\"\nassert solution(\n\"\"\"\n6\n0 1 1 2 2 3\n\"\"\"\n    ) == \"2 3 4 2 3\"\nassert solution(\n\"\"\"\n10\n3 4 4 5 7 1 2 3 4 6 5 7 4 6 8 9 10\n\"\"\"\n    ) == \"5 8 9 10 10 9 10 7 1 1 5 3 5 6\""
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n4 1 2 2 1 5 3\n''') == '3'\n\nassert solution('''\n5\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '4'\n\nassert solution('''\n6\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '3'\n\nassert solution('''\n9\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8\n''') == '2'\n\nassert solution('''\n10\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10\n''') == '4'"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"4 4 4 4 4 4 4\"\nassert solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2 3\""
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"7\\n\"\n    \"4 1 2 2 1 5 3\"\n) == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\n    \"7\\n\"\n    \"-5 -4 -3 -2 -1 0 1 2 3 4 5\"\n) == \"2\\n3 4\\n1 1\\n2 2\\n3 3\\n4 5\"\nassert solution(\n    \"3\\n\"\n    \"4 5 1 1\"\n) == \"4\\n4 4\"\nassert solution(\n    \"6\\n\"\n    \"1 2 3 4\"\n) == \"1\"\nassert solution(\n    \"5\\n\"\n    \"1 2 3 4\"\n) == \"2\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"11\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"3 4 4 4 4 4 4\"\nprint('TEST CASE FINISHED')"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 11') == '7'\nassert solution('4 2') == '12'\nassert solution('5 2') == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 11\n45 1 10 12 11 7\n''') == '7'\n\nassert solution('''4 2\n2 78 4 10\n''') == '12'\n\nassert solution('''5 2\n3 7 19 3 3\n''') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 11\n45 1 10 12 11 7\n\n''') == '7'\n\nassert solution('''\n4 2\n2 78 4 10\n\n''') == '12'\n\nassert solution('''\n5 2\n3 7 19 3 3\n\n''') == '0'\n\n\"\"\"\nfrom math import gcd\nfrom itertools import combinations\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 7\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([5, 2]) == '12'\nassert solution([4, 2]) == '0'\nassert solution([6, 11]) == '7'\nassert solution([11, 2]) == '0'\nassert solution([6, 4]) == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '7'\nassert solution(input()) == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"0\"\nassert solution(\"6 11\") == \"7\"\nassert solution(\"4 2\") == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '7'\nassert solution('5 2') == '12'\nassert solution('5 2') == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 11\\n\") == \"7\"\nassert solution(\"4 2\\n\") == \"12\"\nassert solution(\"5 2\\n\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == '7'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n\") == \"9\"\nassert solution(\"3\\n\") == \"9\"\nassert solution(\"3\\n\") == \"9\""
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '9'\nassert solution('5') == '9'\nassert solution('2') == '9'\nassert solution('2 5') == '9'\nassert solution('1 5') == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 5\n\n''') == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n2 4 -2 6') == 9\nassert solution('3\\n2 5\\n-1 -2') == 3\nassert solution('4\\n-1 2 -3 4') == 5\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"\"\nassert solution(\"3\") == \"9\"\nassert solution(\"2\") == \"9\"\nassert solution(\"5\") == \"9\""
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 5 6\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(\"\"\"\n5\n-1 -2 -3 -4 -5\n\"\"\") == \"\"\"\n0\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\\\n3\n2 5\n\n\"\"\") == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 5\") == \"9\"\nassert solution(\"3\\n3 2 1\") == \"3\"\nassert solution(\"5\\n1 3 2 4 5\") == \"9\""
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"9\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\") == \"110\"\nassert solution(\"3 2 4\") == \"110\"\nassert solution(\"3 10 1\") == \"110\"\nassert solution(\"3 10 100\") == \"110\"\nassert solution(\"3 5 100\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 3 4') == '110'\nassert solution('2 4 3 3') == '110'\nassert solution('1 3 4 2') == '90'\nassert solution('1 3 4 2') == '90'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"110\"\nassert solution([1, 3, 4, 1, 3, 3, 100, 1, 2, 2, 10, 2, 3, 2, 10]) == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\") == \"110\"\nassert solution(\"1 1 3\") == \"11\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\") == \"110\"\nassert solution(\"1 2 2 10\") == \"110\"\nassert solution(\"1 3 3 100\") == \"110\"\nassert solution(\"1 4 3 100\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\") == \"110\"\nassert solution(\"3 3 3\") == \"110\"\nassert solution(\"4 4 4\") == \"110\"\nassert solution(\"3 1 3\") == \"110\"\nassert solution(\"1 3 3\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '110'\n\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\\n\") == \"110\""
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '110'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n10 20 30\\n') == '5'\nassert solution('2\\n1 4 6 3\\n') == '5'\nprint('You passed all the tests!')"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == ''\nassert solution('3') == '1 1'\nassert solution('4') == '1 4'\nassert solution('5') == '1 4'\nassert solution('10') == '1 4'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 6 3\") == \"5\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 4 6 3\n''') == '5'\nassert solution('''\n3\n-1 -2 -3\n''') == '3'\nassert solution('''\n2\n-1\n''') == '1'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\nassert solution('5\\n1 2 3 4 5') == '4'\nassert solution('20\\n1 2 3 4 5 6 7 8 9 10') == '0'\nassert solution('12\\n1 2 3 4') == '3'\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2.2761423...\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2.2761423749\"\nassert solution(\"4\") == \"4.8306539775\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n2 5\n1 1\n0 0\n2 3\n''') == '2.276142371', solution.__doc__\nassert solution('''4\n0 1\n1 1\n0 1\n2 3\n''') == '1.7320508075', solution.__doc__\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\\n0 0\\n1 0\\n0 1\") == \"2.27614\"\nassert solution(\"10\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 0\\n1 0\") == \"2.27614\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2.276142...'\nassert solution('10') == '1.985795...'\nassert solution('3') == '2.276142...'"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 0\n2 1\n3 1\n4 2\n5 3\n''') == '2.276142...'\nassert solution('''5\n1 0\n2 1\n3 1\n4 2\n5 3\n''') == '2.276142...'\nassert solution('''3\n0 0\n1 0\n2 1\n''') == '1.5'\nassert solution('''2\n0 0\n1 0\n''') == '0.25'\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2.276142...\"\nassert solution(\"4\") == \"3.33333...\"\nassert solution(\"5\") == \"3.73242...\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == \"2.276142375\"\n\nassert solution('''3\n0 0\n1 0\n0 1''') == \"2.276142375\"\n\nassert solution('''3\n0 0\n1 0\n0 1''') == \"2.276142375\"\n\nassert solution('''4\n-1000 -1000\n-2000 -1000\n-2000 -2000\n-1000 -2000''') == \"3.4298594825\"\n\nassert solution('''6\n-1000 -1000\n-1000 -2000\n-2000 -2000\n-2000 -1000\n-1000 -1000\n-2000 -1000''') == \"3.4298594825\""
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2.276142\"\n\"\"\"\n\nfrom functools import reduce\nfrom math import sqrt\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == '2.2761423749'\n\nassert solution('''5\n0 0\n1 0\n0 1\n1 0\n0 1''') == '2.2761423749'\n\nassert solution('''8\n0 0\n1 0\n0 1\n1 0\n0 1\n1 0\n0 1\n1 0''') == '2.2761423749'\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12 4') == '4'\nassert solution('13 4') == '5'\nassert solution('10 12') == '2'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12 4') == 4\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''12 4''') == '4'\nassert solution('''4 4''') == '0'\nassert solution('''16 5''') == '8'\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"10 12\") == \"12\"\nassert solution(\"20 25\") == \"12\"\nassert solution(\"40 50\") == \"12\"\nassert solution(\"20 50\") == \"12\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12 4') == '4'\nassert solution('5 6') == '5'\nassert solution('3 6') == '3'\nassert solution('16 10') == '16'\nassert solution('100 200') == '100'\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12 4') == '4'\nassert solution('16 8') == '16'\nassert solution('20 8') == '12'\n\n---Output---\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 4') == '4'\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"30 4\") == \"8\"\nassert solution(\"100 6\") == \"30\"\nassert solution(\"20 4\") == \"14\"\nassert solution(\"100 100\") == \"100\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 10') == '0'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('10') == '2'\nassert solution('100') == '2'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('1000') == '5'\nassert solution('123456789') == '8'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '2'\nassert solution('10000') == '3'\nassert solution('100') == '1'\nassert solution('10000100') == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"10\"\nassert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"10000\") == \"10000\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"100\") == \"3\"\nassert solution(\"10000\") == \"5\"\nassert solution(\"1000000\") == \"6\""
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10000') == '3'\n'''"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"4\"\nassert solution(\"1000\") == \"9\"\nassert solution(\"1234\") == \"1\"\nassert solution(\"12345\") == \"1\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10000') == '3'"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2') == '1'\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([[2,1,3], [3,1,2], [2,3,2]]) == 1\nassert solution([[2,1,3], [3,1,2], [2,3,2], [2,2,1]]) == 3\nassert solution([[2,1,3], [3,1,2], [2,3,2], [3,2,1], [2,2,3]]) == 4\nassert solution([[2,1,3], [3,1,2], [2,3,2], [3,2,1], [2,2,3], [3,2,1], [2,2,3], [3,2,1]]) == 6\nassert solution([[2,1,3], [3,1,2], [2,3,2], [3,2,1], [2,2,3], [3,2,1], [2,2,3], [3,2,1], [3,2,1]]) == 8\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4') == '1'\nassert solution('3 4') == '1'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '1'\nassert solution('4 6') == '4'\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '1'"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 1\") == \"2\""
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '1'\nassert solution('1 1') == '0'\nassert solution('2 1 3') == '1'\nassert solution('3 1 2 3') == '2'\nassert solution('2 3 2') == '2'\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3 4\n    2 1 3\n    3 1 2 3\n    2 3 2\n    ''') == '1'\nassert solution('''\n    5 5\n    5 1 3\n    4 5 2\n    3 5 2\n    5 1 3\n    4 5 2\n    ''') == '3'\nassert solution('''\n    10 2\n    1 1 1\n    2 1 2\n    3 1 3\n    4 1 4\n    5 1 5\n    6 1 6\n    7 1 7\n    8 1 8\n    9 1 9\n    10 1 10\n    ''') == '5'\nassert solution('''\n    6 4\n    3 1 1\n    4 1 2\n    5 1 3\n    6 1 4\n    7 2 1\n    8 1 2\n    9 1 3\n    10 1 4\n    ''') == '10'\nassert solution('''\n    7 3\n    1 1 1\n    2 1 2\n    3 1 3\n    4 1 4\n    5 1 5\n    6 1 6\n    7 1 7\n    8 1 8\n    9 1 9\n    10 1 10\n    ''') == '3'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1\n2\n3''') == '0.5000000000000001'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '0.5000000000'\nassert solution('1') == '0.500000000'\nassert solution('2') == '0.500000000'\nassert solution('3') == '0.500000000'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.5000000000\"\nassert solution(\"2\") == \"0.50000000\"\nassert solution(\"3\") == \"0.50000000\"\nassert solution(\"4\") == \"0.50000000\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5000000000'\nassert solution('1') == '0.5'\nassert solution('2') == '0.5000000000'\nassert solution('3') == '0.5000000000'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == '0.5000000000'\n\nprint(solution(None))\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.5'\nassert solution('5') == '0.25'\nassert solution('6') == '0.166666666666666666667'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.33333333333333333333333333'\nassert solution('4') == '0.5'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.5000000000'\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0.5'\nassert solution('3') == '0.3333333333'\nassert solution('4') == '0.25'"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '4'\nassert solution('10\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '9'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '1'"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"5\"\nassert solution(\"7\") == \"6\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 1\\n1\\n1 1\\n1') == '2'\nassert solution('4\\n1 2 1\\n1\\n1 1\\n1\\n1 1') == '3'\nassert solution('3\\n1 0 1\\n1 1 1\\n1') == '1'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1\n2 1\n1\n1 1\n1\n2 0\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1\n2 1\n1\n1 1\n1\n2 0\n\n\"\"\") == \"3\"\nassert solution(\"\"\"\n7\n1\n2 1\n1\n1 1\n1\n2 0\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('4\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '3'\nassert solution('5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '4'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('4\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '3'\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '8'\nassert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '1',\n    'nikoandsolstice',\n])) == 'nikoand...', 'Should truncate to nikoand...'\n\nassert solution('\\n'.join([\n    '1',\n    'nikoandsolstice',\n])) == 'nikoandsolstice', 'Should start with nikoandsolstice'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"35\") == \"35\"\nassert solution(\"43\") == \"43\"\nassert solution(\"10\") == \"10\"\nassert solution(\"01\") == \"01\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"nikoand\""
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"nikoandsolstice\"\nassert solution(\"9\") == \"nikoandsolstice\"\nassert solution(\"9\") == \"nikoandsolstice\"\nassert solution(\"nikoandsolstice\") == \"nikoandsolstice\"\nassert solution(\"nikoandsolstice\") == \"nikoandsolstice\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"nikoandsolstice\"\n\n\"\"\"\n\n\n\"\"\"\n\ucc38\uace0 \uc790\ub8cc: https://monogoroboy.tistory.com/65\n\ucc38\uace0 \uc790\ub8cc: https://www.hackerrank.com/challenges/nested-list/problem\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('nikoandsolstice',7)=='nikoand...', 'Test 1 failed!'\nassert solution('doggoandgogo',7)=='doggoand...', 'Test 2 failed!'\nassert solution('a',1)=='a', 'Test 3 failed!'"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"nikoandsolstice\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abcdefgh') == 'abcdefgh'\nassert solution('abcd') == 'abcd'\nassert solution('abcdxyz') == 'abcdxyz'\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"nikonikelso\", \"Should be 'nikonikelso'.\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == 'nikoand...'\nassert solution('12') == 'nikoand...'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\"\nprint(solution(input()))\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('apple') == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\n\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('apple') == 'apples'\nassert solution('apricot') == 'apricots'\nassert solution('baa') == 'baas'\nassert solution('banana') == 'bananas'\nassert solution('bananas') == 'bananas'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\""
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"car\") == \"cars\"\nassert solution(\"dog\") == \"dogs\"\nassert solution(\"cat\") == \"cats\"\nassert solution(\"goose\") == \"gooses\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"dive\") == \"dives\"\nassert solution(\"cactus\") == \"cacti\"\nassert solution(\"tree\") == \"trees\"\nassert solution(\"grape\") == \"grapes\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"banana\") == \"bananas\"\nassert solution(\"carrot\") == \"carrots\"\nassert solution(\"cake\") == \"cakes\"\nassert solution(\"flower\") == \"flowers\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1') == '1'\nassert solution('4 3\\n2\\n1 2\\n3 3') == '3'\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\nd = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(1, n):\n    if s[i] == 0 and d[i] == 0:\n        count += 1\n        s[i] = 1\n        d[i] = 1\n        s[i-1] = 0\n        d[i-1] = 0\n\nprint(count)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('8 7') == '6'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 4\") == \"1\""
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '1'\nassert solution('3 1') == '0'\nassert solution('2 3') == '0'\nassert solution('3 3') == '1'"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"2\\n\"\n    \"1 3\\n\"\n    \"1\\n\"\n    \"3\"\n    ) == \"1\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\nd_1, a_1, *a_2 = map(int, stdin.readline().split())\nd_2, a_3, *a_4 = map(int, stdin.readline().split())\nd_3, a_5, *a_6 = map(int, stdin.readline().split())\na_7 = map(int, stdin.readline().split())\n\nassert len(a_1) == len(a_2) == len(a_3) == len(a_4) == len(a_5) == len(a_6) == len(a_7) == k\n\na_1.sort()\na_2.sort()\na_3.sort()\na_4.sort()\na_5.sort()\na_6.sort()\na_7.sort()\n\na_1.insert(0, 0)\na_2.insert(0, 0)\na_3.insert(0, 0)\na_4.insert(0, 0)\na_5.insert(0, 0)\na_6.insert(0, 0)\na_7.insert(0, 0)\n\na_1.append(a_1[-1] + d_1)\na_2.append(a_2[-1] + d_2)\na_3.append(a_3[-1] + d_3)\na_4.append(a_4[-1] + d_4)\na_5.append(a_5[-1] + d_5)\na_6.append(a_6[-1] + d_6)\na_7.append(a_7[-1] + d_7)\n\nmax_a_1 = max(a_1)\nmax_a_2 = max(a_2)\nmax_a_3 = max(a_3)\nmax_a_4 = max(a_4)\nmax_a_5 = max(a_5)\nmax_a_6 = max(a_6)\nmax_a_7 = max(a_7)\n\nmax_a_1_idx = a_1.index(max_a_1)\nmax_a_2_idx = a_2.index(max_a_2)\nmax_a_3_idx = a_3.index(max_a_3)\nmax_a_4_idx = a_4.index(max_a_4)\nmax_a_5_idx = a_5.index(max_a_5)\nmax_a_6_idx = a_6.index(max_a_6)\nmax_a_7_idx = a_7.index(max_a_7)\n\nprint(max_a_1_idx + 1, max_a_2_idx + 1, max_a_3_idx + 1, max_a_4_idx + 1, max_a_5_idx + 1, max_a_6_idx + 1, max_a_7_idx + 1)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 1') == '0'\nassert solution('3 3') == '2'\n\"\"\"\n\nN, K = list(map(int, stdin.split()))\nd_i = {}\nfor i in range(1, N + 1):\n    d_i[i] = []\nfor i in range(1, K + 1):\n    d_i[i] = list(map(int, stdin.split()))\n\nsum_d_i = []\nfor i in range(1, N + 1):\n    sum_d_i.append(sum(d_i[i]))\n\nprint(sum(sum_d_i))"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '5'\nassert solution('11') == '0'\nassert solution('21') == '0'\nassert solution('22') == '0'\nassert solution('31') == '0'\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"9\"\nassert solution(\"aabbbbaaca\") == \"8\""
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"5\"\n\n'''"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"6\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\naabbbbaaca\") == \"5\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == ''\nassert solution('6') == '2'\nassert solution('8') == '1'\nassert solution('10') == '2'\nassert solution('2') == ''\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"aabbbbaaca\") == \"5\"\nassert solution(\"1\") == \"0\"\nassert solution(\"ababc\") == \"2\"\nassert solution(\"abbbc\") == \"2\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\\n\") == \"3\"\nassert solution(\"5\\n1 2 3 4\\n\") == \"4\""
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5 2 4') == '3'\nassert solution('3') == '3'"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(100000)\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"5 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('5 2 4') == '3'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('5 2 4') == '3'\nassert solution('10') == '10'"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == '0'\n\nfor n in range(2, 10):\n    for i in range(1, 10):\n        pass\n\nN = int(input())\nA = list(map(int, input().split()))\n\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n5 2 4\n''') == \"3\"\nassert solution('''3\n7 2 4\n''') == \"3\"\nassert solution('''3\n5 2 4\n''') == \"3\""
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n5 2 4''') == '3'\nassert solution('''4\n3 2 4''') == '2'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2') == '3'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('2 2 1 3') == '3'"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('1 2 1 3') == '3'\nassert solution('2 2 2 3') == '4'\nassert solution('1 1 2 3') == '3'\nassert solution('2 3 4 1') == '5'\n\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('1 2 1 3') == '3'\nassert solution('1 2 3 3') == '4'\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 2 -3\") == \"3\"\nassert solution(\"3 2 2 -3\") == \"2\"\nassert solution(\"4 2 2 2 -3\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1 1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 4 4 4 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 1 1 4\") == \"1\"\nassert solution(\"2 1 1 5\") == \"1\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"5 5 2\") == \"1\"\nassert solution(\"1 1 1 3\") == \"2\"\n\n===============================================\n\nFind the minimum number of cars we need to transport for each truck.\n\n1) The truck is loaded with one car. If we want to transport 2 cars, we need 2 trucks.\n2) If we want to transport 3 cars, we need 4 trucks.\n3) If we want to transport 4 cars, we need 5 trucks.\n4) If we want to transport 5 cars, we need 6 trucks.\n5) If we want to transport 6 cars, we need 7 trucks.\n6) If we want to transport 7 cars, we need 8 trucks.\n\nConsider the following cases:\nCase 1)\n2\n\nCase 2)\n2\n\nCase 3)\n4\n\nCase 4)\n4\n\nCase 5)\n5\n\nCase 6)\n6\n\nCase 7)\n7\n\nCase 8)\n8\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A, B, C, D, E\n - A \\leq 1\n\n-----Input-----\nA B C D E\n\n-----Output-----\n2\n\nConsider picking up two cars with 1s and one car with a 0.\nIn this case, the minimum number of trucks we need is 2, which is the minimum possible value.\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('2 3') == 'No'\nassert solution('3 4') == 'Yes'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\nassert solution(\"4 6\") == \"Yes\"\n\n\"\"\"\n\nX, Y = map(int, stdin.split())"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"10 1\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\n\"\"\"\n\nstdin = input()\nstdin = stdin.split(' ')\nX = int(stdin[0])\nY = int(stdin[1])\n\ncrane = 0\nturtle = 0\n\nfor i in range(X):\n    if (i + 1) % 3 == 0:\n        crane += 1\n    elif (i + 1) % 4 == 0:\n        turtle += 1"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"3 4\") == \"Yes\"\nassert solution(\"4 5\") == \"Yes\"\nassert solution(\"5 6\") == \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 8') == 'Yes'\nassert solution('10 20') == 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('4 8') == 'Yes'\nassert solution('10 3') == 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"Yes\"\nassert solution(\"5 6\") == \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 3], \"1 2\", \"1 3\", \"2 3\") == \"2\"\n'''\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '2'\nassert solution('1 2') == '2'\nassert solution('1 3') == '2'\nassert solution('2 3') == '1'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n1 2\n1 3\n2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n'''"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n'''"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 2\n1 3\n2 3\n''') == '2'\nassert solution('''3 4\n1 2\n1 3\n2 3\n''') == '1'\nassert solution('''5 4\n1 2\n1 3\n2 3\n4 5\n''') == '2'\n'''\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3') == '2'\nassert solution('1 2\\n1 3') == '2'\nassert solution('1 2\\n1 3') == '2'\nassert solution('1 2\\n1 3') == '2'\nassert solution('1 2\\n1 3') == '2'\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 2\n1 3''') == '2'\n\nassert solution('''2 3\n1 2\n1 3\n2 3\n''') == '2'\n'''\nclass Graph:\n    def __init__(self,vertices):\n        self.graph = defaultdict(list)\n        self.vertices = vertices\n\n    def addEdge(self,u,v):\n        self.graph[u].append(v)\n\n    def dfsUtil(self,v,visited):\n        visited[v]=True\n        print(v,end ='')\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.dfsUtil(i,visited)\n\n    def dfs(self,v):\n        visited = [False]*self.vertices\n        self.dfsUtil(v,visited)\n\n    def printGraph(self):\n        print(self.graph)"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([[1,2],[1,3],[2,3]]) == \"2\"\nassert solution([[1,2],[1,3],[2,3],[2,4],[3,4]]) == \"3\"\nassert solution([[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6]]) == \"4\"\nassert solution([[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8]]) == \"5\"\nassert solution([[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50]]) == \"41\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 1\n2 2\n3 3\n4 4\n5 5''') == '18'\nassert solution('''1 1\n3 3\n2 3\n1 2\n4 4''') == '10'\nassert solution('''5 2\n1 2\n3 3\n4 4\n5 5''') == '11'\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"18\"\nassert solution(\"2 5\") == \"16\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"12\"\nassert solution(\"7 4\") == \"13\"\nassert solution(\"100 10\") == \"100\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"18\"\nassert solution(\"5 3\") == \"12\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([5, 2]) == \"18\"\nassert solution([10, 1]) == \"9\"\nassert solution([5, -1]) == \"8\"\nassert solution([1, 5]) == \"0\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([[-1, 1, 2, 3, 4, 5, 6], 2]) == '18'\nassert solution([[-100, 1, 2, 3, 4, 5, 6], 2]) == '0'\nassert solution([[-100, 1, 2, 3, 4, 5, 6], 0]) == '0'\nassert solution([[-100, 1, 2, 3, 4, 5, 6], -100]) == '0'\nassert solution([[-100, 1, 2, 3, 4, 5, 6], 200]) == '2320'\n\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '18', 'Wrong answer'\nassert solution('8 10') == '34', 'Wrong answer'\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"18\"\nassert solution(\"3 4\") == \"6\"\nassert solution(\"5 2\") == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"18\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '18'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == stdout\n\"\"\"\nimport math\nfrom functools import reduce"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2') == '2'\nassert solution(\n    '15') == '60'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n5\n7\n8\n11\n13\n14\n15\n''') == '60'\nprint(solution('''\n10\n'''))\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2\nFizz\n4\nBuzz''') == '60'\nassert solution('''15\n3\nFizz\n5\nBuzz''') == '95'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('15') == '60'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4\\n4\\n4\\n4'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input := '1\\n') == '1\\n2\\nFizz\\n4\\nBuzz\\nFizz\\n7\\n8\\nFizz\\nBuzz\\n11\\nFizz\\n13\\n14\\nFizzBuzz\\n'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('15') == '60', 'Check your code'\n\"\"\"\n\nN = int(input())\nFizzBuzz = [1]\nfor i in range(1, N):\n    if i % 3 == 0 and i % 5 == 0:\n        FizzBuzz.append(FizzBuzz[i - 1] + \"FizzBuzz\")\n    elif i % 5 == 0:\n        FizzBuzz.append(FizzBuzz[i - 1] + \"Buzz\")\n    elif i % 3 == 0:\n        FizzBuzz.append(FizzBuzz[i - 1] + \"Fizz\")\n    else:\n        FizzBuzz.append(FizzBuzz[i - 1] + str(i))\n\nprint(' '.join(map(str, FizzBuzz)))"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('15') == '60'\nassert solution('2') == '1,2'\nassert solution('-1') == '1'\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\nassert solution(\"50\") == \"FizzBuzz\"\nassert solution(\"1\") == \"1\"\n\n----------------------------------------------------------------------\nOutput:\n    --Result-1--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-2--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-3--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-4--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-5--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-6--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-7--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-8--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-9--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-10--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-11--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-12--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-13--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\n----------------------------------------------------------------------\nOutput:\n    --Result-14--\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nassert solution('20 10\\n10 20 30 20 50') == '30'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n6 5\n4 7 10 6 5\n''') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n4 7 10 6 5\") == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5\\n7 10 6 5') == '8'\nassert solution('6 5\\n4 7 10 6 5') == '8'\nassert solution('9 5\\n7 10 6 5') == '7'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n4 5') == '8'\nassert solution('1 2\\n6 7') == '8'\nassert solution('1 2\\n4 7') == '5'\nassert solution('1 2\\n4 7') == '8'\nassert solution('1 2\\n4 7') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6\\n6 7 10 6 5\\n') == '8'\nassert solution('8 5\\n4 7 10 6 5\\n') == '6'\n\n---\nSample Input---\n3\n3\n1 2 5\n3\n1 5\n3\n1 5\n\n---\nSample Output---\n1\n\nAmong the integers not contained in the sequence 1, 2, 5, the one nearest to 3 is 1.\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == '8'\nassert solution('3 5') == '6'\nassert solution('2 5 10') == '8'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 7 10 6 5') == '8'\nassert solution('1 3 5 2') == '1'"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '6'"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\", \"2\"\nassert solution(\"2 2\") == \"1\", \"2\"\nassert solution(\"3 2\") == \"1\", \"2\"\nassert solution(\"2 3\") == \"2\", \"3\"\nassert solution(\"3 2\") == \"2\", \"2\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2\\n2 1') == '1'\nassert solution('2 3\\n1 2') == '1'\nassert solution('3 3\\n1 2') == '0'"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '4'\nassert solution('1 2') == '3'\nassert solution('2 1') == '2'"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('10 10') == '1'\nassert solution('20 20') == '1'\nassert solution('10 10') == '1'\nassert solution('10 10') == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1', 'Should return 1'\nassert solution('2 4') == '2', 'Should return 2'\nassert solution('3 3') == '0', 'Should return 0'"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"5 5\") == \"9\""
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"7 7\") == \"9\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"12 20\") == \"2\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"5 5\") == \"4\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 4') == '6'\nassert solution('7 2') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 4\n3 7 5 1 10 3 20\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n7 2\n3 7 5 1 10 3 20\n\"\"\") == \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"-1\"\nassert solution(\"7 4\") == \"6\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 4') == '6'\nassert solution('7 2') == '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20\n''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''3\n-1 -1\n''') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n3 7 5 1 10 3 20\n''') == '6'\n\nassert solution('''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\n\nassert solution('''\n7 2\n5 4\n5 5\n''') == '-1'\n\nassert solution('''\n8 2\n4 5 7 1 8 9\n''') == '8'\n\nassert solution('''\n8 1\n5 5 7 2 8 9\n''') == '5'"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n7 4\n3 7 5 1 10 3 20\n\"\"\") == \"6\"\nassert solution(\"\"\"\n7 2\n3 7 5 1 10 3 20\n\"\"\") == \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\n''') == '3'\nassert solution('''\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\n''') == '-1'\nassert solution('''\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\n''') == '-1'\nassert solution('''\n3 3\n*.*\n.*.\n*.*\n\n''') == '3'\nassert solution('''\n1 1\n*\n''') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***.\\n.*...\\n.*...\\n.....\\n\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n.*...\\n.*.\\n.*..\\n.*..\\n.*..\\n.*..\") == \"2\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\n''') == '3'\nassert solution('''\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\n''') == '3'\nassert solution('''\n3 3\n*.*\n.*.\n*.*\n\n''') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 8\") == \"3 4 1\"\nassert solution(\"5 5\") == \"3 4 1\"\nassert solution(\"5 5\") == \"3 4 1\"\nassert solution(\"2 2 1\") == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6 8\\n\"\n    \"....*...\\n\"\n    \"...**...\\n\"\n    \".*****.\\n\"\n    \"...**...\\n\"\n    \"....*...\\n\"\n    \"........\\n\"\n) == \"3\\n\"\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \".****\\n\"\n    \".*...\\n\"\n    \".....\\n\"\n) == \"3\\n\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 8') == '3 4 1'\nassert solution('5 5') == '3 3 1'\nassert solution('3 3') == '-1'\n\nassert solution('5 5') == '3 3 1'"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\nassert solution(\"5 5\\n.*.*\\n*.*\\n*.*\\n.*.*\\n\") == \"3\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\n6 8\n*...*\n****.\n..****\n...*..\n....*..\n........\n\nOutput\n3\n3 4 1\n3 5 2\n3 5 1\n''') == '3'\n\nassert solution('''\\\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\nOutput\n3\n2 2 1\n3 3 1\n3 4 1\n''') == '3'\n\nassert solution('''\\\n5 5\n*.*\n**.*\n*.*\n**.*\n.....\n\nOutput\n-1\n''') == '-1'\n\nassert solution('''\\\n3 3\n*.*\n*.*\n*.*\n\nOutput\n2\n2 2 1\n''') == '2'\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 8') == '3 4 1'\nassert solution('5 5') == '3 3 1'\nassert solution('3 3') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('aabc') == 'ab'\nassert solution('ab') == 'ab'\nassert solution('ababc') == 'ab'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nabc\\n') == 'a'\nassert solution('2\\nab\\n') == 'a'\nassert solution('3\\naaa\\n') == 'a'\nassert solution('4\\nabc\\n') == ''\nassert solution('5\\nab\\n') == 'ab'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\", \"Empty string should return empty string.\"\nassert solution(\"a\") == \"a\", \"One character should return itself.\"\nassert solution(\"aaaa\") == \"a\", \"Four characters should return itself.\"\nassert solution(\"aaabb\") == \"a\", \"Two adjacent characters should return one character.\"\nassert solution(\"aaabcc\") == \"a\", \"Two adjacent characters should return one character.\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\ngood') == '0'\nassert solution('4\\ngood') == '0'\nassert solution('2\\ngood') == '1'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('good\\n') == '\\n'\nassert solution('\\n') == ''\nassert solution('aaa\\n') == 'aaa'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"good\") == \"good\"\nassert solution(\"good\") == \"good\"\nassert solution(\"good\") == \"good\"\nassert solution(\"aabc\") == \"aabc\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\ngood\") == \"0\"\nassert solution(\"3\\naaa\") == \"3\"\nassert solution(\"2\\nab\") == \"2\""
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\ngood\\n') == '0'\nassert solution('3\\nabc\\n') == '2'\nassert solution('4\\nabc\\n') == '3'\nassert solution('4\\nbcd\\n') == '2'\nassert solution('4\\nabc\\n') == '3'\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"good\") == \"\"\nassert solution(\"bad\") == \"bad\"\nassert solution(\"aa\") == \"a\"\nassert solution(\"aaab\") == \"aa\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\nassert solution() == \"ab\"\nassert solution() == \"def\"\n\n\"\"\"\n\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES'\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n0101'\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\"\"\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'YES', 'Check Example #1'\nassert solution('6 6\\n1 2\\n1 2\\n1 3\\n1 3\\n1 4\\n1 4\\n1 5\\n1 5\\n2 6\\n2 6\\n3 4\\n3 4\\n4 6\\n4 6\\n5 6\\n5 6\\n6 6\\n') == 'NO', 'Check Example #2'\nassert solution('6 7\\n1 2\\n2 3\\n1 3\\n1 4\\n4 2\\n5 1\\n2 5\\n5 3\\n3 6\\n6 4\\n') == 'NO', 'Check Example #3'\nassert solution('1 1\\n2 2\\n3 3\\n') == 'YES', 'Check Example #4'\nassert solution('5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n') == 'YES', 'Check Example #5'\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES'\nassert solution('''\n5 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'NO'\n\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES'\nassert solution('''\n7 6\n1 2\n1 3\n2 1\n2 4\n3 4\n3 1\n4 1\n4 3\n''') == 'NO'\n''')\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"YES\"\nassert solution(input_, log) == \"NO\"\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n1 3\n2 3\n''') == \"NO\"\nassert solution('''\n3\n1 2\n1 3\n2 3\n''') == \"YES\"\nassert solution('''\n5\n1 2\n1 3\n3 1\n2 4\n4 1\n4 3\n''') == \"YES\"\n''')\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\"\"\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nassert solution('1 7') == '0'"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n1 2\\n2 2\\n1 5') == '1 4\\n'\nassert solution('1 7\\n1 7') == '0\\n'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    3 5\n    2 2\n    1 2\n    5 5\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n    1 7\n    1 7\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\n2 2\n1 2\n5 5\n''') == '2'\nassert solution('''1 7\n1 7\n''') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\\n3 4\\n\"\nassert solution(\"3 7\") == \"1 2 5\\n\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 5\n2 2\n1 2\n5 5\n''') == '2'\nassert solution('''1 7\n1 7\n''') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 7') == '2'\nassert solution('1 7') == '0'\nassert solution('3 5') == '2'\nassert solution('2 2') == '1'\nassert solution('1 2') == '3 4'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5') == '2 4'\nassert solution('1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 1 1\n''') == '2'\nassert solution('''\n1 2 2 3\n''') == '2'\nassert solution('''\n1 2 3 4\n''') == '0'\nassert solution('''\n3 1 2 3\n''') == '1'\nassert solution('''\n3 1 2 4\n''') == '1'\n'''\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 2 3') == '5'\nassert solution('1 1 2 2') == '3'\nassert solution('1 1 2 3') == '1'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '1', 'Case 1'\nassert solution('1 1 1 2 2') == '2', 'Case 2'\nassert solution('1 1 1 1 1 1 2') == '3', 'Case 3'\nassert solution('1 1 1 1 1 1 1 2') == '4', 'Case 4'\nassert solution('1 1 1 1 1 1 1 1 2') == '5', 'Case 5'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 10 1 10') == '10'\nassert solution('4 4 4 2') == '1'\nassert solution('1 10 1 9') == '1'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '2'\nassert solution('1 10 7') == '9'\nassert solution('4 9 2 3') == '2'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 9 2 3\n''') == '2'\nassert solution('''10 11 1 2\n''') == '2'\nassert solution('''12 3 4 5\n''') == '3'\nassert solution('''5 11 2 3\n''') == '4'\nassert solution('''10 2 1 3\n''') == '3'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '5'\nassert solution('2 4 6 8') == '5'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 2 2') == '1'\nassert solution('6 5 3 2') == '5'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('5 9 2 3') == '2'\nassert solution('7 8 2 3') == '1'\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('11553399') == 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('8888899999999999') == 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234567890') == 'No'\n'''\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('13579') == 'No'\nassert solution('1111') == 'Yes'\nassert solution('9999') == 'No'\nassert solution('1234') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234567890') == 'No'\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234567') == 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n--------------------------------------------------"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('123456789') == 'Yes'\nassert solution('1234567890') == 'No'\nassert solution('12345678901234567890') == 'Yes'\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"4\"\nassert solution(\"19\") == \"4\"\nassert solution(\"1000\") == \"4\"\nassert solution(\"987\") == \"2\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"127\") == \"4\""
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n''') == '4'\nassert solution('''\n20\n''') == '6'\nassert solution('''\n100000\n''') == '7'\nassert solution('''\n100\n''') == '1'"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('127') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == '4'\n\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"4\"\nassert solution(\"1000\") == \"5\"\nassert solution(\"10000\") == \"8\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('20') == '2'\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('127') == '4'\nassert solution('5') == '2'"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('9') == '3'\nassert solution('36') == '3'\nassert solution('81') == '2'\nassert solution('10000') == '0'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"kyoto\") == \"No\"\nassert solution(\"tokyo\") == \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n'''"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('kyoto') == 'tokyo'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\nassert solution('tokyo') == 'kyoto'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"aa\") == \"1\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('abcd') == '0'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"abxcd\") == \"1\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''cabacc\nabc''') == '1'\nassert solution('''rzqxzpzm\nytqzjjp''') == '3'\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''cabacc\nabc''') == '1'\nassert solution('''asdffff\nffgfffff''') == '1'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n1\\n') == '2'\nassert solution('10\\n1\\n1\\n') == '1'\nassert solution('7\\n9\\n1\\n') == '1'\nassert solution('6\\n10\\n2\\n') == '2'\n\n'''"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 12 2') == '2'\nassert solution('7 4 2') == '2'\nassert solution('4 8 2') == '4'\nassert solution('5 4 2') == '1'\nassert solution('1 2 2') == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 12 2') == '2'\nassert solution('5 8 9 1') == '5'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"8 12 2\") == \"2\"\nassert solution(\"10 4 3\") == \"3\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 12 2''') == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 10 3\") == \"2\"\nassert solution(\"2 15 4\") == \"2\"\nassert solution(\"1 9\") == \"10\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 3 2\") == \"2\"\nassert solution(\"1 3 3\") == \"3\"\nassert solution(\"1 3 2 2\") == \"3\"\nassert solution(\"1 3 2 4\") == \"2\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n\") == \"20\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000') == '2020'\nassert solution('1500') == '1750'\nassert solution('1000') == '2020'\nassert solution('1200') == '1350'\nassert solution('8') == '12'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"2020\""
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1024') == '2020'\n\nfrom math import floor\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1024') == '2020'\nassert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000') == '2020'\nassert solution('200') == '100'\nassert solution('10') == '2'\nassert solution('2') == '1'\nassert solution('100') == '200'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''X\n''') == '2020'\nassert solution('''Y\n''') == '0'\nassert solution('''X\n''') == '0'\nassert solution('''X\nY\n''') == '0'\nassert solution('''X\nY\n''') == '0'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000') == '2020'\nassert solution('500') == '2000'\nassert solution('100') == '200'\nassert solution('5') == '60'\nassert solution('1') == '60'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('1024') == '2024'\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"123\") == \"120\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 4\n''') == '5'\nassert solution('''\n3\n1 5 4\n''') == '7'\nassert solution('''\n4\n2 1 6 4\n''') == '6'\nassert solution('''\n5\n1 2 4 1\n''') == '5'\nassert solution('''\n6\n1 2 2 1 3 5\n''') == '6'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == '5'\nassert solution(\"2\") == '4'\nassert solution(\"3\") == '3'\nassert solution(\"4\") == '2'\nassert solution(\"5\") == '1'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5'\nassert solution('1') == '4'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 4\") == \"5\""
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '5'\nassert solution('3') == '4'"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '5'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"2\") == \"5\"\nassert solution(\"2\") == \"5\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '5'\nassert solution('2') == '3'\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '5'\n'''"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 4') == '4'\nassert solution('3 3') == '2'\nassert solution('1 3') == '4'\nassert solution('2 6') == '2'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '4'"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 20\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"100 20\") == \"10\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 10') == '3'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"2 5\") == \"2\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"3\"\nassert solution(\"10 10\") == \"5\""
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == \"3\", \"Wrong answer\"\n\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('SSR') == '2'\nassert solution('CSR') == '1'\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"S\") == \"2\"\nassert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\nassert solution(\"CRS\") == \"2\"\nassert solution(\"CRS\") == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\nassert solution(\"CCR\") == \"1\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\""
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CSR') == '2'\nassert solution('CSS') == '2'\nassert solution('CS') == '0'"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\nassert solution('CC') == '0'\nassert solution('CCS') == '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 3 5 4 2\n''') == '2'\nassert solution('''\n20\n7 5 8 4 2 1 6 3 9 13 10 12\n''') == '8'\nassert solution('''\n10\n7 6 5 8 4 2 1 3 9 13 10 12\n''') == '2'\nassert solution('''\n10\n7 8 5 6 4 2 3 9 13 10 12\n''') == '4'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('20\\n1 3 5 4 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '22'\nassert solution('5\\n5 3 1 4 2 2') == '3'\nassert solution('3\\n1 2 3') == '1'\nassert solution('2\\n1 3') == '1'\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\nassert solution(\"10\\n1 1 2 1 3 1 4 2 4 4 5 5 5 5 6 6 6 6 7 7 7 7 7 8 8 8 8 9 9 9 9 9 10 10 10 10 10 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 14 14 14 14 14 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 18 18 18 18 18 19 19 19 19 19 20 20 20 20 20 21 21 21 21 21 22 22 22 22 22 23 23 23 23 23 24 24 24 24 24 25 25 25 25 25 26 26 26 26 26 26 27 27 27 27 27 28 28 28 28 28 29 29 29 29 29 29 30 30 30 30 30 30 31 31 31 31 31 32 32 32 32 32 33 33 33 33 33 34 34 34 34 34 35 35 35 35 35 35 36 36 36 36 36 37 37 37 37 37 37 38 38 38 38 38 39 39 39 39 39 40 40 40 40 40 40 41 41 41 41 41 42 42 42 42 42 43 43 43 43 43 44 44 44 44 44 45 45 45 45 45 46 46 46 46 46 47 47 47 47 47 48 48 48 48 48 49 49 49 49 49 50 50 50 50 50 51 51 51 51 51 52 52 52 52 52 53 53 53 53 53 54 54 54 54 54 55 55 55 55 55 56 56 56 56 56 57 57 57 57 57 58 58 58 58 58 59 59 59 59 59 60 60 60 60 60 61 61 61 61 61 62 62 62 62 62 63 63 63 63 63 64 64 64 64 64 65 65 65 65 65 65 66 66 66 66 66 67 67 67 67 67 68 68 68 68 68 69 69 69 69 69 70 70 70 70 70 71 71 71 71 71 72 72 72 72 72 73 73 73 73 73 74 74 74 74 74 75 75 75 75 75 76 76 76 76 76 77 77 77 77 77 78 78 78 78 78 79 79 79 79 79 80 80 80 80 80 81 81 81 81 81 82 82 82 82 82 83 83 83 83 83 84 84 84 84 84 85 85 85 85 85 85 86 86 86 86 86 86 87 87 87 87 87 88 88 88 88 88 89 89 89 89 89 90 90 90 90 90 91 91 91 91 91 92 92 92 92 92 93 93 93 93 93 94 94 94 94 94 95 95 95 95 95 96 96 96 96 96 97 97 97 97 97 98 98 98 98 98 99 99 99 99"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n1 3 5 4 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"7\") == \"3\""
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\nimport math\n\nn = int(input())\np = list(map(int, input().split()))\ncount = 0\nfor i in range(n - 2):\n    pivot_idx = i\n    for j in range(i + 1, n):\n        if p[j] < p[pivot_idx]:\n            pivot_idx = j\n    if p[i] == p[pivot_idx]:\n        continue\n    if math.ceil(p[i] / 2) == p[pivot_idx]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('2\\n1 3 5 4 2') == '0'\nassert solution('3\\n1 2 3 4 5 6 7') == '1'\nassert solution('4\\n1 2 3 4 5 6 7 8 9') == '0'"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1 3 5 4 2\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 3 5 4 2''') == '2'\nassert solution('''6\n1 3 5 4 2 8''') == '1'\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6.720'\nassert solution() == '5.480'"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n') == '6.040'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"5.480\"\nassert solution(\"5\") == \"6.040\"\nassert solution(\"8\") == \"5.480\"\nassert solution(\"5\") == \"6.040\"\nassert solution(\"10\") == \"6.040\""
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3,2,0,4,1\\n') == '5.000'\nassert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n') == '6.040'\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5.480'\nassert solution('8') == '5.420'\nassert solution('8') == '5.420'\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\"\"\") == \"5.620\"\nassert solution(\"\"\"\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\"\"\") == \"5.480\"\nassert solution(\"\"\"\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\"\"\") == \"6.040\"\nassert solution(\"\"\"\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\"\"\") == \"6.720\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"5.480\"\nassert solution(\"5\") == \"6.040\"\nassert solution(\"7\") == \"6.720\"\nassert solution(\"8\") == \"5.480\"\nassert solution(\"10.44 2.06\") == \"5.480\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '6.741'\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5.480\"\nassert solution(\"8\") == \"5.410\"\nassert solution(\"\") == \"6.020\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"6.720\"\n\nassert solution(\"\"\"\n10\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\"\"\") == \"5.620\"\nassert solution(\"\"\"\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\"\"\") == \"5.480\"\nassert solution(\"\"\"\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\"\"\") == \"6.040\"\n\n\n\"\"\"\nSample I/O:\nInput\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\nOutput\n5.410\n\nInput\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\nOutput\n5.620\n\nInput\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\nOutput\n5.480\n\nInput\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\nOutput\n6.040\n\nInput\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\nOutput\n6.040\n\nInput\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\nOutput\n6.720\n\nInput\n7\n4.23 2.05\n4.22 3.05\n4.24 3.06\n4.22 3.04\n4.23 2.05\n4.23 3.05\n4.23 3.05\n4.23 2.05\n\nOutput\n2.234\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 16') == '1'\nassert solution('5 26') == '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''7 10\n1 3 4 2 1 4 2\n''') == '2'\nassert solution('''5 16\n5 5 5 5 5\n''') == '1'\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n5 8\n2 3 1 1 2\n\"\"\") == \"4\"\nassert solution(\n    \"\"\"\n7 10\n1 3 4 2 1 4 2\n\"\"\") == \"2\"\nassert solution(\n    \"\"\"\n5 16\n5 5 5 5 5\n\"\"\") == \"1\"\nassert solution(\n    \"\"\"\n5 26\n5 5 5 5 5\n\"\"\") == \"2\"\nassert solution(\n    \"\"\"\n5 100\n1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 16\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 16\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == \"4\"\nassert solution('''5 16\n5 5 5 5 5\n''') == \"2\"\nassert solution('''5 26\n5 5 5 5 5\n''') == \"-1\""
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == '4'\nassert solution(test_input_2) == '2'\nassert solution(test_input_3) == '1'\nassert solution(test_input_4) == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 16\") == \"2\"\nassert solution(\"5 26\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4') == '7 3 1 3'\nassert solution('15 2') == '7 3 1 3'\n\nimport itertools\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"1 2\"\nassert solution(\"10 4\") == \"7 3 1 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1\n''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3\n''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\n''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6 2\n1 2 3 2 4 3 1''') == '1 2 3'\n\nassert solution('''6 3\n1 2 3 2 4 3 1''') == '1 2 3'\n\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 1''') == '1 1 1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2 3 1 3\"\n\n'''\n\nn, k = map(int, input().split())\ns = list(map(int, input().split()))\n\noutput = []"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\""
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1 2 3 2 4 3 1\n''') == '1 2 3'\n\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n9 9') == '5'\nassert solution('2 4\\n1 2 3 4') == '0'\nassert solution('6 1\\n3') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 2 3 4\n10 8\n4 3\n1 2 3 4''') == '5'\n\nassert solution('''2 4\n1 2 3 4\n10 3 7 3\n6 5 4 3''') == '0'\n\nassert solution('''6 1\n3\n6\n2\n5\n1\n4\n\nOutput\n3''') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '0'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '3'\nassert solution('''2 4\n1 2 3 4\n10 3 7 3\n''') == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example) == \"5\"\nassert solution(input) == stdout\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"0\"\nassert solution(\"4 2\") == \"5\"\nassert solution(\"6 1\") == \"0\""
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"0\"\nassert solution(\"4 2\") == \"5\"\nassert solution(\"1 2 3 4\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 2 3 4\") == \"5\"\nassert solution(\"4 3\\n1 2 3 4\") == \"3\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n') == '3'\nprint(solution(input()))\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"xxx\") == 1\nassert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxoxxxxxxx\") == 2\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nxyxyxyz\n''') == '1'\nassert solution('''6\nxxxxxx\n''') == '0'"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\", \"One\"\nassert solution(\"1\") == \"0\", \"One\"\nassert solution(\"2\") == \"1\", \"Two\"\nassert solution(\"3\") == \"2\", \"Three\"\nassert solution(\"4\") == \"3\", \"Four\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\nxxxiii\n''') == '1'\n\nassert solution('''\n10\nxxxxxxxxxx\n''') == '8'\n\nassert solution('''\n10\nxxxxx\n''') == '0'\n\nassert solution('''\n5\nxxoxx\n''') == '0'\n\nassert solution('''\n5\nxxoxx\n''') == '0'\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxxxxxx\") == 8\nassert solution(\"xoxoxxxo\") == 4\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"10\") == \"8\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == 1\nassert solution(\"5\") == 0\nassert solution(\"10\") == 8\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"10\") == \"8\"\nassert solution(\"a\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n123\n123\n''') == ''\n\nassert solution('''\n1\n2\n''') == '1'\n\nassert solution('''\n5\nxxxiii\n''') == '5'\n\nassert solution('''\n10\nxxxxxxxxxx\n''') == '8'"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\nassert solution('5') == '55'\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0', \"error\"\nassert solution('2') == '0', \"error\"\nassert solution('3') == '0', \"error\""
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"16\"\nassert solution(\"4\") == \"16\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '6'\nassert solution('4') == '8'\nassert solutionn0x0B\n0 0;]7\n0;3\n1;1\n1;2\n1;3\n1;4\n1;5\n2;3\n2;5\n2;6\n2;7\n2;8\n2;9\n2;10\n2;11\n2;12\n3;1\n3;2\n3;3\n3;4\n3;5\n4;1\n4;2\n4;3\n4;4\n4;5\n4;6\n4;7\n4;8\n5;1\n5;2\n5;3\n5;4\n5;5\n6;1\n6;2\n6;3\n6;4\n6;5\n7;1\n7;2\n7;3\n7;4\n7;5\n8;1\n8;2\n8;3\n8;4\n8;5\n9;1\n9;2\n9;3\n9;4\n9;5\n10;1\n10;2\n10;3\n10;4\n10;5\n11;1\n11;2\n11;3\n11;4\n11;5\n12;1\n12;2\n12;3\n12;4\n12;5\n13;1\n13;2\n13;3\n13;4\n13;5\n14;1\n14;2\n14;3\n14;4\n14;5\n15;1\n15;2\n15;3\n15;4\n15;5\n16;1\n16;2\n16;3\n16;4\n16;5\n17;1\n17;2\n17;3\n17;4\n17;5\n18;1\n18;2\n18;3\n18;4\n18;5\n19;1\n19;2\n19;3\n19;4\n19;5\n20;1\n20;2\n20;3\n20;4\n20;5\n21;1\n21;2\n21;3\n21;4\n21;5\n22;1\n22"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '4'\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"48\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == '8'\nassert solution(\"4\") == '16'\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"1 2\") == \"safe\"\nassert solution(\"2 3\") == \"unsafe\"\nassert solution(\"3 4\") == \"unsafe\"\nassert solution(\"5 6\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"unsafe\"\nassert solution(\"4 5\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"unsafe\"\nassert solution(\"5 7\") == \"safe\"\nassert solution(\"10 6\") == \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'unsafe'"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"0 0\") == \"safe\"\nassert solution(\"1 1\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"unsafe\"\nassert solution(\"1 2\") == \"unsafe\"\nassert solution(\"1 3\") == \"safe\"\nassert solution(\"1 4\") == \"safe\"\nassert solution(\"1 5\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"unsafe\"\nassert solution(\"3 3\") == \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'unsafe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('6 6') =='safe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\nassert solution('3 4') == '6'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"8 4 3\") == \"20\"\nassert solution(\"0 0 0\") == \"0\""
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '6'\nassert solution('4 5 6') == '10'\nassert solution('10') == '0'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4 5\") == \"6\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == '6'\nassert solution(\"2 2 2\") == '2'\nassert solution(\"1 2 3\") == '3'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"7\""
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '6'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '3 4 5'\n) == '6'\nassert solution(\n    '2 3 4'\n) == '4'\nassert solution(\n    '6 7 8'\n) == '30'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"-1 -1 -1\") == \"0\"\nassert solution(\"-100 -100 -100\") == \"0\"\nassert solution(\"10 9 5\") == \"14.0\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '2'\nassert solution('1 1 1') == '4'\nassert solution('10 20 20') == '2'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('1 2 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('2 1 1') == '4'\nassert solution('8 1 7') == '8'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 4') == '4'\nassert solution('2 11 4') == '4'\nassert solution('2 2 4') == '4'\nassert solution('2 3 4') == '1'\nassert solution('1 2 4') == '1'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 11, 4]) == '4'"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"./input.txt\") == \"4\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('1 10 100') == '1'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('1 2 3') == '3'\nassert solution('6 7 4') == '2'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('5 1 2') == '1'\nassert solution('2 10 4') == '0'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"9 10\") == \"36\""
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 5\n''') == '10'\nassert solution('''\n10 5\n''') == '20'\n'''"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"6\"\nassert solution(\"5 6\") == \"15\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 2\") == \"6\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('3 4') == '6'\nassert solution('4 4') == '8'\nassert solution('5 6') == '15'\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 4\") == \"12\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\"\nassert solution([2, 5]) == 10\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == str(int(input))\n\"\"\"\n\n\nA, B = map(int, input().split())\n\nprint(A * B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"10\", \"First Test\"\nassert solution(\"3 3\") == \"6\", \"Second Test\"\nassert solution(\"5 5\") == \"10\", \"Third Test\"\nassert solution(\"10 10\") == \"100\", \"Fourth Test\"\nassert solution(\"0 0\") == \"0\", \"Fifth Test\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 1 2\") == \"2\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10\n10\n10\n\"\"\") == \"\"\"\n10\n\n\"\"\", \"First\"\nassert solution(\"\"\"\n1\n5\n5\n\"\"\") == \"\"\"\n10\n\n\"\"\", \"Second\"\nassert solution(\"\"\"\n10\n15\n20\n\"\"\") == \"\"\"\n10\n\n\"\"\", \"Third\"\nassert solution(\"\"\"\n10\n8\n6\n\"\"\") == \"\"\"\n9\n\n\"\"\", \"Fourth\"\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"\"\"\n4\n\n\"\"\", \"Fifth\""
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"5 2 4\") == \"20\"\nassert solution(\"4 5 3\") == \"10\"\nassert solution(\"1 2 3\") == \"10\"\nassert solution(\"3 2 1\") == \"4\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == output_string"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"5\"\nassert solution(\"3 5 7\") == \"10\"\nassert solution(\"15 5 7\") == \"20\""
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5 7\n''') == '10'\nassert solution('''10\n''') == '20'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5 7\n''') == '10'\nassert solution('''1 2 3\n''') == '6'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 7') == '10'\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\""
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('1 2 3') == '6'\nassert solution('2 4 6') == '13'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3\n''') == 'OK'\nassert solution('''\n10\n2 5\n''') == 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7\\n500 600') == 'OK'\nassert solution('5 6\\n400 300') == 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'NG'\nassert solution('4') == 'OK'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('567') == 'OK'\n\nassert solution('3') == 'NG'\nassert solution('7') == 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n500 600\n\n''') == 'OK'\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"NG\"\nassert solution(\"1\") == \"NG\"\nassert solution(\"2\") == \"NG\"\nassert solution(\"3\") == \"NG\"\nassert solution(\"5\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 4\") == \"OK\"\nassert solution(\"5\\n9 9\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n') == 'OK'\nassert solution('3\\n5\\n') == 'NG'\nassert solution('6\\n4\\n') == 'OK'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"OK\"\nassert solution(\"8\") == \"NG\"\nassert solution(\"1\") == \"OK\"\nassert solution(\"2\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 7\") == \"OK\"\nassert solution(\"2 5\") == \"NG\"\nassert solution(\"100 6\") == \"NG\"\nassert solution(\"1 10\") == \"NG\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 3\n''') == '2.666666667'\n'''\nwhile t > x:\n    t -= (x * 1)\n'''\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 1\n\"\"\") == \"2.6666666667\"\nassert solution(\"\"\"\n10 1\n\"\"\") == \"3.3333333333\"\nassert solution(\"\"\"\n5 10\n\"\"\") == \"3.9999999999\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == '2.6666'\nassert solution('5 3') == '2.6666'\nassert solution('3 2') == '0.3333'\nassert solution('2 2') == '0.0000'\nassert solution('1 1') == '0.0000'\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 20 30') == '2.5'\nassert solution('10 20 30') == '2.5'\n\nNote that'solution' function should return a STRING!\n\"\"\"\nfrom math import pi\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '2.5000000000000001'\nassert solution('1') == '1.0'\nassert solution('2') == '1.0'\n'''\n\nT, X = map(int, input().split())\nprint(round(T/X, 1))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '2.5'\nassert solution('3 3\\n') == '2.75'\nassert solution('3 8\\n') == '5.0'\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3') == '2.6666666667'\nassert solution('1 5') == '1.66666667'\nassert solution('0 2') == '0.5'\n\"\"\"\nfrom math import *"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\nassert solution('-1 2\\n') == '-1.0000...'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 7') == '1'\nassert solution('7 5 8') == '3'"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([6, 4, 3]) == \"1\"\nassert solution([1, 2, 3]) == \"0\"\nassert solution([20, 30, 40]) == \"-1\"\nassert solution([1, 2, 3]) == \"0\"\nassert solution([10, 20, 50]) == \"5\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\""
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"6 5 2\") == \"1\"\nassert solution(\"5 5 4\") == \"0\"\nassert solution(\"4 5 2\") == \"0\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"10 12 3\") == \"5\""
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"10 10 10\") == \"0\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"6 4 3\") == \"1\"\n\nfor i in range(2, 100):\n    if solution(str(i) + \" \" + str(i+1) + \" \" + str(i+2)) == str(i+2):\n        print(i+2)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([6,4,3]) == \"1\"\nassert solution([2,1,3]) == \"2\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4 3') == '1'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 4 3''') == '1'\nassert solution('''3 4 5''') == '4'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2\\n') == '3'\nassert solution('4\\n2 2 2 1\\n1 2 2 1\\n') == '2'\nassert solution('2\\n1 1 1\\n1 1 1\\n') == '1'\nassert solution('3\\n1 3 2\\n3 1 2\\n') == '2'\nassert solution('1\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"2 1 3 2\") == \"1\"\n\n------------------------------------\n\nWrite a function which reverses a given string using the following operations:\nTake an empty string and then the first character of the string and insert it into the string.\nTake the second character of the string and insert it into the string.\nTake the third character of the string and insert it into the string.\nAfter performing these operations, if the length of the string is odd then reverse the last character of the string.\nIf the length of the string is even then reverse the middle characters of the string.\nLet x be the reversed string after performing the above operations.\nExamples:\nreversedString(\u201chello\u201d) = \u201colleh\u201d\nreversedString(\u201caaabbbb\u201d) = \u201cbbbbaaa\u201d\nreversedString(\u201cpqrstuvwxyz\u201d) = \u201cxyzvwprstu\u201d\nreversedString(\u201cabcd\u201d) = \u201cdcbaab\u201d\n\n--input\n5\nhello\naaabbbb\npqrstuvwxyz\nabc\n--output\nolleh\nbbbbaaa\nxyzvwprstu\ndcbaab"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 3 2\n3 1 2''') == '3'\nassert solution('''5\n1 3 2 4 5\n3 1 2 4 5''') == '2'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '3'"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('1 3 2') == '3'\nassert solution('3 1 2') == '3'\nassert solution('1 3 2 3') == '4'\nassert solution('3 3 2') == '4'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3\", \"Sample test 1\"\nassert solution(\"2 1 3\") == \"3\", \"Sample test 2\"\nassert solution(\"2 2 1\") == \"0\", \"Sample test 3\"\nassert solution(\"4 5 6\") == \"6\", \"Sample test 4\"\nassert solution(\"5 6 4\") == \"6\", \"Sample test 5\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\nassert solution('1') == '0'\nassert solution('2') == '1'"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ATCODER') == 'ATC', \"Wrong\"\n\n'''"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AACGT\") == \"A\"\nassert solution(\"CATC\") == \"AC\"\nassert solution(\"ACGT\") == \"AC\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ACGT\") == \"ACGT\"\nassert solution(\"ATCODER\") == \"ACG\""
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == \"3\"\nassert solution(\"ACGAT\") == \"3\"\nassert solution(\"ACG\") == \"1\"\nassert solution(\"TTTT\") == \"1\"\nassert solution(\"ATTT\") == \"1\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''TCODER\nATCODER\nA''') == 'ATCODER'\nassert solution('''ACBBA''') == 'AC'\nassert solution('''ACBBAACBBA''') == 'ACBBA'\nassert solution('''ACBBAACBBAACBBAACBBA''') == 'ACBBA'\nassert solution('''ACBBAACBBAACBBAACBBAACBBAACBBAACBBAACBBAACBBAACBBAACBBAACBBA''') == 'ACBBA'\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('AC') == 1\nassert solution('AA') == 1\nassert solution('AAC') == 2\nassert solution('AAAC') == 2\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == \"ACD\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 'AT'\nassert solution('ABC') == 'ABC'\nassert solution('ATCODERABC') == 'ABC'\nassert solution('ATCODERABCA') == 'ABC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == \"AT\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"12\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"50\") == \"5\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '9'\nassert solution('19') == '8'"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12\n''') == '9'\n\nassert solution('''\n1\n''') == '0'\n\nassert solution('''\n11\n''') == '9'\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '9'"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n\") == \"9\"\nassert solution(\"4\\n1\\n\") == \"0\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '9'"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"1000\") == \"9\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"11\"\n) == \"9\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '2'\nassert solution('cupofcoffee') == '1'\nassert solution('cupofhottea') == '4'\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''cupofcoffee\ncupofhottea''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\nimport math"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\nassert solution(\"cupofcoffee\") == \"cupofcoffee\"\nassert solution(\"cupofhottea\") == \"cupofhottea\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('cupofcoffee') == '4'\nassert solution('cupofhottea') == '3'\nassert solution('bcdz') == '6'\nassert solution('cafedr') == '10'\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofhottea') == 'cupofcoffee'\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\nassert solution(\"cupofcoffee\") == \"cupofcoffee\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"3 9\") == \"5 6 7 8\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nassert solution('5 7') == '5 6 7 8 9'\nassert solution('8 7') == '7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"3 2\") == \"0 1 2 3 4\"\nassert solution(\"1 5\") == \"0 1 2 3 4\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 7') == \"5 6 7 8 9\"\nassert solution('10 3') == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"4 7\") == \"5 6 7 8 9\"\nassert solution(\"3 1\") == \"1 2 3 4 5\"\nassert solution(\"1 1\") == \"1 2 3 4 5\"\nassert solution(\"3 1 2\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nassert solution('4 9') == '1 2 3 4 5 6 7 8 9'\nassert solution('2 5') == '1 2 3 4 5 6 7 8 9'\nassert solution('1 1') == '1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9'\nassert solution('4 4') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 2 1\"\nassert solution(\"4 3 2\") == \"2 3 1 4\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('-30') == 'No'\nassert solution('-40') == 'Yes'\nassert solution('30') == 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == 'Yes'\nassert solution('1') == 'No'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'Yes'\nassert solution('18') == 'No'\nassert solution('40') == 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('30') == 'Yes'\nassert solution('40') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"-5\") == \"No\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"30\") == \"Yes\"\nassert solution(\"-40\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Yes\\n'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"-4\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"-1\") == \"Yes\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"30\") == \"Yes\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"40\") == \"Yes\"\nassert solution(\"35\") == \"No\"\nassert solution(\"-40\") == \"No\"\nassert solution(\"-40\") == \"No\"\nassert solution(\"55\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"Yes\""
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('2 3') == '2'\nassert solution('2 4') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n1 2\n5 5\n-2 8\n''') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '2'\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('5 2') == '0'\nassert solution('-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"-2 8\") == \"1\""
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 2') == '0'\nassert solution('5 5') == '1'\nassert solution('-2 8') == '2'"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 3') == '0'\nassert solution('5 4') == '1'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0000\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\nassert solution(\"1234\") == \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('876') == 'Good'\nassert solution('01') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3776\") == \"Bad\", \"Test 1 Failed\"\nassert solution(\"1112\") == \"Good\", \"Test 2 Failed\"\nassert solution(\"4321\") == \"Bad\", \"Test 3 Failed\"\nassert solution(\"1134\") == \"Good\", \"Test 4 Failed\"\nassert solution(\"1112\") == \"Good\", \"Test 5 Failed\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1017') == 'Bad'\nassert solution('3715') == 'Good'\n\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"3010\") == \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"999\") == \"Bad\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1235\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n456') == 'Bad'\nassert solution('4\\n66') == 'Good'\nassert solution('5\\n777') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1857') == 'Good'\nassert solution('2323') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3776\") == \"Good\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1235\") == \"Bad\"\nassert solution(\"12345\") == \"Bad\"\nassert solution(\"123456\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('37777') == 'Bad'\nassert solution('37777') == 'Bad'\nassert solution('2512') == 'Good'\nassert solution('12345') == 'Good'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3.5\"\nassert solution(\"3\") == \"3.50001\"\nassert solution(\"5\") == \"3.500001\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n3 4\n''') == '3.5'\nassert solution('''1\n1''') == '1.0'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3.5\"\nassert solution(\"3\") == \"3.5\"\nassert solution(\"4\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"4\\n3 2 4 3\") == \"4.0\"\nassert solution(\"6\\n3 2 4 4 4 6\") == \"4.0\"\nassert solution(\"20\\n3 2 4 4 4 6 6 6 6 6 6\") == \"3.0\"\nassert solution(\"28\\n3 2 4 4 4 6 6 6 6 6 6 6\") == \"4.0\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3.5'\nassert solution('1') == '1.0'\nassert solution('3') == '3.0'\nassert solution('4') == '4.0'\nassert solution('5') == '4.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '3.5'"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"3.5\"\nassert solution(\"\"\"\n2\n3 4\n\"\"\") == \"3.5\"\nassert solution(\"\"\"\n5\n3 4 2 1\n\"\"\") == \"3.5\"\nassert solution(\"\"\"\n7\n5 4 2 1 4 3 2\n\"\"\") == \"2.5\"\nassert solution(\"\"\"\n10\n8 9 10 2 3 6 1 7 5 4\n\"\"\") == \"4.25\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n1 2\") == \"1.5\"\nassert solution(\"3\\n4 1\") == \"3.5\"\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a string S, check if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation\nis a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\n------Input------\nInput consists of a string S.\n\n------Output------\nReturn 1 if the input is a permutation of a palindrome and 0 otherwise.\n\n------Example------\nInput: Tact\nOutput: 1\n\nInput: Grr\nOutput: 0\n\nInput: Malayalam\nOutput: 1\n\nInput: System\nOutput: 0\n\nInput: Abcd\nOutput: 1\n\nInput: zxy\nOutput: 0\n\nInput: aabb\nOutput: 0\n\nInput: CZYX\nOutput: 1\n\nInput: OZYX\nOutput: 1\n\nInput: OZYXOZYX\nOutput: 0\n\nInput: ABCD\nOutput: 0\n\nInput: OZYXOZYXOZYX\nOutput: 0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn a string, you can apply two types of operations:\n\nConcatenate the string by using + sign.\nRemove a character by using. character.\n\nImplement the function that takes an input string, and returns a new string that contains all the possible concatenations of the input string.\n\nExample:\n\nGiven input string = \u201capple\u201d, return \u201cappleapple\u201d.\n\nGiven input string = \u201ca\u201d, return \u201ca\u201d.\n\nGiven input string = \u201ca\u201d, return \u201c\u201d.\n\n------Input------\nInput consists of a string S.\n\n------Output------\nReturn a new string after applying all possible operations on the input string.\n\n------Example------\nInput: Tact\nOutput: Tact\n\nInput: Grr\nOutput: Grr\n\nInput: Malayalam\nOutput: Malayalam\n\nInput: System\nOutput: System\n\nInput: Abcd\nOutput: Abcd\n\nInput: zxy\nOutput: zxy\n\nInput: aabb\nOutput: aabb\n\nInput: CZYX\nOutput: CZYX\n\nInput: OZYX\nOutput: OZYX\n\nInput: OZYXOZYX\nOutput: OZYXOZYX\n\nInput: ABCD\nOutput: ABCD\n\nInput: OZYXOZYXOZYX\nOutput: OZYXOZYXOZYX\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nDefine a class Person, which has at least the following properties:\n\nPerson(name, age)\n\nMethods:\n\ngetName(): getter method for person's name\n\nsetName(name): setter method for person's name\n\ngetAge(): getter method for person's age\n\nsetAge(age): setter method for person's age\n\nA constructor, which is able to construct a Person object\n\nand which has at least the following properties:\n\nThe first name of the person should be of type str\n\nThe age of the person should be of type int\n\nExample\nInitialize a Person object p1 by constructing it with name \"Bob\" and age 35.\nCall getName() on p1 and print the result.\nCall setName() with \"Alice\" on p1 and print the result.\nCall getAge() on p1 and print the result.\nCall setAge() with 40 on p1 and print the result.\nprint the object p1.\n\nOutput\nBob\nAlice\n35\n40\nBob\nAlice\n35\n40\nBob\nAlice\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given an integer array nums of length n. You are initially standing at index 0, and in one move, you can walk to any of the indexes i between 0 and n - 1, where you can choose any number of moves.\n\nReturn the minimum number of moves required so that you are at index k.\n\nA move consists of choosing any index i with 0 < i < n and swapping elements nums[i] and nums[k].\n\n\nNote:\n\n1 <= k <= n <= 105\nnums.length == n\n1 <= nums[i] <= 105\nExample 1:\n\nInput: nums = [1,2,3,4,5,6,7]\nOutput: 2\nExplanation: Swap the first two elements to the last two elements and we are left with the sorted array [3,4,5,6,7,1,2].\nMoves = 3 + 4 = 7\nExample 2:\n\nInput: nums = [3,4,5,1,2]\nOutput: 3\nExplanation: Swap the first two elements and the last two elements to the middle, we are left with the sorted array [3,4,5,1,2].\nMoves = 2 + 3 = 5\nExample 3:\n\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: You can't get a single move to make the array sorted.\nExample 4:\n\nInput: nums = [1,1,1]\nOutput: 0\nExample 5:\n\nInput: nums = [7,8,9,10,11,12,13,14,15]\nOutput: 1\n\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\nImplement the class A:\n\nA constructor takes a string s as input and initializes the char array c to contain the characters of s.\n\nvoid getNext(int index) returns the next index of the array c. It is guaranteed that getNext(getNext(i)) = getNext(i) for all 0 <= i < n.\n\nA is a good candidate if:\n\nc[index] == c[getNext(index)]\nFor example, if c = \"abbba\", then it is a good candidate if c[getNext(index)] = c[index] and c[index] = \"bb\".\n\nYou can assume that all the characters of c are distinct and all the inputs to getNext are valid.\n\nImplement the function that implements A as described in the problem statement.\n\nExample 1:\n\nInput\n\nn = 3\n\nc = \"abbba\"\n\nOutput\n\nTrue\n\nOutput\n\n\"bbba\"\n\nOutput\n\nFalse\n\nOutput\n\n\"bbba\"\n\nOutput\n\nTrue\n\nOutput\n\n\"bbba\"\n\nInput\n\nn = 4\n\nc = \"abbba\"\n\nOutput\n\nFalse\n\nOutput\n\n\"abbba\"\n\nOutput\n\nTrue\n\nOutput\n\n\"abbba\"\n\nInput\n\nn = 5\n\nc = \"abbba\"\n\nOutput\n\nFalse\n\nOutput\n\n\"abbba\"\n\nOutput\n\nTrue\n\nOutput\n\n\"abbba\"\n\nInput\n\nn = 7\n\nc = \"abbba\"\n\nOutput\n\nFalse\n\nOutput\n\n\"abbba\"\n\nOutput\n\nTrue\n\nOutput\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"3.5\"\nassert solution(\"3\") == \"5\"\nassert solution(\"3 4\") == \"5.0\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3 4\n''') == \"3.5\"\nassert solution('''2\n3 4\n''') == \"3.5\"\nassert solution('''1\n0\n''') == \"0\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 1 2\n2 5 4\n3 6\n''') == '14'\nassert solution('''\n4\n4 1 2 5\n5 5 3 4\n6 6 6 6\n''') == '25'\nassert solution('''\n1\n1 1\n''') == '1'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '14'\nassert solution('6') == '12'\nassert solution('4') == '9'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"14\"\nassert solution(\"4\") == \"15\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '14'\nassert solution(input()) == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3\n2 1 2\n2 5 4\n3 6\n''') == '14', 'Sample Test 1'\nassert solution(\n'''\n3\n3 2 5\n2 3 4\n2 6\n''') == '18', 'Sample Test 2'\nassert solution(\n'''\n4\n1 2 3 4\n5 6 7 8\n6 9 10 11\n6 12 13 14\n''') == '42', 'Sample Test 3'"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3 1 2') == '14'\nassert solution('3 1 2 3 4') == '18'\nassert solution('3 1 2 3 4 5') == '17'\nassert solution('3 1 2 3 4 5 6') == '16'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 1 2\n2 5 4\n3 6\n''') == '14'\n\nprint(solution('''\n3\n3 1 2\n2 5 4\n3 6\n'''))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n2 5 4\n3 6\n''') == '14'\nassert solution('''\n5\n1 2 3 4 5\n2 5 4\n3 6\n''') == '14'\nassert solution('''\n5\n1 2 3 4 5\n2 5 4\n3 6\n''') == '14'\nassert solution('''\n5\n1 2 3 4 5\n2 5 4\n3 6\n''') == '14'\nassert solution('''\n5\n1 2 3 4 5\n2 5 4\n3 6\n''') == '14'\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nZABCDBABCQ\\n\") == \"2\"\nassert solution(\"3\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"13\"\nassert solution(\"15\\n
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\nABCD\") == \"2\"\nassert solution(\"2\\nZAB\") == \"2\"\nassert solution(\"3\\nABC\") == \"1\"\nassert solution(\"4\\nABCD\") == \"1\"\nassert solution(\"5\\nZABC\") == \"2\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nABCD\") == \"2\"\nassert solution(\"12\\nABBC\") == \"1\"\nassert solution(\"12\\nABCDEFGHIJK\") == \"10\"\nassert solution(\"10\\nABCDEFGHIJKL\") == \"5\"\nassert solution(\"10\\nABCDEFGHIJKLQ\") == \"6\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"ZABCDBABCQ\") == \"2\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ZABCDBABCQ\") == \"2\"\nassert solution(\"ABBB\") == \"2\"\nassert solution(\"Z\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"A\") == \"1\"\nassert solution(\"AB\") == \"2\"\nassert solution(\"ABB\") == \"2\"\nassert solution(\"ABBB\") == \"4\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10\\nZABCDBABCQ') == '2'\nassert solution('1\\nABC') == '0'\nassert solution('2\\nABCDEF') == '0'\nassert solution('3\\nABABCD') == '3'\nassert solution('5\\nZABCDAAABBB') == '5'\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\", \"Your solution doesn't work\"\nassert solution(\"5\") == \"2\", \"Your solution doesn't work\"\nassert solution(\"100\") == \"4\", \"Your solution doesn't work\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n''') == '2'"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution() == '1'\nassert solution() == '0'\n'''"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\\n\") == \"2\"\nassert solution(\"10\\nMAZEIRL\\nJIOSHI\\nMARYAR\\nAMCAT\\nBENJAM\\nBRAVEL\\nBRAVRZ\\nCAMIER\\nNUISTEN\\nMARYAR\\n\") == \"2\"\nassert solution(\"10\\nSANDEEP\\nKOWLER\\nJOSE\\nOBSERV\\nBENJAM\\nADMINISTRATIVE\\nBRENZI\\nBRENZI\\nBRENZI\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict\nimport unittest\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('2 4') == 'Yes'\n\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == 'No'\nassert solution('4 2') == 'Yes'\nassert solution('1 0') == 'Yes'\n\"\"\"\n\nimport math\n\nn = int(input())\nm = int(input())\n\nnum_of_0 = n - m\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 4\") == \"Yes\"\nassert solution(\"6 4\") == \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == \"Yes\"\nassert solution('5 6') == \"No\"\n\n'''"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"4 4\") == \"Yes\"\nassert solution(\"10 10\") == \"No\"\nassert solution(\"100 100\") == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'Yes'\n\nassert solution(input()) == 'No'\n\"\"\"\n\n\"\"\"\nIn this function I decided to test if the number of even and odd elements in the array are equal.\nIf the number of even and odd elements are equal then it is an even number.\nIf the number of even and odd elements are not equal, then the array is not an even number.\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"Yes\"\nassert solution(\"10 10\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\nassert solution(\"sippuu\") == \"No\"\n\nassert solution(\"sippuu\") == \"Yes\"\n\nassert solution(\"sippuu\") == \"No\"\n\nassert solution(\"sippuu\") == \"Yes\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"cccaa\") == \"Yes\"\nassert solution(\"\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\", \"SIPPUU\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('coffee') == 'No'\nassert solution('cjtuc') == 'Yes'"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabb') == 'No'\nassert solution('aaaa') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippu') == 'No'\n'''"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"poppu\") == \"No\"\nassert solution(\"raipu\") == \"Yes\"\nassert solution(\"smppu\") == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sssssss') == 'Yes'\nassert solution('sippuuuuuuuuuuu') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"taaa\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippuu') == 'Yes'\nassert solution('sippuu') == 'Yes'\nassert solution('sippuu') == 'Yes'\nassert solution('sippuu') == 'Yes'"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\nassert solution('3 80\\n1 70\\n4 50') == '70'\nassert solution('4 100\\n1 40\\n3 50\\n5 60\\n') == 'TLE'\nassert solution('5 5\\n2 2\\n3 3\\n4 4\\n') == '5'\nassert solution('3 2\\n1 2\\n5 2\\n') == '1'\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 70\n7 60\n1 80\n4 50\n''') == '4'\nassert solution('''\n3 30\n7 50\n1 80\n4 10\n''') == 'TLE'\nassert solution('''\n5 30\n3 50\n1 80\n4 10\n2 20\n5 40\n''') == 'TLE'\nassert solution('''\n5 20\n2 10\n1 80\n4 10\n3 30\n''') == '10'\nassert solution('''\n10 20\n1 70\n2 50\n3 80\n4 90\n5 50\n6 40\n7 30\n8 30\n9 20\n10 30\n''') == 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 70\n7 60\n1 80\n4 50''') == '4'\nassert solution('''6 6\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7''') == '7'\nassert solution('''7 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8''') == '1'\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 70\") == \"4\"\nassert solution(\"3 60\") == \"TLE\"\nassert solution(\"1 80\") == \"80\"\nassert solution(\"4 50\") == \"4\"\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize = None)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"3 2\\n3 4\\n2 1\\n3 1\\n\") == \"2\""
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 70\") == \"4\"\nassert solution(\"3 100\") == \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 70') == '4'\nassert solution('5 2') == 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 70') == '4'\nassert solution('7 60') == '7'\nassert solution('1 80') == 'TLE'"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 70\n7 60\n1 80\n4 50\n''') == '4'\n\nassert solution('''\n3 100\n7 60\n1 80\n4 50\n''') == 'TLE'"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 70') == '4'\nassert solution('4 50') == 'TLE'\nassert solution('2 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 8') == '8'\nassert solution('5 2 9') == '10'\nassert solution('100 200 10000 1000000 100000000 1000000000 10000000000') == '1000000000000'"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 9\") == \"8\"\nassert solution(\"4 2 9\") == \"8\"\nassert solution(\"5 2 9\") == \"8\"\nassert solution(\"3 10 3\") == \"8\"\nassert solution(\"3 6 3\") == \"8\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 9') == '8'\nassert solution('4 2 9') == '8'\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2,4,5]) == \"2\\n\"\nassert solution([3,8,1]) == \"3\\n\"\nassert solution([20,40,50]) == \"20\\n\""
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2\") == \"7\"\nassert solution(\"5 1 3\") == \"6\"\nassert solution(\"9 20 50\") == \"25\"\nassert solution(\"4 2 9\") == \"8\"\nassert solution(\"5 1 3\") == \"6\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 4') == '3'\nassert solution('4 2 10') == '8'\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 9') == '8'\nassert solution('4 2 9') == '8'\nassert solution('20 20 8') == '16'\nassert solution('16 20 8') == '16'\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nassert solution(\"2 4 7\") == \"10\"\nassert solution(\"5 3 2\") == \"8\"\nassert solution(\"3 2 1\") == \"2\"\n\n'''"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nassert solution(\"10 10 10\") == \"50\"\nassert solution(\"3 4 6\") == \"18\"\nassert solution(\"4 4 10\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 2') == '6'\nassert solution('5 5 2') == '5'\nassert solution('1 5 2') == '10'\nassert solution('2 2 3') == '6'\nassert solution('3 2 4') == '10'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nacornistnt\\npeanutbomb\\nconstraint') == '1'"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\nacornistnt\npeanutbomb\nconstraint\n''') == \"1\""
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nacornistnt\npeanutbomb''') == '1'"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"5\"\nassert solution(\"8\") == \"6\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"8\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1000000000\") == \"9\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '2'\nassert solution('20') == '5'\nassert solution('38') == '2'\nassert solution('56') == '0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n\") == \"1\"\nassert solution(\"2\\n3\\n4\\n5\\n\") == \"2\"\nassert solution(\"10\\n2\\n4\\n5\\n8\\n\") == \"2\"\nassert solution(\"1000000000\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\") == \"8\"\nassert solution(\"1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\") == \"9\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\""
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"38\") == \"2\"\nassert solution(\"56\") == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"8\"\nassert solution(\"0\") == \"0\"\nassert solution(\"5\") == \"8\""
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == \"2\", \"Top\"\nassert solution(\"4 2\") == \"1\", \"Bottom\"\nassert solution(\"3 1\") == \"1 1 1\", \"Middle\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '1 2 1 2 1 2 1 1 2'\nassert solution('10 2\\n3 1\\n1 4\\n1 2\\n') == '1 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 2\n3 1\n1 4\n1 2\n''') == '1 2 1 1 2'\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1 1 1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2') == '2'\nassert solution('4 2') == '1 2 1 1 2'\n\nassert solution('10 2') == '3 1 1 1 1 1 1 2 1 2 1 2'\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"2\"\nassert solution(\"4 2\") == \"1 2 1 1 2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6 2\n3 1\n1 4\n1 2\n5 2\n''') == '2'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3'\nassert solution('''10 20\n10 10\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 7\n2 8\n2 9\n3 4\n3 6\n3 7\n4 5\n4 7\n5 6\n5 7\n6 8\n6 9\n7 10\n7 11\n8 10\n8 11\n9 10\n9 11\n10 10\n10 11\n11 1\n11 5\n11 6\n11 7\n11 8\n11 9\n12 1\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n13 1\n13 2\n13 3\n13 4\n13 5\n13 6\n13 7\n13 8\n13 9\n''') == '3'\nassert solution('''20 2\n4 5\n6 8\n7 2\n3 5\n1 4\n2 5\n2 6\n3 4\n3 7\n3 8\n3 9\n4 5\n4 7\n4 8\n4 9\n5 5\n5 7\n5 8\n5 9\n6 6\n6 7\n6 8\n6 9\n7 6\n7 7\n7 8\n7 9\n8 6\n8 7\n8 8\n8 9\n9 6\n9 7\n9 8\n9 9\n10 10\n10 11\n10 12\n10 13\n10 14\n10 15\n10 16\n10 17\n10 18\n10 19\n10 20\n10 21\n10 22\n10 23\n10 24\n10 25\n10 26\n10 27\n10 28\n10 29\n10 30\n10 31\n10 32\n10 33\n10 34\n10 35\n10 36\n10 37\n10 38\n10 39\n10 40\n10 41\n10 42\n10 43\n10 44\n10 45\n10 46\n10 47\n10 48\n10 49\n10 50\n10 51\n10 52\n10 53\n10 54\n10 55\n10 56\n10 57\n10 58\n10 59\n10 60\n10 61\n10 62\n10 63\n10 64\n10 65\n10 66\n10 67\n10 68\n10 69\n10 70\n10 71\n10 72\n10 73\n10 74\n10 75\n10 76\n10 77\n10 78\n10 79\n10 80\n10 81\n10 82\n10 83\n10 84\n10 85\n10 86\n10 87\n10 88\n10 89\n10 90\n10 91\n10 92\n10 93\n10 94\n10 95\n10 96\n10 97\n10 98\n10 99\n10 100\n10 101\n10 102\n10 103\n10 104\n10 105\n10 106\n10 107\n10 108\n10 109\n10 110\n10 111\n10 112\n10 113\n10 114\n10 115\n10 116\n10 117\n10 118\n10 119\n10 120\n10 121\n10 122\n10 123\n10 124\n10 125\n10 126\n10 127\n10 128\n10 129\n10 130\n10 131\n10 132\n10 133\n10 134\n10 135\n10 136\n10 137\n10 138\n10 139\n10 140\n10 141\n10 142\n10 143\n10 144\n10 145\n10 146\n10 147\n10 148\n10 149\n10 150\n10 151\n10 152\n10 153\n10 154\n10 155\n10 156\n10 157\n10 158\n10 159\n10 160\n10 161\n10 162\n10 163\n10 164\n10 165\n10 166\n10 167\n10 168\n10 169\n10 170\n10 171\n10 172\n10 173\n10 174\n10 175\n10 176\n10 177\n10 178\n10 179\n10 180\n10 181\n10 182\n10 183\n10 184\n10 185\n10 186\n10 187\n10 188\n10 189\n10 190\n10 191\n10 192\n10 193\n10 194\n10 195\n10 196\n10 197\n10 198\n10 199\n10 200\n10 201\n10 202\n10 203\n10 204\n10 205\n10 206\n10 207\n10 208\n10 209\n10 210\n10 211\n10 212\n10 213\n10 214\n10 215\n10 216\n10 217\n10 218\n10 219\n10 220\n10 221\n10 222\n10 223\n10 224\n10 225\n10 226\n10 227\n10 228\n10 229\n10 230\n10 231\n10 232\n10 233\n10 234\n10 235\n10 236\n10 237\n10 238\n10 239\n10 240\n10 241\n10 242\n10 243\n10 244\n10 245\n10 246\n10 247\n10 248\n10 249\n10 250\n10 251\n10 252\n10 253\n10 254\n10 255\n10 256\n10 257\n10 258\n10 259\n10 260\n10 261\n10 262\n10 263\n10 264\n10 265\n10 266\n10 267\n10 268\n10 269\n10 270\n10 271\n10 272\n10 273\n10 274\n10 275\n10 276\n10 277\n10 278\n10 279\n10 280\n10 281\n10 282\n10 283\n10 284\n10 285\n10 286\n10 287\n10 288\n10 289\n10 290\n10 291\n10 292\n10 293\n10 294\n10 295\n10 296\n10 297\n10 298\n10 299\n10 300\n10 301\n10 302\n10 303\n10 304\n10 305\n10 306\n10 307\n10 308\n10 309\n10 310\n10 311\n10 312\n10 313\n10 314\n10 315\n10 316\n10 317\n10 318\n10 319\n10 320\n10 321\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"1 2 1 1 2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1 2 1 1 2'\nassert solution('4 2') == '1 2 1 1 2'\nassert solution('6 2') == '1 2 1 1 2 1 2'"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2', solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''')\nassert solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '1', solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''')"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution() == \"1 1 1\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 2 3 4 3 4 3 5 5 5 4 4 4 4 4 5 5 5 5 5 5 5 5 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2 4'\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1 1\n1 1 1 1\n''') == '2 2'\n\nassert solution('''\n7\n4 3 7 1 4 3 3\n''') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '3 6'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 3 7 1 4 3 3\") == \"3 8\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 6\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\""
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 4\") == \"2 4\"\nassert solution(\"9\") == \"3 8\"\nassert solution(\"7\") == \"3 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '3 6'\nassert solution('9') == '3 8'\nassert solution('7') == '3 6'\n\n\n'''\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10\n1 2 4 4\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n7\n4 3 7 1 4 3 3\n\"\"\") == \"3 8\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 4 4\n''') == '2 4'\n\nassert solution('''7\n4 3 7 1 4 3 3\n''') == '3 8'\n\nassert solution('''9\n1 1 8 8 8 4 4 4 4\n''') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 8 8 8 4 4 4 4\\n') == '2 4'\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3 2 1 4 5'\nassert solution('3') == '3 1 2 4 5'\nassert solution('1 2') == '2 1 4 3 5'\nassert solution('2 3') == '3 2 4 1 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '2 1 3'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\nassert solution('''3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\") == \"2 3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"\n5\n5 1\n1 5\n1 4\n2 4\n1 3\n\"\"\") == \"1 3 1 2 4\"\nassert solution(\"\"\"\n5\n5 2\n1 3\n1 5\n1 4\n2 4\n1 3\n\"\"\") == \"1 3 1 2 4\"\nassert solution(\"\"\"\n5\n5 5\n1 4\n2 4\n1 3\n\"\"\") == \"1 4 1 3 2\"\nassert solution(\"\"\"\n5\n5 5\n1 4\n2 4\n1 3\n\"\"\") == \"1 4 1 3 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"\n5\n1 2 3 5 4\n1 3 4 2 5\n1 5 4 2 3\n1 4 5 2 3\n1 3 4 5 2\n\"\"\") == \"1 2 3 5 4\"\nassert solution(\"\"\"\n3\n1 2 3\n2 3 1\n1 2 3\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n\"\"\") == \"1 2 3 4 5 6\"\nassert solution(\"\"\"\n3\n1 2 3\n1 2 3\n1 2 3\n\"\"\") == \"1 2 3\"\n\nprint(solution.__doc__)"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3 2 1 5'\nassert solution('3') == '3 2 1'\nassert solution('1') == '1'\nassert solution('5') == '1 2 3 4 5'"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\nassert solution('''\n10\n10 10 10 10 10 10 10 10 10 10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n''') == '10 10 10 10 10 10 10 10 10 10 10'\nassert solution('''\n4\n1 3 2\n2 3 1\n3 1 2\n1 2 3\n''') == '1 3 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2\n1 3\n4 2\n''') == '3 1 2 4'\nassert solution('''\n3\n1 2\n2 1\n4 2\n''') == '3 1 2 4'\nassert solution('''\n3\n1 2\n2 1\n2 3\n''') == '3 1 2 4'\nassert solution('''\n5\n2 3\n3 1\n3 5\n4 1\n2 4\n''') == '2 3 1 5 4 3 2 4'"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"10\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\nfrom itertools import combinations_with_replacement\nfrom collections import Counter\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(6, ['1', '10', '17', '12', '15', '2']) == '3'\nassert solution(10, ['1337', '1337', '1337', '1337', '1337', '1337', '1337', '1337', '1337', '1337']) == '10'\nassert solution(6, ['1', '1000', '10000', '10', '100', '1000000000']) == '1'"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution() == '1'"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '1'\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"10\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"3\"\nassert solution(test_input_2) == \"1\""
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\n\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 3 5 4\n2\n2\n2\n3\n''') == '0'\nassert solution('''5\n2 3 5 4\n3\n2\n1\n1\n''') == '4'\nassert solution('''5\n2 3 5 4\n3\n2\n1\n1\n''') == '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"15 5 3 2\") == \"4\"\nassert solution(\"15 5 4 3\") == \"-1\"\nassert solution(\"15 5 2 1\") == \"5\"\nassert solution(\"15 5 5 1\") == \"2\"\nassert solution(\"16 7 5 2\") == \"0\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n10 5 3 2\n10 5 4 3\n10 5 2 1\n''') == '2'\nassert solution('''\n4\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n''') == '1'\nassert solution('''\n5\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n20 5 7 3\n''') == '0'\nassert solution('''\n6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n20 5 7 3\n''') == '0'\nassert solution('''\n7\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n20 5 7 3\n''') == '1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1 3 2\n5 5 4 3\n5 5 2 1\n5 5 5 1\n6 7 5 2\n20 5 7 3\n''') == '4'\nassert solution('''\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2') == '4'\nassert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2') == '-1'\nassert solution('1\\n-1\\n1\\n0') == '0'\nassert solution('1\\n-1\\n1\\n0') == '1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"5\"\nassert solution(\"7\") == \"0\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"-1\"\nassert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"5\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n''') == '4'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n15 5 3 2\\n15 5 4 3\") == \"4\"\nassert solution(\"1\\n16 7 5 2\\n15 5 7 3\") == \"1\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution) == \"24\""
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7\n??????????\n''') == '2835'\nassert solution('''\n8\nabc?ba?c\n''') == '24'\nassert solution('''\n4\nac??c\n''') == '0'\nassert solution('''\n5\na????c\n''') == '46'\nprint('solved!')"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '24'\nassert solution('7') == '2835'\nassert solution('9') == '0'\nassert solution('5') == '46'"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '24'\nassert solution('7') == '2835'\nassert solution('9') == '0'\nassert solution('5') == '46'\nassert solution('1') == '1'"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '9'\nassert solution('3') == '46'\nassert solution('7') == '2835'\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\naaaaaabac''') == '0'\nassert solution('''5\naaaaabac?bb?c''') == '24'\nassert solution('''4\naaaaabbac''') == '8'\nassert solution('''10\naaaaaaaaaabacaaaaabac''') == '1'\nassert solution('''10\naaaaaaaaaaaaaaaaaaaaaaaaabac''') == '926'\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"2835\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"8\"\nassert solution(\"6\") == \"24\"\nassert solution(\"7\") == \"2835\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"24\"\nassert solution(\"7\") == \"2835\"\nassert solution(\"5\") == \"46\""
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '24'\nassert solution('7') == '2835'\nassert solution('5') == '46'\nassert solution('6') == '24'"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 0\n1 2 3 4\n1 2 8\n1 3 10\n1 4 7\n1 5 15''') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_str) == output\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"16\"\nassert solution(input()) == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '5'\nassert solution('4 0') == '16'"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == '5'\nassert solution(\"4 0\") == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n1 3 3\n2 3 5\n2 1 1\n''') == '5'\nassert solution('''\n4 0\n1 3 3 7\n''') == '16'\n\nassert solution('''\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n''') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 3 3\n2 3 5\n2 1 1\n''') == '5'\nassert solution('''\n4 0\n1 3 3 7\n''') == '16'\n\n'''\nYou are given an undirected graph consisting of $n$ vertices. A number is written on each vertex; the number on vertex $i$ is $a_i$. Initially there are no edges in the graph.\n\nYou may add some edges to this graph, but you have to pay for them. The cost of adding an edge between vertices $x$ and $y$ is $a_x + a_y$ coins. There are also $m$ special offers, each of them is denoted by three numbers $x$, $y$ and $w$, and means that you can add an edge connecting vertices $x$ and $y$ and pay $w$ coins for it. You don't have to use special offers: if there is a pair of vertices $x$ and $y$ that has a special offer associated with it, you still may connect these two vertices paying $a_x + a_y$ coins for it.\n\nFind the minimum number of coins you have to spend to make the graph connected.\n\nInput\n2\n3 2\n1 3 3\n2 3 5\n2 1 1\nOutput\n5\n'''\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '5'\nassert solution('4 0') == '16'"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == \"14\"\nassert solution('''10 1 1\n0 9\n0 5\n''') == \"45\"\nassert solution('''10 1 1\n0 9\n1 5\n''') == -1\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"2 1 1\\n0 9\\n1 5\\n\") == \"-1\"\nassert solution(\"2 2 1\\n0 9\\n1 2\\n\") == \"14\"\nassert solution(\"2 2 1\\n0 9\\n1 5\\n\") == \"45\"\nassert solution(\"2 2 1\\n0 9\\n1 5\\n\") == \"14\""
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\"\"\") == \"14\"\nassert solution(\"\"\"\n10 1 1\n0 9\n1 5\n\"\"\") == \"45\"\nassert solution(\"\"\"\n10 1 1\n0 9\n1 5\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n\n''') == '14', solution('''')\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\n\nassert solution('''\n10 1 1\n0 9\n1 5\n''') == '45'\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '14'\nassert solution(input_, True) == '45'\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"45\""
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\nassert solution('''10 1 1\n0 9\n0 5\n''') == '45'\nassert solution('''10 1 1\n0 9\n1 5\n''') == '-1'"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == -1"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == 'Yes'"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"8 9 8\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('8 7 5') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'Yes'\nassert solution('1 2 5') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"4 4 4\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('3 7 3') == 'No'\nassert solution('1 1 1') == 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"Yes\"\nassert solution(\"5 7 5\") == \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 7 5\n7 8 7''') == 'Yes'\nassert solution('''7 7 5\n7 8 7''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\nassert solution('3\\n10 3\\n1000 2000 3') == '2'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3\\n10 10 10\") == \"1\"\nassert solution(\"4\\n-1 -1 -1 -1\") == \"0\""
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5') == '1'\nassert solution('3 5') == '2'\n\nprint(solution(input()))\n\n---\n'''"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n12 5\n1000 2000\n''') == '1'\nassert solution('''\n4\n10 10 20 15\n20 20 20 20\n''') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n''') == '1'\nassert solution('''5 10\n''') == '2'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1''') == '1'\nassert solution('''5 2''') == '2'\nassert solution('''2 4''') == '3'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1') == '1'\nassert solution('3 2') == '2'\nassert solution('2 0') == '1'\nassert solution('3 0') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\""
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 5\") == \"5\""
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\"2 1\", \"4 2\", \"4 1\"]) == \"1\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\\n\") == \"2\\n0\\n3\"\n\n(*)Question 1: (C)ACACTACG. (A substring of S beginning and ending with index 3 and 7.)\n(*)Question 2: (C)CA. (A substring of S beginning and ending with index 2 and 3.)\n(*)Question 3: (C)ACACTACG. (A substring of S beginning and ending with index 1 and 8.)\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('ACAC') == '2'\nassert solution('ACCT') == '0'\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 6\") == \"2\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8\n''') == '2'\nassert solution('''5 6\nACACGACGAC\n1 2\n1 3\n2 4\n2 5\n''') == '1'\nassert solution('''8 5\nACACTACGACTACG\n2 3\n2 4\n2 6\n3 7\n3 8\n''') == '3'\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"2\\n0\\n3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"2\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"ACACTACG\\n3 7\\n2 3\\n1 8\"\n) == \"2\"\nassert solution(\n    \"ACACTACG\\n3 7\\n2 3\\n1 8\"\n) == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"6 3\nAGGT\"\"\") == \"0\"\nassert solution(\"\"\"6 4\nACAGT\"\"\") == \"2\"\nassert solution(\"\"\"2 3\nACAC\"\"\") == \"1\"\nassert solution(\"\"\"5 2\nAAAC\"\"\") == \"2\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '210'"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"210\"\nprint(solution(input()))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5,3],[50,100,80,120,80]) == 210\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"15\"\nassert solution(\"5 3\") == \"60\"\nassert solution(\"5 3\") == \"60\""
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '21'\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '210'\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n50 100 80 120 80\n''') == '210'\nassert solution('''5 3\n100 10 200 30 30\n''') == '190'\nassert solution('''5 3\n50 100 80 120 80\n''') == '210'\nassert solution('''5 3\n100 200 50 120 100\n''') == '190'\nassert solution('''5 3\n100 200 50 120 100\n''') == '190'\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '210'\nassert solution('10 2') == '10'\n\n\"\"\"\n\nn, k = map(int, input().split())\nprices = list(map(int, input().split()))\nprices.sort()\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n50 100 80 120 80\n''') == '210'"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n50 100 80 120 80\\n') == '210'\nassert solution('1 1\\n10 20 30\\n') == '30'\n\n--- Output Example ---"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 3\") == \"6\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3 4\\n\") == \"4\"\nassert solution(\"1 4 3\\n\") == \"7\"\nassert solution(\"3 4 1\\n\") == \"5\"\nassert solution(\"4 5 1\\n\") == \"5\"\nassert solution(\"5 4 1\\n\") == \"5\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"4 2 2\") == \"0\"\nassert solution(\"2 2 2\") == \"0\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 2 3') == '3'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 5 6') == '3'"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 3 2') == '3'\nassert solution('1 5 3') == '3'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\\n\") == \"4\\n\", \"Wrong Answer\"\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 3\") == \"3\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 4\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"1 1 2 3\") == \"1\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('5 6 7') == '18'\nassert solution('1 2 3') == '9'\n\"\"\"\nimport sys\nfrom typing import List\nfrom datetime import timedelta\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '10'"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(5, 3) == 0\n\nstdin = '3 5'\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input(\"Enter numbers: \")) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"10\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 4\") == \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''3 5\n3 5'''\n) == '0'\n\nprint(solution(\n'''1 1\n0 1'''\n) == '10')"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\n2 is not less than 5, so we should print 10.\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '10'\nassert solution('3 1') == '10'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 5\\n\"\n    ) == \"0\"\n\nassert solution(\n    \"5 10\\n\"\n    ) == \"10\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 4') == '1'\nassert solution('5 5') == '1'"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"3\"\nassert solution(\"10\") == \"3\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 0') == '1'\nassert solution('5 3') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 7\\n') == '1'\nassert solution('2 3\\n') == '1'\nassert solution('3 3\\n') == '1'\nassert solution('5 6\\n') == '1'\nassert solution('7 8\\n') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 4\") == \"1\"\nassert solution(\"3 9\") == \"4\"\nassert solution(\"6 6\") == \"2\"\nassert solution(\"6 -6\") == \"2\"\nassert solution(\"7 1\") == \"2\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 4\n''') == '1'\nassert solution('''5 5\n''') == '0'\nassert solution('''0 4\n''') == '0'\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 7 9') == 'win', 'Your solution is wrong.'\nassert solution('5 9 3') == 'win', 'Your solution is wrong.'\nassert solution('5 9 5') == 'bust', 'Your solution is wrong.'\nassert solution('5 9 5') == 'win', 'Your solution is wrong.'\nassert solution('5 9 3') == 'win', 'Your solution is wrong.'\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7 9') == 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\") == \"win\"\nassert solution(\"2 2 2\") == \"bust\"\nassert solution(\"5 5 5\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('3 8 6') == 'bust'\nassert solution('6 5 3') == 'win'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 7 9\") == \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('4 8 9') == \"bust\""
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 0 1') == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 5 5') == 'bust'\nassert solution('5 9 5') == 'bust'\nassert solution('1 1 1') == 'bust'"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'bust', \"Wrong result\"\nassert solution('4 5 6') == 'win', \"Wrong result\""
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '1'\nassert solution('10\\n') == '10'\nassert solution('2\\n') == '1'\nassert solution('10\\n') == '1'\nassert solution('3\\n') == '1'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '6'\nassert solution('4\\n') == '8'\nassert solution('5\\n') == '10'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('10') == '10'\nassert solution('1') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '6'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '6\\n', 'Wrong answer'\nassert solution('4\\n') == '4\\n', 'Wrong answer'\nassert solution('10\\n') == '10\\n', 'Wrong answer'\nassert solution('2\\n') == '4\\n', 'Wrong answer'\nassert solution('3\\n') == '6\\n', 'Wrong answer'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '10'\nassert solution('7') == '7'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '8'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '6'\nassert solution('10') == '2'\nassert solution('3') == '6'\nassert solution('1000') == '1000'\nassert solution('2000') == '2'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '6'\nassert solution('3') == '6'\nassert solution('5') == '6'\nassert solution('7') == '7'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 1') == '2'\nassert solution('5 2') == '3'\nassert solution('3 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 3\") == \"3\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"10 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 2\n''') == '2'\nassert solution('''3 2\n''') == '1'\nassert solution('''4 2\n''') == '2'\nassert solution('''5 2\n''') == '3'\nassert solution('''6 1\n''') == '1'\n''')\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2') == '2'\nassert solution('6 2') == '2'\nassert solution('6 2') == '2'\n\"\"\"\nimport sys\n\nN = int(input())\nD = int(input())\n\nn = N\nmin_d = N\n\nwhile n > 0:\n    if min_d < N:\n        if D > n:\n            min_d = N\n        else:\n            min_d = D\n        n = n - D\n    else:\n        break\n\nprint(min_d)"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 5') == '3'\nassert solution('3 3') == '2'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == \"2\"\nassert solution(\"9 8\") == \"5\"\nassert solution(\"10 5\") == \"2\"\nassert solution(\"9 9\") == \"5\""
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 2') == '2'\nassert solution('6 2') == '1'\nassert solution('1 2') == '2'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2''') == '2'\nassert solution('''10 2''') == '10'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2') == '2'\nassert solution('5 2') == '1'\nassert solution('3 2') == '1'\nassert solution('4 2') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2') == '2'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('16') == 'pon'\nassert solution('25') == 'bon'\nassert solution('77') == 'bon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"4\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"pon\"\nassert solution(input()) == \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"257\") == \"bon\"\nassert solution(\"18\") == \"hon\"\nassert solution(\"0\") == \"0\"\nassert solution(\"14\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"hon\"\nassert solution(\"10\") == \"bon\"\nassert solution(\"3\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"97\") == \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"hon\"\nassert solution(\"0\") == \"pon\"\nassert solution(\"4\") == \"bon\"\nassert solution(\"7\") == \"bon\"\nassert solution(\"5\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"1620\") == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"5\") == \"bon\"\nassert solution(\"101\") == \"pon\"\nassert solution(\"10101\") == \"pon\"\nassert solution(\"101010\") == \"pon\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 1') == '1'\nassert solution('5\\n1 2 3 4 5') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"11\"\nassert solution(\"1\") == \"4\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"11\"\nassert solution(\"2 2 3\") == \"11\"\nassert solution(\"2 3 1 2\") == \"11\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n3 1 2') == '11'\nassert solution('5\\n4 1 3 2\\n3 2 4 1\\n4 1 2 3\\n4 2 2 4\\n3 1 4 4') == '15'\nassert solution('10\\n2 2 3 4 1 4 5\\n1 4 3 2 5\\n3 1 4 2 5\\n4 4 3 5 2\\n5 2 4 5 1') == '18'\nassert solution('10\\n1 1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '5'\nassert solution('10\\n1 1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 1 2') == '11'\nprint(solution('3\\n3 1 2'))\nassert solution('5\\n3 1 2 5 2') == '13'\nprint(solution('5\\n3 1 2 5 2'))"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '11'\nassert solution('10') == '246'\nassert solution('5') == '3231'\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 1 2''') == '11'\nassert solution('''4\n4 1 2 3''') == '21'\nassert solution('''10\n4 1 2 3 4 5 6 7 8 9''') == '210'\nassert solution('''20\n4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '2202270'\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"11\", \"sample\"\nassert solution(\"4\") == \"10\", \"sample\"\nassert solution(\"5\") == \"12\", \"sample\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"11\"\nassert solution(\"5\") == \"15\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n4\\n3\\n\") == \"4\"\nassert solution(\"2\\n1\\n4\\n3\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4\\n3\\n') == '4\\n3\\n'\nassert solution('2\\n2\\n2\\n') == '2\\n'\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"3\\n4\") == \"4\"\nassert solution(\"4\\n4\") == \"4\"\nassert solution(\"4\\n4\\n3\") == \"3\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\", \"Should be 4\\n3\\n4\"\nassert solution(\"4\\n1\\n4\\n3\") == \"3\\n3\\n4\", \"Should be 3\\n3\\n4\"\nassert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\", \"Should be 4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4 3 4\"\nassert solution(\"5\") == \"3 3 3 3 3\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1\n4\n3\n5\n3''') == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"12\") == \"11\"\nassert solution(\"13\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nprint(solution(''))"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '9'\nassert solution('10 20') == '23'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3''') == '9'\nassert solution('''10 3''') == '7'\nassert solution('''20 2''') == '3'\n\n'''\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"5 5\") == \"6\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 2') == '3'\nassert solution('4 3') == '4'\nassert solution('5 3') == '5'\nassert solution('6 3') == '6'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"9\""
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '3'\nassert solution('3 2') == '3'\nassert solution('4 1') == '4'\nassert solution('5 3') == '6'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 5\") == \"5\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '9'\nassert solution('5 5') == '10'\nassert solution('1 1') == '1'\nassert solution('2 5') == '7'\nassert solution('3 6') == '8'\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 3') == '9'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\nassert solution(\"4 2\\n2 4 3 -1\\n\") == \"5\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\""
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '40'\nassert solution('3 3') == '5'\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '40'\nassert solution('5 3') == '40'\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n========================================="
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"7\"\nassert solution(\"6 6\") == \"12\"\nassert solution(\"10 10\") == \"50\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"40\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '40'\nassert solution('9 5') == '40'\nassert solution('10 8') == '15'\nassert solution('9 1') == '0'\nassert solution('10 3') == '40'"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 13') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 13') == '2'\nassert solution('10 10') == '10'"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"7 3\") == \"2\"\nassert solution(r\"15 2\") == \"8\"\nassert solution(r\"17 3\") == \"16\"\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 13\") == \"2\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"9 4\") == \"1\""
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 13') == '2'\nassert solution('5 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 13') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 13') == '2'\nassert solution('10 10') == '2'\nassert solution('15 10') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 2"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"8\") == \"2\"\nassert solution(\"13\") == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 4') == '3'\nassert solution('10 3') == '2'\nassert solution('100 2') == '2'\n\"\"\"\n\nstdin = input()\n\nH, A = map(int, stdin.split())"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 4\\n\") == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4') == '3'\nassert solution('10 10') == '2'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4') == '3'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('10 4') == '3'\nassert solution('100 100') == '100'\nassert solution('1000 1000') == '1000'\nassert solution('100 100') == '100'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"10 1\") == \"10\"\nassert solution(\"-1 0\") == \"0\"\nassert solution(\"-1 1\") == \"1\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\nassert solution('100 10') == '13'\nassert solution('10000 1') == '10001'\nassert solution('10000 10') == '1000011'\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"6 7\") == \"4\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == \"3\""
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 75 25 100\n''') == '50'\nassert solution('''\n10 10 20 20\n''') == '10'\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"50 20 30 50\") == \"75\"\nassert solution(\"50 20 30 50\") == \"75\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\n---Output---\n[2]\n\nB\n\nAlice started holding down her button 0 second after the start-up of the robot, and released her button 75 second after the start-up.\n\nBob started holding down his button 25 second after the start-up, and released his button 100 second after the start-up.\n\nTherefore, the time when both of them were holding down their buttons, is the 50 seconds from 25 seconds after the start-up to 75 seconds after the start-up.\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"10 10 10 10\") == \"0\"\nassert solution(\"-10 -10 -10 -10\") == \"0\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 0 0 0') == '0'\nassert solution('0 25 0 100') == '0'\nassert solution('0 0 50 100') == '0'\nassert solution('0 75 0 0') == '0'\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\", \"test 1 failed\"\nassert solution(\"0 0 25 100\") == \"50\", \"test 2 failed\"\nassert solution(\"0 0 0 0\") == \"0\", \"test 3 failed\"\nassert solution(\"-1 -1 -1 -1\") == \"0\", \"test 4 failed\"\nassert solution(\"-2 -2 -2 -2\") == \"0\", \"test 5 failed\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('1 0 0 1') == '1'\nassert solution('0 10 0 0') == '0'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 75 25 100') == '50'\nprint(solution('0 75 25 100'))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0 75 25 100''') == '50'"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 15 25 100') == '5'\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('105') == '1'\nassert solution('500') == '1'\nassert solution('1234') == '0'\nassert solution('3') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"100\") == \"4\"\nassert solution(\"9\") == \"1\"\nassert solution(\"11\") == \"0\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"10\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '1'\n\n---\nAnother solution\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\", \"1\"\nassert solution(\"2\") == \"0\", \"2\"\nassert solution(\"10\") == \"0\", \"10\"\nassert solution(\"100\") == \"3\", \"100\"\nassert solution(\"1000\") == \"6\", \"1000\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '1'\nassert solution('10 2') == '4'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1, 2, 1, 2, 1, 2, 1]) == 1\nassert solution([100, 100, 1, 1, 1, 1, 1]) == 3\nassert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1,2,3,4,5,6,7]) == 1\nassert solution([2,3,4,5,6,7,8]) == 1\nassert solution([3,4,5,6,7,8,9]) == 1\nassert solution([4,5,6,7,8,9,10]) == 1\nassert solution([5,6,7,8,9,10,11]) == 1\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"2.0\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 3') == '1'\nassert solution('10 8') == '2'\nassert solution('7 4') == '3'\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\""
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\n\n---Time Complexity---\nO(NlogK)\n\n'''"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 4, 7, 12, 20]) == 1\nassert solution([2, 3, 7, 12, 20]) == 1\nassert solution([3, 3, 7, 12, 20]) == 1\nassert solution([2, 2, 7, 12, 20]) == 1\nassert solution([2, 3, 4, 5, 6]) == 3\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"0\"\nassert solution(\"3 4\\n\") == \"1\"\nassert solution(\"100 5\\n\") == \"49\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([7, 3]) == \"1\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('111') == '111'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"123\") == \"123\"\nassert solution(\"1000\") == \"1000\""
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"101\") == \"111\"\nassert solution(\"1111\") == \"111\"\nassert solution(\"11111\") == \"111\"\nassert solution(\"11111\") == \"111\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\n\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"0\") == \"0\"\nassert solution(\"00\") == \"00\"\nassert solution(\"11\") == \"11\"\nassert solution(\"9\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('111') == '111'\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(open(0).read()) == \"111\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"101\") == \"11\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"121\") == \"121\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('2 8 2') == '1'\nassert solution('1 5 3') == '2'\nassert solution('2 1 3') == '1'\nassert solution('3 5 4') == '4'\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 6 3\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(1, 6, 3) == 5\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n\n'''\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('1 1 1') == '0'\nassert solution('3 5 2') == '3'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('1 6 2') == '4'\nassert solution('1 1 2') == '2'\nassert solution('3 3 4') == '7'\nassert solution('4 5 3') == '7'\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"7\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"8\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"7 2 5\") == \"7\""
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '5'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\nassert solution('10') == '5'\nassert solution('10') == '3'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"4\") == \"2\"\n\n-------------------------------------------------------------------------------------------------------------\n\n----ABA BAC BCA CAB CBA ACB\n\nGiven a string S consisting only of 'A' and 'B' characters. The task is to count the number of distinct subsequences of S which are of length k. The subsequences can appear in any order.\n\nNote: The order of the subsequences does not matter.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Each test case contains a string S of length N, and k.\n\nOutput:\nFor each test case in a new line, print the number of distinct subsequences of S whose length is k.\n\nConstraints:\n1 \u2264 T \u2264 200\n1 \u2264 N \u2264 20\n1 \u2264 k \u2264 N\n\nExample:\nInput:\n2\nAABABA\n3\n\nOutput:\n3\n1\n\nOutput:\n3\n4\n\n--------------------------------------------------------------------------------------------------------------\n\n----AMAZON LUCKY NUMBER\n\nGiven an integer array A consisting of N positive integers. The task is to find the lucky integer in the array. The lucky integer in an array is the element in the array that appears most frequently in the array. If there is more than one such element, then the element which appears the most often is the lucky integer. If there is no such element, then you should print -1.\n\nInput:\nThe first line of input contains an integer T, the number of test cases. Then T test cases follow. Each test case contains an integer N denoting the size of the array. In the next line are N space separated integers denoting the elements of the array A.\n\nOutput:\nFor each test case, print the expected output in a new line. If the lucky integer is -1 then print -1 else print the lucky integer.\n\nConstraints:\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 A[i] \u2264 1018\n\nExample:\nInput:\n2\n8\n3 1 4 2 4 4 3 1\n5\n1 1 1 1 1\n\nOutput:\n4\n3\n\n-----------------------------------------------------------------------------------------------------------\n\n----GIL PYTHON COURSE\n\nGIL is a global interpreter lock (or just a mutex), and is used to protect code execution in multi-threaded programming environments.\n\nIt is acquired when a thread wants to access a resource that is being used by another thread.\n\nIt is released when a thread has finished using the resource.\n\nIt is not always necessary to acquire the GIL. If there is only one thread in the program, or only one function is being called at a time, then there is no need for a mutex.\n\nIn C, GIL can be implemented with a mutex.\n\nPython has its own implementation of GIL (https://www.python.org/dev/peps/pep-0390/)\n\npython implementation of gil\n\nPython has many implementations of GIL\n\nIf a Python thread needs to hold the GIL, it does so using the mutex\n\nIf a Python thread wants to release the GIL, it does so using the mutex\n\nIf a Python thread needs to acquire the GIL, it does so using the lock\n\nIf a Python thread needs to release the GIL, it does so using the lock\n\nIf a Python thread needs to acquire the GIL and then release it, it does so using the lock\n\nIf a Python thread needs to acquire the GIL and then release it, it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to release the GIL without acquiring it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to release the GIL without acquiring it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the mutex\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does so using the lock\n\nIf a Python thread needs to acquire the GIL without releasing it, then it does"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nassert solution('6') == '4'\nassert solution('1') == '1'\nassert solution('0') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '1'\n\na = input()\nprint(int(a)/2 if int(a) % 2 == 0 else 3*int(a)+1)"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\nassert solution('10') == '5'\nassert solution('5') == '5'\nassert solution('6') == '6'\nassert solution('12') == '12'\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 2 3 4\") == \"Yes\"\nassert solution(\"1 2 3 4 5\") == \"No\"\nassert solution(\"10 9 10 10 11\") == \"Yes\"\nassert solution(\"20 20 20 20\") == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\\n\") == 'No'\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 9 10 10\n''') == 'No'\nassert solution('''\n5 7 8 9\n''') == 'Yes'\nassert solution('''\n3 4 5 2\n''') == 'Yes'\nassert solution('''\n3 2 5 4\n''') == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\") == \"No\"\nassert solution(\"3 3 3 3\") == \"Yes\"\nassert solution(\"2 2 2 2\") == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 'No'\nassert solution('10 9 10 10') == 'Yes'\nassert solution('100 9 10 10') == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 2 3 4\") == \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == 'No'\nassert solution('1 1 1 2') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6 7 8\") == \"Yes\"\nassert solution(\"1 2 3 4\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\nassert solution(\"10 9 10 10\") == 'Yes'\nassert solution(\"1 2 3 4\") == 'Yes'\nassert solution(\"1 2 3 4\") == 'No'\nassert solution(\"1 2 3 4\") == 'Yes'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n10 2 5\n6 3 4\"\"\") == \"5\"\nassert solution(\"\"\"1\n1 3\"\"\") == \"2\"\nassert solution(\"\"\"1\n2 3\"\"\") == \"2\"\nassert solution(\"\"\"2\n7 4 5\"\"\") == \"5\"\nassert solution(\"\"\"5\n5 4 5 3 4\"\"\") == \"7\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n10 2 5\n6 3 4\n''') == \"5\"\nassert solution('''\n5\n1 2 3 4 5\n6 7 8 9 10\n''') == \"13\"\nassert solution('''\n5\n10 2 5\n6 3 4\n''') == \"18\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    4\n    1 2 3 4\n    2\n    \"\"\") == \"5\"\nassert solution(\"\"\"\n    5\n    1 2 3 4 5\n    2\n    \"\"\") == \"4\"\nassert solution(\"\"\"\n    3\n    1 2 3\n    3\n    \"\"\") == \"4\"\nassert solution(\"\"\"\n    3\n    1 2 3\n    1\n    \"\"\") == \"4\"\nassert solution(\"\"\"\n    3\n    1 2 3\n    1\n    \"\"\") == \"0\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\nassert solution('3\\n10 2 5\\n6 3 4') == '5'\nassert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\nassert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"8\"\nassert solution(\"3\\n4 1 2\\n1 2 3\\n\") == \"3\"\nassert solution(\"3\\n4 2 1\\n1 3 2\\n\") == \"4\"\nassert solution(\"3\\n4 3 4\\n1 1 1\\n\") == \"6\""
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n#.###\\n...##\\n#.##\\n.####\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n###.##\\n##.##.\\n####.\\n####.\\n\") == \"###\\n###\\n####\\n####\\n\""
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"###\\n###\\n.##\\n\", solution(\"4 4\")\n\n---"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '###\\n###\\n.##\\n', 'Incorrect solution'\nassert solution('''3 3\n##.\n...\n.#''') == '###\\n##\\n#.', 'Incorrect solution'"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.##\\n.##\\n.##\") == \"###\"\nassert solution(\"4 4\\n.##\\n.##\\n.##\\n#.#\") == \".##\"\nassert solution(\"10 10\\n##.##\\n.##.##\\n##.##\\n##.##\\n##.##\\n.##.##\\n.##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n.##.##\\n.##.##\\n##.##\\n##.##\\n.##.##\\n.##.##\\n.##.##\\n##.##\\n.##.##\\n##.##\\n##.##\\n##.##\\n.##.##\\n##.##\\n.##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##.##\\n##."
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '###\\n###\\n.##\\n'\nassert solution('1 1') == '###\\n###\\n###\\n'\nassert solution('4 6') == '###\\n###\\n.##\\n###\\n###\\n###\\n'\nassert solution('8 4') == '###\\n###\\n.##\\n###\\n###\\n###\\n###\\n###\\n###\\n'"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n###\\n###\\n####') == '###\\n###\\n'\nassert solution('5 5\\n#####\\n###\\n#####\\n###\\n###') == '#####\\n###\\n#####\\n###\\n###'\nassert solution('1 1\\n#\\n#\\n#\\n#') == '#\\n#\\n#\\n#\\n#'\nassert solution('1 1\\n#\\n#\\n#\\n#\\n#') == '#\\n#\\n#\\n#\\n#'\nassert solution('1 1\\n#\\n#\\n#\\n#\\n#') == '#\\n#\\n#\\n#\\n#'"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n##.#') == '###\\n###\\n###', 'test 1'\nassert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n###\\n###', 'test 2'\nassert solution('10 10\\n##.#.\\n....#.\\n##.#.\\n.#.#.\\n##.#.\\n##.#.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n###.\\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n##...\\n##...\\n.#.#\") == '###\\n###\\n.##\\n'\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\n##.#\\n##...\\n##.#\\n#.#...') == '###\\n###\\n.##\\n'\nassert solution('4 4\\n###.#\\n##...\\n##...\\n#.#...') == '###\\n###\\n###\\n'\nassert solution('4 4\\n.##.\\n##...\\n##...\\n#.#...') == '###\\n###\\n###\\n'\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n''') == '16.00000'\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5.2'"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"3\") == \"12.16216216216216216\"\nassert solution(\"4\") == \"24.2739726027397266\"\nassert solution(\"6\") == \"42.8636363636363636\"\nassert solution(\"10\") == \"78.9012345679012346\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"100\") == \"314.1592653589793238462643383279502884197169399375105820974944592307816406286\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"0\") == \"0.0\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '28.08'\nassert solution('7') == '56.396533583965336'\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == \"3.14159265358979323846\"\nassert solution(\"0\\n\") == \"0.0\"\n\n-- Python Solution --\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '6.28318530717958623200'\nassert solution('1') == '6.28318530717958623200'"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AAAA') == 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AASS') == 'Yes'\nassert solution('ASA') == 'No'\nassert solution('ASAS') == 'No'\nassert solution('ASSS') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ASSA') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(\"ABSSA\") == \"Yes\"\nassert solution(\"ABSA\") == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AASSA') == 'Yes'\nassert solution('ASSS') == 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ASSA') == 'Yes', 'Test 1 failed'\nassert solution('AAAB') == 'Yes', 'Test 2 failed'\nassert solution('AAAA') == 'No', 'Test 3 failed'\nassert solution('AAAAB') == 'No', 'Test 4 failed'\nassert solution('ABCDDD') == 'No', 'Test 5 failed'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"NO\") == \"No\"\nassert solution(\"DSA\") == \"Yes\"\nassert solution(\"ASD\") == \"Yes\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ASSA') == 'Yes'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ASSS\") == \"No\"\nassert solution(\"AAAS\") == \"Yes\"\nassert solution(\"AAAA\") == \"Yes\"\nassert solution(\"AAAAA\") == \"No\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('-13 3') == '-10'"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n-13 3\n''') == '-10'\nassert solution('''\n-10 -19\n''') == '-19'\nassert solution('''\n-23 -42\n''') == '-23'\nassert solution('''\n-37 -91\n''') == '-37'\nassert solution('''\n-100 -19\n''') == '-19'\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-13 3\\n') == '-10\\n'\nassert solution('-13 3\\n') == '-10\\n'"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-10 3\") == \"-18\"\nassert solution(\"10 3\") == \"18\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"10\"\nassert solution(\"-13 3\") == \"10\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"-4 -3\") == \"-10\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 -1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2') == '4'\nassert solution('-1 -1') == '-2'\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-1 3\") == \"-1\"\nassert solution(\"3 0\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '2'\nassert solution('-13 3') == '-10'\nassert solution('-123 -456') == '-10'\nassert solution('-1 -2') == '-2'\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '3'\nassert solution('10 3') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('5\\n') == '1'\nassert solution('5\\n6\\n') == '2'\nassert solution('5\\n6\\n8\\n') == '3'\nassert solution('5\\n6\\n8\\n9\\n') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('5\\n5 5 5 8') == '3'\nassert solution('5\\n5 5 5 5') == '0'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"4\", \"6 5 6 8\"]) == \"3\"\nassert solution([\"10\", \"1 2 3 4 5 6 7 8 9 10\"]) == \"10\""
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n6 5 6 8\n''') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('5\\n8 2 1 6 5') == '1'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '3'\nassert solution('6') == '2'\nassert solution('5') == '3'\nassert solution('8') == '1'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('1\\n2 3 4 5') == '1'\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n6 5 6 8''') == '3'\nassert solution('''3\n5 8 10''') == '2'\nassert solution('''2\n1 1''') == '1'\nassert solution('''1\n1''') == '0'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 1 2 1\") == \"2\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution('2') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 1 2 1') == '2 2 1 2 1'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\\n3 4\""
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '2'\nassert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2\n3\n2 3\n''') == '1'\nassert solution('''4\n1 1 1 1\n3\n2 2 2''') == '4'\nassert solution('''7\n1 2 3 1 2 3 4\n3\n4\n5\n6\n7\n8\n9''') == '2'\nassert solution('''9\n1 1 1 1 1 1 1 1 1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '4\\n3 4\\n1 1 1 1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution(r'''\n1\n2\n3\n4\n5\n''') == '1'\nassert solution(r'''\n1\n2\n3\n4\n5\n''') == '2'\nassert solution(r'''\n1\n2\n3\n4\n5\n''') == '4'\nassert solution(r'''\n1\n2\n3\n4\n5\n''') == '3'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"2\") == '2'\nassert solution(\"3\") == '1'\nassert solution(\"4\") == '7'\nassert solution(\"5\") == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3\") == \"1\\n2\"\nassert solution(\"2\\n6\") == \"1\\n2\"\nassert solution(\"3\\n9\") == \"1\\n2\"\nassert solution(\"4\\n999999999\") == \"1\\n2\"\nassert solution(\"5\\n999999984\") == \"1\\n2\""
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"21\") == \"7\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3\n6\n7\n''') == '1'\nassert solution('''\n3\n3\n6\n7\n''') == '1'\nassert solution('''\n1\n1\n1\n1\n''') == '2'\nassert solution('''\n2\n2\n2\n2\n''') == '1'\nassert solution('''\n1\n2\n3\n4\n''') == '3'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n30') == '1'\nassert solution('4\\n25') == '2'\nassert solution('3\\n21') == '1'\nassert solution('2\\n20') == '2'\nassert solution('1\\n30') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n7\n3\n6\n7\n999999999\n999999984''') == '1'\nassert solution('''4\n5\n3\n6\n7\n999999999''') == '2'\nassert solution('''2\n5\n3\n6\n7\n999999999''') == '1'\nassert solution('''3\n4\n3\n6\n7\n999999999''') == '2'\nassert solution('''2\n3\n2\n6\n7\n999999999''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3') == '1\\n2'\nassert solution('2\\n6') == '1\\n2'\nassert solution('3\\n9') == '1\\n2'\nassert solution('4\\n16') == '1\\n2'\nassert solution('5\\n25') == '1\\n2'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3\n4\n7\n''') == '1'\nassert solution('''\n1\n3\n5\n''') == '2'\nassert solution('''\n1\n4\n3\n''') == '1'\nassert solution('''\n2\n3\n4\n''') == '1'\nassert solution('''\n1\n2\n3\n''') == '1'\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n6\n7\n''') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\", \"Wrong result\"\nassert solution(\"1000000000 9\") == \"1\", \"Wrong result\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000000000000000') == '1000000000000000'\nassert solution('1000000000000000') == '1000000000000000'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('-12') == '-13'\nassert solution('0') == '0'\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"512 4\\n\") == \"50\\n\", \"Wrong solution\"\nassert solution(\"1000000000 9\\n\") == \"1\\n\", \"Wrong solution\""
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    512 4\n''') == '50'\nassert solution('''\n    1000000000 9\n''') == '1'\n'''\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n512 4\n''') == '50'\nassert solution('''\n1000000000 9\n''') == '1'\nprint(\"You're all set!\")"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4 3 5 1 2 2 1\n''') == '5'\nassert solution('''\n5\n3 7 5 1 5\n''') == '2'\nassert solution('''\n7\n2 2 3 2 1 2 2\n''') == '7'"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 3 5 1 2 2 1\n''') == '5'\nassert solution('''7\n3 7 5 1 5\n''') == '7'\nassert solution('''3\n5 1 4\n''') == '2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2\\n3 4 5 2 3 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3 5 1 2 2 1\n4 3 5 1 5 2 2 1\n1 3 5 4 1 5 2 2\n1 2 3 4 5 1 5 2''') == '5 2 1 1 2 2 2'\nassert solution('''5 7 5 1 5\n5 7 5 1 5\n1 7 5 4 1 5\n1 2 7 5 3 1 5\n1 3 7 5 2 4 1\n1 4 7 5 1 3 1\n1 5 7 5 1 4 1\n1 6 7 5 1 3 4 1\n1 7 7 5 1 4 4 1\n1 8 7 5 1 3 4 4 1\n1 9 7 5 1 4 4 4 1\n1 10 7 5 1 3 4 4 1\n1 11 7 5 1 4 4 4 1\n1 12 7 5 1 3 4 4 1\n1 13 7 5 1 4 4 4 1\n1 14 7 5 1 3 4 4 1\n1 15 7 5 1 4 4 4 1\n1 16 7 5 1 3 4 4 1\n1 17 7 5 1 4 4 4 1\n1 18 7 5 1 3 4 4 1\n1 19 7 5 1 4 4 4 1\n1 20 7 5 1 3 4 4 1\n1 21 7 5 1 4 4 4 1\n1 22 7 5 1 3 4 4 1\n1 23 7 5 1 4 4 4 1\n1 24 7 5 1 3 4 4 1\n1 25 7 5 1 4 4 4 1\n1 26 7 5 1 3 4 4 1\n1 27 7 5 1 4 4 4 1\n1 28 7 5 1 3 4 4 1\n1 29 7 5 1 4 4 4 1\n1 30 7 5 1 3 4 4 1\n1 31 7 5 1 4 4 4 1\n1 32 7 5 1 3 4 4 1\n1 33 7 5 1 4 4 4 1\n1 34 7 5 1 3 4 4 1\n1 35 7 5 1 4 4 4 1\n1 36 7 5 1 3 4 4 1\n1 37 7 5 1 4 4 4 1\n1 38 7 5 1 3 4 4 1\n1 39 7 5 1 4 4 4 1\n1 40 7 5 1 3 4 4 1\n1 41 7 5 1 4 4 4 1\n1 42 7 5 1 3 4 4 1\n1 43 7 5 1 4 4 4 1\n1 44 7 5 1 3 4 4 1\n1 45 7 5 1 4 4 4 1\n1 46 7 5 1 3 4 4 1\n1 47 7 5 1 4 4 4 1\n1 48 7 5 1 3 4 4 1\n1 49 7 5 1 4 4 4 1\n1 50 7 5 1 3 4 4 1\n1 51 7 5 1 4 4 4 1\n1 52 7 5 1 3 4 4 1\n1 53 7 5 1 4 4 4 1\n1 54 7 5 1 3 4 4 1\n1 55 7 5 1 4 4 4 1\n1 56 7 5 1 3 4 4 1\n1 57 7 5 1 4 4 4 1\n1 58 7 5 1 3 4 4 1\n1 59 7 5 1 4 4 4 1\n1 60 7 5 1 3 4 4 1\n1 61 7 5 1 4 4 4 1\n1 62 7 5 1 3 4 4 1\n1 63 7 5 1 4 4 4 1\n1 64 7 5 1 3 4 4 1\n1 65 7 5 1 4 4 4 1\n1 66 7 5 1 3 4 4 1\n1 67 7 5 1 4 4 4 1\n1 68 7 5 1 3 4 4 1\n1 69 7 5 1 4 4 4 1\n1 70 7 5 1 3 4 4 1\n1 71 7 5 1 4 4 4 1\n1 72 7 5 1 3 4 4 1\n1 73 7 5 1 4 4 4 1\n1 74 7 5 1 3 4 4 1\n1 75 7 5 1 4 4 4 1\n1 76 7 5 1 3 4 4 1\n1 77 7 5 1 4 4 4 1\n1 78 7 5 1 3 4 4 1\n1 79 7 5 1 4 4 4 1\n1 80 7 5 1 3 4 4 1\n1 81 7 5 1 4 4 4 1\n1 82 7 5 1 3 4 4 1\n1 83 7 5 1 4 4 4 1\n1 84 7 5 1 3 4 4 1\n1 85 7 5 1 4 4 4 1\n1 86 7 5 1 3 4 4 1\n1 87 7 5 1 4 4 4 1\n1 88 7 5 1 3 4 4 1\n1 89 7 5 1 4 4 4 1\n1 90 7 5 1 3 4 4 1\n1 91 7 5 1 4 4 4 1\n1 92 7 5 1 3 4 4 1\n1 93 7 5 1 4 4 4 1\n1 94 7 5 1 3 4 4 1\n1 95 7 5 1 4 4 4 1\n1 96 7 5 1 3 4 4 1\n1 97 7 5 1 4 4 4 1\n1 98 7 5 1 3 4 4 1\n1 99 7 5 1 4 4 4 1\n1 100 7 5 1 3 4 4 1\n1 101 7 5 1 4 4 4 1\n1 102 7 5 1 3 4 4 1\n1 103 7 5 1 4 4 4 1\n1 104 7 5 1 3 4 4 1\n1 105 7 5 1 4 4 4 1\n1 106 7 5 1 3 4 4 1\n1 107 7 5 1 4 4 4 1\n1 108 7 5 1 3 4 4 1\n1 109 7 5 1 4 4 4 1\n1 110 7 5 1 3 4 4 1\n1 111 7 5 1 4 4 4 1\n1 112 7 5 1 3 4 4 1\n1 113 7 5 1 4 4 4 1\n1 114 7 5 1 3 4 4 1\n1 115 7 5 1 4 4 4 1\n1 116 7 5 1 3 4 4 1\n1 117 7 5 1 4 4 4 1\n1 118 7 5 1 3 4 4 1\n1 119 7 5 1 4 4 4 1\n1 120 7 5 1 3 4 4 1\n1 121 7 5 1 4 4 4 1\n1 122 7 5 1 3 4 4 1\n1 123 7 5 1 4 4 4 1\n1 124 7 5 1 3 4 4 1\n1 125 7 5 1 4 4 4 1\n1 126 7 5 1 3 4 4 1\n1 127 7 5 1 4 4 4 1\n1 128 7 5 1 3 4 4 1\n1 129 7 5 1 4 4 4 1\n1 130 7 5 1 3 4 4 1\n1 131 7 5 1 4 4 4 1\n1 132 7 5 1 3 4 4 1\n1 133 7 5 1 4 4 4 1\n1 134 7 5 1 3 4 4 1\n1 135 7 5 1 4 4 4 1\n1 136 7 5 1 3 4 4 1\n1 137 7 5 1"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '5'\nassert solution('5') == '2'\nassert solution('3') == '4'\nassert solution('2') == '1'\nassert solution('2') == '4'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '7\\n4 3 5 1 2 2 1\\n') == '5\\n2 1 1 2 3\\n'\nassert solution(\n    '5\\n3 7 5 1 5\\n') == '2\\n5 5\\n'\nassert solution(\n    '3\\n5 1 4\\n') == '2\\n4 5\\n'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n3 7 5 1 5\n''') == '2 5 1 2 2 3'\nassert solution('''\n5\n2 2 3 2 1 2 2\n''') == '4 5 5 2 2 2 3'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 7 5 1 5\n''') == '2'\n\nassert solution('''\n7\n2 2 3 2 1 2 2\n''') == '7'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2\\n1 2 3\\n'\nassert solution('7') == '7\\n1 2 2 2 2 3 2\\n'\nassert solution('2') == '2\\n'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 21\") == \"2\"\nassert solution(\"4 16\") == \"-1\"\nassert solution(\"4 20\") == \"2\""
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 8\") == \"2\"\nassert solution(\"4 16\") == \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\"\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 21\") == \"2\"\nassert solution(\"4 16\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution(\"4 21\") == '2'\nassert solution(\"4 16\") == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 16\\n1 1\\n1 1\\n5 4\\n1 2\\n6 4\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 21\") == \"2\"\nassert solution(\"4 16\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 21') == '2'\nassert solution('4 16') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(open(0).read()) == '2'\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '2'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    1\n    7 5 3\n    6 1 1\n    6 6 1\n    5 2 2\n''') == \"tleelte\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 5 3') == 'tleel'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvv'\nassert solution('5 2 2') == 'abcde'\nassert solution('10 10 10') == 'pqrst'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'tleelte'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('6 6 1') == 'abcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"tleelte\"\nassert solution(input_data) == \"qwerty\"\nassert solution(input_data) == \"vvvvvv\"\nassert solution(input_data) == \"abcde\""
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == 'tleelte'\nassert solution('''\n1\n4\n7\n''') == 'leet'\nassert solution('''\n1\n5\n1\n''') == 'e'\nassert solution('''\n1\n3\n5\n''') == 'e'\nassert solution('''\n1\n2\n3\n''') == 'e'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\\n') == 'tleelte'\nassert solution('2\\n3\\n1\\n') == ''\nassert solution('10\\n5 3 1\\n10 5 2\\n') == 'qwerty'\nassert solution('10\\n10 3 1\\n10 5 2\\n') == 'vvvvvv'\nassert solution('10\\n10 3 1\\n7 5 3\\n10 5 2\\n') == 'abcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == 'tleelte'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3\\n\"\n    \"7 5 3\"\n    \"6 1 1\"\n    \"6 6 1\"\n    \"5 2 2\"\n    ) == \"tleelte\"\n\nassert solution(\n    \"4\\n\"\n    \"7 5 3\"\n    \"6 1 1\"\n    \"6 6 1\"\n    \"5 2 2\"\n    ) == \"qwerty\"\n\nassert solution(\n    \"5\\n\"\n    \"7 5 3\"\n    \"6 1 1\"\n    \"6 6 1\"\n    \"5 2 2\"\n    ) == \"vvvvvv\"\n\nassert solution(\n    \"6\\n\"\n    \"7 5 3\"\n    \"6 1 1\"\n    \"6 6 1\"\n    \"5 2 2\"\n    ) == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 5 3\n6 1 1\n6 6 1\n5 2 2\n''') == \"tleelte\"\nassert solution('''2\n2\n2\n''') == \"qwer\"\nassert solution('''2\n2\n2\n''') == \"v\"\nassert solution('''2\n2\n2\n''') == \"qwer\"\n\nassert solution('''3\n3\n3\n''') == \"abcde\""
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 20 8\") == \"20\"\n\n'''\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('15 10 4') == '20'"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"12\""
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"5 10 4\") == \"4\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"10 2 8\") == \"8\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 6') == '6'\nassert solution('10 3 2') == '8'\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 2 6\") == \"14\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 2 5') == '10'\nassert solution('4 8 7') == '25'\nassert solution('20 4 8') == '32'\nassert solution('20 5 3') == '12'\nassert solution('20 10 7') == '72'\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('20 20 10') == '20'\nassert solution('20 20 10 10') == '20'\n\n'''"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"12 12 6\") == \"12\"\nassert solution(\"20 20 20\") == \"20\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"20 20 20\") == \"20\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('5 8 1') == '8'\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"7\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"5\"\nassert solution(\"1000\") == \"6\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\n\n---\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '3'\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('5') == '3'\nassert solution('8') == '4'\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '2'\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"20 2\") == \"3\"\nassert solution(\"20 2\") == \"2\"\nassert solution(\"100 200\") == \"3\"\nassert solution(\"100 200\") == \"2\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\nassert solution('1 10') == '10'\nassert solution('10 20') == '15'\nassert solution('10 30') == '20'"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '3'\nassert solution('1 2') == '2'\nassert solution('1 10') == '10'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == '3'\nassert solution('5 1') == '4'\nassert solution('4 3') == '4'\nassert solution('100 100') == '100'\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == '3'\n\n\"\"\"\nfrom math import factorial\nfrom itertools import combinations\n\na, p = map(int, input().split())\n\napple_pie = a // p\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '3'\nassert solution('3 5') == '4'\nassert solution('2 2') == '2'\nassert solution('1 2') == '2'\nassert solution('1 5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"10 20\n\"\"\") == \"2\"\nassert solution(\"\"\"5 15\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1 1\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"3 4\") == \"2 2\"\nassert solution(\"3 4\") == \"2 3\""
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '5'\nassert solution('2 3') == '1'\n\n## WRONG RESULT ##\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 12') == '15'\nassert solution('5 10') == '5'\n\"\"\"\n\nstdin = input().strip()\nnums = stdin.split()\na, b = int(nums[0]), int(nums[1])\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 12\n''') == '16'\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"6 5\") == \"10\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"10 5\") == \"15\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2 2\"\nassert solution(\"3 3\") == \"1 1\"\nassert solution(\"4 5\") == \"3 3\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '6'\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"5 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('4\\n8') == '4'\nassert solution('6\\n10') == '4'\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"6\", \"3 + 3 = 6\"\nassert solution(\"4 6\") == \"5\", \"4 - 6 = 5\"\n\n-----Hint: Sample Test Cases-----\n\nSample Test Case 1\n>>> solution(\"3 5\")\n'8'\n\nSample Test Case 2\n>>> solution(\"4 3\")\n'6'\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\nassert solution('chokudaizz') == 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''chokudai\nchokudaiz''') == 'Yes'\nassert solution('''chokudai\nchokudakiz''') == 'No'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 16''') == '9'\nassert solution('''5 7''') == '9'\nassert solution('''0 0''') == 'IMPOSSIBLE'\nassert solution('''2 0''') == 'IMPOSSIBLE'\n\n------------------"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('1 2') == 'IMPOSSIBLE'\nassert solution('1 100') == 'IMPOSSIBLE'\nassert solution('0 1') == '9'\nassert solution('1 100') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 5\") == \"9\"\nassert solution(\"3 4\") == \"9\"\nassert solution(\"10 10\") == \"IMPOSSIBLE\"\nassert solution(\"2 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1000000 1000000000\") == \"IMPOSSIBLE\"\nassert solution(\"5 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 16\") == \"9\"\nassert solution(\n    \"4 5\") == \"IMPOSSIBLE\"\nassert solution(\n    \"0 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '9'\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 1\") == \"9\"\nassert solution(\"4 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1\\n'\nassert solution('2 10\\n') == 'IMPOSSIBLE\\n'\nassert solution('2 5\\n') == '9\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 16\") == \"9\"\nassert solution(\"0 0\") == \"IMPOSSIBLE\""
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('117') == 'Yes'\nassert solution('101') == 'No'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"112\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'No'\nassert solution('123') == 'No'\nassert solution('125') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('8') == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('117') == \"Yes\"\nassert solution('112') == \"No\"\nassert solution('70') == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('117') == \"Yes\"\nassert solution('123') == \"No\"\nassert solution('7') == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\nassert solution('101') == 'No'\nassert solution('10') == 'No'\nassert solution('-1') == 'No'\nassert solution('0') == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('117') == 'Yes'\nassert solution('22') == 'No'\nassert solution('333') == 'Yes'\n\"\"\"\n\nN = stdin.strip()"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"123\") == \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\nassert solution('100') == 'No'\nassert solution('101') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == 'Yes'\nassert solution('2\\n') == 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12345\") == \"Yes\"\nassert solution(\"123456\") == \"No\"\n\"\"\"\nimport math"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'\n\"\"\"\n\nN = int(input())\nS = 0\nwhile N > 0:\n    N, d = divmod(N, 10)\n    S += d\nprint('Yes' if S % N == 0 else 'No')\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'Yes'\nassert solution('10') == 'No'\nassert solution('1') == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"12\") == \"No\"\n\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 1''') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 1') == '-1 1 -1 0'\n\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 0 1 0\") == \"-1 0 1 -1\"\nassert solution(\"0 0 0 1\") == \"-1 0 1 -1\"\nassert solution(\"0 0 0 1\") == \"-1 0 1 -1\"\nassert solution(\"1 1 2 2\") == \"0 0 0 1\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\", \"Wrong\"\nassert solution(\"-1 -1 1 1\") == \"-1 1 -1 0\", \"Wrong\"\nassert solution(\"2 2 1 1\") == \"0 0 0 1\", \"Wrong\"\nassert solution(\"2 1 -1 1\") == \"0 1 -1 0\", \"Wrong\"\nassert solution(\"1 2 1 1\") == \"0 0 0 1\", \"Wrong\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('1 1 1 -1') == '-1 -1 1 -1'\nassert solution('2 2 -3 -4') == '3 -4 2 -3'\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('1 1 1 1') == '0 0 0 1'"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '-1 1 -1 0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('0 0 0 -1') == '-1 -1 1 0'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('4 4 4 4') == '4 4 4 4'\nassert solution('2 2 2 2') == '2 2 2 2'"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('10 5') == '5'\nassert solution('12 0') == '0'\nassert solution('1 1 0') == '1'\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solve(self, S, T, U):\n        s=list(S)\n        t=list(T)\n        u=list(U)\n        s.sort()\n        t.sort()\n        u.sort()\n        s.sort()\n        t.sort()\n        s.sort()\n        res=0\n        i=0\n        j=0\n        for k in range(len(s)):\n            if u[i]==s[k]:\n                res=res+1\n                i=i+1\n            if u[j]==t[k]:\n                res=res+1\n                j=j+1\n        return res"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\n1 2\\n3 5\") == \"5 4\"\nassert solution(\"5 1\\n2 4\\n2 4\") == \"3 2\"\nassert solution(\"2 2\\n1 1\") == \"1 1\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('red blue') == '2 4'\nassert solution('red blue') == '2 4'\nassert solution('red blue') == '2 4'\nassert solution('red blue') == '2 4'"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2 4'"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('red blue') == '2 4'\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('red blue') == '2 4'\nassert solution('a b') == '1 2'\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\nabcabc') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(6) == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcabc\") == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\nabcabc\\n\") == \"Yes\"\nassert solution(\"9\\nabcabcabcabcabcabc\\n\") == \"Yes\"\nassert solution(\"4\\nabc\\n\") == \"No\"\nassert solution(\"5\\nabcabc\\n\") == \"No\"\nassert solution(\"1\\na\\n\") == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\nabc\n''') == 'No'\nassert solution('''8\nabcabc\n''') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('2') == 'No'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('1') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == 'Yes'\nassert solution('10') == 'No'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 1 2') == '3.000000 0'\nassert solution('2 3 1 2') == '3.000000 1'\nassert solution('2 2 3 1') == '0.000000 1'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    4 2 1 2\n    ''') == '1'\n\nassert solution('''\n    2 2 1 2\n    ''') == '3.000000'\n\nassert solution('''\n    1 2 1 2\n    ''') == '0'"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 1 2') == '3.000000 0'\nassert solution('4 1 4 2') == '3.000000 0'\nassert solution('4 1 4 5') == '2.000000 1'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 2 1 2') == '0'\nassert solution('5 5 7 7') == '5.000000 0'\nassert solution('4 5 5 3') == '0'\nassert solution('6 3 5 3') == '5.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 1 2\n''') == '3.000000 0'\n\nassert solution('''1 3 5 7\n''') == '0.000000 0'\n\nassert solution('''2 2 2 2\n''') == '0.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"1\") == \"0.000000 0\"\nassert solution(\"1 0 0\") == \"0.000000 0\"\nassert solution(\"3 2 0\") == \"0.000000 0\"\nassert solution(\"3 1 2\") == \"2.000000 1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\n\"\"\"\n\nW, H, x, y = map(int, input().split())"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5 1 2\n''') == '1.000000 1'\nassert solution('''4 3 2 1\n''') == '1.000000 0'\nassert solution('''6 7 1 8\n''') == '0.000000 0'\nassert solution('''3 7 4 2\n''') == '0.000000 0'\nassert solution('''10 4 10 3\n''') == '0.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 2 1 2') == '1.000000 0'\nassert solution('0.5 0.5 1 2') == '0.500000 0'\nassert solution('1 0.5 1 2') == '0.500000 0'\nassert solution('0.5 1 0.5 1 2') == '0.500000 0'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Four'"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nP Y Y G\") == \"Four\"\nassert solution(\"4\\nP G Y\") == \"Three\"\nassert solution(\"3\\nG P Y\") == \"Two\"\nassert solution(\"2\\nG P\") == \"One\""
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\nG W Y P Y W\n''') == 'Four'\nassert solution('''8\nW W G G\n''') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"Four\"\nassert solution(\"5\") == \"Three\""
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'Four'\nassert solution('10') == 'Three'\nassert solution('1') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\nG W Y P Y W\n''') == 'Four'\nassert solution('''1\nG\n''') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\\nP W Y P Y W\") == \"Four\"\nassert solution(\"2\\nP W\") == \"Three\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Four\"\n\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import Dict, List\n\nN = int(input())\ncolors = input().split()\n\ncnt_p, cnt_w, cnt_g, cnt_y = Counter(colors), Counter(), Counter(), Counter()\nfor i, c in enumerate(colors):\n    if c == 'P':\n        cnt_p[c] += 1\n        if i + 1!= N and colors[i + 1] == 'W':\n            cnt_p[colors[i + 1]] += 1\n    elif c == 'W':\n        cnt_w[c] += 1\n        if i + 1!= N and colors[i + 1] == 'G':\n            cnt_w[colors[i + 1]] += 1\n    elif c == 'G':\n        cnt_g[c] += 1\n        if i + 1!= N and colors[i + 1] == 'Y':\n            cnt_g[colors[i + 1]] += 1\n    else:\n        cnt_y[c] += 1\n        if i + 1!= N and colors[i + 1] == 'P':\n            cnt_y[colors[i + 1]] += 1"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10\") == \"Three\"\nassert solution(\"5\") == \"Three\"\nassert solution(\"10\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == \"Four\", \"Should return Four\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 3') == '2'\nassert solution('5 5 6') == '2'"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3 2') == '6'\nassert solution('5 3 3') == '2'\nassert solution('5 5 6') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 3') == '2'\nassert solution('5 5 6') == '2'\n\"\"\"\nimport math\nimport sys\nfrom collections import deque\nsys.stdin = open(\"input.txt\", \"rt\")\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 5 6\") == \"2\"\nassert solution(\"7 5 6\") == \"1\"\nassert solution(\"4 4 6\") == \"1\"\nassert solution(\"10 2 4\") == \"4\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 3 2') == '6'\nassert solution('5 3 3') == '2'\nassert solution('5 5 6') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\") == \"2\"\nassert solution(\"6 3 2\") == \"6\"\nassert solution(\"5 5 6\") == \"2\"\nassert solution(\"10 5 5\") == \"1\"\nassert solution(\"10 10 10\") == \"0\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 3\n1 2 4 2 3''') == \"6\"\nassert solution('''5 5 6\n1 2 6 10 3\n\n''') == \"2\"\nassert solution('''6 3 2\n2 3 1 3 4 2\n\n''') == \"6\""
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3 2') == '6'\nassert solution('5 3 3') == '2'\nassert solution('5 5 6') == '2'\n\n\n\"\"\"\nfrom itertools import permutations\nimport math\nimport sys"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 3\n1 2 3 3 4\n''') == '6'\n\nassert solution('''5 5 6\n1 2 4 2 3\n''') == '2'\n\nassert solution('''10 10 10\n1 2 3 3 4\n''') == '10'"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n5 8 2 6 2\n4 5 4 1 3\n''') == '7'\n\nassert solution('''\n4\n1 3 2 4\n1 3 2 4\n''') == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 8 2 6 2\n4 5 4 1 3\n''') == '7'\nassert solution('''5\n1 3 2 4\n1 3 2 4\n''') == '0'\nassert solution('''5\n1 2 1 3\n1 2 1 3\n''') == '0'\nassert solution('''5\n1 1 1 3\n1 1 1 3\n''') == '1'"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n4 8 2 6 2') == '7'\nassert solution('4\\n1 3 2 4') == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 3 2 4\n4 5 4 1 3\n''') == '7'\nprint(solution('''4\n1 3 2 4\n4 5 4 1 3\n'''))\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == \"2\"\nassert solution('4') == \"0\"\nassert solution('5') == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n4\n4 8 2 6 2\n4 5 4 1 3\n\n\"\"\"\n) == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n4 8 2 6 2\n4 5 4 1 3\n''') == '7'\nassert solution('''\n4\n1 3 2 4\n1 3 2 4\n''') == '0'\nassert solution('''\n3\n1 3 2\n1 3 2\n''') == '2'\n\n''')\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n\"\n    \"4 8 2 6 2\\n\"\n    \"4 5 4 1 3\\n\"\n) == \"7\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1 1 3 5 9\"\nassert solution(input_) == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 1 3 5 9\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 4 5 10''') == '1 1 3 5 9'\nassert solution('''10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000''') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'''\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 1 3 5 9'\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n4\n5\n10\n''') == '1 1 3 5 9'"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1 1 3 5 9\"\nassert solution(\"10\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 4 5 10''') == '1 1 3 5 9'\nassert solution('''10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000''') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\nassert solution('''100\n10000 1 2 3 4 5 6 7 8 9''') == '10000 1 2 3 4 5 6 7 8 9'\nassert solution('''101\n10000 1 2 3 4 5 6 7 8 9''') == '10000 1 2 3 4 5 6 7 8 9'\nassert solution('''102\n10000 1 2 3 4 5 6 7 8 9''') == '10000 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 4 5 10''') == '1 1 3 5 9'\nassert solution('''10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\n''') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'''\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 1 3 5 9'\nassert solution('10') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 1 3 5 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 4') == '1'\nassert solution('5 4') == '2'\nassert solution('1 8') == '1'\nassert solution('5 11') == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n3 4\n5 4\n3 5\n''') == '1'\nassert solution('''\n5 4\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n''') == '2'\n\n'''\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"1\""
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution_another() == '2'"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '1'\nassert solution('17 15') == '2'\nassert solution('1 8') == '1'\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5\n''') == \"1\"\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n''') == \"2\"\nassert solution('''1 1\n1 2\n3 2\n3 4\n4 4\n4 5\n5 5\n5 6\n6 6''') == \"2\"\nassert solution('''1 10\n1 2\n2 5\n1 6\n1 7\n5 6\n5 7\n6 7\n6 8\n7 8\n7 9\n8 9\n9 10\n5 10\n10 11\n5 11\n11 12\n12 13\n10 13\n11 14\n13 14\n13 15\n15 16\n10 16\n11 17\n15 17\n14 18\n13 18\n12 19\n13 19\n12 20\n14 20\n14 21\n15 21\n16 22\n17 22\n15 23\n16 23\n12 24\n11 25\n23 26\n23 27\n21 28\n22 29\n19 30\n18 31\n21 32\n20 33\n18 34\n17 35\n16 36\n15 37\n14 38\n13 39\n13 40\n12 41\n12 42\n11 43\n10 44\n9 45\n8 46\n7 47\n6 48\n5 49\n4 50\n3 51\n4 52\n3 53\n2 54\n2 55\n1 56''') == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 4\n1 2\n3 4\n5 4\n3 5\n\n''') == '1'\nassert solution('''\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\n''') == '2'\nassert solution('''\n11\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n''') == '1'\nassert solution('''\n20\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48\n49 50\n51 52\n53 54\n55 56\n57 58\n59 60\n61 62\n63 64\n65 66\n67 68\n69 70\n71 72\n73 74\n75 76\n77 78\n79 80\n81 82\n83 84\n85 86\n87 88\n89 90\n91 92\n93 94\n95 96\n97 98\n99 100\n''') == '1'\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"1\"\nassert solution(\"17 15\") == \"2\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\nassert solution('''\n5\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '2'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\n\nassert solution('''3\n1 1 2\n2 3\n1 3\n''') == '0'\n\nprint(solution('''3\n1 1 2\n2 3\n1 3\n'''))\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n1 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\"\n) == \"1\"\nassert solution(\n    \"3\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\"\n) == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nprint(solution())\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\nassert solution('''3\n1 1 2\n2 3\n1 3\n''') == '0'\nassert solution('''4\n1 1 2\n2 3\n1 3\n''') == '1'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('7') == '0'\nassert solution('8') == '0'\nassert solution('9') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\nassert solution('''\n3\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\nassert solution('''\n3\n1 0 0 0 2\n1 2\n2 3\n2 4\n2 5\n''') == '0'\nassert solution('''\n4\n1 1 2\n2 3\n1 3\n2 4\n2 5\n''') == '4'\nassert solution('''\n3\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution('''\n3\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '4'\nassert solution('''\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n''') == '0'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\naz\nbf''') == 'bc'\n\nassert solution('''5\nafogk\nasdji''') == 'alvuw'\n\nassert solution('''6\nnijfvj\ntvqhwp''') == 'qoztvz'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'bc'\nassert solution('5') == 'alvuw'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'bc'\nassert solution('5') == 'qoztvz'"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'acb'\nassert solution('4') == 'dva'\nassert solution('5') == 'qtz'\nassert solution('6') == 'qzv'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\naz\nasdji\n''') == 'asdji'\nassert solution('''4\nafogk\nasdji\n''') == 'asdji'\nassert solution('''5\nnijfvj\ntvqhwp\n''') == 'qoztvz'\nassert solution('''6\nnijfvj\ntvqhwp\n''') == 'def'\nassert solution('''3\nafogk\nasdji\n''') == 'asdji'\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '2\\naz\\nbf'\n    ) == 'bc'\nassert solution(\n    '5\\nafogk\\nasdji'\n    ) == 'qoztvz'\nassert solution(\n    '6\\nnijfvj\\ntvqhwp'\n    ) == 'def'\n\n\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2\\naz\\nbf\"\n) == \"bc\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\naz\\nbf\") == \"bc\"\nassert solution(\"5\\nafogk\\nasdji\") == \"alvuw\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == 'alvuw'\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('4 4') == 'YES'\n\n\n\n'''\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 4') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('4 4') == 'YES'\nassert solution('5 5') == 'NO'\nassert solution('5 4') == 'NO'\n\n'''\n\nn, k = map(int, input().split())\n\na = sorted(map(int, input().split()))\n\ncount = 1\n\nwhile True:\n    if count > k:\n        break\n    if len(a) == 0:\n        print('NO')\n        break\n    if a[0] == max(a):\n        print('YES')\n        print(a[0], end=' ')\n        del a[0]\n        count += 1\n    else:\n        del a[0]\n\nprint('YES')\nfor i in range(count, k+1):\n    print(i, end=' ')"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n15 13 15 15 12\n''') == 'YES\\n1 2 5 \n\nassert solution('''\n4 4\n20 10 40 30\n''') == 'NO'\n\nassert solution('''\n1 5\n10 10 10 10 10\n''') == 'YES\\n1 2 3 4 \n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"4 4\") == \"YES\""
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == \"YES\"\nassert solution('5 4') == \"NO\"\nassert solution('4 4') == \"YES\"\n'''\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n        \"5 3\\n\" +\n        \"15 13 15 15 12\"\n        ) == \"YES\\n1 2 5\\n\"\n\nassert solution(\n        \"5 4\\n\" +\n        \"20 10 40 30\"\n        ) == \"NO\\n\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 4') == 'NO'\nassert solution('4 4') == 'YES'"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n1 2 3 4\\n5\\n1 2 4 0 2\\n4\\n1 2 3 4\"\n) == \"NO\"\nassert solution(\n    \"3\\n1 2 3\\n1 2\\n3\\n1 2\\n1\\n2\\n1\"\n) == \"YES\"\nassert solution(\n    \"4\\n1 2 3 4\\n1 2 4 0 2\\n5\\n1 2 3 4\\n4\\n1 2 3 4\"\n) == \"YES\""
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 0 2\") == \"YES\", solution\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\", solution\nassert solution(\"6 2 4 0 2\") == \"NO\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 0 2\") == \"YES\"\nassert solution(\"4\\n1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 0 2') == 'YES'\nassert solution('3\\n3 2 1 0') == 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 0\\n') == 'YES\\n1 0 1 0 0\\n'\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '3'\nassert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '0'\nassert solution('''\n4\n10 2 3 7\n100 51 51 51\n1000000000 1 1 1000000000\n''') == '1134'"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '0'\nassert solution('100') == '1134'\nassert solution('200') == '0'"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"1134\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"0\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"1134\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\"\nassert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000001 1 1 1000000000\") == \"0\"\nassert solution(\"3\\n1000000000 1 1 1000000000\\n100 51 51 51\\n1234 1 100 199\\n1000000001 1 1 1000000000\") == \"1134\"\nassert solution(\"3\\n1000000001 1 1 1000000000\\n100 51 51 51\\n1234 1 100 199\\n1000000001 1 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n') == '3'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\"\nassert solution(\"2\\n10 2 3 7\\n100 50 51 50\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"0\"\nassert solution(\"2\\n10 2 3 7\\n100 1 100 199\\n1000000000 1 1 1000000000\") == \"1134\"\nassert solution(\"2\\n10 2 3 7\\n100 1 100 199\\n1000000000 1 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '3'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '1134'\nassert solution('''5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '0'\nassert solution('''5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '0'\nassert solution('''7\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n10000000 32 1 32''') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3'\nassert solution('1\\n1000000000 1 1 1000000000') == '0'\nprint(solution(*[*map(int, input().split())] * 1))"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == \"3\"\nassert solution('''\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == \"1134\"\nassert solution('''\n5\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\nassert solution(\"3\\n1 2 5\\n100 101\\n1\\n2\\n\") == \"1134\"\nassert solution(\"3\\n1 2 5\\n100 101\\n1\\n2\\n\") == \"0\"\nassert solution(\"3\\n1 2 5\\n100 101\\n1\\n2\\n\") == \"0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n''') == '1'\nassert solution('''\n4\n''') == '3'\nassert solution('''\n8\n''') == '1260'\nassert solution('''\n20\n''') == '12164510040883200'\nassert solution('''\n0\n''') == '1'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"12164510040883200\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n''') == '1'\n\nassert solution('''\n4\n''') == '3'\n\nassert solution('''\n20\n''') == '12164510040883200'\n\nassert solution('''\n2\n''') == '1'"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nprint(solution(input()))"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\nu''') == 'u'\nprint(solution('''1 1\ncccaabababaccbc'''))\nassert solution('''15 3\ncccaabababaccbc''') == 'cccbbabaccbc'\nprint(solution('''15 9\ncccaabababaccbc'''))\nassert solution('''1 1\nu''') == ''\nprint(solution('''1 1\ncccaabababaccbc'''))\nassert solution('''1 1\nu''') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"15 3\") == \"cccbbabaccbc\"\nassert solution(\"15 9\") == \"cccccc\"\nassert solution(\"1 1\") == \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == ''\n\nassert solution('3 2') == 'b'\n\nassert solution('15 3') == 'ccbbabaccbc'\n\nassert solution('20 1') == 'u'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\n1 1''') == '1 1'\nassert solution('''3 6\n1 2 3 4 5 6''') == '1 2 3 4 5'\nassert solution('''5 2\n1 2 3 4 5''') == '3 4 5'\nassert solution('''5 7\n1 2 3 4 5 6 7''') == ''\nassert solution('''5 6\n1 2 3 4 5 6 7''') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '', 'Empty'\nassert solution('2 2') == '', 'Empty'\nassert solution('3 3') == '', 'Empty'\nassert solution('4 4') == '', 'Empty'\nassert solution('5 5') == '', 'Empty'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"15 3\") == \"ccbbabaccbc\"\nassert solution(\"15 9\") == \"cccccc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"15 3\") == \"cccbbabaccbc\"\nassert solution(\"1 1\") == \"def\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"u\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('15 3\\ncccaabababaccbc') == 'cccbbabaccbc', f'Your solution is wrong: {solution(\"15 3\\ncccaabababaccbc\")}'\nassert solution('15 9\\ncccaabababaccbc') == 'cccccc', f'Your solution is wrong: {solution(\"15 9\\ncccaabababaccbc\")}'\nassert solution('1 1\\nu') == '', f'Your solution is wrong: {solution(\"1 1\\nu\")}'\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('15 3') == 'cccbbabaccbc'\nassert solution('15 9') == 'cccccc'\nassert solution('1 1') == ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6 4\n4 1\n2 3\n3 4\n1 4\n2 4\n3 4\n\"\"\") == \"20\"\nassert solution(\"\"\"\n4 3\n2 5\n4 2\n2 5\n\"\"\") == \"17\"\nassert solution(\"\"\"\n3 5\n4 1\n2 3\n3 4\n1 4\n2 4\n3 4\n\"\"\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(test_cases[0]) == \"8\"\nassert solution(test_cases[1]) == \"20\"\nassert solution(test_cases[2]) == \"24\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4') == '8'\nassert solution('5 3\\n4 2\\n3 5') == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"8\"\nassert solution(\"5 3\") == \"20\"\nassert solution(\"5 2\") == \"8\""
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '8'"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '8'\nassert solution('''\n5 3\n4 2\n3 5\n4 2\n2 5\n''') == '20'\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"6 6\"\n    \"2 4\"\n    \"3 3\"\n    \"1 5\"\n    \"1 2\"\n    \"1 5\"\n    \"2 3\"\n) == \"8\"\nassert solution(\n    \"5 3\"\n    \"4 2\"\n    \"3 5\"\n    \"4 2\"\n    \"2 5\"\n    \"2 3\"\n) == \"20\"\nassert solution(\n    \"5 2\"\n    \"2 5\"\n    \"2 3\"\n    \"1 5\"\n    \"1 2\"\n) == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '8'\nassert solution('3 2') == '4'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '8'\nassert solution('5 3') == '20'\nassert solution('5 3') == '20'\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nassert solution('''\n4 4\n*.*\n*.*\n*.*\n\n''') == '3'\nassert solution('''\n4 4\n*.*\n**.\n**.\n\n''') == '3'\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 8\") == \"3 4 1\"\nassert solution(\"5 5\") == \"3 3 1\"\nassert solution(\"5 5\") == \"3 4 1\""
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n6 8\n***.\n****.\n***.\n***.\n***.\n''') == '2'\n\nassert solution(\n    '''\n5 5\n*.*\n.*.\n*.*\n.*.\n''') == '-1'\n'''"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n3 3\n*.*\n.*.\n*.*\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 8') == '3'\nassert solution('5 5') == '3'\nassert solution('5 5') == '-1'"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 7\n*.*\n.*.\n*.*\n*.*\n*.*\n*.*\n\n''') == '3'\nassert solution('''\n7 8\n*...\n****\n.*..\n....\n...*\n*...\n**..\n*.*.\n\n''') == '3'\nassert solution('''\n8 8\n*.*\n*.*\n*.*\n*.*\n*.*\n*.*\n*.*\n*.*\n*.*\n\n''') == '3'\nassert solution('''\n5 5\n*.*\n***.\n.*.*\n*.*\n*.*\n*.*\n\n''') == '-1'\nassert solution('''\n5 5\n.*.*\n.*.*\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n\n''') == '3'\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '6 8\\n'\n    '....*...\\n'\n    '...**...\\n'\n    '.*****.\\n'\n    '...**...\\n'\n    '....*...\\n'\n    '........\\n'\n) == '3\\n3 4 1\\n3 5 2'\n\nassert solution(\n    '5 5\\n'\n    '*.*\\n'\n    '.*.'\n    '*.*\\n'\n    '***\\n'\n    '.....\\n'\n) == '-1'\n\nassert solution(\n    '5 5\\n'\n    '*.*\\n'\n    '.*.'\n    '*.*\\n'\n    '***\\n'\n    '.....\\n'\n) == '3\\n2 2 1'"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '3 4 1'\nassert solution('3 3') == '2 2 1'\nassert solution('5 5') == '3 4 1'\nassert solution('5 5') == '3 4 1'\nassert solution('3 5') == '3 4 1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 8\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 2\"\nassert solution(\"5 5\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 2\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 8\") == \"3 4 1\"\nassert solution(\"5 5\") == \"3 3 1\"\nassert solution(\"3 3\") == \"2 2 1\"\nassert solution(\"5 5\") == \"3 3 1\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"145\") == \"Yes\"\nassert solution(\"7\") == \"No\"\nassert solution(\"2\") == \"No\"\nassert solution(\"101\") == \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('575') == 'Yes'\nassert solution('1') == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"1235\") == \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('575') == 'Yes'\nassert solution('1212') == 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"45\") == \"Yes\"\nassert solution(\"45\") == \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('575') == 'Yes'\nassert solution('123') == 'No'\nassert solution('1') == 'Yes'\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"112\") == \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"575\") == \"Yes\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == 'Alice'\nassert solution('8 6') == 'Bob'\nassert solution('4 8') == 'Draw'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4') == 'Bob'\nassert solution('2 3') == 'Alice'\nassert solution('2 2') == 'Draw'\nassert solution('8 3') == 'Bob'\nassert solution('8 6') == 'Alice'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Alice'\nassert solution('1 2') == 'Bob'\nassert solution('2 1') == 'Alice'\nassert solution('2 2') == 'Bob'\nassert solution('3 3') == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"Alice\"\nassert solution(\"2 3\") == \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n3\n''') == 'Bob'\nassert solution('''\n10\n9\n''') == 'Alice'\nassert solution('''\n7\n5\n''') == 'Draw'\nassert solution('''\n4\n3\n''') == 'Draw'\nassert solution('''\n4\n5\n''') == 'Alice'\n'''\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"8 6\\n\"\n    ) == \"Alice\"\nassert solution(\n    \"8 6\\n\"\n    ) == \"Bob\"\nassert solution(\n    \"8 6\\n\"\n    ) == \"Draw\"\nassert solution(\n    \"8 9\\n\"\n    ) == \"Draw\"\nassert solution(\n    \"8 9\\n\"\n    ) == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"8 4\") == \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('10 2') == 'Bob'\nassert solution('5 4') == 'Draw'\nassert solution('2 8') == 'Draw'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Alice\"\nassert solution(input(\"\")) == \"Bob\"\nassert solution(input(\"Alice\\n\")) == \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('10 3') == 'Bob'\nassert solution('9 10') == 'Draw'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\", 'Wrong answer'\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\", 'Wrong answer'\n\nIf the input is not a string, your program should return a string that is an empty string.\nIf the input is of length 0, your program should return an empty string.\n'''"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,enjoy,newyear\") == \"happy newyear enjoy\"\nassert solution(\"happy,enjoy,newyear\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy,') == 'happy newyear enjoy,'\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy', solution\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2 1'\nassert solution('5 5') == '1 3'\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2 1\"\nassert solution(\"3 3\") == \"2 1 2\"\nassert solution(\"100 4\") == \"2 1 3 4\"\nassert solution(\"5 5\") == \"2 1 3 4\"\nassert solution(\"10 10\") == \"2 1 3 4 5\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\\n1\"\nassert solution(\"2 3\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\\n1\"\nassert solution(\"5 5\") == \"1\\n2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2 1'\nassert solution('3 3') == '2 3'\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2 1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2 1\"\nassert solution(\"2 4\") == \"2 2\"\nassert solution(\"3 3\") == \"2 1\"\nassert solution(\"3 2\") == \"2 2\"\nassert solution(\"4 4\") == \"2 1\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"10\") == \"210\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '14'\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\", \"Empty string\"\nassert solution(\"1\") == \"1\", \"One digit\"\nassert solution(\"2\") == \"2\", \"Two digits\"\nassert solution(\"10\") == \"10\", \"More than two digits\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '14'\nprint(solution('2'))"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"18\"\nassert solution(\"4\") == \"24\"\nassert solution(\"5\") == \"30\"\nassert solution(\"6\") == \"36\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"10\") == \"100\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"5\") == \"20\"\nassert solution(\"10\") == \"100\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\nassert solution('-2') == '-4'\nassert solution('-10') == '-100'\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"21\"\nassert solution(\"4\") == \"24\"\nassert solution(\"5\") == \"25\"\nassert solution(\"6\") == \"36\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('5 6') == 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n\") == \"No\"\nassert solution(\"3 3\\n#.#.#\\n#..#\\n#.#.#\\n#.###\\n\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n#.#.\\n#.##\\n#..#\\n.##.#\\n###.') == 'Yes'\nassert solution('3 3\\n.###\\n#####\\n###.') == 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('5 5') == 'Yes'\nassert solution('1 1') == 'Yes'\nassert solution('10 10') == 'No'\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == 'Yes'\nassert solution('10 10') == 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n') == 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"5 2 4\") == \"12\"\nassert solution(\"4 5 2\") == \"4\"\nassert solution(\"3 9 5\") == \"5\"\nassert solution(\"1 2 3\") == \"5\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '53'\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('1 5 6') == '45'\nassert solution('1 6 2') == '11'\nassert solution('1 5 6') == '53'"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2\") == \"3\"\nassert solution(\"1 2 1\") == \"3\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"2 2 2\") == \"4\"\nassert solution(\"3 4 2\") == \"4\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\""
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"5\"\nassert solution(\"1 2 3 4\") == \"7\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('1 2 3') == '4'\nassert solution('10 5 2') == '11'\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('7 5 5') == '53'\nassert solution('0') == '0'\nassert solution('2 2 3') == '7'\nassert solution('1 2 1') == '4'\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"12\"\nassert solution(\"5 5 7\") == \"24\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('1 3 8') == '10'\nassert solution('1 9 9') == '10'\nassert solution('1 8 6') == '16'"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"15950\"\nassert solution(\"12\") == \"15950\"\nassert solution(\"10\") == \"15950\""
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '15950'\nassert solution('4') == '15880'\nassert solution('5') == '15750'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n4980\n7980\n6980\n6790\n6900\n''') == '15950'\nassert solution('''\n2\n4980\n7980\n''') == '17980'\nassert solution('''\n2\n4980\n7980\n''') == '15950'\n'''\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"15950\", \"Wrong!\"\nassert solution(\"4\") == \"15950\", \"Wrong!\"\nassert solution(\"5\") == \"15950\", \"Wrong!\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '15950.0'\nassert solution('10') == '15615.0'\nassert solution('11') == '16075.0'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n4980\n7980\n6980\n''') == '15950.0'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '15950'\nassert solution('1') == '5950'\nassert solution('2') == '15990'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '15950'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '15950'\nassert solution('5') == '9290'\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n4980\n7980\n6980\n\"\"\") == \"15950\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\\n2\\n3\\n4\\n5\") == \"5\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"5\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"5\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n\") == \"5\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"7\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('29') == '215'\nassert solution('20') == '50'\nassert solution('7') == '60'\nassert solution('35') == '57'\nassert solution('120') == '180'\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\nassert solution('1\\n3\\n3\\n6\\n12') == '9'\nassert solution('9\\n1\\n2\\n3\\n4\\n5') == '10'\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"29\") == \"215\"\nassert solution(\"20\") == \"50\"\nassert solution(\"7\") == \"29\"\nassert solution(\"35\") == \"57\"\nassert solution(\"120\") == \"180\""
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"215\"\nassert solution(\"20\") == \"50\"\nassert solution(\"7\") == \"60\"\nassert solution(\"35\") == \"180\"\nassert solution(\"120\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n3\\n5\\n2\") == \"14\"\nassert solution(\"13\\n12\\n11\\n10\\n9\") == \"100\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20\\n7\\n35\\n120\\n') == '215'\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nA\nB\nC\nD\nE\n''') == \"215\"\nassert solution('''\n29\n20\n7\n35\n120\n''') == \"215\"\nassert solution('''\n25\n20\n7\n35\n120\n''') == \"220\"\nassert solution('''\n30\n20\n7\n35\n120\n''') == \"220\"\nassert solution('''\n25\n20\n7\n35\n120\n''') == \"230\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"7.5\"\nassert solution(input()) == \"7.49999\"\nassert solution(input()) == \"7.50001\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n10 30''') == '7.5'\nassert solution('''2\n0 0''') == '1'\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('2\\n10 30') == '7.50001'\nassert solution('2\\n10 30') == '7.49999'\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nassert solution(\"3\\n5 3\\n2 2 2\") == \"1.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 30\\n\") == \"7.5\", solution(\"3\\n10 30\\n\")\nassert solution(\"2\\n10 30\\n\") == \"7.5\", solution(\"2\\n10 30\\n\")\nassert solution(\"1\\n100\\n\") == \"1.0\", solution(\"1\\n100\\n\")\n\nassert solution(\"2\\n2 2\\n\") == \"4.0\", solution(\"2\\n2 2\\n\")\nassert solution(\"3\\n1 1\\n\") == \"2.0\", solution(\"3\\n1 1\\n\")\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"7.5\"\nassert solution(\"1\") == \"7.5\"\nassert solution(\"10\") == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.0'\nassert solution('2') == '0.5'\nassert solution('3') == '0.333333333333333333333333333'\nassert solution('4') == '0.25'\nassert solution('5') == '0.2'\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nassert solution(\"3\\n5 0 10\") == \"1.25\"\nassert solution(\"4\\n-5 -20 20 5\") == \"1.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == ''\nassert solution('4') == '0.4'\nassert solution('1') == '0.1'\nassert solution('2') == '0.5'\nassert solution
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.0'\nassert solution('10') == '0.1'\nassert solution('10 10') == '1.1'\nassert solution('5 5') == '0.25'\nassert solution('100 100') == '0.25'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '2'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('2 3') == '1'"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n10\n15\n11\n14\n12\n''') == \"2\"\nassert solution('''\n6 4\n6\n1\n2\n3\n4\n5\n6\n''') == \"1\"\nassert solution('''\n7 2\n1\n2\n3\n4\n5\n6\n7\n''') == \"4\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3\n10\n15\n11\n14''') == '2'\nassert solution('''6 3\n15\n11\n14\n12\n9\n13''') == '5'\nassert solution('''5 3\n10\n15\n11\n14\n12\n9''') == '1'"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 5\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n10\n15\n11\n14\n12\n''') == '2'\nassert solution('''\n5 5\n2\n7\n12\n16\n20\n''') == '3'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12\n''') == '2'\nprint(solution('''5 3\n10\n15\n11\n14\n12\n'''))"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\nassert solution(\"1 2\\n10\\n15\\n11\\n14\\n12\") == \"0\"\nassert solution(\"7 7\\n20\\n30\\n10\\n15\\n15\\n14\\n20\\n10\") == \"4\"\nassert solution(\"7 4\\n20\\n30\\n10\\n15\\n15\\n14\\n20\\n10\") == \"1\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\nassert solution('5 5\\n9\\n10\\n15\\n16\\n17') == '1'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5\n10\n15\n11\n14\n12\n''') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n3 4\\n6 2\\n12 6') == '1'\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"A\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"z\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"Z\") == \"A\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('B') == 'A'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"C\") == \"c\""
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n\nprint('All test cases passed!')\n\"\"\"\n\nsolution = lambda x: x.upper() if x.islower() else x.lower()\n\nprint(solution('a'))\nprint(solution('B'))\nprint(solution('b'))\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('A') == 'A'\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"6\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"10 5\") == \"12\"\nassert solution(\"100 30\") == \"126\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2\\n\") == \"6\"\nassert solution(\n    \"3 3\\n\") == \"0\"\nassert solution(\n    \"4 5\\n\") == \"14\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 3\") == \"8\"\nassert solution(\"4 1\") == \"2\""
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"4 4\") == \"18\"\nassert solution(\"5 5\") == \"31\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 1\") == \"3\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"6\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n-1\n-4\n-12\n3\n''') == 'NA'\nassert solution('''19\n-1\n-4\n-12\n3\n''') == 'YYMM'\nassert solution('''1\n1\n-4\n-12\n3\n''') == 'NA'\nassert solution('''19\n-1\n-4\n-12\n3\n''') == 'YYMM'\nassert solution('''1\n-1\n1\n-4\n-12\n3\n''') == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('3121') == 'AMBIGUOUS'\nassert solution('564') == 'AMBIGUOUS'\nassert solution('2016') == 'NA'\nassert solution('12345') == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1905') == 'YYMM'\n\nassert solution('19') == 'YYYY'\n\nassert solution('1905') == 'YYYY'\n\nassert solution('1905') == 'YYYY'\n\nassert solution('1905') == 'YYYY'"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"012345\") == \"AMBIGUOUS\", \"Not YYMM format\"\nassert solution(\"012345\") == \"AMBIGUOUS\", \"Not MMYY format\"\nassert solution(\"012345\") == \"AMBIGUOUS\", \"Not YYMM and MMYY format\"\nassert solution(\"012345\") == \"NA\", \"Not YYMM, MMYY and AMBIGUOUS format\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"19\") == \"NA\"\nassert solution(\"190515\") == \"NA\"\nassert solution(\"190518\") == \"YYMM\"\nassert solution(\"190519\") == \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('01') == 'YYMM'\nassert solution('01') == 'YYMM'\nassert solution('19') == 'YYMM'\nassert solution('19') == 'YYMM'\nassert solution('05') == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\", \"1905\"\nassert solution(\"1905\") == \"YYMM\", \"19\"\nassert solution(\"1905\") == \"YYMM\", \"1905\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('01') == 'MMYY'\nassert solution('19') == 'YYMM'\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\", \"Should be YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1905\") == \"YYMM\", \"Expected 1905 to be YYMM\"\nassert solution(\"19\") == \"YYYY\", \"Expected 19 to be YYYY\"\nassert solution(\"05\") == \"YYYY\", \"Expected 05 to be YYYY\"\nassert solution(\"19\") == \"YYYY\", \"Expected 19 to be YYYY\"\nassert solution(\"19\") == \"YYYY\", \"Expected 19 to be YYYY\""
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n    5\n    3\n    3\n    1''') == '2'\nassert solution('''5\n    5\n    3\n    2\n    1''') == '1'\nassert solution('''1\n    1\n    1''') == '1'\nassert solution('''1\n    2\n    3''') == '0'\n''') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n''') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '5'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 12') == '15'\nassert solution('9 12') == '21'"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3, 10]) == \"03:10\"\nassert solution([3, 30]) == \"03:30\"\nassert solution([8, 3]) == \"08:03\"\nassert solution([5, 2]) == \"05:02\"\nassert solution([14, 1]) == \"14:01\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([9, 12]) == '21'\nassert solution([9, 12]) == '21'\nassert solution([1, 0]) == '12'\nassert solution([1, 24]) == '12'\nassert solution([0, 24]) == '12'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([9,12]) == \"21\"\nassert solution([9,6]) == \"19\"\nassert solution([7,11]) == \"21\"\nassert solution([8,11]) == \"21\"\nassert solution([6,11]) == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nA B\n\"\"\") == \"21\"\n\nassert solution(\"\"\"\n9 12\n\"\"\") == \"21\"\n\nassert solution(\"\"\"\n0 0\n\"\"\") == \"00\""
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 5\") == \"5\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([9,12]) == \"21\"\n\"\"\"\nA,B = map(int,input().split())\nprint(((A-1)*60) + (B-1))"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '21'\nassert solution('2 2') == '21'\nassert solution('9 9') == '21'\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 11\") == \"23\"\nassert solution(\"1 10\") == \"23\"\nassert solution(\"21 11\") == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '18'\nassert solution('3 5') == '21'\nassert solution('3 4') == '21'\nassert solution('10 10') == '24'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('3 9') == '8'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 9') == '29'\nassert solution('5 4') == '41'\nassert solution('6 4') == '39'\nassert solution('6 9') == '39'\nassert solution('7 4') == '37'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '0'\nassert solution('2 5') == '20'\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\nassert solution('3 2') == '-100'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '3719'\nassert solution('2 2919') == '3719'\nassert solution('3 3333') == '3333'\nassert solution('4 5555') == '5555'\nassert solution('5 5555') == '5555'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nassert solution(\"1 46918\") == \"4\"\nassert solution(\"4 9\") == \"5\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == \"3719\"\n\nfrom itertools import product\nn, r = list(map(int, stdin.split()))\ninner_rating = sorted(list(set(range(1, r + 1)) - set(range(1, r - 100, 10))))\nfor i in range(1, len(inner_rating) + 1):\n    print(inner_rating[-i])\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 5') == '1'\nassert solution('1') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2919') == '3719'\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('1 -13') == '13'"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 2') == '4'\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == \"4\"\nassert solution(\"1001\") == \"3\"\nassert solution(\"10001\") == \"4\"\nassert solution(\"10011\") == \"3\"\nassert solution(\"1000111\") == \"4\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''11 2''') == '4'\nassert solution('''11 5''') == '7'\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''11 2''') == '4'\nassert solution('''11 10''') == '4'\nassert solution('''10002''') == '3'\nassert solution('''11 0''') == '1'\nassert solution('''11 10''') == '3'\n\n-----------------------------------------------------------------------------------------------------------------------------------------------\n\n> name: solution\n> link: https://leetcode.com/problems/number-of-digits-in-base-k/\n> inputs: str(stdin), stdin.strip()\n> outputs: int, stdout"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11 2\") == \"4\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"111111\") == \"15\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 2') == '4'\nassert solution('5 4') == '4'\nassert solution('1 1') == '10'\nassert solution('12345') == '1234'\n\n---"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '4'\nassert solution('101') == '2'\nassert solution('1011') == '3'\nassert solution('101001') == '5'\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 2') == '4'\nassert solution('10 1') == '1'"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"4\""
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11 2\") == \"4\"\nassert solution(\"121 2\") == \"5\"\nassert solution(\"1011 2\") == \"8\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '3'\nassert solution('20') == '3'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10') == '4'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\n\n'''\n\n\nfrom math import ceil\nn = int(input())"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '2'\nassert solution('5') == '3'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"15\") == \"2\"\nassert solution(\"13\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"12\") == \"1\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"15\") == \"6\"\n\n---\n\nTakahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\nAt least how many sheets of paper does he need?\n\n-----Constraints-----\n - N is an integer.\n - 1 \\leq N \\leq 100\n\n-----Input-----\nN\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n3\n\nBy printing the 1-st, 2-nd pages on the 1-st sheet, 3-rd and 4-th pages on the 2-nd sheet, and 5-th page on the 3-rd sheet, we can print all the data on 3 sheets of paper.\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('3') == '1'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == 'Yay!'\nassert solution('5 4') == 'Yay!'\nassert solution('1 2') == 'Yay!'\nassert solution('1 2 3 4') == 'Yay!'\nassert solution('2 4') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"Yay!\"\nassert solution(\"2 3\") == \"Yay!\"\nassert solution(\"5 6\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 6\") == \"Yay!\"\nassert solution(\"5 5\") == \"Yay!\"\nassert solution(\"5 4\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == \"Yay!\"\n\nassert solution('1 4') == \":(\n\nassert solution('5 2') == \":(\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"1 2\") == \":((\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'Yay!'\nassert solution('5 4') == 'Yay!'\n\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n\") == \"Yay!\"\nassert solution(\"3 6\\n\") == \"Yay!\"\n\"\"\"\nfrom itertools import combinations\nimport math\nimport sys\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 4]) == \"Yay!\"\nassert solution([7, 8]) == \"Yay!\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == \"Yay!\"\nassert solution('5 1') == \"Yay!\"\nassert solution('5 2') == \"Yay!\"\nassert solution('5 3') == \"Yay!\"\nassert solution('5 4') == \"Yay!\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1234567876') == '34'\nassert solution('123456789') == '36'\nassert solution('100') == '0'\nassert solution('10000') == '0'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == '34'\nassert solution(\"12345678\") == '34'\nassert solution(\"1234567\") == '34'\nassert solution(\"123456\") == '34'\nassert solution(\"123456789\") == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1234') == '34'\nassert solution('1234567876') == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == '34'\nassert solution(\"1237\") == '4'\nassert solution(\"1\") == '1'\nassert solution(\"\") == '0'\nassert solution(\"5\") == '5'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1234567876') == '34'"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\nassert solution('0') == '0'\nassert solution('123456789') == '0'\nassert solution('2563') == '0'\nassert solution('3273') == '7'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1234567876') == '34'\nassert solution('1234567891') == '0'\nassert solution('12345678910') == '10'\nassert solution('12345678901') == '100'\nassert solution('123456789012') == '999'\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\nassert solution('6543218911') == '1'\nassert solution('9123456789') == '9'\nassert solution('459845364') == '0'\n\n------GITHUB LICENSE------\nMIT License\n\nCopyright (c) 2020 Shubham Ghosh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1234567876') == '34'\nassert solution('123456789') == '34'\nassert solution('12345678901') == '34'\nassert solution('1234567890123') == '34'\nassert solution('123456789012345') == '34'\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"5 3\"\nprint(solution(input_))"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3 12 6''') == '5 3'\nassert solution('''2\n2 9''') == '1 7'\nassert solution('''7\n2 1000000000 4 6 8 4 2''') == '2999999987 2'\nassert solution('''6\n13 52 0 13 26 52''') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"5 3\"\nassert solution(\"2\") == \"1 7\"\nassert solution(\"7\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 12 6\n\n''') == '5 3'\nassert solution('''\n2\n2 9\n\n''') == '1 7'\nassert solution('''\n7\n2 1000000000 4 6 8 4 2\n\n''') == '2999999987 2'\nassert solution('''\n6\n13 52 0 13 26 52\n\n''') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 12, 6]) == \"5 3\"\nassert solution([2, 9]) == \"1 7\"\nassert solution([7]) == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 12 6''') == '5 3'\nassert solution('''2\n2 9''') == '1 7'\nassert solution('''7\n2 1000000000 4 6 8 4 2''') == '2999999987 2'\nassert solution('''6\n13 52 0 13 26 52''') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '5 3'\nassert solution('2') == '1 7'\nassert solution('7') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 12 6\n''') == '5 3'\n\nassert solution('''2\n2 9\n''') == '1 7'\n\nassert solution('''7\n13 52 0 13 26 52\n''') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '5 3'\nassert solution('2') == '1 7'\nassert solution('7') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 12 6\n''') == '5 3'\nassert solution('''\n7\n2 1000000000 4 6 8 4 2\n''') == '2999999987 2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 1 4 1\n''') == '3'\n\nassert solution('''5\n1 1 1 2 2\n''') == '2'\n\nassert solution('''6\n3 1 2 1 1 1\n''') == '3'"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3 1 4 1\n\n4\n1 1 2 3\n\n1\n1 1 1''') == \"3\"\nassert solution('''3\n3 1 4 1\n\n4\n1 1 2 3\n\n1\n1 1 1''') == \"2\"\nassert solution('''5\n1 1 1 2 2\n\n4\n1 1 2 3\n\n1\n1 1 1''') == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 1 3') == '2'\nassert solution('4\\n3 2 2 4') == '2'\nassert solution('4\\n2 2 4') == '4'\nassert solution('5\\n1 2 2 3') == '2'\nassert solution('3\\n2 1 1') == '1'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 1 1 2 2\n''') == '1'\nassert solution('''\n4\n1 1 4 1\n''') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n3 1 4 1\n''') == '3'\nassert solution('''\n5\n1 1 1 2 2\n''') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 1 4 1\n''') == '3'\nassert solution('''\n5\n1 1 1 2 2\n''') == '2'\nassert solution('''\n3\n1 1 4 1\n''') == '2'\nassert solution('''\n4\n1 1 1 2 2\n''') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\nassert solution('5\\n1 1 1 2 2') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 2 2\") == \"2\"\nassert solution(\"4 3 1 4 1\") == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1\n''') == '2'\n\nassert solution('''\n2 2 2\n''') == '1'\n\nassert solution('''\n1 1 1\n''') == '2'\n\nassert solution('''\n5 1 1 1 1\n''') == '3'\n\nassert solution('''\n4\n4 3 2 1\n''') == '1'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\") == \"2\""
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '4 2\\n'\n    '1 2\\n'\n    '2 3\\n'\n) == '2'\nassert solution(\n    '3 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n) == '3'\nassert solution(\n    '2 0\\n'\n) == '1'\nassert solution(\n    '4 3\\n'\n    '1 2\\n'\n    '3 2\\n'\n    '2 3\\n'\n) == '4'\nassert solution(\n    '5 5\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n) == '4'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '4 3'\nassert solution('3 2') == '4 2'\nassert solution('4 2') == '1 2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"2 0\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3\\n') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\nassert solution(\"2 0\") == '1'\nassert solution(\"3 2\") == '2'\nassert solution(\"4 2\") == '4'\nassert solution(\"4 0\") == '1'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"11\"\nassert solution(\"7 2\") == \"4\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"11\"\nassert solution(\"7 2\") == \"4\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '11'\nassert solution('7 2') == '4'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"5 1\") == \"4\""
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\nOutput\n11''') == '11'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\nOutput\n4''') == '4'"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n    1 2 3 4 5\n    1 2\n    2 3\n    3 4\n    3 5\n    ''') == '11'\nassert solution('''7 2\n    2 1 2 1 2 1 1\n    6 4\n    1 5\n    3 1\n    2 3\n    7 5\n    7 4\n    ''') == '4'\nassert solution('''8 3\n    3 1\n    1 2\n    1 3\n    2 4\n    2 5\n    3 6\n    4 6\n    ''') == '0'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '11'\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\nOutput\n11\n''') == '4'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\nOutput\n4\n''') == '4'\nassert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\nOutput\n11\n''') == '4'"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '11'\nassert solution('7 2') == '4'"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 6\n20 30 4\n25\n26\n''') == '1 5\\n2 1\\n2 9999999994'\n\nassert solution('''\n2 3\n5 10000000000\n5 6 9999999999\n''') == '1 5\\n2 1\\n2 9999999994'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n'\nassert solution(input(2)) == '1 5\\n2 1\\n2 9999999994\\n'"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n\n''') == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n\n2 3\n5 10000000000\n5 6 9999999999\n\n''') == '1 5\\n2 1\\n2 9999999994'"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 5\"\nassert solution(\"1 2\") == \"1 9\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1 5\\n2 1'\nassert solution('3 3') == '1 5\\n2 1\\n2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n10 15 12\") == \"1 1\"\nassert solution(\"3 3\\n5 10000000000\") == \"1 5\"\nassert solution(\"2 3\\n5 10000000000\") == \"2 1\""
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1 1'\nassert solution() == '1 9'\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 5'\nassert solution('3 3') == '1 5'\nassert solution('5 5') == '1 5'\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n5 10000000000\n5 6 9999999999\n''') == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1 3 2\"\nassert solution(\"3 4 5 6\") == \"6 5 4 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 6 5 4\n''') == '2 1 3'\nassert solution('''\n40 40 40 60\n''') == '20 20 20'\nassert solution('''\n201 101 101 200\n''') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 1 1\"\n\nassert solution(input()) == \"1 1 3\"\n\nassert solution(input()) == \"2 2 2\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\nprint(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2 1 3'\n\nassert solution('40 40 40 60') == '20 20 20'\n\nassert solution('201 101 101 200') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nprint('tests done')\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7 8 8 9') == '2 1 3', \"wrong\"\nassert solution('7 5 8 5 7') == '2 1 3', \"wrong\"\nassert solution('2 2 4 8 7') == '3 1 3', \"wrong\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n1\n''') == '1'\nassert solution('''\n3\n6\n5\n4\n''') == '2 1 3'\nassert solution('''\n201\n101\n101\n200\n''') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6 5 4') == '2 1 3'\nassert solution('10 10 10 10') == '2 1 3'\nassert solution('201 101 101 200') == '1 100 100'\nassert solution('1 1 1 1') == '1 1 1 1'\nassert solution('1 2 3') == '1 2 3'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7') == '3'\nassert solution('12') == '2'\nassert solution('13') == '6'"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\nBBBGBRRR\n''') == 'BGRBRBGBGBGRG'\nassert solution('''\n13\nBBRRRRGGGGGRR\n''') == 'BRBGBRGRGRGR'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution() == '6'\nassert solution() == '6'\nassert solution() == '2'\n\n\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '2'\nassert solution('8') == '2'\nassert solution('13') == '6'"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '0\\n0'\nassert solution('8') == '2\\nBBBGBRRR'\nassert solution('12') == '7\\nBGRBRBGBGBGRG'"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('9') == '2'\nassert solution('8') == '2'\nassert solution('13') == '6'\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == 'BRBGBRGR'"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 1 5\n''') == '4'\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == '6'\nassert solution('''\n7\n10 9 8 7 5 6 4 3 2\n''') == '7'\nassert solution('''\n4\n10 9 8 7 5 6 4 3 2\n''') == '1'\nassert solution('''\n5\n10 9 8 7 5 6 4 3 2\n''') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n3 3 4 7 5 6 8\n''') == \"4\"\nassert solution('''\n6\n1 3 5 2 4 6\n''') == \"2\"\nassert solution('''\n4\n10 9 8 7\n''') == \"1\"\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n3\n4 7 5 6 8\n''') == '4'\nassert solution('''\n6\n1 3 5 2 4 6\n''') == '2'\nassert solution('''\n4\n10 9 8 7\n''') == '1'\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == '6'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n10 9 8 7\\n') == '6'\nassert solution('7\\n3 3 4 7 5 6 8\\n') == '7'\nassert solution('9\\n10 9 8 7\\n') == '8'\nassert solution('10\\n10 9 8 7\\n') == '1'\nassert solution('9\\n10 9 8 7\\n') == '9'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n3 3 4 7 5 6 8\n''') == '4'\n\nassert solution('''\n6\n1 3 5 2 4 6\n''') == '2'\n\nassert solution('''\n4\n10 9 8 7\n''') == '1'\n\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == '6'\n\nassert solution('''\n8\n7 7 2 3 4 5 7\n''') == '1'"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 4 7 5 6 8\n''') == '4'\nassert solution('''\n6\n1 3 5 2 4 6\n''') == '2'\nassert solution('''\n4\n10 9 8 7\n''') == '1'\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == '6'\n\nsolution(stdin)\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 9 8 7\n''') == '1'\n\nassert solution('''\n6 7 8 3 4 5 9 10 11\n''') == '6'\n\nassert solution('''\n4\n10 9 8 7\n''') == '1'\n\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n''') == '1'\n\nassert solution('''\n5\n10 9 8 7\n''') == '1'"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"7\") == \"4\"\nassert solution(\"9\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3 4 7 5 6 8\n''') == '4'\nassert solution('''6\n1 3 5 2 4 6\n''') == '2'\nassert solution('''4\n10 9 8 7\n''') == '1'\nassert solution('''9\n6 7 8 3 4 5 9 10 11\n''') == '6'\n"
    },
    {
        "number": 4379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n3 3 4 7 5 6 8\n\n''') == '4'\n\nassert solution('''\n6\n1 3 5 2 4 6\n\n''') == '2'\n\nassert solution('''\n4\n10 9 8 7\n\n''') == '1'\n\nassert solution('''\n9\n6 7 8 3 4 5 9 10 11\n\n''') == '6'\n\nassert solution('''\n9\n1 3 5 2 4 6\n\n''') == '1'"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"6 2\") == \"No\"\nassert solution(\"5 1\") == \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('3 2') == 'No'\nassert solution('4 6') == 'No'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"3 3\") == \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('3 2') == 'No'\nassert solution('1 1') == 'Yes'"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n\") == \"Yes\"\nassert solution(\"2 1\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"6 1\") == \"No\"\nassert solution(\"4 1\") == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('1 3') == 'Yes'\n\n---"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'Yes', '3'\nassert solution('3 2') == 'No', '3'\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 3\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\nassert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 8') == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 6\"\n) == \"110\"\n\nassert solution(\n    \"4 5\"\n) == \"14\"\n\nassert solution(\n    \"0 0\"\n) == \"0\"\n\nassert solution(\n    \"1 1\"\n) == \"1\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100 80\") == \"110\"\nassert solution(\"77 100\") == \"150\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('81 58') == '110'\nassert solution('35 18') == '15'\nassert solution('39 7') == '31'"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '10'\nassert solution('81') == '110'\nassert solution('58') == '29'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '110'"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 5\") == \"5\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"81 58\") == \"110\""
    },
    {
        "number": 4381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5') == '110'\nassert solution('10 20') == '130'\nassert solution('2 10') == '110'\nassert solution('2 2') == '101'\nassert solution('10 2') == '101'\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '8'\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '8'\n\n----------------------------------------------------------------------------------------\n\n3. Write a program that takes in a list of numbers, and outputs the sum of each number.\n\nNote: Your program should work even if a single element in the list is a string.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains an integer N, the number of elements in the list.\n\n----Output----\nPrint the sum of all elements in the list.\n\n-----Sample Input-----\n2\n2\n5\n\n----Sample Output----\n10\n\n----------------------------------------------------------------------------------------\n\n4. Write a program that takes in a list of strings, and outputs the longest string in the list.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the longest string in the list.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\na\n\n----------------------------------------------------------------------------------------\n\n5. Write a program that takes in a list of strings and outputs the longest string in the list.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the longest string in the list.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\na\n\n----------------------------------------------------------------------------------------\n\n6. Write a program that takes in a list of strings, and outputs the number of strings in the list.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the number of strings in the list.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2\n\n----------------------------------------------------------------------------------------\n\n7. Write a program that takes in a list of strings, and outputs the number of strings that are longer than 5 characters.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the number of strings that are longer than 5 characters.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2\n\n----------------------------------------------------------------------------------------\n\n8. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n9. Write a program that takes in a list of strings and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n10. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n11. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n12. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n13. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n14. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n15. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n16. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n17. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S.\n\n----Output----\nPrint the average length of the strings.\n\n-----Sample Input-----\n2\na\nb\n\n----Sample Output-----\n2.0\n\n----------------------------------------------------------------------------------------\n\n18. Write a program that takes in a list of strings, and outputs the average length of the strings.\n\nNote: The program should be able to take in a list of strings that are all strings.\n\n----Input Format----\nThe first line contains an integer T, the number of test cases.\nEach line (except the first) contains a string S"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"8\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"8\"\n\"\"\"\nfrom math import factorial as fac"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"8\""
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == \"8\"\nassert solution('3') == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '18'\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '8'\n\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"8\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'YES'\n\n\"\"\"\n\nstdin = input()\n\nx = int(stdin)"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == 'YES'\nassert solution('8') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"9\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n\") == \"NO\"\nassert solution(\"2\\n\") == \"NO\"\nassert solution(\"3\\n\") == \"YES\"\nassert solution(\"4\\n\") == \"YES\"\nassert solution(\"5\\n\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"8\") == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\n\nassert solution(\"4\") == \"NO\"\n\nassert solution(\"9\") == \"YES\"\n\nassert solution(\"6\") == \"NO\"\n\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n\n''') == 'ABC', \"First\"\nassert solution('''\n\n''') == 'ABD', \"Second\"\nassert solution('''\n\n''') == 'ABD', \"Third\"\n'''\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('999') == 'ABC'\nassert solution('10') == 'ABC'\nassert solution('1') == 'ABC'\nassert solution('2') == 'ABC'\nassert solution('3') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('999') == 'ABC'\nassert solution('100') == 'AC'\nassert solution('1') == 'A'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('999') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"AB\"\nassert solution(\"5\") == \"ABD\"\nassert solution(\"999\") == \"ABD999\"\nassert solution(\"1000\") == \"ABD999\"\n\n-------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('999') == 'ABC'\nassert solution('1') == 'A'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('999') == 'ABC'\nassert solution('0') == 'A'\nassert solution('1') == 'B'\nassert solution('2') == 'C'\nassert solution('3') == 'D'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('999') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('999') == 'ABC'\nassert solution('100') == 'B'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Oops!\"\nassert solution(\"2\\n1\\n4\\n8\\n9\\n15\") == \"Oops!\"\nassert solution(\"4\\n1\\n2\\n4\\n8\\n9\\n15\") == \"Oops!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"3\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"5\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Yay!'\nassert solution('2') == 'Yay!'\nassert solution('4') == 'Yay!'\nassert solution('8') == 'Yay!'\nassert solution('9') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"8\") == \"Yay!\"\nassert solution(\"9\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"8\") == \"Yay!\"\nassert solution(\"9\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"3\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"5\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Yay!'\nassert solution('2') == 'Yay!'\nassert solution('4') == 'Yay!'\nassert solution('8') == 'Yay!'\nassert solution('9') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Yay!\"\nassert solution(\"2\") == \"Yay!\"\nassert solution(\"3\") == \"Yay!\"\nassert solution(\"4\") == \"Yay!\"\nassert solution(\"5\") == \"Yay!\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3200\") == \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"100\") == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\", \"Empty string\"\nassert solution(\"a\") == \"\", \"Non-empty string\"\nassert solution(\"3200\") == \"pink\", \"Should print pink\"\n\n'''\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3200\") == \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3200\npink''') == 'pink'\nassert solution('''2400\ngray''') =='red'\nassert solution('''3700\norange''') =='red'\nassert solution('''3200\nblack''') == 'black'\nassert solution('''2700\ngreen''') =='red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3200') == 'pink'\nassert solution('1') =='red'\nassert solution('1') =='red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3200') == 'pink'\nassert solution('2000') =='red'\nassert solution('2200') =='red'\nassert solution('22') =='red'\nassert solution('2') =='red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3200') == 'pink'\n"
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"234\") == \"red\"\nassert solution(\"abc\") == \"red\"\nassert solution(\"1234\") == \"red\"\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3200') == 'pink'\nassert solution('73200') =='red'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1199') == 'ABC'\nassert solution('2023') == 'ARC'\nassert solution('2070') == 'AGC'"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"R\"\n) == \"ABC\"\n\nassert solution(\n    \"1199\"\n) == \"ARC\"\n\nassert solution(\n    \"11999\"\n) == \"AGC\"\n\nassert solution(\n    \"12000\"\n) == \"ABC\"\n\nassert solution(\n    \"11996\"\n) == \"ABC\""
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'ARC'\nassert solution('2') == 'AGC'\nassert solution('3') == 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == 'ARC'\nassert solution('29') == 'ARC'\nassert solution('399') == 'ARC'"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1199') == 'ABC'\nprint(solution('1199'))\nprint(solution(str(int(input()))))\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1199') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('121') == 'ARC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1999') == 'ARC'\nassert solution('8199') == 'ARC'\nassert solution('1199') == 'ARC'\nassert solution('4118') == 'AGC'\nassert solution('1198') == 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"112\") == \"ARC\"\nassert solution(\"10\") == \"AGC\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12') == 'ARC'\nassert solution('18') == 'ARC'\nassert solution('2') == 'AGC'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '9'\nassert solution('111') == '991'\nassert solution('999') == '9991'\nassert solution('9') == '9'\nassert solution('11') == '1'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('119') == '991'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('119') == '991'\nassert solution('11') == '9'\nassert solution('1') == '1'\nassert solution('19') == '1'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('119') == '991'\nassert solution('1') == '9'\nassert solution('1') == '1'\n\"\"\"\n\nn = int(input())\n\nans = str(int(str(n) + str(n)) + 1)\nprint(ans)\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"111\") == \"99\"\nassert solution(\"999\") == \"991\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('119') == '991'\n\ninput_n = int(input())\nn = list(str(input_n))\nprint(\"\".join([int(i) if i!= '1' else '9' for i in n]))\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"99\") == \"1\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"0000\"\nassert solution(\"100\") == \"0100\"\nassert solution(\"111\") == \"0011\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('119') == '991'\n"
    },
    {
        "number": 4388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"991\"\nprint(solution(input()))\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\naaaa\na\nbccdda\nac\nzzzzzzzzzz\n\n''') == \"ac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\nabbaac\\nac\\nbccddaaf\\nzzzzzzzzz\") == \"abac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"aba\"\nassert solution(\"4\") == \"abac\"\nassert solution(\"5\") == \"abac\"\nassert solution(\"6\") == \"abac\"\nassert solution(\"7\") == \"abac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"ac\"\nassert solution(input()) == \"bcdaf\"\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\nabaac\nac\nbcdaf\nzzzzzzzzzz\n''') == \"abac\"\n\nassert solution('''\n2\nabaac\nac\nbcdaf\nzzzzzzzzzz\n''') == \"ac\"\n\nassert solution('''\n3\nabaac\nac\nbcdaf\nzzzzzzzzzz\n''') == \"bcdaf\"\n\nassert solution('''\n4\nabaac\nac\nbcdaf\nzzzzzzzzzz\n''') == \"zzzzzzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(example_input) == \"abac\""
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\nabbaac\nac\nbccddaaf\nzzzzzzzzzz\n''') == 'abac'\nprint('Congratulations!')\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"abbaac\"\nassert solution(input()) == \"ac\"\nassert solution(input()) == \"bcdaf\"\nassert solution(input()) == \"zzzzzzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'abac'\nassert solution(input()) == 'ac'\nassert solution(input()) == 'bcdaf'\n"
    },
    {
        "number": 4389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\naba''') == 'aba'\nassert solution('''1\naaaa''') == 'aaaa'\nassert solution('''10\nacaaaabbbbbbaaabbbaaa\nbbbaaabbbbbbbabaaa\nbaabbabaaabbaaabaabaa\naaabbbbbaaaabaabababb\naabbaaabbbbbbbaaaa\naaaabbbbbbbbbabaaa\naaaabbabbbbbbbbbaaa\nbbbbbbbbbbbbabbbbba\naaaaabbbbbbbbbbbaa\naaaaabbbbbbbbbbbbb''') == 'aaaaabbbbbbbbbaaabaaa'\nassert solution('''7\nababaababab\nababaababab\nababaababab\nababaababab\nababaababab\nababaababab\nababaababab''') == 'ababaababab'"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10 4\n13 9\n100 13\n123 456\n92 46''') == '0'\n\nassert solution('''\n1\n1''') == '1'\n\nassert solution('''\n2\n5 2''') == '5'\n\nassert solution('''\n3\n10 4\n13 9\n100 13''') == '333'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\nassert solution([13, 9]) == \"4\"\nassert solution([100, 13]) == \"333\"\nassert solution([123, 456]) == \"0\"\nassert solution([92, 46]) == \"5\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('10 4') == '5'\nassert solution('13 9') == '4'\nassert solution('100 13') == '333'\nassert solution('123 456') == '0'"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10 4\") == \"4\"\nassert solution(\"100 13\") == \"333\"\nassert solution(\"123 456\") == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10 4\") == \"5\"\nassert solution(\"13 9\") == \"4\"\nassert solution(\"100 13\") == \"333\"\nassert solution(\"123 456\") == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n10 4\n13 9\n100 13\n123 456\n92 46''') == '2'\nassert solution('''\n5\n2 2\n1 1\n1 1\n1 1\n1 1''') == '5'\nassert solution('''\n5\n1 2\n1 1\n1 1\n1 1\n1 1''') == '4'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n10 4\n13 9\n100 13\n''') == '2'\nassert solution('''\n2\n10 4\n13 9\n100 13\n''') == '5'\nassert solution('''\n1\n10 4\n13 9\n100 13\n''') == '4'\n''')\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n10 4\\n13 9\\n100 13') == '5\\n4\\n333\\n0'\nassert solution('2\\n10 4\\n100 13') == '333\\n0'\n"
    },
    {
        "number": 4390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution() == \"5\"\nassert solution() == \"4\"\nassert solution() == \"333\"\nassert solution() == \"0\""
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\nassert solution('6 3\\n1 2 3 4 5 6') == '3.0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2.666666666666667\"\nprint(solution())\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n5\n7\n5\n6\n''') == '2.666666666666667'\nassert solution('''6\n1\n5\n4\n4\n3\n''') == '3.333333333333333'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3\n4\n1\n2\n''') == '2.666666666666667'\nassert solution('''\n6\n3\n4\n1\n2\n3\n5\n''') == '2.5000000000000002'\nprint(solution('''\n8\n3\n4\n1\n2\n3\n5\n6\n'''))\nprint(solution('''\n10\n2\n3\n4\n1\n2\n3\n5\n6\n7\n8\n'''))"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2.666666666666667'\nassert solution('4 3') == '2.333333333333333'\nassert solution('5 4') == '2.50000000000001'\n\nstdin = '5 4'\nprint(solution(stdin))\n\nstdin = '10 4'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"2.666666666666667\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\") == \"4.0\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n3 4 1 2\n''') == '2.666666666666667'\nassert solution('''4 5\n4 1 3 2 4\n''') == '5.0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4\\n3 4 1 2') == '2.666666666666667'\nassert solution('2\\n5\\n2 4 6 5\\n') == '3.0'\nassert solution('5\\n5\\n5 5 5 5\\n') == '1.0'\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2.666666666666667'\nassert solution('4 5') == '2.75'\n\n\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"2.0\"\nassert solution(\"3\") == \"1.5\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2''') == 'YES'\nassert solution('''5 1\n1 2\n3 2\n4 2\n4 1 2 3\n1 3''') == 'NO'\nassert solution('''5 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2''') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n4\n4 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n'''\n) == 'YES'\n\nassert solution(\n'''\n6\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n'''\n) == 'YES'\n\nassert solution(\n'''\n5\n4 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n'''\n) == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\n\nassert solution('''\n5 1\n1 2\n1 3\n2 3\n2 4\n4 5\n''') == 'YES'\n\nassert solution('''\n4 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\nassert solution('''\n1 3\n1 4\n3 2\n3 2 1\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 2 3 3\n1 4\n5 2\n2 1 2 3 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\nassert solution('''\n4 2\n4 2 1\n1 2\n5 1\n1 3\n''') == 'NO'"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1 3') == 'YES'\nassert solution('6\\n2 2\\n4 1 2 3\\n5 1\\n1 2 3 4 5\\n1 3') == 'NO'\nassert solution('6\\n2 2\\n4 2 2 3\\n5 1\\n1 2 3 4 5\\n1 3') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4''') == 'YES'\nassert solution('''4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1 3\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t) == stdin\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\nbaabbb') == 'bab'\nassert solution('10\\noopppssss') == 'oops'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nab') == 'bab'\nassert solution('6\\nbaabbb') == 'bab'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nz\n''') == 'z'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\nz\") == \"z\"\nassert solution(\"2\\nab\") == \"bab\"\nassert solution(\"3\\nbaa\") == \"baab\"\nassert solution(\"4\\nbaaa\") == \"baaab\"\nassert solution(\"5\\naba\") == \"baaba\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nba') == 'bab'\nassert solution('10\\nooopppssss') == 'oops'\nassert solution('1\\nz') == 'z'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\nbcdef\n''') == 'bcdef'\nassert solution('''2\nsssss\n''') =='sssss'\nassert solution('''5\nabab\n''') == 'abab'\nassert solution('''5\nbaaabb\n''') == 'baaabb'\nassert solution('''5\nbabb\n''') == 'babb'\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\nz\n\n\"\"\") == \"z\"\nassert solution(\"\"\"\n5\nbab\n\n\"\"\") == \"bab\"\nassert solution(\"\"\"\n10\nbab\n\n\"\"\") == \"bab\"\nassert solution(\"\"\"\n7\nzzzzzzzzzzzzzzz\n\n\"\"\") == \"zzzzzzzzzzzzzzz\"\nassert solution(\"\"\"\n6\nzzzzzzzzzzzzzzz\n\n\"\"\") == \"zzzzzzzzzzzzzzz\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"bb\"\nassert solution(\"6\") == \"bab\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '1'"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 0') == '0'\nassert solution('4 3') == '1'\nassert solution('3 3') == '1'"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 10') == '1'\nassert solution('4 3') == '0'\nassert solution('3 3') == '1'"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\n''') == '1'\nassert solution('''\n4 3\n2 1 3\n4 3 4\n2 4 1\n''') == '0'\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '1'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"1\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4''') == \"1\"\n\nassert solution('''4 3\n2 1 3\n4 3 4\n2 4 1\n\n''') == \"0\"\nassert solution('''3 3\n1 2 1\n2 3 2\n1 3 3\n\n''') == \"1\""
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 2') == '0'\nassert solution('3 4 3') == '1'\nassert solution('8 10') == '1'"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 10') == '1'\nassert solution('4 3') == '1'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 10') == '1'\nassert solution('4 3') == '1'\nassert solution('3 3') == '0'\nassert solution('1 0') == '0'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\n''') == '1', 'wrong first example'\nassert solution('''\n4 3\n2 1 3\n4 3 4\n2 4 1\n''') == '0', 'wrong second example'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\\\n1\nAB\"\"\") == \"1\n\nassert solution(\"\"\"\\\n2\nGG\")\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\\\n3\nBBG\"\"\") == \"1\"\n\nassert solution(\"\"\"\\\n6\nRRRRBBRGBB\"\"\") == \"2\"\n\nassert solution(\"\"\"\\\n3\nRRB\"\"\") == \"1\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\nBBBB''') == '2'\nassert solution('''3\nRBBB''') == '1'\nassert solution('''7\nRRRBBBBBBBBB''') == '3'\nassert solution('''3\nRRRRRRRRRRR''') == '2'"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\nRRRRB\n''') == '0'\nassert solution('''\n3\nRGBGRBB\n''') == '1'\nassert solution('''\n5\nRRRRB\n''') == '0'\nassert solution('''\n6\nRRRRB\n''') == '0'\nassert solution('''\n10\nRBBBGRRRBBGGRRRR\n''') == '4'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nBRB\n\n''') == '1'\nassert solution('''7\nRGBGRBB\n\n''') == '3'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution(\"\"\"\nBRB\n\"\"\") == 'GRB'\nassert solution(\"\"\"\nRGRRB\n\"\"\") == 'RGRRB'\nassert solution(\"\"\"\nGRGBGRR\n\"\"\") == 'GRGBGRR'\nassert solution(\"\"\"\nRRBGBB\n\"\"\") == 'RRBGBB'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\nBRB\n\"\"\") == \"GRB\"\n\nassert solution(\"\"\"\n7\nRGBGRBB\n\"\"\") == \"RGBRGBR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nRR\") == \"1\"\nassert solution(\"3\\nRRB\") == \"2\"\nassert solution(\"7\\nRGBGRBB\") == \"3\"\nassert solution(\"13\\nRRBGB\") == \"8\"\nassert solution(\"1\\nRRR\") == \"1\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('BRB') == 'GRB'\nassert solution('RGBGRBB') == 'RGBRGBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"RGRGGB\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == \"48000.0\"\nassert solution(solution.__doc__) == \"48000.0\"\nprint(solution(solution.__doc__))\nprint(solution(solution.__doc__))\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nassert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.1'\nassert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.1'\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nassert solution('10\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nassert solution('10\\n1000000 JPY\\n0.10000000 BTC\\n') == '459998.0'\nassert solution('5\\n100000000 JPY\\n1000000000 BTC\\n') == '10000000000.0'\nassert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('2\\n100000000 JPY\\n0.01000000 BTC') == '48000.0'"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1.0000\"\nassert solution(\"2\") == \"1.0000\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n\nassert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n\n'''\n"
    },
    {
        "number": 4396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '48000'\nassert solution('3') == '48000.0'\nassert solution('4') == '48000.1'"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('10') == '7'\n\n'''\n\n\n\nN, i = map(int, stdin.split())\n\nfor x in range(1, N + 1):\n    if x == i:\n        print(N - x + 1)\n    else:\n        print(N - x)"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"5 5\") == \"4\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n\nn, i = map(int, input().split())"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('5') == '4'\nassert solution('20') == '17'\nassert solution('50') == '19'\nassert solution('100') == '27'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"3\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"9 3\") == \"5\"\nassert solution(\"10 1\") == \"9\""
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '3', 'Sample test 1 failed'\nassert solution('8 1') == '7', 'Sample test 2 failed'\nassert solution('6 4') == '4', 'Sample test 3 failed'\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"3\", \"Wrong\"\nassert solution(\"2 2\") == \"2\", \"Wrong\"\nassert solution(\"1 1\") == \"1\", \"Wrong\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '3', 'Test 1 fail'\nassert solution('5 2') == '3', 'Test 2 fail'\nassert solution('8 3') == '7', 'Test 3 fail'\nassert solution('5 4') == '4', 'Test 4 fail'\nassert solution('6 4') == '5', 'Test 5 fail'\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n3''') == '3'\nassert solution('''3 1\n1''') == '2'\nassert solution('''5 2\n2''') == '1'\nassert solution('''10 3\n7''') == '8'\n"
    },
    {
        "number": 4397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == '2', 'Expected 2'\nassert solution('5 5') == '1', 'Expected 1'\nassert solution('6 5') == '4', 'Expected 4'\nassert solution('1 0') == '1', 'Expected 1'\nassert solution('2 0') == '0', 'Expected 0'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'icpc'\nassert solution('1') == 'icpc'"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\nhello\n\"\"\") == \"hello\"\nassert solution(\"\"\"\n2\nip cc\n\"\"\") == \"icpc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\nip cc\n\"\"\") == \"icpc\"\nassert solution(\"\"\"\n4\nip cc\n\"\"\") == \"icpc\"\nassert solution(\"\"\"\n3\nip cc\n\"\"\") == \"icpc\"\nassert solution(\"\"\"\n2\nip cc\n\"\"\") == \"icpc\"\nassert solution(\"\"\"\n1\nip cc\n\"\"\") == \"ipcc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input) == 'icpc'\nprint(solution(input))"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == 'p'"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\na\n\"\"\") == \"\"\"a\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nabc\\n\") == \"abc\"\nassert solution(\"2\\nabc\\n\") == \"bac\"\nassert solution(\"3\\nabc\\n\") == \"acb\"\nassert solution(\"4\\nabc\\n\") == \"bcab\"\nassert solution(\"5\\nabc\\n\") == \"bcabc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n', 'a') == 'a'\nassert solution('2\\n', 'b') == 'b'\nassert solution('3\\n', 'c') == 'c'\nassert solution('4\\n', 'd') == 'd'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'icpc'\nassert solution('3') == 'icpc'\n"
    },
    {
        "number": 4398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\"2\", \"ip cc\"]) == \"icpc\"\nassert solution([\"5\", \"abcde\", \"g\", \"i\", \"j\", \"kklm\", \"n\", \"o\", \"p\", \"q\"]) == \"abcdejklmnqp\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AB\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"AA\") == \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABAA') == 'No'\nassert solution('A') == 'Yes'\nassert solution('AB') == 'Yes'\nassert solution('BBBB') == 'No'\n\n'''"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\nassert solution(\"AAB\") == \"Yes\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'No'\nassert solution('ABD') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABA') == 'Yes'"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABA') == 'Yes'\n"
    },
    {
        "number": 4399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABBB\") == \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RRSS\") == \"2\""
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"RRR\") == \"2\"\nassert solution(\"RRS\") == \"2\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RRS\") == \"2\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('RRS') == '2'\nassert solution('R') == '1'\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RRR') == \"2\"\nassert solution('RRD') == \"1\"\nassert solution('RDR') == \"0\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('RRS') == '2'\nassert solution('RRDRRRR') == '3'\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('RRRR') == '2'\nassert solution
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('RRS') == '2'\nassert solution('RRR') == '3'\nassert solution('RRS') == '3'\nassert solution('RRS') == '3'\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"RR\") == \"2\"\nassert solution(\"R\") == \"1\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('RRS') == '2'\nassert solution('RRS') == '2'\nassert solution('R') == '2'\nassert solution('RR') == '3'\nassert solution('R') == '3'\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\n>>> print(solution())\n3 1 2"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4 5 6 7\") == \"6 5 7 4 1 2 3\""
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3 1 2'\nprint(solution(input()))"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 5 7\") == \"7 2 5\"\nassert solution(\"2 5 7\") == \"7 2 5\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('1 2 3 4') == '3 4 1 2'"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '3 1 2'"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('4 1 2') == '2 3 1'"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"3 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"15 10\") == \"50\"\nassert solution(\"30 100\") == \"150\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4') == '4'\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('30 100') == '100'\nassert solution('20 100') == '50'\nassert solution('10 1') == '0'\nassert solution('10 100') == '100'\n\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10') == '50'\nassert solution('5 1') == '0'\nassert solution('1 1') == '0'\nassert solution('3 1') == '100'\nassert solution('5 10') == '100'\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == \"50\"\nassert solution(\"7 6\") == \"28\"\nassert solution(\"30 100\") == \"100\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('30 100\\n') == '100\\n'\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 10') == '100'\nassert solution('40 100') == '100'\nassert solution('90 10') == '100'\nassert solution('30 10') == '100'\nassert solution('100 10') == '100'\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20') == '50'\nassert solution('30 20') == '100'\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"30 100\") == \"100\"\nassert solution(\"20 120\") == \"400\"\nassert solution(\"20 0\") == \"20\"\nassert solution(\"20 15\") == \"20\"\nassert solution(\"20 0\") == \"20\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"30 100\\n\") == \"100\"\nassert solution(\"25 500\\n\") == \"250\"\nassert solution(\"-5 0\\n\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+-++') == '2'\nassert solution('+-++') == '2'\nassert solution('+-++') == '2'\nassert solution('+-++') == '2'\nassert solution('+-++') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"-+++\") == \"2\"\nassert solution(\"+++++\") == \"3\"\nassert solution(\"+++++++++\") == \"3\"\nassert solution(\"+++++++\") == \"3\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+-++') == '2'\nassert solution('-+++') == '1'\nassert solution('+++--') == '0'\nassert solution('-+++--') == '1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '2'\nassert solution('+-++') == '2'\nassert solution('++-') == '1'\nassert solution('--') == '0'\nassert solution('-++') == '-1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('+-++') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '2'\nassert solution('+-++') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-++') == '2'\nassert solution('+++++++') == '3'\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"-++-\") == \"2\"\nassert solution(\"+-++\") == \"2\""
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-++') == '2'\nassert solution('++') == '1'\nassert solution('+++++') == '3'\nassert solution('++++') == '4'\nassert solution('+++') == '1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+-++\") == \"2\"\nassert solution(\"+-++-++-++\") == \"2\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2019/04/30''') == 'Heisei'\nassert solution('''2019/04/29''') == 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/12/31\") == \"TBD\"\nassert solution(\"12/31\") == \"TBD\"\nassert solution(\"12/30\") == \"TBD\"\nassert solution(\"12/31/20\") == \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/03/30\") == \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(['2019/04/30']) == 'Heisei'\nassert solution(['2020/04/30']) == 'TBD'\nassert solution(['2014/04/30']) == 'TBD'\nassert solution(['2017/04/30']) == 'TBD'\nassert solution(['2018/04/30']) == 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\nassert solution('2019/04/28') == 'Heisei'\nassert solution('2019/04/27') == 'Heisei'\nassert solution('2019/04/26') == 'Heisei'\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"April 30, 2019\") == \"TBD\"\nassert solution(\"11/06/2020\") == \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\nassert solution('2019/04/28') == 'TBD'\nassert solution('2019/04/27') == 'Heisei'\nassert solution('2019/04/26') == 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2019/04/30') == \"Heisei\"\nassert solution('2019/04/29') == \"TBD\"\nassert solution('2019/04/22') == \"Heisei\"\nassert solution('2019/04/28') == \"TBD\"\nassert solution('2019/04/21') == \"Heisei\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\nassert solution('2019/04/28') == 'Heisei'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('15\\n
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '18\\n'\n    '2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10\n''') == '14'\nassert solution('''10\n6 6 6 3 6 1000000000 3 3 6 6\n''') == '9'\nassert solution('''3\n1337 1337 1337\n''') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('13\\n1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '4'\nassert solution('3') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '10'\nassert solution('6') == '6'\n"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('18') == '14'\nassert solution('10') == '9'\nassert solution('3') == '3'"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 4405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"14\""
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 2 3 2 1 3 2''') == '2 1'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3 1 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"10 4\") == \"3\""
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '2'\nassert solution('10 4') == '3'"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\\n1 3 2 1 3 2 1 2\"\nassert solution() == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1\\n'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2\\n'"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1 3 2 1 2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 2 1 3 2 1'"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3'\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n2 3 3 1 2 1 3 2\") == \"2\\n1 3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2 1 2 3 1 3 2'\nassert solution() == '3 1 3 2 2'\nassert solution() == '2 3 2'"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10') == '1 3 2'\nassert solution('5 4\\n2 4 8 2 4\\n8\\n10\\n5\\n14\\n10') == '2 3'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n2 4 8 2 4\n8\n5\n14\n10\n''') == '1 3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '3 2'\nassert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '2 3'\nassert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '-1'\nassert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '3 2'\nassert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '2 3'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4\n8\n6\n''') == '1'\nassert solution('''\n5\n2\n8\n6\n''') == '3'\nassert solution('''\n2\n4\n8\n6\n''') == '-1'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 4 8 2 4') == '3'\nassert solution('8\\n5\\n14\\n10') == '2'"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 4 8 2 4\n8\n5\n14\n10\n''') == '3', \"First\"\nassert solution('''\n5\n2 4 8 2 4\n8\n5\n14\n10\n''') == '2', \"Second\"\nassert solution('''\n6\n1 8 1 8 2 8\n2\n''') == '-1', \"Third\"\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == '3', \"Fourth\"\nassert solution('''\n2\n2\n''') == '2', \"Fifth\""
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n5 2 8 2 4\\n8\\n5\\n14 10\\n\") == \"3 2\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1 -1 3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n2\\n5\") == \"2\"\nassert solution(\"2\\n3\\n2\\n5\") == \"3\"\nassert solution(\"2\\n3\\n2\\n4\") == \"3\"\nassert solution(\"2\\n3\\n2\\n3\") == \"2\"\nassert solution(\"2\\n3\\n2\\n4\") == \"2\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '3 2'\nassert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '2 3'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"21\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 3\") == \"21\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n\n''') == '21'\nassert solution('''3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n\n''') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '21'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == \"21\"\nprint(solution('''\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n'''))\nassert solution('''\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == \"0\"\nprint(solution('''\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n'''))\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INP_TEST) == OUT_TEST\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\nassert solution('''\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n') == '0'\nassert solution('5 5\\n1 3 4 5 2\\n5 7\\n1 2\\n1 3\\n') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n''') == '21'\nprint(solution(input()))"
    },
    {
        "number": 4408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '21'\nassert solution('3 3') == '0'"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 4 6 6 6\") == \"2\\n1 2 3\"\nassert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\""
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution('1 1 1 1') == '0'"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution('3\\n2 8 10') == '2\\n2 3 2\\n2 4 2\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 4 6 6 6\n\n''') == '2'\nassert solution('''\n3\n2 8 10\n\n''') == '2 3 2 1'\nassert solution('''\n4\n1 1 1 1\n\n''') == '0'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\nassert solution() == \"2\"\nassert solution() == \"2\"\nassert solution() == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 4 6 6 6\n\n''') == '2\n\nassert solution('''\n4\n1 1 1 1\n\n''') == '0\n\nassert solution('''\n5\n2 4 6 6 6\n\n''') == '2\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '2'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution('3\\n2 8 10\\n') == '2\\n2 2 1\\n2 3 2\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n2 4 6 6 6\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n4\n1 1 1 1\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 8 10\") == \"2 3 2\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n100010\\n6 2\\n000000\\n5 1\\n10101\\n3 1\\n001\\n2 2\\n00\\n1 1\\n0\") == \"1\\n2\"\nassert solution(\"6 1\\n100010\\n6 2\\n000000\\n5 1\\n10101\\n3 1\\n001\\n2 2\\n00\\n1 1\\n0\\n0\") == \"1\\n2\\n1\\n1\\n1\\n1\"\n\n\"\"\"\n\nstdin = \"\"\"\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '1'\nassert solution('6 2') == '2'\nassert solution('5 1') == '1'\nassert solution('10101') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 1\") == \"1\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == '2'\nassert solution(\"6 1\") == '1'\nassert solution(\"6 2\") == '0'\nassert solution(\"5 1\") == '1'\nassert solution(\"5 2\") == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '1'\nassert solution('6 2') == '2'\nassert solution('5 1') == '1'\nassert solution('10101') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1\\n100010') == '1'\nassert solution('6 1\\n10101') == '2'\nassert solution('6 2\\n001') == '0'\nassert solution('6 2\\n01') == '1'\nassert solution('5 1\\n10101') == '2'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"1\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"10101\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\nassert solution('''\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\nassert solution('''\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\nassert solution('''\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n3\n5 1\n2 3\n3 3\n2 2\n2 3\n2 3\n\"\"\") == \"4\"\nassert solution(\n    \"\"\"\n5\n1 4 5 6\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"7 2\\n\"\n    \"11 11\\n\"\n    \"9 11\\n\"\n    \"7 8\\n\"\n    \"8 9\\n\"\n    \"7 8\\n\"\n    ) == \"3\\n\"\n\nassert solution(\n    \"5 1\\n\"\n    \"29 30\\n\"\n    \"30 30\\n\"\n    \"29 29\\n\"\n    \"28 30\\n\"\n    \"30 30\\n\"\n    ) == \"4\\n\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1') == '3'\nassert solution('6 1') == '1 3 5 6'\nassert solution('7 2') == '4'\nassert solution('5 1') == '3'"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '4'\nassert solution('6 1') == '1 3 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"1 1\\n3\") == \"1\"\nassert solution(\"2 2\\n3 3\") == \"0\"\nassert solution(\"2 2\\n3 3\") == \"0\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2') == '3'\nassert solution('5 1') == '1 4 5'"
    },
    {
        "number": 4411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"4\"\nassert solution(\"5 1\") == \"1 4 5\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''3\n    4\n    5 6 15 30\n    4\n    10 6 30 15\n    3\n    3 4 6''') == \"30\"\nassert solution(\n    '''3\n    4\n    5 6 15 30\n    4\n    10 6 30 15\n    3\n    3 4 6''') == \"31\""
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '30'\nassert solution('4') == '31'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\nassert solution(\"2\\n4\\n10 6 15\\n3\\n15 4\") == \"19\"\n\n'''\nfrom math import ceil\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4\n3\n5\n10\n\"\"\") == \"30\"\nassert solution(\n\"\"\"\n5\n5\n1\n100\n3\n10\n\"\"\") == \"99\"\nassert solution(\n\"\"\"\n2\n2\n0\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '10'\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\nassert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\nassert solution(\"3\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '31'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '31'\n\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n''') == '31'\n"
    },
    {
        "number": 4412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    4\n    5 6 15 30\n    4\n    10 6 30 15\n    3\n    3 4 6\n    ''') == '31'\n    '''\n    \n    4\n    1 2 3 4\n    3\n    7 9 8\n    2\n    5\n    '''\n    assert solution(\n    '''\n    5\n    6 9\n    1\n    7\n    5\n    ''') == '7'\n    '''\n    \n    10\n    2 4\n    1\n    3\n    '''\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 2 4 1 1\\n2\\n3 4\\n1') == '1\\n1\\n2'\nassert solution('5\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2'\nassert solution('''6\n6\n2 4 9 8 6\n1\n3 5\n5\n2 3 4\n9\n8 9\n7\n6 5\n4\n3 2\n10''') == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\n'''"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n3\\n1\\n5\\n2\\n3\\n4\\n99\\n100') == '1'"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n5\n3 6\n2 3 4 99 100\n1\n42\n''') == '1'\n\nassert solution('''\n3\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\n''') == '2'\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n4\\n2 10 1 20\\n2\\n3 6\\n5') == '1\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('42') == '1'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'YES'\nassert solution('''\n5\n1 2 3 5\n5 2 6 7\n1 2 3 5\n3 3 5 18\n5 2 6 7\n1 2 3 5\n''') == 'NO'\nassert solution('''\n10\n2 1 2 4 3 7 3 6 8 5\n3 3 3 4 6 9 1 8 7\n4 4 8 4 5 3 6 6\n9 5 1 4 3 4 3 3\n2 2 3 4 4 5 6\n''') == 'YES'\nassert solution('''\n3\n1 2 3\n5 2 6\n1 2 3\n''') == 'NO'"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\""
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 2 3\n1 2 3\n''') == \"YES\"\n\nassert solution('''\n4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n''') == 'YES'\nassert solution('''\n3 1 2 3\n1 2 3 4\n1 2 3 6\n3 3 5 18\n''') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\n\"\n\nprint(solution(open(0)))\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'YES\\nNO\\nNO\\nYES\\n'\n"
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'YES\\nYES\\nNO\\nYES'\n\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\nassert solution('5 2 5 5') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '7 2 7 3 3 1 4\\n'\n) == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution(\n    '5 4 3 2 1 5 4 3 1\\n'\n) == 'YES\\n1\\n3 7\\n4\\n7 4 3 2 1\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 3 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"4 3 2 1 0\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 0 7 3 2 1\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0 1 2 3 4') == 'YES'\nassert solution('7\\n7 2 7 3 3 1 4') == 'YES'\nassert solution('5\\n4 3 1 5 3') == 'YES'\nassert solution('5\\n0 1 2 3 4') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 1 5 3\\n') == 'YES'\nassert solution('3\\n4 3 2 1 5 3\\n') == 'NO'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES'\nassert solution('0\\n4 3 2 1 5 3\\n') == 'NO'\nassert solution('0\\n1 1 2 3 4\\n') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n4 3 2 1 0''') == 'YES'\nassert solution('''7\n7 2 7 3 3 1 4''') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7\n7 2 7 3 3 1 4\n\n''') == 'YES'\nassert solution('''\n5\n4 3 1 5 3\n\n''') == 'YES'\nassert solution('''\n5\n0 1 2 3 4\n\n''') == 'NO'\nassert solution('''\n5\n0 1 2 3 4\n\n''') == 'NO'\nassert solution('''\n10\n1 1 2 3 4 5 6 7 8 9\n\n''') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n7 2 7 3 3 1 4\n''') == 'YES'\nassert solution('''\n5\n4 3 1 5 3\n''') == 'YES'\nassert solution('''\n5\n0 1 2 3 4\n''') == 'YES'\nassert solution('''\n5\n1 1 2 1 2\n''') == 'NO'\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18', solution('''\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n''') == '8', solution('''\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '-1'\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18', solution\nassert solution('''\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n\n''') == '8', solution\nassert solution('''\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\n''') == '-1', solution\nassert solution('''\n3 2\n2 0 0\n2 1 1\n1 0 1\n''') == '8', solution\nprint('ok')\n\"\"\"\n\nimport sys\nfrom bisect import bisect_left, bisect_right\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-\"\nassert solution(\"0\") == \"1\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"8\""
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 4') == '18'\nassert solution('5 2') == '8'\nassert solution('5 3') == '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 4\\n3 0 0\\n4 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == '8'\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '8'\nassert solution('5 3') == '-1'\nassert solution('8 4') == '18'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"8\""
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n') == '8'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"8 4\\n\"\n    \"7 1 1\\n\"\n    \"2 1 1\\n\"\n    \"4 0 1\\n\"\n    \"8 1 1\\n\"\n    \"1 0 1\\n\"\n    \"1 1 1\\n\"\n    \"1 0 1\\n\"\n    \"3 0 0\\n\"\n    ) == \"18\"\n\nassert solution(\n    \"5 2\\n\"\n    \"3 0 0\\n\"\n    \"2 1 0\\n\"\n    \"3 1 0\\n\"\n    \"5 0 1\\n\"\n    \"3 0 1\\n\"\n    ) == \"8\"\n\nassert solution(\n    \"5 3\\n\"\n    \"3 0 0\\n\"\n    \"2 1 0\\n\"\n    \"3 1 0\\n\"\n    \"5 0 1\\n\"\n    \"3 0 1\\n\"\n    ) == \"-1\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0''') == '18'\nassert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n''') == '8'\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '-1'\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n3 0 1\n''') == '-1'\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n3 0 1\n''') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    5 1\n    1 1 2 3 1\n    4 2\n    6 4 8 5\n    2 2\n    1 6\n    3 5\n    5 2 5\n    \"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n    4 1\n    1 1 2 3 1\n    4 2\n    6 4 8 5\n    2 2\n    1 6\n    3 5\n    5 2 5\n    \"\"\"\n) == \"2\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == \"7\"\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == \"7\"\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == \"6\"\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == \"6\"\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == \"7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution(\n'''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution(\n'''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\nassert solution(\n'''\n3\n2 5\n1 1\n1 2\n''') == '2'\nassert solution(\n'''\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n3\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\") == \"7\"\n\nassert solution(\n    \"\"\"\n2\n1 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n1\n1 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '2'\nassert solution('4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '7'\nassert solution('4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '-1'\nassert solution('2\\n10\\n1 2\\n10\\n') == '10'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''3\n4 4 4\n1 5 3 5\n6 6 2 3\n4 4 4\n''') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '2'\nassert solution('6 4') == '6'\nassert solution('2 2') == '-1'\nassert solution('5 2') == '7'\nassert solution('3 5') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == \"2\"\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == \"6\"\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == \"-1\"\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == \"7\""
    },
    {
        "number": 4417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\nassert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"12\") == \"0\"\nassert solution(\"15\") == \"3\""
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n4 8 15 16 23\n''') == \"5\"\nassert solution('''\n12\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n''') == \"0\""
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 8 15 16 23') == '0'\nassert solution('12') == '5'\nassert solution('15') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '5'\nassert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\"\nassert solution(\"1\\n2 3\") == \"2\"\nassert solution(\"1\\n5 5\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '5'\nassert solution('12') == '0'\nassert solution('15') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"8\") == \"2\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('12') == '0'\nassert solution('15') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\nassert solution('0') == '0'\nassert solution('4 8 15 16 23') == '3'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '1'\n"
    },
    {
        "number": 4418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == '0'\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3\\n4') == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '0'\nassert solution('''\n2 1\n1 1\n''') == '1'\nassert solution('''\n7 5\n3 3\n7 7\n10 10\n3 3\n5 5\n3 3\n5 5\n''') == '2'\nassert solution('''\n8 1\n1 2\n''') == '3'\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n\"\"\") == \"0\n2\n3\n1\n2\n4\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\"\"\")\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5 5\n13 42\n18 4\n1337 420\n''') == '0'\nassert solution('''\n2\n5 5\n13 42\n18 4\n1337 420\n''') == '1'\nassert solution('''\n1\n5 5\n13 42\n18 4\n1337 420\n''') == '92'\nassert solution('''\n1\n5 5\n13 42\n18 4\n1337 420\n''') == '87654322'\nassert solution('''\n2\n5 5\n13 42\n18 4\n1337 420\n''') == '9150'\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"92\"\nassert solution(\"18 4\") == \"87654322\"\nassert solution(\"1337 420\") == \"9150\"\nassert solution(\"123456789 1000000000\") == \"9150\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 5\") == \"0\"\nassert solution(\"1\\n8 3\") == \"2\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '0\nassert solution('''\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '3\nassert solution('''\n7\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '2\nassert solution('''\n8\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '92\nassert solution('''\n9\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '87654322\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1 2\\n2 5\\n\") == \"1\"\nassert solution(\"2\\n1 1\\n1 3\\n\") == \"0\"\nassert solution(\"3\\n1 1\\n1 3\\n\") == \"2\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '0\nassert solution('''\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '3\n''')"
    },
    {
        "number": 4419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n''') == '0'\n\nassert solution('''\n2\n10 10\n1 1\n''') == '2'\n\nassert solution('''\n2\n1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n8\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"12339\"\nprint(\"All test cases passed!\")"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"12339\"\nprint(\"solution() succesful.\")"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 0 999999999\") == \"999999995\"\nassert solution(\"1 1 999999999\") == \"999999998\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 3 5\") == \"0\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == '12339'"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"12339\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 2 1\") == \"1\"\nassert solution(\"2\\n3 2 1\") == \"1\"\nassert solution(\"4\\n3 2 1\") == \"0\"\nassert solution(\"2\\n1 2 1\") == \"1\"\nassert solution(\"2\\n1 1 1\") == \"1\""
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '12339'\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"12339\"\nassert solution('''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"0\"\nassert solution('''\n10 5 187\n2 0 999999999\n''') == \"15\"\nassert solution('''\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"54306\"\nassert solution('''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == \"999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '185'\n"
    },
    {
        "number": 4420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n'''\n    ) == '12339'\n\nassert solution(\n'''\n7 1 5\n2 0 999999999\n'''\n    ) == '0'"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n\") == \"6\"\nassert solution(\"8 2\\n\") == \"8\"\nassert solution(\"7 3\\n\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"7 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\""
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"7 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 2\n1 2 2 3 2 4 10\n''') == '6'\nassert solution('''\n8 2\n1 2 2 3 2 4 6 10\n''') == '8'\nassert solution('''\n7 3\n1 2 2 3 2 4 5\n''') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6'\nassert solution_fast() == '6'"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 2\n1 2 2 3 2 4 10\n''') == '6'\nassert solution('''\n7 3\n1 2 2 3 2 4 5\n''') == '4'\nassert solution('''\n7 4\n1 2 2 3 2 4 5 6\n''') == '8'"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7 2\n1 2 2 3 2 4 10\"\"\") == '6'\nassert solution(\"\"\"7 3\n1 2 2 3 2 4 6 10\"\"\") == '8'\nassert solution(\"\"\"7 4\n1 2 2 3 2 4 5\"\"\") == '4'\nassert solution(\"\"\"7 5\n1 2 2 3 2 4 6\"\"\") == '8'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 2 2 3''') == '6'\nassert solution('''7 2\n1 2 2 3 2 4 10''') == '8'\nassert solution('''8 2\n1 2 2 3 2 4 6 10''') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\""
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '', \"Test 1 fail\"\nassert solution('ABC') == 'abc', \"Test 2 fail\"\nassert solution('ABCD') == 'abc', \"Test 3 fail\"\nassert solution('ABCDAB') == 'abc', \"Test 4 fail\"\nassert solution('ABCDABC') == 'abc', \"Test 5 fail\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\nABC') == 'aBC'\nassert solution('2 4\\nABBC') == 'ABBC'\nassert solution('5 2\\nABABABABA') == 'ABCAB'\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"aBC\"\nassert solution(\"10 1\") == \"aBCDEFG\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"aBc\"\nassert solution(\"2 1\") == \"ABc\"\nassert solution(\"3 1\") == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"aBC\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\nA') == 'a'\nassert solution('3 1\\nABC') == 'abC'\nassert solution('4 1\\nCBA') == 'cba'\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'aBc'"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"ABC\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\nABC\n''') == 'aBC'\nassert solution('''\n3 2\nAABC\n''') == 'AaBC'\nassert solution('''\n1 5\nAABC\n''') == 'aABC'\nassert solution('''\n10 5\nAABCBBBCCCC\n''') == 'AbCBBBCC'\n"
    },
    {
        "number": 4422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\nABD') == 'ABD'"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n') == '3 4 6 1 5 2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nmoscow 60\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"10\\nabcdefghijklmnopqrstuvwxyz\") == \"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n1\"\nassert solution(\"20\\nhello world\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\""
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n''') == '3 4 6 1 5 2'\nassert solution('''\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n''') == '3 4 6 1 5 2'\n\nassert solution('''\n10\nkhabarovsk 10\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"2\"\n\nprint(solution(input()))"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nmoscow 60\\nkhabarovsk 40') == '3 4 6 1 5 2'\nassert solution('5\\nmoscow 40\\nmoscow 60\\nkhabarovsk 20\\nmoscow 50\\nmoscow 60\\nkhabarovsk 20\\nmoscow 50') == '1 5 2 4 3'\nassert solution('1\\nmoscow 60\\nkhabarovsk 20\\nmoscow 50\\nkazan 35\\nkazan 50\\nkhabarovsk 40') == '4 3 1 2 5 6'\n"
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\\n\""
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '1 2 3 5 4'\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '3\\n4\\n6\\n1\\n5\\n2'"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('1 0') == 'No'\n'''\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 900') == 'Yes'\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"100 100\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"5 500\") == \"Yes\"\nassert solution(\"10 500\") == \"No\"\nassert solution(\"15 500\") == \"No\"\nassert solution(\"20 500\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('1 800') == 'No'\nassert solution('2 400') == 'No'\nassert solution('2 1000') == 'Yes'"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"20 900\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 300\") == \"Yes\"\nassert solution(\"10 500\") == \"No\"\nassert solution(\"1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"2 200\") == \"No\"\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10') == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10\\n') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 10\n''') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.1458333333'\nassert solution('5 1') == '0.0'\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"0.145833333333\", \"Wrong answer\"\nassert solution(\"3 2\") == \"0.145833333333\", \"Wrong answer\"\nassert solution(\"1 1\") == \"0.145833333333\", \"Wrong answer\"\nassert solution(\"3 3\") == \"0.145833333333\", \"Wrong answer\"\nassert solution(\"2 3\") == \"0.145833333333\", \"Wrong answer\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 5\n2''') == '0.145833333333'\n\nassert solution('''4 5\n2''') == '0.145833333333'\n\nassert solution('''4 4\n3''') == '0.145833333333'\n\nassert solution('''6 6\n5''') == '0.145833333333'\n\nassert solution('''100 1\n1''') == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n\") == \"0.1458333333\"\nassert solution(\"3 4\\n\") == \"0.15\"\nassert solution(\"1 1\\n\") == \"0.5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '0.145833333333'\nassert solution('2 10') == '0.145833333333'\nassert solution('3 10') == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"SUN\") == \"1\", \"Should be 1\"\nassert solution(\"MON\") == \"2\", \"Should be 2\"\nassert solution(\"TUE\") == \"3\", \"Should be 3\"\nassert solution(\"WED\") == \"4\", \"Should be 4\"\nassert solution(\"THU\") == \"5\", \"Should be 5\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('SAT') == '1'\nassert solution('MON') == '0'\nassert solution('THU') == '1'\nassert solution('SUN') == '2'"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"SUN\") == \"1\"\nassert solution(\"MON\") == \"2\"\nassert solution(\"TUE\") == \"3\"\nassert solution(\"WED\") == \"4\"\nassert solution(\"THU\") == \"5\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"MON\") == \"0\"\nassert solution(\"WED\") == \"1\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('SAT') == '1'"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '1'\nassert solution('SUN') == '1'"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"MON\") == \"0\"\nassert solution(\"TUE\") == \"0\"\nassert solution(\"WED\") == \"0\"\nassert solution(\"THU\") == \"0\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"SUN\") == \"1\"\nassert solution(\"MON\") == \"2\"\nassert solution(\"TUE\") == \"2\"\nassert solution(\"WED\") == \"3\"\nassert solution(\"THU\") == \"4\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''SAT''') == '1'\nassert solution('''SUN''') == '2'\nassert solution('''MON''') == '1'\nassert solution('''TUE''') == '2'\nassert solution('''WED''') == '1'\n"
    },
    {
        "number": 4426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('SAT') == '1'\nassert solution('WED') == '2'\nassert solution('MON') == '1'\n\n'''"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nassert solution('4 20 40') == '30\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nassert solution('2 10 10') == '10'\nassert solution('3 2 5') == '5'\nassert solution('4 100 5') == '5'\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n'\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 10 20') == '30 50 90 170 330 650 1290 2570 5130 10250'\nassert solution('1 2 1') == '1 2 1'\nassert solution('3 4 2') == '2 3 4'\nassert solution('6 4 2') == '2 2 4'\n\n'''\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n', 'Sample Test Cases'\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n\"\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10 20') == '30'\nassert solution('2 50 20') == '50'"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nassert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nassert solution('3 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nassert solution('2 50 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nassert solution('1 50 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290 2570 5130 10250\"\nassert solution(\"2 10 20\") == \"30 50 90 170 330 650 1290 2570 5130 10250\"\nprint(solution(\"2 10 20\"))\nprint(solution(\"2 10 20\"))\n"
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 10 20') == '30 50 90 170 330 650 1290 2570 5130 10250'\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\""
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 1 1 4\\n') == '5'\nassert solution('5\\n1 3 2 1 4\\n') == '4'\nassert solution('3\\n4 1 2\\n') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 4 5\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"3\\n1 2 1\") == \"0\"\n\n\n'''\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('5') == '5'\nassert solution('3') == '3'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'\nassert solution() == '4'\nassert solution() == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3 1 1 4\n''') == '5'\n\nassert solution('''\n3\n4 1 2\n''') == '4'\n\nassert solution('''\n5\n1 3 1 1 4\n''') == '5'\n\nassert solution('''\n5\n1 3 2 1 4\n''') == '4'\n\nassert solution('''\n3\n4 1 2\n''') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('1 3 1 1 4') == '5'\nassert solution('3 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == str(4)\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '4'\nassert solution('2') == '2'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 3 1 1 4\n''') == '5'\nassert solution('''\n1\n1 3 2 1 4\n''') == '4'\nassert solution('''\n3\n4 1 2\n''') == '0'\nassert solution('''\n3\n4 1 2\n''') == '0'\n\nassert solution('''\n5\n1 3 1 1 4\n''') == '5'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 3\n100 100 100''') == 'YES'\nassert solution('''5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000''') == 'YES'\nassert solution('''5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n3 3 3''') == 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n5\n''') == 'YES'\nassert solution('''\n2\n2\n5\n''') == 'NO'\nassert solution('''\n2\n2\n5\n''') == 'YES'\nassert solution('''\n1\n10\n10\n''') == 'YES'\nassert solution('''\n1\n2\n5\n''') == 'YES'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n''') == 'YES\\n3 2 1\\nNO\\n'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'NO'\nassert solution('50 49 49') == 'YES'\nassert solution('10 30 20') == 'YES'\nassert solution('1 1000000000 1000000000') == '1 1 1000000000'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 3\n3 4 5\n''') == 'YES\\n1 2 1\\nYES\\n3 4 1\\nYES\\n5 4 3\\nNO\\nNO\\nNO\\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n''') == 'YES\\n3 2 1\\nYES'\n"
    },
    {
        "number": 4429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'NO\\nYES\\nYES\\nNO\\nNO\\nYES\\n1 1 1000000000\\n'\n\nassert solution('4\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\n1 1 1000000000\\n'\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 6') == '4'\nassert solution('5 1 4') == '1'\nassert solution('5 3 3') == '5'\nprint('test passed')\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 2 6\n5 2 1 4 2\"\"\") == \"4\"\nassert solution(\"\"\"5 1 4\n4 2 3 4 1\"\"\") == \"5\"\nassert solution(\"\"\"5 3 3\n1 2 3 1 1\"\"\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"5 1 4\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"5\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\nassert solution(\"10 10 1\\n11 1 2\\n1 1 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n1 1 1\\n1 2 1\\n1 1 1\\n1 1 1\\n11 2 1\\n11 3 1\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 1\\n1 1 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\n11 3 2\\n11 2 1\\n11 2 2\\n1 1 1\\n11 3 1\\n11 3 2\\n11 2 2\\n11 3 1\\"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '1'\nassert solution('''\n5 3 3\n1 2 3 1 1\n''') == '5'\nassert solution('''\n5 7 7\n1 3 3 1 1 1 3 2 1\n''') == '7'\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 6') == '4'\nassert solution('5 1 4') == '1'\nassert solution('5 3 3') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6\") == \"4\"\nassert solution(\"5 1 4\") == \"1\"\nassert solution(\"5 3 3\") == \"5\""
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '1'\nassert solution('''\n5 3 3\n1 2 3 1 1\n''') == '5'\nprint('The local tests passed')"
    },
    {
        "number": 4430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 2 6\\n5 2 1 4 2\\n\") == \"4\"\nassert solution(\n    \"5 1 4\\n4 2 3 4 1\\n\") == \"1\"\nassert solution(\n    \"5 3 3\\n1 2 3 1 1\\n\") == \"5\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\nabacaba\na b\n''') == '12'\nassert solution('''\n7 1\naaaaaaa\nb\n''') == '0'\nassert solution('''\n7 1\naaaaaaa\nb\n''') == '0'\nassert solution('''\n10 3\nsadfaasdda\nf a d\n''') == '21'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2\\nabacaba\\na b') == '12'\nassert solution('10 3\\nsadfaasdda\\f a d') == '21'\nassert solution('7 1\\naaaaaaaa\\b') == '0'\nassert solution('6 3\\nacc\\f b\\nb\\n\\n\\n\\n\\n\\n') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 2\nabacaba\na b\n''') == '12'\nassert solution('''10 3\nsadfaasdda\nf a d\n''') == '21'\nassert solution('''7 1\naaaaaaa\nb\n''') == '0'"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 2\nabacaba\na b\n''') == '12'\nassert solution('''\n10 3\nsadfaasdda\nf a d\n''') == '21'\nassert solution('''\n7 1\naaaaaaa\nb\n''') == '0'\nassert solution('''\n10 1\na\n''') == '0'\nassert solution('''\n2 2\nba\n''') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 2\\nabacaba\\na b') == '12'\nassert solution('10 3\\nabacaba\\na b\\nc') == '21'\nassert solution('7 1\\naaaaaaa\\nb') == '0'"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\nabacaba\\na b\") == \"12\"\nassert solution(\"10 3\\nsadfaasdda\\f a d\\n\") == \"21\""
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"18\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"7 2\nabacaba\na b\n\"\"\"\n) == \"12\"\n\nassert solution(\n\"\"\"10 3\nsadfaasdda\nf a d\n\"\"\"\n) == \"21\"\n\nassert solution(\n\"\"\"7 1\naaaaaaa\nb\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"7 1\naaaaaaa\na\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"7 1\naaaaaaa\nb\n\"\"\"\n) == \"0\""
    },
    {
        "number": 4431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 2') == '12'\nassert solution('10 3') == '21'\nassert solution('7 1') == '0'\nassert solution('2 4') == '0'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n-1 -2 -1 -3') == '6'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997'\nassert solution('100\\n-1000000000 1 -1000000000 1 -1000000000') == '1'"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2'\nassert solution('''5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(t=1, stdin='''5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2'\nassert solution(t=2, stdin='''5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\nassert solution(t=3, stdin='''5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '10'\nassert solution(t=4, stdin='''5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '-2999999997'"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"6\"\nassert solution(\"6\") == \"2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3') == '2'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '6'"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\"\n    ) == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2'\nassert solution('''\n1\n1\n-1\n-1\n''') == '0'\nassert solution('''\n3\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '6'\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"-2999999997\"\nassert solution(\"4\\n10\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"1\""
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000''') == '2'\nassert solution('''4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000''') == '6'\nassert solution('''1\n2\n3''') == '3'\nassert solution('''1\n2\n3''') == '1'\nassert solution('''4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000''') == '2'\n"
    },
    {
        "number": 4432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '2'\nassert solution('''4\n4\n-1 -2 -3\n1\n-1\n1\n-1\n''') == '1'\nassert solution('''4\n4\n-1 -2 -3\n1\n-1\n1\n-1\n''') == '1'\nassert solution('''4\n4\n-1 -2 -3\n1\n-1\n1\n-1\n''') == '1'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"3 5\"\nassert solution(sample_input_2) == \"3 2\"\nassert solution(sample_input_3) == \"4 1\""
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '3 5'\nassert solution('4 6') == '4 1'\nassert solution('8 9') == '3 2'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INP) == OUT\n\n\"\"\"\n\nn, m = map(int, input().split())\nedges = []\nfor _ in range(m):\n    v, u = map(int, input().split())\n    edges.append((v, u))\n\nmax_deg = 0\nfor v, u in edges:\n    max_deg = max(max_deg, max(u, v) + 1)\n\nprint(max_deg)\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 2') == '3 5\\n2 1'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4 1\\n1 2\\n1 3'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '3 5\\n2 1\\n3 2'\nassert solution('4 6') == '4 1\\n1 2\\n1 3'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n''') == '3 5'\nassert solution('''\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '4 1'\nprint('all tests passed')\n\n\n\n-------Inserter-------"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n''') == '3 5'\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '4 1'"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\\n\", 'test 1 failed'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\", 'test 2 failed'\nassert solution(\"8 9\\n1 2\\n1 3\\n1 4\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\", 'test 3 failed'\n"
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"3 2\\n2 5\\n8 5\""
    },
    {
        "number": 4433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '3 5\\n2 1\\n3 2\\n3 4\\n'\nassert solution('4 6') == '4 1\\n1 2\\n1 3\\n'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1\n5\n499993\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n6\n999999\n\"\"\") == \"41664916690999888\"\nprint(solution(input()))"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n4\n9999\n''') == '40'\nassert solution('''\n1\n5\n9999\n''') == '41664916690999888'\nassert solution('''\n2\n3\n5\n''') == '0'\nassert solution('''\n2\n5\n99999\n''') == '0'\nassert solution('''\n2\n3\n9999\n''') == '0'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0\"\n\nassert solution() == \"40\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n5\n3\n4\n''') == '40'\nassert solution('''\n3\n1\n499993\n''') == '41664916690999888'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '40'\nassert solution('4') == '41664'\nassert solution('5') == '40404040404040404040404040404040'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5') == '40'\nassert solution('3\\n5\\n900001') == '0'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n499993') == '40'\nassert solution('2\\n10') == '1'\nassert solution('5\\n16') == '1'\nassert solution('1\\n3') == '0'"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"40\"\n\nassert solution([1]) == \"0\"\n\nassert solution([5]) == \"41664916690999888\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3\n3\n4''') == '1'\nassert solution('''\n4\n5\n5\n7''') == '4'\nassert solution('''\n5\n5\n5\n7''') == '3'\nassert solution('''\n5\n4\n4\n''') == '-1'\nassert solution('''\n2\n5\n1\n1\n1\n''') == '2'\n"
    },
    {
        "number": 4434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n499993') == '0'\n\nassert solution('1\\n6\\n999999') == '40'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\n----\n\nYou are given an array $a$ consisting of $n$ integers. In one move you can jump from the position $i$ to the position $i - a_i$ (if $1 \\le i - a_i$) or to the position $i + a_i$ (if $i + a_i \\le n$).\n\nFor each position $i$ from $1$ to $n$ you want to know the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa).\n\nFor each position $i$ from $1$ to $n$ you want to know the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa).\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint $n$ integers $d_1, d_2, \\dots, d_n$, where $d_i$ is the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa) or -1 if it is impossible to reach such a position.\n\n\n-----Example-----\nInput\n4\n4 5 7 6 7 5 4 4 6 4\n\nOutput\n1 1 1 2 -1 1 1 3 1 1\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 5 7 6 7 5 4 4 6 4\"\n) == \"1 1 1 2 -1 1 1 3 1 1\""
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4\\n') == '1 1 1 2 -1 1 1 3 1 1', \"Wrong answer\"\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"1 1 1 2 -1 1 1 3 1 1\"\nprint(solution(input()))\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n4 5 7 6 7 5 4 4 6 4\n''') == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 1 1 2 -1 1 1 3 1 1\""
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1 1 2'\nassert solution('4') == '1 1 1 1 1 1 1 1 1 2'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"64\") == \"NO\"\nassert solution(\"32\") == \"NO\"\nassert solution(\"97\") == \"NO\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n64\n32\n97\n2\n12345\n''') == 'YES'\nassert solution('''\n5\n64\n32\n97\n2\n12345\n''') == 'NO'\nassert solution('''\n5\n32\n97\n2\n12345\n''') == 'NO'\nassert solution('''\n5\n2\n3\n5\n7\n''') == 'YES'\nassert solution('''\n5\n32\n97\n2\n12345\n''') == 'NO'\n'''\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"12345\") == \"YES\""
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n5\n2\n''') == 'NO'\n\nassert solution('''\n3\n4\n5\n''') == 'YES'\n\nassert solution('''\n10\n2\n3\n5\n7\n11\n5\n4\n9\n5\n''') == 'YES'\n\nassert solution('''\n10\n2\n3\n5\n7\n11\n5\n4\n9\n5\n''') == 'NO'"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"64\") == \"YES\"\nassert solution(\"32\") == \"YES\"\nassert solution(\"97\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n64\n32\n97\n2\n12345''') == \"YES\"\nassert solution('''5\n64\n32\n97\n2\n12345''') == \"NO\"\nassert solution('''3\n64\n32\n97''') == \"NO\"\nassert solution('''1\n64''') == \"NO\"\nassert solution('''5\n2\n4\n8''') == \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n32\n97\n2\n12345\n11\n57''') == 'NO'\nassert solution('''\n4\n2\n2\n1''') == 'NO'\nassert solution('''\n2\n2\n2\n1''') == 'YES'\nassert solution('''\n3\n2\n3\n2''') == 'YES'\nassert solution('''\n5\n64\n32\n97\n2\n12345\n11\n57''') == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n') == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == 'YES\\nNO\\nNO\\nNO\\nNO'\nassert solution('2\\n2\\n2\\n2\\n2\\n') == 'YES\\n2\\n4\\n6\\n8\\n'\nassert solution('5\\n1\\n4\\n9\\n10\\n') == 'YES\\n2\\n8\\n20\\n64\\n'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == 'NO\\nNO\\nNO\\nNO\\nNO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n"
    },
    {
        "number": 4436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == 'ba'\nassert solution('2') == 'ba'\nassert solution('4') == 'abba'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\nbbbb\") == \"abba\"\nassert solution(\"6\\nababab\") == \"ababab\"\nassert solution(\"2\\naa\") == \"ba\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\nabba\") == \"abba\"\nassert solution(\"6\\nababab\") == \"ababab\"\nassert solution(\"2\\naa\") == \"ba\""
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\nbbbb\n''') == 'abba'\n\nassert solution('''6\naa\n''') == 'ba'\n\nassert solution('''2\naa\n''') == 'ba'\n\nassert solution('''3\nabab\n''') == 'abab'\n\nassert solution('''8\naaaaa\n''') == 'aaaaa'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a\") == 1\nassert solution(\"abab\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"abababab\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nbbbb') == 'abba'\nassert solution('6\\nababab') == 'ababab'\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6\nababab\n''') == '0\nassert solution('''3\naa\n''') == '1\nassert solution('''2\nbb\n''') == '1\nassert solution('''2\nab\n''') == '1\nassert solution('''5\naabaaabaaabaa\n''') == '3\n"
    },
    {
        "number": 4437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == 'abba'\nassert solution('6') == 'ababab'\nassert solution('2') == 'ba'\nassert solution('10') == 'bababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2''') == \"15\"\nassert solution('''5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '15'\nassert solution('5 1') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n4\n3 2\n1 1\n4 3\n2 2\n\"\"\") == \"17\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n\"\"\") == \"15\"\nassert solution(\"\"\"\n5\n2 1\n1 0\n2 0\n3 2\n0 3\n\"\"\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2''') == '15'\nassert solution('''5\n2 1\n1 0\n2 0\n3 2\n0 3\n''') == '9'\nassert solution('''20\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20''') == '19'"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '15'\nassert solution('''\n10\n3 1\n0 2\n2 3\n1 0\n1 1\n2 1\n0 1\n0 2\n''') == '9'"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '15'\nassert solution('5') == '9'"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"10\") == \"19\"\nassert solution(\"6\") == \"10\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('1,3') == '1'\nassert solution('2,3') == '2'"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '2'\n'''\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"3\\n1\") == \"2\""
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nprint(solution(input()))"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '1'\n\n'''\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1\"\n) == \"1\", \"Wrong!\"\nassert solution(\"1\") == \"1\", \"Wrong!\"\nassert solution(\"1\") == \"1\", \"Wrong!\"\nassert solution(\"1\") == \"1\", \"Wrong!\"\nassert solution(\"1\") == \"1\", \"Wrong!\"\n\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('1') == '0.999999999999'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"1\") == \"1.0\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.50000000000000004'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('100') == '1'\nassert solution('-100') == '0'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"1.000000000000\"\nassert solution(\"2\\n\") == \"0.999999999999\"\nassert solution(\"4\\n\") == \"2.50000000000\"\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('8') == '1.000000000000'\nassert solution('8') == '0.979999999999'\nassert solution('8') == '0.9800000000000'\nassert solution('8') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('1') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.8') == '1.000000000000'\nassert solution('1') == '1.000000000000'\nassert solution('1.2') == '1.000000000000'\nassert solution('1.5') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1.000000000000'\nassert solution('1') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n''') == '1.000000000000'\nassert solution('''3\n''') == '1.000000000000'\nassert solution('''3\n''') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1.000000000000\"\nassert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2') == '10\\n11\\n'\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'Hello World'\nassert solution('1') == 'Hello World'\nassert solution('2') == 'A+B'\nassert solution('2') == 'A+B'"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"Hello World\"\nassert solution(\"2\\n3\\n\") == \"Hello World\"\nassert solution(\"1\\n4\\n5\\n\") == \"Hello World\"\nassert solution(\"2\\n5\\n6\\n\") == \"Hello World\"\nassert solution(\"2\\n5\\n6\\n\") == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"Hello World\"\nassert solution(\"2\") == \"5\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Hello World\", \"Sample #1 fail\"\nassert solution(\"2\") == \"Hello World\" + \"Hello World\", \"Sample #2 fail\"\n\n-------Solutions-------"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == 'Hello World'\nassert solution('3') == 'Hello World'\n\nTakahashi, who is taking this exam, suddenly forgets his age.\n\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World, and a two-year-old child must receive integers A, B and prints A+B.\n\nIn 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\n\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must receive integers A, B and prints A+B.\n\nTakahashi, who is taking this exam, suddenly forgets his age.\n\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\n\nWrite this program for him.  \n\n-----Constraints-----\n - N is 1 or 2.\n - A is an integer between 1 and 9 (inclusive).\n - B is an integer between 1 and 9 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf N=1, print Hello World; if N=2, print A+B.  \n\nAs N=1, Takahashi is one year old. Thus, we should print Hello World.\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n1\\n2\") == \"Hello World\"\nassert solution(\"2\\n1\\n2\\n1\") == \"Hello World\""
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == 'Hello World'\nassert solution('2') == 'A+B'\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"2 + 2 = 4\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"1+2\"\nprint(solution(\"2\"))\nprint(solution(\"1\"))\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 7\") == \"7\"\nassert solution(\"4 9\") == \"9999\"\nassert solution(\"3 1\") == \"13\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 5\") == \"55\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"55\"\n\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == '1'\nassert solution('1') == '1'\nassert solution('2') == '11'\nassert solution('3') == '1'\nassert solution('4') == '11'\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 1 2\") == \"1 1 2\"\nassert solution(\"1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())\n\n'''"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 2') == '2'\nassert solution('1 3') == '3'\nassert solution('1 2') == '2'\nassert solution('4 3') == '3'"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '45'\nassert solution('4') == '44'\nassert solution('3') == '33'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'a'\nassert solution('d') == 'c'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('z') == 'a'\nassert solution('a') == 'b'\nassert solution('b') == 'c'\nassert solution('c') == 'd'\nassert solution('d') == 'e'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'a'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"b\"\n\n'''"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a') == 'b'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"b\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a') == 'b'\n"
    },
    {
        "number": 4443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == None, \"Not possible\"\nassert solution(\"a\") == \"a\", \"Wrong result\"\nassert solution(\"aBc\") == \"c\", \"Wrong result\"\nassert solution(\"abc\") == \"c\", \"Wrong result\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"oder atc\") == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"test\") == \"test\"\nprint(solution(input()))"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'atcoder'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('oder atc') == 'atcoder', 'Not implemented'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('dgdhsjwew ') == 'gwefdsjw'"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('hannah') == 'hannah'\nassert solution('james') == 'amjes'\nassert solution('frank') == 'frank'\nassert solution('Tina') == 'Tina'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('oder atc') == 'atcoder'\nassert solution('oder atc') == 'atcoder'\n"
    },
    {
        "number": 4444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"oder atc1\") == \"atc1coder\"\nassert solution(\"oder atc2\") == \"atc2coder\"\nassert solution(\"oder atc3\") == \"atc3coder\"\nassert solution(\"oder atc4\") == \"atc4coder\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 5 7 8 2\n''') == '0'\nassert solution('''\n6\n5 1 2 4 6 3\n''') == '1000000'\nassert solution('''\n2\n1000000 1000000\n''') == '1000000'"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 5 7 8 2\\n') == '0'\nassert solution('6\\n5 1 2 4 6 3\\n') == '1000000'"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 5 7 8 2\n\n''') == '0'\n\nassert solution('''\n6\n5 1 2 4 6 3\n\n''') == '1000000'\n\nassert solution('''\n2\n100 10000\n\n''') == '10000'\n\nassert solution('''\n2\n100 10000\n\n''') == '10000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == \"0\""
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0'\nassert solution('1000000 1000000') == '1000000'"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('6') == '1000000'"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '1000000'\nassert solution('4\\n1 5 6 3 2') == '2'\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '1000000'\nassert solution('10\\n1000000 1000000') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1000000'\nassert solution('2') == '1000000'\nassert solution('4') == '0'"
    },
    {
        "number": 4445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n3\n''') == '1000000'\nassert solution('''\n2\n1\n2\n''') == '2'\nassert solution('''\n2\n1000000\n''') == '1000000'\nassert solution('''\n2\n1000000\n''') == '1000000'\nassert solution('''\n100000\n1000000\n''') == '1000000'\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 100 99\") == \"5\"\nassert solution(\"6 2 3 3\") == \"5\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 2 3 3\n7 10 50 12 1 8\n''') == '5'\nassert solution('''\n1 1 100 99\n100\n''') == '1'\nassert solution('''\n7 4 2 1\n1 3 5 4 2 7 6\n''') == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1 100 99') == '5'\nassert solution('6 2 3 3') == '5'\nassert solution('7 4 2 1') == '6'\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 100 99') == '5'\nassert solution('7 4 2 1') == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2 3 3\n7 10 50 12 1 8\n''') == '5'\nassert solution('''\n1 1 100 99\n100\n''') == '1'\nassert solution('''\n7 4 2 1\n1 3 5 4 2 7 6\n''') == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6 2 3 3\\n7 10 50 12 1 8'\n) == '5'\nassert solution(\n    '1 1 100 99\\n100'\n) == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 100 99\") == \"5\"\nassert solution(\"7 4 2 1\") == \"6\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10\") == \"1\""
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\") == \"5\"\nassert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 4 2 1\") == \"6\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 2 3 3\"\n    \"7 10 50 12 1 8\"\n    ) == \"5\"\nassert solution(\n    \"1 1 100 99\"\n    \"100\"\n    ) == \"1\"\nassert solution(\n    \"6 2 3 3\"\n    \"1 3 5 4 2 7 6\"\n    ) == \"6\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 100 99') == '1'\nassert solution('7 4 2 1') == '6'\nassert solution('1 1 100 99') == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data=\"3 2\") == \"2 2 2\"\nassert solution(input_data=\"4 2\") == \"2 2 2\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n2\\n10\\n12') == '3\\n3 1 2 3\\n'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"0\"\nassert solution(\"6 3\") == \"3 2 0 6 10 12\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '2'\nassert solution('6 2') == '5'\nassert solution('3 2') == '2'"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3') == '3 2 0 6 10 12'\n"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"1 1 1 1 1\"\nassert solution(\"3 3\") == \"0 0 0 1 1\"\nassert solution(\"4 2\") == \"0 1 1 1\"\nassert solution(\"3 2\") == \"1 1 1 1\"\n\nstdin = \"\"\"\n5 2\n3 2 0 6 10 12\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 3\\n\"\n    \"3 2 0 6 10 12\"\n) == \"3 2 0 7 10 14\"\nassert solution(\n    \"4 2\\n\"\n    \"0 1 2 3\"\n) == \"0 1 2 3\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 2\n3 3\n1 5\n2 4\n''') == \"8\"\nassert solution('''\n5\n4 2\n3 3\n1 5\n2 4\n''') == \"20\""
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '8'"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '8'\nassert solution('5 3') == '20'"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n        \"5 6\\n\"\n        \"1 2 0 2 0\\n\"\n        \"2 4\\n\"\n        \"3 3\\n\"\n        \"1 5\\n\"\n        \"1 2\\n\"\n        \"1 5\\n\"\n        \"2 3\\n\"\n        ) == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == \"8\"\nassert solution('''5 3\n4 2\n3 5\n4 2\n2 5''') == \"20\"\nassert solution('''5 3\n4 2\n3 5\n4 2\n2 5''') == \"21\"\nassert solution('''5 3\n4 2\n3 5\n4 2\n2 5''') == \"21\""
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '8'\nassert solution('3 5') == '22'\nassert solution('4 2') == '4'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == \"21\"\nassert solution(test_input_2) == \"18\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n1 1 1 1 1 1 1 1\\n2') == 'YES'\nassert solution('5\\n3 4 1\\n10 5 2\\n4 5 2\\n2\\n1 1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\\n') == \"YES\"\n\nassert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\\n') == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3\n3 2 1 2\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100 100\n1\n1 1 1 1 1 1 1 1\n1\n1 1 1 1 1 1 1 1\n1\n100 100 100"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('6') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\"\nassert solution(\"2\") == \"NO\\nYES\\nNO\\nYES\\nYES\\nYES\\n\""
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == \"YES\"\n\nfor i in range(int(input())):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if (sum(sticks) - 4) % 4!= 0:\n        print(\"NO\")\n    else:\n        area = ((sum(sticks) - 4) // 4)\n        print(\"YES\" if area == 4 else \"NO\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1''') == 'YES'\n\n'''"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 10 5') == '3'\nassert solution('7 15 18') == '9'\nassert solution('13 10 7') == '7'\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 15 18') == '9'\nassert solution('2 6 3') == '2'\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == \"3\"\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n') == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 10 5') == '3'\nassert solution('7 15 18') == '9'"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 10 5') == '3'\nassert solution('7 15 18') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n''') == '3'\nassert solution('''\n7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n''') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_value) == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n\"\"\") == \"9\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 9 10') == '6'\nassert solution('4 1 2') == '2'\nassert solution('4 1 2 5') == '3'\nassert solution('7 5 4') == '5'\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3 1\"\nassert solution(\"6\") == \"7 2\"\nassert solution(\"10\") == \"7486 3\""
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\""
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 1 3 4 2\n''') == '3 1'\nassert solution('''\n6\n1 5 12 13 2 15\n''') == '7 2'\nassert solution('''\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == '7486 3'\nprint('tests done')\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 1 3 4 2\n''') == '3 1'\nassert solution('''\n6\n1 5 12 13 2 15\n''') == '7 2'\nassert solution('''\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 3 4 2') == '3 1'\nassert solution('6 1 5 12 13 2 15') == '7 2'\nassert solution('10') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '3 1'\nassert solution('6') == '7486 3'\nassert solution('10') == '7486 3'\n\n\"\"\"\n\nfrom typing import List\n\ninput_stdin = \"\"\"5\n1 1 3 4 2\n\"\"\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"3 1\"\nassert solution(\"6\") == \"7486 3\"\nassert solution(\"10\") == \"7486 3\""
    },
    {
        "number": 4451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3 1\\n1 1 1 1 1\\n\"\nassert solution(stdin='''\n5\n1 1 3 4 2\n''') == \"3 1\\n1 1 1 1 1\\n\"\nassert solution(stdin='''\n10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == \"7486 3\\n3 3 3 2 2 2 2 2 1 1 1 "
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n5009\n7\n9876\n10000\n10\n''') == \"2 5000 9 1 7 4 800 70 6 9000 1 1 10000 1 10\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"9\") == \"9\"\nassert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n5009\n7\n9876\n10000\n10''') == \"2\"\nassert solution('''4\n5009\n7\n9876\n10000''') == \"1\"\nassert solution('''2\n5009\n7\n9876\n10000''') == \"1\"\nassert solution('''3\n5009\n7\n9876\n10000''') == \"1\"\nassert solution('''1\n5009\n7\n9876\n10000''') == \"1\""
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n5009\n7\n9876\n10000\n10\n''') == '2'\nassert solution('''8\n1\n5\n4\n5\n3\n5\n''') == '3'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"9\") == \"1\"\nassert solution(\"13\") == \"3\"\nassert solution(\"3134\") == \"2\"\nassert solution(\"112\") == \"1\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\\\n5\n5009\n7\n9876\n10000\n10\n''') == '2'\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n5009\n7\n9876\n10000\n10\n''') == '2\n1\n7\n4\n800 70 6 9000 \n1\n10000 \n1\n10\n'''\n)"
    },
    {
        "number": 4452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10') == '4'\nassert solution('2\\n7') == '7'\nassert solution('3\\n1') == '1'\nassert solution('4\\n3') == '9000'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"3 3 3 \nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"2 2 2 2 1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"3 3 3 2 1 3 3 3 1\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1') == '1 1 1 1 1'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n5\\n3 4 1 2') == '3 3 3 2 1 3'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1 1 1 1 1\"\nassert solution(\"2\") == \"3 3 3\"\nassert solution(\"3\") == \"2 3 3 2 1 3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2 2 2 2 1 4\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\"\n    ) == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\nassert solution(\n    \"6\\n4\\n1 2 3 4 5\\n2 3 1\\n5\\n5 1 2 4 3\"\n    ) == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\nassert solution(\n    \"5\\n4\\n1 2 3 4 5\\n2 3 1\"\n    ) == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\nassert solution(\n    \"6\\n4\\n1 2 3 4 5\\n2 3 1\\n5\\n5 1 2 4 3\"\n    ) == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\n\n\"\"\"\nimport sys\nimport collections\nfrom functools import lru_cache\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1') == '1 1 1 1 1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1') == '3 3 3 3 2 3 3'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1') == '2 3 3 3 2 3 3'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1') == '1 1 1 1 1 1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1') == '4 4 4 1 4 4 3'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '3 3 3 2 1 3\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n4 4 4 1 4\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1''') == '2 2 2 2 1 4 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1\\n2 2 2 2 1 4 4\\n1 1 1 1 1\\n4 4 4 1 4\\n1 1 1 1 1\\n1'''"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\nassert solution(\"6\\n4 6 2 1 5 3\\n3\\n2 3 1\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\n4 2 1\\n3 4 1\\n\") == \"1 3 3\\n2 3 3 2 1 3\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1 3 3 3 2 1 3 3 2 1 2 3 1\\n3 3 3 2 1\\n2 3 3 2 2\\n1 2 2 2 2\\n4 4 4 1 4\\n5 5 5 5 1 4\\n4 4 4 4 4'\n"
    },
    {
        "number": 4453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == \"1 1 1 1 1 3 3\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == \"3 2\"\n\n'''\n--------------------------------------------------------------------------------------------------------------------\n\n2. Given two strings S and T, return whether S is a subsequence of T\n\nS is a subsequence of T if it is equal to T[n-1]T[n-2]...T[n-i] where n is the length of S, and n>0.\n\nNote that if S is a subsequence of T, then it is also a subsequence of T.\n\nExample: S=\u201cabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caxc\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201cacb\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201ccb\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201cadcb\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201c\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201c\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201cabac\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbacdc\u201d, return false.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return false.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\n\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS=\u201caaabc\u201d, T=\u201cahbgdc\u201d, return true.\nS"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n1 2 3 4 5\") == \"3\"\nassert solution(\"3\\n4\\n1 2 1\") == \"2\"\nassert solution(\"3\\n3\\n1 2 1\") == \"1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '3'\nprint('ok')"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '3'\nassert solution('''4\n4\n4 4 4\n4\n3 4 3\n''') == '2'\nassert solution('''3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n5\n1 2 3 4 5\n2\n1 2\n4\n1 1 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2 3 4 5\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2 1\"\nassert solution(stdin='''\n    3\n    1 2 3 4 5\n    3\n    1 2 2\n    4\n    1 1 1 1\n    ''') == \"2 1\"\nassert solution(stdin='''\n    3\n    1 2 3 4 5\n    2\n    1 1\n    4\n    1 1 1 1\n    ''') == \"3 1\"\nassert solution(stdin='''\n    3\n    1 2 3 4 5\n    1\n    1 1\n    4\n    1 1 1 1\n    ''') == \"3 1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\n\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 4\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2 \nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5 \n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\"\n) == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"100 100\\n1 1\\n3 3\\n1 1\\n\") == \"0 0 0 0 1 1 1 1 2 2\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1\\n4\\n2 3\\n3 5\\n4 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\\n25 27\\n26 28\\n27 29\\n28 30\\n29 31\\n30 32\\n31 33\\n32 34\\n33 35\\n34 36\\n35 37\\n36 38\\n37 39\\n38 40\\n39 41\\n40 42\\n41 43\\n42 44\\n43 45\\n44 46\\n45 47\\n46 48\\n47 49\\n48 50\\n49 51\\n50 52\\n51 53\\n50 54\\n49 55\\n48 56\\n47 57\\n46 58\\n45 59\\n44 60\\n43 61\\n42 62\\n41 63\\n40 64\\n39 65\\n38 66\\n37 67\\n36 68\\n35 69\\n34 70\\n33 71\\n32 72\\n31 73\\n30 74\\n29 75\\n28 76\\n27 77\\n26 78\\n25 79\\n24 80\\n23 81\\n22 82\\n21 83\\n20 84\\n19 85\\n18 86\\n17 87\\n16 88\\n15 89\\n14 90\\n13 91\\n12 92\\n11 93\\n10 94\\n9 95\\n8 96\\n7 97\\n6 98\\n5 99\\n4 100\\n') == '0 0 1 2\\n0 0 1 2\\n1 2\\n0 0 1 2\\n1 2\\n1 2\\n0 0 1 2\\n1 2\\n1 2\\n0 0 1 2\\n0 0 1 2\\n0 0 1 2\\n1 2\\n0 0 1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n0 0 1 2\\n0 0 1 2\\n0 0 1 2\\n0 0 1 2\\n1 2\\n0 0 1 2\\n0 0 1 2\\n0 0 1 2\\n1 2\\n1 2\\n0 0 1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\nassert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 2\n10 4 10 15\n1 2\n4 3\n\"\"\") == \"5 4 0 5 3 3 9 0 2 5\"\n\nassert solution(\"\"\"\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\"\"\") == \"5 4 0 5 3 3 9 0 2 5\"\n\nassert solution(\"\"\"\n8 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\"\"\") == \"5 4 0 5 3 3 9 0 2 5\"\n\nassert solution(\"\"\"\n1 2\n1 2\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\"\"\") == \"0 0\""
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n10 4 10 15\n1 2''') == '0 0 1 2'\nassert solution('''10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5''') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n10 4 10 15\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\nprint(solution(*input().split()))\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 2 3') == 'NO'\nassert solution('3 2\\n1 2 3') == 'YES'\nassert solution('3 2\\n1 3 2') == 'YES'\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n1 2\n1 3\n''') == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n2 5 7 8\n6 8 4 1\n4 5 6\n''') == 'NO'\nassert solution('''\n3 2\n1 2 3\n1 3 2\n''') == 'YES'\nassert solution('''\n4 4\n3 1 2 4\n1 2 3 4\n2 3 1 4\n''') == 'YES'\nassert solution('''\n3 2\n1 2 3\n1 3 2\n''') == 'NO'\nassert solution('''\n4 3\n2 1 3 4\n3 4 2 1\n4 1 3 2\n''') == 'YES'\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"abb\"\nassert solution(\"1 3 2\") == \"abb\"\nassert solution(\"1 2 3 4\") == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n1 2 3 4 5\n1 3 2 5 4\n''') == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n4 2\n2 1 3\n3 4 1\n''') == \"NO\"\nassert solution(\n'''\n4 2\n3 2 1\n1 4 2\n''') == \"YES\"\nassert solution(\n'''\n4 2\n2 1 3\n3 4 1\n''') == \"YES\"\nassert solution(\n'''\n5 3\n1 2 4 2\n3 2 5 2\n2 3 5 2\n''') == \"YES\"\nassert solution(\n'''\n5 3\n1 2 4 2\n3 2 5 2\n2 3 5 2\n''') == \"YES\"\n''') == \"YES\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n1 3 2\\n') == 'YES'\nassert solution('5 3 4\\n1 3 2\\n') == 'NO'\nassert solution('1 2 3\\n1 3 4\\n') == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 3 2\") == \"YES\"\nassert solution(\"5 5 4 2\") == \"NO\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\"\nassert solution(\"4\\n10 10 10 10 10\\n\") == \"69\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\"\nassert solution(\"2\\n1 4\\n\") == \"3\"\nassert solution(\"1\\n1\\n\") == \"2\""
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '43'\nassert solution('4') == '69'\nassert solution('6') == '6'\nassert solution('2') == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n20 10 20\n\n''') == '43'\nassert solution('''\n4\n10 10 10 10\n\n''') == '64'\nassert solution('''\n6\n5 4 5 4 4 5\n\n''') == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"43\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"6 1 3 5 2 4\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1 4\") == \"2\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n5 4 5 4 4 5\n''') == '69'\nassert solution('''\n4\n10 10 10 10\n''') == '64'\nassert solution('''\n3\n20 10 20\n''') == '43'\nassert solution('''\n2\n1 4\n''') == '2 1'\n\n\n\"\"\"\n\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n20 10 20 10\n\n4\n10 10 10 10\n\n''') == '64'\nassert solution('''6\n5 4 5 4 4 5\n\n6\n5 4 5 4 4 5\n\n''') == '69'\nassert solution('''2\n1 4\n\n2\n1 \n''') == '3'\nassert solution('''3\n1 4\n\n2\n1 \n''') == '2'\nassert solution('''4\n10 10 10 10\n\n3\n1 3 2 \n\n''') == '43'\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"43\"\nassert solution(\"2\") == \"1 3 2\"\nassert solution(\"3\") == \"64\"\nassert solution(\"4\") == \"2 1 4 3\"\nassert solution(\"5\") == \"69\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"43\"\nassert solution(input()) == \"2 1 3 5 2 4\"\nassert solution(input()) == \"69\"\nassert solution(input()) == \"6 1 3 5 2 4\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"43\"\nassert solution(\"4\") == \"69\"\nassert solution(\"6\") == \"6 1 3 5 2 4\"\nassert solution(\"2\") == \"2 1\""
    },
    {
        "number": 4457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '43'\nassert solution('4') == '69'\nassert solution('6') == '6 1 3 5 2 4'\nassert solution('2') == '2 1'"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4 2 5 1 3\n''') == '''3'''\nassert solution('''\n5\n1 2 3 5 4\n''') == '''2'''\n'''"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n4 2 5 1 3\n''') == '3'\nassert solution('''\n5\n2 3 5 1 4\n''') == '2'\nassert solution('''\n5\n3 1 2 5 4\n''') == '0'\nassert solution('''\n5\n4 1 2 3 5\n''') == '5'\nassert solution('''\n5\n2 3 1 4 5\n''') == '4'\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"5 7 3 6 8\") == \"3\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '4'\nassert solution('5') == '3'"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\", \"Not the right answer\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\nassert solution(\"5\\n3 2 1 5 4\") == \"3\"\nassert solution(\"5\\n4 2 5 1 3\") == \"3\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 2\\n1 1\") == \"3\"\nassert solution(\"5\\n4 2 5 1 3\") == \"3\""
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('10') == '8'\n\n=========================================\nhttps://codeforces.com/problemset/problem/1055/B\n\n----------------\nThe idea is to sort the array and then compare the first and the last element of the array.\nYou can notice that the first element of the array is either the largest or the smallest.\n\nThe second element of the array is either the largest or the smallest.\n\nThe third element of the array is either the largest or the smallest."
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''5\n3 2 2 3 2\n''') == '4'\nassert solution('''5\n4 5 5 5\n''') == '0'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n3') == '1'\nassert solution('5\\n3 3 3 3 3') == '3'\nassert solution('10\\n1 2 2 3 3 3 5 5') == '5'\nassert solution('15\\n1 2 2 3 3 3 5 5 6 6 5') == '3'\nassert solution('25\\n1 2 2 3 3 3 5 5 6 6 5 7 7 7') == '4'"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3 4 2 3 1\\n') == '1'\nassert solution('2\\n4 4\\n') == '0'\nassert solution('3\\n3\\n') == '1'\nassert solution('4\\n4\\n') == '1'\nassert solution('6\\n3 4 5 1 2 4 2\\n') == '1'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 4 1 4\") == \"1\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == \"1\""
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n3 3 3 3\n''') == '1'\nassert solution('''5\n1 2 2 3 3\n''') == '0'\nassert solution('''15\n1 2 2 3 3 3 4 4 5 5 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"3\\n4 3 3 3\") == \"0\"\nassert solution(\"10\\n
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3\\n3\\n3') == '1'\nassert solution('4\\n3 3 3 3') == '2'\nassert solution('2\\n2\\n2\\n2') == '0'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '0'\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 1, 4, 1, 4, 1, 4]) == \"1\"\nassert solution([2, 2, 3, 1, 3, 4]) == \"2\"\nassert solution([4, 4, 3, 4]) == \"0\"\nassert solution([4, 2, 3, 4]) == \"1\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\nassert solution('1\\n2\\n3\\n4') == '0'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution(\"1 1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\n\n----Explanation----\nTest Case 1\nSnuke chose 1.\nSnuke assigned 1 to x_1.\nTest Case 2\nSnuke chose 3.\nSnuke assigned 3 to x_2.\nSnuke chose 4.\nSnuke assigned 4 to x_3.\nSnuke chose 5.\nSnuke assigned 5 to x_4.\nSnuke assigned 0 to x_5.\n\nIn this case, Snuke assigned 0 to x_1, so we should print 1.\n\n'''\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 1 1 1 1') == '2'\nassert solution('2 2 2 2 2') == '3'\nassert solution('3 3 3 3 3') == '4'\nassert solution('4 4 4 4 4') == '5'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5') == '1'\nassert solution('0 2 3 4 5') == '2'\nassert solution('5 0 2 3 4') == '1'\nassert solution('5 0 2 3 4') == '4'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3 4 5') == \"1\"\nassert solution('0 2 3 4 5') == \"1\"\nassert solution('0 1 2 3 4 5') == \"1\"\nassert solution('0 1 1 2 3 4 5') == \"1\"\nassert solution('0 0 0 2 3 4 5') == \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '4'\nassert solution('2 4 6 8 0') == '0'\nassert solution('2 4 6 8 0') == '0'\nassert solution('1 2 3 4 5') == '1'\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('0 -1 2 3 4') == '3'"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 2 3 4 5\") == \"2\"\nassert solution(\"0 0 1 2 3 4 5\") == \"2\"\nassert solution(\"0 0 0 1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 2 2\") == \"1\"\nassert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == '0'\nassert solution('3 2') == '3'\nassert solution('4 2') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"5 7\") == \"1\"\nassert solution(\"6 6\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"0\"\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\nassert solution('7 7') == '0'\nassert solution('4 6') == '6'\nassert solution('10 10') == '0'\nassert solution('1000 2') == '-1000'\n"
    },
    {
        "number": 4461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\nassert solution('2 5') == '4'\nassert solution('1 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 10 100\n''') == 'Yes'\n'''\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'No'"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\nassert solution('4\\n3 4 7 6') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 10 100\n''') == 'Yes'\nassert solution('''5\n1 20 100 10 40\n''') == 'Yes'\n'''\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        seq = stdin.split()[1:]\n        seq = sorted(map(lambda s: int(s), seq))\n        for i in range(1, n):\n            if seq[i] % seq[i - 1]!= 4:\n                return 'No'\n        return 'Yes'\ns = Solution()\nfor _ in range(int(input())):\n    print(s.solve(input()))\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"Yes\"\nassert solution(\"1000\") == \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3,1,10,100]) == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\nassert solution('4\\n1 2 3 4') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('6') == 'Yes'\nassert solution('9') == 'Yes'\nassert solution('10') == 'Yes'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('xy') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"yx\") == \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"No\"\n\n\"\"\"\nfrom collections import Counter\n\ns = input()\nt = input()"
    },
    {
        "number": 4463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"No\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5 1\") == \"YES\"\nassert solution(\"7 5 1\") == \"NO\"\nassert solution(\"6 5 1\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6 5\") == \"YES\"\n\nassert solution(\"5 7 5\") == \"NO\"\n\nassert solution(\"5 5 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\nassert solution(\"10 3 2\\n\") == \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('5 10') == 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"YES\"\nassert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 6 3\") == \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 5 1\n''') == 'YES'\nassert solution('''3 5 1\n''') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5 1\") == \"YES\", \"Wrong\"\nassert solution(\"13 5 1\") == \"YES\", \"Wrong\"\nassert solution(\"5 6 3\") == \"NO\", \"Wrong\"\nassert solution(\"1 1 1\") == \"YES\", \"Wrong\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 5 1') == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"10 3 1\") == \"NO\"\nassert solution(\"2 5 1\") == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 8 2\") == \"NO\"\nassert solution(\"-1 -2\") == \"YES\"\nassert solution(\"0 1\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"8 7\") == \"27\"\nassert solution(\"12 10\") == \"60\"\nassert solution(\"12 10\") == \"60\"\nassert solution(\"12 10\") == \"60\""
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\") == \"1\\n\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"9 9\") == \"1\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('10 3') == '13'\n\n---Submission---\n<res>\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    5 5\n''') == '1'\nassert solution('''\n    7 7\n''') == '1'\nassert solution('''\n    11 11\n''') == '8'\nassert solution('''\n    10 10\n''') == '12'\nassert solution('''\n    20 20\n''') == '12'\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('5 3') == '9'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 5\") == \"13\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"100 100\") == \"10000\""
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"13 3 1\") == \"3\"\nassert solution(\"6 5 0\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"5 3 3\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"13 3 1\") == \"3\"\nassert solution(\"1 4 7\") == \"4\"\nassert solution(\"50 3 1\") == \"3\"\nassert solution(\"1000 10 10\") == \"0\"\nassert solution(\"1000 1000 10\") == \"1\"\n\n\"\"\"\nX, Y, Z = map(int, input().split())"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(...) == '3'"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '3'\nassert solution('13 3 1') == '3'\nassert solution('10 10 1') == '2'\nassert solution('5 1 1') == '1'\n'''\n\nstdin = int(input())\nx = stdin.split()\nx = list(map(int, x))"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 1') == '3'\nassert solution('3 3 1') == '3'\nassert solution('3 2 2') == '2'\nassert solution('3 3 2') == '2'\nassert solution('3 4 3') == '3'"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == \"3\"\nassert solution(\"11 5 3\") == \"2\"\nassert solution(\"11 10 2\") == \"1\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 1\") == \"3\"\nassert solution(\"20 5 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2\") == \"3\"\nassert solution(\"1 1 3\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\n\nX, Y, Z = map(int, input().split())"
    },
    {
        "number": 4466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13 3 1') == '3'\nassert solution('10 10 10') == '2'\n\"\"\"\nimport math"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\nassert solution('''5\n1 0\n3 1\n4 1\n2 2\n1 3\n0 4\n5 5\n''') == '3'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == \"2\"\nassert solution('''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == \"1\"\nassert solution('''\n10\n3 1\n4 2\n0 4\n1 5\n5 2\n7 1\n8 5\n3 2\n6 5\n9 3\n1 6\n9 1\n0 7\n2 8\n5 8\n8 7\n5 9\n''') == \"2\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == \"2\"\nassert solution(\"4\\n0 4\\n5 5\\n3 3\\n2 2\\n1 1\\n0 0\\n\") == \"1\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '2'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\nassert solution('3\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '1'\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"10\"\nassert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"1\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n0 3') == '7'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '7'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == str(7)\n\"\"\"\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\nt_list = list(map(int, sys.stdin.readline().split()))\n\nresult = t_list[0]\ni = 1\nwhile i <= n:\n    if i == n:\n        result = max(result, t_list[i - 1] + t)\n        break\n    if t_list[i] <= t:\n        result = max(result, t_list[i - 1] + t)\n        i += 1\n    else:\n        result = max(result, t_list[i - 1] + t_list[i])\n        i += 1\nprint(result)"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4\n0 3\n''') == '7'\nassert solution('''5 4\n0 3\n0 2\n1 4\n2 3\n''') == '9'\nassert solution('''5 7\n0 5\n0 2\n1 4\n2 3\n''') == '14'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2\n2 3\n3 2\n3 4\n4 1\n4 5\n5 4\n5 6\n6 5\n6 7\n7 6\n7 8\n8 7\n8 9\n9 8\n9 10\n10 9\n10 11\n11 10\n11 12\n12 11\n12 13\n13 12\n13 14\n14 13\n14 15\n15 14\n15 16\n16 15\n16 17\n17 16\n17 18\n18 17\n18 19\n19 18\n19 20\n20 19\n20 21\n21 20\n21 22\n22 21\n22 23\n23 22\n23 24\n24 23\n24 25\n25 24\n25 26\n26 25\n26 27\n27 26\n27 28\n28 27\n28 29\n29 28\n29 30\n30 29\n30 31\n31 30\n31 32\n32 31\n32 33\n33 32\n33 34\n34 33\n34 35\n35 34\n35 36\n36 35\n36 37\n37 36\n37 38\n38 37\n38 39\n39 38\n39 40\n40 39\n40 41\n41 40\n41 42\n42 41\n42 43\n43 42\n43 44\n44 43\n44 45\n45 44\n45 46\n46 45\n46 47\n47 46\n47 48\n48 47\n48 49\n49 48\n49 50\n50 49\n50 51\n51 50\n51 52\n52 51\n52 53\n53 52\n53 54\n54 53\n54 55\n55 54\n55 56\n56 55\n56 57\n57 56\n57 58\n58 57\n58 59\n59 58\n59 60\n60 59\n60 61\n61 60\n61 62\n62 61\n62 63\n63 62\n63 64\n64 63\n64 65\n65 64\n65 66\n66 65\n66 67\n67 66\n67 68\n68 67\n68 69\n69 68\n69 70\n70 69\n70 71\n71 70\n71 72\n72 71\n72 73\n73 72\n73 74\n74 73\n74 75\n75 74\n75 76\n76 75\n76 77\n77 76\n77 78\n78 77\n78 79\n79 78\n79 80\n80 79\n80 81\n81 80\n81 82\n82 81\n82 83\n83 82\n83 84\n84 83\n84 85\n85 84\n85 86\n86 85\n86 87\n87 86\n87 88\n88 87\n88 89\n89 88\n89 90\n90 89\n90 91\n91 90\n91 92\n92 91\n92 93\n93 92\n93 94\n94 93\n94 95\n95 94\n95 96\n96 95\n96 97\n97 96\n97 98\n98 97\n98 99\n99 98\n99 100\n100 99\n100 101\n101 100\n101 102\n102 101\n102 103\n103 102\n103 104\n104 103\n104 105\n105 104\n105 106\n106 105\n106 107\n107 106\n107 108\n108 107\n108 109\n109 108\n109 110\n110 109\n110 111\n111 110\n111 112\n112 111\n112 113\n113 112\n113 114\n114 113\n114 115\n115 114\n115 116\n116 115\n116 117\n117 116\n117 118\n118 117\n118 119\n119 118\n119 120\n120 119\n120 121\n121 120\n121 122\n122 121\n122 123\n123 122\n123 124\n124 123\n124 125\n125 124\n125 126\n126 125\n126 127\n127 126\n127 128\n128 127\n128 129\n129 128\n129 130\n130 129\n130 131\n131 130\n131 132\n132 131\n132 133\n133 132\n133 134\n134 133\n134 135\n135 134\n135 136\n136 135\n136 137\n137 136\n137 138\n138 137\n138 139\n139 138\n139 140\n140 139\n140 141\n141 140\n141 142\n142 141\n142 143\n143 142\n143 144\n144 143\n144 145\n145 144\n145 146\n146 145\n146 147\n147 146\n147 148\n148 147\n148 149\n149 148\n149 150\n150 149\n150 151\n151 150\n151 152\n152 151\n152 153\n153 152\n153 154\n154 153\n154 155\n155 154\n155 156\n156 155\n156 157\n157 156\n157 158\n158 157\n158 159\n159 158\n159 160\n160 159\n160 161\n161 160\n161 162\n162 161\n162 163\n163 162\n163 164\n164 163\n164 165\n165 164\n165 166\n166 165\n166 167\n167 166\n167 168\n168 167\n168 169\n169 168\n169 170\n170 169\n170 171\n171 170\n171 172\n172 171\n172 173\n173 172\n173 174\n174 173\n174 175\n175 174\n175 176\n176 175\n176 177\n177 176\n177 178\n178 177\n178 179\n179 178\n179 180\n180 179\n180 181\n181 180\n181 182\n182 181\n182 183\n183 182\n183 184\n184 183\n184 185\n185 184\n185 186\n186 185\n186 187\n187 186\n187 188\n188 187\n188 189\n189 188\n189 190\n190 189\n190 191\n191 190\n191 192\n192 191\n192 193\n193 192\n193 194\n194 193\n194 195\n195 194\n195 196\n196 195\n196 197\n197 196\n197 198\n198 197\n198 199\n199 198\n199 200\n200 199\n200 201\n201 200\n201 202\n202 201\n202 203\n203 202\n203 204\n204 203\n204 205\n205 204\n205 206\n206 205\n206 207\n207 206\n207 208\n208 207\n208 209\n209 208\n209 210\n210 209\n210 211\n211 210\n211 212\n212 211\n212 213\n213 212\n213 214\n214 213\n214 215\n215 214\n215 216\n216 215\n216 217\n217 216\n217 218\n218 217\n218 219\n219 218\n219 220\n220 219\n220 221\n221 220\n221 222\n222 221\n222 223\n223 222\n223 224\n224 223\n224 225\n225 224\n225 226\n226 225\n226 227\n227 226\n227 228\n228 227\n228 229\n229 228\n229 230\n230 229\n230 231\n231 230\n231 232\n232 231\n232 233\n233 232\n233 234\n234 233\n234 235\n235 234\n235 236\n236 235\n236 237\n237 236\n237 238\n238 237\n238 239\n239 238\n239 240\n240 239\n240 241\n241 240\n241 242\n242 241\n242 243\n243 242\n243 244\n244 243\n244 245\n245 244\n245 246\n246 245\n246 247\n247 246\n247 248\n248 247\n248 249\n249 248\n249 250\n250 249\n250 251\n251 250\n251 252\n252 251\n252 253\n253 252\n253 254\n254 253\n254 255\n255 254\n255 256\n256 255\n256 257\n257 256\n257 258\n258 257\n258 259\n259 258\n259 260\n260 259\n260 261\n261 260\n261 262\n262 261\n262 263\n263 262\n263 264\n264 263\n264 265\n265 264\n265 266\n266 265\n266 267\n267 266\n267 268\n268 267\n268 269\n269 268\n269 270\n270 269\n270 271\n271 270\n271 272\n272 271\n272 273\n273 272\n273 274\n274 273\n274 275\n275 274\n275 276\n276 275\n276 277\n277 276\n277 278\n278 277\n278 279\n279 278\n279 280\n280 279\n280 281\n281 280\n281 282\n282 281\n282 283\n283 282\n283 284\n284 283\n284 285\n285 284\n285 286\n286 285\n286 287\n287 286\n287 288\n288 287\n288 289\n289 288"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '7'\nassert solution('2 3') == '8'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\nassert solution(\"4 3\\n0 1 2 3\") == \"5\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n\") == \"7\"\nassert solution(\"3 6\\n\") == \"15\"\nassert solution(\"3 3\\n\") == \"7\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n1\n''') == '1'\n\nassert solution('''\n5 5\n1 5\n1 4\n2 3\n1 2\n''') == '5'\n"
    },
    {
        "number": 4468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"7\"\nassert solution(\"2 3\") == \"9\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"10\") == \"2\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '2'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '1'\n\n\n\"\"\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"1\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\""
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '0'\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\nassert solution() == \"1\"\nassert solution() == \"1\"\nassert solution() == \"1\"\nassert solution() == \"2\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\nassert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '2'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n''') == '1'\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\n''') == '0'\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == '1'\nassert solution('10') == '0'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6''') == '6'\nassert solution('''1\n2\n3\n4\n5\n6''') == '-1'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('10') == '4'\nassert solution('25') == '6'\nassert solution('30') == '6'\nassert solution('14') == '6'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"4\"\nassert solution(\"25\") == \"6\"\nassert solution(\"30\") == \"6\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"72\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1\n2\n3\n''') == \"1\"\nassert solution('''\n2\n3\n2\n''') == \"0\"\nassert solution('''\n1\n1\n1\n''') == \"0\"\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n''') == \"0\"\nassert solution('''\n100\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n1000000000000000000\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"72\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\"\nassert solution(\"1\\n10\") == \"4\"\nassert solution(\"1\\n25\") == \"6\"\nassert solution(\"1\\n30\") == \"6\"\nassert solution(\"1\\n14\") == \"6\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n5\n10\n30\n20\n5\n''') == '0'\n\nassert solution('''\n1\n5\n6\n7\n8\n9\n''') == '6'\n\nassert solution('''\n1\n30\n20\n15\n10\n8\n''') == '6'\n\nassert solution('''\n1\n30\n20\n15\n10\n5\n''') == '6'\n\nassert solution('''\n1\n30\n20\n15\n10\n8\n7\n''') == '6'"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n10\n25\n30\n14\n27\n1000000000000000000\n''') == '6'\n"
    },
    {
        "number": 4470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n\n5\n1\n3\n4\n5\n7\n''') == '4'\n\nassert solution('''\n\n5\n1\n4\n6\n8\n7\n''') == '6'\n\nassert solution('''\n\n5\n1\n2\n3\n5\n''') == '-1'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'YES'\nassert solution('''\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'NO'\nassert solution('''\n5\n2 2 1 1 2\n4\n1 1 2 1\n2\n10 11\n1\n100\n\n''') == 'YES'\nassert solution('''\n5\n1 1 2 1 2\n4\n1 1 2 1\n2\n10 11\n1\n100\n\n''') == 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n2\n2 1 3\n2 1 2 1\n2\n11 11\n1''') == 'YES'\nassert solution('''2\n2\n1 1 3\n2 1 2 1\n2\n11 11\n1''') == 'YES'\nassert solution('''2\n2\n1 1 3\n2 1 2 1\n2\n11 11\n1''') == 'NO'\nassert solution('''2\n2\n1 1 3\n2 1 2 1\n2\n11 11\n1''') == 'NO'"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('2') == 'YES'\nassert solution('5') == 'YES'\nassert solution('10') == 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'YES'\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'YES'\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'YES'\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'YES'\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n''') == 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\nassert solution() == \"YES\"\nassert solution() == \"NO\"\n\n'''\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 1 2\n3\n11 11\n1''') == 'YES'\nassert solution('''2\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1''') == 'NO'\nassert solution('''2\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1''') == 'YES'\nassert solution('''2\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1''') == 'NO'\n\n'''\n"
    },
    {
        "number": 4471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n\nimport math\nfrom collections import deque\nclass Solution:\n    def solution(self, stdin):\n        def check(a,n):\n            queue=deque()\n            queue.append((0,0,0))\n            while queue:\n                x,y,a=queue.popleft()\n                if x==n:\n                    if y==n:\n                        return True\n                    if a==0:\n                        return False\n                    else:\n                        return True\n                if y==0 and a>0:\n                    if (x+1,y,a+1) in queue:\n                        queue.append((x+1,y,a+1))\n                    if (x-1,y,a-1) in queue:\n                        queue.append((x-1,y,a-1))\n                else:\n                    if (x+1,y,a) in queue:\n                        queue.append((x+1,y,a))\n                    if (x-1,y,a) in queue:\n                        queue.append((x-1,y,a))\n                    if (x,y+1,a) in queue:\n                        queue.append((x,y+1,a))\n                    if (x,y-1,a) in queue:\n                        queue.append((x,y-1,a))\n        def backtrack(a,n,x,y):\n            if x==n and y==n:\n                return True\n            if check(a,n)==False:\n                return False\n            else:\n                if x==n:\n                    if y==n-1:\n                        if a==0:\n                            if backtrack(a+2,n,x+1,y)==True:\n                                return True\n                        else:\n                            if backtrack(a-1,n,x+1,y)==True:\n                                return True\n                    elif a==0:\n                        return True\n                    else:\n                        return False\n                else:\n                    if a==0:\n                        return False\n                    else:\n                        return True\n        if len(stdin)==3:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n            y=a[1]\n            if backtrack(a[0],n,x,y)==True:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if len(stdin)==4:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n            y=a[1]\n            if backtrack(a[0],n,x,y)==True:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if len(stdin)==5:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n            y=a[1]\n            if backtrack(a[0],n,x,y)==True:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if len(stdin)==6:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n            y=a[1]\n            if backtrack(a[0],n,x,y)==True:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if len(stdin)==7:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n            y=a[1]\n            if backtrack(a[0],n,x,y)==True:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if len(stdin)==8:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n            y=a[1]\n            if backtrack(a[0],n,x,y)==True:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if len(stdin)==9:\n            n=int(stdin[0])\n            a=list(map(int,stdin[1].split()))\n            x=a[0]\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\nzcabd\ndbacz\n\n''') == '0'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nabacaba\\nbacabaa\") == \"4\"\nassert solution(\"10\\nzcabd\\dbacz\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '7\\nabacaba\\nbacabaa\\n') == '4'\nassert solution(\n    '5\\nzcabd\\dbacz\\n') == '0'\n\n'''\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\nzcabd\ndbacz\n''') == 0\n\nassert solution('''\n6\nzcabd\ndbacz\naczb\n''') == 4\n\nassert solution('''\n5\nabacaba\nbacabaa\n''') == 4\n\nassert solution('''\n7\nabacaba\nbacabaa\naczb\n''') == 4\n\nassert solution('''\n5\nabacaba\nbacabaa\naczb\n''') == 4"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 4\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n7\nabacaba\nbacabaa\n''') == \"4\"\nassert solution(\n'''\n5\nzcabd\ndbacz\n''') == \"0\"\nassert solution(\n'''\n7\nabcdefghijklmnopqrstuvwxyz\nkimmyjoseph\n''') == \"6\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0'\nassert solution('7') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7\nabacaba\nbacabaa''') == '4'\nassert solution('''5\nzcabd\ndbacz\n''') == '0'"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n'\n    'abacaba\\n'\n    'bacabaa\\n'\n) == '4'\n"
    },
    {
        "number": 4472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7\nabacaba\nbacabaa''') == \"4\"\nassert solution('''5\nzcabd\ndbacz\n\n''') == \"0\"\nassert solution('''3\nabacaba\nbacabaa\n\n''') == \"2\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '198'\nassert solution('''\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '2999999997'\nassert solution('''\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '0'\nassert solution('''\n1 1 999999999\n1 1 999999999\n''') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\\\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\"\n) == \"8\"\nassert solution(\n    \"\"\"\\\n6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\"\n) == \"198\"\nassert solution(\n    \"\"\"\\\n6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\"\n) == \"2999999997\"\nassert solution(\n    \"\"\"\\\n6\n5 2 3\n100 1 4\n1 1000000000 5\n1 1 1000000000\n1 1 999999999\n\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\\\n6\n5 2 3\n100 1 4\n1 10 5\n1 1 1000000000\n1 1 999999999\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '8'\nassert solution('1 10 5') == '198'\nassert solution('1 1 1000000000') == '2999999997'\nassert solution('1 1 999999999') == '0'\nassert solution('1 1 999999999') == '1'"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\"\n) == \"8\"\nassert solution(\n\"\"\"\n3 5 6\n1 1 1\n1 1 10\n1 1 100\n1 2 50\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n5 5 4\n1 1 1\n1 1 10\n1 1 100\n1 2 50\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n5 5 4\n1 1 1\n1 1 10\n1 1 100\n1 2 50\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n5 5 4\n1 1 1\n1 1 10\n1 1 100\n1 2 50\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '8'\nassert solution('''\n2 2 3\n5 1 4\n1 1000000000 1\n1 1000000000 1\n''') == '198'\nassert solution('''\n5 2 3\n1 10 5\n1 1000000000 1\n1 1000000000 1\n''') == '2'\nassert solution('''\n5 2 3\n10 1 4\n1 1000000000 1\n1 1000000000 1\n''') == '10'\nassert solution('''\n5 2 3\n5 1 4\n1 1000000000 1\n1 1000000000 1\n''') == '0'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 1000000000\n1 1 999999999''') == '8'\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1 1000000000\n1 1 1000000000\n1 1 999999999''') == '198'\nassert solution('''6\n5 2 3\n100 1 4\n1 1000000000\n1 1 1000000000\n1 1 999999999\n1 1 999999999''') == '-17'\nassert solution('''6\n5 2 3\n100 1 4\n1 10000 1000000\n1 1 1000000000\n1 1 999999999\n1 1 999999999''') == '2999999997'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '8'\nassert solution('''\n4 1 1000000000\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n''') == '0'\nassert solution('''\n1 1 999999999\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''') == '1'\nassert solution('''\n5 2 3\n100 1 4\n1 1000000000 5\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n''') == '198'\nassert solution('''\n5 2 3\n100 1 4\n1 1000000000 5\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n''') == '0'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '198'\nassert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 999999999\\n1 1 999999999') == '2999999997'\nassert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\\n1 1 999999999') == '0'\nassert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\\n1 1 999999999') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''') == '8'\nassert solution('''\n10 2 10\n10 1 10\n1 1 10\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''') == '1'\nassert solution('''\n1 1 1\n1 1 1\n''') == '0'\nassert solution('''\n1 1 999999999\n1 1 999999999\n''') == '1'\nassert solution('''\n1 1 999999999\n1 1 999999999\n''') == '1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == \"8\"\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1000000000 1000000000''') == \"198\"\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1000000000 1000000000''') == \"2999999997\"\nassert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1000000000 1000000000''') == \"0\"\nassert solution('''5\n2 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1000000000 1000000000''') == \"1\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3\\n4') == '3'\nassert solution('1\\n6\\n9\\n30\\n40\\n100\\n1000\\n10000') == '9'\nassert solution('1\\n19\\n20') == '20'\nassert solution('1\\n7') == '7'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"1000000000000000000\") == \"19683\"\nassert solution(\"1\\n8\") == \"1350851717672992089\"\nassert solution(\"1\\n20\") == \"19683\""
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '3'\nassert solution('6\\n') == '9'\nassert solution('13\\n') == '27'\nassert solution('14\\n') == '6561'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '3'\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('6') == '9'\nassert solution('13') == '27'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '3'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '9'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '13'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '27'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '6561'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\nassert solution('2\\n3\\n4\\n5\\n') == '5'\nassert solution('1\\n') == '1'"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '6'\nassert solution('7') == '8'\nassert solution('10') == '9'\nassert solution('123456789') == '1234'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('6') == '9'\nassert solution('13') == '13'\nassert solution('14') == '27'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '3'\nassert solution('''\n3\n4\n7\n10\n12\n11\n''') == '12'\nassert solution('''\n3\n2\n13\n15\n''') == '10'\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n''') == '10'\nassert solution('''\n4\n3\n2\n1\n''') == '3'\n"
    },
    {
        "number": 4474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n7\\n19\\n10\\n') == '11'\nassert solution('4\\n21\\n43\\n20\\n') == '29'\nassert solution('6\\n10\\n8\\n3\\n5\\n2\\n') == '17'\nassert solution('10\\n10000000000000\\n3\\n999999\\n10\\n') == '90'\nassert solution('1000000000000000000\\n1000000000000000\\n2\\n') == '999999'"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == \"77\"\nassert solution('''\n10\n1 1 1\n1 1 1\n1 1 1\n''') == \"1\"\nassert solution('''\n1\n1 1\n1 1\n''') == \"1\"\nassert solution('''\n10\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == \"177177\"\nassert solution('''\n10\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == \"999999999000000000\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77777777777777777'\nassert solution('''\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '999999999000000000'"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 10 8 5 3\n''') == \"70\"\nassert solution('''\n12 8 8 7 2\n''') == \"77\"\nassert solution('''\n12343 43 4543 39 123212\n''') == \"999999999000000000\"\nassert solution('''\n1000000000 1000000000 1 1 1\n''') == \"999999999000000000\"\nassert solution('''\n10 11 2 1 5\n''') == \"55\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\nassert solution(\"10 11 2 1 5\") == \"55\"\nassert solution(\"10 11 9 1 10\") == \"77\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '70'\nassert solution('''\n1000000000000000 1000000000000000 1000000000000000 1000000000000000 1000000000000000 1000000000000000\n''') == '999999999999900000000000000'\nassert solution('''\n10 11 2 1 5\n10 11 9 1 10\n''') == '55'\nassert solution('''\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77'\nassert solution('''\n11 11 2 1 5\n12 343 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n''') == '177177'\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    10 10 8 5 3\n    12 8 8 7 2\n    12343 43 4543 39 123212\n    1000000000 1000000000 1 1 1\n    1000000000 1000000000 1 1 1000000000\n    10 11 2 1 5\n    10 11 9 1 10\n''') == '77', 'First Test Case'\n\nassert solution('''\n    12 343 43 45 43 123212\n    1000000000 1000000000 1 1 1\n    1000000000 1000000000 1 1 1000000000\n    10 11 2 1 5\n    10 11 9 1 10\n''') == '55', 'Second Test Case'\n\nassert solution('''\n    12343 43 45 43 123212\n    1000000000 1000000000 1 1 1\n    1000000000 1000000000 1 1 1000000000\n    10 11 2 1 5\n    10 11 9 1 10\n''') == '77', 'Third Test Case'\n\nassert solution('''\n    1000000000 1000000000 1 1 1\n    1000000000 1000000000 1 1 1000000000\n    10 11 2 1 5\n    10 11 9 1 10\n''') == '10', 'Fourth Test Case'"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77'\nassert solution('''\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77'\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '70'\nassert solution('''\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '55'\nassert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77'\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 10 8 5 3''') == '70'\nassert solution('''12 8 8 7 2''') == '77'\nassert solution('''12343 43 4543 39 123212''') == '999999999000000000'\nassert solution('''1000000000 1000000000 1 1 1''') == '999999999'\nassert solution('''10 11 2 1 5''') == '55'"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '77'\nassert solution('''\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '55'\n"
    },
    {
        "number": 4475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == '70'\nassert solution('12') == '77'\nassert solution('12343') == '177177'\nassert solution('1000000000') == '999999999000000000'\nassert solution('1000000000') == '999999999'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\nassert solution('9 3') == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 3\n10 10\n2 4\n7 4\n9 3''') == \"1\"\nassert solution('''3\n2 2\n6 3\n3 3''') == \"0\"\nassert solution('''1\n1 1\n1 1''') == \"0\"\nassert solution('''2\n2 2\n2 2\n1 1''') == \"1\"\nassert solution('''5\n4 5\n6 8\n7 6\n3 4\n5 1''') == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2 3\") == \"1\\n0\"\nassert solution(\"2 3\\n10 10\") == \"2\\n1\"\nassert solution(\"2 4\\n7 4\") == \"2\\n0\"\nassert solution(\"9 3\\n\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"9 3\") == \"2\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 3\n10 10\n2 4\n7 4\n9 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n3 2\n3 9\n8 5\n4 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n2 3\n10 10\n2 4\n7 4\n9 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n2 3\n2 2\n4 5\n7 5\n4 7\n\"\"\") == \"1\"\nassert solution(\"\"\"\n7\n1 1\n1 1\n2 1\n4 1\n4 1\n5 1\n1 1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n5 4\n''') == \"0\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3\\n1\\n1\\n3\\n3\\n') == '1'\nassert solution('1\\n2\\n1\\n2\\n2\\n3\\n') == '0'\nassert solution('2\\n4\\n1\\n3\\n1\\n2\\n') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '1'\nassert solution('''\n3 10\n20 30\n5 40\n15 45\n25 50\n35 60\n35 65\n37 69\n''') == '0'\n"
    },
    {
        "number": 4476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1\\n'"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '13'"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n77777\n1\n77\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n5\n22\n22\n9988\n11\n77777\n1\n\"\"\") == \"90\"\n\nassert solution(\"\"\"\n5\n22\n22\n9988\n11\n77777\n1\n1\n\"\"\") == \"11\""
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n22\n999\n''') == '13'\nassert solution('''\n1\n1\n666\n''') == '1'\nassert solution('''\n1\n11\n1111\n''') == '5'\nassert solution('''\n1\n22\n2222\n''') == '6'\nassert solution('''\n1\n22\n2222\n''') == '6'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n22\n9999\n1\n777\n''') == '13'\nassert solution('''\n3\n1\n1\n1\n''') == '2'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == \"13\"\nassert solution('2') == \"1\"\nassert solution('6') == \"90\"\nassert solution('3') == \"1\"\nassert solution('11') == \"13\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '0'\nassert solution('22') == '1'\nassert solution('9999') == '3'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n22\n1111\n''') == '1'\nassert solution('''\n5\n12\n1111\n22\n2222\n''') == '4'\nassert solution('''\n10\n9\n1111\n22\n2222\n22222\n''') == '9'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n2\\n3') == '3'\nassert solution('4\\n22\\n9999\\n1\\n777\\n') == '9'\nassert solution('5\\n1234\\n1234\\n1234\\n1234\\n1234\\n') == '10'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '7'"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n22\n9999\n1\n777\n''') == '13'\n"
    },
    {
        "number": 4477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n11') == '1'\nassert solution('11') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('33333') == '6'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"6\") == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 2 2 2\n5\n2 2 2 2 2''') == 'YES'\nassert solution('''4\n4 4 4 4''') == 'NO'\nassert solution('''1\n2\n5''') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n''') == 'YES'\nassert solution('''3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n''') == 'NO'\nassert solution('''4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'YES'\nassert solution('''5\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'YES'\nassert solution('''6\n2\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"YES\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('6') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('6') == 'YES'\n"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('6') == 'NO'"
    },
    {
        "number": 4478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n''') == 'YES'\n\nassert solution('''\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n''') == 'NO'\n\nassert solution('''\n4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'YES'\n\nassert solution('''\n2\n1\n1\n''') == 'YES'\n\nassert solution('''\n2\n1\n1\n''') == 'YES'\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n\"\"\""
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"[4,2,3]\") == \"5\"\nassert solution(\"[3,-1,0,2]\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\") == \"13\"\n\n\n\"\"\"\n\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        # sort A in reverse.\n        A.sort(key=lambda x: -x)\n        # count length of negatives, n\n        n = len([x for x in A if x < 0])\n        # when n > K, invert the 1st K elements\n        if n > K:\n            for i in range(n - K):\n                A[0] = -A[0]\n        # since all elements are positive, just reverse the array\n        # and reset the last k elements to 0\n        return sum(A)"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n2\n3''') == \"5\"\nassert solution('''3\n-1\n0\n2''') == \"6\"\nassert solution('''2\n-3\n-1\n5\n-4''') == \"13\"\nassert solution('''2\n3\n-1\n5\n-4''') == \"10\"\nassert solution('''1\n-1\n0\n2''') == \"3\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '13'"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'\nassert solution('''\n5\n3\n1\n2\n4\n''') == '6'"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4,2,3\") == 5\nassert solution(\"3,-1,0,2\") == 6\nassert solution(\"2,-3,-1,5,-4\") == 13"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('[-5,0,-2,3]') == 5\nassert solution('[3,-1,0,2]') == 6\nassert solution('[2,-3,-1,5,-4]') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nA = [4,2,3]\nK = 1\n''') == 5\nassert solution('''\nA = [3,-1,0,2]\nK = 3\n''') == 6\nassert solution('''\nA = [2,-3,-1,5,-4]\nK = 2\n''') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"[-1, -2, -3]\", 1) == 6\nassert solution(\"[3,-1,0,2]\", 3) == 6\nassert solution(\"[2,-3,-1,5,-4]\", 2) == 13"
    },
    {
        "number": 4479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nInput: \nA = [4,2,3], K = 1\nOutput: 5\nExplanation: Choose indices (1,) and A becomes [4,-2,3].\n\nInput: \nA = [3,-1,0,2], K = 3\nOutput: 6\nExplanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].\n\nInput: \nA = [2,-3,-1,5,-4], K = 2\nOutput: 13\nExplanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].\n''') == '13'"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([0,2,1,-6,6,-7,9,1,2,0,1]) == 'true'\nassert solution([0,2,1,-6,6,7,9,-1,2,0,1]) == 'false'\nassert solution([3,3,6,5,-2,2,5,1,-9,4]) == 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\")\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\")\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\")\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == 'true'\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == 'false'\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([0,2,1,-6,6,-7,9,1,2,0,1]) == 'true'\nassert solution([0,2,1,-6,6,7,9,-1,2,0,1]) == 'false'\nassert solution([3,3,6,5,-2,2,5,1,-9,4]) == 'true'\nassert solution([-10, 10, -20, 10, -30, 10, -50, 10, -60, 10]) == 'false'\nassert solution([3,3,6,5,-2,2,5,1,0,0,1]) == 'true'"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == 'true'\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == 'false'\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == 'true'\nassert solution('[2,2,1,1,1,1]') == 'true'\nassert solution('[3,2,1,1,1,1]') == 'false'\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n-10^4    -10^4    -10^4\n1,3,5    2,3    2,5\n2,3,5    3,3    3,3\n2,3,5    1,1    1,1\n2,3,5    1,5    1,5\n2,3,5    1,1    2,3\n3,3,6    1,5    2,3\n3,3,6    1,5    1,5\n3,3,6    1,1    1,5\n4,3,6    1,1    1,1\n4,3,6    1,5    1,5\n4,3,6    1,1    2,3\n5,3,6    1,5    2,3\n5,3,6    1,1    1,5\n5,3,6    1,1    1,1\n6,3,6    1,1    1,5\n6,3,6    1,5    1,5\n6,3,6    1,1    2,3\n7,3,6    1,5    2,3\n7,3,6    1,1    1,5\n7,3,6    1,1    1,1\n8,3,6    1,1    1,1\n8,3,6    1,5    1,5\n8,3,6    1,1    2,3\n9,3,6    1,5    2,3\n9,3,6    1,1    1,5\n9,3,6    1,1    1,1\n10,3,6    1,5    1,5\n10,3,6    1,1    2,3\n11,3,6    1,5    2,3\n11,3,6    1,1    1,5\n11,3,6    1,1    1,1\n''') == 'true'\n\nassert solution('''\n-10^4    -10^4    -10^4\n1,3,5    2,3    2,5\n2,3,5    3,3    3,3\n2,3,5    1,1    1,1\n2,3,5    1,5    1,5\n2,3,5    1,1    2,3\n3,3,6    1,5    2,3\n3,3,6    1,5    1,5\n3,3,6    1,1    1,5\n4,3,6    1,1    1,1\n4,3,6    1,5    1,5\n4,3,6    1,1    2,3\n5,3,6    1,5    2,3\n5,3,6    1,1    1,5\n5,3,6    1,1    1,1\n6,3,6    1,5    1,5\n6,3,6    1,1    2,3\n6,3,6    1,5    2,3\n7,3,6    1,5    2,3\n7,3,6    1,1    1,5\n7,3,6    1,1    1,1\n8,3,6    1,5    1,5\n8,3,6    1,1    1,5\n8,3,6    1,1    1,1\n9,3,6    1,5    1,5\n9,3,6    1,1    1,5\n9,3,6    1,1    1,1\n10,3,6    1,5    1,5\n10,3,6    1,1    2,3\n11,3,6    1,5    2,3\n11,3,6    1,1    1,5\n11,3,6    1,1    1,1\n''') == 'true'\n\nassert solution('''\n-10^4    -10^4    -10^4\n1,3,5    2,3    2,5\n2,3,5    3,3    3,3\n2,3,5    1,1    1,1\n2,3,5    1,5    1,5\n2,3,5    1,1    2,3\n3,3,6    1,5    2,3\n3,3,6    1,5    1,5\n3,3,6    1,1    1,5\n4,3,6    1,5    1,5\n4,3,6    1,1    2,3\n5,3,6    1,5    2,3\n5,3,6    1,1    1,5\n5,3,6    1,1    1,1\n6,3,6    1,5    1,5\n6,3,6    1,1    2,3\n6,3,6    1,5    2,3\n7,3,6    1,5    2,3\n7,3,6    1,1    1,5\n7,3,6    1,1    1,1\n8,3,6    1,5    1,5\n8,3,6    1,1    1,5\n8,3,6    1,1    1,1\n9,3,6    1,5    1,5\n9,3,6    1,1    1,5\n9,3,6    1,1    1,1\n10,3,6    1,5    1,5\n10,3,6    1,1    2,3\n11,3,6    1,5    2,3\n11,3,6    1,1    1,5\n11,3,6    1,1    1,1\n''') == 'false'\n\nassert solution('''\n-10^4    -10^4    -10^4\n1,3,5    2,3    2,5\n2,3,5    3,3    3,3\n2,3,5    1,1    1,1\n2,3,5    1,5    1,5\n2,3,5    1,1    2,3\n3,3,6    1,5    2,3\n3,3,6    1,5    1,5\n3,3,6    1,1    1,5\n4,3,6    1,5    1,5\n4,3,6    1,1    2,3\n5,3,6    1,5    2,3\n5,3,6    1,1    1,5\n5,3,6    1,1    1,1\n6,3,6    1,5    1,5\n6,3,6    1,1    2,3\n6,3,6    1,5    2,3\n7,3,6    1,5    2,3\n7,3,6    1,1    1,5\n7,3,6    1,1    1,1\n8,3,6    1,5    1,5\n8,3,6    1,1    1,5\n8,3,6    1,1    1,1\n9,3,6    1,5    "
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'True'\n\n'''\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == \"true\"\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == \"false\"\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == \"true\"\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == \"false\"\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == \"true\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n0 2 1\n\"\"\") == \"true\"\nassert solution(\"\"\"\n0 2 1\n\"\"\") == \"false\"\nassert solution(\"\"\"\n-1 -1 -1 -1\n\"\"\") == \"false\"\nassert solution(\"\"\"\n-1 -1 -1 1\n\"\"\") == \"false\"\nassert solution(\"\"\"\n1 2 1\n\"\"\") == \"true\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"true\"\n\n\"\"\",\n\nfrom typing import List\n\nfrom utils import *\n\nsolution = Solution()\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\nbeet\nvet''') == 'beet and vet are written on two sheets each, while beat, bed, and bet are written on one vote each.'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"beet and vet\"\nassert solution(input()) == \"beet and vet\"\nassert solution(input()) == \"beet and vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet') == 'beet and vet'\nassert solution('5\\nhehe\\nlove\\nlove') == 'love and hehe'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\nhahaha\nbeet\nvet\nbeet\n''') == 'beet,vet,hahaha'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\nbeat') == 'beat and vet'\nassert solution('7\\nvet') == 'beat and vet'\nassert solution('7\\nbeet') == 'beat and vet'\nassert solution('7\\nbed') == 'beat and vet'\nassert solution('7\\nvet') == 'beat and vet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet\"\nprint(solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\"))\n\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\nbeet\nvet\nbeet\n\n\"\"\") == \"beet and vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beat vet beet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('5') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet') == 'beat vet beet beet vet beat'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"8\"\nassert solution(\"2 5 7\") == \"10\"\nassert solution(\"4 2 7\") == \"10\""
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 8') == '8'\nassert solution('2') == '0'\nassert solution('6') == '6'"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '8'\nassert solution('10') == '16'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('-10') == '10'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n7\n8\n10\n6\n7''') == '10'\nassert solution('''3\n1\n2\n5\n''') == '9'\nassert solution('''4\n1\n2\n3\n''') == '10'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"4 8\") == \"8\""
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '8'\nassert solution('5') == '15'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '7'\nassert solution('5') == '14'\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\nassert solution(\"3\\n4 8\") == \"10\"\nassert solution(\"4\\n4 8\") == \"6\"\nassert solution(\"5\\n4 8\") == \"9\"\nassert solution(\"6\\n4 8\") == \"7\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '8'\nassert solution('3') == '10'\nassert solution('4') == '11'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1234\n150\n100''') == '84'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1234\\n150\\n100') == '84'\nassert solution('1234\\n2\\n1') == '8'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\nassert solution('100') == '84'\nassert solution('1234') == '84'\nassert solution('1230') == '42'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1234\n150\n100''') == '84'\nassert solution('''1\n2\n2''') == '4'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\nassert solution('100') == '84'"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1234\\n150\\n100') == '84'\n\"\"\"\n\nx, A, B = input().split('\\n')\nx = int(x)\nA = int(A)\nB = int(B)\nsum = x - A\n\nwhile sum >= 0:\n    if sum >= B:\n        sum -= B\n    else:\n        sum = 0\n        \n        \nprint(sum)"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\nassert solution('100') == '84'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1234') == '84'\nassert solution('150') == '1084'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"8\"\n\n--------------------------------------------------------------------------------\n\nLet's say we have:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\nThen,\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is even and the number of monkeys is odd? How many arrangements are there?\n\nsolution(2) = 5\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is odd and the number of monkeys is even? How many arrangements are there?\n\nsolution(3) = 10\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is even and the number of monkeys is even? How many arrangements are there?\n\nsolution(4) = 4\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is even and the number of monkeys is odd? How many arrangements are there?\n\nsolution(5) = 7\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is odd and the number of monkeys is even? How many arrangements are there?\n\nsolution(6) = 5\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is odd and the number of monkeys is odd? How many arrangements are there?\n\nsolution(7) = 3\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nWhat if the number of dogs is odd and the number of monkeys is odd? How many arrangements are there?\n\nsolution(8) = 3\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nHow many arrangements are there?\n\nThe answer is always even, because it is a multiple of 8, since there are 8 arrangements of an arrangement that has A and B; 4 arrangements of an arrangement that has C and D, and 6 arrangements of an arrangement that has D and C.\n\nLet's see this:\n\ndogs = \"AB\"\nmonkeys = \"CD\"\n\n\"AB\" -> \"CD\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\" -> \"DC\"\n\nis an arrangement that is common to all of the above arrangements.\n\nSo the number of arrangements is 8.\n\nSOLUTION:"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '8'\nassert solution('5 5') == '76'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '8'\nassert solution('3 3') == '20'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '8'\n\n\"\"\"\n\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"8\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"8\"\nassert solution(\"2 2\") == \"8\"\nassert solution(\"3 4\") == \"18\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"8\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '8'\n\"\"\"\n\nfrom math import comb\n\nN, M = map(int, stdin.readline().split())\nprint(comb(N+M-2, N-1))\n\n\n\"\"\"\n\u8fd9\u91cc\u4e3b\u8981\u7528\u4e8e\u663e\u793a\u6240\u6709\u7684\u5b57\u7b26\u4e32\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '8'\nassert solution('2 2') == '8'\n"
    },
    {
        "number": 4484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '8'\nassert solution('4 4') == '36'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2\n1 2\n2 3\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"\n10 1\n1 2\n2 3\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n2 3\n4 5\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"\n8 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n2 3\n4 5\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n8 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n2 3\n4 5\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"POSSIBLE\"\nassert solution(\"3 3\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2\n1 2\n2 3\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"4 2\n1 1\n2 1\n3 3\n4 4\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"4 2\n1 2\n3 2\n4 2\n5 3\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2\n1 2\n2 3\n\"\"\") == \"POSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\") == \"POSSIBLE\"\nassert solution(\"3 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == 'POSSIBLE'\nassert solution('10 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == 'POSSIBLE'\nassert solution('7 3') == 'IMPOSSIBLE'\nassert solution('5 2') == 'IMPOSSIBLE'\nassert solution('5 3') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'POSSIBLE'\nassert solution('3 3') == 'IMPOSSIBLE'\nassert solution('2 2') == 'POSSIBLE'\nassert solution('5 5') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == 'POSSIBLE'"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"acdf\") == \"acdf\"\nassert solution(\"bcd\") == \"bcd\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('s') =='s'\nassert solution('t') == 't'\nassert solution('n') == 'n'\nassert solution('t') == 't'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"atcoder\") == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('atcoder') == 'acdr'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('atcoder') == 'acd'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcde'\n'''"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abcdefgh') == 'abcdefgh'\nassert solution('abcdefghij') == 'abcdefghij'\nassert solution('abcdefghijkl') == 'abcdefghijkl'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\n"
    },
    {
        "number": 4486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(solution(input()))"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('gora boye') == 'NO'\n'''\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('abcd') == 'NO'\n\"\"\"\n\n\"\"\"\nclass Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('bob and i like to eat apple') == 'NO'\nassert solution('rng and a') == 'NO'\nassert solution('rng and x') == 'YES'\nassert solution('joe and a') == 'YES'\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('eat python') == 'NO'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('tux') == 'NO'\nassert solution('ab') == 'NO'\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"rng\") == \"YES\"\nassert solution(\"abca\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"rng gorilla apple\"\n) == \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('tiger banana elephant') == 'NO'\nassert solution('cat dog dog cat') == 'NO'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"aa aa\") == \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng is makalaka') == 'NO'"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"LESS\"\nassert solution(\"3\") == \"EQUAL\"\nassert solution(\"5\") == \"GREATER\"\nassert solution(\"1\") == \"LESS\"\nassert solution(\"-1\") == \"GREATER\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('36') == 'GREATER','solution([36])'\nassert solution('24') == 'LESS','solution([24])'\n\n\"\"\"\nA,B = map(int, input().split())\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n5') == 'LESS'\nassert solution('-1\\n-2') == 'EQUAL'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == 'LESS'\nassert solution('1') == 'GREATER'\nassert solution('2') == 'EQUAL'\nassert solution('3') == 'LESS'\nassert solution('4') == 'GREATER'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n10') == 'GREATER'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'GREATER'\nassert solution('2') == 'LESS'\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\") == \"LESS\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"LESS\", \"1\\n2\"\nassert solution(\"1\\n3\") == \"GREATER\", \"1\\n3\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('36') == 'GREATER'\nassert solution('24') == 'LESS'\nassert solution('1') == 'EQUAL'"
    },
    {
        "number": 4488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'LESS'\nassert solution('1') == 'GREATER'\nassert solution('3') == 'EQUAL'\n\nprint(solution('1'))\nprint(solution('2'))\nprint(solution('3'))\nprint(solution('4'))"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\napple\norange\napple\n1\ngrape\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"a\") == \"\"\nassert solution(\"1\") == \"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\napple\norange\napple\n1\ngrape\n''') == '2'\nassert solution('''3\napple\norange\napple\n1\ngrape\n''') == '1'\nassert solution('''4\napple\norange\napple\n1\ngrape\n''') == '3'\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('3 1') == '2'\nassert solution('4') == '2'\nassert solution('3 1 2') == '2'\nassert solution('4') == '2'"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"A\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"A\"\nassert solution(\"T\") == \"C\""
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('A') == 'T', 'Should return T'\nassert solution('C') == 'G', 'Should return G'\nassert solution('G') == 'C', 'Should return C'\nassert solution('T') == 'A', 'Should return A'\nassert solution('X') == 'X', 'Should return X'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n"
    },
    {
        "number": 4490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"14\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '14'\nassert solution('3') == '5'\nassert solution('5') == '14'"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\nassert solution('10\\n1 1 1 1 1') == '5'\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"10\") == \"10\""
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('5') == '15'\nassert solution('1 0 2') == '3'\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\nassert solution(\"2\\n4 4 4 4 4\") == \"1\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2\\n1 2\\n1 2\\n\") == \"14\"\nassert solution(\"2\\n2 1\\n1 2\\n\") == \"2\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"14\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1\n''') == '14'\nassert solution('''5\n4 4 1 3 1\n1 2 2 2 1\n''') == '8'\nassert solution('''3\n1 2 2\n1 2 1\n''') == '3'\n"
    },
    {
        "number": 4491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"2 3 2 4 1\") == \"14\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n2 3\n2 4\n''') == '1'\nassert solution('''2\n2 3\n2 4\n''') == '1'\nassert solution('''5\n2 3\n1 4\n0 3\n1 2\n''') == '1'\n\nimport sys\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n2 2 2\n''') == '1'\nassert solution('''\n4 4\n1 1 1 1\n''') == '4'\nassert solution('''\n10 10\n
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\nassert solution(\"5 6\\n2 2 2 4 4\") == \"3\"\nassert solution(\"10 10\\n2 2 2 4 4 4 4 4 4\") == \"4\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 3') == '2'\nassert solution('5 5') == '2'\nassert solution('15 5') == '1'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 3\n2 2 2\n\n''') == '1'\n\nassert solution('''3 3\n2 2 2\n\n''') == '1'\n\nassert solution('''10 3\n3 2 3 2 2 3 2 3 2 2 2 2\n\n''') == '2'\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"10 10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    2 2 2\n    ''') == '1'\n'''\n\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"6 5\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"6 7\") == \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == \"1\"\n\"\"\"\n\nN, x = list(map(int, input().split()))\narr = list(map(int, input().split()))\nresult = 10 ** 9\n\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        result = min(result, max(arr[i] - arr[j], 0) + 1)\n\nprint(result)\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\""
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1\\n') == 'Yes'\nassert solution('1 0 1\\n1 0 2\\n1 1 1\\n') == 'No'\n\n-----Hint-----\nIn this question, the problem is actually a 2-solver problem. \n\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 0\\n0 1 2\\n0 0 1\") == \"No\"\nassert solution(\"1 0 1\\n0 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n0 1 2\\n1 0 1\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 0 1\n2 1 2\n1 0 1\n''') == \"Yes\"\nassert solution('''\n1 0 1\n2 1 2\n1 0 1\n''') == \"Yes\"\nassert solution('''\n1 0 1\n2 1 2\n1 0 1\n''') == \"No\"\nassert solution('''\n2 1 2\n1 0 1\n1 0 1\n''') == \"Yes\""
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\nassert solution(\"3 3\\n3 3\\n3 3\\n\") == \"Yes\"\nassert solution(\"2 2\\n4 4\\n4 4\\n\") == \"Yes\"\nassert solution(\"2 2\\n2 2\\n2 2\\n\") == \"Yes\"\nassert solution(\"1 1\\n0 1\\n1 1\\n\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 1 1\\n2 1 2\\n1 1 1\") == \"No\"\nassert solution(\"0 1 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n2 1 2\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 0 1\n2 1 2\n1 0 1\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n1 0 1\n1 1 1\n1 1 1\n\"\"\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1''') == 'Yes'\nassert solution('''1 1 1\n2 1 2\n1 0 1''') == 'No'\nassert solution('''1 1 2\n2 1 2\n1 0 1''') == 'Yes'\nassert solution('''1 2 2\n2 2 2\n1 0 1''') == 'No'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'ARC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\n'''"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'ARC', \"Should be ARC\"\nassert solution('ARC') == 'ABC', \"Should be ABC\"\nprint(solution(input()))"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\""
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 2') == '2'\nassert solution('10 10 1') == '0'\nassert solution('7 8 7') == '3'\nassert solution('5 10 3') == '0'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4 2''') == '3'\nassert solution('''4 8 3''') == '3'\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 5 8\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"4 10 2\") == \"3\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3\n3\n3\n2\n4\n5\n8''') == \"3\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == '3'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"15 10 5\") == \"1\"\nassert solution(\"0 4 4\") == \"1\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"7 7 7\") == \"1\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"12 12 12\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"./sample_input_00.txt\") == \"3\"\nassert solution(\"./sample_input_01.txt\") == \"0\"\nassert solution(\"./sample_input_02.txt\") == \"2\"\n\nassert solution(\"./input.txt\") == \"9\""
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == 'Christmas'\nassert solution('7.5') == 'Christmas Eve'\nassert solution('7.5.5') == 'Christmas Eve Eve'\nassert solution('7.5.5.5') == 'Christmas Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Christmas\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"Christmas Eve\"\nassert solution(\"1\") == \"Christmas\"\nassert solution(\"2\") == \"Christmas Eve\"\nassert solution(\"3\") == \"Christmas Eve Eve\"\nassert solution(\"4\") == \"Christmas Eve Eve Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"December\"\nassert solution(\"23\") == \"Enero\"\nassert solution(\"22\") == \"Enero Enero\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12') == 'Christmas'\nassert solution('25') == 'Christmas'\nassert solution('22') == 'Christmas Eve Eve Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"25\") == \"Christmas\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('23') == 'Christmas Eve'\nassert solution('22') == 'Christmas Eve Eve'\nassert solution('21') == 'Christmas Eve Eve Eve'\nassert solution('20') == 'Christmas Eve Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\nstdin = input()\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Christmas\"\n\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\nassert solution('1000') == '0'\nassert solution('20') == '8'\nassert solution('10') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '4'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\"\nassert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '4'\nassert solution('12') == '2'\nassert solution('33') == '3'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('8') == '3'\nassert solution('3') == '0'\nassert solution('12') == '6'\nassert solution('18') == '4'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\nassert solution('5') == '2'\nassert solution('4') == '1'\nassert solution('3') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('8') == '4'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"25\") == \"1\"\nassert solution(\"15\") == \"0\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '2'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == 4, 'input does not match expected result'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4 7 9 3\"\"\") == \"Yes\"\nassert solution(\"\"\"4 7 4 5\"\"\") == \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('1 2 3 4') == 'No'\nassert solution('4 5 6 4') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('3 1 2') == 'No'\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"5 6 7 2\") == \"No\"\nassert solution(\"9 6 5 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1 1') == 'No'\nassert solution('3 2 4 1') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('1 2 3 4') == 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\""
    },
    {
        "number": 4498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('1 1 1 1') == 'Yes'\nassert solution('2 2 2 2') == 'No'\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nassert solution(\"test\") == \"T\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''atcoder\nbeginner\ncontest''') == 'ABC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nassert solution(\"pynative\") == \"Py\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nprint(solution(\"atcoder beginner contest\"))"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ATCODER') == 'ABC'\nassert solution('atcoder') == 'ABC'\nassert solution('ATCODE') == 'ABC'\nassert solution('ATCODER') == 'ABC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC', \"Wrong answer\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nassert solution('AtoCdEfGHiJklmnoPqrstUvWxyZ') == 'AXYZ'\nassert solution('AtCoDeFgHiJklmnoPqrstUvWxyZ') == 'AXYZ'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 10 30') == 'Yes'\nassert solution('20 100 120') == 'Yes'\nassert solution('50 50 50') == 'No'\nassert solution('0 0 0') == 'No'\nassert solution('0 0 0 0') == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('10 40 100') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 2 4') == 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''50 100 120''') == 'Yes'\nassert solution('''60 50 30''') == 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 100 120\") == \"Yes\"\nassert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 50 120\") == \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 120 100') == 'Yes'\nassert solution('50 10 20') == 'No'\nassert solution('0 0 0') == 'Yes'\nassert solution('100 100 100') == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"20 50 120\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 10 20\") == \"Yes\"\nassert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\n\"\"\"\n\na,b,c = list(map(int, input().split()))\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"20 20 20\") == \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"50 100 120\") == \"No\""
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '4 8\\n'\n    '7 9 8 9\\n'\n    '4 8 8 9\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n    '1 1 1 1\\n'\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 8') == '5'\n\"\"\"\n\nn, a = map(int, input().split())\nn = n + 1\nstdin = []\nfor i in range(n):\n    stdin.append(int(input()))\n\nn_cand = []\n\nfor i in range(2, n):\n    n_cand.append(i)\n\nn_cand = sorted(n_cand)"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 8\n7 9 8 9\n''') == '5'\nassert solution('''5 3\n1 2 3 4 5\n''') == '1'\n'''\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 8') == '5'\nassert solution('4 5') == '4'\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 8\n7 9 8 9\n''') == '5'\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"5\""
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"4 1\") == \"0\""
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 8') == '5'\nassert solution('3 4') == '2'\nassert solution('5 5') == '2'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n\") == \"5\"\nassert solution(\"6 4\\n\") == \"1\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '4 2 1 3'\nassert solution('4 5 6 7 8') == '8 7 6 5'\nassert solution('5 1 5 1 5') == '5 1 5 1 5'\nassert solution('5 1 5 1 5') == '5 1 5 1 5'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 1\\n') == '1 2 3 4'\nassert solution('4\\n1 2 3 4\\n') == '1 2 3 4'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n4\n1 2 3 4\n    \"\"\"\n    ) == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"2\") == \"1 3 2\"\nassert solution(\"4\") == \"1 3 2 1\""
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n3\n4\n4\n4\n5\n5\n6\n6\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4 2 1 3\""
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('6\\n2 5 3 1 4 2') == '6 3 2 1 4 5'\n\n--------------------------------------\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('6\\n2 5 3 1 4 2') == '6 3 2 1 4 5'\n\n--------------------------------------\n\nfrom itertools import accumulate\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        seq = list(map(int, stdin.split()[1:]))\n\n        # Build the sequence in reverse\n        seq.reverse()\n\n        # Accumulate the total\n        acc = list(accumulate(seq))\n\n        # The last element of the sequence\n        last = acc[-1]\n\n        # The rightmost element of the sequence\n        rightmost = acc[-n]\n\n        # Return the result\n        return str(rightmost - last)\n\nassert Solution().solution('4\\n1 2 3 4') == '3 2 1 4'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2 2\"\nassert solution(\"4\") == \"4 4\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"10\") == \"10 10 10 10 10 10 10 10 10 10\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 3\") == \"Yes\"\nassert solution(\"10 1\") == \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 3') == 'Yes'\nassert solution('5 2') == 'No'\nassert solution('100 1') == 'No'\n'''\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"4 3\\n1 2 3\") == \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 5\n2 4 3\n3 5 6\n3 4 4\n3 5 5\n2 6 5\n1 2 1\n2 3 4\n2 5 5\n2 6 6\n1 3 2\n1 5 4\n3 2 5\n3 4 6''') == 'Yes'\nassert solution('''10 5\n2 5 2\n5 5 5\n2 3 4\n4 2 5\n5 6 5\n6 5 5\n1 5 5\n2 4 4\n4 3 4\n5 5 5\n2 6 5\n3 4 5\n5 5 5\n4 6 5\n2 5 4\n2 6 6\n1 5 5\n1 5 5\n1 2 3\n1 3 3\n1 3 5\n4 6 5\n4 6 5\n5 1 5\n4 5 5\n1 3 3\n3 2 5\n5 5 5\n2 5 3\n2 4 4\n5 5 5\n2 5 4\n2 5 5\n1 2 1\n1 2 1\n1 5 4\n1 6 4\n1 1 5\n3 5 5\n5 1 5\n5 1 5\n4 5 5\n5 1 5\n3 4 4\n1 5 4\n5 4 5\n5 4 5''') == 'No'\nassert solution('''10 5\n2 5 2\n5 5 5\n2 3 4\n4 2 5\n5 6 5\n6 5 5\n1 5 5\n2 4 4\n4 3 4\n5 5 5\n2 6 5\n3 4 5\n5 5 5\n4 6 5\n2 5 4\n2 6 6\n1 5 5\n1 5 5\n1 2 3\n1 3 3\n1 3 5\n4 6 5\n4 6 5\n5 1 5\n4 5 5\n1 3 3\n3 2 5\n5 5 5\n2 5 3\n2 4 4\n5 5 5\n2 5 4\n2 5 5\n1 2 1\n1 2 1\n1 5 4\n1 6 4\n1 1 5\n3 5 5\n5 1 5\n5 1 5\n4 5 5\n5 1 5\n3 4 4\n1 5 4\n5 4 5\n5 4 5''') == 'No'"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 3\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes', 'test1'\nassert solution('2 3\\n1 2 3') == 'No', 'test2'\nassert solution('10 3\\n1 2 3') == 'Yes', 'test3'\nassert solution('10 3\\n1 2 3') == 'Yes', 'test4'\nassert solution('10 3\\n1 2 3') == 'Yes', 'test5'\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"Yes\"\nassert solution(\"10 5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\nassert solution(\"10 3\") == \"Yes\"\nassert solution(\"10 5\") == \"Yes\"\nassert solution(\"10 6\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('3 5') == 'Yes'\nassert solution('5 6') == 'No'"
    },
    {
        "number": 4503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"No\"\nassert solution(\"6 4\") == \"Yes\"\nassert solution(\"7 1\") == \"Yes\"\nassert solution(\"7 1\") == \"Yes\"\nassert solution(\"3 3\") == \"Yes\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('aaa') == 4\nassert solution('a') == 1\nassert solution('aab') == 2\nassert solution('aaaaa') == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == \"6\"\nassert solution(\"abaababaa\") == \"1\"\nassert solution(\"abaabab\") == \"1\"\nassert solution(\"abaaba\") == \"2\"\nassert solution(\"abaaaaa\") == \"2\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == '6'\nassert solution('abaababaa') == '2'\nassert solution('abaabab') == '1'\nassert solution('abaaba') == '3'\nassert solution('aba') == '2'\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 6\nassert solution(input()) == 6\nassert solution(input()) == 6\nassert solution(input()) == 6\nassert solution(input()) == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abaababaab\") == \"6\"\n\nassert solution(\"abaababaa\") == \"7\"\n\nassert solution(\"abaabab\") == \"6\"\n\nassert solution(\"abaaba\") == \"3\"\n\nassert solution(\"aba\") == \"3\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6, \"test1\"\nassert solution(\"abaababaa\") == 4, \"test2\"\nassert solution(\"abaabab\") == 3, \"test3\"\nassert solution(\"abaaba\") == 2, \"test4\"\nassert solution(\"aba\") == 1, \"test5\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abaababaab') == 6"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abaababaab') == '6'\nassert solution('abaababaa') == '9'\nassert solution('abaababa') == '5'\nassert solution('abaabab') == '5'\nassert solution('abaaba') == '4'\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abaababaab\") == \"6\"\nassert solution(\"abaababaa\") == \"7\"\nassert solution(\"abaabab\") == \"7\"\nassert solution(\"abaab\") == \"2\"\nassert solution(\"aba\") == \"1\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 6\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"abac\"\n) == \"Yes\"\n\nassert solution(\n    \"bac\"\n) == \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"abd\") == \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('bac') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bacac') == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('cba') == 'No'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bac\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bacbac\") == \"Yes\"\nassert solution(\"abca\") == \"No\"\nassert solution(\"a\") == \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'No'\nassert solution('aac') == 'No'\n'''\n\ns = input()\n"
    },
    {
        "number": 4505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"bac\") == \"Yes\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t) == \"646\"\nassert solution(t) == \"757402647\""
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    5\n    1 8 7 2 4\n    9 7 2 9 3\n    ''') == '646'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 8 7 2 4\n9 7 2 9 3\n''') == '646'\nassert solution('''\n1000000\n1000000\n''') == '757402647'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '20'\nassert solution('1000000') == '757402647'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"646\"\nassert solution() == \"757402647\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 5\n1 2\n\n2\n4\n1 2''') == '4'\n\nassert solution('''10\n1 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n2\n9 8\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n\n3\n1 5\n1 2\n1 4\n1 6\n1 7\n1 8\n1 9\n1 10\n\n4\n1 2\n1 3\n1 6\n1 7\n1 8\n1 9\n1 10\n\n5\n1 2\n1 3\n1 4\n1 6\n1 7\n1 8\n1 9\n1 10\n\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n7\n1 5\n1 2\n1 3\n1 4\n1 6\n1 7\n1 8\n1 9\n1 10\n\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10''') == '20'\n\nassert solution('''3\n1 2 3\n4 2 5\n6 4 7\n\n2\n5 1\n3 4\n4 5\n6 1\n\n3\n4 1\n5 2\n6 3\n\n4\n1 2 3\n4 5 6\n7 8 9\n\n5\n1 2 3\n4 5 6\n7 8 9\n\n6\n1 2 3\n4 5 6\n7 8 9\n\n7\n1 2 3\n4 5 6\n7 8 9\n\n8\n1 2 3\n4 5 6\n7 8 9\n\n9\n1 2 3\n4 5 6\n7 8 9\n\n10\n1 2 3\n4 5 6\n7 8 9\n\n11\n1 2 3\n4 5 6\n7 8 9\n\n12\n1 2 3\n4 5 6\n7 8 9\n\n''') == '12'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6') == '1'\nassert solution('1\\n10000000\\n10000000') == '646370'\nassert solution('5\\n1000000000 1000000000 1000000000 1000000000\\n1000000000 1000000000 1000000000 1000000000') == '7649280'\nassert solution('1000000000 10000000\\n1000000000 10000000\\n10000000 10000000\\n10000000 10000000') == '646370'\nassert solution('5\\n1000000\\n1000000\\n1000000\\n1000000') == '7649280'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"1000000\") == \"757402647\""
    },
    {
        "number": 4506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 8 7 2 4\n9 7 2 9 3\n''') == \"646\"\nassert solution('''\n1\n1000000\n1000000\n''') == \"757402647\""
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"17\"\nprint(solution(input_))\n\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 4 5\") == \"7\"\nassert solution(\"9 4 8\") == \"17\"\nassert solution(\"5 1 4\") == \"17\"\nprint(solution(input()))"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n''') == '7'\nassert solution('''\n5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\nassert solution('''\n5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\nassert solution('''\n7 1 4\n2 5 7 4 6\n5 4\n''') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n\n\"\"\") == \"7\"\nassert solution(\"\"\"\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\n\"\"\") == \"17\"\nassert solution(\"\"\"\n5 1 4\n2 5 7 4 6\n5 4\n\n\"\"\") == \"17\"\nassert solution(\"\"\"\n1\n4\n1\n4\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4 8\n2 5 7 4 6\n5 4''') == '17'\nassert solution('''9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''5 1 4\n2 5 7 4 6\n5 4''') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 4 5') == '17'\nassert solution('9 4 8') == '17'\nassert solution('5 1 4') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1''') == '7'\nassert solution('''9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7''') == '17'\nassert solution('''5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\n\nprint(solution('''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1'''))\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1') == '17'\nassert solution('5 1 4\\n2 5 7 4 6') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4 8') == '17'\nassert solution('7 4 8') == '17'\nassert solution('5 1 4') == '17'\nassert solution('3 1') == '1'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 4 5') == '17'\nassert solution('9 4 8') == '17'\nassert solution('5 1 4') == '17'"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''') == '2'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '1'\nassert solution('''7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''') == '0'"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\n''') == '2'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''') == '1'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n''') == '0'\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\""
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''') == '2'\n\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '1'\n\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n5 7\n''') == '0'\n\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '1'\n\nassert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''') == '0'\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3\\n1 2\\n1 3\") == \"1\"\nassert solution(\"3\\n1 2\\n2 3\") == \"0\"\nassert solution(\"3\\n1 2\\n3 4\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([7]) == \"0\"\nassert solution([7, 1, 2]) == \"1\"\nassert solution([7, 1, 2, 3]) == \"2\"\nassert solution([7, 1, 2, 3, 4, 5, 6, 7]) == \"1\"\nassert solution([7, 1, 2, 3, 4, 5, 6, 7, 8]) == \"2\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"2\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''') == '2'\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '0'\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''') == '1'"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000001') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1\n4 3\n3 2\n2 2\n2 1\n2 1''') == '2', 'First'\nassert solution('''8 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\n''') == '1000000001', 'Second'\nassert solution('''5 1\n4 3\n2 2\n2 1\n2 1\n2 1''') == '2', 'Third'\nassert solution('''5 1\n4 3\n2 2\n2 1\n2 1\n2 1''') == '1999999999', 'Fourth'\nassert solution('''5 1\n4 3\n2 2\n2 1\n2 1\n2 1''') == '113', 'Fifth'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '10'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '1000000001'\nassert solution('1000000000 1000000000') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1999999999'\nassert solution('3 7') == '15'\nassert solution('4 12') == '113'\nassert solution('2 1000000000') == '1000000001'\nassert solution('7 97') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 7') == '10'\nassert solution('2\\n4 12') == '15'\nassert solution('2\\n2 1000000000') == '1000000001'\nassert solution('3\\n7 97') == '1999999999'\nassert solution('3\\n1000000001 1000000000') == '113'\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '15'\nassert solution('''\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '1999999999'\nassert solution('''\n2 1\n''') == '1'\nassert solution('''\n2 1000000000\n''') == '1000000001'\n'''\n2\n\n'''"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\"\"\") == \"1999999999\"\nassert solution(\n\"\"\"\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\"\"\") == \"113\"\nassert solution(\n\"\"\"\n4 1\n2 3\n6 3\n1 6\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n2 1\n4 1\n4 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1''') == '1999999999'\nassert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000001\n2 1''') == '113'\nassert solution('''2 1\n3 2\n1 3''') == '1'\nassert solution('''3 1\n4 1\n2 2''') == '1'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n1 2 3 2 1 3 2\n''') == '2 1 3 2 1 3 2'\nassert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '3 1 2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 2'\nassert solution('''\n10 3\n1 2 3 2 1 3 2\n''') == '2 1 3 2'\nassert solution('''\n10 3\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1 3 2 1 3 2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 3 2 1 2 1 2 3 3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1 2 3 2 1 3 2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 2 3 2 1 3 2'\nassert solution('''\n10 4\n1 2 3 2 1 3 2\n''') == '2 1 3 2 1 3 2'"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n5 2\n1 2 3 2 1 3 2\n\n'''\n) == '2'\n\nassert solution(\n    '''\n10 4\n2 3 3 1 1 2 1 2 3 3\n\n'''\n) == '3'\n\nassert solution(\n    '''\n10 4\n2 3 3 1 1 2 1 2 3 3\n\n'''\n) == '1'\n\nassert solution(\n    '''\n5 2\n1 2 3 2 1 3 2\n\n'''\n) == '2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 2\n1 2 3 2 1 3 2\n''') == '2 1 3 2 1 2'\nassert solution('''\n10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3 1 2 2 1 3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 3 3 1 1 2 1 2 3 3') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '2'\nassert solution(input_) == '3'"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == 263\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''') == 263\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\") == \"263\"\nassert solution(\"10\\n3\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\") == \"255\"\nassert solution(\"1\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\") == \"263\""
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == 263\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example) == '263'\nassert solution(input) == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == 263\n\nassert solution('''4\n3\n1 5\n1 3\n1 7\n1''') == 49\n\nassert solution('''2\n2\n1 2\n1''') == 1\n\nassert solution('''3\n3\n1 5\n1 3\n1''') == 1\n\nassert solution('''2\n2\n1 2\n1''') == 1"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 263\nassert solution('2') == 513\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''') == 263\nassert solution('''\n10\n10 10 10 10 10 10 10 10 10\n9 9 9 9 9 9 9 9 9 9 9\n8 8 8 8 8 8 8 8 8 8 8\n7 7 7 7 7 7 7 7 7 7 7\n6 6 6 6 6 6 6 6 6 6 6\n5 5 5 5 5 5 5 5 5 5 5\n4 4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3 3\n2 2 2 2 2 2 2 2 2 2 2\n1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0\n''') == 1824\n"
    },
    {
        "number": 4511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '263'\nprint(solution(input))\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n\n''') == '3'\n\nassert solution('''\ndfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\n\n''') == '5'\n\nassert solution('''\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n\n''') == '2'\n\nassert solution('''\ndfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\n\n''') == '2'"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''abacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n\n''') == '3'\nassert solution('''dfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\n\n''') == '5'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\n\nsolution(\"codeforces\")"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\""
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_lines) == \"6\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n1\") == \"1\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '154873296'\nassert solution('2') == '336592714'\nassert solution('3') == '729645835'\nassert solution('4') == '863725145'\nassert solution('5') == '979314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '154873296'\nassert solution('2') == '386592714'\nassert solution('3') == '729641835'\nassert solution('4') == '863725149'\nassert solution('5') == '975314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('10\\n8\\n1\\n4\\n3\\n9\\n5\\n7\\n2') == '7\\n8\\n1\\n4\\n3\\n9\\n5\\n7\\n2'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n''') == '154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563'\nprint(solution(input()))\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"154873296\"\nassert solution(\"2\") == \"336592714\"\nassert solution(\"3\") == \"729645835\"\nassert solution(\"4\") == \"863725145\"\nassert solution(\"5\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '9'\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '8'\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"154873396\"\nassert solution(\"2\") == \"154873396\"\nassert solution(\"3\") == \"154873396\"\nassert solution(\"4\") == \"154873396\"\nassert solution(\"5\") == \"154873396\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"154873396\", \"1\"\nassert solution(\"2\") == \"336592714\", \"2\"\nassert solution(\"3\") == \"729645835\", \"3\"\nassert solution(\"4\") == \"863725145\", \"4\"\nassert solution(\"5\") == \"979314628\", \"5\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 1 1\n2 1\n3 1\n1 3\n2 2\n1 2\n1 1\n2 2''') == '3'\nassert solution('''4 4\n1 1 1\n3 1\n1 3\n2 1\n2 3\n3 2\n3 1\n1 4\n2 2\n2 4''') == '4'\nassert solution('''7 7\n1 1 1\n2 1\n3 2\n4 1\n5 3\n1 5\n6 1\n1 6''') == '7'\nassert solution('''10 10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n2 2\n3 1\n4 1\n5 2\n6 1\n7 1\n1 7\n8 1\n2 8\n9 1\n3 9\n1 3\n4 9\n1 4\n5 5\n6 1\n1 6\n7 5\n8 4\n9 3\n3 7\n1 8\n2 7\n4 6\n5 4\n3 5\n1 6\n2 8\n2 5\n1 1\n3 4\n2 1\n4 2\n5 1\n6 5\n7 4\n1 7\n8 6\n9 5\n4 8\n4 7\n4 3\n3 7\n2 8\n3 6\n1 1''') == '10'\nassert solution('''20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n1 1\n1 2\n1 3\n1 4\n1 5\n\n3 1\n3 2\n3 4\n3 5\n''') == '-1'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 3 5 3 5 7') == '3'\nassert solution('3 1') == '8'\nassert solution('3 4') == '4'\nassert solution('7 3') == '-1'\nassert solution('9 1') == '4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n1 1\n3 3\n3 4''') == '4'\nassert solution('''2 2\n1 1\n3 3\n3 4\n5 5\n7 7\n8 8\n9 9\n1 1\n2 2\n2 3\n2 4''') == '9'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('4 1') == '1 2 3 4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 3') == '6'\nassert solution('5 4') == '-1'\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 3 5 3 5 7') == '3'\nassert solution('3 1') == '8'\nassert solution('3 4') == '-1'"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution('''\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '8'\nassert solution('''\n5\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '9'\nassert solution('''\n6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '-1'\nassert solution('''\n5\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '-1'\n\n\"\"\"\nThe strategy is as follows.\n\nIn each query, start with the first officer and find the direct superior of him.\n\nGo to that direct superior and find a new command who has not been received yet.\n\nWhen the query is finished, stop the search for a command and finish the search for the next command.\n\n\n\"\"\""
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n2 4\n1 3\n2 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n1 2 1 3 1 5\n2 1\n1 4\n3 1\n4 4\n3 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n1 4\n2 1\n3 1\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n10\n1 2 1 3 1 3 2 4 1\n4 1\n1 5\n3 1\n4 5\n3 2\n4 6\n4 2\n1 7\n3 1\n4 7\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '8'\nassert solution('''\n3 5\n1 1 1 3 5 3 5 7\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '3'\nassert solution('''\n4 7\n1 1 1 3 5 3 5 7\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '9'\nassert solution('''\n6 2\n1 1 1 3 5 3 5 7\n1 5\n3 4\n7 3\n1 8\n1 9\n''') == '-1'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\\nYES\\nYES\\nYES\\nYES\\n\""
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\nassert solution('''\n5 4 4 8\n1 1 1 1 1\n''') == 'NO'\nassert solution('''\n5 1 3 2\n1 1 1 1\n''') == 'YES'\nassert solution('''\n5 2 3 2\n1 1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"10 20 15 14\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\nassert solution('''\n2 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\nassert solution('''\n3 4 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'NO'\nassert solution('''\n4 5 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'NO'\nassert solution('''\n5 6 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\n\nassert solution('''\n3 2 1 2\n5 5 5 5\n5 5 5 5\n5 5 5 5\n5 5 5 5\n''') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 2 8') == 'YES'\nassert solution('100 101 102 105') == 'YES'\nassert solution('3 2 1 100000000') == 'NO'\nassert solution('10 20 15 14') == 'YES'\nassert solution('101 101 101 3') == 'NO'"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\n\nassert solution('''\n5 3 2 8\n100 101 102 105\n2 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\n\nassert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 2\n''') == 'NO'\n\nassert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 2\n''') == 'YES'\n\nassert solution('''\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n''') == 'YES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"YES\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '3 4 6 5'\nassert solution('4 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3'\nassert solution('5 5') == '9 8 12 6 8'\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_data) == '3 4 6 5 '\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '3 4 6 5'\nassert solution('''\n5 5\n2 1 5 3 5\n''') == '9 8 12 6 8'\nassert solution('''\n2 10\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3 \n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '3 4 6 5', 'wrong answer'\nassert solution('''5 5\n2 1 5 3 5\n''') == '9 8 12 6 8', 'wrong answer'\nassert solution('''2 10\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3 ', 'wrong answer'\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '3 4 6 5 '\nassert solution('''\n5\n2 1 5 3 5\n''') == '9 8 12 6 8 '\nassert solution('''\n2\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3 \n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8'"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3'"
    },
    {
        "number": 4516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == \"3 4 6 5\"\nassert solution('5 5\\n2 1 5 3 5\\n') == \"9 8 12 6 8\"\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == \"3 3\""
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\nassert solution('''\n10 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 6') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\n\n'''\n--- Day 6: Custom Customs ---\n\nNow we have the problem of determining whether any group is valid.\n\nIn a group of students, each person can have exactly one student ID. The problem is to find out whether all students go by different IDs.\n\nGiven a list of groups (your puzzle input), each group is in a single line, and separated by blank spaces. Each line includes at least one group name.\n\nEach group name can consist of any characters with meanings as described below:\n\n  '&' : A group name ends and starts with an ampersand (\"&\") character.\n  '-' : A group name ends at the first blank space (after the ampersand character).\n  'x' : A group name ends with an exclamation point (\"!\") character.\n  '*' : A group name ends with a star (\"*\") character.\n  '+' : A group name ends with a plus (\"+\") character.\n  '#' : A group name ends with a hash (#) character.\n\n(Each group name can also include an asterisk (\"*\") symbol in front of a group name.\nThere can be any number of asterisk symbols, and it does not matter which.)\n\nFor example:\n\nabcx\nx&y&z\ny**foo**bar*\nz*x&y&foo**\nAny valid group name can be valid answer.\n\nIn this example, all groups are valid answers. However, the first and fourth groups are not valid answers:\n\n- The first group ends with an ampersand, \"&\", and the second group ends with a star symbol, \"*\". This is not valid because \"&\" characters must follow every other character, including spaces.\n- The third and fifth groups end with a hash symbol, \"#\", and the fourth group ends with a star symbol, \"*\". This is not valid because \"*\" characters must come after every character, including spaces.\n\nHow many groups are valid answers?\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'NO'\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == 'YES'"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"7 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 6') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO\\n'\nassert solution('6 5') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO\\n'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1 2 2 1 3\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\n'\nassert solution('''\n5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5\n1 2 3 4\n''') == 'YES\\n1 2\\n2 3\\n3 4\\n4 5\\n'\nassert solution('''\n3\n1 1 1\n2 2 2\n3\n1 2 3 4\n''') == 'YES\\n1 2\\n2 3\\n3 4\\n'\nassert solution('''\n5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5\n1 2 3 4\n''') == 'NO\\n'\nassert solution('''\n5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5\n1 2 3 4\n''') == 'NO\\n'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\\n1 2\\n3 4\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\\n1 2\\n1 3\\n1 4\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n\"\"\") == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('4\\n3\\n1 1 1') == 'YES\\n1 2\\n2 3\\n3 4'\nassert solution('4\\n5\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 2\\n2 3\\n3 4\\n1 2'\nassert solution('4\\n5\\n1 2 2 1 3\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('4\\n5\\n1 2 3 4\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('''6\n1 1 1\n3\n1 2\n2 3\n2 4\n3 4\n4 5\n5 6\n6 6\n''') == 'YES\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\nNO'\n\n'''\n\na, t = map(int, stdin.split())\nlst = list(map(int, stdin.split()))\n\ndic = {}\nfor i in range(a):\n    dic[i+1] = 1"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"01011110\"\nassert solution(input()) == \"0101111\"\nassert solution(input()) == \"0011111\"\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"01011110\""
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"01011110\"\nassert solution(input()) == \"0101111\"\nassert solution(input()) == \"0011111\""
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n8 5\\n11011010\\n7 9\\n1111100\\n7 11\\n1111100') == '01011110'"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '01011110'\nassert solution(input()) == '0101111'\nassert solution(input()) == '0011111'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '10100'\nassert solution('8 5') == '101010'\nassert solution('7 9') == '1011011'\nassert solution('11 1') == '11010110'\nassert solution('7 11') == '011011011'\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '01011110'\n\n
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"01011110\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"01011110\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 5') == '011110'\nassert solution('7 9') == '0111100'\nassert solution('11011010') == '0111110'\nassert solution('7 11') == '0011111'\nassert solution('1111100') == '0111111'"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4'\nassert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\nOutput\n3\n1 4 7 \n\nInput\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\nOutput\n3\n1 4 7 \n''') == '4'\n\nimport sys\nfrom collections import defaultdict\n\nfrom io import StringIO\nimport unittest\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2') == '3'\nassert solution('5 1') == '4'\nassert solution('6 1') == '5'"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution(\"\"\"\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n\"\"\") == '4'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3'\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '4'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3\\n1 4 7'\nassert solution('''\n4 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4\\n1 3 5 6'\n\n''')"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n\n''') == '3'\nassert solution('''\n\n''') == '1 4 7 \n\nassert solution('''\n\n''') == '3'\nassert solution('''\n\n''') == '1 3 5 6\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 2') == '3'\nassert solution('5 1') == '4'\nassert solution('6 1') == '4'\n"
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\nassert solution(\"5 1\") == \"1 2 3 5\""
    },
    {
        "number": 4520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n3') == '1 3'\nassert solution('6\\n1') == '4'\nassert solution('5\\n1') == '1 2 3 4'\nassert solution('6\\n1') == '4'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == '3'\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4\\n') == '19'"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '19'\nassert solution('\\n'.join([\n    '4',\n    '1 1 2 2',\n    '-1 -3 3 3',\n])) == '4'\n\nassert solution('\\n'.join([\n    '1',\n    '1',\n])) == '0'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('5') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 3 2\n-100 2 3\n\n''') == '3'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == \"3\"\nassert solution('1') == \"2\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 3 2\n-100 2 3\n''') == '3'\nassert solution('''\n5\n2 1 4 3 5\n2 2 2 3 4\n''') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\nprint('\"Run\" is good. Time to check.')\nimport os\nimport sys\n"
    },
    {
        "number": 4521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '19'\nassert solution('2') == '0'"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0 0\""
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\"\"\") == \"21 7 15 21 3 \n\nassert solution(\"\"\"1 2\n1 2\n\nOutput\n0 0 \n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"1 2\n2 3\n\"\"\") == \"1 3\"\n\nassert solution(\"\"\"1 1\n2 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"1 2\n2 3\n\"\"\") == \"0 0\""
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n') == '21 7 15 21 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n2 1 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == '21 7 15 21 3'\n\n'''\nThe maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_i$.\n\n'''"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3 7 15 21 3'\n\n\n\"\"\"\n\nn, m = map(int, input().split())\nG = []\nfor i in range(n-1):\n    u, v, w = map(int, input().split())\n    G.append((u, v, w))\n\nans = 0\nfor i in range(m):\n    q = int(input())\n    visited = [False] * n\n    ans = 0\n    for i in range(n):\n        if not visited[i]:\n            dfs(G, q, visited, i)\n    print(ans)"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 2\\n') == '0 0 \n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '21 7 15 21 3'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 5') == \"21 7 15 21 3\"\nassert solution('2 2') == \"0 0\"\nassert solution('1 2') == \"1 3 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 5') == '21 7 15 21 3'\nassert solution('1 2') == '0 0'\n\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n''') == '21 7 15 21 3'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 2\n4\n5 5 5 5''') == 'YES', 'First example'\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5''') == 'NO', 'Second example'\nassert solution('''3\n1 2\n4\n5 5 5 5''') == 'NO', 'Third example'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2 2\n4\n5 5 5 5''') == 'NO'\nassert solution('''5\n1 2 2\n4\n5 5 5 5''') == 'YES'\nassert solution('''3\n1 2 2\n4\n5 5 5 5''') == 'YES'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n1 2 2') == 'YES'\nassert solution('2\\n4\\n5 5 5 5') == 'NO'"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 2\n4\n5 5 5 5''') == 'YES'\nassert solution('''5\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1''') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\n''') == 'YES'\nassert solution('''\n5\n1\n1 2 3 5\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == \"YES\"\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == \"YES\"\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == \"NO\"\nassert solution('''4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'NO'\nassert solution('''3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''') == 'YES'"
    },
    {
        "number": 4523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '12'\nassert solution('4 5') == '11'"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1001\\n\") == \"11\"\nassert solution(\"4 5\\n1001\\n\") == \"11\"\nprint(solution(\"4 5\\n1001\\n\"))\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(examples[0]) == \"12\"\nassert solution(examples[1]) == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4\\n' + '1010\\n' + '1101\\n') == '12'\nassert solution('4 5\\n' + '1001\\n' + '10101\\n') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1001\\n') == '11', solution('4 5\\n1001\\n')\nassert solution('4 5\\n10101\\n') == '11', solution('4 5\\n1001\\n')\n"
    },
    {
        "number": 4524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_data) == \"12\"\n\nassert solution(input_data) == \"11\"\n\nassert solution(input_data) == \"10\""
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n''') == \"NO\"\nassert solution('''\n3\n4\n''') == \"YES\"\nassert solution('''\n5\n6\n''') == \"YES\"\nassert solution('''\n7\n8\n''') == \"NO\"\nassert solution('''\n8\n9\n''') == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == 'NO'\nassert solution('2\\n4') == 'YES'\nassert solution('3\\n5') == 'YES'\nassert solution('5\\n8') == 'YES'\nassert solution('8\\n10') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2') == 'NO'\nassert solution('5\\n4') == 'YES'\nassert solution('5\\n6') == 'YES'\nassert solution('5\\n8') == 'YES'\nassert solution('5\\n10') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n10\n1 2 3 4 5 6 7 8 9 10\n4\n
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2\n4\n6\n8\n10\n''') == \"NO\"\nassert solution('''\n5\n2\n4\n6\n8\n10\n''') == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n4''') == 'NO'\nassert solution('''5\n2\n4\n6\n8\n10''') == 'YES'\nassert solution('''1\n3\n6\n11\n11\n13''') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n2') == 'NO'\nassert solution('4\\n8') == 'YES'\nassert solution('10\\n10') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3\\n7\\n6\") == \"NO\"\nassert solution(\"5\\n9\\n1\\n6\\n8\") == \"YES\"\nassert solution(\"6\\n9\\n1\\n6\\n8\") == \"YES\"\nassert solution(\"4\\n2\\n5\\n2\") == \"NO\"\nassert solution(\"4\\n7\\n1\\n2\\n5\") == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n''') == 'NO', \"First\"\nassert solution('''\n1\n3\n''') == 'YES', \"Second\""
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '1'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"1\"\nassert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"0\"\nassert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"4\"\nassert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n2\\n6 7\") == \"4\"\nassert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n2\\n6 7\") == \"2\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1') == '5'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1') == '0'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1') == '4'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\nassert solution(input) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1''') == '1'\nassert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '1'\nassert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '4'\nassert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '0'\nassert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1''') == '5'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '1'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '0'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '4'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '4'\nassert solution('5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2') == '2'\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == \"4\"\nassert solution('''3\n3\n2\n1\n2\n''') == \"1\"\nassert solution('''7\n8\n7\n1\n2\n3\n4\n5\n6\n7\n''') == \"5\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"5\"\nassert solution(\"3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"3\") == \"0\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3'\n\nassert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '4'\n\nassert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4', solution()\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == '5'"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5''') == '3'\n\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7''') == '3'\n\nassert solution('''7\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7''') == '4'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3'\nassert solution('''\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '2'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3''') == '3'\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3''') == '2'\nassert solution('''8\n4\n1 2\n2 4\n2 5\n3 8\n4 6\n6 3\n6 4\n5 7\n7 5\n5 1\n6 5\n6 5\n5 7\n7 7\n6 5\n6 7\n7 7\n6 6\n7 5\n7 7\n6 4\n6 7\n7 7\n6 5\n7 7''') == '5'\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(example_input_1) == \"3\"\nassert solution(example_input_2) == \"4\"\nassert solution(example_input_3) == \"2\"\nassert solution(example_input_4) == \"7\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\nassert solution() == '4'\nassert solution() == '2'\nassert solution() == '7'"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    1\n    3\n    0 0\n    \"\"\") == \"1\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n23 55\n23 0\n0 1\n4 20\n23 59\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"1439\"\n\nassert solution(\"\"\"\n3\n0 0\n0 1\n0 0\n0 0\n\"\"\") == \"1180\"\n\nassert solution(\"\"\"\n4\n0 0\n1 0\n0 1\n0 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n0 0\n0 1\n0 0\n0 0\n0 0\n\"\"\") == \"60\""
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n''') == '60'\nassert solution('''\n1\n1 1\n1 0\n1 0\n''') == '1180'\nassert solution('''\n2\n0 3\n0 0\n1 1\n''') == '1'\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10\n''') == '60'\nassert solution('''\n1\n0\n''') == '1439'\nassert solution('''\n1\n10\n''') == '1180'\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\\\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\"\"\") == \"\"\"60\"\"\"\nassert solution(\"\"\"\\\n2\n00 0\n0 1\n4 20\n23 59\n\"\"\") == \"\"\"1439\"\"\"\nassert solution(\"\"\"\\\n2\n00 0\n0 1\n4 20\n23 59\n\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"\\\n2\n0 0\n0 0\n4 20\n23 59\n\"\"\") == \"\"\"1439\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"60\"\nassert solution(\"1\") == \"1439\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n        3\n        10 8 9\n        1 2\n        2 3\n        3 4\n        4 5\n        6 7\n        8 9\n        11 12\n        13 14\n        15 16\n        \"\"\") == \"2\"\n\nassert solution(\"\"\"\n        1\n        10 9\n        1 2\n        2 3\n        3 4\n        4 5\n        6 7\n        8 9\n        11 12\n        13 14\n        15 16\n        \"\"\") == \"3\"\n\nassert solution(\"\"\"\n        3\n        10 8 9\n        1 2\n        2 3\n        3 4\n        4 5\n        6 7\n        8 9\n        11 12\n        13 14\n        15 16\n        \"\"\") == \"7\"\n\nassert solution(\"\"\"\n        1\n        10 9\n        1 2\n        2 3\n        3 4\n        4 5\n        6 7\n        8 9\n        11 12\n        13 14\n        15 16\n        \"\"\") == \"12\"\n\nassert solution(\"\"\"\n        1\n        10 9\n        1 2\n        2 3\n        3 4\n        4 5\n        6 7\n        8 9\n        11 12\n        13 14\n        15 16\n        \"\"\") == \"12\""
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n23 55\\n23 0') == '60'\nassert solution('5\\n23 55\\n23 0') == '1439'\nassert solution('4\\n23 59\\n23 0') == '1'\nassert solution('5\\n23 59\\n23 0') == '1180'\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n\"\n    \"23 55\\n\"\n    \"23 0\\n\"\n    \"0 1\\n\"\n    \"4 20\\n\"\n    \"23 59\\n\"\n    ) == \"5\\n\"\nassert solution(\n    \"6\\n\"\n    \"23 55\\n\"\n    \"23 0\\n\"\n    \"0 1\\n\"\n    \"4 20\\n\"\n    \"23 59\\n\"\n    \"0 0\\n\"\n    ) == \"6\\n\"\nassert solution(\n    \"7\\n\"\n    \"23 55\\n\"\n    \"23 59\\n\"\n    \"0 0\\n\"\n    \"4 20\\n\"\n    \"23 59\\n\"\n    \"0 0\\n\"\n    ) == \"1439\\n\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n23 55\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n12 30\n\"\"\") == \"60\"\nassert solution(\"\"\"\n3\n10 55\n\"\"\") == \"1439\"\nassert solution(\"\"\"\n4\n15 15\n\"\"\") == \"1180\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"RLRR\") == \"2\"\nassert solution(\"LUURDLLUULR\") == \"2 4\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nRRDD\n4\nRDDU\n''') == '2 4'\nassert solution('''1\nR\n''') == '0 1'\nassert solution('''5\nRRDDD\n4\nRDDDU\n''') == '0 1 4'\nassert solution('''3\nRRDDD\n4\nRDDDU\n''') == '1 3'\nassert solution('''7\nLRRLRDDDRUDD\n8\nRRRLRDDDRUDD\n''') == '2 4 4 5 3 4'\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n\"\"\") == \"1 4\"\n\nassert solution(\n\"\"\"\n1\n5\nRLU\n5\nRLL\n3\nLDDR\n\"\"\") == \"1 4 3 4\"\n\nassert solution(\n\"\"\"\n2\n8\nRRDDDDRRRD\n\"\"\") == \"3 4\"\n\nassert solution(\n\"\"\"\n3\n3\nRLRD\n2\nRLLR\n2\nRLR\n\"\"\") == \"4 3 1 1 2\"\n\nassert solution(\n\"\"\"\n4\n3\nRRLR\n4\nRLL\n3\nRLR\n\"\"\") == \"2 4\""
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 2'\nassert solution() == '1 4'\nassert solution() == '3 4'\nassert solution() == -1\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR''') == \"1 2\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1 4\"\nassert solution(\"1 4\") == \"1 4\"\nassert solution(\"3 4\") == \"1 2\"\nassert solution(\"-1\") == \"1 2\"\nassert solution(\"-1\") == \"1 2\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\nLURDLR\n\"\"\") == \"1 4\"\nassert solution(\"\"\"\n4\nLURDLL\n\"\"\") == \"1 4\"\nassert solution(\"\"\"\n5\nLLRDDRURD\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n0\n\"\"\") == \"-\"\nassert solution(\"\"\"\n10\nURDDDDDDDUURRDRDDRUULDRDDRUULUULDUULRDRURDDRUDRDRDDDRDRUDDUUURUDRDDRDDRUDRUDRUDRDRUDRDDUDRDDRUDDUUURUDRDDRDDRUDRUDRDDRUDRUDRDUUDUUDDDRDDRDDRDDRDDRUDRDDRUDDUURUDRDDRUDRUDRDDRDDRDUDRDDDUUDDRDDRUDRDDRUDRDDRDDRUDRUDRDDRUDRDDRDDRUDRDDRDDRUDRDDRUDDDRDDRDDRUDRDDRDDRDDRDDRUDRUDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDDDDDDUDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRUDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDDRDDRUDDDRDDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRUDRDDRDDRUDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRUDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRUDRDDRDDRDDRDDRU"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"1 2\"\nprint(solution())\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 2\"\nassert solution(\"5\") == \"3 4\"\nassert solution(\"6\") == \"5 4\"\nassert solution(\"7\") == \"3 4\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"4\n    LRUD\n    4\n    LURD\n    5\n    RRUDU\n    5\n    LLDDR\"\"\") == \"\"\"1 2\n    1 4\n    3 4\n    -1\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3'\nassert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '1'\nassert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n1 1 1 3') == '1'\nassert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '0'\nassert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n1 1 1 3') == '0'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '3'\nassert solution('''\n1\n4\n1 2 1 3\n''') == '1'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n8\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n5 4 4 2 2 4 4 1 5 3\n4\n5 5 2 2 4 3 2\n1\n5 5 5 5 5\n3\n3\n4\n1 1 1 3\n\"\"\") == \"1\""
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '3'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '2'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '0'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '0'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '1'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 2 3\n4\n1 1 1 3\n''') == '2'\nassert solution('''\n5\n4 2 4 1 4 3\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '1'\nassert solution('''\n4\n4 2 4 1 4 3\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '0'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n\n----\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0439. \u0421\u0442\u043e\u0438\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u043d\u0430 \u043f\u0430\u0440\u0442\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439, \u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u0430\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0435.\n\n\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u0435\u0441\u044c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u043e\u0447\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0430\u0440\u0442\u0438\u0438. \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0430\u0440\u0442\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0430\u0440\u0442\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d. \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u043a\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0448\u0438\u0440\u0438\u043d\u0443 \u043f\u0430\u0440\u0442\u0438\u0438, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u0447\u043a\u0435. \u0412 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0448\u0438\u0440\u0438\u043d\u0435 \u043d\u0430\u0434\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0441\u0442\u043e\u0440\u043e\u043d\u0443, \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044f\u0441\u044c \u0434\u0440\u0443\u0433\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0432 \u043f\u0430\u0440\u0442\u0438\u0438.\n\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043b\u0438\u043d\u0443 \u0441\u0430\u043c\u043e\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0438, \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0434\u043b\u0438\u043d\u0443 \u0441\u0430\u043c\u043e\u0439 \u043c\u0430\u043b\u0435\u0439 \u043f\u0430\u0440\u0442\u0438\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u0440\u043e\u043d \u0431\u0443\u0434\u0443\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0438 $[1, 2, 3]$ \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u0440\u0442\u0438\u0438, \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u0435\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u0434\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d. \u0422.\u0435. \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0438 $[1, 2, 3]$ \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e\u0431\u044b \u0434\u043b\u0438\u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043d\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b\u0430\u0441\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0432\u044b\u043c \u0438 \u043f\u0435\u0440\u0432\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u0438\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b. \u041a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u0440\u0442\u0438\u044e. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0435\u0441\u0442\u044c, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0434\u043b\u0438\u043d\u0443 \u043f\u0430\u0440"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 2 4 1 4 3\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '2'\nassert solution('''6\n4 2 4 1 4 3\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '1'\nassert solution('''10\n3 1 1 1 1 1 1 1 1 1\n5\n1 1 1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '2'\nassert solution('''8\n3 1 1 1 1 1 1 1 1\n5\n1 1 1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '3'\nassert solution('''6\n3 1 1 1 1 1 1\n5\n1 1 1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '3'\nassert solution('''\n3\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n''') == '1'\nassert solution('''\n2\n2\n1\n1\n''') == '0'"
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\"\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"0\"\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"2\""
    },
    {
        "number": 4530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('1') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1\\n'\n    '9 4 1 7 10 1 6 5\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '1 5\\n'\n    '5 6\\n'\n    '5 7\\n'\n    '5 8\\n'\n) == '121'\n\nassert solution(\n    '1\\n'\n    '1337\\n'\n) == '0'\n\nassert solution(\n    '6\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '3 5\\n'\n    '4 5\\n'\n    '5 6\\n'\n    '6 7\\n'\n    '6 8\\n'\n) == '169'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1337\n''') == '0'\nassert solution('''\n3\n5 1\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n''') == '18'\n\nassert solution('''\n1\n6\n1 2\n1 3\n2 3\n3 4\n''') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('1\\n1337\\n') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"8\") == \"121\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '0'\n\n\"\"\"\n\n\nfrom typing import List\nimport collections\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"in_str, expected_out\", [\n    (\"1\", \"0\"),\n    (\"1337\", \"0\"),\n    (\"8\", \"121\"),\n    (\"151236\", \"151236\"),\n])\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('8') == '121'\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4 5 6') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n''') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '121'\nassert solution('1') == '0'\nassert solution('8') == '0'\n\n'''\n\nfrom sys import stdin\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n''') == '121'\nassert solution('''\n1\n1337\n''') == '0'"
    },
    {
        "number": 4531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('8') == '121'\nassert solution('1000000') == '0'\nassert solution('10000001') == '0'\nassert solution('10000000') == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '18'\nassert solution('''5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '0'\nassert solution('''5 4\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '227'\nassert solution('''5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '8'\nassert solution('''5 4\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '18'\nassert solution('''\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '227'\nassert solution('''\n5 5\n10 20 30 50 60\n3 4 5 6 7 8 9\n''') == '0'\n''')\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3\") == \"6\"\nassert solution(\"5 10\") == \"227\"\nassert solution(\"5 8\") == \"0\"\nassert solution(\"5 25\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '6'\nassert solution('''\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '18'\nassert solution('''\n5 10\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '0'\nassert solution('''\n10 10\n100 100 100 100 100 100 100 100 100 100\n8 8\n1 2 3 4 5 6 7 8\n''') == '27'\nassert solution('''\n10 10\n100 100 100 100 100 100 100 100 100 100\n8 8\n1 2 3 4 5 6 7 8\n''') == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9''') == '8'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9''') == '0'\nassert solution('''5\n10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '227'\nassert solution('''8\n8''') == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6'\nassert solution() == '18'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '18'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24''') == '227'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '0'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '8'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24''') == '8'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '6'\nassert solution() == '18'\nassert solution() == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == \"6\"\nassert solution('10 6') == \"227\"\nassert solution('8 8') == \"8\"\nassert solution('1 2 3 4 5 6 7 8') == \"18\""
    },
    {
        "number": 4532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"18\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1,2,3') == '1'\nassert solution('1,2') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\n\nclass Solution:\n    def maxChild(self, children, cookies):\n        from heapq import heappop, heappush\n        # heap = []\n        # res = 0\n        # heapq.heapify(heap)\n        # for i in range(len(children)):\n        #     if cookies > children[i]:\n        #         heappush(heap, -children[i])\n        #     else:\n        #         heappush(heap, -children[i] - cookies)\n        #         res = max(res, -heappop(heap))\n        # return res\n        # heap = []\n        # res = 0\n        # for i in range(len(children)):\n        #     if cookies > children[i]:\n        #         heappush(heap, -children[i])\n        #     else:\n        #         cookies = cookies - children[i]\n        #         res = max(res, -heappop(heap))\n        # return res\n        # heap = []\n        # res = 0\n        # heapq.heapify(heap)\n        # for i in range(len(children)):\n        #     if cookies > children[i]:\n        #         heapq.heappush(heap, -children[i])\n        #     else:\n        #         cookies = cookies - children[i]\n        #         res = max(res, -heapq.heappop(heap))\n        # return res\n        cookies = cookies\n        heap = []\n        res = 0\n        heapq.heapify(heap)\n        for i in range(len(children)):\n            if cookies > children[i]:\n                heapq.heappush(heap, -children[i])\n            else:\n                cookies = cookies - children[i]\n                res = max(res, -heapq.heappop(heap))\n        return res\n\n\n\n\nstdin = \"3 4 1 3 2 2 3\"\nprint(solution(stdin))\nstdin = \"4 1 2 2 3\"\nprint(solution(stdin))\nstdin = \"4 5 2 1 2\"\nprint(solution(stdin))\nstdin = \"2 5 1 2\"\nprint(solution(stdin))\nstdin = \"3 1 2 2 3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n''') == '1'\nassert solution('''\n2\n1\n''') == '2'\nassert solution('''\n3\n1\n''') == '1'\nassert solution('''\n4\n1\n''') == '2'\n\nassert solution('''\n2\n2\n''') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '2'\nassert solution(__import__('sys').stdin.read().strip()) == '2'\n\n'''\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"3 1 2\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n1\n2\n3\n4\n5''') == '1'\nassert solution('''5 1\n1\n2\n3\n4\n5''') == '2'"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n\n''') == '1'\nassert solution('''\n\n''') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '2'\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 3 3 1'\nassert solution('4') == '1 4 6 4 1'\nassert solution('5') == '1 5 10 10 5 1'\nassert solution('6') == '1 6 18 18 6 1'\nassert solution('7') == '1 7 28 35 35 7 1'\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\") == [\"1\"]\nassert solution(\"1\\n2\") == [\"1\",\"1\"]\nassert solution(\"1\\n2\\n3\") == [\"1\",\"1\",\"1\",\"1\"]\nassert solution(\"1\\n2\\n3\\n4\") == [\"1\",\"2\",\"3\",\"4\",\"3\",\"4\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"8\",\"7\",\"9\",\"9\",\"10\",\"11\",\"12\",\"13\",\"12\",\"11\",\"13\",\"13\",\"14\",\"15\",\"16\",\"17\",\"16\",\"15\",\"14\",\"14\",\"13\",\"12\",\"11\",\"10\",\"9\",\"8\",\"7\",\"6\",\"5\",\"4\",\"3\",\"2\",\"1\",\"1\"]\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == ['1', '3', '3', '1']\n\"\"\"\n\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n''') == '[1,3,3,1,1,3,1]'''\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n''') == '''[1,3,3,1]'''\nassert solution('''\n6\n6\n5\n4\n3\n2\n1\n''') == '''[1,2,3,4,5,6]'''\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 3 3 1'\nassert solution('4') == '1 4 6 4 1'\nassert solution('5') == '1 5 10 10 5 1'\nassert solution('6') == '1 6 15 20 15 6 1'\nassert solution('7') == '1 7 21 35 35 21 7 1'\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == []\nassert solution(\"1\") == [1]\nassert solution(\"2\") == [1, 1]\nassert solution(\"3\") == [1, 3, 1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == []\nassert solution('1') == [[1]]\nassert solution('4') == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n\n'''\n\nclass Solution:\n    def __init__(self):\n        self.res = []\n    def pascal(self, row):\n        if row == 0:\n            return []\n        else:\n            if len(self.res) < row:\n                for i in range(len(self.res),row):\n                    self.res.append([1])\n                for i in range(1,len(self.res)):\n                    for j in range(i):\n                        self.res[i].append(self.res[i-1][j]+self.res[i-1][j+1])\n            return self.res[row-1]"
    },
    {
        "number": 4534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3]) == [1,3,3,1]\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0000000000001011') == '3'\nassert solution('0000000010000000') == '1'\nassert solution('11111111111111111111111111111101') == '31'\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n > 0:\n            res += n & 1\n            n = n >> 1\n        return res"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\nassert solution(\"000000000000000000000000100000000\") == 32\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000000001011') == '3'\nassert solution('00000000000000000000000010000000') == '1'\nassert solution('111111111111111111111111111111101') == '31'\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '3'\n\n'''\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            n = n & (n-1)\n            count += 1\n        return count"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('11111111111111111111111111111101') == 31\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        s = 0\n        while n:\n            n = n & (n-1)\n            s += 1\n        return s"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('00000000000000000000000000001011') == '3'\nassert solution('00000000000000000000000010000000') == '1'\nassert solution('111111111111111111111111111111101') == '31'\n"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == '3'\nassert solution('00000000000000000000000010000000') == '1'\nassert solution('111111111111111111111111111111101') == '31'"
    },
    {
        "number": 4535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0000000000001011') == '3'\nassert solution('0000000010000000') == '1'\nassert solution('11111111111111111111111111111101') == '31'\n\n\n'''\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('[1,2,3]') == '[1,2,4]', solution\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('[1,2,3]') == '[1,2,4]'\nassert solution('[4,3,2,1]') == '[4,3,2,2]'\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('[1,2,3]') == '[1,2,4]', \"test failed\"\nassert solution('[4,3,2,1]') == '[4,3,2,2]', \"test failed\"\nprint('all tests passed')"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"[1,2,3]\") == \"101\"\nassert solution(\"[4,3,2,1]\") == \"433\""
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n[4,3,2,1]\n''') == '[4,3,2,2]'\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('[1,2,3]') == '[1,2,4]'\nassert solution('[4,3,2,1]') == '[4,3,2,2]'"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"[1,2,3]\") == \"[1,2,4]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[4,3,2,5]\") == \"[5,4,3,2]\"\nassert solution(\"[9,9,9]\") == \"[1,0,0,0]\"\nassert solution(\"[9,9,9,9]\") == \"[1,0,0,0,0]\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '8'\n"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([1, 2, 3]) == [1, 2, 4], \"failed on input\" + str(stdin)"
    },
    {
        "number": 4536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"[1,2,3]\") == \"[1,2,4]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2', 'Sample Test 1 Failed'\nassert solution('1 2') == '3', 'Sample Test 2 Failed'\nassert solution('2 3') == '4', 'Sample Test 3 Failed'\nassert solution('1') == '1', 'Sample Test 4 Failed'\nassert solution('1 0') == '0', 'Sample Test 5 Failed'\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"4\", \"First\"\nassert solution(\"5 2\") == \"7\", \"Second\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"-1 -1\") == \"-1\"\nassert solution(\"-3 -1\") == \"-1\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\"5\", \"5\"]) == \"10\"\nassert solution([\"4\", \"8\"]) == \"14\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3'\nassert solution('4 1') == '5'\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '4'\nassert solution('2 4') == '6'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 4537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '4'\nassert solution('1 1') == '2'\nassert solution('-1 -1') == '-2'\nassert solution('-1000 -1000') == '-1000'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 6\") == \"3\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"8 5\") == \"4\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\nassert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '2'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"10 10\") == \"5\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"0 5\") == \"3\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '3'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3') == '0'\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n'''"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"15 3\") == \"3\"\nassert solution(\"10 1\") == \"1\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 5\n0 5\n-2 4\n3 4\n4 -4\n\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\nassert solution('100') == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"10\") == \"No\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\n\n\"\"\"\n\nn = input()\nn = int(n)"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\nassert solution('123') == 'No'\nassert solution('1234') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\nassert solution('1') == 'No'\nassert solution('10') == 'Yes'"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"12\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"16\") == \"No\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"\") == \"Yes\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"120\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"14\") == \"No\"\nassert solution(\"8080\") == \"Yes\"\n\n----Hints----\n- I have used *args and **kwargs in the last challenge to read the input.\n- Use *args to pass the input as a list to function call and **kwargs to pass the input as a dictionary to function call.\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'Yes'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Yes', '1'\nassert solution('12') == 'Yes', '12'\nassert solution('123') == 'No', '123'\nassert solution('1234') == 'Yes', '1234'\nassert solution('12345') == 'Yes', '12345'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"3\") == \"8\"\nassert solution(\"3\") == \"10\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        def get_cost(a: int, b: int) -> int:\n            return abs(a - b)\n\n        n = int(stdin)\n        cities = list(map(int, stdin.split()))\n        ans = 0\n        city_cost = []\n        for i in range(n):\n            city_cost.append(get_cost(cities[i], 0))\n            city_cost.append(get_cost(0, cities[i]))\n        city_cost.append(get_cost(cities[n - 1], 0))\n        city_cost.append(get_cost(0, cities[n - 1]))\n        city_cost.sort()\n        for i in range(1, n - 1):\n            ans += city_cost[i]\n        return ans\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"12\\n8\\n10\\n\"\nassert solution(\"1\") == \"0\\n0\\n0\\n\"\nassert solution(\"2\") == \"0\\n0\\n0\\n\"\nassert solution(\"3\") == \"12\\n8\\n10\\n\"\nassert solution(\"4\") == \"15\\n4\\n4\\n\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '12'\nassert solution('4') == '16'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n5 -1\n''') == '12'\nassert solution('''\n3\n3 5 -1\n''') == '8'\nassert solution('''\n3\n5 4 -1\n''') == '10'\nassert solution('''\n5\n-5 5 -1\n''') == '10'\nassert solution('''\n2\n3 3 -1\n''') == '2'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 -1\") == \"12\"\nassert solution(\"3\") == \"8\"\nassert solution(\"\") == \"\"\nassert solution(\"5\") == \"10\""
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 1\n''') == '12'\nassert solution('''3\n-1 5\n''') == '10'\nassert solution('''3\n5 -1\n''') == '8'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '12'\nassert solution('4') == '8'\nassert solution('5') == '10'\nassert solution('6') == '9'\nassert solution('7') == '10'"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"2\") == \"8\"\nassert solution(\"1\") == \"10\"\nassert solution(\"10\") == \"210\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '12\\n8\\n10'\n"
    },
    {
        "number": 4540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\nassert solution('4\\n2 4 -3\\n') == '10\\n8\\n10'"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 'consonant'\nassert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'vowel'\nassert solution(input()) == 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == 'vowel'\nassert solution('a') == 'vowel'\nassert solution('u') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('o') == 'vowel'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('WWWWBB') == '1'"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''BWBW''') == '1'\nassert solution('''WWB''') == '2'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''BBBWW''') == '1'\nassert solution('''BBBBWW''') == '2'\nassert solution('''BBBBWWW''') == '0'\nassert solution('''WWBBBBB''') == '1'\nassert solution('''WWWWWWWWWWWW''') == '0'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BWWB\") == \"1\"\nassert solution(\"BBBBBWWWWB\") == \"1\"\nassert solution(\"BWWWWWWWWB\") == \"1\"\nassert solution(\"BBBWWWWWWB\") == \"2\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('BBBWW') == '1'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BBWWW') == '1'\nassert solution('WWWWB') == '3'\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BBWWB') == '2'"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('WWBBW') == '0'"
    },
    {
        "number": 4542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBWBWW') == '3'\nassert solution('BWBWBBWBWW') == '3'\nassert solution
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('3 9') == 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"No\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"3 21\") == \"No\"\nassert solution(\"8 21\") == \"Yes\"\nassert solution(\"6 21\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 21') == \"Yes\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 21\") == \"Yes\""
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 21') == 'Yes'\n\n'''\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 22\") == \"No\"\nassert solution(\"2 5\") == \"Yes\"\nassert solution(\"2 6\") == \"No\"\nassert solution(\"3 7\") == \"Yes\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n4 5\n''') == 'Yes'\n\nassert solution('''\n1 1\n''') == 'No'\n\nassert solution('''\n100 11\n''') == 'Yes'\n\nassert solution('''\n100 101\n''') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('2 4') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 42\") == \"No\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\nassert solution('3 1 4 1 5 9 2') == '6'"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"10\") == \"9\""
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 1 4 1 5 9 2\") == \"4\"\nassert solution(\"5\\n6 5 1 4 2 3\") == \"3\"\nassert solution(\"6\\n5 5 4 1 2 3\") == \"3\"\nassert solution(\"7\\n4 1 4 1 5 9 2\") == \"4\"\nassert solution(\"7\\n6 5 1 4 2 3\") == \"4\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\nassert solution('9\\n3 1 4 1 5 9 2') == '7'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"3\""
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '4'\nassert solution('8') == '0'\nassert solution('10') == '5'\nassert solution('12') == '4'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '4'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == \"4\"\nassert solution('4\\n1 1 1 1 1') == \"4\"\nassert solution('3\\n3 1 1') == \"3\"\nassert solution('6\\n2 1 1 1') == \"2\"\nassert solution('9\\n2 1 1 1') == \"2\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(['3', '4']) == '5'\nassert solution(['4', '4']) == '6'\nassert solution(['7', '7']) == '9'\nassert solution(['9', '9']) == '15'\n\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '9'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '5'\n\"\"\"\n\nimport math\n\nn = int(input())\na = int(input())\n\nblack_count = 0\nwhite_count = math.pow(2, n) - 1\n\nwhile white_count!= black_count:\n    black_count += 1\n\nprint(black_count)\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '11'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '0'\nassert solution('10') == '10'\nassert solution('100') == '20'\nassert solution('100000000000') == '5000000000000'\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1', solution('2')\nassert solution('3') == '2', solution('3')\nassert solution('4') == '3', solution('4')\nassert solution('5') == '4', solution('5')\nassert solution('6') == '5', solution('6')\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"3\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"8\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"4\"\nassert solution(\"15\") == \"45\"\nassert solution(\"25\") == \"75\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 6') == 'YES'"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == \"YES\", \"Should return YES\"\nassert solution(\"3 5 8\") == \"NO\", \"Should return NO\""
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 3 4') == 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 6') == 'YES','sample input'\nassert solution('4 2 1') == 'NO','sample input'\nassert solution('3 2 6') == 'YES','sample input'\nassert solution('7 2 3') == 'NO','sample input'\nassert solution('3 1 3') == 'YES','sample input'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 4\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 4 6') == 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('0 1 2') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 2 3') == 'NO'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\nassert solution('900') == 'No'\nassert solution('000') == 'Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('29') == 'Yes'\nassert solution('123') == 'No'\nassert solution('2321') == 'Yes'\nassert solution('9') == 'Yes'\nassert solution('67') == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"29\") == 'Yes'\nassert solution(\"100\") == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"Yes\"\nassert solution(\"99\") == \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('13') == 'No'\nassert solution('56') == 'Yes'\nassert solution('100') == 'No'\nassert solution('9') == 'Yes'\nassert solution('0') == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"28\") == \"No\"\nassert solution(\"56\") == \"Yes\"\nassert solution(\"99\") == \"Yes\"\nassert solution(\"90\") == \"No\"\nassert solution(\"70\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('29') == \"Yes\"\nassert solution('12') == \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('29') == 'Yes'\nassert solution('2999') == 'Yes'\nassert solution('29999999') == 'Yes'"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"10 3 2\") == \"6\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"10 8 2\") == \"6\"\nassert solution(\"100 0 0\") == \"0\"\nassert solution(\"100 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"0\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 3') == '1'\nassert solution('4 5 3') == '1'\nassert solution('4 5 1') == '1'\nassert solution('7 2 4') == '1'\nassert solution('3 5 0') == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 3') == '1'\nassert solution('4 2 2') == '1'\nassert solution('10 5 10') == '2'\nassert solution('50 50 50') == '5'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 3, 3]) == \"1\"\nassert solution([5, 3, 3]) == \"2\"\nassert solution([5, 5, 3]) == \"3\"\nassert solution([5, 5, 5]) == \"0\"\nassert solution([5, 5, 5, 5, 5]) == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 3') == '1'\nassert solution('7 5 2') == '1'\nassert solution('5 5 2') == '2'\nassert solution('7 7 7') == '3'\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"4 5 3\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 3') == '1'\nassert solution('1 1 1 1') == '4'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '7'\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"7 7 7\") == \"11\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"2 4 5\") == \"4\"\nassert solution(\"6 3 4\") == \"5\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\") == \"1\""
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.##\\n###.\") == \"Yes\"\nassert solution(\"3 3\\n.##\\n###.\\n\") == \"No\"\nassert solution(\"1 1\\n.##\\n###.\") == \"No\"\nassert solution(\"1 1\\n.##\\n###.\") == \"Yes\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n\n=========================================\n=========================================\n=====ACCEPTED====\n=====Submissions====\n=====Bugs====\n\nSolution\n\nGiven a canvas of size H * W, paint a square of size 1 * 1 at the i-th row from the top and the j-th column from the left, if s_{i, j} = # or.., paint it black, and if it is #, paint it white.\n\nNow, paint all the squares of the canvas white.\n\nGiven a canvas of size H * W, paint a square of size 1 * 1 at the i-th row from the top and the j-th column from the left, if s_{i, j} = # or.., paint it black, and if it is #, paint it white.\n\nNow, paint all the squares of the canvas white.\n\nNow, paint all the squares of the canvas white.\n\nReturn a single string with all the white colored squares of the canvas.\n\nConstraints\n\n1 \u2264 H, W \u2264 50\ns_{i, j} = # or..\n\nInput Format\n\nThe first line contains the space separated values of H and W.\n\nThe next N lines contains the numbers of the canvas painted black, followed by the coordinates of a square to be painted black, followed by the coordinates of the square to be painted black. The last line contains N integers separated by spaces representing the number of times that the canvas is painted black in a row, column, or diagonally (by two sides).\n\nConstraints\n\nOutput Format\n\nReturn a single string with all the white colored squares of the canvas.\n\nSample Input 0\n\n4 4\n.#.\n###\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('20 20') == 'Yes'"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"./input.txt\") == \"Yes\"\n\n---------------------------------------------\n\npython3.8 solution.py < input.txt\nYES\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('3 3') == 'No'\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"6 6\") == \"Yes\"\nassert solution(\"4 4\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"7 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('10 40 30') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('0 0 0') == 'No'"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 20 20 30\") == \"Yes\"\nassert solution(\"10 20 30\") == \"No\"\nassert solution(\"10 30 20\") == \"No\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"20 20 20\") == \"Yes\"\nassert solution(\"30 30 30\") == \"Yes\"\nassert solution(\"40 40 40\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('15 30 10') == 'No'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 50 10\") == \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"30 20 10\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 30 20\n10 10 30\n15 15 10\n''') == 'Yes'\nassert solution('''10 20 30\n10 10 30\n15 15 10\n''') == 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 30 30\") == \"No\"\nassert solution(\"10 30 20 30\") == \"Yes\"\nassert solution(\"10 30 30 10\") == \"No\""
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"1 2 3 4\") == \"Left\"\nassert solution(\"1 2 3 4\") == \"Left\"\nassert solution(\"2 1 2 3\") == \"Left\"\nassert solution(\"1 1 1 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nprint(solution(\"3 8 7 1\"))\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"4 6 3 7\") == \"Balanced\"\nassert solution(\"1 2 3 4\") == \"Right\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Left\"\nassert solution(\"2\") == \"Left\"\nassert solution(\"3\") == \"Left\"\nassert solution(\"4\") == \"Left\"\nassert solution(\"5\") == \"Right\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"5 4 7 2\") == \"Right\"\nassert solution(\"1 2 3 4 5\") == \"Left\"\nassert solution(\"1\") == \"Balanced\"\nassert solution(\"3 7\") == \"Left\""
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 3 4') == 'Right', 'Sample Test Failed'\nassert solution('1 2 3 4') == 'Left', 'Sample Test Failed'\nassert solution('1 2 3 4') == 'Right', 'Sample Test Failed'\nassert solution('1 2 3 4') == 'Left', 'Sample Test Failed'\nassert solution('1 2 3 4') == 'Right', 'Sample Test Failed'\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"0 0 0 0\") == \"Left\"\nassert solution(\"-1 -2 -3 -4\") == \"Left\"\nassert solution(\"-5 -6 -7 -8\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 8 7 1') == 'Left', solution('3 8 7 1')\nprint(solution('3 8 7 1'))\n"
    },
    {
        "number": 4551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 8 7 1') == 'Left'\nassert solution('2 5 1 3') == 'Balanced'\nassert solution('7 4 5 2') == 'Right'"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '8'\nassert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '10'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"14\""
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\nassert solution('3\\n4 5 6 7 8 9 -2 -3 4 -2') == '12'"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '8'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '8'\nassert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input) == '8'\nassert solution(real_input) == '1053'\n"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '8'\nassert solution('3') == '10'\nassert solution('5') == '7'\n\nsolution([\n    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],\n    [3, 4, 5, 6, 7, 8, 9, -2, -3, 4, -2],\n    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],\n    [3, 4, 5, 6, 7, 8, 9, -2, -3, 4, -2],\n    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],\n    [3, 4, 5, 6, 7, 8, 9, -2, -3, 4, -2],\n    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],\n    [3, 4, 5, 6, 7, 8, 9, -2, -3, 4, -2],\n    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],\n    [3, 4, 5, 6, 7, 8, 9, -2, -3, 4, -2],\n    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],\n    [3, 4, 5, 6, 7, 8, 9, -2, -3, 4, -2],\n]) == '10'\nassert solution('5') == '7'\nassert solution('3') == '10'"
    },
    {
        "number": 4552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\nimport sys\nimport io\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n269-6650') == 'Yes'\nassert solution('3 4\\n0-6650') == 'No'\nassert solution('3 4\\n0-6-50') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 3 4\\n') == 'Yes'\nassert solution('2 3\\n6-1\\n') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n269-6650\\n') == 'Yes'\nassert solution('5 5\\nA123456789\\n') == 'Yes'\nassert solution('3 4\\nA-\\n') == 'No'\nassert solution('3 4\\nA-\\n') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'Yes', 'Sample test 1 failed'\nassert solution('6 4') == 'No', 'Sample test 2 failed'\nassert solution('1 2') == 'Yes', 'Sample test 3 failed'\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 5\") == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\nA B\") == \"Yes\"\nassert solution(\"1 2\\nA\") == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\nA, B = input().split()"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input(\"\")) == \"0\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"4 2 3\") == \"1\"\nassert solution(\"5 4 6\") == \"0\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"3 2 6\") == \"1\"\nassert solution(\"2 1 3\") == \"3\"\n\n'''\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 6') == '1'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 6') == '1'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"3 2 3\") == \"1\"\nassert solution(\"5 2 2\") == \"3\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 6\") == \"1\"\nassert solution(\"3 2 6\") == \"1\"\nassert solution(\"8 5 3\") == \"3\"\nassert solution(\"4 3 2\") == \"1\"\nassert solution(\"8 6 5\") == \"2\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '1'"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 5') == '1'\nassert solution('2 2 5') == '1'\nassert solution('3 2 5') == '3'\nassert solution('2 3 5') == '1'\nassert solution('3 4 5') == '0'\n"
    },
    {
        "number": 4554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"./testInputs/input_test_01.txt\") == \"1\\n\"\nassert solution(\"./testInputs/input_test_02.txt\") == \"0\\n\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 1\") == \"1\"\nassert solution(\"5 3 1\") == \"1\"\nassert solution(\"5 1 3\") == \"3\"\nassert solution(\"5 3 1\") == \"3\"\nassert solution(\"3 8 2\") == \"8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('4 5 1') == '4'\nassert solution('6 7 2') == '6'\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('3 6 5') == '6'\nassert solution('3 8 2') == '3'"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 8 2\n''') == '3'\nassert solution('''\n3 5 3\n''') == '3'\nassert solution('''\n7 6 5\n''') == '7'\nassert solution('''\n10 10 10\n''') == '10'\nassert solution('''\n100 100 100\n''') == '100'\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"3 4 5 6 7 8\") == \"3 4 5 6 7 8\""
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('3 9 2') == '9'\nassert solution('3 9 8 2') == '8'\nassert solution('3 9 8 9') == '9'\nassert solution('1 2 3 4 5') == ''\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 8 2\") == \"3\"\nassert solution(\"5 6 2\") == \"4\"\nassert solution(\"5 1 2\") == \"5\"\nassert solution(\"8 2 3\") == \"7\"\nassert solution(\"4 3 2\") == \"3\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"5 8 2\") == \"5 6 7 8 9\"\nassert solution(\"7 8 2\") == \"7 8 9\"\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        a, b, k = stdin.split(' ')\n        k = int(k)\n        a = int(a)\n        b = int(b)\n        max_in_order = sorted(list(range(a, b + 1)), reverse=False)\n        min_in_order = sorted(list(range(a, b + 1)), reverse=True)\n        solution = []\n        for i in range(k):\n            if i < k - 1:\n                if (max_in_order[i] - min_in_order[i + 1]) <= (k - i - 1):\n                    solution.append(max_in_order[i])\n                elif (max_in_order[i + 1] - min_in_order[i]) <= (k - i - 1):\n                    solution.append(min_in_order[i])\n                else:\n                    solution.append(max_in_order[i])\n                    solution.append(min_in_order[i])\n            else:\n                if (max_in_order[i] - min_in_order[i - 1]) <= (k - i - 1):\n                    solution.append(max_in_order[i])\n                elif (max_in_order[i - 1] - min_in_order[i]) <= (k - i - 1):\n                    solution.append(min_in_order[i])\n                else:\n                    solution.append(max_in_order[i])\n                    solution.append(min_in_order[i])\n        return''.join(map(str, solution))\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 10 3\n''') == '5'\nassert solution('''\n5 10 1\n''') == '1'\nassert solution('''\n5 10 4\n''') == '4'\n'''\n"
    },
    {
        "number": 4555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\nassert solution('5 9 5 3') == '5 3'\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\nassert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"I love programming. I use python. I am a good programing expert.\") == \"I love progamming I use py\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\ns = input()\nx = ord(s[0])\n\nprint(\"\".join(chr(i) for i in range(x, ord(s[1]) + 1) if i < 128))"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder s Contest\") == \"AC\"\nassert solution(\"AtCoder Beginner Contest\") == \"AC\"\nassert solution(\"AtCoder Beginner Contest 2\") == \"AB\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\", f\"Your solution {solution('AtCoder s Contest')} is not correct.\"\nprint(solution(\"AtCoder Beginner Contest\"))\nprint(solution(\"AtCoder Beginner Contest\"))\nprint(solution(\"AtCoder Beginner Contest\"))\nprint(solution(\"AtCoder Beginner Contest\"))\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"ABC\"\n\nprint(\"Solution accepted.\")"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''AtCoder s Contest''') == 'ABC'\n"
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder s Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AtCoder s Contest') == 'ABC'\nassert solution('AtCoder Beginner Contest') == 'ABC'\n\ninput:\nAtCoder s Contest\noutput:\nABC\n\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"3 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"5 6 5\") == \"NO\"\nassert solution(\"10 10 10\") == \"YES\"\nassert solution(\"5 6 5\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5 3\") == \"YES\"\nassert solution(\"1 0 1\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"3 5 4\"\"\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 5 4\n''') == 'YES'\n'''\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 4') == 'YES'\nassert solution('3 2 4') == 'NO'\nassert solution('3 3 5') == 'YES'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('1 2 5') == 'NO'\nassert solution('2 3 5') == 'YES'\nassert solution('3 2 3') == 'YES'\nassert solution('1 1 2') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100 17\") == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1,1) == \"83\"\nassert solution(1,2) == \"83\"\nassert solution(2,1) == \"83\"\nassert solution(2,2) == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"100 17\") == \"83\"\nassert solution(\"100000000000000000\") == \"0\"\nassert solution(\"100000000000000000\") == \"0\"\nassert solution(\"100000000000000000\") == \"0\"\nassert solution(\"100000000000000000\") == \"0\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 1') == '2'\nassert solution('3 2') == '4'\nassert solution('4 1') == '4'\n\n\"\"\"\n\nX, T = map(int, stdin.split())"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 17') == '83'\nassert solution('10 5') == '10'\n\"\"\"\n\nx, t = [int(i) for i in input().split()]\nsand_out = x*(t/x)\nprint(int(sand_out))\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '5'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''100 17\n''') == '83'\nassert solution('''100 3\n''') == '83'\nassert solution('''100 3\n''') == '86'\nassert solution('''10 1\n''') == '10'\nassert solution('''10 1\n''') == '10'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '1\\n'\nassert solution('1\\n2') == '2\\n'\nassert solution('1\\n3') == '3\\n'\nassert solution('1\\n4') == '4\\n'\nassert solution('1\\n5') == '5\\n'\n"
    },
    {
        "number": 4558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\", \"fails\"\n\nassert solution(\"2 2\") == \"2\", \"fails\"\n\nassert solution(\"3 3\") == \"3\", \"fails\"\n\nassert solution(\"4 4\") == \"4\", \"fails\"\n\nassert solution(\"5 5\") == \"5\", \"fails\""
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == '1000000000000000000', \"Wrong result\"\nassert solution(\"1000000000 1000000000\") == '1000000000000000000', \"Wrong result\"\nassert solution(\"1000000100000000000000000\") == '1000000000000000000', \"Wrong result\""
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '1000000000000000000'\n\"\"\"\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nn = int(input())\na = list(map(int, input().split()))\ns = ''.join(str(a[i] * a[i + 1]) for i in range(len(a) - 1))\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1000000000 1000000000\\n\") == \"1000000000000000000\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_with_stdin(self):\n        pass"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1000000000 1000000000') == '1000000000000000000'\nassert solution('1\\n0') == '-1'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\""
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '1'\nassert solution('3\\n2\\n') == '2'\nassert solution('4\\n2\\n') == '2'\nassert solution('5\\n4\\n') == '4'\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1000000000 1000000000') == '1000000000000000000'\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1000000000000000000', 'Should be 1000000000000000000'\nassert solution('2') == '-1', 'Should be -1'\nassert solution('10') == '-1', 'Should be -1'\nassert solution('101') == '1000000000000000000', 'Should be 1000000000000000000'\n"
    },
    {
        "number": 4559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1000000000000000000\", 'Check first example'\nassert solution(\"4\") == \"-1\", 'Check second example'"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\nassert solution(\"999\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'Yes'\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"100\") == \"No\"\nassert solution(\"1000\") == \"Yes\""
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2018') == 'Yes'\nassert solution('0') == 'No'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"10000\") == \"Yes\"\nassert solution(\"12345\") == \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n5''') == 'Yes'\nassert solution('''3\n2''') == 'Yes'\nassert solution('''8\n2''') == 'Yes'\nassert solution('''3\n1''') == 'No'\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('869120') == 'Yes'\nassert solution('25') == 'No'\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('10') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'No'\nassert solution('0') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('1000') == 'Yes'\nassert solution('10000') == 'Yes'\n"
    },
    {
        "number": 4560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"150\") == \"No\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n3 5\n''') == 'dangerous'\nassert solution('''\n2 5\n3 6\n''') =='safe'\nassert solution('''\n1 1\n''') == 'dangerous'\n'''\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == 'dangerous'\nassert solution('1 2 2') == 'dangerous'\nassert solution('1 1 2') =='safe'\nassert solution('1 1 1') =='safe'\nassert solution('1 1 0') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5 6\n''') =='safe'\nassert solution('''2 2 6\n''') == 'dangerous'\nassert solution('''2 1 2\n''') == 'dangerous'\nassert solution('''2 0 0\n''') =='safe'\nassert solution('''2 0 1\n''') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 3') =='safe'\nassert solution('1 2 3') == 'dangerous'\nassert solution('1 1 2') == 'dangerous'\nassert solution('1 3 6') == 'dangerous'\nassert solution('1 3 5') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') =='safe'\nassert solution('3 3 6') == 'dangerous'\nassert solution('1 0 1') == 'dangerous'\nassert solution('4 3 6') =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 6') =='safe'\nassert solution('5 3 6') == 'dangerous'\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 10^9 - \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0438\u043f\u043e\u0432: X, A, B.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b: X, A, \u0438 \u0412. \u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u0412\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e - \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: X, A, \u0438 \u0412.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b: X, A \u0438 \u0412.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0441\u043b\u043e\u0432: safe, dangerous \u0438\u043b\u0438 dangerous, safe.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0432\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n\u0412\u0435\u0440\u0441\u0438\u044f \u0432\u044b\u0448\u0435, \u043a\u0430\u043a \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0448\u0435, \u043a\u0430\u043a \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 f(x) = x^2;\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0432\u044b\u0448\u0435, \u043a\u0430\u043a \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0448\u0435, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0437\u043d\u0430\u0447\u0430\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442. \u0435. \u0432\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445:\n\nsafe\n\n\u0412\u0435\u0440\u0441\u0438\u044f \u043d\u0438\u0436\u0435, \u043a\u0430\u043a \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0438\u0436\u0435, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0437\u043d\u0430\u0447\u0430\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442. \u0435. \u0432\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445:\n\ndangerous\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043e\u0434 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043a\u0440\u0430\u0441\u043e\u0442\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u0439\n\nSample Input 1\n\n5 4 6\nSample Output 1\n\ndangerous\n\nSample Input 2\n\n4 3 6\nSample Output 2\n\ndangerous\n\nSample Input 3\n\n5 3 6\nSample Output 3\n\nsafe\n\nSample Input 4\n\n5 3 2\nSample Output 4\n\nsafe\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 10^9 - \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: X, A, \u0438 \u0412.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b: X, A, \u0438 \u0412.\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e - \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: X, A, \u0438 \u0412.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b: X, A \u0438"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'dangerous'\nassert solution('1 1 3') =='safe'\nassert solution('1 3 1') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 2') =='safe'\nassert solution('1 1 1') == 'dangerous'\nassert solution('3 3 4') == 'dangerous'\nassert solution('4 3 3') =='safe'\nassert solution('5 2 1') =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3 6') =='safe'"
    },
    {
        "number": 4561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 1') =='safe'\nassert solution('4 1 0') == 'dangerous'\nassert solution('4 0 5') == 'dangerous'\nassert solution('2 4 3') == 'dangerous'\nassert solution('3 3 2') == 'dangerous'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"9\"\nassert solution(\"5\") == \"25\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(1) == '2'\nassert solution(5) == '4'\nassert solution(10) == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '9', 'Test 1 failed'\nassert solution('100') == '100', 'Test 2 failed'\n\n---YOUR TASK------\nGiven a non-negative integer N, print the largest square number that is not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('10') == '9'\nassert solution('20') == '16'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '9'\nassert solution('5') == '5'\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('20') == '25'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10\n\n1''') == '9'\nassert solution('''10\n\n1\n\n2''') == '1'\nassert solution('''3\n\n1\n\n2''') == '1'\nassert solution('''4\n\n1\n\n2\n\n3''') == '3'\nassert solution('''5\n\n1\n\n2\n\n3\n\n4''') == '4'\n"
    },
    {
        "number": 4562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('5') == '9'\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2\\n1 1') == '10'\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2 3\\n1 2\\n3 2\") == \"10\"\nassert solution(\"10\\n2 3\\n1 2\\n3 2\") == \"18\"\nassert solution(\"10\\n2 3\\n1 2\\n3 2\") == \"18\"\nassert solution(\"1\\n2 3\\n1 2\\n3 2\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2 3\") == \"10\"\nassert solution(\"3\\n2 3\") == \"10\"\nassert solution(\"3\\n2 3\") == \"10\""
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"25\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '10'\nassert solution('5') == '10'\nassert solution('10') == '19'\nassert solution('100') == '193'\nassert solution('1000') == '1972468'\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"10\"\nassert solution(\"1 1\") == \"10\"\nassert solution(\"3 2\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n5\n1 1\n3 3\n1 2\n5 5\n3 3\n1 2\n\"\"\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2 3\n1 1\n3 2\n''') == '10'\nassert solution('''\n10\n1 1\n2 2\n4 3\n''') == '10'\nassert solution('''\n20\n3 4\n1 1\n2 2\n''') == '10'\nassert solution('''\n1000000\n100000 100000\n''') == '10000000'\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3\\n1 1\\n3 2') == '10'\nassert solution('5\\n2 1\\n3 1\\n4 2\\n3 2') == '8'\nassert solution('2\\n2 1\\n1 3') == '1'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abc') == 'yes'\nassert solution('abcde') == 'no'\nassert solution('abcdeabcdefg') == 'yes'\nassert solution('abcdefgh') == 'no'\nassert solution('abcdefghi') == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Uncopyrightable\") == \"yes\"\nassert solution(\"Uncopyrightables\") == \"no\"\nassert solution(\"It's a secret.\") == \"yes\"\nassert solution(\"It's a secret.\") == \"no\"\nassert solution(\"it's a secret\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 'yes'\nassert solution('a') == 'yes'\nassert solution('abcdefghij') == 'no'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'no'\nassert solution('abcdefghijklmnopqrstuvwxyz1234567890') == 'yes'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"solution\") == \"yes\"\nassert solution(\"test\") == \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"abracadabra\") == \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'no', \"First\"\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'yes', \"Second\"\nassert solution('abcdgjhiklmnopqrstuvwxyz') == 'no', \"Third\"\nassert solution('123456789') == 'yes', \"Fourth\"\nassert solution('12345678901') == 'no', \"Fifth\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(1) == 'yes', 'Testing Failed'"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('p') == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"\") == \"no\"\nassert solution(\"zebra\") == \"yes\"\nassert solution(\"\") == \"no\"\nassert solution(\"abc\") == \"no\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\nWEEWW\"\n    ) == \"1\"\nassert solution(\n    \"3\\nWWWW\"\n    ) == \"1\"\nassert solution(\n    \"5\\nWEEWW\\n\"\n    ) == \"0\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nWEEWW\\n\") == \"1\"\nassert solution(\"3\\nWEEWE\\nEEWEE\\n\") == \"2\"\nassert solution(\"1\\n\") == \"0\"\nassert solution(\"2\\n\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nWEEWW') == '1'\nassert solution('10\\n
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nWEEWW\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nWEEWW\") == \"1\"\nassert solution(\"7\\nWWEEWWWW\") == \"1\"\nassert solution(\"6\\nWWEEWWWWW\") == \"3\"\nassert solution(\"2\\nWE\") == \"0\"\nassert solution(\"3\\nWE\") == \"1\"\n\n\"\"\"\nfrom itertools import permutations\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nWEEWW') == '1'\nassert solution('10\\n
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 4565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"2\\n2\\n1\\n1\"\nassert solution(\"5 3\") == \"2\\n3\\n2\\n1\\n1\"\nassert solution(\"6 3\") == \"3\\n3\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\nassert solution(\"6 5\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n3 4\\n4 5\\n5 6\\n\") == \"2\\n2\\n1\\n1\"\nassert solution(\"8 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n6 8\\n7 8\\n\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 2\n2 3\n1 4\n\n''') == '2\\n2\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 3') == '2'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 4\") == \"3\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 7\") == \"1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2\\n2\\n1\\n1'"
    },
    {
        "number": 4566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n1 4\n''') == '2\\n2\\n1\\n1'\nassert solution('''\n4 3\n1 2\n2 3\n1 4\n''') == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '25'\nassert solution('10') == '0'\nassert solution('10') == '0'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"1\\n5\\n10\\n15\\n\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('4\\n3\\n5\\n9') == '30'"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '25'\nassert solution('4') == '30'\nassert solution('6') == '40'\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"25\"\nassert solution(\"5\") == \"30\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"25\"\nassert solution(\"3\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n5\n10\n15\n''') == '25', \"Should be 25\"\nassert solution('''4\n5\n10\n15\n''') == '0', \"Should be 0\"\nassert solution('''4\n5\n10\n15\n''') == '30', \"Should be 30\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n5\\n10\\n15\\n\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == \"25\"\nassert solution('4') == \"30\"\n\nstdin = \"4\"\nn = int(stdin)\narr = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '25'\nassert solution('3') == '30'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n') == '2'\nassert solution('8\\n') == '1'\nassert solution('12\\n') == '1'\nassert solution('16\\n') == '1'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"aaba\") == \"3\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"2\"\n\nS = input()\nN = len(S)\nx = []\ny = []\n\nfor i in range(0,N-1):\n    x.append(S[i])\n    y.append(S[i+1])\n    \nprint(len(set(x).intersection(set(y))))"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\naabbca\n\n''') == '2'\nassert solution('''10\naabbca\n\n''') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\na\n''') == '0'\nassert solution('''10\nabc\n''') == '1'\nassert solution('''6\naaab\n''') == '2'\nassert solution('''10\naaabb\n''') == '2'\nassert solution('''12\naaaaaaaaaa\n''') == '3'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\nabcd') == '2'\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\nabcb') == '2'\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"Empty\"\nassert solution(\"aaabbc\") == \"2\", \"a and b\"\nassert solution(\"aabbca\") == \"2\", \"a and b\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Sunny'"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\"\n\ninput_string = input()\n\nprint(input_string)\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == 'Cloudy'\n\n'''"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Sunny'\nprint('Congratulations, you are done!')\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Sunny'"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\n\n---------------------------------\n\n'''\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Sunny\\nCloudy\\nRainy') == 'Cloudy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Rainy'\nprint('Congratulations, you passed all tests!')\n"
    },
    {
        "number": 4569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 120\\n\") == \"119\"\nassert solution(\"5 2 120\\n\") == \"120\"\nassert solution(\"5 3 120\\n\") == \"119\"\nassert solution(\"5 4 120\\n\") == \"120\"\nassert solution(\"5 5 120\\n\") == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3 10\") == \"12\"\nassert solution(\"10 3 10\") == \"8\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"4 1 3\") == \"3\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 0 120') == '119', 'First test'\nassert solution('1 1 120') == '120', 'Second test'\nassert solution('3 3 120') == '123', 'Third test'\nassert solution('5 5 120') == '135', 'Fourth test'\nassert solution('6 6 120') == '144', 'Fifth test'\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 20 10\") == \"10\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '119'\nassert solution('7 17 120') == '119'\nassert solution('20 10 120') == '120'\nassert solution('8 17 120') == '119'\nassert solution('7 5 20') == '19'\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"1 10 10\") == \"10\"\nassert solution(\"3 5 8\") == \"16\"\nassert solution(\"6 3 15\") == \"9\""
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"4 7 10\") == \"5\"\nassert solution(\"5 5 5\") == \"2\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2\") == \"2\"\nassert solution(\"7 17 120\") == \"119\"\nassert solution(\"13 13 7\") == \"32\"\nassert solution(\"10 7 10\") == \"19\"\nassert solution(\"8 8 8\") == \"16\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2 2\") == \"0\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '3800'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n''') == '3800'\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"3800\"\nassert solution(\"2 2\") == \"2900\"\nassert solution(\"3 3\") == \"142857\"\nassert solution(\"4 4\") == \"20833\"\nassert solution(\"5 5\") == \"505050\"\n\n'''"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\nimport math"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4\n''') == '2020'\nassert solution('''\n2 2\n''') == '1974'\nassert solution('''\n1 1\n''') == '1900'\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n\nstdin = input()\nn, m = map(int, stdin.split())"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '3800'\nassert solution('1 2') == '3900'\nassert solution('3 1') == '3600'\nassert solution('3 2') == '3752'\nassert solution('2 1') == '1'\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1900'\nassert solution('1 2') == '2200'\n"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1900'\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '3800'\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\nassert solution('atcoderregularcontest') == 'b'\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"abcd\") == None\nassert solution(\"xyz\") == None\nassert solution(\"a\") == \"b\"\nassert solution(\"ab\") == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"b\"\nassert solution(input()) == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"atcoderregularcontestabcd\") == \"c\""
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''atcoderregularcontest''') == 'b'\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"atcoderregularcontest\") == None\nassert solution(\"abababababab\") == None\nassert solution(\"ababababab\") == \"b\"\nassert solution(\"abc\") == \"b\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == None\nassert solution('a') == 'b'\nassert solution('atcoderregularcontest') == 'c'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'z'\nprint(solution(stdin))"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read().strip()\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"a\") == None\nassert solution(\"\") == None\nassert solution(\"aba\") == \"b\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3\\n') == '4\\n3\\n3\\n4'\nassert solution('5\\n2 4 4 3 1\\n') == '4\\n3\\n4\\n3\\n3'"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4\\n'\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n2 4 4 3''') == '4 3 3 4'\n\nassert solution('''5\n2 4 4 3 5''') == '5 5 4 3 4'\n\nassert solution('''6\n2 4 4 3 5 6''') == '6 6 5 4 5 4'\n\nassert solution('''4\n2 4 4 3\n4 3 5 6''') == '4 4 3 3 4 5 6'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '3'\nassert solution('7') == '4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4') == '4\\n3\\n3\\n4'\nassert solution('4\\n4\\n4\\n4') == '4\\n4\\n4\\n4'\nassert solution('8\\n8\\n8\\n8') == '8\\n8\\n8\\n8'"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\nassert solution('5\\n2 4 4 3 5') == '5\\n4\\n4\\n4\\n4'"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2 4 4 3\n''') == '4 3 4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2 3 4 1 5''') == '4 3'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 1 2 4 2 1\") == \"2\"\nassert solution(\"4\\n3 3 4 3 1\") == \"0\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n5 1 2 4 2 1') == '2'\nassert solution('4\\n3 1 2 4 2 1') == '0'\nassert solution('6\\n3 1 2 4 2 1') == '4'\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"10\\n3 1 2 4 5 1 2 3 5\") == \"2\"\nassert solution(\"10\\n3 1 2 4 5 1 2 3 5\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\""
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"6\") == \"2\""
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 1 2 4 2 1\n''') == '2'\nassert solution('''\n4\n3 1 2 4 2 1\n''') == '0'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"7\") == \"8\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"8\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n7 1\n2\n5\n10\n\"\"\") == \"8\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\nassert solution('4\\n3 2\\n6\\n5') == '10'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '8'\nassert solution('7') == '8'\nassert solution('10') == '8'\nassert solution('20') == '16'\nassert solution('30') == '24'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n7 1\\n2\\n5') == '8'\nassert solution('1\\n1\\n1') == '1'\nassert solution('3\\n2\\n1') == '4'\nassert solution('4\\n4\\n4') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '8'\nassert solution('2') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n7 1\n2\n5\n10''') == '8'\nassert solution('''6\n5 1\n2\n3\n8\n9\n10''') == '11'\n"
    },
    {
        "number": 4575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"8\"\nassert solution(\"5\") == \"9\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n2\\n500\") == \"2\"\nassert solution(\"2\\n2\\n2\\n200\") == \"0\"\nassert solution(\"2\\n2\\n2\\n100\") == \"1\"\nassert solution(\"2\\n2\\n2\\n500\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n3\n100''') == \"2\"\nassert solution('''5\n20\n20\n20\n20\n20''') == \"4\"\nassert solution('''1\n2\n3\n3\n2\n2''') == \"2\"\nassert solution('''1\n2\n3\n3\n3\n3''') == \"4\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '2'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"0\"\nassert solution(2) == \"1\"\nassert solution(3) == \"2\"\nassert solution(4) == \"3\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '2'\nassert solution('2') == '2'\nassert solution('2') == '2'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n2\\n200\") == \"1\"\nassert solution(\"2\\n2\\n2\\n1000\") == \"0\"\nassert solution(\"3\\n3\\n3\\n1000\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('-3 3 2') == 'No'\nassert solution('-3 4 3') == 'Yes'\nassert solution('0 3 2') == 'No'\nassert solution('-5 3 2') == 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"10 0 1\") == \"No\"\nassert solution(\"10 10 10\") == \"Yes\"\nassert solution(\"0 0 0\") == \"Yes\"\nassert solution(\"0 -1 0\") == \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"0 0 2\") == \"Yes\"\nassert solution(\"0 0 0\") == \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"0 -2 0\") == \"Yes\"\nassert solution(\"0 -10 10\") == \"Yes\"\nassert solution(\"-1 0 0\") == \"Yes\"\nassert solution(\"1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 5 2\") == \"No\"\nassert solution(\"1 1 5\") == \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1, 3, 2]) == 'Yes'\nassert solution([3, 1, 2]) == 'No'\nassert solution([3, 1, 3]) == 'Yes'\nassert solution([1, 3, 1]) == 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('10 500\\n400\\n100\\n500\\n200\\n200\\n400') == '6'\nassert solution('7 500\\n400\\n100\\n500\\n200\\n200\\n400') == '5'\nassert solution('7 500\\n300\\n100\\n500\\n200\\n200\\n400') == '4'\nassert solution('3 1000\\n300\\n100\\n500\\n200\\n200\\n400') == '3'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\""
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 1\") == \"1\""
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\nassert solution(\"5 4\\n1\\n2\\n3\\n4\\n5\") == \"5\"\nassert solution(\"5 10\\n5\\n10\\n4\\n3\\n2\\n1\") == \"0\"\nassert solution(\"3 1000\\n1000\\n1000\\n1000\") == \"1\"\nassert solution(\"1 1000\\n1000\\n1000\\n1000\") == \"1\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('4 1000\\n160\\n120\\n100\\n140') == '3'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('1\\n120\\n100\\n140') == '1'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('2 4 5') == '4'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '3'\nassert solution('3 4') == '2'\nassert solution('4 5') == '1'\nassert solution('5 6') == '1'\n"
    },
    {
        "number": 4578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1000\\n120\\n100\\n140\") == \"9\"\nassert solution(\"1 1000000000\\n1000000\\n1000000\\n1000000\") == \"9\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\napple\\norange\\napple') == \"2\"\nprint(solution(input()))"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\na\na\na\na\na''') == '2'\nassert solution('''10\na\na\na\na\na''') == '1'\nassert solution('''20\na\na\na\na\na\na\na\na\na\na''') == '2'\nassert solution('''100\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na''') == '3'\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'\nassert solution('6') == '1'\n\"\"\"\n\nn = int(input())\ncount = 0\nwhile n > 0:\n    count += 1\n    n = int(input())\nprint(count)\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\napple\norange\napple\n\"\"\") == \"2\"\nassert solution(\"\"\"1\na\n\"\"\") == \"1\"\nassert solution(\"\"\"2\na\n\"\"\") == \"1\"\nassert solution(\"\"\"10\na\nb\na\na\nb\nb\na\nb\na\na\nb\na\n\"\"\") == \"5\"\nassert solution(\"\"\"6\na\nb\na\na\na\na\n\"\"\") == \"4\""
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\napple\norange\napple\"\"\") == \"2\"\n\nassert solution(\"\"\"10\nhello\nhello\nhello\nhello\nhello\nhello\nhello\nhello\nhello\"\"\") == \"5\"\n\nassert solution(\"\"\"2\nhello\"\"\") == \"1\"\n\nassert solution(\"\"\"1\nhello\"\"\") == \"0\"\n\nassert solution(\"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\"\"\") == \"1\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2100 2500 2700 2700\n''') == '2 2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2100 2500 2700 2700\n''') == '2 2'"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5 100\\n\") == \"1 2\"\nassert solution(\"2\\n5 100\\n\") == \"2 3\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2 2\""
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2 2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('3') == '3'\nassert solution('5') == '2'\nassert solution('9') == '4'\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\nassert solution('3\\n1253 868 820 765') == '2 2'\nassert solution('5\\n902 745 809 742 729') == '3 3'"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2100 2500 2700 2700\n''') == '2 2'\nassert solution('''\n1\n11\n''') == '1 1'\n"
    },
    {
        "number": 4580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2 2'"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ooxxo\") == \"900\"\nassert solution(\"ooxxo\") == \"800\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('o') == '900'\nassert solution('x') == '700'\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ooxx') == '900'\nassert solution('xxo') == '0'\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('oxo') == '900'\nassert solution('xo') == '0'"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('o') == '900'\nassert solution('x') == '0'\nassert solution('xo') == '900'\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == \"900\"\n\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('x') == '0'\nassert solution('o') == '700'\nassert solution('xx') == '700'\nassert solution('xxo') == '800'\nassert solution('xxoo') == '800'\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\noxo\n\"\"\"\n) == \"900\"\nassert solution(\n\"\"\"\nooxx\n\"\"\"\n) == \"900\"\nassert solution(\n\"\"\"\nxxo\n\"\"\"\n) == \"900\"\nassert solution(\n\"\"\"\nooox\n\"\"\"\n) == \"900\"\nassert solution(\n\"\"\"\noxxx\n\"\"\"\n) == \"900\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('o') == '700'\nassert solution('x') == '700'\nassert solution('ooxx') == '900'\nassert solution('xxo') == '900'\nassert solution('ooxxx') == '1100'\n"
    },
    {
        "number": 4581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('xo') == '700'\nassert solution('ox') == '700'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('H H') == 'H'\nassert solution('D H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H H') == 'H'\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('D H') == 'H'\nassert solution('H D') == 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('H H') == 'H'\nassert solution('D H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D D') == 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H H') == 'H'\nassert solution('D H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D D') == 'D'\n\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"H\"\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('D H') == 'D'\nassert solution('H D') == 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H H') == 'H'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''ABCD\n''') == '1+2+2+2=7'\nassert solution('''1222\n''') == '1+2+2+2=7'\nassert solution('''ACAB\n''') == '1-2+2-2=7'\nassert solution('''CADD\n''') == '1+2+2+2=7'"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('12345678') == '1+2+3+4+5+6+7=14'\nassert solution('131323444') == '1+3+4+3+4+4+3+4+4=23'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"1+2+2+2\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == \"\"\nassert solution(\"1222\") == \"1+2+2+2=7\"\n\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('10222') == '1-2+2-2=7'\nassert solution('10123') == '1+1-2+3-3=7'\nassert solution('1237') == '1+2-2+3=7'\nassert solution('1231') == '1+1-2-1=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"1+2+2+2=7\""
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('12321') == '1+2+3=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('2212') == '1+2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1222') == '1+2+2+2=7'\nassert solution('1222') == '1+2+2+2=7'"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1 2 2\\n\") == \"2\\n0\\n0\\n\", \"Should return 2 because the first member has 2 immediate subordinates.\"\nassert solution(\"2\\n2 1 2\\n\") == \"2\\n0\\n0\\n\", \"Should return 2 because the second member has 2 immediate subordinates.\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '0'"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5, 1, 2, 2]) == '2 2'"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '2 2 0 0 0'\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2,1,2,2]) == \"2\\n2\\n0\\n0\\n0\""
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n\") == \"0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"2\\n2\\n0\\n0\\n0\"\nprint(solution(\"5\"))\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('6') == '3'\nassert solution('5') == '4'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('1') == '2'\nassert solution('1') == '1'\nassert solution('-1') == '2'\nassert solution('-1') == '1'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('10') == '0'\nassert solution('5') == '2'\nassert solution('6') == '2'\nassert solution('10') == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('9') == '10'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('3') == '1'\nassert solution('10') == '11'\n"
    },
    {
        "number": 4585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input(\"\")) == \"0\"\nassert solution(input(\"10\")) == \"9\"\n\n-----------------------------------\n\nx = int(input())\nprint(x)"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('11199') == 'No'\nassert solution('1234') == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1118\") == \"Yes\""
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1118') == \"Yes\", \"sample test 1\"\nassert solution('1112') == \"No\", \"sample test 2\"\nassert solution('1111') == \"Yes\", \"sample test 3\""
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1111') == 'Yes'\nassert solution('88888') == 'No'\nassert solution('1118') == 'Yes'\nassert solution('3999') == 'No'\nassert solution('11111') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1118') == \"Yes\", \"Wrong\"\nassert solution('1187') == \"No\", \"Wrong\"\nassert solution('1234') == \"Yes\", \"Wrong\"\nassert solution('1234') == \"Yes\", \"Wrong\"\nassert solution('1234') == \"Yes\", \"Wrong\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1100\") == \"No\"\nassert solution(\"1111\") == \"Yes\"\nassert solution(\"12345\") == \"No\"\n\n--------------------------------------------------------------\n\n### --- Day 4: Passport Processing ---\n\n## Task 1\n\nIn one easy-to-read test, you had a list of lines detailing the passports in a passport file. The passport data consists of a series of key-value pairs, separated by either whitespace or newlines.\n\nFor example, suppose you had the following test file:\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('111') == 'No'"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"111\") == \"No\"\nassert solution(\"1\") == \"No\"\nassert solution(\"\") == \"No\"\nassert solution(\"123456789\") == \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1, 2, 3, 4, 5]) == \"3\"\nassert solution([2, 4, 6, 8, 10]) == \"5\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"3\""
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n1 5\n2 4\n3 6\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n2\n3 2\n4 2\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'\nassert solution('3\\n3 4 5\\n3 3 2\\n3 4 1\\n2 3 2') == '2'\nassert solution('3\\n4 4 5\\n4 3 2\\n4 4 1\\n2 3 2') == '1'\nassert solution('3\\n2 4 5\\n2 3 2\\n2 3 2') == '2'\nassert solution('3\\n1 4 5\\n1 3 2\\n1 3 2') == '1'\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '3'\nassert solution(input) == '1'"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 5\n2 4\n3 6\n''') == '3'\nassert solution('''\n2\n3 2\n3 3\n3 4\n''') == '1'\n''')\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3'\nassert solution('5') == '3'\nassert solution('6') == '4'\nassert solution('1') == '2'\n"
    },
    {
        "number": 4587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([2, 5, 4]) == '3'\nassert solution([3, 6, 5]) == '3'\nassert solution([1, 2, 1, 2]) == '3'\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"A B\") == \"A\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A D\") == \"<\"\nassert solution(\"A E\") == \"<\"\nassert solution(\"A E\") == \"<\"\nassert solution(\"A E\") == \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"A B\") == \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"D E\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"A A\") == \">\nassert solution(\"B A\") == \">\nassert solution(\"A A\") == \"=\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A C\") == \"<\"\nassert solution(\"B D\") == \">\"\nassert solution(\"B C\") == \">\"\nassert solution(\"C D\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('A B') == \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('A B') == '<'\nassert solution('C D') == '>'\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('A B') == '<'\n\nimport itertools\n\nA, B = stdin.split()\n\na = {'A', 'B', 'C', 'D', 'E', 'F'}\nb = {'A', 'B', 'C', 'D', 'E', 'F'}\n\nprint('{} {}'.format(sorted(a - b), sorted(b - a)))\n\nfor elem in itertools.product(a, b):\n    print(elem)"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == '11211'\n\n---Challenge Constraints---\n\n- 1 <= H,W <= 50\n- S_i is a string of length W consisting of # and..\n\n---Hint---\n- Use dynamic programming to solve this problem\n- Refer to: https://www.youtube.com/watch?v=SW_My6D4Jj8\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5') == '11211'\nassert solution('1 2') == '12'\nassert solution('3 3') == '213'\nassert solution('5 5') == '1515'"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n1') == '11\\n1\\n11'\nassert solution('2\\n1\\n1') == '11\\n1\\n11'\nassert solution('3\\n1\\n1') == '111\\n1\\n111'\nassert solution('5\\n2\\n1') == '11111\\n1\\n11111'\nassert solution('2\\n4\\n1') == '111111\\n1\\n111111'\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\n.....\n.#.#.\n.....\n\n''') == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"11211\"\nassert solution(input()) == \"1#2#1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"11211\"\nassert solution(\"3 3\") == \"1121\"\nassert solution(\"10 3\") == \"01110\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5') == '11211'\nassert solution('3 10') == '1110111'\nassert solution('10 10') == '111111111111111111111111'\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 5\n.....\n"
    },
    {
        "number": 4589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n\") == \"11\"\nassert solution(\"1\\n\") == \"11\""
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"2 1 100\") == \"1\"\nassert solution(\"1 1 100\") == \"0\"\nassert solution(\"10 10 100\") == \"0\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 240\") == \"3\"\nassert solution(\"3 2 240\") == \"3\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"3 5 20\") == \"2\"\nassert solution(\"5 5 500\") == \"2\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 240') == '3'\nassert solution('6 4 40') == '5'\nassert solution('5 4 40') == '4'\nassert solution('10 10 10 10') == '1'\nassert solution('10 10 10 10 10') == '2'\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 240') == \"3\"\nassert solution('8 3 120') == \"4\"\nassert solution('5 6 60') == \"6\"\nassert solution('8 2 240') == \"8\"\nassert solution('10 4 100') == \"1\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150\n''') == '3'\nassert solution('''1 2 3\n4 5 6\n7 8 9\n''') == '9'\nassert solution('''4 6 1\n3 4 4\n8 7 9\n''') == '2'\nassert solution('''2 2 1\n5 6 2\n7 1 5\n''') == '5'\nassert solution('''10 10 1\n3 4 4\n9 8 8\n''') == '7'\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"2 2 2\\n1 1 2\\n4 3 3\\n5 5 5\\n2 3 4\\n3 6 2\\n3 4 6\\n3 5 3\\n4 4 6\\n2 6 2\\n1 4 5\\n3 5 2\\n2 2 5\\n4 4 2\\n3 2 4\\n2 6 3\\n1 5 4\\n3 2 2\\n2 1 5\\n3 5 3\\n4 5 5\\n5 4 6\\n3 3 6\\n2 2 4\\n4 6 2\\n2 4 5\\n3 2 6\\n4 3 4\\n5 1 2\\n4 3 4\\n3 6 3\\n5 4 6\\n2 5 3\\n3 5 2\\n2 4 2\\n4 6 4\\n1 6 5\\n3 5 5\\n1 5 4\\n3 3 5\\n3 5 4\\n5 3 4\\n2 5 2\\n4 6 4\\n4 4 5\\n3 5 4\\n4 3 4\\n2 5 3\\n4 3 2\\n1 6 1\\n3 4 2\\n4 4 4\\n1 6 2\\n3 4 3\\n2 5 4\\n2 4 4\\n4 4 4\\n4 4 3\\n1 4 6\\n2 4 5\\n3 4 4\\n2 4 5\\n4 4 6\\n1 5 5\\n2 2 4\\n3 3 5\\n2 2 3\\n3 5 3\\n3 4 5\\n4 4 4\\n2 5 3\\n4 2 5\\n3 4 2\\n3 3 2\\n4 3 3\\n3 3 4\\n4 4 5\\n3 4 4\\n4 2 4\\n4 6 2\\n3 5 2\\n4 5 3\\n1 5 6\\n1 5 4\\n3 4 4\\n2 2 4\\n2 6 5\\n3 4 6\\n4 4 4\\n1 6 4\\n4 5 2\\n4 2 3\\n3 3 4\\n1 5 3\\n3 4 2\\n2 2 6\\n3 5 3\\n4 2 5\\n1 6 5\\n4 4 5\\n3 5 4\\n2 4 3\\n1 3 3\\n4 5 4\\n1 2 4\\n2 5 6\\n4 4 2\\n1 5 6\\n2 4 6\\n2 5 3\\n3 5 4\\n1 6 5\\n4 4 4\\n1 3 4\\n4 4 5\\n2 2 3\\n1 2 4\\n3 5 4\\n3 3 6\\n3 5 2\\n4 4 3\\n2 2 5\\n3 4 4\\n2 4 3\\n3 3 4\\n4 4 5\\n4 3 6\\n4 4 4\\n4 3 5\\n4 4 2\\n3 4 2\\n2 3 5\\n2 4 4\\n3 5 3\\n3 4 4\\n1 3 4\\n1 5 2\\n2 5 2\\n3 3 4\\n1 4 3\\n3 3 2\\n1 2 5\\n2 4 5\\n2 6 3\\n2 5 6\\n3 4 6\\n2 5 2\\n3 2 3\\n1 4 2\\n3 6 5\\n2 5 4\\n2 6 3\\n2 4 4\\n1 5 4\\n2 4 5\\n3 5 4\\n2 5 3\\n4 5 2\\n2 4 3\\n3 4 4\\n2 4 5\\n4 2 3\\n2 3 4\\n3 4 5\\n2 6 2\\n4 5 3\\n2 5 6\\n3 6 4\\n3 5 4\\n4 4 5\\n3 6 3\\n1 3 4\\n2 5 3\\n1 4 4\\n2 3 4\\n4 5 4\\n2 5 4\\n1 4 6\\n1 5 2\\n1 6 2\\n2 4 5\\n3 3 4\\n4 2 4\\n3 5 4\\n4 4 5\\n3 5 4\\n3 6 5\\n4 5 4\\n4 5 4\\n4 5 3\\n3 6 2\\n1 5 2\\n1 2 4\\n3 2 5\\n3 4 3\\n3 5 6\\n3 6 4\\n2 5 4\\n2 6 4\\n2 5 5\\n4 3 4\\n2 5 2\\n2 4 4\\n3 3 4\\n3 3 3\\n1 5 1\\n2 3 3\\n2 4 3\\n2 6 5\\n2 5 2\\n1 3 5\\n3 4 2\\n3 2 5\\n2 5 3\\n3 6 5\\n3 4 6\\n3 6 4\\n2 4 2\\n1 5 5\\n2 5 4\\n3 5 4\\n3 5 6\\n2 6 5\\n1 5 2\\n3 5 5\\n2 3 4\\n3 3 4\\n2 5 3\\n2 6 5\\n2 4 4\\n1 6 3\\n1 6 2\\n1 5 5\\n2 5 3\\n2 4 5\\n1 4 5\\n3 3 3\\n3 4 4\\n2 5 6\\n2 6 3\\n2 4 5\\n2 5 3\\n1 2 2\\n4 2 2\\n4 5 2\\n1 2 4\\n1 5 2\\n2 4 3\\n2 5 4\\n1 2 2\\n4 3 3\\n1 4 4\\n3 4 4\\n1 5 3\\n3 4 3\\n1 3 4\\n3 3 4\\n3 3 5\\n3 4 4\\n1 4 4\\n1 5 2\\n3 5 5\\n2 3 5\\n1 2 5\\n2 5 3\\n3 4 4\\n3 5 6\\n3 6 4\\n2 5 2\\n1 3 4\\n1 5 4\\n2 5 4\\n3 6 3\\n2 6 2\\n3 3 5\\n1 5 6\\n1 6 5\\n2 4 5\\n2 6 2\\n2 4 3\\n2 5 4\\n1 6 2\\n3 5 2\\n2 5 2\\n2 6 5\\n2 4 5\\n1 4 4\\n1 6 5\\n1 5 4\\n2 4 4\\n3 5 5\\n1 4 3\\n2 5 6\\n1 5 6\\n1 2 4\\n1 5 2\\n2 4 4\\n1 3 4\\n1 6 2\\n1 4 6\\n2 3 4\\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 240\") == \"3\"\nassert solution(\"3 3 480\") == \"2\"\nassert solution(\"5 4 1000\") == \"2\"\nassert solution(\"3 5 480\") == \"1\"\nassert solution(\"10 10 10\") == \"1\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 4 240\"\n    \"60 90 120\"\n    \"80 150 80 150\"\n) == \"3\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == '2148'\nassert solution(\"1500 2000 1600 3 2\") == '7900'\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"500 1 0\") == \"1000\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"0 1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1 2\") == \"20\"\nassert solution(\"50 50 3 1\") == \"50\"\nassert solution(\"10 10 4 3\") == \"60\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"1234 5678 90123 456\") == \"3764\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nprint(\"You passed all test cases!\")\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"1000 2000 1100 1 2\") == \"11800\""
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(['1500', '2000', '1600', '3', '2']) == '7900'\n"
    },
    {
        "number": 4591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1500 2000 1600 3 2\"\n) == \"7900\"\nassert solution(\n    \"1500 1000 1600 3 2\"\n) == \"15000\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-1\") == \"0\"\nassert solution(\"3\") == \"4\"\nassert solution(\"10\") == \"9\"\n\n'''"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '4'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1', 'Sample Test 1 Failed'\nassert solution('4') == '4', 'Sample Test 2 Failed'\nassert solution('12') == '12', 'Sample Test 3 Failed'\nassert solution('2') == '2', 'Sample Test 4 Failed'\n\"\"\"\n\nn = int(input())\n\nans = 0\n\ni = 1\nwhile i <= n:\n    if i < n:\n        if n % i == 0:\n            ans += 1\n    i += 1\n\nprint(ans)"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"10\") == \"10\"\n\"\"\"\nimport math\nfrom functools import reduce"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('9') == '9'\nassert solution('2') == '2'\nassert solution('10') == '9'\nassert solution('12') == '12'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"9\"\nassert solution(\"20\") == \"19\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('8') == '8'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"1000\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '9'\nassert solution('12') == '9'"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '9'\nassert solution('50') == '99'\nassert solution('1000') == '999'\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"10\") == \"9\"\nassert solution(\"10\") == \"9\"\nassert solution(\"10\") == \"9\"\nassert solution(\"10\") == \"9\"\n\"\"\"\nimport math\n\nimport sys"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"9\"\nassert solution(\"50\") == \"5\"\nassert solution(\"25\") == \"5\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '4'\nassert solution('10') == '9'\nassert solution('20') == '16'"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('1\\n10\\n8\\n8\\n6') == '1'\nassert solution('2\\n10\\n10\\n6\\n6') == '2'\nassert solution('3\\n10\\n8\\n8\\n6') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"13\") == \"2\""
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '3'\nassert solution('4 2') == '3'\nassert solution('4 3') == '4'\nassert solution('4 10') == '5'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('4\\n7\\n12\\n14\\n16') == '4'\nassert solution('2\\n7\\n8\\n9') == '2'\nassert solution('3\\n7\\n8\\n9') == '1'\nassert solution('10\\n17\\n24\\n27\\n30') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('5\\n10\\n8\\n8\\n6') == '4'\nassert solution('10\\n10\\n8\\n8\\n6') == '5'\nassert solution('100\\n1000\\n100\\n100\\n10') == '4'\nassert solution('100\\n1000\\n100\\n100\\n10') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n5\n6\n4\n''') == '3'\nassert solution('''2\n3\n4\n''') == '1'\n"
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 4594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('1\\n10\\n8\\n8\\n6') == '1'\nassert solution('1\\n10\\n8\\n8\\n6\\n1') == '2'\nassert solution('1\\n10\\n8\\n8\\n6\\n1\\n1') == '2'\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"26\"\nassert solution(\"AASDFGHJKL\") == \"1\"\nassert solution(\"AAAAZ\") == \"1\"\nassert solution(\"QWERTY\") == \"2\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('QWERTYASDFZXCV') == \"5\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"ASDFZ\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(snuke_input()) == '5'\nassert solution(snuke_input_2()) == '5'\nassert solution(snuke_input_3()) == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n"
    },
    {
        "number": 4595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"26\"\nassert solution(\"BEEFWEE\") == \"4\""
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n8 12 40') == '2'\nassert solution('4\\n2 3 8') == '2'"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2'\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.count = 0\n\n    def max_operations(self, n: int, blackboard: List[int]) -> str:\n        def even_divide(x: int) -> int:\n            return x // 2 if x % 2 == 0 else x // 2 + 1\n\n        for blackboard_idx in range(n):\n            new_blackboard = blackboard[:]\n            new_blackboard[blackboard_idx] = even_divide(blackboard[blackboard_idx])\n            self.count = max(self.count, self.max_operations(n, new_blackboard))\n        return self.count\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n8 12 40''') == '2'\nassert solution('''3\n4 6 20''') == '1'\nassert solution('''2\n4 3 10''') == '1'\nassert solution('''5\n10 9 4 3 2''') == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n8 12 40\n\n''') == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n8 12 40''') == \"2\"\n\nassert solution('''4\n5 2 5 2''') == \"1\"\n\nassert solution('''6\n7 8 9 10 11 12''') == \"3\"\n\nassert solution('''1\n3''') == \"0\"\n\nassert solution('''2\n3''') == \"0\""
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n8 12 40') == '2'\nassert solution('3\\n8 12 40') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '8'\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n8 12 40\n''') == '2'\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\""
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '12'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '6'\nassert solution('1') == '1'\n\nprint(f'Solution = {solution(input())}')"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\n\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '6'"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"100\") == \"972\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '6'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '13'\nassert solution('1') == '1'\nassert solution('2') == '2'"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"5\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '6'\nassert solution('1') == '6'\nassert solution('2') == '8'\nassert solution('3') == '12'\nassert solution('4') == '16'\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '3'\nassert solution('4') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '10'\nassert solution('10') == '20'\nassert solution('20') == '30'\nassert solution('30') == '40'\nassert solution('50') == '60'\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"8\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"100\") == \"111\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"13\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '6', 'Wrong!'\nassert solution('5') == '6', 'Wrong!'\nassert solution('5') == '6', 'Wrong!'\nassert solution('5') == '6', 'Wrong!'\nassert solution('5') == '6', 'Wrong!'\nprint('Tests finished.')\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '2'\nassert solution('4\\n2 4 6 8\\n') == '1'\nassert solution('2\\n2 3\\n') == '1'\n\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt', 'rt')\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"3 1\") == '2'"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"12\") == \"4\"\nassert solution(\"10\") == \"8\""
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 1\n\n''') == '2'"
    },
    {
        "number": 4599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '2 2'\nassert solution('2 5') == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\nassert solution('2 5\\n1 WA\\n2 AC\\n1 AC\\n2 WA\\n2 AC') == '2 1'\nassert solution('2 5\\n1 WA\\n1 AC\\n1 AC\\n1 WA\\n2 AC') == '1 2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"2 2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '2 2'"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"3 2\\n1 WA\\n1 WA\\n1 WA\") == \"0 0\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n''') == '2 2'\nassert solution('''1 2\nAC\nWA\n''') == '1 2'\nassert solution('''10 1\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nWA\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n''') == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n') == '2 2'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\nassert solution('3 1\\n5 1 4') == '4'\nassert solution('3 2\\n5 2 5') == '7'\nassert solution('2 1\\n1 1') == '1'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n4 1 5\n''') == '5'\nassert solution('''3 1\n4 1 5\n''') == '4'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 1') == '4'\nassert solution('4 1') == '3'\nassert solution('5 1') == '4'\nassert solution('6 1') == '3'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '5'\nassert solution('10 100') == '0'\nassert solution('4 4') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '5'\nassert solution('3 2') == '0'\nassert solution('4 1') == '0'\n\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '5'\nassert solution('2') == '4'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 1\\n\"\n    \"1 2\\n\"\n) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"5 1 5\") == \"5\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '5'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 4601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 1\n4 1 5\n''') == '5'\nassert solution('''\n5 2\n4 1 5\n''') == '4'\n\n'''"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '4'\nassert solution('10') == '16'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"4\"\nassert solution(\"10 2\") == \"5\"\nassert solution(\"2\") == \"4\"\nassert solution(\"10 4\") == \"20\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n10\n1 2 3 4 5 6 7 8 9 10''') == '4'\nassert solution('''1\n10\n1 2 4 5 6 7 8 9 10''') == '16'\nassert solution('''5\n1\n3 2 6 9 9''') == '12'\nassert solution('''1\n1\n1''') == '0'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '16'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\\n10\\n2\\n\"\n) == \"4\"\nassert solution(\n    \"2\\n10\\n3\\n\"\n) == \"8\"\nassert solution(\n    \"10\\n100\\n13\\n\"\n) == \"77\"\nassert solution(\n    \"100\\n1000\\n1234\\n\"\n) == \"35442\"\nassert solution(\n    \"100\\n1000\\n1234\\n1234\\n\"\n) == \"43698\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '16'"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n10\n2\n\n''') == '4', 'First'\nassert solution('''\n1\n10\n3\n\n''') == '11', 'Second'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '16'\nassert solution('3') == '12'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('10') == '16'\nassert solution('2') == '0'\nassert solution('100') == '0'\nassert solution('101') == '1'\n"
    },
    {
        "number": 4602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '16'\nassert solution('3') == '8'\nassert solution('4') == '0'"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"600\\n300\\n220\\n420\\n\") == \"520\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"-1\\n-1\\n-1\\n-1\") == \"-1\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('600') == '520'\nassert solution('300') == '300'\nassert solution('220') == '220'\nassert solution('420') == '420'"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('600') == '520'\nassert solution('300') == '220'\nassert solution('220') == '220'\nassert solution('420') == '420'\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('600\\n300\\n220\\n420') == '520'\nassert solution('0\\n0\\n0\\n0') == '0'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('600\\n300\\n220\\n420') == '520'\nassert solution('15\\n10\\n5\\n5') == '20'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"600\\n300\\n220\\n420\\n\") == \"520\"\nprint(solution(input()))\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"600\\n300\\n220\\n420\\n\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"600\\n300\\n220\\n420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('600\\n300\\n220\\n420') == '520'\nassert solution('100\\n200\\n400\\n600') == '400'\n"
    },
    {
        "number": 4603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '520'\nprint(solution(input))\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"20\") == \"1\"\nassert solution(\"5\") == \"0\""
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 4 4 0 2\n''') == '4'\nassert solution('''\n5\n2 4 4 0 2\n''') == '4'\nassert solution('''\n3\n3 3 3\n''') == '0'\nassert solution('''\n4\n2 4 4 0 2\n''') == '0'\nassert solution('''\n3\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\nassert solution('5\\n2 4 4 0 2') == '0'"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 4 4 0 2''') == '4'\nprint(solution('''5\n2 4 4 0 2'''))\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 4 4 0 2\n''') == '4', 'First'\n\nassert solution('''\n5\n2 4 4 0 2\n''') == '4', 'Second'\n\nassert solution('''\n5\n1 2 3 4\n''') == '0', 'Third'\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4', \"Wrong\"\nprint(solution('''5\n2 4 4 0 2\n'''))\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"84\"\nprint(solution(input()))\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([[int(i) for i in stdin.split()] for stdin in stdin.strip().split(\"\\n\")]) == 84\nprint(\"Congratulations! Your solution is correct!\")\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20 2 5') == 84\nassert solution('10 0 0') == 0\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 20 2 5') == 84\nassert solution('10 10 2 2') == 23\nassert solution('10 10 20 2 5') == 0\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"20 2 5\") == 84\nassert solution(\"20 21 6\") == 84\nassert solution(\"20 21 6\") == 84\nassert solution(\"20 21 2\") == 0\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 2 5') == '84'"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 2') == '84'\nassert solution('10 30 5') == '82'\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3 10') == 12\nassert solution('6 5 10') == 10\n\nstdin = input()\nassert solution(stdin)\n\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\") == 84\nassert solution(\"2 3 4\") == 23\nassert solution(\"0 4 2\") == 4\nassert solution(\"50 2 4\") == 60\nassert solution(\"8 2 10\") == 26\n"
    },
    {
        "number": 4605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 5') == 84\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('200') == 'ABC200'\nassert solution('300') == 'ABC300'\nassert solution('400') == 'ABC400'\nassert solution('500') == 'ABC500'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"999\") == \"ABC999\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('1000') == 'ABC1000'\nassert solution('9999') == 'ABC9999'"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == 'ABC0', 'Wrong result'\nassert solution('1') == 'ABC1', 'Wrong result'\nassert solution('2') == 'ABC2', 'Wrong result'\nassert solution('3') == 'ABC3', 'Wrong result'\nassert solution('4') == 'ABC4', 'Wrong result'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'ABC1'\nassert solution('2') == 'ABC2'\nassert solution('3') == 'ABC3'\nassert solution('4') == 'ABC4'\nassert solution('5') == 'ABC5'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\"\n) == \"ABC3\"\nassert solution(\n    \"7\"\n) == \"ABC77\"\nassert solution(\n    \"41\"\n) == \"ABC841\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100') == 'ABC100'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == 'ABC0'\nassert solution('1') == 'ABC1'\nassert solution('2') == 'ABC2'\nassert solution('3') == 'ABC3'\nassert solution('4') == 'ABC4'\n"
    },
    {
        "number": 4606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'ABC1'\n\n###\n\nimport itertools\n\nN = int(stdin())\n\nfor i in itertools.count(start=1, step=3):\n    if N < i:\n        break\n    print(f'ABC{i}')"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"5\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '5'\nassert solution('5 5') == '5'\nassert solution('5 5') == '5'\nassert solution('5 5') == '5'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"3 4\") == \"3\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == \"5\"\nassert solution('2 3') == \"7\"\nassert solution('3 5') == \"5\"\nassert solution('5 5') == \"5\"\nassert solution('5 6') == \"8\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5') == '5'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 2') == '3'\nassert solution('2 2 1') == '3'\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"5\"\nassert solution(\"1 4\") == \"7\"\nassert solution(\"1 5\") == \"7\"\nassert solution(\"1 6\") == \"7\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '5'\nassert solution('10 8') == '9'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n1\\n2\\n') == '2'\nassert solution('3\\n1\\n2\\n') == '1'\nassert solution('2\\n4\\n5\\n') == '-1'"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n1\\n2') == '2'\nassert solution('2\\n3\\n1\\n2') == '-1'\nassert solution('2\\n3\\n1\\n2') == '-1'\nassert solution('2\\n3\\n1\\n3') == '3'\nassert solution('4\\n3\\n1\\n3') == '-1'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '-1'\nassert solution('10') == '-1'\nassert solution('2') == '1'\nassert solution('5') == '2'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"10\"\nassert solution(\"-1\") == -1"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3\n1\n2\n''') == '2', \"Wrong answer\"\nassert solution('''3\n3\n2\n1\n''') == '1', \"Wrong answer\"\nassert solution('''8\n2\n1\n2\n3\n5\n6\n3\n''') == '-1', \"Wrong answer\"\nassert solution('''4\n3\n2\n3\n2\n''') == '1', \"Wrong answer\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"4\") == '-1'\nassert solution(\"10\") == '3'\n"
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 4608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"100000000\") == \"0\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n6\\n2\\n6\") == \"1\"\nassert solution(\"5\\n3\\n7\\n3\\n8\") == \"5\"\nassert solution(\"10\\n15\\n20\\n15\\n20\") == \"10\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n6\n8\n9\n11''') == '1'\nassert solution('''1\n2\n3\n4\n5''') == '5'\nassert solution('''1\n1\n1\n1\n1''') == '2'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n6\n2\n6\n''') == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\nassert solution('4\\n6\\n2\\n6') == '0'\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n6\") == \"1\"\nassert solution(\"3\\n1\\n6\") == \"2\"\nassert solution(\"3\\n1\\n6\") == \"1\"\nassert solution(\"3\\n1\\n6\") == \"2\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"1\"\nassert solution(\"5\\n3\\n5\\n4\\n\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"1\"\nassert solution(\"10\\n1\\n2\\n2\\n2\\n3\\n2\\n3\\n1\\n\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\nassert solution('3 2\\n1 2 3') == '0'\nassert solution('1 2\\n1 2 3') == '0'\nassert solution('1 2\\n1 2 3') == '1'\nassert solution('3 2\\n1 2 3') == '0'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 1 1') == '1'\nassert solution('5 2\\n1 1 2 2 5') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n3 1 3\n''') == '1'\nassert solution('''\n2 5\n2 2 2 4 5\n''') == '1'\nassert solution('''\n2 6\n2 1 2 3 4 5\n''') == '1'\nassert solution('''\n3 4\n3 1 2 4 5\n''') == '2'\nassert solution('''\n3 8\n1 1 1 1 1 1 1 1\n''') == '3'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\nassert solution(\"6 3\\n1 1 2 2 3 3 3\") == \"2\"\nassert solution(\"5 3\\n1 1 2 2 3 3 3\") == \"1\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\nassert solution(\"5 2\\n1 1 2 2 5\") == \"2\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\n\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1'\nassert solution('5 2') == '1'\nassert solution('5 3') == '1'\nassert solution('4 2') == '1'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1 1\n''') == 'Yes'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3 1 2') == 'Yes'\nassert solution('6 1 1') == 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3 1 2\") == \"Yes\"\nassert solution(\"6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3 1 2\") == \"Yes\"\nassert solution(\"6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\nassert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3 1 2\") == \"Yes\"\nassert solution(\"2\\n3 1 2\") == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1 2') == 'Yes'\nassert solution('2\\n6 1 1') == 'No'\nassert solution('3\\n1 2 2') == 'Yes'\n"
    },
    {
        "number": 4611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Yes'\nassert solution('5') == 'No'\nassert solution('10') == 'No'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '2'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(1, 3) == 2\nassert solution(1, 5) == 2\nassert solution(2, 3) == 2\nassert solution(2, 5) == 3\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == '2'\nassert solution('1 2\\n') == '2'"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '2'\nassert solution('1.3') == '2'\nassert solution('1,3') == '2'\nassert solution('1.3,4') == '2'\nassert solution('1.3e10') == '2'\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '2'\nassert solution('2 2') == '2'\nassert solution('3 6') == '4'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"5 10\") == \"6\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 3\n''') == '2'\nassert solution('''\n1 2\n''') == '1'\nassert solution('''\n2 2\n''') == '2'\nassert solution('''\n3 2\n''') == '2'\nassert solution('''\n6 5\n''') == '7'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3') == '2'\nassert solution('4 3') == '5'\nassert solution('4 4') == '5'\nassert solution('4 5') == '6'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '2'\nassert solution('1 2') == '1'\nassert solution('1 2.5') == '1'\nassert solution('1 2.999') == '1'\nassert solution('1 2.999') == '1'\n"
    },
    {
        "number": 4612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == '2'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 7') == '4'\nassert solution('3 3') == '0'\nassert solution('6 6') == '1'\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\n\n'''\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n') == '4'\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"7 7\") == \"4\"\n\n'''\nimport math"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '4'\n\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 7') == '4'\n'''\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\nassert solution(\"20 20\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n\") == \"4\"\nassert solution(\"50 50\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99\\n100 100\\n\") == \"4\"\nassert solution(\"1000 1000\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99\\n100 100\\n\") == \"4\"\nassert solution(\"1000 1000\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99\\n100 100\\n\") == \"4\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 4613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 7') == '4'\nassert solution('5 9') == '5'\nassert solution('2 1') == '1'\nassert solution('8 2') == '1'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"1 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('5 7 5') == '7'\nassert solution('5 7 5') == '7'\nassert solution('5 7 5') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 1 1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == '7'"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5, 7, 5]) == '7'"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('5 1 5') == '1'\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == '7'\n"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('-5 7 5') == '7'\nassert solution('1 1 1') == '1'\n\n------"
    },
    {
        "number": 4614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('4 8 9') == '4'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nassert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1, 2, 10, 20, 15, 200]) == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 10 20 15 200\n''') == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 10 20 15 200') == '110 10'\nassert solution('1 2 10 20 15 200') == '110 15'\nassert solution('1 1 10 20 15 200') == '110 15'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '1 2 10 20 15 200'\n) == '110 10'\nassert solution(\n    '1 3 10 20 15 200'\n) == '100 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\"1 2 10 20 15 200\"]) == \"110 10\"\nassert solution([\"1 1 1 1\"]) == \"4 4\"\n\nTest.assert_equals(solution(['']), '0 0')\nTest.assert_equals(solution(['1 1 1 1']), '0 0')\nTest.assert_equals(solution(['1 1 1 1', '1 1 1 1']), '1 1 1 1')\nTest."
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 10 20 15 200''') == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('internationalization') == 'i18n'\nassert solution('internationalization') == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'\nprint(solution('internationalization'))"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"i18n\""
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('a') == 'a'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'\nprint('your solution has passed the tests')\n\n\"\"\"\n\ns = stdin()"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('internationalization') == 'i18n'\nassert solution('i18n') == 'i18n'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\nassert solution(\"top\") == \"NO\"\nassert solution(\"pot\") == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'YES'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'YES', \"You failed this one. Tries: 12\"\nassert solution('C') == 'NO', \"You failed this one. Tries: 13\"\nassert solution('top') == 'YES', \"You failed this one. Tries: 12\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'YES'"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\nassert solution(\"\") == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('right') == 'YES'"
    },
    {
        "number": 4617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\nassert solution(\"\") == \"NO\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\nassert solution('ab') == 'a'\nassert solution('ab') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abab\") == \"a\"\nassert solution(\"abaab\") == \"b\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('z') == 'z'\nassert solution('abcabc') == 'abc'\nassert solution('aaa') == 'aaa'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"acb\") == \"c\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"a\") == \"a\"\nassert solution(\"bbb\") == \"b\"\nassert solution(\"abbb\") == \"b\"\nassert solution(\"abbbb\") == \"b\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\nassert solution('ab') == 'a'\nassert solution('abcd') == 'b'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'c'\n"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aba') == 'b'"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aba') == 'b'\nassert solution('abba') == 'a'\nassert solution('abcd') == 'b'\nassert solution('acbd') == 'b'\nassert solution('a'*5000) == 'a'"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'b'\n\n\"\"\"\n\nstdin = input()\ns = stdin\nk = int(input())"
    },
    {
        "number": 4618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n\ns = input()\nk = int(input())\n\nfrom bisect import bisect_left"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 2') == '9'\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\nassert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n1 2 3\") == \"10\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 2\n2 1 1\n3 3 4\n''') == '9'\nassert solution('''\n5 4 2\n1 2 1\n3 3 4\n''') == '9'\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\") == \"9\"\nassert solution(\"4 7 2\") == \"17\"\nassert solution(\"1 5 3\") == \"5\"\nassert solution(\"3 5 1\") == \"2\"\nassert solution(\"5 5 2\") == \"20\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 2') == '9'\nassert solution('20 10 2') == '55'\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4\\n') == '9'\nassert solution('5 5 2\\n0 0 1\\n10 10 4\\n') == '12'"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"9\"\nassert solution(\"5 4 2\") == \"9\"\nassert solution(\"5 4 3\") == \"20\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 2\") == \"9\"\nassert solution(\"3 3 4\") == \"12\""
    },
    {
        "number": 4619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\") == \"9\"\nassert solution(\"7 5 2\") == \"25\"\nassert solution(\"5 3 1\") == \"9\"\nassert solution(\"5 5 2\") == \"16\"\nassert solution(\"10 10 2\") == \"30\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '12'\nassert solution('6') == '11'\nassert solution('3') == '0'"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"4\") == \"11\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"12\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == ''\nassert solution('1 2 5 1') == '12'\nassert solution('3 2 1') == '11'\nassert solution('3 2 1 0') == '0'\nassert solution('1') == ''\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '12'\nassert solution('4') == '11'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '12'\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '12'\nassert solution('6 5 1') == '11'\nassert solution('1 10 1') == '0'\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"12\"\nassert solution(\"6 5 1\") == \"11\"\nassert solution(\"1 10 1\") == \"11\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '12'\nassert solution('4') == '11'\nassert solution('5') == '0'\nassert solution('10') == '11'\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3,6,5,1,10,1]) == ['12','11','0']\n"
    },
    {
        "number": 4620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '11'\nassert solution('3') == '12'\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"*.\\n*.\\n*.\\n*.\\n\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n*') == '*\\n*'\nassert solution('3 4\\n*.*\\n**.*\\n*.*') == '*\\n*\\n*\\n**\\n*\\n*\\n**\\n*\\n*\\n*'\nassert solution('2 5\\n*.*\\n*.*\\n*.*\\n**.*\\n*.*') == '*\\n*\\n*\\n*\\n**\\n*\\n*\\n*\\n*\\n*'\nassert solution('1 2\\n*\\n**') == '*\\n*\\n*\\n*\\n*'\nassert solution('3 3\\n*.*\\n**.*\\n*.*') == '*\\n*\\n*\\n*\\n*\\n*\\n*\\n*\\n*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n*.\\n.*') == '*****\\n*****\\n*****\\n*****'"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n*.\\n*.\") == \"*.\\n*.\\n*.\\n*.\\n\""
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '***'\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n*.\n.*\n\n''') == '''*.\n*.\n*.\n*.\n'''\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"*.\\n*.\\n*.\\n*.\\n\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '*' * 2"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n.\\n.\\n\") == \".\\n.\\n.\\n\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \".*\\n.*\\n.*\\n.*\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('1\\n1') == 'NO'\nassert solution('5\\n1 2 3 4 5') == 'NO'\nassert solution('1\\n1') == 'YES'\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n2 6 1 4 5\n''') == 'YES'\nassert solution('''3\n1 2 3\n''') == 'NO'\nassert solution('''4\n1 2 3\n''') == 'NO'\nassert solution('''5\n1 2 3\n''') == 'NO'\nassert solution('''6\n1 2 3\n''') == 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''2\n6\n1\n4\n5''') == 'NO'\nassert solution('''10\n1\n1\n2\n1\n1\n2\n1\n1\n2\n1\n1\n2\n1\n1\n2\n2\n1\n1\n2\n2''') == 'YES'\nassert solution('''10\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1''') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 4 5\\n\") == \"YES\"\nassert solution(\"4\\n3 5 1 6\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 6 1 4 5\\n') == 'YES'\nassert solution('3\\n6 6 6\\n') == 'NO'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\"\nassert solution(\"5\\n3 1 2 3 4 5\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '3'\nassert solution('3') == '4'\nassert solution('6') == '1'\nassert solution('12') == '3'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\"\nassert solution(\"10\") == \"5\""
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '1'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'\nassert solution('3') == '1'\nassert solution('6') == '3'\nassert solution('7') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '1'\nassert solution('''5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\n"
    },
    {
        "number": 4623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '2\\n4'\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n7 3\\n1 5\\n22 5') == '3'\nassert solution('2\\n8 3\\n3 5\\n13 5') == '1'\nassert solution('3\\n0 3\\n0 5\\n9 7') == '1'\nassert solution('1\\n1 2\\n3 3') == '3'\n\n'''\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '3'\n\nassert solution('''4\n7 3\n3 5\n22 5\n987 13\n''') == '1'\n\nassert solution('''5\n7 4\n1 6\n10 2\n30 5\n38 1\n47 3\n''') == '4'\n\nassert solution('''5\n7 3\n3 6\n1 6\n10 2\n30 5\n38 1\n47 3\n''') == '2'\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n2\n\n''') == '3'\nassert solution('''1\n1\n1\n\n''') == '1'\nassert solution('''3\n1 2\n2\n\n''') == '3'"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '3\\n'\n    '7 3\\n'\n    '1 5\\n'\n    '22 5\\n'\n    '987 13\\n') == '3'\n\"\"\"\n\nn = int(input())\nm = int(input())"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == \"3\"\nprint(solution(input_data))"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n7 3\n1 5\n22 5\n987 13\n''') == '3'\nassert solution('''\n2\n4 3\n1 5\n4 5\n''') == '1'\nassert solution('''\n4\n5 4\n1 5\n22 5\n987 13\n''') == '2'\n''') == '1'"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '1'\nassert solution('3') == '5'\nassert solution('4') == '77'\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '3'\nassert solution('''5\n7 2\n1 8\n1 2\n3 5\n7 8\n''') == '1'\nassert solution('''7\n1 5\n1 2\n2 5\n2 4\n3 5\n3 4\n4 5\n4 4\n4 5\n''') == '4'\nassert solution('''6\n7 4\n1 2\n2 3\n3 4\n4 5\n3 5\n4 4\n4 5\n5 6\n5 7\n''') == '5'\nassert solution('''10\n1 10\n5 5\n1 2\n2 3\n5 6\n6 7\n3 8\n8 9\n4 4\n8 8\n''') == '8'\n"
    },
    {
        "number": 4624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n5 2\n2 3\n22 5\n987 13\n''') == '1'\nassert solution('''2\n5 3\n1 5\n22 5\n987 13\n''') == '3'\nassert solution('''3\n7 3\n1 5\n22 5\n987 13\n''') == '5'\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '77'\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\\n 0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0 \\\n 0 2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \\\n\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\\n 0 0 9 4 5 3 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0 \\\n 2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \\\n\""
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n\"\"\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('4 2') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('10 5') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"5 2\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"4 1\") == \"1 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\""
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \\n'''\nassert solution('''\n3 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \\n'''"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\nabca\\n10 5\\ncodeforces') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('3 2\\nqwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\\ncodeforces') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9''') == '26 10'\nassert solution('''3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9''') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('''3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3 4\\n\"\n    \"10 20 30\\n\"\n    \"5 5 5\\n\"\n    \"2 4 3\\n\"\n    \"1 1000000000 1000000000\\n\"\n    \"1 1000000000 999999999\\n\"\n    \"3 2 5\\n\"\n    \"3 2 6\"\n) == \"0\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '36'\nassert solution('3 3 4') == '0'\nassert solution('10 20 30') == '1999999994'\nassert solution('5 5 5') == '2'\nassert solution('2 4 3') == '4'"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\") == \"1999999994\"\n\nassert solution(\"\"\"\n8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\") == \"4\""
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 6 5\n10 20 40 10 20 40\n10 10 10 10 10 10\n5 5 5 5 5 5\n3 2 3 2 3 2\n\"\"\") == \"1999999994\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\nassert solution('2 4 3') == '4'\nassert solution('1 1000000000 1000000000') == '1999999994'\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6''') == '0'\nassert solution('''4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1''') == '0'\nassert solution('''4\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6''') == '0'\nassert solution('''4\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2''') == '0'\nassert solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nassert solution(stdin) == \"36\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n11 14 16 12\n2\n1 8''') == \"YES\"\nassert solution('''4\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == \"YES\"\nassert solution('''4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == \"YES\"\nassert solution('''4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == \"NO\"\nassert solution('''4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n2 1\\n3\\n1 2\\n1 2 3\\n1 2 3 4\\n3\\n2 4\\n3\\n2 3\\n1\\n2 3\\n2\\n2 3\\n1\\n2 3\\n3\\n2 3\\n2\\n1 3\\n\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n4\\n1 2\\n1 2 3\\n1 2 3 4\\n3\\n2 4\\n3\\n2 4\\n1\\n2 4\\n1 2\\n3\\n2\\n4\\n2\\n2 3\\n3\\n2 3\\n2\\n2 3\\n2\\n1 3\\n1\\n3\\n2\\n2 3\\n2\\n1 3\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n3\\n1\\n2 4\\n2\\n1 3\\n2\\n3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n3\\n1\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n3\\n1\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n3\\n1\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n1 3\\n2\\n1 3\\n1\\n2 4\\n2\\n3\\n3\\n2\\n1 3\\n1\\n2 3\\n2\\n3\\n2\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n3\\n1\\n2 4\\n2\\n1 3\\n1\\n1 2 3\\n2\\n3\\n3\\n2\\n3\\n1\\n2 4\\n2\\n1 3\\n1\\n1 2 3"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\n11 14 16 12\") == \"YES\"\nassert solution(\"2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\nassert solution(\"2\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\nassert solution(\"2\\n1 8\\n4\\n1 1 1 1\") == \"NO\"\nassert solution(\"2\\n1 8\\n4\\n1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 2\n3\n10 5\n2\"\"\") == \"YES\"\nassert solution(\"\"\"5\n1 2 3 4 5\n3\n1 2 5\n3\n3 5\n4\"\"\") == \"NO\"\nassert solution(\"\"\"5\n1 2 3 4 5\n3\n1 2 5\n3\n3 5\n4\"\"\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 1 1 1 1\n2\n3\n4\n5\n6''') == 'NO'\nassert solution('''7\n1 1 1 1 1 1 1\n2\n3\n4\n5\n6\n7''') == 'YES'\nassert solution('''6\n1 1 1 1 1 1\n2\n3\n4\n5\n6\n7''') == 'NO'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == 'YES'\nassert solution('''11\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == 'NO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\n\n-----Hints-----\n\n----\n\n\"\"\"\n\nfrom typing import List\nfrom itertools import combinations\nfrom collections import Counter"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\\nNO\"\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n''') == \"YES\"\n\nassert solution('''\n5\n10 6 12 5 8 9\n3\n1 2 3 6 7 8\n''') == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n11\n14 16 12\n2\n1 8\n4\n1 1 1 1''') == 'YES'\nassert solution('''4\n11\n14 16 12\n2\n1 8\n4\n1 1 1 1''') == 'NO'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n\"\"\") == \"22\"\nassert solution(\n\"\"\"\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n\n\"\"\") == \"13\"\nprint(solution(\n\"\"\"\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n\"\"\"))\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\"\"\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\n\nassert solution('''\n10 10 4\n1 2 7\n2 3 7\n1 4 3\n4 5 7\n3 6 8\n1 7\n5 3\n2 5\n3 6\n4 7\n4 8\n''') == '30'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 4') == '13'\nassert solution('6 5 2') == '22'"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5 2') == '22'\nassert solution('5 5 4') == '13'\nassert solution('5 5 4') == '13'"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 2') == '22'\nassert solution('5 5 4') == '13'"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\nassert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5 4\") == \"13\"\nassert solution(\"6 5 2\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5 2\") == \"22\"\nassert solution(\"5 5 4\") == \"13\""
    },
    {
        "number": 4628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution(\n'''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n\n''') == '13'"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"2\\n5\") == \"7\"\nassert solution(\"3\\n7\") == \"9\"\nassert solution(\"4\\n10\") == \"13\"\nassert solution(\"5\\n19\") == \"27\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"1\\n14\") == \"27\"\nassert solution(\"1\\n13\") == \"27\"\nassert solution(\"1\\n9\") == \"13\"\nassert solution(\"1\\n13\") == \"27\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n5\n5\n''') == '3'\nassert solution('''\n2\n3\n3\n''') == '4'\nassert solution('''\n2\n6\n6\n''') == '9'\nassert solution('''\n2\n14\n14\n''') == '27'\nassert solution('''\n2\n9\n9\n''') == '13'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n5\n''') == '6'\nassert solution('''\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '3'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '9'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '13'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '27'\nassert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '6561'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n5\n12\"\"\") == \"13\"\nassert solution(\"\"\"7\n1\n2\n6\n13\n14\n3620\n10000\"\"\") == \"13\""
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n2\n6\n13\n14\n3620\n10000\n''') == '3'\nassert solution('''\n1\n3\n6\n13\n14\n3620\n10000\n''') == '9'\nassert solution('''\n1\n5\n12\n34\n15\n12000\n1000000\n''') == '15'\n\n'''\nUse 2 pointers:\n* start at first element,\n* traverse in direction (sum,min) until the pointers cross, and \n* when the pointers cross, then check if the sum is less than the target\n'''\n'''\n\nstart at first element\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('1\\n2') == '4'\nassert solution('1\\n100') == '100'\nassert solution('10\\n3') == '11'\nassert solution('8\\n20') == '21'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n1\n''') == '1'\nassert solution('''\n2\n3\n''') == '3'\nassert solution('''\n2\n3\n''') == '3'\nassert solution('''\n5\n4\n7\n9\n''') == '9'\nassert solution('''\n4\n1\n2\n2\n''') == '3'\n"
    },
    {
        "number": 4629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n2\n6\n13\n14\n3620\n10000''') == '3'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3''') == \"1 1 1 1 1 3 3\\n2 3 3 2 2 2 1\\n3 3 3 2 2 1 3\\n2 3 3 2 2 2 1\\n1 1 1 1 1 1 2\\n4 4 4 1 4 4\\n4 4 4 1 4 3 3\\n4 4 4 1 4 2 3\\n3 3 3 2 2 2 1\\n2 3 3 2 2 1 3\\n1 1 1 1 1 1 1\""
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1 2 2 3 2 4 2 1 3 3 4 1 5'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '3 3 3 2 2 1 1 1'\nprint(solution(input()))\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7 8\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n5 1 2 3 4\n4 6 2 1 5 3\n''') == '3 3 3 2 1 3'\nassert solution('''\n5\n1 2 3 4 5\n1 2 3 4 5\n4 6 2 1 5 3\n''') == '2 3 3 2 1 3'\n\nassert solution('''\n4\n2 2 2 2\n2 2 2 2\n4 4 4 4\n3 3 3 3\n''') == '1 2 2 1 1 1 2 2 2 2'\nassert solution('''\n4\n1 2 3 4\n2 3 4 1\n4 1 2 3\n''') == '1 2 3 1 1'\nassert solution('''\n4\n1 2 3 4\n2 3 4 1\n4 1 2 3\n''') == '1 2 3 1 1 1'"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n2 3 1\n3 2 1\n2 3 1''') == '1 1 1 1 1'\nassert solution('''1\n1\n1''') == '3 2'\nassert solution('''5\n4 2 1 3 5\n3\n2 3 4 1\n4\n4 2 1 5 3''') == '2 2 3 4 2 4'\nassert solution('''5\n4 4 1 3 2\n3\n1 3 2 1''') == '2 2 3 2 1'\nassert solution('''10\n5 6 4 6 5 1 2 5 6 5''') == '1 1 1 1 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n2 3 4 1\n4 5 1 2''') == '1 3'\nassert solution('''4\n1 2 3\n4 5 6''') == '3 4'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1 3 3 3 2 2 1 3 4 4 1 4'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1 3 3'\nassert solution('''\n7\n1 2 3 4 5 1 6\n2\n2 1 3 3 1 2\n4\n4 2 1 3 2 1 2 3\n5\n5 1 2 4 3 1\n5 1 2 4 3 2 1\n5 1 2 4 3 1 2\n4\n3 3 1 1 3\n3 2 4 1 3 2\n4 4 1 2 3 1 2\n''') == '2 2 1 2 1 4 1'\n"
    },
    {
        "number": 4630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\nassert solution('''5\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5\n0 3 1\n''') == '7 5 -2 4 -1 2'\nassert solution('''\n2 6\n1 5\n''') == '8 -1 2 6 4 0 3'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"8 -1 2 6 4 0 3\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '7 5 -2 4 -1 2'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 6') == '8'\nassert solution('3 5') == '5 -2 4 -1 2'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 6') == '8'\nassert solution('3 5') == '7'\nassert solution('1 5') == '-1 2 6 4 0 3'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 5\n0 3 1\n''') == '7 5 -2 4 -1 2'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 3') == '2'\nassert solution('3 5') == '3'\nassert solution('3 4 5') == '3'\n\nassert solution('3 4 5\\n6 7 8') == '3'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 5\n''') == '8'\nassert solution('''\n3\n0 3 1\n''') == '5 -2 4 -1 2'\nassert solution('''\n1\n2\n''') == '4'\nassert solution('''\n2\n0 3\n''') == '-1 2 3'\nassert solution('''\n2\n1 0\n''') == '0'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 6\n1 5\n''') == '8'\nassert solution('''\n3 5\n0 3 1\n''') == '7 5 -2 4 -1 2'\n"
    },
    {
        "number": 4631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n4\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'NO'\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2') == 'YES'\nassert solution('2\\n1 0\\n0 1\\n1') == 'YES'\nassert solution('6\\n1 2\\n3 3\\n5 6\\n5 6\\n6 5\\n5 4\\n6') == 'YES'\nassert solution('5\\n3 3\\n5 5\\n5 5\\n5 3\\n3 2\\n2 2\\n2') == 'NO'\n\n'''\n\nfor _ in range(int(input())):\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    x.sort()\n    y.sort()\n    x.reverse()\n    y.reverse()\n    p = []\n    p.append(x[0])\n    p.append(y[0])\n    for i in range(1, n):\n        if p[0] < x[i] and p[1] < y[i]:\n            p.append(x[i])\n            p.append(y[i])\n        elif p[0] > x[i] and p[1] > y[i]:\n            p.append(x[i])\n            p.append(y[i])\n    p = ''.join(p)\n    if ''.join(x) == ''.join(y) or ''.join(y) == ''.join(x):\n        p = 'NO'\n    print(p)"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 3\n1 2\n3 3\n5 5\n4 3\n2''') == 'YES'\nassert solution('''3\n1 3\n1 2\n3 3\n5 5\n4 3\n2''') == 'NO'\nassert solution('''2\n1 0\n0 1\n1\n4 3\n\n2\n1 0\n0 1\n1\n4 3''') == 'YES'\n\nassert solution('''5\n4 3\n4 3\n4 3\n4 3\n2\n3\n1 0\n0 1\n1\n3 2\n''') == 'NO'\n\nassert solution('''4\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'YES'"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n3') == 'YES'\nassert solution('5\\n5') == 'YES'\nassert solution('4\\n3') == 'NO'\nassert solution('5\\n5') == 'NO'\nassert solution('5\\n3') == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'NO'\nassert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'NO'"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"YES\"\n\nassert solution('''\n10\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"YES\"\n\nassert solution('''\n1\n10\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"NO\"\n\nassert solution('''\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == \"NO\""
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2''') == 'YES'\nassert solution('''3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2''') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n''') == 'YES'\n\n'''"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2\n3 3\n4 2\n1 1\n0 0\n1\n2 2\n3 3\n\n''') == 'YES'\n\nassert solution('''\n10\n3\n2 0\n4 0\n5 0\n8 3\n9 2\n10 2\n8 7\n8 5\n5 7\n4 6\n6 4\n7 4\n7 5\n''') == 'NO'\n\nassert solution('''\n5\n5\n2 2\n3 3\n4 3\n3 4\n2 5\n''') == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('2') == 'YES'\nassert solution('1 0') == 'NO'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\n\nassert solution('''\n1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '500'\n\nassert solution('''\n1\n217871987498122 10\n100000000000000001 1\n''') == '217871987498122'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '0'\nassert solution('1 1') == '0'\nassert solution('500 4') == '2'\nassert solution('217871987498122 10') == '2128012501878'\nassert solution('100000000000000001 1') == '899999999999999999'"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '0'\nassert solution('1 1') == '0'\nassert solution('500 4') == '2'\nassert solution('217871987498122 10') == '2128012501878'\nassert solution('100000000000000001 1') == '899999999999999999'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '0'\nassert solution(input()) == '500'\nassert solution(input()) == '217871987498122'\nassert solution(input()) == '899999999999999999'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"2128012501878\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == \"8\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '0'\nassert solution('''\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\nassert solution('''\n3\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '0'\nassert solution('''\n4\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '2'\nassert solution('''\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('500 4') == '1'\nassert solution('217871987498122 10') == '3'\nassert solution('100000000000000001 1') == '0'"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '8'\nassert solution('''2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n\n''') == '0'\nassert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '8'\nassert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n\n''') == '0'\n"
    },
    {
        "number": 4633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\nassert solution('''\n1\n5\n''') == '0'\nassert solution('''\n11\n5\n''') == '1'\nassert solution('''\n4\n16\n''') == '1'\nassert solution('''\n5\n1\n''') == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n1\n2\n3\n1''') == '1'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == '0'\nassert solution('''5\n1\n1\n1\n1\n1''') == '2'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '4'\nassert solution('''\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '1'\nassert solution('''\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '0'\nassert solution('''\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''\n3\n1 0 1\n2\n1 0\n''') == '1'\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''3\n1\n1\n2\n''') == '1'\nassert solution('''5\n5\n1 1 1 1 1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '4'\nassert solution('''3\n1\n1\n1\n''') == '1'\nassert solution('''5\n5\n1 1 1 1 1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '4'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '0'\nassert solution('3') == '0'\nassert solution('1') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''\n10\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '4'\nassert solution('''\n10\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '0'\nassert solution('''\n10\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"2\"\nassert solution('''5\n1 0 0 0 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"4\"\nassert solution('''5\n1 0 0 0 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"4\"\nassert solution('''5\n1 0 0 0 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"1\"\nassert solution('''5\n1 0 0 0 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1''') == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n2''') == '0'\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '4'"
    },
    {
        "number": 4634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '0'\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '1'\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '4'\nassert solution('''5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '5'\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3\n4\n6\n7 3\n6 2''') == \"cbcacab\"\nassert solution('''3\n3\n4\n6\n7 3\n6 2''') == \"abcd\"\nassert solution('''3\n3\n4\n6\n7 3\n6 2''') == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'cbcacab'\nassert solution('4') == 'abcd'\nassert solution('6') == 'baabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"3\\n10 4\\n10 6\\n7 6\\n9 9\\n10 5\\n9 8\\n8 8\\n8 9\\n7 7\\n9 8\\n8 6\\n9 9\\n8 8\\n7 6\\n7 8\\n9 8\\n8 9\\n6 7\\n7 8\\n9 8\\n8 9\\n6 8\\n9 7\\n8 9\\n9 6\\n7 9\\n8 8\\n9 9\\n6 9\") == \"abcd\"\nassert solution(\"3\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\") == \"baabab\"\nassert solution(\"2\\n6 2\\n6 5\\n5 6\\n6 7\\n7 7\\n7 5\\n5 6\") == \"baabab\"\nassert solution(\"3\\n2 3\\n2 3\\n3 4\\n3 4\\n4 3\\n4 4\\n4 4\") == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n6 3\n6 2\n\"\"\") == \"ababab\"\nassert solution(\"\"\"\n2\n4 3\n6 3\n\"\"\") == \"ababab\"\nassert solution(\"\"\"\n2\n6 3\n6 3\n\"\"\") == \"ababab\"\nassert solution(\"\"\"\n2\n6 3\n6 3\n\"\"\") == \"ababab\"\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"cbc\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"cbc\"\nassert solution(\"4\") == \"abcd\"\nassert solution(\"5\") == \"bab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 3\n4 4\n6 2\n''') == 'abcd'\nassert solution('''\n6 2\n4 4\n7 3\n''') == 'cbcacab'\nassert solution('''\n4 3\n3 4\n7 2\n''') == 'ccbbaaa'\nassert solution('''\n1 2\n1 3\n''') == 'c'\nassert solution('''\n6 4\n3 3\n5 3\n''') == 'acbcab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"aba\"\nassert solution(\"4\") == \"abc\"\nassert solution(\"6\") == \"abab\""
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\nassert solution(\"3\") == \"c\"\nassert solution(\"4\") == \"ab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n7 3\\n4 4\") == \"abcd\"\nassert solution(\"2 2\\n4 2\\n1 1\") == \"bcac\"\nassert solution(\"4 1\\n2 1\\n1 1\") == \"abcd\""
    },
    {
        "number": 4635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"abbbc\"\nassert solution(input()) == \"baabab\"\nassert solution(input()) == \"ccbbaaa\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\nassert solution(\"7\\n1000\\n3\\n1 1 1\") == \"1 1000 0\"\nassert solution(\"7\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"2 2 1\"\nassert solution(\"7\\n2\\n1 1\") == \"1 1 2\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n\n''') == '''1 1000 0\n2 1 2\n6 45 46\n2 2 1\n3 4 2\n4 4 3\n'''\n\nassert solution('''\n6\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n\n''') == '''1 1000 0\n2 1 2\n6 45 46\n2 2 1\n3 4 2\n4 4 3\n'''"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\nassert solution(\"7\\n1\\n1000\\n3\\n1 1 1\") == \"1 1000 0\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\") == \"2 1 2\"\nassert solution(\"7\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\") == \"2 1 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\") == \"2 1 2\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n15\n4 1 3 6 5 2\n1\n10000\n2\n5 1\n3\n0\n''') == '1 1000 0\\n2 1 2\\n3 4 2\\n4 4 3\\n5 1 3\\n6 2 1\\n7 2 2\\n8 3 1\\n9 3 2\\n10 1 1\\n11 1 1\\n'''\n\nassert solution('''\n10\n15\n4 1 3 6 5 2\n1\n10000\n2\n5 1\n3\n0\n''') == '2 1 2\\n3 4 2\\n4 4 3\\n5 1 3\\n6 2 1\\n7 2 2\\n8 3 1\\n9 3 2\\n10 1 1\\n11 1 1\\n'''\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    7\n    11\n    3 1 4 1 5 9 2 6 5 3 5\n    1\n    1000\n    3\n    1 1 1\n    13\n    1 2 3 4 5 6 7 8 9 10 11 12 13\n    2\n    2 1\n    6\n    1 1 1\n    7\n    1 1 1\n    \"\"\"\n) == \"6 23 21\"\nassert solution(\n    \"\"\"\n    3\n    1 1 1\n    13\n    1 2 3 4 5 6 7 8 9 10 11 12 13\n    2\n    2 1\n    6\n    1 1 1\n    7\n    1 1 1\n    \"\"\"\n) == \"1 1000 0\"\nassert solution(\n    \"\"\"\n    1\n    1000\n    3\n    1 1 1\n    13\n    1 2 3 4 5 6 7 8 9 10 11 12 13\n    2\n    2 1\n    6\n    1 1 1\n    7\n    1 1 1\n    \"\"\"\n) == \"1 1000 0\"\nassert solution(\n    \"\"\"\n    4\n    1 1 1 1\n    13\n    1 2 3 4 5 6 7 8 9 10 11 12 13\n    2\n    2 1\n    6\n    1 1 1\n    7\n    1 1 1\n    \"\"\"\n) == \"1 1000 0\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    5\n    7\n    1 1 1 1 1 1\n    1\n    2\n    2 1\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1 1\n    1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    3\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    3\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    3\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    3\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    3\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    3\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    3\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    3\n    2 1\n    1\n    2\n    2 1\n    1\n    2\n    2 1\n    2\n    2 1\n    3\n    1 1 1\n    2\n    2 1\n    2 2\n    2 1\n    4\n    1 1 1\n    1\n    2\n    2 1\n    2 1\n    1\n    2\n    "
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '6 23 21'\nassert solution('''\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '2 2 1'\nassert solution('''\n5\n7\n3 1 4 1 5 9 2 6 5 3\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '0 2 1'\nassert solution('''\n7\n11\n3 1 4 1 5 9 2 6 5 3\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '1 999 0'\nassert solution('''\n5\n7\n3 1 4 1 5 9 2 6 5 3\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '2 2 1'\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n10\n4\n2 3 1 4 3 2 4 4 5 1\n5\n10\n3\n2 1\n5\n9\n3\n3\n8\n4\n7\n''') == '3 1 2 4'\nassert solution('''5\n6\n4\n2 4 1 4 3 2\n1\n5\n1\n5\n9\n2\n5\n3\n6\n4\n7\n''') == '0 1 3 4 5'\nassert solution('''5\n6\n4\n2 4 1 4 3 2\n1\n5\n1\n5\n9\n3\n3\n8\n4\n7\n''') == '0 2 4'\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1 1 1 1\n''') == '6 23 21'\nassert solution('''\n3\n1 3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1 1 1 1\n''') == '6 23 21'\n"
    },
    {
        "number": 4636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '6 23 21'\n\nassert solution('''\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1\n7\n1 1 1\n''') == '2 2 1'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2\n1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 1\n1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 2\n1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 1\n1 2\n3 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"27\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '27'\nassert solution('2 1') == '27'\nassert solution('5 1') == '27'\nassert solution('5 1') == '27'\nassert solution('5 1') == '27'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '27'\n\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '39'\n\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '11'\n\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '17'\n\nassert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '11'"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '6'\n\nprint('all test cases passed')\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5''') == \"6\"\nassert solution('''4\n0 0\n0 0\n0 0\n0 0''') == \"0\"\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5''') == \"27\"\nassert solution('''4\n4 4\n4 4\n4 4\n4 4''') == \"11\"\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5''') == \"17\""
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\nassert solution() == \"27\"\nassert solution() == \"39\"\nassert solution() == \"11\"\nassert solution() == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '27'\nassert solution('3 4') == '39'\nassert solution('4 0') == '11'\nassert solution('2 2 4 3') == '17'\nassert solution('4 4 5 4') == '17'"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '6'\nassert solution('2 1') == '27'\nassert solution('2 1') == '39'\nassert solution('2 1') == '11'\nassert solution('2 1') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"6\"\nassert solution(\"2 1\") == \"27\"\nassert solution(\"3 4\") == \"39\"\nassert solution(\"5 5\") == \"11\"\nassert solution(\"5 5 6 6 5\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5''') == '27'\nassert solution('''5 2\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3''') == '39'\nassert solution('''5 4\n1 2 5 4 3\n5 3''') == '11'\nassert solution('''10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1\\n3 2 3 1 3 3 1 4 1') == '0 2 4 7 8 11 13 14 16 17'\nassert solution('10 0\\n') == ''\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\") == \"0 2 4 7 8 11 13 14 16 17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 1\",\n    \"1 2\",\n    \"1 3\",\n    ) == \"0 1\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 2') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1') == '0 2 4 7 8 11 13 14 16 17'"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0 7 13 18 24 35 36 37 40 45'"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"7 6 18 6 16 18 1 17 17\\n\"\n    \"7 9 3 10 9 1 10 1 5\\n\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\n    \"5 1\\n\"\n    \"3 2 3 1 3 3 1 4 1\\n\"\n    \"1 2 3 4 4 1 2 1 3\\n\") == \"0 2 4 7 8 11 13 14 16 17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"10 2\") == \"7\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 2') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1') == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 2') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1') == '0'\nassert solution('10 2') == '0'\nassert solution('10 3') == '0'\n"
    },
    {
        "number": 4638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aaabb\"\nassert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aabab\"\nassert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aaaaabaaaaabaaaaaaaa\"\nassert solution('''\n4 3\n1 1\n1 2\n3 2\n3 3\n''') == \"123123123\"\nassert solution('''\n4 2\n2 2\n2 2\n2 2\n''') == \"22222222\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaabb'\nassert solution('''\n6 1\n6 2\n6 3\n6 4\n6 5\n6 7\n''') == 'aabab'\nassert solution('''\n4 1\n4 2\n4 3\n4 4\n''') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\\n') == 'aabab'\nassert solution('20\\n20\\n20\\n20\\n20\\n20\\n') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"aab\", \"Should be 'aab' for '2'\"\nassert solution(\"8\") == \"aababab\", \"Should be 'aababab' for '8'\"\nassert solution(\"10\") == \"abaaaaa\", \"Should be 'abaaaaa' for '10'\"\nassert solution(\"100\") == \"aaaaaaaa\", \"Should be 'aaaaaaaa' for '100'\"\nassert solution(\"999\") == \"aababaababaabababaabaababaabaabaabaabaabababaabaababaabaababaabaababaababaabaabaabaabaabababaababaabaababaabaabaabaabaababaabaabaabaababaabaabaabaababaabaabaababaabaabaabaabaabaabaabaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'ababa'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaaa'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'bbaaa'\n\n'''"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == \"aabba\"\n\nassert solution('''\n6 1\n6 2\n6 8\n6 10\n3 1\n3 2\n20 100\n''') == \"abbaa\"\n\nassert solution('''\n7 1\n7 2\n7 8\n7 10\n3 1\n3 2\n20 100\n''') == \"bbaab\"\n\nassert solution('''\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n''') == \"bbab\"\n\nassert solution('''\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n''') == \"bbaaa\""
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1\n5 1\n5 2\n\"\"\") == \"aaaaabaaaaabaaaaaaaa\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2''') == \"aaabb\"\nassert solution('''3 1\n3 2\n20 100''') == \"aaaaabaaaaabaaaaaaaa\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"6 1\") == \"5\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"5 1\") == \"5\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == '6'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == '5'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10''') == '10'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '6'\nassert solution('''3\n1 2 3\n1 4\n1 2\n2 3\n3 4\n''') == '1'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '10'\nassert solution('''5\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '1'\nassert solution('''2\n1 1\n1000000000\n1000000000\n''') == '1'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '1'\nassert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '1'\nassert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '2'\nassert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '5'\nassert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '10'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '5'\nassert solution('''\n10 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '6'\n'''\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == \"6\"\nassert solution('''\n8 1\n1 4 2 3 4 1 5 3\n4 1 2 5 3 4 1 5 3\n1 4 2 3 5 4 1 2\n1 4 2 3 4 1 5 3\n1 4 2 3 4 1 5 3\n1 4 2 3 4 1 5 3\n1 4 2 3 4 1 5 3\n1 4 2 3 4 1 5 3\n''') == \"7\"\nassert solution('''\n10 1\n1 5 6 7 4 3 2 8 1\n1 4 2 3 4 1 5 3\n4 1 2 3 5 4 1 2\n3 4 1 5 6 4 1 2\n3 4 1 5 6 4 1 2\n3 4 1 5 6 4 1 2\n3 4 1 5 6 4 1 2\n3 4 1 5 6 4 1 2\n3 4 1 5 6 4 1 2\n4 1 2 3 5 4 1 2\n4 1 2 3 5 4 1 2\n4 1 2 3 5 4 1 2\n4 1 2 3 5 4 1 2\n''') == \"9\"\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '1'\nassert solution('''\n4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '5'\nassert solution('''\n4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '10'\n'''"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '6'\nassert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n''') == '10'\n"
    },
    {
        "number": 4640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 1') == '1'\nassert solution('7 1') == '1'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 3') == '0'\nassert solution('7 3') == '1'\nassert solution('10 3') == '4'\nassert solution('100 3') == '8'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"10 11\") == \"10\""
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 3') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n7 3\n0\n1\n2\n2\n0\n0\n10\n''') == '1'\nassert solution(\n'''\n4 3\n1\n2\n1\n2\n''') == '0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 3') == '1'\nassert solution('4 3') == '0'\nassert solution('2 2') == '2'\nassert solution('4 4') == '3'"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"4 3\") == \"0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '7 3\\n'\n    '0\\n'\n    '1\\n'\n    '2\\n'\n    '2\\n'\n    '0\\n'\n    '0'\n    ) == '1\\n2\\n3\\n4\\n4'\n\nassert solution(\n    '4 3\\n'\n    '1\\n'\n    '2\\n'\n    '1\\n'\n    '2\\n'\n    ) == '0\\n0\\n0\\n0'\n\nassert solution(\n    '4 3\\n'\n    '1\\n'\n    '2\\n'\n    '1\\n'\n    '2\\n'\n    ) == '0\\n0\\n0\\n0'\n\nassert solution(\n    '4 3\\n'\n    '1\\n'\n    '2\\n'\n    '1\\n'\n    '2\\n'\n    ) == '0\\n0\\n0\\n0'"
    },
    {
        "number": 4641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3') == '1'\nassert solution('4 3') == '0'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 49 20 40 30 50 10', 'First Test'\nassert solution('''\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 49 20 40 30 50 10', 'Second Test'\nassert solution('''\n4 5 100\n1 5 10\n4 9 10\n3 6 8\n2 7 9\n''') == '1 2 3 4 5 6 7 8 9', 'Third Test'\nassert solution('''\n2\n1 2\n4 5\n''') == '1 2 4', 'Fourth Test'\nassert solution('''\n4\n1 3 6\n3 4 7\n2 5 4\n6 7\n''') == '4 2 5 6 7', 'Fifth Test'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49 \\n20 40 30 50 10 \\n26 32 20 38 44 50 \\n8 23 18 13 3 \\n1 10 13 4 19 22 25 16 7'\n\nassert solution('5\\n3 4 1 5\\n1 5 4 3\\n5 1 3 4\\n5 6 8\\n3 7 2') == '1 5 4 3 \\n5 1 3 4 \\n3 7 2'\n\nassert solution('5\\n3 4 1 5\\n1 5 4 3\\n5 1 3 4\\n5 6 8\\n3 7 2') == '1 5 4 3 \\n5 1 3 4 \\n3 7 2'\n\nassert solution('5\\n5 8 6 7 3\\n4 7 8 9 1\\n2 8 5 9 4\\n3 5 7 9 8\\n2 4 7 8 5\\n3 8 4 1 5\\n2 9 6 7 1\\n4 5 6 9 8\\n7 8 9 1 2\\n3 1 5 9 4\\n9 2 8 6 7\\n2 4 7 8 5\\n6 4 1 5 8\\n4 9 6 7 2\\n8 5 9 4 3\\n3 8 4 1 5\\n9 7 2 6 1\\n7 8 9 1 2\\n8 1 5 9 4\\n2 9 6 7 1\\n4 5 6 9 8\\n2 4 7 8 5\\n6 4 1 5 8\\n9 2 8 6 7\\n4 9 6 7 2\\n8 5 9 4 3\\n3 8 4 1 5\\n1 2 8 5 9\\n6 4 1 5 8\\n5 8 9 4 3\\n1 5 9 4 3\\n3 8 4 1 5\\n1 2 8 5 9\\n2 4 7 8 5\\n6 4 1 5 8\\n9 7 2 6 1\\n2 9 6 7 1\\n4 5 6 9 8\\n7 8 9 1 2\\n3 8 4 1 5\\n9 2 8 6 7\\n2 4 7 8 5\\n4 9 6 7 2\\n8 5 9 4 3\\n3 8 4 1 5\\n9 7 2 6 1\\n1 2 8 5 9\\n5 8 9 4 3\\n4 5 6 9 8\\n1 5 9 4 3\\n6 4 1 5 8\\n2 4 7 8 5\\n3 8 4 1 5\\n9 2 8 6 7\\n4 9 6 7 2\\n8 5 9 4 3\\n3 8 4 1 5\\n2 9 6 7 1\\n5 8 9 4 3\\n1 5 9 4 3\\n6 4 1 5 8\\n2 4 7 8 5\\n9 7 2 6 1\\n9 8 6 7 2\\n8 5 9 4 3\\n3 8 4 1 5\\n6 4 1 5 8\\n7 8 9 1 2\\n2 4 7 8 5\\n4 9 6 7 2\\n5 5 9 4 3\\n1 5 9 4 3\\n3 8 4 1 5\\n2 9 6 7 1\\n2 5 9 4 3\\n6 4 1 5 8\\n5 1 9 4 3\\n7 8 9 1 2\\n3 8 4 1 5\\n8 9 6 7 2\\n6 4 1 5 8\\n2 4 7 8 5\\n2 5 9 4 3\\n3 8 4 1 5\\n1 2 8 5 9\\n5 6 8 7 9\\n4 7 8 9 1\\n3 5 7 9 8\\n9 8 6 7 2\\n5 1 5 4 3\\n1 5 4 3 2\\n9 7 2 6 1\\n3 1 5 9 4\\n5 2 7 8 9\\n4 1 5 9 4\\n6 5 1 5 8\\n3 6 5 9 4\\n4 3 7 2\\n6 1 5 9 4\\n6 1 5 9 4\\n2 4 7 8 5\\n4 5 6 9 8\\n2 7 8 9 1\\n5 8 9 4 3\\n4 1 5 9 4\\n2 9 6 7 1\\n2 1 5 9 4\\n8 6 7 2\\n5 1 5 4 3\\n4 1 5 9 4\\n3 8 4 1 5\\n1 5 4 3 2\\n2 4 7 8 5\\n2 6 7 8 5\\n2 4 7 8 5\\n2 1 5 9 4\\n3 8 4 1 5\\n1 5 4 3 2\\n9 5 6 7 9\\n1 5 9 4 3\\n6 4 1 5 8\\n2 4 7 8 5\\n1 2 8 5 9\\n3 5 7 9 8\\n1 4 7 8 9\\n5 6 8 7 9\\n9 8 6 7 2\\n5 8 9 4 3\\n3 8 4 1 5\\n2 4 7 8 5\\n9 6 7 2\\n2 4 7 8 5\\n1 5 9 4 3\\n9 5 6 7 9\\n6 7 2 6 1\\n2 9 6 7 1\\n3 8 4 1 5\\n2 9 6 7 1\\n4 5 6 9 8\\n3 8 4 1 5\\n1 5 9 4 3\\n3 8 4 1 5\\n9 6 7 2\\n5 1 5 4 3\\n4 1 5 9 4\\n2 9 6 7 1\\n3 8 4 1 5\\n5 1 5 4 3\\n6 4 1 5 8\\n2 4 7 8 5\\n3 8 4 1 5\\n3 8 4 1 5\\n1 5 9 4 3\\n5 6 8 7 9\\n5 1 5 4 3\\n6 4 1 5 8\\n3 6 5 9 4\\n2 4 7 8 5\\n1 2 8 5 9\\n6 1 5 9 4\\n4 1 5 9 4\\n2 8 6 7 2\\n1 5 9 4 3\\n1 5 9 4 3\\n1 2 8 5 9\\n1 2 8 5 9\\n6 1 5 9 4\\n1 1 5 9 4\\n5 8 9 4 3\\n1 5 9 4 3\\n5 1 5 4 3\\n1 2 8 5 9\\n9 6 7 2\\n9 6 7 2\\n9 8 6 7 2\\n8 8 6 7 2\\n7 9 8 6 7\\n9 8 6 7 2\\n6 4 1 5 8\\n3 8 4 1 5\\n1 5 9 4 3\\n6 4 1 5 8\\n9 8 6 7 2\\n9 8 6 7 2\\n1 5 9 4 3\\n2 8 6 7 2\\n1 2 8 5 9\\n1 2 8 5 9\\n2 4 7"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1\n5 20\n6 20\n5 3 8\n9 13 22\n\"\"\") == \"\"\"1 1 20 20 50 10\n26 32 20 38 44 50 1\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\nassert solution(\"\"\"\n3 3\n1 2 10\n3 2 5\n1 5 7\n\"\"\") == \"\"\"1 2 10\n3 2 5\n1 5 7\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n1 2 10\n3 2 5\n1 5 7\n\"\"\") == \"\"\"1 2 10\n3 2 5\n1 5 7\n\"\"\"\n\nassert solution(\"\"\"\n4 5\n3 5 7\n4 5 8\n3 3 3\n1 5 8\n\"\"\") == \"\"\"1 5 7\n3 3 3\n3 5 8\n4 5 8\n\"\"\"\n\nassert solution(\"\"\"\n7 7\n1 2 3\n1 2 4\n1 3 5\n1 5 6\n1 6 7\n1 7 8\n1 8 9\n2 4 5\n3 6 7\n4 5 8\n5 8 9\n6 7 10\n7 10 11\n8 11 12\n9 12 13\n10 13 14\n11 14 15\n12 15 16\n13 16 17\n14 17 18\n15 18 19\n16 19 20\n17 20 21\n18 21 22\n19 22 23\n20 23 24\n21 24 25\n22 25 26\n23 26 27\n24 27 28\n\"\"\") == \"\"\"1 2 3\n1 2 4\n1 3 5\n1 5 6\n1 6 7\n1 7 8\n1 8 9\n2 4 5\n3 6 7\n4 5 8\n5 8 9\n6 7 10\n7 10 11\n8 11 12\n9 12 13\n10 13 14\n11 14 15\n12 15 16\n13 16 17\n14 17 18\n15 18 19\n16 19 20\n17 20 21\n18 21 22\n19 22 23\n20 23 24\n21 24 25\n22 25 26\n23 26 27\n24 27 28\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 2\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 2 20 30 50 10'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\nassert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n1 10 13 4 19 22 25 16 7\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\""
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 1 4\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 4 13 22'\nassert solution('''3\n2 1 4\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 4 13 22'\nassert solution('''5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 49 20 50'\nassert solution('''5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 49 20 50'\nassert solution('''10\n2 1 4\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 4 13 22'\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50 \\n8 23 18 13 3 \\n1 10 13 4 19 22 25 16 7\"\nassert solution(\"3\\n2 1 49\\n5 20 50\\n6 20 50\") == \"2 1 49\\n20 40 30 50 10\\n26 32 20 38 44 50 \\n8 23 18 13 3 \\n1 10 13 4 19 22 25 16 7\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 1 49\n5 20 50\n6 20 50\n''') == '1 49 20 50 6 20 50', \"Wrong solution\"\nassert solution('''\n3\n2 1 49\n5 20 50\n6 20 50\n''') == '20 40 30 50 10', \"Wrong solution\"\nassert solution('''\n5\n6 9 9\n''') == '6 9 9', \"Wrong solution\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49 20 40 30 50 10\\n26 32 20 38 44 50 16 7\"\nassert solution(\"5 2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49 20 40 30 50 10\\n26 32 20 38 44 50 16 7\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 20 50\n\"\"\") == \"20 50\"\nassert solution(\"\"\"\n6 20 50\n\"\"\") == \"20 50\"\nassert solution(\"\"\"\n5 3 8\n9 13 22\n\"\"\") == \"13 22\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2') == '1 2 3', \"Wrong result\"\nassert solution('3 4 7 8 1') == '1 2 3 4', \"Wrong result\"\nassert solution('1 2 3 4 5 6') == '1 2 3 4 5 6', \"Wrong result\"\n\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n'''\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 1 2\n''') == '1 2 3'\n\nsolution('''\n3 5 8 1 2\n''') == '1 2 3 5 8'\n'''"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n'''\n\nimport itertools\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\nfor i in range(len(arr)):\n    arr[i] = str(arr[i])\n\narr.sort()\n\nfor j in itertools.zip_longest(*arr):\n    print(j)\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2 1 3\"\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2') == '1 2 3'"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('4 4 2 1 3') == '1 2 3 4'\nassert solution('2 2 1 3 4') == '1 2 3 4'\nassert solution('6 7 8 5 4 3 2 1') == '1 2 3 4 5 6 7 8'\nassert solution('7 3 5 1 2 4 6 8') == '1 2 3 4 5 6 7 8'\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\"3\",\"3 1 2\",\"1 2 3\",\"2 3 1\"]) == \"1 2 3\""
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n"
    },
    {
        "number": 4643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES'\nassert solution('''\n3\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'NO'"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES'\nassert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'NO'\nassert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES'\nassert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"YES\", \"Example\"\nassert solution(\"5\") == \"YES\", \"Example\"\nassert solution(\"2\") == \"NO\", \"Example\"\nassert solution(\"5\") == \"NO\", \"Example\"\nassert solution(\"4\") == \"NO\", \"Example\"\n\nimport io\nimport os\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\" * 5\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES', 'First example'\nassert solution('''2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'NO', 'Second example'\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 3\n4\n2 2 8 8\n3\n3 3 3''') == 'YES'\nassert solution('''5\n2\n3\n4\n5\n6\n7''') == 'NO'\nassert solution('''5\n2 3\n4\n5 6 7''') == 'YES'\nassert solution('''5\n2 3\n4\n5 8 9''') == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\\nNO\\nYES\\nNO\\nNO\"\nprint(solution(\"1\\n1\\n0\\n0\"))\nprint(solution(\"3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES\\nYES\\nYES\\nNO\\nNO\\n', \"Test 1\"\nassert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES\\nNO\\nYES\\nNO\\nNO\\n', \"Test 2\"\nassert solution('''\n5\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'YES\\nYES\\nNO\\nNO\\nNO\\n', \"Test 3\""
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n7\n6\n5\n4\n3\n2\n\"\"\"\n) == \"9 6 10 8 4 7 3 1 5 2\", \"Wrong\"\n\nassert solution(\n    \"\"\"\n3\n2\n1\n\"\"\",\n) == \"3 1 2\", \"Wrong\"\n\nassert solution(\n    \"\"\"\n2\n1\n\"\"\",\n) == \"2 1\", \"Wrong\"\n\nassert solution(\n    \"\"\"\n1\n1\n\"\"\",\n) == \"1 1\", \"Wrong\"\n\nassert solution(\n    \"\"\"\n5\n10\n5\n6\n7\n3\n4\n1\n\"\"\",\n) == \"3 4 6 2 7 10 1 5\", \"Wrong\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"9 6 10 8 4 7 3 1 5 2!\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n2\n4\n6\n7\n13\n''') == '9 6 10 8 4 7 3 1 5 2 \n5 1 4 3 6 2 7 9 8 10 13 12 11 5 4 2 1 3'''\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"6\") == \"3 1 4 2\"\nassert solution(\"3\") == -1"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2\") == \"2 5\"\nassert solution(\"7\\n4\") == \"4 7\"\nassert solution(\"3\\n7\") == \"3 7\"\nassert solution(\"6\\n5\") == \"5 6\"\nassert solution(\"9\\n10\") == \"10 9\""
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n2\n4\n6\n7\n13\n''') == '9 6 10 8 4 7 3 1 5 2 '\nassert solution('''\n9\n2\n4\n6\n7\n13\n''') == '3 1 4 2 '\nassert solution('''\n10\n2\n4\n6\n7\n13\n''') == '5 1 3 6 2 4 7 3 5 1 2 4 8 3 6 1 5 7 9 13 11 8 12 2 4 10 4 1 13 6 9 5 8 2 7 13 12 10 11 3 13 1 3 5 1 5 3 2 10 5 8 9 6 1 13'''\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3 1 4 2'\nassert solution('6') == '5 3 6 2 4 1'\nassert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution(\"1\")) == \"1\"\nassert solution(solution(\"2\")) == \"-1\"\nassert solution(solution(\"3\")) == \"-1\"\nassert solution(solution(\"4\")) == \"-1\"\nassert solution(solution(\"5\")) == \"-1\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n6') == '9 6 10 8 4 7 3 1 5 2'\n"
    },
    {
        "number": 4645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6\") == \"5 6\"\nassert solution(\"3\\n4\") == \"3 4\"\nassert solution(\"7\\n8\") == \"7 8\"\nassert solution(\"10\\n11\") == \"10 11\"\nassert solution(\"12\\n13\") == \"12 13\"\n\n\n\n'''\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n4\\n3 2 7 6\\n3\\n3 2 6') == '1\\n1\\n-1'\nassert solution('5\\n5\\n1 2 3 4 5\\n0\\n1') == '0\\n0\\n0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '2'\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == '-1'\n'''\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == \"2\"\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == \"1\"\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == \"0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '1'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '2'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '-1'\nassert solution('''2\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '1'\nassert solution('''2\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '0'"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n3 2 6\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '2'\nassert solution('2\\n6\\n4 3 2 9 1 5\\n1\\n7\\n3\\n4\\n5\\n2\\n4\\n7\\n8\\n0\\n7\\n3\\n1\\n4\\n6\\n5\\n2\\n5\\n9\\n8\\n7\\n1\\n4\\n0\\n6\\n3\\n2\\n8\\n5\\n9\\n7\\n4\\n6\\n3\\n2\\n5\\n8\\n1\\n0\\n4\\n2\\n9\\n6\\n7\\n1\\n8\\n5\\n3\\n4\\n2\\n6\\n9\\n5\\n7\\n0\\n8\\n3\\n9\\n5\\n4\\n7\\n8\\n2\\n1\\n6\\n5\\n3\\n0\\n1\\n9\\n8\\n7\\n4\\n6\\n2\\n3\\n0\\n7\\n8\\n5\\n6\\n2\\n9\\n1\\n3\\n4\\n7\\n5\\n9\\n8\\n6\\n0\\n1\\n7\\n5\\n4\\n8\\n9\\n2\\n3\\n6\\n8\\n0\\n4\\n7\\n9\\n1\\n2\\n5\\n3\\n8\\n9\\n6\\n7\\n5\\n4\\n0\\n1\\n4\\n3\\n2\\n9\\n5\\n6\\n7\\n8\\n9\\n3\\n2\\n8\\n0\\n4\\n7\\n5\\n6\\n2\\n3\\n1\\n9\\n8\\n7\\n4\\n5\\n0\\n6\\n2\\n1\\n3\\n4\\n7\\n5\\n9\\n8\\n6\\n7\\n0\\n8\\n2\\n9\\n1\\n4\\n3\\n2\\n5\\n8\\n0\\n7\\n6\\n1\\n4\\n3\\n2\\n5\\n8\\n9\\n7\\n1\\n4\\n6\\n2\\n3\\n9\\n0\\n5\\n7\\n8\\n1\\n6\\n4\\n2\\n3\\n0\\n9\\n1\\n2\\n5\\n7\\n8\\n6\\n3\\n4\\n0\\n1\\n7\\n2\\n5\\n4\\n3\\n8\\n0\\n6\\n9\\n4\\n7\\n5\\n2\\n3\\n9\\n0\\n5\\n7\\n8\\n6\\n1\\n4\\n3\\n2\\n7\\n9\\n0\\n8\\n5\\n6\\n4\\n7\\n2\\n1\\n3\\n5\\n9\\n8\\n0\\n6\\n4\\n2\\n1\\n7\\n3\\n5\\n6\\n2\\n4\\n0\\n8\\n1\\n9\\n7\\n5\\n6\\n2\\n3\\n4\\n0\\n7\\n5\\n2\\n3\\n1\\n9\\n8\\n6\\n4\\n0\\n1\\n4\\n3\\n2\\n5\\n8\\n0\\n7\\n6\\n1\\n4\\n3\\n2\\n5\\n8\\n9\\n7\\n1\\n4\\n7\\n2\\n6\\n3\\n9\\n0\\n5\\n7\\n8\\n1\\n6\\n4\\n2\\n3\\n9\\n0\\n5\\n7\\n8\\n1\\n6\\n4\\n2\\n3\\n0\\n7\\n8\\n9\\n5\\n3\\n4\\n1\\n9\\n8\\n7\\n6\\n5\\n4\\n0\\n8\\n2\\n9\\n1\\n4\\n3\\n2\\n5\\n9\\n8\\n7\\n1\\n4\\n6\\n2\\n3\\n0\\n7\\n8\\n5\\n6\\n2\\n3\\n4\\n0\\n7\\n5\\n2\\n3\\n0\\n7\\n8\\n5\\n6\\n2\\n3\\n9\\n0\\n5\\n7\\n8\\n1\\n6\\n4\\n2\\n3\\n0\\n7\\n8\\n5\\n6\\n2\\n3\\n4\\n0\\n7\\n5\\n2\\n3\\n1\\n9\\n8\\n7\\n4\\n5\\n0\\n6\\n2\\n1\\n3\\n4\\n7\\n5\\n9\\n8\\n6\\n7\\n0\\n8\\n2\\n9\\n1\\n4\\n3\\n2\\n5\\n8\\n0\\n7\\n6\\n1\\n4\\n3\\n2\\n5\\n8\\n9\\n7\\n1\\n4\\n7\\n2\\n6\\n3\\n9\\n0\\n5\\n7\\n8\\n1\\n6\\n4\\n2\\n3\\n0\\n7\\n8\\n5\\n6\\n2\\n3\\n4\\"
    },
    {
        "number": 4646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\nassert solution() == \"2\"\nassert solution() == \"0\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0 -1 1 -1'\nassert solution('9') == '2 2 2 2 2 1 1 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1 1 0 0 0 0 0 0 1\"\nassert solution(\"4\") == \"1 0 0 0 1 1 0 0 0\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 0 1 0\n1 2\n1 3\n1 4\n\n2\n0 0 1 0\n1 2\n1 3\n1 4\n\n3\n0 0 1 0\n1 2\n1 3\n1 4\n\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == '2 2 2 2 2 1 1 0 2'\nassert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n2\n0 0 1 0\n1 2\n1 3\n1 4\n\n3\n0 0 1 0\n1 2\n1 3\n1 4\n\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == '0 -1 1 -1'"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == '2 2 2 2 1 1 0 2 '\nassert solution('''\n5\n0 0 1 0\n1 2\n1 3\n1 4\n2 5\n3 6\n4 7\n6 8\n5 9\n\n''') == '0 -1 1 -1 1 -1 -1 -1 -1 -1 -1 2 2 2 2 1 1 0 2 '\nprint('all tests passed')"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2 1 -1'\nassert solution('4') == '0 -1 1 -1'"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '2 -1 2 2'\nassert solution('9') == '2 2 2 2 2 1 1 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0 1 1 1 0 0 0 0 1\\n1 2') == '2 2 2 2 2 1 1 0 2 '\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1 "
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == \"2 2 2 2 1 1 0 2\"\nassert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n\n''') == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2 \"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1 \"\n\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n''') == '2 2 2 2 2 1 1 0 2 '\nassert solution('''\n4\n0 0 1 0\n1 2\n1 3\n1 4\n''') == '0 -1 1 -1 '\n'''\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '-1'\nassert solution('12') == '2'\nassert solution('12345') == '36'\nassert solution('15116544') == '168'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '2'\nassert solution('12') == '36'\nassert solution('12345') == '1236'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '-1'\nassert solution('3\\n1') == '2'\nassert solution('3\\n15116544') == '36'"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\nassert solution('12') == '1'\nassert solution('12345') == '36'\nassert solution('15116544') == '-1'"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489') == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"1\") == -1\nassert solution(\"12345\") == 12\nassert solution(\"1234\") == 36\nassert solution(\"123456789\") == 36\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('12') == '2'\nassert solution('12345') == '36'\nassert solution('15116544') == '-1'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '2'\nassert solution('12') == '36'\nassert solution('12345') == '36'\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10\") == \"0\"\nassert solution(\"2\\n2\") == \"0\"\nassert solution(\"3\\n3\") == \"0\"\nassert solution(\"4\\n4\") == \"0\"\nassert solution(\"5\\n10\") == \"1\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1''') == '0'\nassert solution('''5\n2''') == '-1'\nassert solution('''5\n3''') == '2'\nassert solution('''5\n12''') == '36'\nassert solution('''5\n12345''') == '-1'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 2\nRGRG\n5 3\nRBRG''') == \"1\"\nassert solution('''3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR''') == \"3\"\nassert solution('''3\n10 5\nBBBBRR\n20 4\nRRRBBBBB''') == \"0\""
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\nBGGGG\\n\") == \"0\"\nassert solution(\"5 3\\nRBRGR\\n\") == \"3\"\nassert solution(\"5 5\\nBBBRR\\n\") == \"3\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n''') == '0'\nassert solution('''3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n''') == '3'\nassert solution('''1\n7 1\nB\n''') == '0'\nassert solution('''2\n5 1\nB\n''') == '1'\nassert solution('''3\n10 1\nB\n''') == '1'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\") == \"0\"\nassert solution(\"5 5\\nBBBRR\\n5 5\\nBBBRR\") == \"3\"\n\n\n\"\"\"\n\n\n\"\"\"---SOLUTION---\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0'\nassert solution('5 2') == '1'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\\n') == '1'\nassert solution(\n    '10 1\\nRGGGGG\\n10 5\\nBBBBB\\n') == '5'\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"5 3\") == \"0\"\nassert solution(\"BGGGG\") == \"1\"\nassert solution(\"5 5\") == \"3\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"0\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\nassert solution('''2\n5\n1 1 1 1 1\n7\n1 1 1 1 1 2 2''') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3'\nassert solution('''\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3'\nassert solution('''\n1\n10\n1 2 5 4 9 8 2 5 7 9 8\n''') == '10'\nassert solution('''\n2\n10\n1 2 5 4 9 8 2 5 7 9 8\n''') == '10'\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n3 1 2 3 1') == '3'\nassert solution('2\\n7\\n1 1 1 1 1 2 2') == '3'"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n5 3 4 7 6 5\n7\n4 7 1 4 2 4 2 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"7\") == \"3\""
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\\n') == '1 5 2 4 3 \n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\nassert solution('4\\n4 3 2 1') == '1 2 3 4'\nassert solution('3\\n2 1 4') == '1 2 3'\nassert solution('2\\n3 2') == '3 2'\nassert solution('3\\n3 1') == '3 1 2'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n4\n5 4 1 3 2\n5 4 2 3 1\n1 5 4 2 3''') == '1 5 2 3 4'\n\nassert solution('''3\n3\n3 1 2\n2 1 3\n1''') == '2 1 3 1'\n\nassert solution('''3\n3\n5 4 1 3 2\n4 5 2 3 1\n1''') == '1 5 2 3 4'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 5 2 4 3'\nassert solution('''5\n4\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 5 2 4 3'"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n5 4 1 3 2''') == '1 5 2 4 3'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"2\\n4\\n1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"3\\n3\\n1 2 3\") == \"1 2 3\"\nassert solution(\"2\\n3\\n1 3 2\") == \"1 2 3\"\nassert solution(\"3\\n3\\n1 3 2\") == \"1 2 3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 2 3 4'\nassert solution('''\n4\n5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1\n''') == '1 5 2 4 3'\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1''') == '1 5 2 4 3 \n"
    },
    {
        "number": 4651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1''') == '1 5 2 4 3'\nassert solution('''4\n1 2 4 3\n1\n1\n4\n4 3 2 1''') == '1 2 3 4'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"3\\n5\\n1 2 3 4\\n3\\n1 3 2\") == \"NO\"\nassert solution(\"3\\n5\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"3\\n5\\n1 2 3 4\\n3\\n1 3 2\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n''') == 'YES'\nassert solution('''5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n''') == 'YES'\nassert solution('''6\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n''') == 'YES'\nassert solution('''3\n3\n1 2 3\n1\n1\n''') == 'NO'\nassert solution('''2\n2\n1 2\n1\n''') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('4') == 'YES'\nassert solution('1 2 3 4') == 'YES'\nassert solution('3') == 'NO'\nassert solution('1 2 3') == 'YES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n4\n1 2 3 4\n3\n1 2 3 4\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == \"YES\"\nassert solution('''\n5\n4\n1 2 3 4\n3\n1 2 3 4\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == \"YES\"\nassert solution('''\n5\n3\n1 2 3 4\n3\n1 2 3 4\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == \"NO\"\nassert solution('''\n5\n4\n1 2 3 4\n3\n1 2 3 4\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"5\\n6\\n1 2 3 4 5 6\\n1 5 2 3 4 6\\n1 4 5 2 3 6\\n1 5 4 2 3 6\\n1 3 2 5 4 6\") == \"YES\"\nassert solution(\"5\\n6\\n1 2 3 4 5 6\\n1 5 2 3 4 6\\n1 4 5 2 3 6\\n1 5 4 2 3 6\\n1 3 2 5 4 6\") == \"YES\"\nassert solution(\"5\\n6\\n1 2 3 4 5 6\\n1 5 2 3 4 6\\n1 4 5 2 3 6\\n1 5 4 2 3 6\\n1 3 2 5 4 6\") == \"NO\"\n\nstdin = \"\"\">\n8\n10\n1 2 3 4 5 6 7 8 9 10\n1 5 2 3 4 6 7 8 9 10\n1 4 5 2 3 6 7 8 9 10\n1 5 4 2 3 6 7 8 9 10\n1 3 2 5 4 6 7 8 9 10\n1 2 5 4 6 7 8 9 10\n1 2 4 5 6 7 8 9 10\n1 2 4 6 7 8 9 10\n\n>\n8\n7\n1 2 3 4 5 6 7 8\n1 5 2 3 4 6 7 8\n1 4 5 2 3 6 7 8\n1 5 4 2 3 6 7 8\n1 3 2 5 4 6 7 8\n1 2 5 4 6 7 8\n1 2 4 5 6 7 8\n1 2 4 6 7 8\n\n>\n8\n10\n1 2 3 4 5 6 7 8 9 10\n1 5 2 3 4 6 7 8 9 10\n1 4 5 2 3 6 7 8 9 10\n1 5 4 2 3 6 7 8 9 10\n1 3 2 5 4 6 7 8 9 10\n1 2 5 4 6 7 8 9 10\n1 2 4 5 6 7 8 9 10\n1 2 4 6 7 8 9 10\n\n>\n8\n10\n1 2 3 4 5 6 7 8 9 10\n1 5 2 3 4 6 7 8 9 10\n1 4 5 2 3 6 7 8 9 10\n1 5 4 2 3 6 7 8 9 10\n1 3 2 5 4 6 7 8 9 10\n1 2 5 4 6 7 8 9 10\n1 2 4 5 6 7 8 9 10\n1 2 4 6 7 8 9 10\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2') == 'YES'\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2') == 'NO'\nassert solution('5\\n4\\n1 2 3 4\\n5\\n3 2 1 5 4\\n1\\n1') == 'YES'\nassert solution('5\\n4\\n1 2 3 4\\n5\\n3 2 1 5 4\\n1\\n1') == 'NO'"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '75015'\nassert solution('100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2\n19 4\n12 7\n6 2\n100000 50010\n''') == '5'\nassert solution('''5\n3\n19 4\n12 7\n6 2\n100000 50010\n''') == '18'\nassert solution('''5\n4\n19 4\n12 7\n6 2\n100000 50010\n''') == '10'\nassert solution('''5\n5\n19 4\n12 7\n6 2\n100000 50010\n''') == '75015'"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '5'\nassert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '18'\nassert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '10'\nassert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '75015'\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '75015'\nassert solution('100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010''') == '5'\nassert solution('''5 1\n19 4\n12 7\n6 2\n100000 50010''') == '18'\nassert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010''') == '10'\nassert solution('''5 3\n19 4\n12 7\n6 2\n100000 50010''') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 2') == '5'\nassert solution('5 2') == '5'\nassert solution('5 2') == '5'\nassert solution('5 2') == '5'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010''') == '5'\nassert solution('''5 3\n4 4\n4 4''') == '6'\nassert solution('''5 3\n2 1\n3 3\n4 2''') == '4'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '75015'\nassert solution('100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '5'\nassert solution('5 2') == '18'\nassert solution('5 2') == '10'\nassert solution('5 2') == '6'\nassert solution('5 2') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '75015'"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 3\") == \"YES 2\"\nassert solution(\"100 4\") == \"YES 2\"\nassert solution(\"8 7\") == \"YES 2 3\"\nassert solution(\"97 2\") == \"YES 2\"\nassert solution(\"8 8\") == \"YES 2\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n100 4\n8 7\n97 2\n8 8\n''') == \"YES\\n4 2 4\\nYES\"\nassert solution('''\n8 1\n100 4\n8 7\n97 2\n8 8\n''') == \"NO\\nYES\\n3 1\\nYES\"\n'''\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == 'YES'\nassert solution('10 3') == 'YES'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'NO'\nassert solution('97 2') == 'YES'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n3 3''') == 'YES'\nassert solution('''2 10\n5 1''') == 'YES'\nassert solution('''1 1\n2 2''') == 'YES'\nassert solution('''100 4\n1000000000 9''') == 'YES'\nassert solution('''2 3\n5 5\n7 7''') == 'YES'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 3\n10 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n10 4\n10 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n5 3\n10 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n5 3\n10 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\\n'''\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == 'YES 2 2 4\\nYES\\nNO\\nYES\\n55 5 5 35\\nNO\\nYES\\n3 1 1'\nassert solution('1000') == 'YES\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nYES'\nassert solution('2') == 'NO\\nYES\\nYES\\nNO\\nNO\\nYES\\nYES\\nYES'\nassert solution('1') == 'NO\\nYES\\nYES\\nNO\\nNO\\nYES\\nYES\\nYES'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 3') == 'YES'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'YES'\nassert solution('8 8') == 'YES'\n"
    },
    {
        "number": 4654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"YES\"\nassert solution(\"10 3\") == \"4 2 4\"\nassert solution(\"100 4\") == \"55 5 5 35\"\nassert solution(\"8 7\") == \"YES\"\nassert solution(\"97 2\") == \"YES\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '55000000000000000'\nassert solution('''\n5 1 2\n1 2 3 4 5\n''') == '2'\nassert solution('''\n3 3 2\n2 3 1 4 5\n''') == '4'"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\nassert solution(\"1 3 4\") == \"55\"\nassert solution(\"1 10 100\") == \"15000000000000000\"\nassert solution(\"10000000000000000 10000000000000000 10000000000000000\") == \"51\"\nassert solution(\"23 34 45\") == \"51\""
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"10\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1\\n10000000000000000 1"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 10 100') == '55'\nassert solution('10000000000000000 10000000000000000 10000000000000000') == '51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == \"55\"\nassert solution('''\n5 1 4\n10 1 100\n11 1 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == \"51\""
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n''') == '4'\n\nassert solution('''\n2\n1 3\n1 10\n10000000000000000 10000000000000000 10000000000000000\n''') == '55'"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '55000000000000000'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n''') == '55000000000000000'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000''') == '55'\nassert solution('''23 34 45\n''') == '51'''"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n''') == '3'\nassert solution('''\n5 5\naaabab\n2 5\nabcba\n2 5\nabcba\n''') == '8'\nassert solution('''\n5 5\naaabab\n2 5\nabcba\n2 5\nabcba\n''') == '8'\nassert solution('''\n5 5\naaabab\n2 5\nabcba\n2 5\nabcba\n''') == '7'\nassert solution('''\n7 7\naaaa\n4 5\nbbbb\n2 5\naaaa\n3 5\naaaa\n3 5\naaaa\n''') == '6'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa') == '6'\nassert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa') == '3'\nassert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa') == '5'\nassert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa') == '10'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\na\nb\nc\nd\ne\n''') == \"5\"\nassert solution('''6 3\na\nb\nc\na\nc\nc\n''') == \"3\"\nassert solution('''7 1000\na\nb\nc\na\nc\nc\nd\ne\n''') == \"1000\"\nassert solution('''8 2\na\na\nb\nb\nc\nc\nc\nc\n''') == \"0\"\nassert solution('''20 10\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 3') == '3'\nassert solution('5 4') == '5'\nassert solution('7 1000') == '10'\nassert solution('20 10') == '20'\nassert solution('20 5') == '20'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necedececacbcbccbdec') == '6'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6 3\\n\"\n    \"abcbac\\n\"\n    \"3 6\\n\"\n    \"aaa\\n\"\n    \"7 1000\\n\"\n    \"abczgyo\\n\"\n    \"5 4\\n\"\n    \"ababa\\n\"\n    \"20 10\\n\"\n    \"aaebdbabdbbddaadaadc\\n\"\n) == \"3\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 3\naaaa\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n\"\"\") == \"5\""
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n''') == '6'\nassert solution('''\n6 2\naaab\n3 5\naaa\n1 2\naa\n1 2\naaa\n''') == '4'\nassert solution('''\n1\n1\n''') == '0'\nassert solution('''\n5\n5\n''') == '0'\nassert solution('''\n3\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3') == '3'\nassert solution('6 3') == '3'\nassert solution('6 3') == '3'\n"
    },
    {
        "number": 4656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '5'\nassert solution(input()) == '10'\nassert solution(input()) == '15'\nassert solution(input()) == '20'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\") == \"YES\\n1 3 5\"\nassert solution(\"2\\n4 2\\n1 2 3 4\") == \"NO\"\nassert solution(\"2\\n5 3\\n1 2 3 4 5\\n6 2\") == \"NO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"1 3 5\"\nassert solution(\"5 4\") == \"1 3 5\"\nassert solution(\"1 2 3 4 5\") == \"1 3 5\"\nassert solution(\"6 2\") == \"1 2 3 4 5\"\nassert solution(\"1 2 8 4 10 2\") == \"1 3 5\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES\\n1 3 5\\nNO\\nNO\\n'\nassert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'NO'\nassert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'YES'"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2''') == 'YES\\n1 3 5\\nNO\\nNO\\n'\n\nassert solution('''3\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2''') == 'YES\\n1 3 5\\nNO\\nNO\\n'\n\nassert solution('''3\n4 5\n1 2 3 4 5\n6 2\n1 2 8 4 10 2''') == 'NO\\nNO\\nNO\\nNO\\n'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3\n6 8 2\n4 5\n1 2\n''') == 'YES'\nassert solution('''\n2\n2\n6 8 2\n4 5\n3 2\n''') == 'NO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'YES\\n1 3 5\\nNO'\nassert solution('''\n3 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'YES\\n1 3 5\\nNO'\nassert solution('''\n1 1\n1\n''') == 'NO'\nassert solution('''\n1 1\n2\n''') == 'NO'\nassert solution('''\n5 3\n3 9 8 1 2 4\n4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'YES\\n1 3 5\\nNO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 3\\n7 18 3 14 1\") == \"YES\\n1 3 5\\nNO\\nNO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'YES'\nassert solution('''5\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'NO'\nassert solution('''2\n10 1\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 4657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'YES'\nassert solution('''\n3\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n''') == 'NO'\nassert solution('''\n4\n3 5\n3 5 2 8\n2 5 2 5 3\n''') == 'NO'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11011101110111111') == '10111111111111111111111111111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"\nassert solution(\"11111111111111111111111111111111\") == \"3221225471\""
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"00000010100101000001111010011100\") == \"964176192\"\nassert solution(\"10111111111111111111111111111111\") == \"3221225471\"\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        return int(format(n, '032b'), 2)"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(test_n) == output\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000000010100101000001111010011100') == '964176192'\nassert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('00000000000000000000000000000010100101000001111010011100') == '964176192'\nassert solution('11111000000') == '3221225471'\nassert solution('0101100110111') == '1064111543'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"00000000100000000001100110011001100000000\") == \"111111111111111111111111111111111111111111111\""
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('11111') == '3221225471'\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"111111111111111111111111111111111\") == \"10111111111111111111111111111111\", \"Test 1 fail\"\nassert solution(\"00000000000011111111111111111111111\") == \"3221225471\", \"Test 2 fail\"\n\nn = \"00000000000011111111111111111111111\""
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11111111111111111111111111111111\") == \"3221225471\"\nassert solution(\"0000000000000000000000000001\") == \"0000000000000000000000000001\"\nassert solution(\"000000000000000000000000000110111\") == \"3221225471\"\nassert solution(\"0000000000000000000000000000101011\") == \"3221225471\"\nassert solution(\"000000000000000000000000000111\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\nassert solution(\"0\") == \"0\"\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1,1]) == '[[1]]\\n'\nassert solution([1,2,1]) == '[[1],[1,1]]\\n'\nassert solution([1,3,3,1]) == '[[1],[1,1],[1,2,1],[1,3,3,1]]\\n'\nassert solution([1,4,6,4,1]) == '[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\\n'"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"[1,1,1,1,1]\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '\\n[\\n  [1],\\n  [1, 1],\\n  [1, 2, 1],\\n  [1, 3, 3, 1],\\n  [1, 4, 6, 4, 1]\\n]', \"Test 1\"\nassert solution('6') == '\\n[\\n  [1],\\n  [1, 1],\\n  [1, 2, 1],\\n  [1, 3, 3, 1],\\n  [1, 4, 6, 4, 1],\\n  [1, 5, 10, 10, 5, 1]\\n]', \"Test 2\"\nassert solution('7') == '\\n[\\n  [1],\\n  [1, 1],\\n  [1, 2, 1],\\n  [1, 3, 3, 1],\\n  [1, 4, 6, 4, 1],\\n  [1, 5, 10, 10, 5, 1],\\n  [1, 6, 15, 20, 15, 6, 1]\\n]', \"Test 3\"\nassert solution('10') == '\\n[\\n  [1],\\n  [1, 1],\\n  [1, 2, 1],\\n  [1, 3, 3, 1],\\n  [1, 4, 6, 4, 1],\\n  [1, 5, 10, 10, 5, 1],\\n  [1, 6, 15, 20, 15, 6, 1],\\n  [1, 7, 21, 35, 35, 21, 7, 1],\\n  [1, 8, 28, 56, 70, 56, 28, 8, 1],\\n  [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\\n]', \"Test 4\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n''') == '[\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]''''\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([5]) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution([2]) == [[1], [1, 1]]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if not numRows:\n            return []\n        if numRows == 1:\n            return [[1]]\n        ans = [[1]]\n        for i in range(1, numRows):\n            row = [0]*(i+1)\n            row[0] = 1\n            row[i] = 1\n            for j in range(1, i):\n                row[j] = ans[i-1][j-1] + ans[i-1][j]\n            ans.append(row)\n        return ans\n\n\ns = Solution()\nassert s.generate(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert s.generate(2) == [[1], [1, 1]]\nassert s.generate(1) == [[1]]\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"[\\n[1],\\n[1,1],\\n[1,2,1],\\n[1,3,3,1],\\n[1,4,6,4,1]\\n]\\n\"\nassert solution(\"10\") == \"[\\n[1],\\n[1,1],\\n[1,2,1],\\n[1,3,3,1],\\n[1,4,6,4,1],\\n[1,5,10,10,5,1],\\n[1,6,15,20,15,6,1],\\n[1,7,21,35,35,21,7,1],\\n[1,8,28,56,70,56,28,8,1],\\n[1,9,36,84,126,126,84,36,9,1]\\n]\\n\"\nassert solution(\"11\") == \"[\\n[1],\\n[1,1],\\n[1,2,1],\\n[1,3,3,1],\\n[1,4,6,4,1],\\n[1,5,10,10,5,1],\\n[1,6,15,20,15,6,1],\\n[1,7,21,35,35,21,7,1],\\n[1,8,28,56,70,56,28,8,1],\\n[1,9,36,84,126,126,84,36,9,1],\\n[1,10,45,120,210,210,120,45,10,1],\\n[1,11,56,140,350,350,140,56,11,1]\\n]\\n\"\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\"\nassert solution('3') == \"[[1], [1, 1], [1, 2, 1]]\"\nassert solution('1') == \"[[1]]\"\nassert solution('0') == \"[]\"\nassert solution('4') == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '\\n'.join([str(i) for i in range(1, 6)])\nassert solution('6') == '\\n'.join([str(i) for i in range(1, 7)])\nassert solution('7') == '\\n'.join([str(i) for i in range(1, 8)])\n"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == \"\\n\".join([str(i) for i in [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]])\n\n\"\"\"\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        res = []\n        if numRows == 0:\n            return res\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n\n        res.append([1])\n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(res[i - 1][j - 1] + res[i - 1][j])\n            row.append(1)\n            res.append(row)\n        return res"
    },
    {
        "number": 4659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n''') == '\\n'.join(['\\n'.join(['1'] + row + ['1'] for row in [[1]] + \\\n    [[1] + [row[0] + row[1] for row in zip([1] + row, row + [1])] for row in zip([1] + list(range(2, num_rows + 1)), \\\n    [1] + list(range(2, num_rows + 1)))])] + ['1'])"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == ['john@google.com', 'jane@yahoo.com', 'johndoe@gmail.com']\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com''') == ['user1@hackerrank.com', 'user2@hackerrank.com', 'user3@hackerrank.com', 'user4@hackerrank.com'];\nassert solution('''1\nuser1@hackerrank.com''') == ['user1@hackerrank.com'];\nassert solution('''4\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com''') == [];\n=====Test Case=====\nCase #1:\n\nprint(solution('''5\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com\nuser5@hackerrank.com'''))\n\nCase #2:\n\nprint(solution('''6\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com\nuser5@hackerrank.com\nuser6@hackerrank.com'''))\n\nCase #3:\n\nprint(solution('''5\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com\nuser5@hackerrank.com'''))\n\nCase #4:\n\nprint(solution('''5\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com\nuser5@hackerrank.com'''))\n\nCase #5:\n\nprint(solution('''4\nuser1@hackerrank.com\nuser2@hackerrank.com\nuser3@hackerrank.com\nuser4@hackerrank.com'''))\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1@1.com\\n2@2.com') == ['1@1.com', '2@2.com']\n'''\n\nn = int(input())\nl = []\nfor i in range(n):\n    s = input()\n    if ('@' in s):\n        if ('.' in s):\n            if (len(s) <= 3):\n                l.append(s)\n\nl = sorted(l)\nprint(l)\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == sorted(list(filter(lambda x: x[0]=='@', map(lambda x: x.split('@'), map(str.strip, stdin.split('\\n'))))), key = lambda x: x[1])\n\n'''\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\na@b\") == [\"a@b\"]\nassert solution(\"2\\nh@i\") == [\"h@i\"]\nassert solution(\"2\\nh@i\\nj@i\") == [\"h@i\", \"j@i\"]\nassert solution(\"2\\nh@i\\nj@i\\nk@i\") == [\"h@i\", \"j@i\", \"k@i\"]\nassert solution(\"1\\nh@i\\nk@i\\nj@i\") == [\"h@i\", \"k@i\", \"j@i\"]\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == []\nassert solution('1') == ['1@a.com']\nassert solution('1\\n1') == ['1@a.com']\n\n=====Test Case 2=====\nInput\n\n7\n1@a.com\n2@a.com\n3@a.com\n4@a.com\n5@a.com\n6@a.com\n\nOutput\n\n['1@a.com', '2@a.com', '3@a.com', '4@a.com', '5@a.com', '6@a.com']\n\n=====Test Case 3=====\nInput\n\n3\n1@a.com\n2@a.com\n3@a.com\n\nOutput\n\n['1@a.com', '2@a.com', '3@a.com']\n\n=====Test Case 4=====\nInput\n\n0\n\nOutput\n\n[]\n\n>>>>>>> Stashed changes\n\n'''"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\nemail1@email.com\nemail2@email.com\n''') == '[\"email1@email.com\",\"email2@email.com\"]'\nassert solution('''\n4\nemail1@email.com\nemail2@email.com\nemail3@email.com\nemail4@email.com\n''') == '[\"email1@email.com\",\"email3@email.com\",\"email2@email.com\",\"email4@email.com\"]'\nassert solution('''\n5\nemail1@email.com\nemail2@email.com\nemail3@email.com\nemail4@email.com\nemail5@email.com\n''') == '[\"email1@email.com\",\"email5@email.com\",\"email3@email.com\",\"email4@email.com\",\"email2@email.com\"]'\n\n''')\n\n'''\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\njames@hackerrank.com\njohn-doe@hackerrank.com\n''') == 'james@hackerrank.com\\njohn-doe@hackerrank.com'\n'''\n\n=========================================================================================================\n=====Example:=====\n\nInput:\n2\njames@hackerrank.com\njohn-doe@hackerrank.com\n\nOutput:\njames@hackerrank.com\njohn-doe@hackerrank.com\n\nExplanation:\n\n1. the lower case 'j' comes first because 'J' comes before 'A'\n2. The uppercase 'H' comes first because 'h' comes before 'a'\n\n=====Your Task=====\n\nYou don't need to read input or print anything. Your task is to complete the function lower_case_letters()\nwhich takes a string as argument and returns a string with all the lower case letters removed.\n\n=====Constraints=====\n\n1 <= N <= 10**5\n\n=====Input Format=====\n\nThe first line contains N.\n\nThe next N lines each contain a string, S.\n\n=====Output Format=====\n\nThe function should return the string without the lower case letters.\n\nSample Input 1\n\n3\njames@hackerrank.com\njames@hackerrank.com\njames@hackerrank.com\n\nSample Output 1\n\njames@hackerrank.com\n\nSample Input 2\n\n2\njames@hackerrank.com\njames@hackerrank.com\n\nSample Output 2\n\njames@hackerrank.com\n\n'''"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\njohn.doe@gmail.com\\njohn.doe@yahoo.com\\njane.doe@gmail.com\") == ['john.doe@gmail.com', 'jane.doe@gmail.com']\nassert solution(\"2\\njane.doe@yahoo.com\\njohn.doe@gmail.com\\njane.doe@yahoo.com\") == ['john.doe@gmail.com', 'jane.doe@yahoo.com']\nassert solution(\"2\\njane.doe@yahoo.com\\njohn.doe@gmail.com\\njane.doe@yahoo.com\") == ['jane.doe@yahoo.com', 'john.doe@gmail.com']\nassert solution(\"2\\njohn.doe@gmail.com\\njohn.doe@yahoo.com\\njane.doe@gmail.com\") == ['john.doe@gmail.com', 'jane.doe@gmail.com']\nassert solution(\"5\\njohn.doe@gmail.com\\njohn.doe@yahoo.com\\njane.doe@gmail.com\\njohn.doe@yahoo.com\") == ['john.doe@gmail.com', 'john.doe@yahoo.com', 'jane.doe@gmail.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == ['a@b.com', 'c@d.com']\nassert solution('3') == ['a@b.com', 'c@d.com', 'e@f.com']\nassert solution('4') == ['a@b.com', 'c@d.com', 'e@f.com', 'g@h.com']\nassert solution('1') == []\nassert solution('4') == ['a@b.com', 'c@d.com', 'e@f.com', 'g@h.com']\n\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3\\n3\\n3'\nassert solution('0') == '0\\n0\\n0'\nassert solution('1') == '1\\n1\\n1'\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == \"0 1 1 8 27\""
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == [1, 8, 27]\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 1468338387, 2374377261, 3891490163, 5164438241, 8241379343, 13609525095, 2032030493, 3190285429, 4268803797, 6291425769, 1096140599, 1346269073, 2612939296, 433494461, 701408721, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 1468338387, 2374377261, 3891490163, 5164438241, 8241379343, 13609525095, 2032030493, 3190285429]"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([1, 2, 3, 4, 5, 6]) == [1, 8, 27, 64, 125, 216], 'First'\nassert solution([5, 8, 13, 21, 34, 55]) == [5, 121, 352, 610, 987, 1597], 'Second'\nassert solution([7, 11, 19, 37, 61, 103]) == [7, 1597, 4181, 10946, 17711, 23058], 'Third'\nassert solution([15, 31, 63, 127, 255, 513]) == [15, 3777, 11871, 17863, 25525, 51343], 'Fourth'\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 1418070541, 1980189761, 2445237537, 3977480364, 6444428471, 1066290721, 1665048121, 2618286829, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 1418070541, 1980189761, 2445237537, 3977480364, 6444428471]    == solution(input()))"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == [1, 1, 2, 8, 27]"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3]) == [3, 8, 27]\nassert solution([0]) == [0]\nassert solution([1]) == [1]\n\n=Output Example-1=\n\n3\n8\n27\n=Output Example-2=\n\n0\n=Output Example-3=\n\n1\n\n=====Sample Test Case=====\nInput:\n\n5\n\nOutput:\n\n3\n8\n27\n12\n49\n'''"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == [\"0\", \"1\", \"1\", \"8\"]\nassert solution(\"3\") == [\"0\", \"1\", \"1\", \"8\", \"27\"]\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == [\"0\", \"1\", \"8\", \"27\", \"64\"]\n\"\"\"\nn=int(input())\nl=[0,1]\nfor i in range(2,n):\n    l.append(l[i-1] + l[i-2])\nprint(*map(lambda x:str(x**3),l))"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    <feed xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n        <title>RSS Feed for pypi</title>\n        <link>http://pypi.python.org/rss/pypi_theme.xml</link>\n        <description>The Python Package Index</description>\n    </feed>''') == '2'\n'''\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>XML Developer's Guide</title>\n    <subtitle lang='en'>Tutorial for XML Developer's Guide</subtitle>\n    <link rel='alternate' type='text/html' href='http://www.w3schools.com/xml/default.asp'/>\n    <link rel='alternate' type='text/xml' href='http://www.w3schools.com/xml/default.xml'/>\n    <updated>2009-05-12T10:34:23Z</updated>\n</feed>\n\"\"\") == \"2\"\n\n=====Sample Input and Output Section=====\nSample Input 1\n\n4\n<feed xml:lang='en'>\n    <title>XML Developer's Guide</title>\n    <subtitle lang='en'>Tutorial for XML Developer's Guide</subtitle>\n    <link rel='alternate' type='text/html' href='http://www.w3schools.com/xml/default.asp'/>\n    <link rel='alternate' type='text/xml' href='http://www.w3schools.com/xml/default.xml'/>\n    <updated>2009-05-12T10:34:23Z</updated>\n</feed>\nSample Output 1\n\n2\n\n=====Constraints=====\n1 <= N <= 10^6\n1 <= |X| <= 10^6\n\n=====Test Case 1=====\nInput\n\nOutput\n\n=========================================\nTest Case 2\nInput\n\nOutput\n\n=========================================\nTest Case 3\nInput\n\nOutput\n\n=========================================\nTest Case 4\nInput\n\nOutput\n\n=========================================\nTest Case 5\nInput\n\nOutput\n=========================================\nTest Case 6\nInput\n\nOutput\n=========================================\nTest Case 7\nInput\n\nOutput\n=========================================\nTest Case 8\nInput\n\nOutput\n=========================================\nTest Case 9\nInput\n\nOutput\n=========================================\nTest Case 10\nInput\n\nOutput\n=========================================\nTest Case 11\nInput\n\nOutput\n=========================================\nTest Case 12\nInput\n\nOutput\n=========================================\nTest Case 13\nInput\n\nOutput\n=========================================\nTest Case 14\nInput\n\nOutput\n=========================================\nTest Case 15\nInput\n\nOutput\n=========================================\nTest Case 16\nInput\n\nOutput\n=========================================\nTest Case 17\nInput\n\nOutput\n=========================================\nTest Case 18\nInput\n\nOutput\n=========================================\nTest Case 19\nInput\n\nOutput\n=========================================\nTest Case 20\nInput\n\nOutput\n=========================================\nTest Case 21\nInput\n\nOutput\n=========================================\nTest Case 22\nInput\n\nOutput\n=========================================\nTest Case 23\nInput\n\nOutput\n=========================================\nTest Case 24\nInput\n\nOutput\n=========================================\nTest Case 25\nInput\n\nOutput\n=========================================\nTest Case 26\nInput\n\nOutput\n=========================================\nTest Case 27\nInput\n\nOutput\n=========================================\nTest Case 28\nInput\n\nOutput\n=========================================\nTest Case 29\nInput\n\nOutput\n=========================================\nTest Case 30\nInput\n\nOutput\n=========================================\nTest Case 31\nInput\n\nOutput\n=========================================\nTest Case 32\nInput\n\nOutput\n=========================================\nTest Case 33\nInput\n\nOutput\n=========================================\nTest Case 34\nInput\n\nOutput\n=========================================\nTest Case 35\nInput\n\nOutput\n=========================================\nTest Case 36\nInput\n\nOutput\n=========================================\nTest Case 37\nInput\n\nOutput\n=========================================\nTest Case 38\nInput\n\nOutput\n=========================================\nTest Case 39\nInput\n\nOutput\n=========================================\nTest Case 40\nInput\n\nOutput\n=========================================\nTest Case 41\nInput\n\nOutput\n=========================================\nTest Case 42\nInput\n\nOutput\n=========================================\nTest Case 43\nInput\n\nOutput\n=========================================\nTest Case 44\nInput\n\nOutput\n=========================================\nTest Case 45\nInput\n\nOutput\n=========================================\nTest Case 46\nInput\n\nOutput\n=========================================\nTest Case 47\nInput\n\nOutput\n=========================================\nTest Case 48\nInput\n\nOutput\n=========================================\nTest Case 49\nInput\n\nOutput\n=========================================\nTest Case 50\nInput\n\nOutput\n=========================================\nTest Case 51\nInput\n\nOutput\n=========================================\nTest Case 52\nInput\n\nOutput\n=========================================\nTest Case 53\nInput\n\nOutput\n=========================================\nTest Case 54\nInput\n\nOutput\n=========================================\nTest Case 55\nInput\n\nOutput\n=========================================\nTest Case 56\nInput\n\nOutput\n=========================================\nTest Case 57\nInput\n\nOutput\n=========================================\nTest Case 58\nInput\n\nOutput\n=========================================\nTest Case 59\nInput\n\nOutput\n=========================================\nTest Case 60\nInput\n\nOutput\n=========================================\nTest Case 61\nInput\n\nOutput\n=========================================\nTest Case 62\nInput\n\nOutput\n=========================================\nTest Case 63\nInput\n\nOutput\n=========================================\nTest Case 64\nInput\n\nOutput\n=========================================\nTest Case 65\nInput\n\nOutput\n=========================================\nTest Case 66\nInput\n\nOutput\n=========================================\nTest Case 67\nInput\n\nOutput\n=========================================\nTest Case 68\nInput\n\nOutput\n=========================================\nTest Case 69\nInput\n\nOutput\n=========================================\nTest Case 70\nInput\n\nOutput\n=========================================\nTest Case 71\nInput\n\nOutput\n=========================================\nTest Case 72\nInput\n\nOutput\n=========================================\nTest Case 73\nInput\n\nOutput\n=========================================\nTest Case 74\nInput\n\nOutput\n=========================================\nTest Case 75\nInput\n\nOutput\n=========================================\nTest Case 76\nInput\n\nOutput\n=========================================\nTest Case 77\nInput\n\nOutput\n=========================================\nTest Case 78\nInput\n\nOutput\n=========================================\nTest Case 79\nInput\n\nOutput\n=========================================\nTest Case 80\nInput\n\nOutput\n=========================================\nTest Case 81\nInput\n\nOutput\n=========================================\nTest Case 82\nInput\n\nOutput\n=========================================\nTest Case 83\nInput\n\nOutput\n=========================================\nTest Case 84\nInput\n\nOutput\n=========================================\nTest Case 85\nInput\n\nOutput\n=========================================\nTest Case 86\nInput\n\nOutput\n=========================================\nTest Case 87\nInput\n\nOutput\n=========================================\nTest Case 88\nInput\n\nOutput\n=========================================\nTest Case 89\nInput\n\nOutput\n=========================================\nTest Case 90\nInput\n\nOutput\n=========================================\nTest Case 91\nInput\n\nOutput\n=========================================\nTest Case 92\nInput\n\nOutput\n=========================================\nTest Case 93\nInput\n\nOutput\n=========================================\nTest Case 94\nInput\n\nOutput\n=========================================\nTest Case 95\nInput\n\nOutput\n=========================================\nTest Case 96\nInput\n\nOutput\n=========================================\nTest Case 97\nInput\n\nOutput\n=========================================\nTest Case 98\nInput\n\nOutput\n=========================================\nTest Case 99\nInput\n\nOutput\n=========================================\nTest Case 100\nInput\n\nOutput\n=========================================\nTest Case 101\nInput\n\nOutput\n=========================================\nTest Case 102\nInput\n\nOutput\n=========================================\nTest Case 103\nInput\n\nOutput\n=========================================\nTest Case 104\nInput\n\nOutput\n=========================================\nTest Case 105\nInput\n\nOutput\n=========================================\nTest Case 106\nInput\n\nOutput\n=========================================\nTest Case 107\nInput\n\nOutput\n=========================================\nTest Case 108\nInput\n\nOutput\n=========================================\nTest Case 109\nInput\n\nOutput\n=========================================\nTest Case 110\nInput\n\nOutput\n=========================================\nTest Case 111\nInput\n\nOutput\n=========================================\nTest Case 112\nInput\n\nOutput\n=========================================\nTest Case 113\nInput\n\nOutput\n=========================================\nTest Case 114\nInput\n\nOutput\n=========================================\nTest Case 115\nInput\n\nOutput\n=========================================\nTest Case 116\nInput\n\nOutput\n=========================================\nTest Case 117\nInput\n\nOutput\n=========================================\nTest Case 118\nInput\n\nOutput\n=========================================\nTest Case 119\nInput\n\nOutput\n=========================================\nTest Case 120\nInput\n\nOutput\n=========================================\nTest Case 121\nInput\n\nOutput\n=========================================\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"<feed xml:space='preserve'>\\n<title>XML Developer's Guide</title>\\n<subtitle>Tutorial</subtitle>\\n</feed>\") == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('<feed><title>GeeksforGeeks</title><subtitle>A Computer Science</subtitle><content>Programming is easy</content></feed>') == 2"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>''') == 2\n'''\n\nimport xml.etree.ElementTree as ET\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"<xml><e><e></e></e></xml>\") == 1\nassert solution(\"<xml><e><m>This is a root element</m></e><n></n></xml>\") == 3\nassert solution(\"<xml><e><m>This is a root element</m></e><n></n><n></n></xml>\") == 4\nassert solution(\"<xml><e><m>This is a root element</m><n></n></e></xml>\") == 1\nassert solution(\"<xml><e><m>This is a root element</m></e><n></n></xml>\") == 1\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('<root><child1><grandchild1/></child1></root>') == 1\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''<feed xml:lang='en'>\n  <title>XML Developer's Guide</title>\n  <subtitle lang='en'>Tutorial for XML</subtitle>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/2000/WD-xml-grammar-20000824.pdf#sec%7Bname%7D'>Documentation Link</link>\n</feed>''') == '2'\nassert solution('''<feed xml:lang='en'>\n  <title>XML Developer's Guide</title>\n  <subtitle lang='en'>Tutorial for XML</subtitle>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/2000/WD-xml-grammar-20000824.pdf#sec%7Bname%7D'>Documentation Link</link>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/REC-xml-20040720.html#sec%7Bname%7D'>Documentation Link</link>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/REC-xml-19980720.html#sec%7Bname%7D'>Documentation Link</link>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/REC-xml-19990404.html#sec%7Bname%7D'>Documentation Link</link>\n</feed>''') == '1'\nassert solution('''<feed xml:lang='en'>\n  <title>XML Developer's Guide</title>\n  <subtitle lang='en'>Tutorial for XML</subtitle>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/2000/WD-xml-grammar-20000824.pdf#sec%7Bname%7D'>Documentation Link</link>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/REC-xml-20040720.html#sec%7Bname%7D'>Documentation Link</link>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/REC-xml-19990404.html#sec%7Bname%7D'>Documentation Link</link>\n  <link rel='alternate' type='text/html' href='http://www.w3.org/TR/1999-01-01/REC-xml-19980720.html#sec%7Bname%7D'>Documentation Link</link>\n</feed>''') == '4'\n======="
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"<a><b></a>\") == 2\n\n'''\n"
    },
    {
        "number": 4662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('<doc><foo/><bar/></doc>') == 2\n\n'''\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"12 2147483647\") == \"YES\\nNO\"\nassert solution(\"7 8592\") == \"YES\"\nassert solution(\"9 8592\") == \"NO\"\nassert solution(\"9 8594\") == \"YES\"\nassert solution(\"9 865\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sorted([\"7123456789\", \"81234\", \"9123456789\", \"123456789\"])) == sorted([\"YES\", \"YES\", \"YES\", \"YES\"])\nassert solution(sorted([\"123456789\", \"123456789\", \"123456789\"])) == sorted([\"NO\", \"NO\", \"NO\"])\nassert solution(sorted([\"1234567890\", \"1234567890\", \"1234567890\"])) == sorted([\"YES\", \"YES\", \"YES\"])\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 8 2 4 1 3 6 8 7\") == \"YES\\nNO\", \"test 1\"\nassert solution(\"7 8 2 4 1 3 6 8 7\") == \"YES\\nNO\", \"test 2\"\nassert solution(\"7 8 2 4 1 3 6 8 7\") == \"YES\\nNO\", \"test 3\"\nassert solution(\"7 8 2 4 1 3 6 8 7\") == \"YES\\nNO\", \"test 4\"\nassert solution(\"7 8 2 4 1 3 6 8 7\") == \"YES\\nNO\", \"test 5\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 888') == 'YES', \"test 1\"\nassert solution('7 888') == 'NO', \"test 2\"\nassert solution('77 888') == 'YES', \"test 3\"\nassert solution('77 8888') == 'NO', \"test 4\"\nassert solution('77 88') == 'YES', \"test 5\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 8\\n1234567890\\n91 987654321\\n89012345678\\n890123456789\\n\") == \"NO\\nNO\\nNO\\nYES\\nYES\\n\"\nassert solution(\"8 9\\n1234567890\\n91 987654321\\n89012345678\\n890123456789\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\\n\"\nassert solution(\"7 8\\n1234567890\\n91 987654321\\n89012345678\\n890123456789\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\\n\"\n=====End Solution=====\n\"\"\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    92837299832\n    \"\"\") == \"YES\"\nassert solution(\"\"\"\n    788241929840\n    \"\"\") == \"NO\"\n\n====================\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n077\n078\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2\n098\n1312\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n2\n098\n989\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n2\n567\n4123\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n2\n7678\n4556\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0789051317\\n880369854\\n738159918\\n') == 'YES\\nNO\\nYES\\nNO\\nYES'\nassert solution('5\\n0789051317\\n880369854\\n738159918\\n') == 'YES\\nNO\\nYES\\nNO\\nYES'\nassert solution('5\\n0789051317\\n880369854\\n738159918\\n') == 'YES\\nNO\\nYES\\nNO\\nYES'\nassert solution('5\\n738159918\\n880369854\\n0789051317\\n') == 'YES\\nNO\\nYES\\nNO\\nYES'\nassert solution('5\\n738159918\\n880369854\\n') == 'YES\\nNO\\nYES\\nNO\\nYES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2147483647\") == \"YES\\nNO\"\nassert solution(\"1\\n6\") == \"YES\\nNO\"\nassert solution(\"1\\n123\") == \"YES\\nNO\"\nassert solution(\"7\\n123456789\") == \"YES\\nNO\"\nassert solution(\"7\\n1234567890\") == \"YES\\nNO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n9282474239\n9287423912\n92874238912\n''') == \"NO\\nNO\\nYES\"\nassert solution('''\n3\n9282474239\n9287423912\n92874238912\n''') == \"YES\\nYES\\nNO\"\n'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 3 5 8\") == \"3 7 8\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 5 9\\n4\\n4 11 12\\n') == '5 9 11 12'\nassert solution('4\\n2 4 5 9\\n4\\n4 11 12\\n') == '5 9 11 12'\nassert solution('5\\n2 3 5 9 1\\n4\\n4 11 12\\n') == '5 9 11 12 1'\nassert solution('5\\n2 3 5 9 1\\n4\\n4 11 12\\n') == '5 9 11 12 1'\nassert solution('1\\n2 3\\n4\\n4 11\\n') == '1 2 4 4 11'\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\n1 2 3 4\n5\n1 2 3 4 5\n\"\"\"\n    ) == \"\"\"\n1\n3\n5\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3\n5 6''') == '2 3 1 4 5'\nassert solution('''4\n2 4 5 6\n2 3''') == '4 1 3 4 5'\n'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 5\\n5\\n4 3\\n1 2 3 4 5\\n5') == '1 2 3 4 5\\n5 4 3 2'\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10\n2 4 5 9 11 12 13 15\n3\n3 5''') == '9 8 7 6 5 4 13 12 11'\n\nprint(solution('10 2 4 5 9 11 12 13 15'))\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n2\\n5 6') == '3 4'\nassert solution('2 3\\n2\\n3 5') == '4 5'\n=====Test Cases=====\nTest Case 1\nInput\n2\n2\n2\n5 6\nOutput\n3 4\nTest Case 2\nInput\n2\n2\n2\n3 5\nOutput\n4 5\nTest Case 3\nInput\n2\n2\n2\n3 5\nOutput\n4 5\nTest Case 4\nInput\n2\n2\n3\n3 5\nOutput\n4 5\nTest Case 5\nInput\n2\n2\n3\n3 5\nOutput\n4 5\n'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4 3 2') == '1 2 3 4'\n"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([2, 4, 5, 9]) == '2 4 5 9'\nassert solution([1, 2, 3, 4, 5]) == '3 4 5'\nassert solution([1, 2, 3, 4, 5, 6]) == '3 4 5 6'\nassert solution([1, 2, 3, 4, 5, 6, 7]) == '3 4 5 6 7'\nassert solution([1, 2, 3, 4, 5, 6, 7, 8]) == '3 4 5 6 7 8'"
    },
    {
        "number": 4664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([9, 5, 7, 5, 8, 8, 2, 1, 3, 4]) == \"1 3 4 2 7 8 5 8 9 5 7 8 5 8\"\nassert solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"1 3 4 2 7 8 9 5 6 7 8 10\"\nassert solution([4, 5, 6, 7, 8, 9, 10]) == \"4 5 6 7 8 9 10\"\nassert solution([]) == \"\"\nassert solution([1, 2, 3]) == \"1 2 3\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4\\n2 4 6 8\\n3 5 7 9\\n') == '3.66'\n\n=====Test Case 1=====\n\n=========================================\nTest Case 2\n=========================================\n\nTest Case 2\nInput\n4\n1 2 3 4\n2 4 6 8\n3 5 7 9\n4 5 8 9\n5 6 7 8\n6 7 8 9\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 3\n=========================================\n\nTest Case 3\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n7.5\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 4\n=========================================\n\nTest Case 4\nInput\n4\n1 2 3 4\n2 4 6 8\n3 5 7 9\n4 5 8 9\n5 6 7 8\n6 7 8 9\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 5\n=========================================\n\nTest Case 5\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n4.8\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 6\n=========================================\n\nTest Case 6\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n4.8\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 7\n=========================================\n\nTest Case 7\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 8\n=========================================\n\nTest Case 8\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 9\n=========================================\n\nTest Case 9\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\nTest Case 10\n=========================================\n\nTest Case 10\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 11\n=========================================\n\nTest Case 11\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 12\n=========================================\n\nTest Case 12\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 13\n=========================================\n\nTest Case 13\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 14\n=========================================\n\nTest Case 14\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 15\n=========================================\n\nTest Case 15\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 16\n=========================================\n\nTest Case 16\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 17\n=========================================\n\nTest Case 17\nInput\n1\n1 2 3\n2 4 6\n3 5 7\n4 5 8\n5 6 7\n6 7 8\nOutput\n3.67\nExplanation\nThe column ID is in the first line and the column MARKS in the second line.\nSo, we print the average of the MARKS column in the file:\n\n=========================================\n\n=========================================\nTest Case 18\n========================================"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\nA B C\\n1 2 3\\n1 4 5\\n2 3 4\\n3 4 5\\n\") == \"2.67\"\n'''\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\nMARKS      ID      NAME      CLASS\n80         1      Bucky     7\n90         2      James    12''') == \"81.00\"\n'''))\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n    ID         MARKS      CLASS      NAME\n    1         97         2         Alex\n    2         48         3         Bob\n    3         100        4         Steve\n    4         100        4         Jon\n    5         152        5         Bill\n    ''') == \"98.00\""
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 4 5 6 7 8 9 10 11 12\\n12 13 14\") == \"6.55\"\nassert solution(\"3\\n2 4 1\\n8 5 7\") == \"6.75\"\nassert solution(\"2\\n3 4\\n1 2\\n5 6\\n9 8\") == \"7.5\"\nassert solution(\"10\\n10 20 30 50 80 90 100\\n100 80 70 90 80\") == \"79.5\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\nabcd\\n1\\nabcd\\n1\\nabcd\\n1\\nabcd\\n1\\nabcd\\n1\\nabcd\\n1\\nabcd\") == \"0.14\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"19.50\""
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nID,MARKS,CLASS,NAME\\n1,67,2,john\\n2,66,2,prince\\n3,57,3,jane\\n4,56,4,smith\\n5,54,3,king') == \"67.33\"\n\n===Sample Test===\nInput\nOutput\n'''\nTest 1\n\nassert solution('5\\nID,MARKS,CLASS,NAME\\n1,67,2,john\\n2,66,2,prince\\n3,57,3,jane\\n4,56,4,smith\\n5,54,3,king') == \"67.33\"\nassert solution('5\\nID,MARKS,CLASS,NAME\\n1,67,2,john\\n2,66,2,prince\\n3,57,3,jane\\n4,56,4,smith\\n5,54,3,king') == \"67.33\"\nassert solution('4\\nID,MARKS,CLASS,NAME\\n1,67,2,john\\n2,66,2,prince\\n3,57,3,jane\\n4,56,4,smith') == \"54.0\"\nassert solution('1\\nID,MARKS,CLASS,NAME\\n1,67,2,john') == \"67.0\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1 2 3 4\\n5 6 7 8\\n\") == \"2.00\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\nID,MARKS,CLASS,NAME\\n1,67,10,john\\n2,56,7,jane\\n\") == \"67.00\"\nassert solution(\"2\\nID,MARKS,CLASS,NAME\\n1,67,10,john\\n2,56,7,jane\\n\") == \"67.00\"\n\n=====Sample Test Cases=====\nInput\n1\nID,MARKS,CLASS,NAME\n1,67,10,john\n2,56,7,jane\n\nOutput\n67.00\n\nInput\n2\nID,MARKS,CLASS,NAME\n1,67,10,john\n2,56,7,jane\n\nOutput\n67.00\n\nInput\n2\nID,MARKS,CLASS,NAME\n1,67,10,john\n2,56,7,jane\n\nOutput\n67.00\n\n\nExplanation\n1,67\n2,56,7\n\n==\nFrom the sample test case above:\n\nAverage = (67 + 56) / 2 = 67.5\n\n=====Internal Testing=====\nSince, we are testing the code which we have written, we need to test it.\n\nThis is the code to test the average marks of the students:"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'Weird', \"test 1\"\nassert solution('6') == 'Not Weird', \"test 2\"\nassert solution('10') == 'Weird', \"test 3\"\nassert solution('1') == 'Not Weird', \"test 4\"\nassert solution('21') == 'Weird', \"test 5\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Not Weird'\nassert solution('2') == 'Weird'\nassert solution('4') == 'Weird'\nassert solution('12') == 'Weird'\nassert solution('24') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1]) == \"Not Weird\"\nassert solution([2]) == \"Weird\"\nassert solution([3]) == \"Not Weird\"\nassert solution([4]) == \"Weird\"\nassert solution([5]) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'Not Weird'\nassert solution('24') == 'Weird'\nassert solution('25') == 'Weird'\nassert solution('26') == 'Not Weird'\nassert solution('27') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(INPUT) == OUTPUT\n'''\n\nn = int(input())\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Weird'\nassert solution('21') == 'Not Weird'\nassert solution('24') == 'Weird'\nassert solution('25') == 'Not Weird'\n\"\"\"\n\n\nn = int(input())"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Not Weird\"\nassert solution(\"2\") == \"Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Weird\"\nassert solution(\"5\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Weird'\nassert solution(stdin) == 'Not Weird'\nassert solution(stdin) == 'Weird'\n\nassert solution(stdin) == 'Weird'\nassert solution(stdin) == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == \"Weird\"\nassert solution('20') == \"Weird\"\nassert solution('30') == \"Not Weird\"\nassert solution('50') == \"Not Weird\"\nassert solution('60') == \"Weird\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorials</subtitle>\n<link rel='alternate' type='text/html' href='http://www.w3schools.com/xml/'/>\n<updated>2006-11-01T11:00:00</updated>\n</feed>''') == '8'\nassert solution('''<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorials</subtitle>\n<link rel='alternate' type='text/html' href='http://www.w3schools.com/xml/'/>\n<updated>2006-11-01T11:00:00</updated>\n</feed>''') == '0'"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<subtitle>bb</subtitle>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n\"\"\") == \"4\"\nassert solution(\"\"\"1\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n\"\"\") == \"4\"\n\"\"\">\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n\"\"\") == \"10\"\nassert solution(\"\"\"1\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n\"\"\") == \"6\"\nassert solution(\"\"\"1\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"alternate\" href=\"http://example.com/\"/>\n<updated>2013-12-20T00:00:00</updated>\n</feed>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>aa</title>\n<link rel=\"altern"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('<feed xml:lang=\"en\">'\n        '<title>How to get started with XML</title>'\n        '<subtitle lang=\"en\">Helping people get started using XML</subtitle>'\n        '<link rel=\"alternate\" hreflang=\"en\" href=\"http://example.com/rss\" />'\n        '</feed>') == '6'\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"<head><title>Hello World</title></head>\") == \"5\", \"test 1 failed\"\nassert solution(\"<head><title>Hello</title><title>World</title></head>\") == \"6\", \"test 2 failed\"\nassert solution(\"<head><title>Hello</title><title>World</title><title>Hello</title></head>\") == \"8\", \"test 3 failed\"\nassert solution(\"<head><title>Hello</title><title>World</title></head><head><title>Hi</title><title>Bye</title></head>\") == \"10\", \"test 4 failed\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"<a></a>\") == \"1\"\nassert solution(\"<a><b></b></a>\") == \"2\"\nassert solution(\"<a><b></b><b></b></a>\") == \"3\"\nassert solution(\"<a><b></b><c></c><b></b></a>\") == \"3\"\nassert solution(\"<a><b></b><c></c><d></d><e></e><f></f><g></g></a>\") == \"15\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorial for XML</subtitle>\n<rights>Copyright &copy; 2003 Mark Pilgrim</rights>\n<link rel='alternate' href='http://www.w3.org/'/>\n<updated>2009-12-25T14:00:00</updated>\n<author>\n<name>Mark Pilgrim</name>\n<email>mark@example.com</email>\n</author>\n<category domain='com' path='/python'/>\n<item>\n<title>Python in XML</title>\n<link rel='alternate' href='http://www.python.org/'/>\n<updated>2006-06-20T00:00:00</updated>\n<description>Python programs for XML, using the tools of Mark Pilgrim and PyXML</description>\n</item>\n<item>\n<title>The Python XML Toolkit</title>\n<description>Python tools for the manipulation of XML files.</description>\n</item>\n</feed>\n''') == '27', 'Should be 27'\nassert solution('''\n<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorial for XML</subtitle>\n<rights>Copyright &copy; 2003 Mark Pilgrim</rights>\n<link rel='alternate' href='http://www.w3.org/'/>\n<updated>2009-12-25T14:00:00</updated>\n<author>\n<name>Mark Pilgrim</name>\n<email>mark@example.com</email>\n</author>\n<category domain='com' path='/python'/>\n<item>\n<title>Python in XML</title>\n<link rel='alternate' href='http://www.python.org/'/>\n<updated>2006-06-20T00:00:00</updated>\n<description>Python programs for XML, using the tools of Mark Pilgrim and PyXML</description>\n</item>\n<item>\n<title>The Python XML Toolkit</title>\n<description>Python tools for the manipulation of XML files.</description>\n</item>\n</feed>\n''') == '7', 'Should be 7'\nassert solution('''\n<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorial for XML</subtitle>\n<rights>Copyright &copy; 2003 Mark Pilgrim</rights>\n<link rel='alternate' href='http://www.w3.org/'/>\n<updated>2009-12-25T14:00:00</updated>\n<author>\n<name>Mark Pilgrim</name>\n<email>mark@example.com</email>\n</author>\n<category domain='com' path='/python'/>\n<item>\n<title>Python in XML</title>\n<link rel='alternate' href='http://www.python.org/'/>\n<updated>2006-06-20T00:00:00</updated>\n<description>Python programs for XML, using the tools of Mark Pilgrim and PyXML</description>\n</item>\n<item>\n<title>The Python XML Toolkit</title>\n<description>Python tools for the manipulation of XML files.</description>\n</item>\n</feed>\n''') == '0', 'Should be 0'\nassert solution('''\n<feed xml:lang='en'>\n<title>XML Developer's Guide</title>\n<subtitle lang='en'>Tutorial for XML</subtitle>\n<rights>Copyright &copy; 2003 Mark Pilgrim</rights>\n<link rel='alternate' href='http://www.w3.org/'/>\n<updated>2009-12-25T14:00:00</updated>\n<author>\n<name>Mark Pilgrim</name>\n<email>mark@example.com</email>\n</author>\n<category domain='com' path='/python'/>\n<item>\n<title>Python in XML</title>\n<link rel='alternate' href='http://www.python.org/'/>\n<updated>2006-06-20T00:00:00</updated>\n<description>Python programs for XML, using the tools of Mark Pilgrim and PyXML</description>\n</item>\n<item>\n<title>The Python XML Toolkit</title>\n<description>Python tools for the manipulation of XML files.</description>\n</item>\n</feed>\n''') == '0', 'Should be 0'"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('<name>Vivek</name>') == \"6\"\nassert solution('<name>Shiva</name>') == \"3\"\nassert solution('<name>Bag</name>') == \"5\"\nassert solution('<name>Bag</name><greeting>Hello</greeting>') == \"7\""
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"<a><b>hello</b><c>hi</c></a>\") == \"3\"\nassert solution(\"<a><b></b><c></c></a>\") == \"3\"\nassert solution(\"<a><b></b><c></c></a>\") == \"3\"\nassert solution(\"<a><b></b><c></c></a>\") == \"3\"\nassert solution(\"<a><b></b><c></c></a>\") == \"3\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '1\\n<feed xml:lang=\"en\">\\n\\t<title>Document</title>\\n\\t<subtitle lang=\"en\">Main</subtitle>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss.xml\"/>\\n\\t<guid lang=\"en\">Document</guid>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss2.xml\"/>\\n\\t<author>Unknown</author>\\n\\t<updated>2013-02-01T13:00:00Z</updated>\\n\\t<copyright>Unknown</copyright>\\n\\t<icon>http://example.com/icon.png</icon>\\n\\t<rights>Unknown</rights>\\n</feed>\\n') == \"27\"\n\nassert solution(\n    '2\\n<feed xml:lang=\"en\">\\n\\t<title>Document</title>\\n\\t<subtitle lang=\"en\">Main</subtitle>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss.xml\"/>\\n\\t<guid lang=\"en\">Document</guid>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss2.xml\"/>\\n\\t<author>Unknown</author>\\n\\t<updated>2013-02-01T13:00:00Z</updated>\\n\\t<copyright>Unknown</copyright>\\n\\t<icon>http://example.com/icon.png</icon>\\n\\t<rights>Unknown</rights>\\n</feed>\\n') == \"36\"\n\nassert solution(\n    '3\\n<feed xml:lang=\"en\">\\n\\t<title>Document</title>\\n\\t<subtitle lang=\"en\">Main</subtitle>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss.xml\"/>\\n\\t<guid lang=\"en\">Document</guid>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss2.xml\"/>\\n\\t<author>Unknown</author>\\n\\t<updated>2013-02-01T13:00:00Z</updated>\\n\\t<copyright>Unknown</copyright>\\n\\t<icon>http://example.com/icon.png</icon>\\n\\t<rights>Unknown</rights>\\n</feed>\\n') == \"49\"\n\n\nassert solution(\n    '4\\n<feed xml:lang=\"en\">\\n\\t<title>Document</title>\\n\\t<subtitle lang=\"en\">Main</subtitle>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss.xml\"/>\\n\\t<guid lang=\"en\">Document</guid>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss2.xml\"/>\\n\\t<author>Unknown</author>\\n\\t<updated>2013-02-01T13:00:00Z</updated>\\n\\t<copyright>Unknown</copyright>\\n\\t<icon>http://example.com/icon.png</icon>\\n\\t<rights>Unknown</rights>\\n</feed>\\n') == \"37\"\n\nassert solution(\n    '5\\n<feed xml:lang=\"en\">\\n\\t<title>Document</title>\\n\\t<subtitle lang=\"en\">Main</subtitle>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss.xml\"/>\\n\\t<guid lang=\"en\">Document</guid>\\n\\t<link rel=\"alternate\" type=\"application/rss+xml\" href=\"rss2.xml\"/>\\n\\t<author>Unknown</author>\\n\\t<updated>2013-02-01T13:00:00Z</updated>\\n\\t<copyright>Unknown</copyright>\\n\\t<icon>http://example.com/icon.png</icon>\\n\\t<rights>Unknown</rights>\\n</feed>\\n') == \"36\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1.0 2.0 1.0\") == \"45.0\"\nassert solution(\"0.5 0.5 0.5\") == \"90.0\"\nassert solution(\"3.5 -1.6 1.3\") == \"45.0\"\nassert solution(\"-3.5 1.6 1.3\") == \"225.0\"\nassert solution(\"1.0 0.5 1.0\") == \"90.0\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3.0 1.0 2.0 4.0') == '120.00', \"Wrong Answer\"\nassert solution('-3.0 1.0 2.0 4.0') == '135.00', \"Wrong Answer\"\nassert solution('-3.0 1.0 2.0 -4.0') == '-135.00', \"Wrong Answer\"\nassert solution('0.1 0.2 0.3 0.4') == '180.00', \"Wrong Answer\"\nassert solution('-0.1 0.2 0.3 0.4') == '-180.00', \"Wrong Answer\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.1 0.2 -0.4 -0.1') == '7.64'\nassert solution('0.9 0.1 -0.4 -0.1') == '6.28'\nassert solution('0.1 0.2 -0.3 -0.1') == '5.64'\n=====Test Case 2=====\n=====Input=====\n0.1 0.2 -0.4 -0.1\n0.9 0.1 -0.4 -0.1\n0.1 0.2 -0.3 -0.1\n=====Output=====\n7.64\n6.28\n5.64\n>>>>>>> f4d8c0e68a63a2cab5f869246674e058f2885a30\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3.3 3.5 3.6 3.4') == '55.37'\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1.0 1.0 -2.0 2.0 -1.0') == '60.0'\nprint(solution('1.0 1.0 -2.0 2.0 -1.0'))\n\n=====Test Cases=====\nInput:\n\n1 0 1 0\nOutput:\n\n0.0\n==================\nInput:\n\n1 2 3 4\nOutput:\n\n61.0\n==================\nInput:\n\n1 0 1 0\nOutput:\n\n180.0\n=================="
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '60.0'\n\n=====Explanation=====\nThe angle between the plane made by the points A, B, C and B, C, D in degrees(not radians) is 60.0.\n\nCode Editor\n\n=====Test Cases=====\nInput\nOutput\n\n=====Sample Input=====\n1 2 3 4 5\n\n=====Sample Output=====\n60.0\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.1 1.2 -1.7') == '45'\n=====Test cases=====\nInput\nOutput\n\nInput\nOutput\n\nInput:\n1.1 1.2 -1.7\nOutput\n45.0\nExplanation\nThe plane is made by the lines AB and CD. So the angle between them is 0 degree.\n'''\n\nimport math"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1.3 1.1 1.3 1.1\") == \"54.38\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"-2.5 -2.2 -1.8 -0.1\") == \"28.2\"\nassert solution(\"0 0 0 0\") == \"0\"\nprint(solution(input()))"
    },
    {
        "number": 4668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0 0\") == \"60\"\nassert solution(\"0 0 1 0\") == \"60\"\nassert solution(\"1 0 0 0\") == \"60\"\n=====Explanation=====\nThe plane is the perpendicular line through the point A.\nThe angle between the plane and the line made by the point A, B, C and B is defined as degrees(PHI).\n\n=====Constraints=====\n0 <= A < B <= C < D <= 10^8\n=====Hint=====\nThe angle between the plane and the line is given by Cos(PHI).\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(open(\"./input.txt\").read()) == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\nhey\") == \"1\"\nassert solution(\"2\\nhe y\") == \"1\"\nassert solution(\"3\\nhow\") == \"0\"\n=====Example Input 1=====\nThe locked code template is set to read from input stream stdin.\n\n=====Expected Output 1=====\n1\n\n'''\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nabracadabra') == '2'\n\n=====Sample Input/Output=====\nInput\n\n3\nheal\nharry\ni\n\nOutput\n\n2\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\neven\\n\") == 2\nassert solution(\"2\\neven\\neven\\n\") == 1\nassert solution(\"2\\none\\n\") == 0\nassert solution(\"0\\n\") == 0\nassert solution(\"3\\n\") == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 banana a') == 2\nassert solution('4 3 nana a z') == 3\n=====Test Case 1\nThe first test case has words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"] and score = 2 + 2 + 4 + 4 + 8 + 8 = 20\n=====Test Case 2\nThe second test case has words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"] and score = 2 + 2 + 4 + 4 + 8 + 8 = 20\n=====Test Case 3\nThe third test case has words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"] and score = 2 + 2 + 4 + 4 + 8 + 8 = 20\n=====Test Case 4\nThe fourth test case has words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"] and score = 2 + 2 + 4 + 4 + 8 + 8 = 20\n\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\nea ei iu\\n\") == 2\nassert solution(\"2 4\\ne a \\n\") == 1\nassert solution(\"1 1\\n\") == 1\n\n'''\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\naba cda\\ne\\ng\") == 1\nassert solution(\"3\\nbabacda\\ne\\ng\") == 2\nassert solution(\"3\\ne\\ng\") == 2\n"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\nevery\\nword\") == \"2\"\nassert solution(\"2\\nevery\\nword\") == \"1\"\nassert solution(\"3\\nevery\\nword\") == \"2\"\n=====Sample Input & Output=====\nInput\n\n3\nevery\nword\n\nOutput\n\n2\n1\n2\n\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nhello world\") == 2\nassert solution(\"3\\nabcd\") == 0\nassert solution(\"3\\nAaBbCc\") == 2\nassert solution(\"2\\nAB\") == 1\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('MMMCMXCIX') == 'True', \"1\"\nassert solution('MMM') == 'True', \"2\"\nassert solution('MMMMCMXCIX') == 'False', \"3\"\nassert solution('MMMMCMXCIXI') == 'False', \"4\"\nassert solution('MMMMCMXCIX') == 'False', \"5\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('MMMM') == True, \"Solution didn't pass the test!\"\nassert solution('MMM') == False, \"Solution didn't pass the test!\"\n\n\"\"\""
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"X\") == True\nassert solution(\"V\") == False\nassert solution(\"MCMXCIV\") == True\n=====Sample Input and Output=====\nInput\n\nX\nOutput\n\nTrue\n'''\n\nimport re\n\nroman_to_int = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n}\n\nint_to_roman = {\n    1: 'I',\n    5: 'V',\n    10: 'X',\n    50: 'L',\n    100: 'C',\n    500: 'D',\n    1000: 'M'\n}\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"MDCCXLIV\") == \"True\", \"Should return True\"\nassert solution(\"MMCDXCIV\") == \"False\", \"Should return False\"\nassert solution(\"MDCCCLXXXVIII\") == \"True\", \"Should return True\"\nassert solution(\"MMMCMXCIX\") == \"False\", \"Should return False\""
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('MMMCMXCIX') == 'True'\nassert solution('MMMCMXCIXI') == 'False'\nassert solution('MMMCMXCIXII') == 'False'\nassert solution('MMMCMXCIXIII') == 'False'\nassert solution('MMMCMXCIXIV') == 'False'\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('XI') == True\nassert solution('XX') == False\nassert solution('IIII') == True\nassert solution('VXIX') == True\nassert solution('MMMCMXCIX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('XIX') == True\nassert solution('XXX') == False\nassert solution('MMMCMXCIX') == True\nassert solution('MMM') == False\nassert solution('III') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('X') == True\nassert solution('V') == False\nassert solution('XX') == True\nassert solution('LXXIII') == True\nassert solution('CC') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('MMMCMXCIX') == \"True\"\nassert solution('MMMCMXCIX') == \"False\"\nassert solution('MMMCMXCIX') == \"True\"\nassert solution('MMMCMXCIX') == \"True\"\nassert solution('MMMCMXCIX') == \"False\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('I') == True\nassert solution('II') == False\nassert solution('III') == False\nassert solution('IV') == False\nassert solution('V') == False\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n+91 9999999999\n+91 99 999999998\n+91 9999999999\n''') == '''+91 9999999999\n+91 99 999999998\n+91 9999999999\n'''\nprint(solution('''\n2\n+91 9999999999\n+91 99 999999998\n+91 9999999999\n'''))\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9\\n+91 9187345678\\n+91 9191023456') == '+91 9187345678\\n+91 9191023456'\nassert solution('2\\n91\\n+91\\n90\\n9') == '+91\\n91\\n90\\n9'\nassert solution('2\\n91\\n') == '+91\\n91\\n'\nassert solution('2\\n91\\n91\\n') == '+91\\n91\\n91\\n'\nassert solution('2\\n91\\n91\\n') == '+91\\n91\\n91\\n'\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''+91 0954 9232845\n+91 9232845\n+91 9524 3456''') == \"+91 9232845 0954 \\n+91 9232845 9524 \\n+91 9524 3456 \\n\", \"First Example\"\nassert solution('''+91 90 564 8735\n+91 8735\n+91 876''') == \"+91 876 090 564 \\n+91 876 090 564 \\n+91 876 8735 \\n\", \"Second Example\"\nassert solution('''+91 966 567 876\n+91 876\n+91 966 567''') == \"+91 966 567 876 \\n+91 966 567 876 \\n+91 966 567 876 \\n\", \"Third Example\"\nassert solution('''+91 987654\n+91 987654\n+91 987654''') == \"+91 987654 987654 \\n+91 987654 987654 \\n+91 987654 987654 \\n\", \"Fourth Example\"\nassert solution('''+91 987654\n+91 0\n+91 987654''') == \"+91 987654 987654 \\n+91 987654 0 \\n+91 987654 987654 \\n\", \"Fifth Example\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"1\\n89\\n777\\n9012345678\\n8987654321\\n56789\\n65432\\n912345\\n234\\n\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\n987635987\\n455665432\\n564892998') == \"764892998\\n987635987\\n455665432\\n564892998\""
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"9\\n9876543210\\n12345678901\\n9876543210\") == \"+91 9876543210 12345678901 9876543210\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '''+91 995309100\n+91 995309122\n+91 995309143\n+91 995309151\n+91 995309155'''\n\n=====Explanation=====\nThe given mobile numbers may have +91, 91 or 0 written before the actual 10 digit number. Alternatively, there may not be any prefix at all.\n\n=====Test Cases=====\nInput\nOutput\n\nExample 1\n\nInput\n\nOutput\n\n'''\n\nstdin = '4'"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n+91 9876 5309\n+91 987 65432\n+91 98762 5309\n+91 9876 5432\n+91 9876 5309\n\"\"\") == \"\"\"+91 9876 5309\n+91 987 65432\n+91 98762 5309\n+91 9876 5432\n+91 9876 5309\n\"\"\"\n\nassert solution(\"\"\"\n+91 876 18 987\n+91 876 18 987\n+91 876 18 987\n+91 876 18 987\n+91 876 18 987\n\"\"\") == \"\"\"+91 876 18 987\n+91 876 18 987\n+91 876 18 987\n+91 876 18 987\n+91 876 18 987\n\"\"\"\n\nassert solution(\"\"\"\n+91 9876 5309\n+91 9876 5309\n+91 9876 5309\n+91 9876 5309\n+91 9876 5309\n\"\"\") == \"\"\"+91 9876 5309\n+91 9876 5309\n+91 9876 5309\n+91 9876 5309\n+91 9876 5309\n\"\"\""
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\\n+91 99 3357233216\\n\") == \"+91 3357233216\"\nassert solution(\"2\\n+91 99 3357233216\\n+91 99 3357233216\") == \"+91 3357233216\"\nassert solution(\"2\\n+91 3357233216\\n+91 99 3357233216\") == \"+91 3357233216\"\nassert solution(\"2\\n+91 3357233216\\n+91 3357233216\") == \"+91 3357233216\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n9747236401\n9747236411\n''') == '+9747236401 +9747236411'\nassert solution('''3\n975548364\n975548365\n975548366''') == '+975548364 +975548365 +975548366'\nassert solution('''4\n974364562\n974543664\n974545366\n9747236411''') == '+974364562 +974543664 +974545366 +9747236411'\n\n=====Sample Test Cases=====\nSample Input:\n2\n9747236401\n9747236411\n\nSample Output:\n+9747236401 +9747236411\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\nalpha 100\\nbeta 80\\nalpha\\nbeta\\nalpha\") == \"80.00\"\nassert solution(\"5\\nab 1\\nabc 2\\nab 1\\nabc 1\\nab\") == \"2.00\"\nassert solution(\"3\\n1 2 3\\n5\\n7\\n2\") == \"5.00\"\nassert solution(\"4\\nbeta\\nalpha\\nbeta\\nalpha\") == \"beta\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nAlpha Beta\\nAlpha\\nBeta\\nAlpha\\n') == '50.0'\nassert solution('5\\nAlpha Beta\\nAlpha\\nBeta\\nAlpha\\n') == '50.0'\nassert solution('5\\nAlpha Beta\\nAlpha\\nBeta\\nAlpha\\n') == '50.0'\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nalpha 20\\nbeta 30\\ngamma 50\\ndelta 70\") == \"50.0\"\n=====Test Cases=====\nInput    Output    \n2\nalpha 20\nbeta 30\ngamma 50\ndelta 70\nbeta\nExpected Output\n50.0\n\n=====Submission=====\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nalpha 100\\nbeta 90\\nalpha 80\\n') == \"90.00\"\nassert solution('6\\nalpha 100\\nbeta 90\\ngamma 80\\nalpha 90\\n') == \"82.67\"\n=====Testing=====\nUsing pytest\npytest -v test3.py\n\"\"\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\nalpha 100\\nbeta 50\\ngamma 90\\ndelta 80\\n\") == \"80.00\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\nalpha 100\\nbeta 100\\nbeta\\n') == '50.00'\nassert solution('3\\nalpha 100\\nbeta 100\\nalpha\\n') == '50.00'\nassert solution('2\\nalpha 100\\nbeta 100\\nalpha\\n') == '50.00'\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nalpha 100\\nbeta 50\\ngamma 20\\ndelta 60') == '50.0'\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nhello world\\njeff smith\\n') == '50.0'\n\n\"\"\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\nalpha 100\\nbeta 50\\nalpha\\nbeta') == '50.00'\nassert solution('2\\nalpha 100\\nbeta 50\\nalpha') == '50.00'\nassert solution('2\\nalpha 100\\nbeta 50') == '50.00'\nassert solution('2\\nalpha 100') == '100.00'\nassert solution('2') == '2.00'\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nalpha 100\\nbeta 100\\nalpha 100\\nbeta 100\\nalpha 50') == '50.00'\n\n'''\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\nMarry George\nJohn William\nHenry Davids\n''') == 'Ms. Henry Davids\\nMs. Mary George\\nMr. Henry Davids\\n'\n\nassert solution('''\n2\nHenry Davids\nMary George\n''') == 'Mr. Henry Davids\\nMs. Mary George\\n'''\n\nassert solution('''\n4\nHenry Davids\nPaul Allen\nMarry George\nJohn William\n''') == 'Ms. Mary George\\nMr. Henry Davids\\nMs. Paul Allen\\nMr. Henry Davids\\n'"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\nHendrix v3\\nGraham v18\\nVincent v1\\n\") == \"Vincent V1\\nGraham V18\\nHendrix V3\"\nassert solution(\"2\\nHendrix v3\\nGraham v18\\nVincent v1\\n\") == \"Vincent V1\\nHendrix v3\\nGraham V18\"\n=====Solution====="
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nAdam 2 M\\nAnna 1 F\\nMalcolm 3 M\\nWalter 5 M\\n\") == 'Adam\\nMalcolm\\nWalter'\n\n==========================================================================================================================\n\n=====CODE=====\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\nKrishna 67 68 69\nArjun 70 98 63\nMalika 97 60 56\nMalika 97 67''') == 'Malika 97 67\\nMalika 97 68\\nMalika 97 68\\nMalika 97 67'\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\n    'John',\n    'Mary',\n    'Mary',\n    'Henry',\n    'Henry',\n    'Marion',\n    'John',\n    'Henry',\n    'Mary',\n    'John',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Henry',\n    'Henry',\n    'Marion',\n    'John',\n    'Henry',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    'Mary',\n    '"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\nMarry\\nSally\\nAva\\nLaura\\n\") == \"Mr. Laura\\nMs. Ava\\nMr. Harry\\nMrs. Sally\\nMr. Henry Davids\"\n\n>>> "
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\nMira Bella\\t\\t\\t7\\tF\\nEmma Watson\\t\\t\\t5\\tF\\nSophia Turner\\t\\t\\t9\\tF\\nRavinder\\t\\t\\t9\\tM\\nVirat Kohli\\t\\t\\t5\\tM\") == \"Mr. Virat Kohli\\nMs. Emma Watson\\nMs. Sophia Turner\\nMs. Rita Sastry\\nMr. Ravi Kumar\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nHenry Davids\\n\") == \"Mr. Henry Davids\"\nassert solution(\"1\\nMary George\\n\") == \"Ms. Mary George\"\n\n\n'''\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdin.read().strip()\n"
    },
    {
        "number": 4673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n    John 10 M\n    Mark 20 M\n    Lisa 70 F\n    Hannah 50 F\n    Michael 20 M\n    Michael 10 M''') == '''\n    John\n    Hannah\n    Michael\n    Lisa\n    Mark\n    Mark\n'''"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 1, 2, 3]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n'''\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\nl = []\nfor i in range(x+1):\n    for j in range(y+1):\n        for k in range(z+1):\n            if i+j+k!= n:\n                l.append([i,j,k])\nprint(l)\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([1,1,2,3]) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 1, 2, 3]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n\n>>>>>>> Stash\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    x = 1,\n    y = 1,\n    z = 2,\n    n = 3) == ['0,0,0', '0,0,1', '0,0,2', '0,1,0', '0,1,1', '0,1,2', '1,0,0', '1,0,1', '1,0,2', '1,1,0', '1,1,1', '1,1,2']\n\nprint(solution(\n    x = 1,\n    y = 1,\n    z = 2,\n    n = 3))\n\n=====Output=====\n['0,0,0', '0,0,1', '0,0,2', '0,1,0', '0,1,1', '0,1,2', '1,0,0', '1,0,1', '1,0,2', '1,1,0', '1,1,1', '1,1,2']\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([1, 1, 2, 3]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nassert solution([1, 1, 3, 4]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nassert solution([3, 3, 2, 1]) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n'''"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nassert solution('3 4 5 6') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\nassert solution('2 4 5 2') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\nassert solution('10 10 10 10') == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n=====Output Format=====\nPrint an array of the elements that do not sum to n = 3\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1],[1,1,2]]\n\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 1, 2, 3]) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n\n[-2, 0, 0, 1, 1, -1]\n\n[[0, 0, 0],\n[0, 0, 1],\n[0, 1, 0],\n[0, 1, 1],\n[1, 0, 0],\n[1, 0, 1],\n[1, 1, 0],\n[1, 1, 1]]\n\n[[0, 0, 0],\n[1, 0, 0],\n[1, 1, 0],\n[1, 1, 1]]\n\n=========Output==========\n[[0, 0, 0],\n[0, 0, 1],\n[0, 1, 0],\n[0, 1, 1],\n[1, 0, 0],\n[1, 0, 1],\n[1, 1, 0],\n[1, 1, 1]]\n\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2,1,1,2]) == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n'''"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(x,y,z,n) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n"
    },
    {
        "number": 4674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([1, 1, 2, 3]) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n\n=====Output=====\n[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n'''"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 + 2j') == '1 + 2j'\nassert solution('-4 + 1j') == '-4 - 1j'\nassert solution('2 + 3j') == '2 + 3j'\nassert solution('-1 + 3j') == '-1 - 3j'\nassert solution('0.6 + 1.7j') == '0.6 + 1.7j'\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2.00+2.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"3.00-1.00i\""
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"3.00+5.00i\"\nassert solution(\"1 1\") == \"2.00+0.00i\"\nassert solution(\"3 2\") == \"2.00+5.00i\"\nassert solution(\"1+1i\") == \"2.00+0.00i\"\nassert solution(\"1-1i\") == \"2.00+0.00i\"\n=====Submission Link=====\nhttps://codeforces.com/problemset/submission/132393/K\n\nS = input().split()\n\nprint(int(S[0]) + int(S[1]))\nprint(int(S[0]) - int(S[1]))\nprint(int(S[0]) * int(S[1]))\nprint(int(S[0]) / int(S[1]))\nprint(int(S[0]) % int(S[1]))\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 + 1j\") == \"(1+1j) = (2+0j)\"\nassert solution(\"1 + -1j\") == \"(1+-1j) = (2+0j)\"\nassert solution(\"5 + 6j\") == \"(5+6j) = (11+0j)\"\nassert solution(\"5 - 6j\") == \"(5+6j) = (11-0j)\"\nassert solution(\"5*6j\") == \"(5+6j) = (30+0j)\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 -2i') == '1-2i'\nassert solution('1+2i') == '3+2i'\nassert solution('-1+2i') == '-3+2i'\nassert solution('2+2i') == '4+2i'\nassert solution('2-2i') == '0-2i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.3+2.2i') == '1.3+2.2i'\nassert solution('2+5i') == '2.00+5.00i'\nassert solution('4-1i') == '-3.00+1.00i'\nassert solution('4+1i') == '4.00+1.00i'\nassert solution('-4+1i') == '-4.00+1.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.1+5.6i') == '2.1+5.6i'\n=====Constraints=====\n1 < len(stdin) < 10**5\n1 < len(str(stdin)) < 10**6\nThe real and imaginary part of the input are integers within the range of -1000 <= A <= 1000 and -1000 <= B <= 1000.\nThe input is guaranteed to be a valid complex number, and the result is guaranteed to be also a valid complex number.\n'''\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2.5 - 5.0''') == '5.5'\nassert solution('''5.0 - 5.0''') == '-5.0'\nassert solution('''-1.5 + 2.0''') == '1.5'\nassert solution('''1.5 + -2.0''') == '-1.5'\nassert solution('''1.5 - -2.0''') == '1.5'\n"
    },
    {
        "number": 4675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1.0 2.0''') == '2.0 0.0i'"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('xyz') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nassert solution('aba') == 'xaybzc'\nassert solution('aaa') == 'xaybzc'\nassert solution('abba') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\nprint(solution(input()))\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"xaybzc\""
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''xyz\nabc''') == 'xaybzc'\nassert solution('''def\nghi''') == 'defghi'\nassert solution('''abc\n"
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\""
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('01B0') == '00'\nassert solution('01C') == '01'\nassert solution('B') == 'B'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('01B0') == '00'\nassert solution('01B0B') == '00'\nassert solution('01B0BB') == '00'\nassert solution('01B0B0B') == '00'\nassert solution('01B0B0BB') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''01B0''') == '00'\nassert solution('''0B0''') == '0'\nassert solution('''0B0B''') == '0'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\nprint(solution(\"01B0\"))\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n\nfrom typing import List\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''01B0''') == '00'\nassert solution('''010101''') == '010101'\nassert solution('''01B0''') == '00'\nassert solution('''010101''') == '010101'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('01B0') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('01B0') == '00'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\n    3,\n    4,\n    3,\n    4,\n    4\n]) == \"2\"\nassert solution([\n    5,\n    2,\n    1,\n    5,\n    4,\n    3\n]) == \"4\"\nassert solution([\n    5,\n    2,\n    1,\n    5,\n    4,\n    3\n]) == \"4\"\nassert solution([\n    5,\n    2,\n    1,\n    5,\n    4,\n    3\n]) == \"4\"\nassert solution([\n    5,\n    2,\n    1,\n    5,\n    4,\n    3\n]) == \"4\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '4'\nassert solution('6') == '3'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1 5 4 3\n''') == '4'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3') == \"4\"\nassert solution('6\\n3 4 4 4 3 2') == \"3\"\nassert solution('3\\n1 2 1 3') == \"3\"\nassert solution('6\\n1 2 3 4 1') == \"2\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '4'"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''5\n2 1 5 4 3''') == '4'\nassert solution('''3\n2 1 5''') == '3'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('3\\n2 1 5 4 3') == '2'\n"
    },
    {
        "number": 4678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''aca\naccc\nca''') == 'A'\nassert solution('''\naca\naccc\nca''') == 'A'\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'B'\nassert solution('ca') == 'C'\nassert solution('aacb') == 'A'\nassert solution('cb') == 'B'\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\nassert solution(\"acba\") == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'B'\nassert solution('ca') == 'C'"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"aca\\n\"\n    \"accc\\n\"\n    \"ca\"\n) == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"B\"\nassert solution(\"ca\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\naca\naccc\nca\"\"\") == \"A\"\nassert solution(r\"\"\"\na\naccc\nca\"\"\") == \"A\"\nassert solution(r\"\"\"\na\naccc\nca\"\"\") == \"A\"\nassert solution(r\"\"\"\na\na\na\"\"\") == \"A\"\nassert solution(r\"\"\"\na\na\na\"\"\") == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'aca\\n'\n    'accc\\n'\n    'ca'\n) == 'A'"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 7') == \"YES\"\nassert solution('10 10 10') == \"YES\"\nassert solution('1 1 1') == \"YES\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('1 1 5') == 'NO'\n\nThe first line of input contains the length of A, B and C.\nThe second line of input contains A, B and C separated by a single space.\n\nAll numbers are integers in the range of 1 to 10.\n\nLet's build a Haiku. The sequence A, B, C is given by the input.\n\nExamples:\n\nInput    Output\n'1 1 5'    YES\n'5 5 7'    NO\n'7 9 8'    NO\n\"\"\"\nimport sys\n\nA, B, C = list(map(int, input().split()))\nprint(\"YES\" if (A == 1 and B == 1 and C == 5) or (A == 5 and B == 5 and C == 1) or (A == 5 and B == 7 and C == 5) or (A == 7 and B == 1 and C == 5) or (A == 7 and B == 5 and C == 5) else \"NO\")"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('3 3 5') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('1 2 3') == 'NO'"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"2 3 4\") == \"NO\"\nassert solution(\"3 4 3\") == \"YES\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('10 10 5') == 'NO'\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('5 5 7') == 'YES'\nassert solution('1 1 1') == 'NO'\nassert solution('1 2 4 5') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 7') == 'YES'\n"
    },
    {
        "number": 4680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5 7\\n\") == \"YES\""
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '11'\nassert solution('1') == '2'\nassert solution('3') == '4'\nassert solution('4') == '7'\nassert solution('5') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"11\""
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '11'\nassert solution('10\\n') == '13'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '11'\nassert solution('10') == '12'\nassert solution('20') == '21'\nassert solution('30') == '34'\nassert solution('40') == '55'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '11'\nassert solution('15') == '17'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"10\") == \"21\"\nassert solution(\"20\") == \"39\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '7'\nassert solution('4') == '7'\nassert solution('2') == '7'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n2\\n\") == \"7\"\nassert solution(\"1\\n2\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\nassert solution(\"0\\n1\\n2\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '7'\nassert solution('4') == '7'\nassert solution('2') == '7'\nassert solution('3') == '7'"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '4'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"15\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"60\"\n\n\"\"\"\n\na, b, h = map(int, input().split())"
    },
    {
        "number": 4682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\nprint(solution(input()))\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"11\"\nassert solution(\"5\") == \"65\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"11\"\nassert solution(\"2\") == \"10\""
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '11'\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '11'\nassert solution('''\n2\n1 2\n''') == '10'\n'''"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '11'\nassert solution('''\n5\n2 1 3 4 5\n''') == '15'\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '4'"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '11'\n\nassert solution('''\n5\n1 3 2 4 5\n''') == '12'\n\nassert solution('''\n5\n2 4 2 4 5\n''') == '10'\n\nassert solution('''\n5\n1 5 2 4 3\n''') == '11'\n\nassert solution('''\n5\n1 3 2 4 5\n''') == '11'"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"11\"\n\nassert solution(\"2\\n1 2\\n\") == \"3\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2 3\n''') == '11'\nassert solution('''\n5\n1 2 3 4 5\n''') == '13'\nassert solution('''\n2\n1 2\n''') == '3'\nassert solution('''\n1\n1\n''') == '0'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '216'\n"
    },
    {
        "number": 4683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '11'\nassert solution('4\\n1 2 3 4') == '19'\nassert solution('5\\n1 2 3 4 5') == '17'\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"5 3 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"5 3 2 4\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.read()\n\nnumbers = stdin.split()\n\nint_list = [int(i) for i in numbers]"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3 2') == 'YES'"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(4, 3, 2) == \"YES\", \"solution failed\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == 'YES'\n\nassert solution('4 3 2') == 'NO'\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 2 5 4\") == \"NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == \"YES\", \"Should be YES\"\nassert solution('1 3 2') == \"YES\", \"Should be YES\"\nassert solution('1 3 2 4') == \"NO\", \"Should be NO\"\nassert solution('1 3 3 4') == \"NO\", \"Should be NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('2 2 3') == 'NO'\n\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        red = int(stdin[0])\n        green = int(stdin[1])\n        blue = int(stdin[2])\n        if (red + green + blue) % 4 == 0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\") == \"30\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"15\") == \"15\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 11') == '30'\nassert solution('1') == '1'\nassert solution('5 4 3') == '8'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4 5') == '9'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 11\n1''') == '30'\nassert solution('''5 3 11\n2''') == '10'\nassert solution('''5 3 11\n3''') == '15'\nassert solution('''5 3 11\n4''') == '20'\nassert solution('''5 3 11\n5''') == '25'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3 11\n1\n\n''') == '30'\nassert solution('''3 2 9\n4\n\n''') == '18'\nassert solution('''3 2 3\n4\n\n''') == '3'\nassert solution('''3 3 2\n3\n\n''') == '3'\nassert solution('''1 2 2\n2\n\n''') == '0'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 11') == '30'\nassert solution('1') == '2'\nassert solution('1 2 3 4 5') == '15'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2') == '2'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 11') == '30'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 11\") == \"30\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\") == \"30\""
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abcde\") == \"No\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abaccaba') == 'Yes'\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abcbabcbaba\") == \"No\"\nassert solution(\"\") == \"No\"\nassert solution(\"abcccabbc\") == \"Yes\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abaccaba') == 'Yes'\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abaccaba') == 'Yes'"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"xyzwvu\") == \"No\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('a') == 'No'\nassert solution('ab') == 'No'\nassert solution('ac') == 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbbbccdddeeedffggghhijhklij\") == \"No\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\""
    },
    {
        "number": 4686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abaccaba') == 'Yes'\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n1 1\n2 2\n3 3\n''') == '3'\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\nassert solution(\"2 3\\n4 2\\n5 2\\n\") == \"2\"\nassert solution(\"1 2\\n3 1\\n5 2\\n\") == \"2\"\nassert solution(\"1 2\\n3 3\\n5 2\\n\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 1\\n2 2\\n3 3') == '3'\nassert solution('3 4\\n1 1\\n2 2\\n3 3\\n5 4') == '3'\nassert solution('3 4\\n1 1\\n2 2\\n3 3\\n5 4\\n6 5') == '3'\nassert solution('3 4\\n1 1\\n2 2\\n3 3\\n5 4\\n6 5\\n7 6') == '3'\nassert solution('3 4\\n1 1\\n2 2\\n3 3\\n5 4\\n6 5\\n7 6\\n8 7') == '3'\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"6 7\") == \"7\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1 1\") == \"3\"\nassert solution(\"5 4\") == \"3\"\nassert solution(\"10 6\") == \"7\"\nassert solution(\"10 5\") == \"6\"\nassert solution(\"10 4\") == \"5\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '3'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '3'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '3'\nassert solution('1 2') == '2'\n\n--------------------------------------------------\n"
    },
    {
        "number": 4687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 2]) == '2'\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"1\", \"1\"]) == \"2\"\nassert solution([\"2\", \"2\"]) == \"4\"\nassert solution([\"3\", \"2\"]) == \"5\"\nassert solution([\"4\", \"3\"]) == \"5\"\nassert solution([\"5\", \"3\"]) == \"5\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 2') == '4'\nassert solution('2 3') == '5'\nassert solution('3 2') == '0'\nassert solution('4 3') == '5'"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('5') == '12'\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('2 1\\n') == '1'\nassert solution('2 2\\n') == '2'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20 3') == '10'\nassert solution('100 4') == '101'\nassert solution('5 100') == '0'"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"20 3\") == \"10\"\nassert solution(\"20 2\") == \"20\"\nassert solution(\"20 5\") == \"13\"\nassert solution(\"20 10\") == \"13\"\nassert solution(\"20 20\") == \"30\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 3\") == \"10\"\nassert solution(\"100 1\") == \"100\"\nassert solution(\"100 2\") == \"99\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"20 3\"\n) == \"10\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"20 3\") == \"10\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\""
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"20 3\") == \"10\""
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '20 3'\n    '5 10 15'\n
    },
    {
        "number": 4689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\nassert solution(\"20 3\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5 2 7\n''') == '15'\nassert solution('''\n4 5 2 7\n''') == '14'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 2 7') == '15'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"3 5 5 7\") == \"15\"\nassert solution(\"5 5 2 7\") == \"15\"\nassert solution(\"5 5 5 7\") == \"15\"\nassert solution(\"10 10 10 10\") == \"10\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(1) == '0'\nassert solution(2) == '0'\nassert solution(3) == '10'\nassert solution(4) == '10'\nassert solution(5) == '10'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"2 4 4 4\") == \"16\"\nassert solution(\"3 5 8 9\") == \"11\""
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('10 10 10 10') == '10'\nassert solution('9 9 9 9') == '9'\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('1 2 3 4') == '5'\nassert solution('10 50 20 3') == '45'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('9 7 2 8') == '8'\n"
    },
    {
        "number": 4690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == 'AC x 3'\nassert solution('1') == 'AC x 1'\nassert solution('2') == 'WA x 1'\nassert solution('3') == 'WA x 1'\nassert solution('4') == 'AC x 0'\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"AC x 1\\nWA x 1\\nTLE x 2\\nRE x 0\"\nassert solution(\"5\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nassert solution(\"5\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nassert solution(\"6\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nassert solution(\"2\") == \"AC x 0\\nWA x 1\\nTLE x 0\\nRE x 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'AC x 3'\nassert solution('5') == 'WA x 1'\nassert solution('4') == 'TLE x 2'\nassert solution('3') == 'RE x 0'"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\nAC\\nWA\\nWA\\nWA') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nAC\\nWA\\nWA\\nWA\\nAC') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nprint(solution('5\\nAC\\nWA\\nWA\\nWA\\nAC'))\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nAC\") == \"AC x 3\"\nassert solution(\"5\\nWA\") == \"WA x 1\"\nassert solution(\"6\\nTLE\") == \"TLE x 2\"\nassert solution(\"7\\nRE\") == \"RE x 0\""
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\n\"\nprint(solution(\"5\\nAC\\nWA\\nTLE\\nWA\\nAC\\nWA\\nAC\"))\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\nassert solution('33') == '45'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"27\"\nassert solution(\"23\") == \"27\"\nassert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"25\"\nassert solution(\"26\") == \"25\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10\n3\n4\n4\n5\n6''') == '9'\n\nassert solution('''23\n7\n8\n9\n10\n11''') == '26'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"27\"\nassert solution(\"23\") == \"27\"\nassert solution(\"11\") == \"21\"\nassert solution(\"2\") == \"14\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == '1'\nassert solution('0') == '24'"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('18') == '15'\nassert solution('19') == '24'\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\nassert solution(\"23\") == \"27\"\nassert solution(\"30\") == \"27\"\nassert solution(\"10\") == \"9\"\nassert solution(\"12\") == \"11\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"27\"\nprint(solution(stdin))"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(1) == 'error'\nassert solution(2) == 'error'\nassert solution(3) == 'error'\nassert solution(4) == 'error'\nassert solution(5) == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"2 4\") == \"error\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == '7'\nassert solution('0 0') == 'error'"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"5\", \"3 + 2 = 5\"\nassert solution(\"5 9\") == \"12\", \"5 + 9 = 12\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(None) == \"error\"\nprint(solution(input()))"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"10 10\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"0 0\") == \"0 0\"\nassert solution(\"4 9\") == \"error\""
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 9') == '10'"
    },
    {
        "number": 4693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 2 3\") == \"error\"\nassert solution(\"10 10\") == \"error\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"5\"\nassert solution(\"20\") == \"11\"\nassert solution(\"25\") == \"13\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 7 9') == '7'\nassert solution('4\\n2 3 7 9') == '9'\n\nimport unittest\nimport io\nimport sys\n\nclass Test_Solution(unittest.TestCase):\n    def test_something(self):\n        pass"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\nassert solution(\"3\\n2 4 3\") == \"4\"\n\nassert solution(\"1\\n3 4\") == \"4\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2 3\\n\") == \"7\\n\"\nassert solution(\"3\\n1 2\\n\") == \"7\\n\""
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n\n''') == '5'\nassert solution('''6\n2 3 1 5 4 8\n\n''') == '6'\nassert solution('''8\n1 2 3 4 5 6 7 8\n\n''') == '8'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '7'\nassert solution('1') == '1'\nassert solution('2 3 7 9') == '7'"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"7\"\nassert solution(\"2 2 3\") == \"3\"\nassert solution(\"2 1 3 4\") == \"5\"\nassert solution(\"4\") == \"7\""
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 2, 7, 9]) == '7'\nassert solution([1, 4, 8, 9]) == '4'\nassert solution([3, 4, 1, 7]) == '3'\nassert solution([3, 4, 6, 7]) == '5'\nassert solution([1, 2, 2, 2]) == '3'\n"
    },
    {
        "number": 4694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3 7 9\n''') == \"7\"\nassert solution('''4\n2 3 7 9\n''') == \"9\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('1 3') == 'Yes'\nassert solution('2 5') == 'No'\nassert solution('4 6') == 'Yes'\nassert solution('1 2') == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"Yes\""
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"1 5\") == \"Yes\"\nassert solution(\"3 5\") == \"No\"\nassert solution(\"2 4\") == \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 3]) == 'Yes'\nassert solution([1, 4]) == 'No'\nassert solution([1, 5]) == 'No'\nassert solution([1, 6]) == 'No'\nassert solution([1, 7]) == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 3\n3 1\n1 2\n4 2\n5 2\n6 2\n7 2\n8 2\n9 2\n10 2\n11 2\n12 2\n\"\"\") == \"Yes\"\nassert solution(\"\"\"1 3\n3 1\n1 2\n4 2\n5 2\n6 2\n7 2\n8 2\n9 2\n10 2\n11 2\n12 2\n\"\"\") == \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('2 1') == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('1 2') == 'No'"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"5 6\") == \"No\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"5 1\") == \"Yes\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"1 2\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\", \"Test 1 failed: Empty string\"\nassert solution(\"1\") == \"\", \"Test 2 failed: 1 is odd\"\nassert solution(\"1 2\") == \"Even\", \"Test 3 failed: 1 * 2 = 2 even\"\nassert solution(\"1 2 3\") == \"Even\", \"Test 4 failed: 1 * 2 = 2 even\"\nassert solution(\"1 2 3 4\") == \"Even\", \"Test 5 failed: 1 * 2 = 2 even\""
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'Even'\nassert solution('3 4') == 'Even'"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"Even\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''a b''') == 'Even'\nassert solution('''5 7''') == 'Odd'\n'''\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Even'\nassert solution('1 4') == 'Even'\nassert solution('2 1') == 'Odd'\nassert solution('2 4') == 'Odd'\n\"\"\"\nimport sys\nimport math\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"Even\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('4 3') == 'Odd'"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Even\"\nassert solution(\"1 2\") == \"Odd\"\nassert solution(\"2 1\") == \"Odd\""
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == 'Even'\nassert solution('1 1') == 'Even'\nassert solution('1 2') == 'Odd'\nassert solution('2 2') == 'Odd'\n'''\n\na, b = map(int, input().split())"
    },
    {
        "number": 4696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'Even'\nassert solution('2 3') == 'Odd'\nassert solution('3 4') == 'Even'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 6\") == \"2\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"2 6\") == \"2\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 6\") == \"2\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([1,6]) == \"2\"\nassert solution([10,10]) == \"10\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 6') == '2'\nassert solution('4 8') == '4'\nassert solution('3 9') == '3'\nassert solution('8 9') == '3'\nassert solution('100 100') == '5'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 6') == '2'\nassert solution('10 12') == '5'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5 6') == '3'\nassert solution('1 2 3 4 5 6 7') == '4'\n"
    },
    {
        "number": 4697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 6') == '2'\nassert solution('2 4') == '3'\n\"\"\"\nimport math\n\nn, m = map(int, input().split())\n\nans = 0"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6 9'\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6\\n9'\nassert solution('5') == '12\\n24'"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6 9\"\nassert solution(\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6 9\"\nassert solution(\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6 9\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 1 4\n2\n1 1\n2 3\n''') == '6 9'\nassert solution('''\n3\n2 1 4\n2\n1 1\n2 3\n''') == '6 9'\nassert solution('''\n3\n3 5 2\n3\n1 1 1\n2 1\n''') == '3 3'\nassert solution('''\n1\n1\n1\n''') == '0'\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"\"\"6\n9\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '6\\n9\\n'"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 1 4\n2\n1 1\n2 3\n\n''') == '6 9'\nassert solution('''3\n2 1 4\n2\n1 1\n2 3\n\n''') == '6 9'"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6 9\"\nassert solution(\"7\") == \"9 20\"\nassert solution(\"6\") == \"6 9\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6\\n9\"\nassert solution(\"2\") == \"6\\n9\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6 9'\n\n'''\n\nstdin = input()\nn = int(stdin)\n\ntime_list = [0] * n\nfor i in range(n):\n    stdin = input().split(' ')\n    time_list[i] = int(stdin[1]) + int(stdin[2])\n    \n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000 8\") == \"2000\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9\\n') == '2000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1000 8\") == \"2000\""
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 8') == '2000'\nassert solution('100 8') == '2000'\nassert solution('1000 12') == '1500'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    2000\n    1 3 4 5 6 7 8 9\n    '''\n    ) == '2000'\n\nassert solution(\n    '''\n    10000\n    1 3 4 5 6 7 8 9\n    '''\n    ) == '10000'\n\nassert solution(\n    '''\n    100000\n    1 3 4 5 6 7 8 9\n    '''\n    ) == '100000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"2000\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000 8') == '2000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"1000\"\nassert solution(\"1 2\") == \"2000\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"2000\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2000\"\nassert solution(\"1000\") == \"2000\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"2\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 5\n4 5\n2 3\n5 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '2'\nassert solution('1 2 3 4') == '2'\n\n'''"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '2'\nassert solution('10 5') == '6'\nassert solution('100 5') == '6'\nassert solution('1 2 3 4') == '2'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"4 1\") == \"1\""
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\") == \"2\""
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\nassert solution('''4 5\n1 2 3 4 5\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '4'"
    },
    {
        "number": 4700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\nassert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\nassert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '1'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"20\"\nassert solution(\"3\") == \"21\"\n\"\"\"\n\nn, k = input().split()\nn = int(n)\nk = int(k)\nmin_val = 0\nfor _ in range(n):\n    min_val += k\nprint(min_val)"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\") == \"10\"\nassert solution(\"4\\n4\") == \"16\"\nassert solution(\"3\\n5\") == \"20\"\nassert solution(\"3\\n2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n3') == '6'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1''') == '1'\nassert solution('''4\n1''') == '2'\nassert solution('''4\n3''') == '3'\nassert solution('''4\n2\n2''') == '6'\nassert solution('''4\n3\n2''') == '9'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1\") == \"4\"\nassert solution(\"2\\n0\") == \"0\"\nassert solution(\"2\\n2\") == \"4\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n3''') == '10'\nassert solution('''2\n1''') == '2'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3') == '2'\nassert solution('4\\n4') == '4'\nassert solution('5\\n5') == '10'\n"
    },
    {
        "number": 4701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"4\") == \"20\"\nassert solution(\"3\") == \"100\"\nassert solution(\"6\") == \"1296\""
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0', 'Solution needs to return 0 or 1'\nassert solution('0') == '1', 'Solution needs to return 0 or 1'\nassert solution('0.5') == '0', 'Solution needs to return 0 or 1'"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\n\"\"\"\n\nx = input()"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '0', \"Should be 0\"\nassert solution('1') == '1', \"Should be 1\"\nassert solution('0.5') == '0', \"Should be 0\"\nassert solution('1.5') == '0', \"Should be 0\"\nassert solution('0.01') == '0', \"Should be 0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0.1\") == \"0\"\nassert solution(\"0.2\") == \"0\"\nassert solution(\"0.3\") == \"0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('0.1') == '0.1'\nassert solution('1.1') == '0.1'\nassert solution('-1') == '0'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('125') == '176'"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1225') == '176'\nassert solution('1+2+3') == '6'\nassert solution('1+2+3+4') == '10'\nassert solution('1+2+3+4+5') == '15'\nassert solution('1+2+3+4+5+6') == '18'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"125\") == \"176\""
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('125') == '176'\nassert solution('2+5') == '7'\nassert solution('1+2') == '3'\nassert solution('1+1') == '2'\nassert solution('1+1+2') == '5'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('125') == '176'\nassert solution('123') == '123'\nassert solution('00') == '0'\nassert solution('100') == '100'\nassert solution('42') == '42'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('125') == '176'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"-2\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1234\") == \"1234\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('125') == '176'\nassert solution('125+1') == '256'\nassert solution('125+1+1') == '257'\nassert solution('125+1+1+1') == '256'\nassert solution('125+1+1+1+1') == '257'\n"
    },
    {
        "number": 4703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n10\n+20''') == '36'''\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n1 2 3 4 5 6\n''') == '1'\nassert solution('''4\n1 2 3 4\n''') == '1'\nassert solution('''4\n3 4 1 2\n''') == '3'\nassert solution('''2\n1 2 3\n''') == '1'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\nassert solution('6\\n2 4 5 1 3 1') == '3'\nassert solution('6\\n1 2 3 4 5 6') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('10') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n5 2 1 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n3 4 5 6\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n1 2 3 4 5 6\\n') == '1'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20') == '15800'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"15800\"\nprint(solution(input()))"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20') == '15800'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"15800\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '10500'\nassert solution('5') == '20500'\nassert solution('20') == '20000'"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20') == '15800'\nassert solution('10') == '1500'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '8000'\nassert solution('20') == '16000'\nassert solution('100') == '160000'"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"0\"\nassert solution(\"15\") == \"15800\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4000'\nassert solution('20') == '17600'"
    },
    {
        "number": 4705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"6\""
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ant\nobe\nrec''') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ant') == 'abc', 'test 1 failed'\nassert solution('obe') == 'abc', 'test 2 failed'\nassert solution('rec') == 'abc', 'test 3 failed'\n\n'''\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\""
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('abcd') == 'abc'\nassert solution('ba') == 'abc'\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"2\"\nassert solution(\"101\") == \"3\"\nassert solution(\"010\") == \"1\""
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0\n0\n1''') == '1'\nassert solution('''\n1\n0\n0''') == '3'\n\n'''\nOUTPUT EXAMPLE:\n'''\n\nstdin = input()\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\ns_{1}s_{2}s_{3}\n''') == '2'\nassert solution('''\ns_{1}s_{2}s_{3}\ns_{4}s_{5}s_{6}\n''') == '1'\nassert solution('''\ns_{1}s_{2}s_{3}\ns_{4}s_{5}s_{6}\ns_{7}s_{8}s_{9}\n''') == '3'\n\n'''\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"2\""
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('0') == '1'\nassert solution('101') == '2'\n\"\"\"\n\n\"\"\"\n2.\nLet L be the following list:\n\nL = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 200, 200, 200, 201, 201, 201, 202, 202, 202, 203, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 213, 213, 213, 214, 214, 214, 215, 215, 215, 216, 216, 216, 217, 217, 217, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 256, 256, 256, 257, 257, 257, 258, 258, 258, 259, 259, 259, 260, 260, 260, 261, 261, 261, 262, 262, 262, 263, 263, 263, 264, 264, 264, 265, 265, 265, 266, 266, 266, 267, 267, 267, 268, 268, 268, 269, 269, 269, 270, 270, 270, 271, 271, 271, 272, 272, 272, 273, 273, 273, 274, 274, 274, 275, 275, 275, 276, 276, 276, 277, 277, 277, 278, 278, 278, 279, 279, 279, 280, 280, 280, 281, 281, 281, 282, 282, 282, 283, 283, 283, 284, 284, 284, 285, 285, 285, 286, 286, 286, 287, 287, 287, 288, 288, 288, 289, 289, 289, 290, 290, 290, 291, 291, 291, 292, 292, 292, 293, 293, 293, 294, 294, 294, 295, 295, 295, 296, 296, 296, 297, 297, 297, 298, 298, 298, 299, 299, 299, 300, 300, 300, 301, 301"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('1') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"01\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"101\") == \"2\""
    },
    {
        "number": 4707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\nassert solution('0') == '3'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 10000 9000\\n') == '48000'\nassert solution('1 2 10000 9000\\n') == '58000'\nassert solution('5 3 90000 90000\\n') == '580000'\nassert solution('1 2 90000 9000\\n') == '580000'\nassert solution('5 3 9000 9000\\n') == '580000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\n\n----------------------------------------------------------------------"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '48000'\nassert solution('2') == '60000'\nassert solution('3') == '48000'\nassert solution('4') == '48000'\nassert solution('5') == '48000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n3\n10000\n9000\n''') == '48000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == '48000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\nassert solution(\"3\\n10\\n11\\n12\") == \"38\"\nassert solution(\"5\\n4\\n3\\n2\\n1\") == \"39\"\nassert solution(\"5\\n2\\n3\\n4\\n5\") == \"10\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"40\""
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"48000\"\nassert solution(\"6\") == \"12000\"\nassert solution(\"20\") == \"60000\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\nassert solution('20\\n3\\n4\\n5') == '15000'\n'''"
    },
    {
        "number": 4708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 + 2') == \"3\"\nassert solution('1 - 2') == \"1\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"3 - 4\") == \"1\"\nassert solution(\"5 - 7\") == \"4\"\nassert solution(\"8 - 9\") == \"1\"\nassert solution(\"11 + 12\") == \"15\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 + 2 + 3\") == \"6\"\nassert solution(\"1 - 2\") == \"1\"\nassert solution(\"1 - 2 - 3\") == \"2\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 - 2') == '1'\nassert solution('3 + 4') == '7'\nassert solution('3 - 4') == '-1'\nassert solution('5 + 5') == '10'\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('-1 + 2') == '1'\nassert solution('1 - 2') == '-1'\nassert solution('-1 - 2') == '1'\n'''"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('2 - 1') == '1'\nassert solution('4 - 2') == '2'\nassert solution('2 * 4') == '8'\nassert solution('4 - 2 * 3') == '-5'\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert solution(input('1 + 2\\n')) == '3'\nassert solution(input('5 + 3\\n')) == '8'\n\ninput:\n1 2\n\noutput:\n3\n\ninput:\n1 - 2\n\noutput:\n-1\n\ninput:\n5 - 3\n\noutput:\n8\n\nThe input can be any non-empty string, which contains only digits and the + and - signs.\n'''"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"1 - 2 + 1\") == \"0\"\nassert solution(\"1 - 2 + 1 - 3\") == \"-1\"\nassert solution(\"1 - 2 + 1 - 3 + 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"1\"\nassert solution(\"1 * 2\") == \"2\"\nassert solution(\"1 + 2 + 3\") == \"6\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1000000') == 'ARC'\n\nSmeke's rating is exactly 1200, thus the output should be ARC.\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC', 'Should return ABC'\nassert solution('1250') == 'ARC', 'Should return ARC'\nassert solution('1200') == 'ARC', 'Should return ARC'\nassert solution('1203') == 'ARC', 'Should return ARC'\nassert solution('1202') == 'ARC', 'Should return ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('12000') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\nassert solution('1202') == 'ABC'"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\nassert solution('1201') == 'ARC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'ABC'\nassert solution('2') == 'ARC'\nassert solution('3') == 'ARC'\n'''\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"700 600 780\") == \"1300\"\nassert solution(\"300 1000 100\") == \"500\""
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n700 600 780\n''') == '1300'\nassert solution('''\n500 500 300\n''') == '1150'\n'''\n\nimport sys\nsys.setrecursionlimit(10**6)\n\ninput = lambda: sys.stdin.readline().rstrip() \n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"1000 10 20\") == \"1000\""
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"10 20 30 40\") == \"19\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('1000 1000 1000') == '1500'"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('700 600 780\\n') == '1300'\nassert solution('500 500 500\\n') == '1000'\nassert solution('1000 1000 1000\\n') == '14000'\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('700 600 780') == '1300'\nassert solution('700 600 780') == '1300'\nassert solution('700 600 780') == '1300'\nassert solution('700 600 780') == '1300'\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"800 600 780\") == \"1480\"\nassert solution(\"500 600 800\") == \"1300\"\nassert solution(\"1000 600 800\") == \"1300\"\nassert solution(\"500 600 800\") == \"1400\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"100 100 100\") == \"1000\"\nassert solution(\"100 500 100\") == \"1300\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('700 600 780\\n') == '1300'\nassert solution('700 600 780\\n') == '1480'\nassert solution('700 600 780\\n') == '1380'\n\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == '#####\\n#abc#\\n#arc#'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\nab\nac\n''') == '###\\n##a#\\n##c#\\n###\\n'\nassert solution('''2 2\nabc\nabc\n''') == '###\\n##a#\\n##a#\\n###\\n'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\na#\nb#\nc''') == '''#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"#####\\n#abc#\\n#arc#\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\nabc\narc''') == '#####\\n#abc#\\n#arc#\\n#####'"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\nIIDID''') == '2'"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nIIDID\\n') == '2'\nassert solution('2\\nIIDID\\n') == '0'\nassert solution('3\\nIIDID\\n') == '3'\nassert solution('4\\nIIDID\\n') == '0'\nassert solution('5\\nIIDID\\n') == '2'\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == None\n\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '2'\nassert solution('-1') == '1'\nassert solution('1') == '1'\nassert solution('-5') == '1'"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nIIDID''') == '2'\nassert solution('''10\nIIIIII''') == '5'\nassert solution('''20\nIIIIDID''') == '5'\nassert solution('''30\nDDIDDD''') == '5'\nassert solution('''40\nDDDDDD''') == '5'\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nIIDID\") == \"2\"\nassert solution(\"8\\nIIDID\") == \"2\"\nassert solution(\"12\\nIIDID\") == \"2\"\nassert solution(\"50\\nIIDID\") == \"2\"\nassert solution(\"9\\nIIDID\") == \"2\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([11009,11332]) == 4\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11009 11332\") == \"4\""
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''11009 11332''') == '4'\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''11009 11332''') == '4'\nassert solution('''12342 4 5 6''') == '1'\nassert solution('''1 2''') == '0'\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1000000000001\") == \"4\"\nassert solution(\"1000000000000\") == \"4\"\nassert solution(\"11111\") == \"1\"\nassert solution(\"11112\") == \"0\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2\n1 3\n1 4\n2 3\n2 5\n''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11009 11332') == '4'"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"2 2 4\") == \"5\"\nassert solution(\"4 4 3\") == \"2\"\nassert solution(\"3 2 4\") == \"6\"\nassert solution(\"3 2 4\") == \"2\""
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"4 3 2\") == \"3\"\nassert solution(\"4 4 3\") == \"4\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 1 1') == '3'\nassert solution('3 3 1') == '3'\nassert solution('2 1 3') == '2'\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 1 1') == '3'\nassert solution('1 2 3') == '3'\nassert solution('2 2 2') == '2'\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4') == '3'\n\n'''"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 4\\n\") == \"3\"\nassert solution(\"5 1 4\\n\") == \"3\"\nprint(solution(\"3 1 4\\n\"))\nprint(solution(\"5 1 4\\n\"))\nprint(solution(\"3 1 4\\n\"))\nprint(solution(\"1 1 1\\n\"))\nprint(solution(\"2 2 2\\n\"))\nprint(solution(\"2 2 2\\n\"))\nprint(solution(\"1 1 1\\n\"))\nprint(solution(\"1 1 1\\n\"))\n"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"3 4 5\") == \"3\"\nassert solution(\"4 5 6\") == \"3\"\n\nprint(solution.__doc__)"
    },
    {
        "number": 4715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 3 4') == '3'\nassert solution('1 3 2') == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 2 3 4 5\n''') == '12'\nassert solution('''6 3\n1 2 3 4 5 6\n''') == '12'\n'''\n'''\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\nassert solution('5 1 2 3 4 5') == '14'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"12\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '12'\nassert solution('5 3') == '12'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 3 4 5\\n') == '12'\nassert solution('5 3\\n5 2 3 1 4\\n') == '15'\nassert solution('5 3\\n3 2 1 4 5\\n') == '10'\nassert solution('5 3\\n5 3 1 4 5\\n') == '12'\nassert solution('5 3\\n5 3 4 1 5\\n') == '10'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '12'\n"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '12'\nassert solution('4 5') == '10'\nassert solution('1 2 3 4 5') == '15'\nassert solution('3 5 6') == '10'"
    },
    {
        "number": 4716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12', 'TEST 1 FAILED'\nassert solution('4 3\\n1 2 3\\n5 4') == '10', 'TEST 2 FAILED'\nassert solution('3 3\\n1 2 3\\n5 4') == '8', 'TEST 3 FAILED'\nassert solution('2 2\\n1 2 3') == '1', 'TEST 4 FAILED'\nassert solution('2 2\\n1 2 3\\n4 5') == '4', 'TEST 5 FAILED'\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('7 1 5') == 'A'\nassert solution('0 0 0') == 'A'\nassert solution('5 3 4') == 'A'\nassert solution('5 7 5') == 'A'\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('1 1 2') == 'A'\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 3 2\") == \"3\""
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('7 2 5') == 'A'\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 2 7',\n    'A 3 6',\n    'B 1 5',\n    'B 7 6',\n    'A 5 2',\n    'A 1 2'\n    ) == 'B', 'TESTS'\n\nassert solution(\n    '1 2 3',\n    '4 5 6',\n    '7 8 9',\n    '8 7 6',\n    '2 5 7',\n    '1 1 1'\n    ) == '1', 'TESTS'\n\nassert solution(\n    '3 1 5',\n    '4 7 6',\n    '8 9 2',\n    '8 8 7',\n    '1 2 5',\n    '4 1 2'\n    ) == '1', 'TESTS'\n\nassert solution(\n    '4 1 2',\n    '7 8 9',\n    '5 6 8',\n    '2 3 9',\n    '5 4 2',\n    '4 1 2'\n    ) == '4', 'TESTS'\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2 7\n''') == 'B'\nassert solution('''\n4 1 6\n''') == 'A'\nassert solution('''\n2 6 4\n''') == 'B'\n''')\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'A'\nassert solution('4 5 6') == 'B'\nassert solution('6 7 8') == 'B'\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"A\"\nassert solution(\"1 2 3\") == \"B\""
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"5 3 7\") == \"A\"\nassert solution(\"4 5 7\") == \"A\"\nassert solution(\"3 5 7\") == \"A\"\nassert solution(\"1 1 1\") == \"A\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"1 1 1\") == \"A\"\nassert solution(\"1 1 1 1\") == \"B\""
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/01/13\") == \"2018/01/13\"\nassert solution(\"2017/01/14\") == \"2018/01/14\"\n\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/28') == '2017/01/28'\nassert solution('2017/01/27') == '2017/01/28'\nassert solution('2017/01/30') == '2017/01/30'\nassert solution('2017/01/31') == '2017/01/31'\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"20/12/2020\") == \"2020/12/20\"\nassert solution(\"31/10/2017\") == \"2017/10/31\"\nassert solution(\"17/10/2016\") == \"2016/10/17\"\nassert solution(\"27/02/2017\") == \"2017/02/27\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/02/10\") == \"2018/02/10\"\nassert solution(\"2017/03/27\") == \"2018/03/27\"\nassert solution(\"2017/04/20\") == \"2018/04/20\"\nassert solution(\"2017/05/12\") == \"2018/05/12\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/07') == '2018/01/07'"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2020/12/31') == '2020/12/31'\nassert solution('2017/01/01') == '2018/01/01'\nassert solution('2017/02/28') == '2017/02/28'\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/01/08\") == \"2017/01/08\"\nassert solution(\"2017/01/09\") == \"2017/01/09\"\nassert solution(\"2017/01/10\") == \"2017/01/10\"\nassert solution(\"2017/01/11\") == \"2017/01/11\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2017/01/01\") == \"2018/01/01\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/08') == '2018/01/08'\n"
    },
    {
        "number": 4718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/02/07') == '2018/02/07'\nassert solution('2017/03/07') == '2018/03/07'\nassert solution('2017/04/07') == '2018/04/07'\nassert solution('2017/05/07') == '2018/05/07'\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'aac'\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nab\\nca\\n') == 'ab'\nassert solution('3\\nab\\nca\\n') == 'ac'\nassert solution('2\\nbc\\nac\\n') == 'ac'\nassert solution('1\\n') == ''"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\nassert solution(\"4\\nacac\\nac\\nbc\\nd\") == \"ac\"\nassert solution(\"6\\nccc\\ndd\") == \"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\na\nb\nc\nd\ne\n''') == 'e'"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n'''\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"aac\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'aac'\nassert solution('2') == ''\nassert solution('1') == ''\nassert solution('0') == ''"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\n'''"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\nzzzd\") == \"zzzd\"\nassert solution(\"5\\nzzzd\") == \"\"\nassert solution(\"3\\nzab\") == \"zab\"\nassert solution(\"4\\nzzzd\") == \"zzzd\"\nassert solution(\"5\\nzzzd\") == \"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n'+\n'sa\\n'*5+\n'bcdef\\n'*6+\n'a\\n'*7+\n'abcd\\n'*8) == 'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n24 30\n''') == '7'\nassert solution('''\n2\n1 2\n''') == '3'\nassert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n4\n1 3 5 2\n''') == '4'\nassert solution('''\n5\n1 3 5 2 7\n''') == '5'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n24 30\\n') == '7'\nassert solution('2\\n1 2\\n') == '2'\nassert solution('3\\n1 2 3\\n') == '3'\nassert solution('4\\n1 2 3 4\\n') == '4'\nassert solution('5\\n1 2 3 4 5\\n') == '5'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n24 30\n''') == '7'\nassert solution('''2\n3 4\n''') == '1'\nassert solution('''3\n2 4 6\n''') == '4'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"7\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '7'\nassert solution('2') == '7'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n24 30\n''') == '7'\nassert solution('''\n3\n4 5\n''') == '4'\nassert solution('''\n8\n10 11 12\n''') == '1'\nassert solution('''\n14\n24 45 55\n''') == '4'\nassert solution('''\n10\n100 100 100 100 100 100 100 100 100 100\n''') == '10'\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"1\") == \"7\""
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"7\"\nassert solution(\"1\") == \"7\"\nassert solution(\"12\") == \"7\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '7'\nassert solution('2') == '7'\nassert solution('3') == '7'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == '6'\n'''\n\nn, m = map(int, input().split())\n\nn = min(n, m)\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            for l in range(k + 1, n):\n                print(i, j, k, l)"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\nn, m = map(int, input().split())\n\nblocks = 0\nfor i in range(n):\n    for j in range(m):\n        if (i - 1 >= 0) and (i + 1 < n) and (j - 1 >= 0) and (j + 1 < m):\n            if (i - 1 == j) or (i + 1 == j) or (j - 1 == i) or (j + 1 == i):\n                blocks += 1\n\nprint(blocks)"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4''') == '6'\nassert solution('''3 5''') == '10'\nassert solution('''3 1''') == '0'\nassert solution('''1 1''') == '2'\nassert solution('''2 3''') == '8'\n''')\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 4\") == \"12\"\nassert solution(\"3 4\") == \"24\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict\nfrom functools import reduce"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4''') == '6'\nassert solution('''1 1''') == '1'\nassert solution('''2 4''') == '4'\nassert solution('''2 2''') == '2'\nassert solution('''100 100''') == '10000'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n') == '6'\nprint('Solution = %s' % solution('3 4\\n'))"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '6'\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '6'\nassert solution('1 2') == '1'\nassert solution('2 3') == '3'\nassert solution('3 4') == '6'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 4721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '6'\nassert solution('1') == '1'\nassert solution('2') == '4'\n'''\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'Impossible'\nassert solution('4 5') == 'Possible'\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n\") == \"Possible\"\nassert solution(\"2 3\\n\") == \"Impossible\"\nassert solution(\"4 4\\n\") == \"Possible\"\nassert solution(\"1 1\\n\") == \"Impossible\"\nassert solution(\"3 5\\n\") == \"Possible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == 'Possible'\nassert solution('1 2') == 'Impossible'\nassert solution('5 5') == 'Possible'\nassert solution('4 5') == 'Impossible'\nassert solution('7 5') == 'Possible'\n\"\"\"\n\nimport math\n\na,b = list(map(int,input().split()))"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Possible'\nassert solution('4 4') == 'Impossible'\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"4\", \"5\"]) == \"Possible\"\nassert solution([\"1\", \"2\"]) == \"Impossible\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"Possible\"\nassert solution(\"3 4\") == \"Impossible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"Possible\"\nassert solution(\"1 2\") == \"Impossible\"\nassert solution(\"4 5\") == \"Possible\"\nassert solution(\"10 10\") == \"Impossible\"\nassert solution(\"1 0\") == \"Impossible\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Possible\""
    },
    {
        "number": 4722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"Possible\"\nassert solution(\"2 3\") == \"Impossible\"\nassert solution(\"6 1\") == \"Impossible\"\nassert solution(\"2 1\") == \"Possible\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"UNRESTORABLE\"\nassert solution(\"??tt\") == \"UNRESTORABLE\"\nassert solution(\"\") == \"UNRESTORABLE\"\nassert solution(\"??tt?\") == \"UNRESTORABLE\"\nassert solution(\"tt????\") == \"UNRESTORABLE\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == 'atcoder'\n\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"atcoder\""
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('?tc????') == 'atcoder'\n\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'atcoder'"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"?tc?????\") == \"atcoder\"\nassert solution(\"coder\") == \"unrestorable\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('?') == 'UNRESTORABLE'\nassert solution('?tc????') == 'atcoder'\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"??tc????\") == \"atcoder\", \"Wrong!\"\nassert solution(\"coder?????\") == \"atcoder\", \"Wrong!\"\nassert solution(\"??tc?????\") == \"atcoder\", \"Wrong!\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''?tc????''') == 'atcoder', \"Wrong answer in E869120!\"\n\n'''\nThe reason for the above example is that from the list of strings, we know that the strings that satisfies condition\n1 and 2 have to be strings that are lexicographically smaller than the strings that satisfies condition 1. Thus we can\nwrite this formula to solve the problem.\n\nLet S be the string we are looking for. So we know that S must be smaller than any string that satisfies condition 1.\nLet T' be the string we are looking for. So we know that T' must be smaller than any string that satisfies condition 2.\n\nLet S' be the lexicographically smallest string that satisfies condition 1. So we know that S' must be smaller than\nany string that satisfies condition 2. Thus we can write the formula:\n\nS' = min(S, T, T').\n\nThe reason why we want to write the formula in the above format is that this formula works for every pair of strings,\nso the function will return the smallest of the three strings in the format of the formula.\n\nOne more thing we need to do is to write a more efficient way of finding the minimum.\nIf we are looking for strings whose length is less than or equal to the length of the minimum of the strings\nthat satisfies condition 1, then the minimum is the string with the length of the minimum.\nIf we are looking for strings whose length is less than the length of the minimum of the strings that satisfies condition 2, then the minimum is the string with the length of the maximum of the strings that satisfies condition 2.\n\nIt turns out that the minimum is:\n\nIf S' is the smallest, then S' = min(S, T, T').\nIf S' is the second smallest, then S' = min(S, T, T').\nIf S' is the largest, then S' = max(S, T, T').\n\nSo, we can write the following formula:\n\nS' = min(S, T, T').\n\nAnd we can see that the formula works for any pair of strings. So the function will return the smallest of the three strings in the format of the formula.\n\n'''"
    },
    {
        "number": 4723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('?') == 'UNRESTORABLE'\nassert solution('coder') == 'atcoder'\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2002') == '2017'\nassert solution('2017') == '2017'\nassert solution('2032') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2002\\n2017\\n') == '2032'\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2002') == '2032'\nassert solution('2017') == '2032'\nassert solution('2018') == '2033'\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2002\") == \"2017\"\nassert solution(\"2017\") == \"2032\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2002\n2017''') == '2032'\nassert solution('''1\n1''') == '1'\nassert solution('''0\n0''') == '0'\nassert solution('''0\n0''') == '0'\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2002\") == \"2017\"\nassert solution(\"2017\") == \"2032\"\n\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2000') == '2000'\nassert solution('2004') == '2008'\nassert solution('2005') == '2021'\n"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2002\\n2017') == '2032'\n\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\n\naverage = (a + b) / 2\n\nprint(average)"
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2002') == '2017'\nassert solution('2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2002') == '2017'\nassert solution('2017') == '2032'\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('abcdefghijklmnopqrstuvwxyz') == 25\nassert solution('a') == 1\nassert solution('ab') == 2\nassert solution('abc') == 3\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input(\"string\")) == \"4\"\nassert solution(input(\"letter\")) == \"2\"\nassert solution(input(\"aaaaaa\")) == \"0\"\nassert solution(input(\"uncopyrightable\")) == \"13\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('assesses') == 1\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"string\") == 6\nassert solution(\"letter\") == 4\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"assesses\") == 1\n\"\"\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 4725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('string') == 6\nassert solution('letter') == 4\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('assesses') == 1"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3') == 'AC'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'AC'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'AC'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'AC'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n100000000 500 3\n''') == 'TLE'\nassert solution('''\n100000000 50 3\n''') == 'AC'\nassert solution('''\n100000000 10001 5\n''') == 'TLE'\nassert solution('''\n100000000 10000 5\n''') == 'AC'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 50 3''') == 'AC'\nassert solution('''100000000 10001 5''') == 'TLE'\nassert solution('''100000000 10000 5''') == 'AC'\nassert solution('''19931568 1000000 6''') == 'TLE'\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100000000 500 3\n''') == 'AC'\nassert solution('''\n100000000 50 3\n''') == 'AC'\nassert solution('''\n100000000 10001 5\n''') == 'TLE'\nassert solution('''\n100000000 10000 5\n''') == 'TLE'\nassert solution('''\n19931568 1000000 6\n''') == 'AC'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100000000 500 3') == 'AC'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'AC'\nassert solution('100000000 10000 5') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100000000 500 3\nSample Output 1:\nTLE\n\nSample Input 2:\n100000000 50 3\nSample Output 2:\nAC\n\nSample Input 3:\n100000000 10001 5\nSample Output 3:\nTLE\n\nSample Input 4:\n100000000 10000 5\nSample Output 4:\nAC\n\nSample Input 5:\n19931568 1000000 6\nSample Output 5:\nTLE\n''') == 'AC'\n\nassert solution('''100000000 5 3\nSample Output 1:\nAC\n\nSample Input 2:\n100000000 50 3\nSample Output 2:\nAC\n\nSample Input 3:\n100000000 10001 5\nSample Output 3:\nTLE\n\nSample Input 4:\n100000000 10000 5\nSample Output 4:\nAC\n\nSample Input 5:\n19931568 1000000 6\nSample Output 5:\nTLE''') == 'AC'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 0 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n') == '2 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 4\\n'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n') == '2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 32 32 32\\n0 0 0 0\\n'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0''') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n'\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1''') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2''') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3''') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n1024 1024 64 4\\n'\nassert solution('''2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0''') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\\n'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0 0 2') == '4 0 0 0'\nassert solution('4 16 8 2') == '2 64 32 4'\nassert solution('2 64 32 4') == '1024 64 0 4'\nassert solution('2 0 0 2') == '0 0 0 4'\nassert solution('2 0 0 2') == '4 16 8 2'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n\") == \"2 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\\n\""
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0 0 2') == '4 0 0 0'\nassert solution('4 16 8 2') == '2 64 32 4'\nassert solution('2 64 32 4') == '0 0 2048 64'\nassert solution('1024 1024 64 0') == '2 1024 64 0 0'\nassert solution('3') == '0 0 0 4'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n\"\"\") == \"\"\"4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n\n
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 64 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n'\n"
    },
    {
        "number": 4727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n\"\"\") == \"\"\"\n4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n\"\"\".strip()\n\nassert solution(\"\"\"\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\n\"\"\") == \"\"\"\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\"\"\".strip()\n\nassert solution(\"\"\"\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n\"\"\") == \"\"\"\n2 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n\"\"\".strip()\n\nassert solution(\"\"\"\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\n\"\"\") == \"\"\"\n2 0 0 0\n4 16 8 2\n2 64 32 4\n1024 1024 64 4\n\"\"\".strip()\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"0\"\nassert solution(sample_input_2) == \"6\"\nassert solution(sample_input_3) == \"1\"\nassert solution(sample_input_4) == \"0\"\nassert solution(sample_input_5) == \"12\""
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"H2OC100H\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"H2OC100H\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''H 2\nO\nSample Output 1:\n0\n\nSample Input 2:\nC2H6 10\nC3H8\nSample Output 2:\n6\n\nSample Input 3:\nCH3OH 1\nCH4\nSample Output 3:\n1\n\nSample Input 4:\nC6H6OCH2O 10\nHCN\nSample Output 4:\n0\n\nSample Input 5:\nC6H14 10\nC5H10\nSample Output 5:\n12''') == '6'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '1'\nassert solution('C2H6 10') == '6'\nassert solution('C3H8') == '1'\nassert solution('CH3OH 1') == '1'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''H 2\nO\n''') == '0'\n\nassert solution('''C2H6 10\nC3H8\n''') == '6'\n\nassert solution('''CH3OH 1\nCH4\n''') == '1'\n\nassert solution('''C6H6OCH2O 10\nHCN\n''') == '12'\n\nassert solution('''C6H14 10\nC5H10\n''') == '18'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH\") == \"1\"\nassert solution(\"C6H6OCH2O\") == \"0\"\nassert solution(\"C6H14\") == \"12\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('H 2\\nO') == '0'\nassert solution('C 2\\nO') == '0'\nassert solution('C 2\\nH') == '1'\nassert solution('CH 3OH 1\\nCH 4\\n') == '1'\nassert solution('CH3OH 1\\nCH4\\n') == '1'\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"C6H6OCH2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"1\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC TRAGICBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY\\n\"\n    \"ABC HAPPYBIRTHDAYCACEY"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nABC HAPPYBIRTHDAYCACEY\n''') == 'PASS'\nassert solution('''\nABC TRAGICBIRTHDAYCACEY\n''') == 'FAIL'\nassert solution('''\nABC HAPPYBIRTHDAY\n''') == 'FAIL'\nassert solution('''\nSECRET SOMECHORESARETOUGH\n''') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"ABC HAPPYBIRTHDAYCACEY\"\"\"\n) == \"PASS\"\nassert solution(\n\"\"\"ABC HAPPYBIRTHDAY\"\"\n) == \"FAIL\"\nassert solution(\n\"\"\"ABC HAPPYBIRTHDAYCACEY\nABC TRAGICBIRTHDAYCACEY\nABC HAPPYBIRTHDAY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY\nABC HAPPYBIRTHDAYCACEY"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\""
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nABC HAPPYBIRTHDAYCACEY\n''') == 'PASS'\nassert solution('''\nABC TRAGICBIRTHDAYCACEY\n''') == 'FAIL'\nassert solution('''\nABC HAPPYBIRTHDAY\n''') == 'FAIL'\nassert solution('''\nSECRET SOMECHORESARETOUGH\n''') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\nimport re\ns = input()\n\ny = re.findall(r'[A-Z][a-z]{2}|\\s|[a-z]{2}', s)"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\""
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"ok so far\"\nassert solution(input()) == \"ok so far\"\nassert solution(input()) == \"ok so far\"\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"([] [])\") == \"]\"\nassert solution(\"()([] ())\") == \"]\"\nassert solution(\"(([]) )\") == \"]\"\nassert solution(\"([] )\") == \"]\"\nassert solution(\"([] [] )\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '] 7'\nassert solution('13') == '] 20'\nassert solution('27') == 'ok so far'\nassert solution('22') == 'ok so far'"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n(([] [] ] )\n''') == '] 7'\nassert solution('''\n13\n''') == 'ok so far'\nassert solution('''\n21\n''') == 'ok so far'\nassert solution('''\n27\n''') == 'ok so far'"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 'ok so far'\nassert solution('2\\n') == 'ok so far'\nassert solution('3\\n') == 'ok so far'\nassert solution('4\\n') == 'ok so far'\nassert solution('5\\n') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n1\n2\n3\n4''') == 'ok so far', '1'\nassert solution('''3\n1\n1\n1\n1''') == 'ok so far', '2'\nassert solution('''5\n1\n1\n1\n1\n1\n1''') == 'ok so far', '3'\n\nassert solution('''1\n1\n2\n1\n2\n2\n2\n2\n2\n3\n1\n2\n2\n3\n3\n3\n3\n3''') == 'ok so far', '4'\n\nassert solution('''15\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '] 7'\nassert solution('13') == 'ok so far'\nassert solution('21') == '] 20'\nassert solution('27') == 'ok so far'"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''([] ([]))''') == '] 0'\nassert solution('''(([] ([]))''') == 'ok so far'\nassert solution('''(([] ([]))''') == 'ok so far'\nassert solution('''([[]])''') == '] 1'\nassert solution('''[{()}]''') == '] 2'\n"
    },
    {
        "number": 4730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n([] [] ]\n''') == '] 6'\nassert solution('''13\n(([] [[]] ())\n''') == 'ok so far'\nassert solution('''21\n[ { { } } ]\n''') == '] 22'\nassert solution('''27\n[ { [[()]] (({})) } ] () {}\n''') == 'ok so far'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\nSample Output 4:\nPlayer 2 lost\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\nSample Output 5:\nPlayer 1 lost\"\"\") == \"Player 2 lost\"\n\"\"\"\nThe code is broken, check your output\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'Fair Game'\nassert solution('3') == 'Player 1 lost'\nassert solution('2') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\napple\") == \"Fair Game\"\nassert solution(\"2\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"3\\napple\\nneat\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''\n3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''\n2\napple\nneat\n''') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\\\n2\napple\nextra\napple\n\"\"\") == \"Player 2 lost\", 'You failed this one.'\nassert solution(\"\"\"\\\n5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\", 'You failed this one.'\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"Fair Game\"\nassert solution(\"3\") == \"Player 1 lost\"\nassert solution(\"2\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Fair Game'\n\n'''"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\napple\\nextra') == 'Player 2 lost'"
    },
    {
        "number": 4731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"Fair Game\"\nassert solution(\"3\") == \"Player 1 lost\"\nassert solution(\"2\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"11\"\nassert solution(\"1000\") == \"100000\"\nassert solution(\"10\") == \"1010\"\nassert solution(\"*\") == \"*\"\nassert solution(\"+\") == \"+\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1000\\n+\\n100\\n') == '100000', 'Case 1'\nassert solution(\n    '10000\\n+\\n10\\n') == '1010', 'Case 2'\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1000*\") == \"100000\"\nassert solution(\"10+\") == \"10010\"\nassert solution(\"10*\") == \"1010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10010\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000') == '100000'\nassert solution('10') == '1010'\nassert solution('+') == '10010'\nassert solution('+') == '10010'\nassert solution('+') == '10010'\n\n1 + 2 * 10 = 20\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 + 2 + 10 = 31\n1 +"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000') == '100000'\nassert solution('10000') == '1010'\nassert solution('10') == '10100'\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000\\n*\\n100\\n') == '100000'\nassert solution('10000\\n+\\n10\\n') == '1010'\nprint('solution() function is working!')\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10010\""
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1000*10 + 1000\") == \"10010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10010\"\nassert solution() == \"1010\"\nassert solution() == \"10101\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 out\\n') == '3'\nassert solution('8 in\\n') == '6'\nassert solution('52 out\\n') == '8'\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\n\"\"\"\nimport sys\n\nnum_cases = int(input())\nnum_shuffle = 0\nwhile num_cases > 0:\n    num_cases -= 1\n    if (num_cases % 2 == 0):\n        shuffle_type = 'out'\n    else:\n        shuffle_type = 'in'\n    if shuffle_type == 'out':\n        num_shuffle += 1\n    else:\n        num_shuffle -= 1\nprint(num_shuffle)\n"
    },
    {
        "number": 4733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\nimport sys\nimport math\nimport os"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''menolaxios mox\nSample Input 2:\nalemaxe maxos\nSample Output 2:\nalemaxexmaxos\n''') == 'alemaxexmaxos'\nassert solution('''pamoli toxes\nSample Input 3:\npamolextoxes\nSample Output 3:\npamolextoxes''') == 'pamolextoxes'\nprint('PASSED!')"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''menolaxios mox\nalemaxe maxos\npamoli toxes''') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint('all tests passed')\n"
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\""
    },
    {
        "number": 4734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2020') == 'yes'\nassert solution('2018') == 'yes'\nassert solution('2019') == 'no'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\""
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"yes\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"yes\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 0 0 0 4 0 0 0 0 4\n4\n''') == '64'\nassert solution('''\n4 0 0 0 4 0 0 0 0 4\n5\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 0 0 0 4 0 0 0 0 4\n4\n''') == '64'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n20\n''') == '10'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n20\n''') == '20'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n0\n''') == '10'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == stdout_1\nassert solution(input_2) == stdout_2\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 0 0 0 4 0 0 0 0 4\n3\n''') == '64'\nassert solution('''\n4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"64\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 0 0 0 4 0 0 0 0 4\n3\n''') == '64'\nassert solution('''\n4 0 0 0 4 0 0 0 0 4\n4\n''') == '0'\nassert solution('''\n10 10 10 20 0 10 10 10 10 10\n4\n''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 0 0 0 4 0 0 0 0 4\n4''') == '64', \"First\"\n\nassert solution('''4 0 0 0 4 0 0 0 0 4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 0 0 0 4 0 0 0 0 4\n4\n3''') == '64'\nassert solution('''10 10 10 20 0 10 10 10 10 10\n4\n3''') == '0'\nassert solution('''10 10 10 20 0 10 10 10 10 10\n4\n4''') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2 330\"\nprint(solution())"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 0') == '2 330'\nassert solution('7 1') == '2 570'\nassert solution('7 2') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999\n''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999\n''') == '2 570'\nassert solution('''7 2\n30 270 995 996 997 998 999\n''') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '2 570'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n4 3 2 1 0') == '2 330'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'''\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'\nassert solution('''7 2\n30 270 995 996 997 998 999''') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 0') == '2 330'\nassert solution('7 1') == '2 570'\nassert solution('7 2') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == '2 570'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 0') == '2 330'\nassert solution('7 1') == '2 570'\nassert solution('7 2') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 0') == '2 330'\nassert solution('7 1') == '2 570'\nassert solution('7 2') == '0 0'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == '1', 'Wrong answer'\nassert solution('abbaabbaabba') == '2', 'Wrong answer'\nassert solution('abcdef') == '6', 'Wrong answer'"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '1'\nassert solution('abc') == '2'\nassert solution('abbc') == '2'\nassert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"6\""
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaaaaaaa\") == \"1\"\nassert solution(\"abbaabbaabba\") == \"2\"\nassert solution(\"abcdef\") == \"6\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaaaaaaa\") == \"1\"\nassert solution(\"abbaabbaabba\") == \"2\"\nassert solution(\"abcdef\") == \"6\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('a') == '1'\nassert solution('aaaaaaaa') == '1'\nassert solution('aababa') == '2'\nassert solution('aabbaaaa') == '2'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n"
    },
    {
        "number": 4738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaaa\") == \"1\"\nassert solution(\"abbaabbaabba\") == \"2\"\nassert solution(\"abcdef\") == \"6\""
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '2'\n\nassert solution('''\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1'\n\nassert solution('''\n3 6\n1 2 3 4 5\n11 12 15 19 24 30\n''') == '0'\n\nprint('All tests passed!')"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '2\\n1 2'\n\nassert solution('''\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1\\n1'\n\nassert solution('''\n3 6\n1 2 3 4 5\n11 12 15 19 24 30\n''') == '0\\n1 2'\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\"\n) == \"2\\n1 2\"\n\nassert solution(\n    \"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\"\n) == \"1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 12\\n\"\n    \"1 2 4 5\\n\"\n    \"6 8 12 18 26 28 30 34 36 37 39 40\"\n    ) == \"2\"\nassert solution(\n    \"5 10\\n\"\n    \"1 2 3 4 5\\n\"\n    \"0 1 2 3 4 5 6 7 8 9\"\n    ) == \"1\"\nassert solution(\n    \"3 6\\n\"\n    \"1 2 3 4 5\\n\"\n    \"11 12 15 19 24 30\"\n    ) == \"1\"\nassert solution(\n    \"7 7\\n\"\n    \"1 2 3 4 5\\n\"\n    \"0 1 2 3 4 5 6 7 8 9\"\n    ) == \"1\"\nassert solution(\n    \"11 10\\n\"\n    \"1 2 3 4 5\\n\"\n    \"11 12 15 19 24 30\"\n    ) == \"1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 10\n1 2 3 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '1 2'\nassert solution('''\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1 2'\nassert solution('''\n3 6\n1 2 3 4 5\n11 12 15 19 24 30\nSample Output 3:\n0\n1\n''') == '1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\nSample Input 4:\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\nSample Output 4:\n1\n1\n''') == '2'\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\nSample Input 5:\n3 6\n1 2 3 4 5\n11 12 15 19 24 30\nSample Output 5:\n0\n1\n1\n''') == '1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == \"2\\n1 2\"\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == \"1\\n1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"1\"\nassert solution(\"4 12\") == \"2\"\nassert solution(\"5 10\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 12') == '2'\nassert solution('5 10') == '1'\nassert solution('3 6') == '1'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5551212'\n    ) == '1', 'Case 1'\nassert solution(\n    '5519876'\n    ) == '0', 'Case 2'\nassert solution(\n    '5055555'\n    ) == '0', 'Case 3'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5551212\\n\") == \"1\"\nassert solution(\"5519876\\n\") == \"0\"\nassert solution(\"5055555\\n\") == \"0\""
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5551212''') == '1'\nassert solution('''5519876''') == '0'\nassert solution('''5055555''') == '0'''\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == '1'\nassert solution(sys.stdin.read()) == '0'\n'''\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5551212''') == '1'\nassert solution('''5519876''') == '0'\nassert solution('''5055555''') == '0'"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"./data/test_data/q_02_test_1.in\") == \"0/1\"\nassert solution(\"./data/test_data/q_02_test_2.in\") == \"5/9\"\nassert solution(\"./data/test_data/q_02_test_3.in\") == \"5/9\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"33/1\") == \"5/9\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"-32/1\") == \"-40/1\""
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''32/1\n33/1\n-40/1''') == '5/9'\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1/1') == '0/1'\nassert solution('1/1') == '0/1'\nassert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"33/1\") == \"5/9\"\nassert solution(\"32/1\") == \"0/1\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n'''"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1/2\n4/5''') == '0/1'\nassert solution('''-2/1\n1/3''') == '1/2'\nassert solution('''-4/1\n-5/6''') == '0/1'\nassert solution('''-5/1\n-6/7''') == '1/2'\nassert solution('''4/1\n-5/7''') == '-1/2'\n"
    },
    {
        "number": 4741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\nCC EGG\\nDD F\\n\") == \"Transposition\"\nassert solution(\"2\\nCC EGG\\nDD F# A\\n\") == \"Retrograde\"\nassert solution(\"2\\nCC EGG\\nDD F# A\\n\") == \"Nonsense\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nC E G\nD F# A\n''') == 'Transposition'\nassert solution('''7\nC C G G A A G\nC C F F D# D# F\n''') == 'Inversion'\nassert solution('''7\nA B C D E F G\nG F E D C B A\n''') == 'Retrograde'\nprint(solution(input()))"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\nC E G\nD F# A\n''') == 'Transposition'\nassert solution('''7\nC C G G A A G\nC C F F D# D# F\n''') == 'Retrograde'\nassert solution('''7\nA B C D E F G\nG F E D C B A\n''') == 'Inversion'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''\n3\nC E G\nD F# A\n'''\n) == 'Transposition'\nassert solution(\n    '''\n7\nC C G G A A G\nC C F F D# D# F\n'''\n) == 'Retrograde'\nassert solution(\n    '''\n7\nA B C D E F G\nG F E D C B A\n'''\n) == 'Inversion'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"Transposition\"\nassert solution(\"4\") == \"Inversion\"\nassert solution(\"7\") == \"Inversion\"\nassert solution(\"8\") == \"Nonsense\"\nassert solution(\"9\") == \"Nonsense\""
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nC E G\\nD F# A\\n') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F\\n') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A\\n') == 'Retrograde'\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\nC E G\nD F# A\n''') == \"Transposition\"\n\nassert solution('''\n7\nC C G G A A G\nC C F F D# D# F\n''') == \"Inversion\"\n\nassert solution('''\n7\nA B C D E F G\nG F E D C B A\n''') == \"Retrograde\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\nA C\\nB D E F G\") == \"Transposition\"\nassert solution(\"3\\nA E G\\nD F# A\\nB C\") == \"Inversion\"\nassert solution(\"6\\nA D F E\\nG F A E G\\nB C D\\nA E C D\") == \"Retrograde\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Transposition'\nassert solution('2') == 'Retrograde'\nassert solution('3') == 'Nonsense'"
    },
    {
        "number": 4742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n\"\n    \"C E G\\n\"\n    \"D F# A\\n\"\n    \"Sample Output 1: Transposition\\n\"\n    \"Sample Output 2: Retrograde\\n\"\n    \"Sample Output 3: Inversion\"\n) == \"Transposition\"\nprint(solution(\"\"\"\n3\nC E G\nD F# A\nSample Output 1: Transposition\n\nSample Output 2: Retrograde\n\nSample Output 3: Inversion\"\"\")\n)\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nassert solution('A-b-c-d-e-f-g-h') == 'Abcdegh'\nassert solution('A-b-c-d-e-f-g-h') == 'Abcdegh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\""
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nassert solution('I am the best') == 'Gah kove bababa'\n\nstdin = 'I love ba-na-na'\nprint(solution(stdin))\nstdin = 'Cat-a-pil-lar'\nprint(solution(stdin))\nstdin = 'Co-ding is the best'\nprint(solution(stdin))\nstdin = 'I am the best'\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'"
    },
    {
        "number": 4743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa', 'Error on input {}'.format(stdin)\nassert solution('Cat-a-pil-lar') == 'Catacillar', 'Error on input {}'.format(stdin)\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh', 'Error on input {}'.format(stdin)"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"14\"\nassert solution(\"1\") == \"6\"\nassert solution(\"5\") == \"16\"\nassert solution(\"10\") == \"36\""
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n''') == '6'\nassert solution('''4\n''') == '16'\nassert solution('''3\n''') == '14'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nprint(solution(input()))\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '8'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '16'\nassert solution('3') == '14'"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'"
    },
    {
        "number": 4744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n''') == '6'\nassert solution('''\n4\n''') == '16'\nassert solution('''\n3\n''') == '14'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''\n5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''\n4 10\n1 3 1 7\n''') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''\n5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''\n4 10\n1 3 1 7\n''') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '2'\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '2'\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''5 10\n3 9 7 1 2\n''') == '4'\nassert solution('''5 10\n2 2 3 1 4\n''') == '4'"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"3\"\nassert solution(\"5 10\") == \"4\"\nassert solution(\"4 10\") == \"4\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''\n5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''\n4 10\n1 3 1 7\n''') == '4'\nassert solution('''\n5 5\n1 2 3 4\n''') == '0'\nassert solution('''\n3 10\n1 3 1 7\n''') == '2'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '2'\nassert solution('4 10') == '4'\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '3'\nassert solution('5 10') == '2'\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestThis(unittest.TestCase):\n    def test_all(self):\n        sys.stdin = StringIO('5 10\\n1 2 3 4 5\\n')\n        print(solution())\n        sys.stdin = StringIO('5 10\\n4 8 1 9 7\\n')\n        print(solution())\n        sys.stdin = StringIO('4 10\\n1 3 1 7\\n')\n        print(solution())\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == 'possible'\nassert solution('2 2') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(test_case_1) == \"possible\"\nassert solution(test_case_2) == \"impossible\"\nassert solution(test_case_3) == \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"possible\"\ninput_data = \"\"\"2 2\n0 1 1\n1 0 0\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'possible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1 2\\n0 1 0\\n1 0 1\\n') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == \"possible\"\nassert solution('1 2\\n1 0 0\\n0 1 0') == \"impossible\"\nassert solution('1 2\\n0 1 0\\n1 0 1') == \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2\\n0 1 1\\n1 0 0\\n\"\n) == \"possible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'possible'\nassert solution('1 2') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'possible'\nassert solution('1 2') == 'impossible'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\""
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n''') == '1.0'\nassert solution('''\n2 3\n''') == '1.75'\nassert solution('''\n6 2\n''') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n2 3\n''') == '1.875'\nassert solution('''\n6 2\n''') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1.5\"\nassert solution(\"6 2\") == \"4.25\"\nassert solution(\"3 1\") == \"1.5\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"7 7\") == \"2.4675\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'"
    },
    {
        "number": 4747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 0 0') == '1 4'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1 0\n2 1 0\n1 1 0\n2 1 0\n''') == '0 0'\nassert solution('''3 2 7\n2 2 7\n1 1 0\n2 2 7\n''') == '1 4'\nassert solution('''3 3 7\n2 2 7\n1 1 0\n2 2 7\n''') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 7\n''') == '1 4'\nprint(solution('''\n3 2 7\n'''))\nassert solution('''\n1 1 0\n''') == '0 0'\nprint(solution('''\n1 1 0\n'''))\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1 0\n4 2 7''') == '0 0'\n"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1 0\n4 2 7\n3 0 0''') == '1 4'''\n\nassert solution('''2 2 2\n2 1 3\n2 2 4''') == '2 4'''\n\nassert solution('''6 7 2\n4 5 6\n2 1 3\n2 4 8''') == '1 10'''\n\nassert solution('''3 1 3\n2 1 3\n2 1 4''') == '1 7'''"
    },
    {
        "number": 4748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '0'\nassert solution('2') == '0'\n\nassert solution('1') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBWB\\nWBWB\\nWBWB\\n\") == \"1\"\nassert solution(\"4\\nBWBWB\\nWBWBWB\\nWBWBWB\\n\") == \"0\""
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\nWBBW\nWBWB\nBWWB\nBWBW\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\nBWWB\nWBWB\nWBBW\nBBWBW\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB') == '1'\nassert solution('4\\nWBWBWW\\nWBBWBW\\nBWBWWB\\nBWWBBW\\nWBWWBB') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\nWBBW\nWBWB\nBWWB\nBWBW\n''') == '1'\nassert solution('''\n4\nBWWB\nWBWB\nWBBW\nBBWBW\n''') == '0'\nassert solution('''\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n''') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == '1', \"Should be 1\"\nassert solution(\"6\") == '0', \"Should be 0\"\nassert solution(\"4\") == '1', \"Should be 1\"\nassert solution(\"10\") == '0', \"Should be 0\"\nassert solution(\"-4\") == '0', \"Should be 0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\nWBWB\nWBWB\nBWWB\nBWBW''') == '1'\nassert solution('''6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB''') == '0'\nassert solution('''10\nBBBWBWBBB\nBBWBWBWBW\nBBBWBWBWB\nBBWBWBWBW\nBBBWBWBWB\nBBWBWBWBW\nBBBWBWBWB\nBBWBWBWBW\nBBBWBWBWB\nBBWBWBWBW\nBBBWBWBWB\nBBWBWBWBW\nBBBWBWBWB''') == '1'\nassert solution('''12\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB''') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\nassert solution('''BWBWB\nWBWBW\nWBBWB\nBBWBW\nBWWBB\nWWBBW''') == '1'\n"
    },
    {
        "number": 4749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n') == '1'\nassert solution('4\\nBWWB\\nWBWB\\nWBBW\\nBWBW\\n') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\\n') == '0'"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '3 4'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1'\nassert solution('6\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3') == '3 4'\nassert solution('10\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3') == '3 7'\nassert solution('11\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3') == '3 7'\nassert solution('6\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3\\n1 4 5 8\\n1 2 1 3') == '3 4'\n\n'''\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 2 1 2'\n    ) == '2 1'\n\nassert solution(\n    '2 6 3 4'\n    ) == '3 4'\n\nassert solution(\n    '2 4 1 3'\n    ) == '3 2'\n\nassert solution(\n    '1 2 1 3'\n    ) == '2 1'\n\nassert solution(\n    '1 4 5 8'\n    ) == '3 7'"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '3 4\\n3 2\\n1 2\\n3 7'"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 2\\n3 4\""
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''') == '2 3'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1 2') == '2 1'\nassert solution('2 6 3 4') == '3 4'\nassert solution('2 4 1 3') == '3 2'\nassert solution('1 2 1 3') == '2 1'\nassert solution('1 4 5 8') == '7 8'\n"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8''') == '3 7'"
    },
    {
        "number": 4750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n''') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7\\n'''\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'true'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3,2,0,-4]) == 'true'\nassert solution([1,2]) == 'true'\nassert solution([1]) == 'false'\n\"\"\""
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(**TEST_INPUTS[0]) == \"true\"\nassert solution(**TEST_INPUTS[1]) == \"false\"\n\"\"\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"[1,2]\") == \"true\"\nassert solution(\"[1,2,3]\") == \"true\"\nassert solution(\"[2,1]\") == \"true\"\nassert solution(\"[2,1,3,5]\") == \"false\"\nassert solution(\"[2,1,3,5,10]\") == \"true\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 2, 0, -4]) == 'true'\nassert solution([1, 2]) == 'true'\nassert solution([1]) == 'true'\nassert solution([1,2]) == 'false'\nassert solution([1,2,3,4,5,6]) == 'false'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == 'true'\nassert solution('[-1,0,1]') == 'false'\nassert solution('[0,-1]') == 'true'\nassert solution('[0,1,-1]') == 'true'\nassert solution('[0,1,-1,1]') == 'true'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('[[3,2,0,-4],[1],[2]]') == 'true'\nassert solution('[[1,2],[0,1],[0,2]]') == 'true'\nassert solution('[[1,2],[0,2]]') == 'false'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3,2,0,-4]) == 'true'\nassert solution([1,2]) == 'true'\nassert solution([1]) == 'true'\nassert solution([]) == 'false'\nassert solution([-1,2,-1]) == 'true'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n[1,2,3,4]\n0\n''') == 'true'\nassert solution('''\n[-1,2,3,-4]\n0\n''') == 'true'\nassert solution('''\n[1,2]\n0\n''') == 'false'\nassert solution('''\n[1]\n0\n''') == 'false'\nassert solution('''\n[]\n-1\n''') == 'false'\n"
    },
    {
        "number": 4751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3,2,0,-4]) == \"true\"\nassert solution([1,2]) == \"true\"\nassert solution([1]) == \"false\"\nassert solution(\"\") == \"false\""
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '2, 7, 11, 15\\n'\n) == ['0', '1']\nassert solution(\n    '1, 2, 4, 8\\n'\n) == ['1', '2']\nassert solution(\n    '1, 2, 4, 8\\n'\n) == ['1', '2']\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 4 1') == '0 1'\nprint('PASSED!')\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n') == '0\\n1\\n'\n\nFor custom testing purposes you may use the following helper function"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"0,1\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    5\n    2\n    7\n    11\n    15\n    '''\n    ) == '0 1'\n\nassert solution(\n    '''\n    6\n    2\n    3\n    4\n    5\n    7\n    '''\n    ) == '1 2'\n\nassert solution(\n    '''\n    7\n    1\n    2\n    3\n    4\n    5\n    6\n    '''\n    ) == '0 1'\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == '0 1'\nassert solution(\"1 1 2 2 3 4\") == '1 2'\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        self.sum = 0\n\n    def solve(self, nums: List[int], target: int) -> str:\n        self.sum = sum(nums)\n        if self.sum < target or (self.sum == target and len(nums)!= 2):\n            return -1\n\n        for i, num in enumerate(nums):\n            if (self.sum - num) == target:\n                return \",\".join([str(i), str(i+1)])\n\n        return -1\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n5\\n7\\n') == '0 1'\nprint('PASSED!')\n\"\"\"\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n\n    def __init__(self):\n        self.prev_sum = float('-inf')\n        self.nums = []\n        self.target = 0\n\n    def sum_to_target(self, nums: List[int], target: int) -> List[int]:\n        self.target = target\n        self.nums = nums\n\n        for i in range(len(self.nums)):\n            self.prev_sum = self.prev_sum + self.nums[i]\n            if self.prev_sum == target:\n                return [i, nums.index(self.nums[i], i+1)]\n            if self.prev_sum < target:\n                continue\n            else:\n                self.prev_sum = self.prev_sum - self.nums[i]\n                if self.prev_sum == target:\n                    return [i, nums.index(self.nums[i], i+1)]\n\n        return []\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self) -> None:\n        s = Solution()\n        self.assertEqual(['0 1'], s.sum_to_target([2, 7, 11, 15], 9))\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2, 7, 11, 15\") == \"0 1\"\nassert solution(\"3, 2, 4, 6\") == \"1 2\"\nassert solution(\"5, 3, 8, 10\") == \"0 1\"\nassert solution(\"5, 4, 7, 10\") == \"0 2\"\nassert solution(\"10, 9, 8, 7\") == \"0 1\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([2, 7, 11, 15]) == '0 1'\nassert solution([1, 1, 2, 2]) == '0 1 2'\nassert solution([1, 1, 2, 2]) == '1 1 2'\n"
    },
    {
        "number": 4752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"0 1\"\nassert solution(input) == \"0 1\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '4'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n1\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'"
    },
    {
        "number": 4753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '0', \"Wrong answer for input '1'\"\nassert solution('2\\n') == '1', \"Wrong answer for input '2'\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n1 2 3\n''') == '4'\nassert solution('''\n1\n2\n3\n4\n5\n''') == 'impossible'\nassert solution('''\n6\n2\n1 4 8 5\n''') == '3'\nassert solution('''\n1\n5\n1 5\n''') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n1 2 2 1''') == '4'\nassert solution('''1\n3 7''') == 'impossible'\nassert solution('''2\n5 2 5 3 2''') == '4'\nassert solution('''2\n6 6 5 5 5''') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n1\\n') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 2, 2, 1]) == \"4\"\nassert solution([3, 7]) == \"impossible\""
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1, 2, 2, 1]) == '4'\nassert solution([1, 3, 7]) == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3 7\n''') == 'impossible'\nassert solution('''\n1\n2 3 4 5\n''') == '4'\nassert solution('''\n1\n2 3 4 5\n''') == 'impossible'\nassert solution('''\n3\n1 1 1\n''') == 'impossible'\nassert solution('''\n3\n1 1 2\n''') == '4'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"123450995 1\") == \"123451000\"\nassert solution(\"2041 -1\") == \"2041\""
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"123450995 1\") == \"123451000\"\nassert solution(\"184 1\") == \"180\"\nassert solution(\"123451000\") == \"123450995\"\nassert solution(\"12345\") == \"1234\"\nassert solution(\"123\") == \"12\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('14 1') == '13'\nassert solution('1000000000 1') == '1000000000'"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"123450995 1\") == \"123451000\"\nassert solution(\"184 1\") == \"180\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1') == '5'\nassert solution('1 1') == '0'\nassert solution('5 5') == '4'\nassert solution('1 0') == '1'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '180'\nassert solution('12345995 1') == '123451000'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('12345995 1') == '123451000'\nassert solution('45') == '45'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n184 1\n''') == '180'\nassert solution('''\n123450995 1\n''') == '123451000'\n"
    },
    {
        "number": 4755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"123450995 1\") == \"123451000\"\nassert solution(\"10 10000\") == \"10000\"\nassert solution(\"10101\") == \"101010\""
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.000000'\nassert solution('2') == '0.000000'\nassert solution('3') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.000000'\nassert solution('1 1') == '0.000000'\nassert solution('2 2') == '0.000000'\nassert solution('3 3') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n2 2\n3 3\n''') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n2 2\n3 3\n''') == '0.000000'\nassert solution('''\n3\n0 1\n1 0\n1 1\n''') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1\\n') == '0.500000'\nassert solution('3\\n0 1\\n1 0\\n1 1\\n') == '0.000000'\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\nimport math\nfrom math import inf, nan\n\nclass TestPractice(unittest.TestCase):\n    def test_basics(self):\n        with StringIO() as buf, redirect_stdout(buf):\n            solution('2\\n1 1\\n2 2')\n            output = buf.getvalue()\n        self.assertEqual(output, '0.000000\\n')\n        with StringIO() as buf, redirect_stdout(buf):\n            solution('3\\n0 1\\n1 0\\n1 1\\n')\n            output = buf.getvalue()\n        self.assertEqual(output, '0.500000\\n')"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1') == '0.000000'\nassert solution('2\\n0 1') == '0.000000'\nassert solution('3\\n1 1') == '0.000000'\nassert solution('3\\n0 1') == '0.000000'\nassert solution('3\\n1 1') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.000000'\nassert solution('3') == '0.000000'\nassert solution('4') == '0.000000'\nassert solution('5') == '0.000000'\nassert solution('6') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.000000'\nassert solution('3\\n0 0\\n1 0\\n1 1') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n2 2\n3 3\n''') == '0.000000'\nassert solution('''\n2 1\n3 2\n4 4\n''') == '-0.75000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n3 1\n2 2\n1 2\n1 0\n\"\"\") == \"0.000000\"\n\nassert solution(\"\"\"\n5\n3 2\n4 2\n3 1\n2 2\n1 2\n\"\"\") == \"1.000000\"\n\nassert solution(\"\"\"\n2\n2 5\n1 2\n\"\"\") == \"2.500000\"\n\nassert solution(\"\"\"\n3\n4 2\n4 1\n3 1\n\"\"\") == \"1.500000\"\n\nassert solution(\"\"\"\n5\n4 1\n4 2\n3 2\n2 2\n1 2\n\"\"\") == \"2.000000\""
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2 4'\nassert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2 4'\nassert solution('''\n8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '1 2 6'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2\\n4\\n8\\n'\nassert solution('''\n6\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '1\\n2\\n4\\n8\\n'\nassert solution('''\n8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '1\\n2\\n6\\n8\\n'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2\\n4 2\\n6 8\\n8 4\\n'''"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2 4'\nassert solution('''\n8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '1 2 6 4'"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '1 2 4'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1') == '1 2\\n2 4\\n4 2\\n'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1 2\\n2 6\\n4 2\\n6 8\\n'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 2 4\\n1 2 4\\n1 2 4\\n1 2 4\""
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 1 2\n3 2 3 4\n3 4 2 1\n4 2 6 8 1\nSample Input 3:\n8\n3\n1 2 3 4 5\n2 4 6 8 7\n3 7 8\n2 6 2\n4 2 6 8 1\nSample Output 3:\n1\n2\n8\n4\n''') == '1 2 3 4 5\\n2 4 6 8 7\\n3 7 8\\n2 6 2\\n4 2 6 8 1'\n"
    },
    {
        "number": 4757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1''') == '1 2 4'\nassert solution('''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1''') == '1 2 6 4'\nassert solution('''5\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n4 3 2 1''') == '1 2 4 3'\nassert solution('''7\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n5 1 2 3''') == '1 2 6 4 5'\nassert solution('''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n5 1 2 3''') == '1 2 6 4 5'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 5') == '60'\nassert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\nassert solution('2 1 1') == '2'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4 5\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n5 6 7 8 9''') == '60'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '60'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n3\n4\n5\n6\n7\n''') == '60'\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == output_string, \"Should be True\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"60\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == \"0\"\nassert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4 5''') == '60'\nassert solution('''2 2 2''') == '8'''\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"0.6\"\nassert solution(\"1 2 0 3\") == \"0.3333333333333333\"\nassert solution(\"1 -2 3\") == \"0.3333333333333333\"\nassert solution(\"1 -2 0 3\") == \"0.3333333333333333\"\nassert solution(\"1 -2 0 3\") == \"0.3333333333333333\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 0 2\n''') == '1.6666666666666667'\nassert solution('''\n3\n1 -1 4\n''') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n3 0 2\n''') == '1.6666666666666667'\nassert solution('''\n3\n1 -1 4\n''') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"2.0\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n2\n1 0 2\n''') == '1.6000000000000006'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 0 2\nSample Output 2:\n1.6666666666666667\n''') == '1.6667'"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1.6'\nassert solution('5') == '2.2'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 0 2\n''') == '1.6666666666666667'\nprint(solution('''\n3\n1 -1 4\n'''))\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 0 2\n''') == '1.6666666666666667'\nassert solution('''\n3\n1 -1 4\n''') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0.1'\nassert solution('100') == '0.01'\nassert solution('1000') == '0.001'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('5 6') == '6'\nassert solution('8 5') == '4'\nassert solution('7 3') == '6'\nassert solution('3 6') == '6'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '4'\nassert solution('3 9') == '2'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('20') == '7'\nassert solution('0') == '0'\nassert solution('7') == '7'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '5'\nassert solution('7') == '8'\nassert solution('15') == '7'\nassert solution('12') == '6'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n6') == '7'\nassert solution('7\\n4') == '7'\nassert solution('5\\n1') == '5'\nassert solution('5\\n3') == '5'\nassert solution('5\\n7') == '7'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2') == '5'\nassert solution('5\\n3') == '4'\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '9'\n\nprint('Tests Successful!')\ninput()\n\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().strip().split())\n\nprimes = []\n\nfor num in range(2, N + 1):\n    for prime in primes:\n        if num % prime == 0:\n            break\n    else:\n        primes.append(num)\n\nfor prime in primes:\n    num = 0\n    while num <= N:\n        if num % prime == 0:\n            num += 1\n        else:\n            if num - 1 < 0 or num - 1 % prime!= 0:\n                num += 1\n            else:\n                break\n    else:\n        print(num)\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '6'\nassert solution('6') == '6'\n\n'''\n"
    },
    {
        "number": 4760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"12\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"1 2 3\"\nassert solution(\"1 4\") == \"1 3 4\"\nassert solution(\"3 2 1\") == \"2 3 1\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nassert solution
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('198765 198769') == '1'\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 123864 123865') == '1'\nassert solution('198765 198769') == '0'\nassert solution('123864 123865') == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3 4 5 6 7 8 9\n''') == '0'\nassert solution('''\n101112 131415 161718 1919\n''') == '1'\nassert solution('''\n123864 123865\n''') == '1'\nassert solution('''\n198765 198769\n''') == '0'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n''') == '0.50000000'\nprint('You are not a human. Nice work, bye!')\n\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n\"\"\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0.50000000\"\nassert solution(\"3\") == \"0.66666667\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\nprint('Congratulations! All test cases passed.')\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.50000000'\nassert solution('3') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0.50000000'\nassert solution('2') == '0.66666667'\nassert solution('3') == '0.666666667'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('180') =='single 20'\nassert solution('96') == 'triple 19'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''10\n1\n10\n20\n10\n20\n10\n20\n10\n10\n10\n20\n10\n10\n10\n20\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n20\n10\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'triple 19'\nassert solution('121') =='single 10'\nassert solution('120') == 'triple 20'\nassert solution('10') == 'impossible'\nassert solution('125') == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) in (\n    'impossible',\n    'triple 19',\n    'triple 19',\n    'triple 19',\n    'triple 20',\n    'triple 20',\n    'triple 20',\n    'triple 20',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',\n    'impossible',"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('180') == \"triple 20\"\nassert solution('96') == \"triple 19\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\"\nassert solution(\"\") == \"impossible\"\nassert solution(\"123\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2 2\n5 3 4''') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 1') == '36', solution('2 4 1')\nassert solution('5 2 2') == '36', solution('5 2 2')"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2 2\") == \"36\"\nassert solution(\"5 5 3\") == \"55\"\nassert solution(\"4 5 2\") == \"40\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 4 7\\n\") == \"168\"\nassert solution(\"5 2 2\\n\") == \"36\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2 2''') == '36'\nassert solution('''10 4 7''') == '168'\nassert solution('''20 10 20''') == '168'\nassert solution('''20 20 20''') == '10000000'\nassert solution('''5 1 5''') == '40'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\") == \"36\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"10 10 10\") == \"100\"\nassert solution(\"50 50 50\") == \"250\"\nassert solution(\"5 5 5\") == \"25\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 2\n\nSample Input 3:\n6 2 7\nSample Output 3:\n21\n''') == '21', 'First'\nassert solution('''10 4 7\n\nSample Input 4:\n5 2 2\nSample Output 4:\n168\n''') == '168', 'Second'\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 3, 10, 3, 8, 5, 8, 5]) == 7\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '3 10\\n3 8\\n5 8'\n    ) == '1'"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3 10\\n5 8\") == \"7\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 5\\n10 5\\n') == '2'\nassert solution('1 4\\n5 6\\n2 4\\n') == '1'\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 10\\n5 8') == '7'\nassert solution('2\\n3 8\\n5 8') == '1'"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 10\n3 10\n5 8\n8 4\n\"\"\") == '1000000000'\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n3 8\n5 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n3 3\n2 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n3 7\n5 7\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n3 8\n5 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n3 10\n\"\"\") == \"7\"\nassert solution(\"\"\"\n5\n3 8\n5 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n2 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n8\n1 1\n3 3\n6 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == ''\nassert solution('3') == 'raise your left hand.'"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') =='smile'\nassert solution('2') == 'raise your right hand'\nassert solution('3') == 'raise your left hand'\n'''"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nSimon says touch your nose.\nStop touching your nose.\n\"\"\") == \"touch your nose.\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == \"smile\"\nassert solution('3') == \"raise your right hand\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\nSample Output 2:\\n raise your right hand.\\n raise your left hand.\\n') =='raise your right hand.\\n raise your left hand.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\nSample Output 2:\\n raise your right hand.\\n raise your left hand.\\n') =='raise your right hand.\\n raise your left hand.\\n'\nassert solution('4\\nSimon says make a pillow.\\nSimon says make a cat.\\nSimon says make a cat.\\nSimon says make a cat.\\n') =='make a cat.\\n make a cat.\\n make a cat.\\n make a cat.\\n'\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') =='smile'\nassert solution('3') == 'raise your right hand'"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\"\nassert solution(\"2\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\""
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Simon says smile.'\nassert solution('2') == 'Lower your right hand.'\nassert solution('3') == 'Raise your right hand.'\n"
    },
    {
        "number": 4766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') =='raise your right hand.\\n raise your left hand.'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 0 4 6 10 12 16 18\n''') == '5'\n\nassert solution('''\n1 2 4 6 10 12 16 18\n''') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('2 1 3 4 6 10 12 16 18') == '7'\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '3'\nassert solution('4 1') == '2'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nA\\nA\\nG\\nT\\n') == '2'\nassert solution('4\\nAA\\nAT\\nTT\\nTC\\n') == '3'\nassert solution('4\\nAA\\nAT\\nTT\\nTC\\n') == '2'"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nAA\\nAT\\nTT\\nTC') == '3'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\nA\\nA\\nG\\nT') == '2'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"7 1\") == \"6\"\nassert solution(\"8 1\") == \"7\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"1 2 3\""
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT\\n') == '2'\n"
    },
    {
        "number": 4768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaa\") == \"a\"\nassert solution(\"ab\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-'"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"aba\n\n\"\"\") == \"a\"\n\nassert solution(\"\"\"abba\n\n\"\"\") == \"a\"\n\nassert solution(\"\"\"aaaa\n\n\"\"\") == \"a\"\n\nassert solution(\"\"\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaaa') == 'a', 'Solution is broken'\nassert solution('ab') == -1, 'Solution is broken'\n"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''a\nb\nc\n''') == 'a'\nassert solution('''aa\nbb\ncc\n''') == -1\nassert solution('''aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-'\nassert solution('abbb') == 'b'"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nprint(solution(input()))\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == 'Dr. Chaz will have 10 pieces of chicken left over!'\nassert solution('1') == 'Dr. Chaz needs 1 more piece[s] of chicken!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('''\n2 3\n''') == 'Dr. Chaz will have 1 piece of chicken left over!'"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 100\n2 3\n''') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('''20 200\n3 3\n''') == 'Dr. Chaz will have 120 pieces of chicken left over!'"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('20 100\\n') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3\\n') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('10 5\\n') == 'Dr. Chaz needs 5 more piece[s] of chicken!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution('100 1') == \"Dr. Chaz will have 80 pieces of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 100\n2 3\n''') == 'Dr. Chaz needs 1 more piece[s] of chicken!'\nassert solution('''20 100\n20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"20 100\\n\"\n    \"2 3\"\n) == \"Dr. Chaz will have 1 piece of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''20 100\n2 3\n''') == 'Dr. Chaz needs 1 more piece of chicken!'''\nassert solution('''3 2\n3 2\n''') == 'Dr. Chaz has enough chicken and will have 2 piece[s] of chicken left over!'''"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 4\n3 1 4\n4 5\n4 5 5\n''') == '0'\nassert solution('''\n2\n3\n2 1\n3 1\n''') == '2'\n\nassert solution('''\n4\n5 5\n5 1 4\n3 1 4\n2 2 4\n''') == '-2'\n\nassert solution('''\n4\n4 1 2\n3 3 3\n4 4 2\n3 3 2\n''') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 10\n1 1 2\n2 2 2\n3 2 1''') == '0'\nassert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '1'\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == '-2'\nprint('All tests passed!')"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n1 1 2\n2 2 2\n3 2 1\n''') == '-2'\n\nassert solution('''\n3 20\n1 1 1\n5 2 3\n5 2 1\n''') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1\\n') == '-2'\nassert solution('3 100\\n1 1 2\\n2 2 2\\n3 2 1\\n') == '0'\nassert solution('5 10\\n1 1 1\\n5 2 3\\n5 2 1\\n') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == '0'\n\n'''"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 1\n1 2\n2 2\n''') == '0'\nassert solution('''\n3 10\n1 1 2\n2 2 2\n3 2 1\n''') == '-2'\nassert solution('''\n1 10\n1 1\n1 2\n2 2\n''') == '2'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 3\n1 1 1\n5 2 3\n5 2 1\nSample Input 3:\n9 3\n3 1 2\n2 2 1\n4 3 4\n1 3 3\n1 4 4\n1 3 2\n2 4 1\nSample Output 3:\n5''') == '0'\nassert solution('''7 4\n4 1 2\n1 1 1\n2 2 3\n2 3 2\n2 2 1\n1 3 3\n1 2 2\nSample Input 4:\n5 20\n1 3 5\n2 1 3\n3 3 2\n4 4 1\nSample Output 4:\n-4\n''') == '4''')"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '-2'\nassert solution('3 10') == '-2'\nassert solution('3 1') == '0'\nassert solution('3 2') == '1'\nassert solution('3 2 3') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == '0'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala'\n\nassert solution('''\n4 4\nluka\no#a#\nkula\ni#a#\n''') == 'as'\n'''"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"as\""
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == 'a'\nassert solution('3 3') == 'ab'\nassert solution('4 4') == 'kala'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"asa\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'kala', 'First sample test'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as', 'Second sample test'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'i', 'Third sample test'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'k', 'Fourth sample test'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'luka', 'Fifth sample test'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\nlupa\no#a#\nkula\ni#a#\n''') == 'lupa'\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"kala\"\nassert solution(\"4 4\") == \"as\""
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solutionn--------\n\nSample Input 3:\n1 1\nfoo\nbar\nfoo\nbar\n--------\n\nSample Output 3:\nfoo\nbar\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'kala'"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSWE\") == \"4\"\nassert solution(\"NESW\") == \"3\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"WNWNEENWNEENWNEENENW\") == \"M\"\nassert solution(\"NESWESWESWESWESW\") == \"E\"\nassert solution(\"NESWESWESWESWESW\") == \"E\""
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"NNNNSEEW\") == \"10\"\n\nassert solution(\"NSWEEEW\") == \"6\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"NSEW\") == \"4\"\nassert solution(\"NNWWWWWWWWWW\") == \"15\"\nassert solution(\"NNWWWWWWWWWW\") == \"18\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NSEW') == '4'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input(\"\")) == \"13\"\nassert solution(input(\"NSEW\")) == \"4\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"NNEEWWWWNEENWEENENWW\") == \"10\"\nprint(solution(\"NNEEWWWWNEENWEENENWW\"))\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('WN') == 'WNMWMME'\n"
    },
    {
        "number": 4773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''NSEW\n                    NSEW\n                    NSEW\n                    NSEW\n                    S''') == \"5\"\nassert solution('''S\n                    N\n                    E\n                    N\n                    E\n                    W''') == \"5\"\nassert solution('''NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n                    NNNNNNNNNNNNNNN\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2'\nassert solution('1') == 'problems ahead'\nassert solution('1 1 1 1') == 'problems ahead'\n\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2 3 4\n    1 2 3 4''') == '1 - 2 = 3 - 4'\nassert solution('''0 4 2 2\n    0 4 2 2''') == '0 * 4 = 2 - 2'"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\"\nassert solution(\"1 2 1 2\") == \"1 / 2 = 3 / 2\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2 3 4\n1 / 2 = 3 / 4''') == '1 / 2 = 3 / 4'\nassert solution('''0 4 2 2\n0 + 4 = 2 * 2''') == '0 * 4 = 2 - 2'\nassert solution('''0 5 - 2 2\n0 + 5 = 2 * 2''') == '0 * 5 = 2 - 2'\nassert solution('''1 2 1 2\n1 * 2 = 2 * 2''') == '1 * 2 = 2 * 2'\nassert solution('''1 2 4 4\n1 - 2 = 3 - 4\n1 + 2 = 3 + 4\n1 * 2 = 3 * 4\n1 + 2 = 3 + 4\n1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n1 / 2 = 3 / 4''') == '1 * 2 = 3 * 4'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2 3 4\n1 - 2 = 3 - 4''') == '1 - 2 = 3 - 4'\nassert solution('''0 4 2 2\n0 * 4 = 2 - 2''') == '0 * 4 = 2 - 2'\n\n---\n\nSample Input 1:\n1 2 3 4\nSample Output 1:\n1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\nSample Input 2:\n0 4 2 2\nSample Output 2:\n0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3 4\") == \"1 - 2 = 3 - 4\", \"First Example\"\nassert solution(\n    \"0 4 2 2\") == \"0 * 4 = 2 - 2\", \"Second Example\"\nassert solution(\n    \"9 9 8 8\") == \"9 * 9 = 81 - 8\", \"Third Example\"\nassert solution(\n    \"4 4 4 4\") == \"4 * 4 = 16 - 4\", \"Forth Example\"\nassert solution(\n    \"3 4 3 4\") == \"3 * 4 = 12 - 4\", \"Fifth Example\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\""
    },
    {
        "number": 4774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n', 'Failed test case'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''MAMA TATA''') == '''.T..\nMAMA\n.T..\n.A..'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\nABBA\nCCBB\n\"\"\") == \"\"\"4\nC\nB\nABBA\n.B..\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..\\n'"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\nprint(solution(input()))"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''BANANA PIDZAMA\nSAM\nBAN\nMAN\n''') == '''.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('BANANA PIDZAMA') == '...P....\\n.I....\\n.D....\\n.Z....\\nBANANA'\nassert solution('MAMA TATA') == '...T..\\nMAMA\\n.T..\\n.A..'"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''BANANA PIDZAMA\nSAMUEL MUNNI''') == '.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....''')\nassert solution('''MAMA TATA\nSAMUEL MUNNI''') == '.T..\nMAMA\n.T..\n.A..''')\n"
    },
    {
        "number": 4775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....'\nassert solution('MAMA TATA') == '.M....'\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 365\\n20 28') == '365'\nassert solution('10\\n1 365\\n20 28') == '365'\nassert solution('3\\n10 14\\n13 17\\n25 26') == '10'"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n10 14\n13 17\n25 26\n\"\"\") == \"10\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n10 14\n13 17\n25 26\n\"\"\") == \"10\"\nassert solution(\"\"\"\n2\n1 365\n20 28\n\"\"\") == \"365\"\nassert solution(\"\"\"\n1 1\n10\n\"\"\") == \"1\""
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 365\\n20 28\") == \"365\"\nassert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == '10'\nassert solution('''2\n1 365\n20 28''') == '365'\nassert solution('''4\n10 14\n13 17\n25 26\n2 200\n1 367''') == '367'"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '365'\nassert solution('3') == '10'\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"365\"\nassert solution(\"2\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\"\nassert solution(input_string=\"\"\"\n    3\n    10 14\n    13 17\n    25 26\n    \"\"\"\n) == \"10\"\nassert solution(input_string=\"\"\"\n    2\n    1 365\n    20 28\n    \"\"\"\n) == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '10'\nassert solution('1') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26\n''') == '10'\nassert solution('''\n2\n1 365\n20 28\n''') == '365'\nassert solution('''\n3\n10 14\n13 17\n25 26\n''') == '365'\nassert solution('''\n2\n1 365\n20 28\n''') == '365'\nassert solution('''\n3\n10 14\n13 17\n25 26\n''') == '365'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '2 3'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 3'\nassert solution('4') == '1 2'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\""
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '1 2'\nprint(solution(input()))\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n"
    },
    {
        "number": 4777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\\n\"\nassert solution(\"4 4\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"B 100 49\"\nassert solution(\"10 5\") == \"A 1 197\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"A 0 99\"\nassert solution(\"5 3\") == \"B 100 49\"\nassert solution(\"4 4\") == \"A 0 99\"\nassert solution(\"10 10\") == \"A 1 197\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == 'B 100 49'\nassert solution('4 4') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == 'B 100 49'\nassert solution('4 4') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n''') == 'B 100 49'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == 'B 100 49'\nassert solution('4 4') == 'A 0 99'\nassert solution('6 9') == 'A 0 99'\nassert solution('3 4') == 'A 0 99'\nassert solution('5 5') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == 'A 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == 'B 100 49'\nassert solution('4 4') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\"\nassert solution(\"5 5\\n1 100 100\\n2 100 100\\n3 100 100\\n4 100 100\\n3 100 100\") == \"A 0 99\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n4') == '1'\nassert solution('2\\n2\\n1') == '3'\nassert solution('3\\n3\\n2') == '6'\nassert solution('4\\n5\\n2\\n3') == '10'\nassert solution('5\\n10\\n10\\n1\\n1\\n1') == '8'"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"168\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '168'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('4') == '3'\nassert solution('3') == '5'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '16'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '9'\nassert solution('2') == '3'\nassert solution('1') == '2'\nassert solution('4') == '8'\nassert solution('10') == '81'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"168\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '168'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('4') == '3'\nassert solution('3') == '5'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '168'\nassert solution('5') == '168'\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2\n1\n4\n3\n5\n''') == '168'\nprint(\"You're done!\")\n"
    },
    {
        "number": 4779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '168'\nassert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    3 3\n    ABC\n    DEF\n    0\n    ''') == 'CBADEF'\n    assert solution('''\n    3 3\n    ABC\n    DEF\n    2\n    ''') == 'CDBEAF'\n''') == 'CDBEAF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\nABC\nDEF\n2\n''') == 'CBADEF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n0\n''') == 'CBADEF'\nassert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CDBEAF'\nassert solution('''\n1 1\nAC\nDEF\n2\n''') == 'ACDEF'\nassert solution('''\n3 3\nABC\nDEF\n4\n''') == 'BCDEF'\nassert solution('''\n1 1\nAC\nDEF\n''') == 'ACDEF'\n''')\n\nfrom sys import stdin\n\nn1, n2 = map(int, stdin.readline().split())\nt = int(stdin.readline())"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n0\n''') == 'CBADEF', 'First'\nassert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CDBEAF', 'Second'\nassert solution('''\n3 5\nAAB\nDEE\n999\n''') == 'AAAADEEE', 'Third'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nAB\\nCD\\nEF\\n') == 'EFDCABC'\nassert solution('2\\nAB\\nCD\\nEF\\n') == 'DCABCEF'\nassert solution('3\\nABC\\nDEF\\n') == 'EFDCADC'\nassert solution('4\\nABC\\nDEF\\n') == 'CABDEFDC'\nassert solution('5\\nABCDEF\\nGH\\n') == 'DEFGHCA'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\nassert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n1\n''') == \"CBADEF\", \"First\"\nassert solution('''\n3 3\nABC\nDEF\n2\n''') == \"CDBEAF\", \"Second\""
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3 3\\n'\n    'ABC\\n'\n    'DEF\\n'\n    '0\\n'\n    ) == 'CBADEF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0\\n') == 'CBADEF', \"Sample Test 1 Failed\"\nassert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF', \"Sample Test 2 Failed\"\nprint('ALL TEST CASES PASSED')"
    },
    {
        "number": 4780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\nABC\nDEF\n2\n''') == 'CBADEF'\nassert solution('''\n3 3\nABC\nDEF\n0\n''') == 'CDBEAF'\nassert solution('''\n1\nB\nA\n''') == 'ABAB'\nassert solution('''\n2\nAB\nAC\n''') == 'BAABC'\nassert solution('''\n1\nA\n''') == 'A'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"4\"\nassert solution(\"\"\"2\n3\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n') == '1'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n') == '4'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n') == '1'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4', 'You are not allowed to import any modules!'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\\n') == '4'"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\\n') == '4'\nassert solution('2\\n3\\n50 T\\n50 T\\n30 T\\n') == '2'\n"
    },
    {
        "number": 4781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2\n3 4\n5 6\n7 8''') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n''') == '6'\nassert solution('''6 8\n''') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n\") == \"1\\n\"\nassert solution(\"2 2\\n\") == \"2\\n\"\nassert solution(\"3 1\\n\") == \"2\\n\"\nassert solution(\"4 1\\n\") == \"2\\n\"\nassert solution(\"5 3\\n\") == \"5\\n\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n1 2\n2 3\n2 4\n3 1\n2 5''') == '6'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\nassert solution([5, 2, 3, 4, 6, 1]) == \"22\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"6\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\nprint(solution(input()))\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 8') == '22'\nassert solution('6 9') == '12'\nassert solution('10 100') == '120000'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\nassert solution('10 20') == '60'\n"
    },
    {
        "number": 4782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '5'\nassert solution('5 2') == '5'\nassert solution('5 3') == '6'\nassert solution('6 3') == '22'\nassert solution('6 8') == '23'\nprint('All test cases passed.')\n\n\n-----Explanation-----\nThe first test case shows that the king can upgrade all the roads to get to all cities. The second test case shows that the king can upgrade just one road. This road has to be a green road. Hence the cost is equal to 2. The third test case shows that the king can upgrade just four roads. He can achieve that by connecting two roads of green color and a road of blue color. Hence the cost is 18. The fourth test case shows that the king can upgrade five roads. He can achieve this by connecting two roads of blue color and a road of green color. Hence the cost is 24. Finally, the sixth test case shows that the king can upgrade six roads. Here the cost is 22.\n'''"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n3 5 6\\n1 7 8\\n\") == \"1\"\nassert solution(\"5 5\\n4 3 2 1\\n1 2 3 4 5\\n\") == \"0\"\nassert solution(\"3 2\\n5 1 5 1\\n6 2 6 6 6\\n\") == \"4\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 2 3\n6 5 4\n7 8 9\n''') == '0'\nassert solution('''\n5 4\n4 3 2 1\n2 8 9 6\n7 8 9 4\n2 1 5\n2 9 7\n''') == '2'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('1 4') == '0'\nassert solution('2 2 2') == '0'\nassert solution('6 5 4') == '1'\nassert solution('7 8 9') == '2'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4') == '0'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0\"\nassert solution(input_string=\"\"\"\n2 2\n1 2 3\n4 4 3 2\n\"\"\") == \"0\"\nassert solution(input_string=\"\"\"\n2 2\n1 2 3\n4 4 3 2\n\"\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 4') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4\\n4 3 2 1') == '0'\nassert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9\\n') == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2 3\n6 5 4\n7 8 9\n''') == '1'\nassert solution('''\n1 4\n4 3 2 1\n''') == '0'\nprint(solution('''\n5 4\n6 5 4 2 5\n3 2 1 5\n'''))\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '28'\nassert solution('2') == '16'\nassert solution('1') == '28'\nassert solution('10') == '28'"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n4\n6\n2\n12\n''') == '28'"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n5\\n10\\n') == '16'\nassert solution('100\\n') == '100'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '28'\nassert solution('3') == '16'\nprint(solution(input()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n3\n4\n6\n2\n''') == '28'\nassert solution('''\n10\n3\n10\n2\n12\n''') == '16'\nprint('all tests passed')\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"28\""
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '28'\nassert solution('3') == '28'\nassert solution('10') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10\n3\n4\n6\n2\n12''') == '28', 'First'\nassert solution('''10\n3\n10\n2\n12''') == '16', 'Second'\n"
    },
    {
        "number": 4784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8\n5\n5\n3\n3\n2\n1\n1\n4\n4\n4\n1\n1''') == '28'\n\nassert solution('''3\n3\n2\n1\n2\n1''') == '16'\n\nassert solution('''3\n5\n5\n4\n3\n2\n1\n1\n4\n4\n4\n1\n1''') == '8'\n\nassert solution('''5\n5\n5\n4\n3\n2\n1\n1\n4\n4\n4\n1\n1''') == '16'\n\nassert solution('''10\n3\n3\n2\n2\n1\n1\n1\n4\n4\n4\n1\n1''') == '28'"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'no hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('aeoeuiooiuoui') == 'no hiss'\nassert solution('noise') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"sims\") == \"hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"OIHiS\") == \"hiss\"\nassert solution(\"amississippi\") == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nprint(solution(input()))\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('octopuses') == 'no hiss'\nassert solution('hissing s') == 'hiss'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'no hiss'\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\nc++\nC++\nc''') == '3'\n\nassert solution('''5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux''') == '5'\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '4'\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\n'''\n'''\na = \"c++\"\nb = \"C++\"\nc = \"c\"\nd = \"c#\"\ne = \"Artificial intelligence\"\nf = \"Machine-Learning\"\ng = \"Linux\""
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('4') == '4'\n'''"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '3'\nassert solution('4\\nc++\\nC++\\nc\\nc#') == '3'"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''c++\nC++\nc\nc#\n''') == '3'\nassert solution('''5\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\n''') == '5'\n\n'''"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 3\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\nc++\nC++\nc\nc#\n''') == '3'\n\nassert solution('''\n5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\n''') == '5'\n\nassert solution('''\n4\nc++\nc#\n''') == '0'\n"
    },
    {
        "number": 4786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nc++\nc\nc#\n''') == '3'\n\nassert solution('''\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\n''') == '5'\n\nassert solution('''\nc++\nc\nc#\nc++\nC++\nc#\n''') == '3'\n\nassert solution('''\na b\na\na\n''') == '2'\n\nassert solution('''\na b\nc\na\n''') == '1'"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''TCGTTC\nCCC\n''') == '21'\nassert solution('''TGC\nCC\n''') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n'''\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"21\""
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n"
    },
    {
        "number": 4787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"180\") == \"90\"\nassert solution(\"315\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n180\n270\n90\n''') == '90'\nassert solution('''\n315\n45\n''') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('315\\n45\\n') == '90'\nassert solution('180\\n270\\n') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"180\") == \"90\"\nassert solution(\"45\") == \"90\"\nassert solution(\"180\") == \"90\"\nassert solution(\"90\") == \"0\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"315\") == \"90\"\nassert solution(\"180\") == \"90\"\nassert solution(\"-180\") == \"90\"\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"315\") == \"90\"\nassert solution(\"180\") == \"90\"\nassert solution(\"9000\") == \"90\"\nassert solution(\"9030\") == \"90\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"180\") == \"90\"\nassert solution(\"315\") == \"90\"\nassert solution(\"-180\") == \"90\"\nassert solution(\"270\") == \"90\"\nassert solution(\"-315\") == \"180\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('315') == '90'\nassert solution('45') == '90'\nassert solution('180') == '90'\nassert solution('270') == '90'\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('15') == '90'\nassert solution('15') == '90'\nassert solution('15') == '90'"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''4\n1\n2\n3\n4''') == '2'\nassert solution('''4\n11\n20\n33\n40''') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99\n''') == '3'\n\nassert solution('''5\n1\n23\n18\n13\n99\n56\n''') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5\n1\n23\n18\n13\n99\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n5\n11\n20\n33\n40\n55\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\n\nprint(solution())\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nprint(solution('''5\n1\n23\n18\n13\n99'''))\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n5\n1\n23\n18\n13\n99\n''') == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''5\n11\n20\n33\n40\n55''') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nassert solution(\"WWWWBBWB\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\n\nassert solution(\"WWWWBBW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nassert solution(\"WWWWBBW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''WBWBWBWB\n\nWBBBBBBB\n''') == '1'\nassert solution('''WWWWBBW\n\nWBBBBBBB\n''') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('WWWWBBW') == '1'\nassert solution('WWWWBBW') == '0'"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nprint(solution(\"WWWWBBW\"))"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WBWBWB') == '1'\n\nstdin = input()\nstdout = solution(stdin)\n\nprint(stdout)\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('WWWWBBW') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('WWBWBB') == '1'\nassert solution('WWWWBBW') == '0'"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\nprint(solution(input()))\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 2 2') == '1.299038105676658'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 2 2\n5\n''') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\nassert solution('3 4 7 8') == '5'\nassert solution('20 40 70 80') == '80'\nassert solution('50 50 50 50') == '50'"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrrrooobbbert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooooobert') == 'robert'\nassert solution('roooobertt') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('roobertst') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooooobert') == 'robert'\nassert solution('roortooobert') == 'robert'\nassert solution('roortooobertt') == 'robert'\nassert solution('roortooobeter') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nprint(solution.__doc__)\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\n\"\"\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('rooberta') == 'roberta'\nassert solution('roobertad') == 'robertad'\nassert solution('rooberta'*20) == 'roberta'*20\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('roobr\u00e5bertt') == 'robert'\nassert solution('roobroobr\u00e5bertt') == 'robert'\nassert solution('roobroobroobr\u00e5bertt') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobetter') == 'robert'\nassert solution('roobetter123') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooooooooobert') == 'robert'\nprint('Tests passed')\n\"\"\"\n\nimport re"
    },
    {
        "number": 4792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1000 9 7\n''') == '108 4'\n\nassert solution('''\n1000 900 7\n''') == 'Impossible'\n\nassert solution('''\n1000 9\n''') == 'Impossible'\n\nassert solution('''\n1000 900\n''') == 'Impossible'\n\nassert solution('''\n1000 9 7\n''') == 'Impossible'"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10 6') == '10 6'\nassert solution('3 3 2') == '2'\nassert solution('3 6 7') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1000 9 7\n1000 9 5''') == '108 4'\nassert solution('''1000 900 7\n1000 9 5''') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\""
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1000 9 7\"\n    ) == \"108 4\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4') == '1\\n1\\n2\\n1\\n0'\nassert solution('5 5') == '4\\n4\\n4\\n4\\n4'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '1'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '1'\nassert solution('4 4') == '1'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('5 5\\n...#\\n...#\\n...#\\n...#\\n##.#') == '6\\n0\\n1\\n0\\n0\\n0'"
    },
    {
        "number": 4794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n#..\\nX..\\nX..') == '1'\nassert solution('4 4\\n###\\n###\\n###\\n###') == '0'\nassert solution('2 4\\nX.X\\n.X.\\nX..\\n.X.\\n#XX\\n#X.\\n#XX.') == '1'\nassert solution('3 5\\nXX.X\\nX..X\\nXX..\\nXX..\\nXX..') == '2'\nassert solution('3 3\\n...\\n...\\n...') == '3'\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n212\n1253\n''') == '1953566'\nassert solution('''\n5\n23\n17\n43\n52\n22\n''') == '102'\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2\n3\n4\n5''') == '1555555555'\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1953566\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n212\n1253\n''') == '1953566'\nassert solution('''\n5\n23\n17\n43\n52\n22\n''') == '102'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1953566'\nassert solution('5') == '102'\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1953566'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1953566'\nassert solution('5') == '102'\nassert solution('8') == '6922837'"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"8\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1953566'\n"
    },
    {
        "number": 4795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2\\n12') == '1953566'\nassert solution('3\\n43') == '102'\n'''\n\nN = int(input())\nP = []\nfor _ in range(N):\n    P.append(int(input()))\n\nP = sorted(P)\nsum = 0\nfor i in range(len(P)):\n    sum += P[i]*(10**i)\n\nprint(sum)\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 10 10\n3 3 3\n''') == '0.000000 0.000000 0.000000'\nassert solution('''9 9 9\n3 2 1\n''') == '0.000000 3.000000 6.000000'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\") == \"0.000000 3.000000 6.000000\""
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\") == \"0.000000 3.000000 6.000000\""
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 10 10\n3 3 3\n''') == '0.000000 0.000000 0.000000'\n\nassert solution('''\n10 10 10\n3 3 3\n''') == '0.000000 3.000000 6.000000'"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\", 'wrong answer'\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\", 'wrong answer'\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5 5\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"1 1 1\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"0 0 0\") == \"0.000000 0.000000 0.000000\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 10 10\n3 3 3\n''') == '0.000000 0.000000 0.000000', 'First'\nassert solution('''\n9 9 9\n3 2 1\n''') == '0.000000 3.000000 6.000000', 'Second'"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 10 10') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9') == '0.000000 3.000000 6.000000'\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3\") == \"0.000000 0.000000 0.000000\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 10 10\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\") == \"0.000000 3.000000 6.000000\"\n\nstdin = \"\"\"\n6 5 8\n4 1 2\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''a<bc<\nfoss<<rritun\n''') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''a<bc<\nfoss<<rritun\n''') == 'fossrritun'\n\nassert solution('''x<bc<\nfoss<<rritun\n''') == 'fossrritun'\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''a<bc<\nfoss<<rritun''') == 'bcrtuf'\n'''"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('<') == ''\nassert solution('a<bc<') == 'bc<'\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\na<bc<\n''') == 'b'\nassert solution('''\nfoss<<rritun\n''') == 'forritun'\n'''\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('foss<<rritun') == 'forritun'\nassert solution('<forritun') == 'forritun'\nassert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\n'''\n\n'''\n"
    },
    {
        "number": 4797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nprint('\"Run\" is good. Time to check.')\n\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP', 'Failed: Knuth-Morris-Pratt'\nassert solution('Mirko-Slavko') == 'MS', 'Failed: Mirko-Slavko'\n\"\"\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'KMP'\nassert solution('KMP') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\nSTDIN   = \"Knuth-Morris-Pratt\"\nOUTPUT  = \"KMP\"\nprint(f'{STDIN:15s} | {OUTPUT}')\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n\nimport re\n\ns = stdin.split(\"-\")\nfor i in range(len(s)):\n    s[i] = s[i].split()\n    for j in range(len(s[i])):\n        s[i][j] = s[i][j][0].upper()\nprint(\"\".join(s[0]) + \"-\".join(s[1]))\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\""
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(None) == None\nassert solution([\"x\", \"y\", \"z\"]) == \"xyz\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('MS') == 'MS'\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('MS') == 'MS'"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''KMP''') == 'KMP'\nassert solution('MS') == 'MS'\nprint('You are done! Go check it!')\n"
    },
    {
        "number": 4798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 1 0') == 'Province or Gold'\nassert solution('2 1 0') == 'Estate or Copper'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 0\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 1 0') == \"Estate or Copper\"\nassert solution('2 1 0') == \"Province or Gold\"\nprint(solution(input()))"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 1 0\n''') == 'Estate or Copper'\nassert solution('''\n2 1 0\n''') == 'Province or Gold'\n'''\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 1 0') == 'Province or Gold'\nassert solution('2 1 1 0') == 'Province or Gold'\nassert solution('0 1 1 1 0') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 0') == 'Province or Gold'\nassert solution('2 1 0') == 'Province or Copper'\n"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 0\") == \"Estate or Copper\"\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n'''\nimport itertools"
    },
    {
        "number": 4799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1 0\n''') == 'Estate or Copper'\nassert solution('''\n0 0 0\n''') == 'Province or Gold'\nassert solution('''\n0 1 0\n''') == 'Estate or Copper'\nassert solution('''\n1 1 0\n''') == 'Province or Gold'\nassert solution('''\n1 2 0\n''') == 'Province or Gold'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"90.00\"\nassert solution(\"10 3\") == \"75.7142857\"\nprint(\"YOUR CODE SUCCEEDED!\")\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"90.00\"\nassert solution(\"10 3\") == \"75.7142857\""
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 1\\n\" +\n    \"70 50\\n\" +\n    \"Sample Output 1:90.00\\n\"\n) == \"90.00\"\n\nassert solution(\n    \"10 3\\n\" +\n    \"80 90\\n\" +\n    \"Sample Output 2:75.7142857\\n\"\n) == \"75.7142857\""
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == 'impossible'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\nassert solution('10 3\\n80 90\\n') == '75.7142857'"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'\nassert solution('10 3') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\n70 50\n''') == '90.00'\nassert solution('''10 3\n80 90\n''') == '75.7142857'\nassert solution('''10 0\n''') == 'impossible'\nassert solution('''10 10\n80 80\n''') == 'impossible'\nassert solution('''10 10\n85 85\n''') == 'impossible'\n"
    },
    {
        "number": 4800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '90.00'\nassert solution('10 3') == '75.7142857'\nprint(solution('''\n2 1\n70 50\n'''))\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == \"5 1 2 3 4\"\nassert solution('1 3 2') == \"3 1 2\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5 1 2 3 4\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '5'\n\nassert solution('''7\n2 3 1 5 4 7 6''') == '4'\n\nassert solution('''7\n1 2 3 4 5 6 7''') == '7'\n\nassert solution('''10\n10 10 10 10 10 10 10 10 10''') == '10'\n\nassert solution('''100\n99 99 98 97 96 95 94 93 92 91''') == '10'\n\nprint('All done!')\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"4\\n1 2 3 5\"\n\nprint('ALL DONE!')\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '4'\nassert solution('5') == '1 2 3 4 5'"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '4'\nassert solution('5') == '5'\nassert solution('8') == '8'\nassert solution('10') == '10'"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n2 3 1 5 4 7 6\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1\n2 3\n5 4\n3 6\n7 8\n9 10\n10 9\n11 12\n13 14\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12 10') == '12 15'\nassert solution('13 10') == '13 15'\nassert solution('0 10') == '9 25'\nassert solution('1 10') == '9 30'\nassert solution('0 30') == '9 25'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''0 10\n5 20\n''') == '9 25'''\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 10\n''') == '9 25'\nassert solution('''0 30\n''') == '23 45'"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\nstdin = input()\nhours, minutes = (int(x) for x in stdin.split())\nprint(hours - 1, minutes + 45)"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.000000') == '1.414214'\nassert solution('-1.000000') == '-1.414214'\nassert solution('0.36788') == '1.414214'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.000000') == '1.414214'\nassert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414214'\nprint('All test cases passed!')"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2.000000\n1.000000''') == '1.414214'\nassert solution('''1.000000\n0.36788''') == '1.414214'\nassert solution('''2.000000\n1.000000''') == '1.414214'\nassert solution('''1.000000\n1.000000''') == '1.414214'\nassert solution('''0.36788\n1.000000''') == '1.414214'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1.000000\n''') == '1.414214'\nassert solution('''\n-2.919331\n''') == '-2.745859'\nassert solution('''\n1.000000\n''') == '1.414214'\nassert solution('''\n0.01\n''') == '0.01'\nassert solution('''\n-0.01\n''') == '-0.01'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.36788\\n') == '1.414214', \"Wrong Answer\"\nassert solution('1.000000\\n') == '1.000000', \"Wrong Answer\"\nassert solution('1.36788\\n') == '1.414214', \"Wrong Answer\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.000000') == '1.414214'\nassert solution('2.000000') == '1.414214'\nassert solution('0.36788') == '1.000000'\nassert solution('-0.36788') == '1.000000'\nassert solution('-0.36788.') == '1.000000'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.000000') == '1.414214'\nassert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.414214'\nassert solution('-1.000000') == '0.999999'\nassert solution('-1.000000') == '0.999999'\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"3.000000\") == \"1.414214\"\nassert solution(\"4.000000\") == \"1.414214\"\nassert solution(\"5.000000\") == \"1.414214\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414214'\nassert solution('1.000000') == '1.000000'"
    },
    {
        "number": 4803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.000000') == '1.414214'\nprint('all tests passed')\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3: \"\nassert solution(\"50\") == \"50: \"\nassert solution(\"6\") == \"6: \"\nassert solution(\"51\") == \"51: \""
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('200') == '200:'\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n10\n13,12\n17,16\n25,25\n''') == '5:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n\nassert solution('''\n10\n15,10,15,10,15,10,15\n''') == '10:3,2\\n3,3\\n3,4\\n4,4\\n4,5\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:4,3\\n4,4\\n4,5\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:5,4\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:6,5\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:7,6\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:8,7\\n8,8\\n8,9\\n9,9\\n9,10\\n10:9,10\\n9,10\n''') == '10:2,1\\n2,2\\n3,2\\n4,4\\n4,5\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:3,2\\n3,3\\n3,4\\n4,4\\n4,5\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:4,3\\n4,4\\n4,5\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:5,4\\n5,5\\n5,6\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:6,5\\n6,6\\n6,7\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:7,6\\n7,7\\n7,8\\n8,8\\n8,9\\n9,9\\n9,10\\n10:8,7\\n8,8\\n8,9\\n9,9\\n9,10\\n10:9,10\\n9,10\\n9,10\n''')"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"51\") == \"51:\"\nassert solution(\"200\") == \"200:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == \"3:\"\nassert solution('50') == \"50:\"\nassert solution('500') == \"500:\"\nassert solution('5050') == \"50,50:\""
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2,1'\nassert solution('50') == '2,1'\nassert solution('51') == '6,5'\nassert solution('5150') == '6,5'\nassert solution('515050') == '6,5'\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"3:\"\nassert solution('50') == \"50:\"\nassert solution('500') == \"50:\"\nassert solution('1') == \"1:\"\nassert solution('0') == \"0:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"100\") == \"100:\"\nassert solution(\"500\") == \"500:\"\nassert solution(\"1000\") == \"1000:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('51') == ''\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\""
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''THE RAIN IN SPAIN\nIN THE RAIN AND THE SNOW\n''') == 'yes'\nassert solution('''THE RAIN IN SPAIN IN THE PLAIN\n''') == 'no'\nassert solution('''THE RAIN IN SPAIN\nIN THE RAIN AND THE SNOW\n''') == 'yes'\nassert solution('''THE RAIN IN SPAIN IN THE PLAIN\nIN THE RAIN AND THE SNOW\n''') == 'no'\nassert solution('''THE RAIN IN SPAIN\nIN THE RAIN AND THE SNOW\nTHE RAIN IN SPAIN IN THE PLAIN\nIN THE RAIN AND THE SNOW\n''') == 'yes'\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"I am very happy\") == \"no\"\nassert solution(\"I am very tired\") == \"yes\"\nassert solution(\"\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('THE RAIN IN SPAIN') == \"yes\"\nassert solution('IN THE RAIN AND THE SNOW') == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''RBRRBRLR''') == 'SSKKKHHS'\nassert solution('''RBBBLLLRR''') == 'CHCS'\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"RLLLRRRRRR\") == \"CLCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('RRBBBLLR') == \"SSKKKHHS\"\nassert solution('RBLLLBRR') == \"CHCS\""
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint('All test cases passed!')\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n''') == '1\\n2\\nFizz\\n'\nassert solution('''\n2 4 7\n''') == '1\\n2\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\nFizzBuzz\\n'\nassert solution('''\n1 1 2\n''') == '1\\nFizz\\n2\\nFizz\\n'\nassert solution('''\n1 1 2\n''') == '1\\nFizz\\n2\\nFizz\\n'\nassert solution('''\n1 1 2\n''') == '1\\nFizz\\n2\\nFizz\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz'"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\""
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    2 3 7\n''') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz'\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz'\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10') == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10') == 'It hadn\\'t snowed this early in 0 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1\\n4 3 2\\n3 3 3 2') == \"It hadn't snowed this early in 0 years!\"\nassert solution('10\\n0\\n100') == \"It hadn't snowed this early in 3 years!\"\nassert solution('1\\n5') == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n3 3 3 2\n''') == 'It hadn't snowed this early in 3 years!\n\n'''\nA.\n\nWe are given a list of integers, a and of length n.\n\nWe will perform the following steps:\n\nIn every iteration, we will pick any integer x in the list,\nand insert x into the list.\n\nAt the end of the iterations, the list should contain the sorted\nsorted list of all elements in a.\n\nWrite a function, that takes in a list of integers and returns a sorted list of integers.\n\nNote that you must use the insert method.\n\nSample Input:\n[3, 2, 1]\n\nSample Output:\n[1, 2, 3]\n\n'''\n\n\nclass Solution:\n    def solution(self, a):\n        pass\n'''\nclass Solution:\n    def solution(self, a):\n        a.sort()\n        return a\n'''"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"It had never snowed this early!\""
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 100\n''') == 'It hadn't snowed this early in 0 years!'\nassert solution('''4\n3 3 3 2\n''') == 'It hadn't snowed this early in 3 years!'\nassert solution('''3\n0 3 1 2\n''') == 'It hadn't snowed this early in 2 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10') == \"It hadn't snowed this early in 0 years!\"\nassert solution('4 2') == \"It hadn't snowed this early in 3 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10') == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == 'It hadn\\'t snowed this early in 4 years!'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 0') == '0'\nassert solution('5 10') == '7'\nassert solution('10 10') == '7'\nassert solution('10 5') == '8'\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '7'"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 2\\n') == '2'\nassert solution('10 10\\n') == '7'"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'"
    },
    {
        "number": 4809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\""
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nbok\nkoaski\n\"\"\") == \"koaski\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'\n'''"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\n'''\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\""
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bok') == 'bok'\n\nassert solution('koaski') == 'kakosi'\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('ab') == 'ab'\nassert solution('a') == 'a'\nassert solution('abcdcd') == 'abcdcd'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"bok\"\nassert solution(input()) == \"kakosi\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"bok\"\nassert solution(input()) == \"kakosi\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'koaski'"
    },
    {
        "number": 4810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    b\n\no\n\nm\n\nb\n\no\n\nn\n\ni\n\ns\n\nu\n\nu\n\nl\n\na\n\nd\n\ni\n\nc\n\ni\n\nMarica has grown tired of spending her precious time deciphering Ivica\u2019s messages, so you must write a program to do it for her.\n''') == 'boudonuimilcbsai'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4 2'\nassert solution('10') == '8 5'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\""
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\nSample Output 1:\n8 2''') == '8 2'\nassert solution('''7\nSample Output 2:\n8 3''') == '8 3'\nassert solution('''4\nSample Output 1:\n8 3''') == '8 3'\nassert solution('''3\nSample Output 1:\n8 3''') == '8 3'\nassert solution('''12\nSample Output 1:\n16 8''') == '16 8'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4 2\"\nassert solution(\"3\") == \"4 2\"\nassert solution(\"3 2\") == \"2 3\"\nassert solution(\"6\") == \"8 2\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10\n\"\"\"\n) == \"10 2\"\nassert solution(\n\"\"\"\n5\n\"\"\"\n) == \"8 2\"\nassert solution(\n\"\"\"\n7\n\"\"\"\n) == \"8 3\"\nassert solution(\n\"\"\"\n4\n\"\"\"\n) == \"8 3\"\nassert solution(\n\"\"\"\n12\n\"\"\"\n) == \"8 3\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 1'\nassert solution('7') == '2 1'\nassert solution('6') == '1 1'\nassert solution('11') == '1 1'\nassert solution('10') == '2 1'\n"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\nfor i in range(100):\n    n = int(stdin.readline())\n    print(solution(n))"
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2 4 2 4 2 4\"\nassert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\""
    },
    {
        "number": 4811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"YES\"\nassert solution(\"eet\") == \"NO\"\nassert solution(\"tasty sprout\") == \"YES\"\nassert solution(\"difficult route\") == \"YES\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('drought') == 'YES'\nassert solution('eet eat') == 'YES'\nassert solution('tasty sprout') == 'YES'\nassert solution('difficult route') == 'YES'\nassert solution('worried and fierce') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"erres\") == \"YES\"\nassert solution(\"eet\") == \"YES\"\nassert solution(\"apples and pears\") == \"YES\"\nassert solution(\"plates of meat\") == \"YES\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'YES'\nassert solution('eet eat') == 'NO'\nassert solution('eet eat') == 'YES'\n\n'''\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"eet eat\") == \"YES\"\nassert solution(\"apples and pears\") == \"YES\"\nassert solution(\"tasty sprout\") == \"YES\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"drought\") == \"YES\"\nassert solution(\"drowsiness\") == \"YES\"\nassert solution(\"worried\") == \"NO\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'YES'\nassert solution('eet eat') == 'YES'\nassert solution('apples and pears') == 'YES'\nassert solution('plates of meat') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'NO'\nassert solution('apt') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('erres') == 'NO'\nassert solution('eet') == 'YES'\nassert solution('apt') == 'NO'\n\nassert solution('apples and pears') == 'YES'\n"
    },
    {
        "number": 4812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"eet\") == \"YES\"\nassert solution(\"apples and pears\") == \"YES\"\nassert solution(\"tasty sprout\") == \"NO\"\nassert solution(\"difficult route\") == \"YES\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'LOSE'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\""
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('HGMAN') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(None) == \"WIN\"\nassert solution([\"HANGMAN\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]) == \"WIN\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\"\"\") == \"WIN\"\nassert solution(r\"\"\"BANANA\"\"\") == \"LOSE\"\nprint(solution(input()))"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('BANANA') == 'WIN'\nassert solution('HANGMAN') == 'LOSE'\n\"\"\"\n\n\nimport collections\nimport itertools\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HANGMAN') == 'WIN', 'Test #1'\nassert solution('BANANA') == 'LOSE', 'Test #2'\n"
    },
    {
        "number": 4813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HANGMAN') == 'WIN', 'Easy'\nassert solution('BANANA') == 'LOSE', 'Hard'"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n') == 'NEITHER'\nassert solution('8\\nA\\nB\\nC\\nD\\nE\\nF\\nG\\n') == 'INCREASING'\nassert solution('0\\n') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'INCREASING', 'incorrect result'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == 'DECREASING', 'First'\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == 'NEITHER', 'Second'\nassert solution('''1\nA\nB\nC''') == 'NEITHER', 'Third'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == 'INCREASING'\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == 'NEITHER'\nassert solution('''1\nHOPE''') == 'NEITHER'\nassert solution('''6\nJOE\nBOB\nANDY\nAL\nADAM\nALEX\nTOBIN\nSAM''') == 'NEITHER'\nassert solution('''2\nHOPE\nBOB\nAL\nADAM''') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'INCREASING', \"YOUR CODE IS WRONG\"\nassert solution('11') == 'DECREASING', \"YOUR CODE IS WRONG\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'INCREASING', 'INCREASING'\nassert solution('11') == 'NEITHER', 'NEITHER'\nassert solution('10') == 'NEITHER', 'NEITHER'\nassert solution('9') == 'NEITHER', 'NEITHER'\nassert solution('8') == 'NEITHER', 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n\"\n    \"JOE\\n\"\n    \"BOB\\n\"\n    \"ANDY\\n\"\n    \"AL\\n\"\n    \"ADAM\"\n) == \"DECREASING\"\nassert solution(\n    \"10\\n\"\n    \"HOPE\\n\"\n    \"ALI\\n\"\n    \"BECKY\\n\"\n    \"JULIE\\n\"\n    \"MEGHAN\\n\"\n    \"LAUREN\\n\"\n    \"MORGAN\\n\"\n    \"CARLI\\n\"\n    \"MEGAN\\n\"\n    \"ALEX\\n\"\n    \"TOBIN\"\n) == \"NEITHER\"\nassert solution(\n    \"30\\n\"\n    \"HOPE\\n\"\n    \"ALI\\n\"\n    \"BECKY\\n\"\n    \"JULIE\\n\"\n    \"MEGHAN\\n\"\n    \"LAUREN\\n\"\n    \"MORGAN\\n\"\n    \"CARLI\\n\"\n    \"MEGAN\\n\"\n    \"ALEX\\n\"\n    \"TOBIN\\n\"\n    \"MARY\\n\"\n    \"JOE\"\n) == \"INCREASING\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == \"NEITHER\", \"First\"\nassert solution('2\\n') == \"DECREASING\", \"Second\"\nassert solution('3\\n') == \"INCREASING\", \"Third\"\nassert solution('4\\n') == \"NEITHER\", \"Fourth\"\nassert solution('5\\n') == \"INCREASING\", \"Fifth\""
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\nBob 2\\nJess 3\\nBob 1\\nNina 3\\nJess 2\\nNina 1') == 'Nina wins!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10 13') == 'George wins!'\nassert solution('4 10 13') == 'Nina wins!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"5 10 13\") == \"No winner!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == 'John wins!'\nassert solution(input_) == 'Nina wins!'\n\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Jess wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\nKelly 1\n\"\"\") == \"George wins!\"\nassert solution(\"\"\"\n4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\n\"\"\") == \"Jess wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"5 10 13\") == \"Jess wins!\""
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10 13') == 'George wins!'\nassert solution('4 10 13') == 'Jess wins!'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10 13') == 'George wins!'\nassert solution('4 10 13') == 'Nina wins!'\nassert solution('5 10 13') == 'No winner!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\"\"\") == \"George wins!\"\nassert solution(\"\"\"4 10 13\nBob\nNina\nJess\nTim\nNina 2\nBob 2\nNina 1\nJess 3\nBob 2\nJess 2\nNina 1\nJess 2\nNina 3\nBob 1\nNina 3\nJess 3\nBob 2\"\"\") == \"Nina wins!\""
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 0 0 2 7 6\n''') == '2.0'\nassert solution('''\n3 3 -6 0 0 2\n''') == '0.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 3 0 0 5 4') == \"2.0\"\nassert solution('6 0 0 2 7 6') == \"2.0\""
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2.0\"\nassert solution(\"7 3 0 0 5 4\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2.0'"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0 0 3 0 0') == '0.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0'\nassert solution('9') == '9'\nassert solution('19') == '19'\nassert solution('5') == '0'\nassert solution('8') == '8'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('36') == '0'\nassert solution('65') == '66'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\nassert solution(input(\"6\\n\")) == '7'\nassert solution(input(\"123456789\\n\")) == '99999'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"1\", \"123\"\nassert solution(\"21\") == \"1\", \"21\"\nassert solution(\"12\") == \"1\", \"12\"\nassert solution(\"255\") == \"2\", \"255\"\nassert solution(\"1212\") == \"1\", \"1212\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '11'\nassert solution('11') == '11'\nassert solution('1010') == '1011'\nassert solution('1011') == '11'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '0'\nassert solution('10') == '11'\nassert solution('123') == '135'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '6'\nassert solution('10') == '11'\nassert solution('100') == '101'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(test_cases.get('testcase-1')) == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '4', \"Should be 4\"\nassert solution('4 4') == '3', \"Should be 3\"\nprint(\"You passed all test cases!\")"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n''') == '4'\nassert solution('''3\n180000 185000 199999 100000\n''') == '3'\nassert solution('''5\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n''') == '5'\n\nimport math\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\nSample Output 1:\n4\n''') == '4'\n\nassert solution('''5 5\n180000 185000 199999 100000\n199999 180000 170000 120000\nSample Output 2:\n3\n''') == '3'\n\nassert solution('''5 6\n180000 185000 199999 100000\n199999 180000 170000 120000\n190000 170000 140000 160000\nSample Output 3:\n1\n''') == '1'\n\nassert solution('''2 2\n170000 170000\nSample Output 4:\n1\n''') == '1'\n\nassert solution('''3 3\n150000 100000 160000 100000 180000\n180000 170000 140000 160000\nSample Output 5:\n2\n''') == '2'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000''') == '4'\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == '3'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 4\\n'\n    '150000 100000 160000 100000 180000\\n'\n    '190000 170000 140000 160000\\n'\n    ) == '4'\n\nassert solution(\n    '6 4\\n'\n    '180000 185000 199999 100000\\n'\n    '199999 180000 170000 120000\\n'\n    '140000 160000\\n'\n    ) == '3'"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == '4'\nassert solution('4 4') == '3'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 4818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126''') == \"10\"\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126''') == \"10\""
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '10', \"Wrong result\"\nassert solution('2') == '6', \"Wrong result\"\nassert solution('42') == '1', \"Wrong result\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\nstdin = input()\nlines = stdin.splitlines()\nunique_nums = []\nfor line in lines:\n    nums = [int(n) for n in line.split()]\n    for n in nums:\n        if n not in unique_nums:\n            unique_nums.append(n)\nprint(len(unique_nums))"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '10', 'first'\nassert solution('2') == '6','second'\nassert solution('3') == '6', 'third'"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '6'\nassert solution('42') == '6'\nassert solution('84') == '2'\nassert solution('252') == '6'\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '10'\nassert solution('''42\n84\n252\n420\n840\n126\n42\n84\n420\n126''') == '6'\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"10\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == \"10\"\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == \"6\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"42\") == \"6\"\nassert solution(\"84\") == \"3\"\nassert solution(\"252\") == \"2\"\nassert solution(\"420\") == \"1\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '10', 'First'\nassert solution('42\\n84\\n252\\n420\\n840\\n126') == '6', 'Second'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0') == 'yes'\nassert solution('13 3') == 'no'\nassert solution('1 2') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"yes\"\nassert solution(\"1 0\") == \"no\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"2 0\") == \"no\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\""
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n3 5\n5 6\n7 8\n10 8\n''') == \"yes\"\nassert solution('''\n1 1\n1 1\n''') == \"no\"\nassert solution('''\n3 1\n3 1\n3 1\n''') == \"yes\"\nassert solution('''\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1\n13 1"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'no'\nassert solution('1 0') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13 3') == 'yes', 'Should return \"yes\" if every file in your collection is exactly $1000$ bits long'\nassert solution('1 0') == 'no', 'Should return \"no\" if it is not possible to make every file in your collection of random bit strings equal to or less than $1000$ bits long'\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"no\"\nassert solution(\"5 6\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\nimport sys\nimport math\nimport os\nimport random\nimport io\nimport heapq"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('P01K02H03H04') == \"12 12 11 13\"\nassert solution('H02H10P11H02') == \"GRESKA\"\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13','sample test 1'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\nassert solution('') == ''\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open(\"test.in\").read().strip()) == \"12 12 11 13\"\nassert solution(open(\"input.in\").read().strip()) == \"12 12 11 13\""
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\", solution(\"P01K02H03H04\")\nassert solution(\"H02H10P11H02\") == \"GRESKA\", solution(\"H02H10P11H02\")\n"
    },
    {
        "number": 4821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"P01K02H03H04\"\n) == \"12 12 11 13\"\nassert solution(\n    \"H02H10P11H02\"\n) == \"GRESKA\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''\n5\n.......\n.......\n.......\n.......\n.......\n''') == '3'\nassert solution('''\n10\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n*....*\n''') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 3') == '1'\nassert solution('7 6 4') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n.*.*.\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\nassert solution('''10 15 10\n.....\n...*..\n...*..\n.**..*\n..*.*.\n.*.*.\n.....\n.....\n....*..\n*.*.*.\n*.*.*.\n...*..\n.....\n''') == '6'\nassert solution('''10 15 10\n*...\n.**..\n*.*.\n.**.\n*.*.\n*.*.\n*...\n*.*.\n*.*.\n*.*.\n*.*.\n*...\n*...\n''') == '3'\nassert solution('''10 10 10\n***..\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n*.*.\n''') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5 3\n.....\n.*.*.\n.....\n\"\"\") == \"1\"\nassert solution(\"\"\"7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n\"\"\") == \"2\"\nassert solution(\"\"\"5 5 3\n.......\n..*.*..\n..*.*..\n.......\n.......\n\"\"\") == \"1\"\nassert solution(\"\"\"15 5 2\n.......\n.**...*..\n*..*.*..*\n*...*.*..\n*..*.*..*\n*...*.*..\n*..*.*..*\n*.*.*.*..\n*.*.*.*..\n*.*.*.*..\n.......\n\"\"\") == \"1\"\nassert solution(\"\"\"20 20 2\n*......*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*......*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*..*.*..*\n*......*\n*......*\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....\\n') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n    3 5 3\n    .....\n    .*.*.\n    .....\n    .....\n    '''\n) == '1'\nassert solution(\n    '''\n    7 6 4\n    ......\n    .*.*.*\n    ......\n    .*.*..\n    ..*...\n    ..*...\n    *....*\n    '''\n) == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5 3\n.....\n.*.*.\n.....\n.*.*.\n''') == '1'\nassert solution('''\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\nassert solution('''\n3 5 3\n.....\n.*.*.\n.....\n.*.*.\n''') == '1'\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t1) == \"1\"\nassert solution(t2) == \"3\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n.*.*.\\n.*.*.\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\""
    },
    {
        "number": 4822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 5 3\n.....\n.*.*.\n.....\n.*.*.\n''') == '1', \"example\"\nassert solution('''\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2', \"another\"\nprint(f\"{solution(input()) = }\")\n\n---\n2\n.+...\n+*...\n+*...\n+*...\n+*...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n.+...\n."
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"4\"\nassert solution(sample_input_2) == \"3\"\n\n'''\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''AC AD AH AS KD\n                    C 4D 4H 2D 2H''') == '4'\nprint('You passed the test!')"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AC AD AH AS KD') == \"4\"\nassert solution('2C 4D 4H 2D 2H') == \"3\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AC AD AH AS KD') == \"4\"\nassert solution('2C 4D 4H 2D 2H') == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2C 4D 4H 2D 2H''') == '3'\nassert solution('''AC AD AH AS KD''') == '4'"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"2C 4D 4H 2D 2H\"\"\") == \"3\"\nassert solution(\n    \"\"\"AC AD AH AS KD\"\"\") == \"4\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\nsolution(list(input()))"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AC AD AH AS KD') == \"4\"\nassert solution('2C 4D 4H 2D 2H') == \"3\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 5\n2 1 1 1 0 1\nSample Output 2:\n7''') == '5'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"7\"\nassert solution(\"3 4\") == \"8\"\nassert solution(\"5 2\") == \"6\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"7\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 1 0 1\") == \"5\"\nassert solution(\"6 5\") == \"7\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1\\n') == '5'\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5\n2 1 1 1 0 1\n''') == '5'\nassert solution('''\n5 1\n0 0 0 0 0\n''') == '7'"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 5\n2 1 1 1 0 1\n''') == '5'\nassert solution('''3 3\n0 0 0\n1 1 1\n''') == '7'"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\nWhat's the Frequency, Kenneth?\\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\nassert solution
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''What's the Frequency, Kenneth?''') == '\\/[-]@'\\\n    '''][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n'''\n\nassert solution('''What's the Frequency, Kenneth?''') == '\\/[-]@\\'][\\'$ '\\\n    ''']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n'''\n\nprint(solution('''What's the Frequency, Kenneth?'''))"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Hello World!\\n') == '-3110 \\\\/ 0|Z1|)!\nassert solution('What\\'s the Frequency, Kenneth?\\n') == '\\/\\/[-]@\\'][''$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''All your base are belong to us.\nWhat's the Frequency, Kenneth?''') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\n\"\"\"\nThis function takes a string as input and returns the modified string which contains only the characters in the New Alphabet.\n\nInput string will only contain lowercase and uppercase letters.\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"All your base are belong to us.\\n\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\\n\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution(\"What's the Frequency, Kenneth?\\n\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nAll your base are belong to us.\n''') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\n'''\ninput\n'''\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''Hello World!''') == \"![-]3110 \\/\\/0|Z1|)!\nassert solution('''What's the Frequency, Kenneth?''') == \"![-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?''\"\nassert solution('''}
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"Hello World!\") == \"[-]3110 \\/\\/0|Z1|)!\nassert solution(\"What's the Frequency, Kenneth?\") == \"[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Hello World!') == '-3110 \\\\/\\/0|Z1|)!'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?'\n"
    },
    {
        "number": 4825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\""
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == None\nassert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nprint('all tests passed')"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 'Alice'\nassert solution(\"2\") == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 'Alice'\nassert solution(\"2\") == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 'Alice'\nassert solution(\"2\") == 'Bob'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\nthis\\nhas\\nletters\\n\") == \"this sentence has thirtyone letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\\n\") == \"thirty is the number of letters here\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n$\nthis\nsentence\nhas\n$\nletters\n''') == \"thirty is the number of letters here\"\nassert solution('''\n$\nis\nthe\nnumber\nof\nletters\nhere\n''') == \"thirty is the number of letters here\"\nassert solution('''\n$\nThis sentence\nhas\n$\nletters\n''') == \"This sentence has thirtyone letters\"\nassert solution('''\n$\nsentence\nhas\n$\nletters\n''') == \"sentence has letters\"\nassert solution('''\n$\nThe sentence\nhas\n$\nletters\n''') == \"The sentence has letters\"\n'''\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    this\n    sentence\n    has\n    $\n    letters\n''') == 'this sentence has thirtyone letters'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''this\nsentence\nhas\n$\nletters\n''') == \"this sentence has thirtyone letters\"\n\nassert solution('''$\nis\nthe\nnumber\nof\nletters\nhere\n''') == \"thirty is the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'one'\nassert solution('10') == 'ten'\nassert solution('100') == 'onehundred'\nassert solution('1000') == 'onethousand'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\nblah\\nseven\\n') == 'thirteen'\nassert solution('5\\nthree\\n') == 'threehundred'\nassert solution('6\\neight\\n') == 'eighthundred'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\nhello\\n3') == '1\\n3 hello\\n', 'Should be 1\\n3 hello\\n'\nassert solution('1\\n3\\nhi\\n3') == '1\\n3 hi\\n', 'Should be 1\\n3 hi\\n'\nassert solution('1\\n3\\nthere\\n3') == '1\\n3 there\\n', 'Should be 1\\n3 there\\n'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\ntwo\n3\n4\n5\n7\neleven\neight\nten\n''') == 'two three four five seven eight ten'\nassert solution('''2\n6\n5\n''') == 'five'\nassert solution('''10\nten\ntwenty\ntwentytwo\ntwentythree\n''') == 'ten twentytwenty'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nhello\\nhi\\nthere') == 'hello hi there'\n\nassert solution('5\\nthis sentence has thirtyone letters') == 'this sentence has thirtyone letters'\n\nassert solution('10\\n$') == '$'\n"
    },
    {
        "number": 4827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'this sentence has thirtyone letters'\nassert solution('7') == 'thirty is the number of letters here'\nprint('all test cases passed')"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    Abcd\n    EaEbFabG\n    A\n    B\n    C\n    D\n''') == '0'\nassert solution('''\n    Abcd\n    EaEbFabG\n    A\n    B\n    C\n    D\n    E\n    F\n''') == '3'\nassert solution('''\n    Abcd\n    EaEbFabG\n    A\n    B\n    C\n    D\n    E\n    F\n    G\n    H\n''') == '4'\nassert solution('''\n    Abcd\n    EaEbFabG\n    A\n    B\n    C\n    D\n    E\n    F\n    G\n    H\n    I\n    J\n    K\n    L\n''') == '0'\nassert solution('''\n    Abcd\n    EaEbFabG\n    A\n    B\n    C\n    D\n    E\n    F\n    G\n    H\n    I\n    J\n    K\n    L\n    M\n    N\n''') == '5'\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABCD') == '0'\nassert solution('EABBCDDDDD') == '5'\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '5'\n\nassert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '0'\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\n'''"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nA\n\nB\n\nC\n\nB\n\n''') == '0'\n\nassert solution('''\na\n\nb\n\nc\n\nb\n\n''') == '2'\n\nassert solution('''\na\n\nb\n\nc\n\nb\n\n''') == '3'\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\nassert solution('RaswakdAoA') == '6'"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('A') == 0\nassert solution('B') == 1\nassert solution('C') == 2\nassert solution('D') == 3\nassert solution('E') == 4\n"
    },
    {
        "number": 4828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '5'\n\nassert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '0'\n\nassert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '4'\n\nassert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '0'\n\nassert solution('''\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\n''') == '5'"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('4 5') == 'Not a moose'\nprint('all test cases passed')"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\nstdin = \"\"\"1 10\n6 5\n7 4\n8 3\n9 2\n10 1\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n\") == \"Odd 6\"\nassert solution(\"3 3\\n\") == \"Even 6\"\nassert solution(\"5 1\\n\") == \"Not a moose\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"Odd 6\"\nassert solution(\"5 3\") == \"Even 6\"\nassert solution(\"10 3\") == \"Even 8\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\""
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n"
    },
    {
        "number": 4829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\ntomo\nmono\ndak\n6666''') == '2'\n\nassert solution('''2\nja\nla\n52''') == '2'"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''tomo\nmono\ndak''') == '1'\nassert solution('''ja\nla\n52''') == '2'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n\n''') == '1'\n\nassert solution('''\n1\n3\n\n''') == '1'\n\nassert solution('''\n3\nabc"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\nabc\\ndef\\n4\\n5\\n6\\nghi\\njkl\\nmno\\n7\\n8\\n9\\npqrs\\ntuv\\nwxyz') == '2'"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n\" + \"\".join(map(chr, range(2, 10))) + \"\\n\" + \"1\\n\" * (1_000_000 - 5)) == \"2\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '2'\nassert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\ntomo\nmono\ndak\n6666\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\nja\nla\n52\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\ns\nb\nd\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\nab\nabcd\nq\nqjk\nqp\nqr\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0', solution('1')\nassert solution('2') == '1', solution('2')\nassert solution('3') == '2', solution('3')\nassert solution('4') == '2', solution('4')\nassert solution('5') == '3', solution('5')\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('A') == '..#..'\nassert solution('DOG') == '..#...#...*..'"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''A''') == '..#..'\nassert solution('''DOG''') == '..#...#...*..'"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''A''') == '..#..'\nassert solution('''DOG''') == '..#...#...*..'\nprint('PASSED')\n\nprint('''\\\n3\nHACK\nHACK\nHACK''')\nassert solution('''HACK\nHACK\nHACK''') == 'HACK\\nHACK\\nHACK\\n'\nprint('PASSED')\n\nprint('''\\\n5\nCAT\nDOG\nDOG\nDOG\nDOG''')\nassert solution('''CAT\nDOG\nDOG\nDOG\nDOG''') == 'CAT\\nDOG\\nDOG\\nDOG\\nDOG\\n'\nprint('PASSED')\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''A\nSample Output 1:\n..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\"\nprint(solution(input()))\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('A') == '..#..'\nassert solution('DOG') == '..#...#...*..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('A') == '..#..'\nassert solution('DOG') == '..#...#...*..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''A\nB\nC\nD\nE''') == 'ABCD'\nassert solution('''DOG\nPEP\nYEL\nYAP\nYEAR\nYOI\nYOG\nYOL\nYOI\nYAP\nYEL\nYOG\nYAP\n
    },
    {
        "number": 4831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''A\nDOG''') == '..#...#...*..'\nassert solution('''DOG''') == '.#.#.#.#.*.*.D'\nassert solution('''DOG''') == '.#.#.#.#.*.*.G'\nassert solution('''DOG''') == '.#.#.#.#.*.*.G'\nassert solution('''DOG''') == '..#...#...*..'"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nprint('Tests passed')\n\n\"\"\"\n\nR = int(input())\n\n\n\nprint(3.141593 * R * R)\nprint(3.141593 * R * R + 2 * R * R)\n\n\"\"\"\n\n15.1\n\n7.1\n\nimport math\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3.141593'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1.8333333333'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n\nradius = int(stdin)\narea_normal_circle = 3.14159265359 * radius * radius\narea_taxicab_circle = radius * radius * 3.14159265359\nprint(area_normal_circle, area_taxicab_circle)\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('0') == '0'"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 -2 3') == '2'\nassert solution('5') == '0'\nassert solution('129 44 394 253 147') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1 -2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n129 44 394 253 147\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 -2 3') == '2'\nassert solution('5129 44 394 253 147') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '0'"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0'\nassert solution('7') == '0'\nassert solution('3') == '2'\nassert solution('5') == '0'\nprint('Almost done! Go Check')\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\nassert solution('6\\n-1 -2 3') == '3'\nassert solution('7\\n-1 2 3') == '3'\nassert solution('8\\n-1 2 3') == '5'\n\n------------------\n- The first line represents the number of test cases N.\n- The next N lines contain the expenses of the hotel.\n- The price of the hotel is given in the second line.\n- The following lines contain the income of the hotel.\n- The price of the hotel is given in the second line.\n- The third line represents the price of the hotel.\n\nFind the sum of the expenses.\n\n---Sample Input---\n2\n1 -2 3\n-1 2 3\n6\n-1 2 3\n-5\n\n---Sample Output---\n2\n0\n\n---Explanation---\nCase 1: The first line represents the number of test cases N.\n\nCase 2: The next N lines contain the expenses of the hotel.\n\nCase 3: The price of the hotel is given in the second line.\n\nCase 4: The second line contains the income of the hotel.\n\nCase 5: The price of the hotel is given in the second line.\n\n------------------\n\nn = int(input())\n\nhotel_expenses = list(map(int, input().split()))\n\nhotel_price = int(input())\n\nhotel_income = list(map(int, input().split()))\n\nhotel_price = int(input())\n\nhotel_revenue = hotel_price - hotel_income[0]\n\ntotal_expenses = 0\n\nfor exp in hotel_expenses:\n    total_expenses += exp\n\ntotal_expenses = total_expenses - hotel_price\n\nprint(total_expenses)\n"
    },
    {
        "number": 4833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\nassert solution('4 1 2') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2\n3 4''') == '8'\nassert solution('''2\n2\n1''') == '4'''\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\""
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3\n1 2 2\n''') == '6'\n\nassert solution(\n'''\n3\n2 2 2\n''') == '6'\n\nassert solution(\n'''\n4\n1 2 3\n''') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"3\") == \"8\"\nassert solution(\"3\") == \"8\"\nassert solution(\"3\") == \"8\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"8\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('3 1 2') == '8'\nassert solution('3 4 1 2') == '12'"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\nassert solution(input_stdin) == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n4\n2 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n2\n4\n1 2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2\n4\n1 2\n\"\"\") == \"8\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 4 4\n1111\n1S01\n1011\n0L11\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 4 4\n1111\n1S01\n1011\n0R11\n\"\"\") == \"NOT POSSIBLE\"\n\n\"\"\"\nRuntime: 84 ms, faster than 94.79% of Python3 online submissions for Escape the Maze.\nMemory Usage: 14.2 MB, less than 5.53% of Python3 online submissions for Escape the Maze.\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 4\n1111\n1S01\n1011\n0U11\nSample Output 1:\n2\n\nSample Input 2:\n2 4 4\n1111\n1S01\n1011\n0L11\nSample Output 2:\nNOT POSSIBLE''') == '2'\n\nassert solution('''5 5 5\n11111\n1S1S\n10S10\n0U11\nSample Output 1:\nNOT POSSIBLE\n\nSample Input 2:\n2 4 4\n1111\n1S01\n1011\n0L11\nSample Output 2:\nNOT POSSIBLE\n\nSample Input 3:\n4 3 3\n111\n1S1S\n0U10\n1S11\nSample Output 3:\n1''') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\") == \"2\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\nassert solution(sys.stdin.read()) == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 4') == '2'\n\nassert solution('2 4 4') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == \"2\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4 4\n1111\n1S1\n1011\n0U11\n''') == '2'\nassert solution('''\n3 4 4\n1111\n1S1\n1011\n0L11\n''') == 'NOT POSSIBLE'\nassert solution('''\n3 2 3\n110\n010\n\n''') == '1'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4 4\n1111\n1S01\n1011\n0L11\n''') == '2'\nassert solution('''\n2 4 4\n1111\n1S01\n1011\n1R11\n''') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 4') == '2'\nassert solution('3 2 3') == 'NOT POSSIBLE'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5\n3 1 2 1 1\n''') == '4', 'First'\nassert solution('''\n7 5\n1 5 4 3 2 1 1\n''') == '3', 'Second'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '4'\n\nstdin = \\\n    '3' \\\n    '1' \\\n    '2' \\\n    '1' \\\n    '1' \\\n    '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n4\n3 2 3\n''') == '4'\nassert solution('''6\n4\n1 1 1\n''') == '5'\nassert solution('''5\n1\n3 2 3\n''') == '4'"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '4'\nassert solution('7 5') == '3'\nprint('Congratulations! All test cases passed')\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 2') == '2'\nassert solution('4 6') == '3'\nassert solution('1 2') == '0'\nassert solution('1 2 1 2 3') == '4'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 5\n3 1 2 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10\n10 10 10 10 10 10 10 10\n\"\"\") == \"1\"\nassert solution(\"\"\"\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 5'\n    ) == '4'\nassert solution(\n    '7 5'\n    ) == '3'\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n3 1 2 1 1\n''') == '4'\nassert solution('''7 5\n1 5 4 3 2 1 1\n''') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('5 2') == '2'\nassert solution('1 5 4 3 2 1 1') == '4'"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\n\nassert solution('2') == '10'\n\nassert solution('3') == '15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '10'\nassert solution('10') == '15'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\"\nprint(solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\"))"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nSSPPR') == '5'\nassert solution('5\\nSSPPR\\nRRSSP') == '15'\nassert solution('5\\nSSPPR\\nRRSSP\\nPPRRS') == '15'\nassert solution('5\\nSSPPR\\nSSPPR') == '15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"5\", \"Should be 5\"\nassert solution(\"5\\nSSRPR\") == \"10\", \"Should be 10\"\nassert solution(\"5\\nSSPPR\\nRRSSP\") == \"15\", \"Should be 15\"\n\n##Task 1##"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nSSPPR\n1\nSSPPR\n2\nPPRRS\nRRSSP''') == '10'\nassert solution('''5\nSSPPR\n1\nSSPPR\n2\nPPRRS\nRRSSP''') == '15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"10\"\nassert solution(\"4\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nSSPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10'"
    },
    {
        "number": 4837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('SSPPR') == '5'\nassert solution('2') == '10'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') =='still running'\nassert solution('2') == '4'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"5\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == \"still running\"\nassert solution('2') == \"4\""
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nassert solution('5') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\"3\", \"4\", \"5\"]) == \"still running\"\nassert solution([\"1\", \"2\", \"3\"]) == \"4\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') =='still running'\nassert solution('5') == '4'"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') =='still running'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == '4'\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n7\n11\n''') == '4'\nassert solution('''\n5\n2\n5\n9\n10\n17\n''') =='still running'\nassert solution('''\n1\n2\n5\n''') == '5'\nassert solution('''\n1\n4\n''') =='still running'\n\n--------------------------------------------------\n\nhttps://www.hackerrank.com/challenges/simple-array-sum/problem\n\nGiven an array arr[] of N integers, find the sum of all the contiguous sub-arrays.\n\nExample 1:\n\nInput:\n1\n5\n4\n3\n2\n1\nOutput:\n5\nExplanation:\nThe contiguous sub-arrays are 3, 4, 5 and 1.\n\nExample 2:\n\nInput:\n2\n6\n2\n1\n7\nOutput:\n7\nExplanation:\nThe contiguous sub-arrays are 2, 1 and 7.\n\n---\n\nhttps://www.hackerrank.com/challenges/big-sorting/problem\n\nGiven an unsorted array of integers, sort them in O(n log n) time.\n\nExample 1:\n\nInput:\n1\n2\n3\n4\n5\nOutput:\n1\n2\n3\n4\n5\nExplanation:\nThe array was already sorted, so its entries are as follows:\n1 2 3 4 5\nExample 2:\n\nInput:\n5\n1\n4\n3\n2\nOutput:\n1 2 3 4 5\nExplanation:\nThe array was already sorted, so its entries are as follows:\n1 2 3 4 5\nExample 3:\n\nInput:\n1\n1\n1\nOutput:\n1\n1\nExample 4:\n\nInput:\n1\n2\n3\n1\n2\nOutput:\n1\n1\n2\n3\nExplanation:\nThe array was already sorted, so its entries are as follows:\n1 1 1\n1 2\n1 3\n1\n2\n3\nThe output is as follows:\n1\n1\n1\n1\n1\n1\n2\n2\n3\nExplanation:\nThe array was already sorted, so its entries are as follows:\n1 1 1\n1 2\n1 3\n1\n2\n3\nThe output is as follows:\n1\n1\n1\n1\n1\n2\n2\n3\n'''\n"
    },
    {
        "number": 4838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n7\\n11') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') =='still running'\nassert solution('1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 5 2\\n4 5') == '0.5'\nassert solution('4\\n6 6 6 6\\n3 4 4 4\\n2 2 2 2') == 'impossible'\nassert solution('2\\n5 3\\n3 3\\n3 3') == '0.333'\nassert solution('2\\n5 2\\n1 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1') == '0.3333333333333333333333333333333333333333333333'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"6\") == \"0.6\"\nassert solution(\"12\") == \"impossible\""
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0.6'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6', \"Wrong!\"\nassert solution('2 2') == 'impossible', \"Wrong!\"\nassert solution('3 2') == '0.3333333333333333', \"Wrong!\"\nassert solution('5 10') == '0.6', \"Wrong!\"\nassert solution('3 5') == '0.4', \"Wrong!\"\n\"\"\"\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(sys.path[0]) + '/modules')\n\nfrom math import inf\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0.5'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''\n2\n2 2\n''') == 'impossible'\nassert solution('''\n3\n5 2 3 2 5\n''') == '0.10000000149011612'\nassert solution('''\n3\n1 1 1 1 1\n''') == 'impossible'\n"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1 2\\n2 2') == '0.6'\nassert solution('3\\n1 2 2\\n1 3') == 'impossible'\nprint(solution(input()))\n\"\"\"\nimport math\nimport itertools\nn, *c = list(map(int, input().split()))"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 1 2 3') == '0.5'\nassert solution('7\\n1 2 3 4 5 6') == '0.7'\n\n------------------------------------------------------------"
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n2 2') == 'impossible'\nassert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('5\\n5 1 5 5 5') == '0.50'\nassert solution('100\\n
    },
    {
        "number": 4839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\n'''\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4 1 4') == 'Emma'\nassert solution('1 6 1 6') == 'Gunnar'\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6\n''') == 'Emma'\nassert solution('''1 10 2 5\n1 12 3 4\n''') == 'Gunnar'\nassert solution('''1 4 1 4\n1 6 1 6\n''') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\nassert solution('''1 8 1 8\n1 10 2 5''') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Tie\"\nprint(solution(\"1 4 1 4\\n1 6 1 6\"))\n\n\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 1 2 3\n2 4 5 6\"\"\") == \"Emma\"\nassert solution(\"\"\"\n2 6 7 8\n2 10 3 5\"\"\") == \"Gunnar\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 4 1 4') == 'Emma', 'First'\nassert solution('1 6 1 6') == 'Gunnar', 'Second'"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4 1 4') == 'Emma'\nassert solution('1 8 1 8') == 'Tie'\nassert solution('2 4 1 4') == 'Gunnar'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4 1 4') == 'Emma'\nassert solution('1 6 1 6') == 'Gunnar'\n"
    },
    {
        "number": 4840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\nassert solution('''1 8 1 8\n1 10 2 5''') == 'Gunnar'"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n5 4 mumble 5\n2 4 mumble 5\n3 4 mumble 5\n''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n3 4 mumble 5\n5 4 mumble 5\n2 4 mumble 5\n7 4 mumble 5\n8 4 mumble 5\n''') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3\nmumble\nmumble\n7 mumble 8\n''') =='something is fishy'\n'''\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2 3 mumble 5\n1 2 3 mumble 5\n1 2 3 mumble 5\n1 2 3 mumble 5\n1 2 3 mumble 5\n1 2 3 mumble 5\n1 2 3 mumble 5''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8''') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3\\nmumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 3 mumble 5\n''') == \"makes sense\"\nassert solution('''\n8\n1 2 3 mumble mumble 7 mumble 8\n''') == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n''') =='something is fishy'\nassert solution('''40\n1 2 3 mumble 5\n''') =='something is fishy'\nassert solution('''6\n1 2 3 mumble 5\n''') =='makes sense'\nassert solution('''30\n1 2 3 mumble 5\n''') =='makes sense'\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"makes sense\"\nassert solution(\"8\") == \"something is fishy\""
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n''') =='makes sense'\nassert solution('''3\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n''') =='something is fishy'\nassert solution('''12\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n5 6 7 mumble 8\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n8 9 10 mumble 11\n5 6 7 mumble 8\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n''') =='something is fishy'\nassert solution('''100\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n5 6 7 mumble 8\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n8 9 10 mumble 11\n5 6 7 mumble 8\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n''') =='makes sense'\nassert solution('''1000\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n5 6 7 mumble 8\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n8 9 10 mumble 11\n5 6 7 mumble 8\n1 2 3 mumble 5\n1 2 3 mumble 7 mumble 8\n''') =='makes sense'\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n1 2 3 mumble 7\n1 2 3 mumble 8''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8\n1 2 3 mumble mumble 7 mumble 8''') =='something is fishy'''\n"
    },
    {
        "number": 4841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3 mumble 5\n1 2 3 mumble 5\n7 8 mumble 8\n7 8 mumble 8\n''') =='something is fishy', 'First Test'\nassert solution('''\n1 2 3 mumble 5\n1 2 3 mumble 5\n7 8 mumble 8\n7 8 mumble 8\n''') =='makes sense', 'Second Test'\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 3 6 9 12 15\n2 121\n\"\"\"\n) == \"1 18\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\nassert solution('5 0 9 25 49 81') == '1 18'\n\nfor n in range(int(input())):\n    v = list(map(int, input().split()))\n    print(min_diff_poly(v, len(v) - 1))"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2 3\") == \"6 9 12 15\"\nassert solution(\"4 1 2 3\") == \"21\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 5 8\") == \"1 18\"\n\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\nassert solution(\"3 4 1 2\") == \"0 0\"\n\nassert solution(\"4 9 26 14\") == \"0 12\"\n\nprint(solution(input(\"Enter: \")))"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\nprint('SUCCESS')"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"INCORRECT\""
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\nassert solution('''4\n2 3\n1 0\n0 2\n3 1\nSample Output 3:\nINCORRECT''') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\n\nassert solution('''\n10\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n8 9\n10 0\nSample Output 3:\nINCORRECT\n''') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'CORRECT'\nassert solution('1 2') == 'INCORRECT'\nassert solution('4 6') == 'CORRECT'\nassert solution('5 0') == 'INCORRECT'\nassert solution('1 5') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == \"CORRECT\", \"First Test\"\nassert solution('''\n4\n2 3\n1 0\n0 2\n3 1\n''') == \"INCORRECT\", \"Second Test\"\nassert solution('''\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == \"CORRECT\", \"Third Test\""
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 3') == 'INCORRECT'\nassert solution('6\\n2 1') == 'INCORRECT'\nassert solution('5\\n0 1') == 'INCORRECT'\nassert solution('4\\n2 3') == 'CORRECT'\nassert solution('3\\n1 0') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8\n0 1\n7 2\n6 3\n4 5\n5 6\n0 7\n2 4\n3 5\n1 6\n''') == 'CORRECT'\nassert solution('''\n4\n1 2\n3 0\n2 4\n1 3\n''') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n0 3\\n3 1\\n5 0\\n4 6') == 'CORRECT'\nassert solution('3\\n5 2\\n1 0\\n0 3\\n2 1') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'CORRECT'\nassert solution('4 6') == 'CORRECT'\nassert solution('8 7') == 'INCORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == \"CORRECT\"\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1\\n') == \"INCORRECT\"\n\n'''"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"5\") == \"1 2 3 1 11\"\nassert solution(\"10\") == \"1 2 3 1 11\"\nassert solution(\"15\") == \"1 2 3 1 11\"\nassert solution(\"20\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('5') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 2 3 1 11\""
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3\n0 1 1\n1 0 1\n1 1 0\n'''\n    ) == '1 1 1'\nassert solution(\n'''\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n'''\n    ) == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1 2 3 1 11\"\n\"\"\"\n\nimport sys\nimport math\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    row = list(map(int, input().split()))\n    matrix.append(row)\n\nfor i in range(N):\n    for j in range(N):\n        if matrix[i][j] >= math.pow(2, N):\n            print(\"1\", end=\" \")\n        else:\n            print(matrix[i][j], end=\" \")\n    print()\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0\n''') == '1 2 3 1 11'\n\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0 1 1\n1 0 1\n1 1 0\n4\n0 0 1 1\n1 0 1 0\n1 2 3 1\n1 0 1 0''') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('5') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0\n''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 2 3 1 11'\nassert solution('4') == '1 1 1 1'\nassert solution('3') == '1 1 1'\nassert solution('2') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"Saturday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"Thursday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n''') == 'Thursday'\nassert solution('''\n17 1\n''') == 'Saturday'\nassert solution('''\n1 12\n''') == 'Sunday'\nassert solution('''\n1 5\n''') == 'Monday'\nassert solution('''\n1 6\n''') == 'Tuesday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'Tuesday'\nassert solution(input()) == 'Friday'\nassert solution(input()) == 'Sunday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n12 1\n''') == \"Thursday\"\nassert solution('''\n17 1\n''') == \"Saturday\"\n\n''')\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('100') == '129'\nassert solution('10') == '9'\nassert solution('10') == '9'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"100\") == \"40\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"4\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('500') == '129'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"4\\n40\""
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10\\n2') == '9\\n19'\nassert solution('10\\n100\\n20') == '79\\n196'"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('12') == '129'\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"1\\n100\\n5\\n\") == \"129\\n480\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('500') == '129'\nassert solution('12') == '480'"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"1\\n100\\n5\\n\") == \"129\\n480\"\nprint(\"Congratulations! All test cases passed!\")\n\n\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('100') == '40'\nassert solution('4') == '129'\nassert solution('100') == '480'"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == \"2.0\"\nassert solution('3 2') == \"2.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n3 3\n4''') == '4.0'\nassert solution('''1 1\n5 1\n3 3\n4''') == '6.0'\nassert solution('''3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\n''') == '6.0'\nassert solution('''3 1\n5 1\n3 3\n4''') == '6.0'\nassert solution('''1 1\n5 1\n3 3\n4\n''') == '4.0'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == \"4.0\"\nassert solution('3 2') == \"6.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\n\"\"\") == \"6.0\"\nassert solution(\"\"\"\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\n\"\"\") == \"4.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '4.0'\nassert solution('2 2') == '1'\nassert solution('3 2') == '0'\nassert solution('4 3') == '3'\nassert solution('5 4') == '3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\n\"\"\"\n) == \"4.0\"\nassert solution(\n    \"\"\"\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\n\"\"\"\n) == \"6.0\"\nassert solution(\n    \"\"\"\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\n\"\"\"\n) == \"4.0\"\nassert solution(\n    \"\"\"\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\n\"\"\"\n) == \"6.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n5 1\\n3 3') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 5\n1 1\n3 3\n3 4\n4\n3 1\n3 2\n3 3\n3 4\n\"\"\") == \"6.0\"\nassert solution(\"\"\"\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\n\"\"\") == \"6.0\"\nassert solution(\"\"\"\n5 5\n1 1\n3 3\n3 4\n4\n3 1\n3 2\n3 3\n3 4\n\"\"\") == \"6.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n5 1\\n3 3') == '4.0'\nassert solution('3 2\\n5 4\\n1 6\\n3') == '6.0'"
    },
    {
        "number": 4847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"4.0\"\nassert solution(\"3 2\") == \"6.0\"\nassert solution(\"3 2\") == \"6.0\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(3) == 2\nassert solution(30) == 7\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n''') == '2'\nassert solution('''\n30\n''') == '7'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n5\n''') == '2'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\nassert solution('2000') == '11'\nassert solution('25') == '4'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n30''') == '7'''\nassert solution('''30\n30''') == '10'''\nassert solution('''3\n10''') == '9'''\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\nassert solution(\"3000000\") == \"7000000\"\nassert solution(\"300000000\") == \"700000000\"\nassert solution(\"3000000000\") == \"7000000000\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N-FBI1\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\""
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"9A-USKOK\") == \"1\"\nassert solution(\"I-NTERPOL\") == \"2\"\nassert solution(\"G-MI6\") == \"2\"\nassert solution(\"RF-KGB1\") == \"1\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('N321-CIA') == '1'\nassert solution('F3-B12I') == '2'\nassert solution('OVO-JE-CIA') == '3'\nassert solution('KRIJUMCAR1') == 'HE GOT AWAY!'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\""
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '1'\nassert solution('G-MI6') == '1'\nassert solution('RF-KGB1') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '1'\nassert solution('G-MI6') == '1'\nassert solution('RF-KGB1') == '1'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\") == '1'\nassert solution(\"9A-USKOK\") == '1'\nassert solution(\"I-NTERPOL\") == '1'\nassert solution(\"G-MI6\") == '2'\nassert solution(\"RF-KGB1\") == '2'\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('N-FBI1') == \"1\"\nassert solution('N321-CIA') == \"1\"\nassert solution('F3-B12I') == \"2\"\nassert solution('OVO-JE-CIA') == \"1\"\nassert solution('KRIJUMCAR1') == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\") == \"1\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('N-FBI1') == '1'\nassert solution('9A-USKOK') == '1'\nassert solution('I-NTERPOL') == '2'\nassert solution('G-MI6') == '3'\nassert solution('RF-KGB1') == '3'\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 3 3\\n4 4 5') == '8.0'\nassert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n3 3 3\\n4 4 5') == '8.0'\nassert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nprint('Tests Completed. Local')\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3 3 3\n    4 5 4\n''') == '6.843530573929037'\nassert solution('''\n    3 3 3\n    4 5 4\n''') == '8.0'\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 3 3\\n4 4 5\\n') == '8.0'\nassert solution('2\\n3 3 3\\n4 5 4\\n') == '6.843530573929037'"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '8.0'\nassert solution('3 3 3') == '8.0'\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n3 3 3\n4 4 5\n''') == '8.0'"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n3 3 3\\n4 4 5') == '8.0'\nassert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n5 6 5') == '12.408579821321372'\n"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 3') == '8.0'\nassert solution('2 4 5') == '6.843530573929037'"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 3 3\n4 4 5\n''') == '8.0'\nassert solution('''\n1\n3 3 3\n4 4 5\n''') == '6.843530573929037'''"
    },
    {
        "number": 4850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 3 3\n4 4 5\n''') == '8.0'\nassert solution('''\n2\n3 3 3\n4 5 4\n''') == '6.843530573929037'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('1\\n') == '2\\n'\nassert solution('15\\n') == '15\\n'\nassert solution('16\\n') == '19\\n'\nassert solution('165\\n') == '165\\n'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n36\n''') == '36'\nassert solution('''\n13\n''') == '13'\nassert solution('''\n21\n''') == '21'\nassert solution('''\n17\n''') == '17'\nassert solution('''\n15\n''') == '15'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('6') == '6'\nassert solution('7') == '7'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '4'\nassert solution('5\\n') == '5'\nassert solution('6\\n') == '6'\nassert solution('7\\n') == '7'\nassert solution('8\\n') == '8'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '7'\nassert solution('7') == '21'\nassert solution('8') == '23'\n"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'"
    },
    {
        "number": 4851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+1+1+1') == '3'\nassert solution('1+1+1+1+1') == '4'\nassert solution('1+1+1+1+1+1+1') == '5'\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nprint('Congratulations! All test cases passed!')"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nprint(\"Congratulations! Your solution is correct.\")\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\"1+2+3+4+5+6+7+8+9+0\") == \"188\"\nassert solution(\"1+2+3+4+5+6+7+8+9+10\") == \"188\"\nassert solution(\"1+2+3+4+5+6+7+8+9+10+11\") == \"188\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1+9+8+4''') == '7'\nassert solution('''1+2+3+4+5+6+7+8+9''') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1+9+8+4''') == '7'\nassert solution('''1+9+8+4''') == '7'\nassert solution('''1+9+8+4''') == '7'\nassert solution('''1+9+8+4''') == '7'\nassert solution('''1+9+8+4''') == '7'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5 2''') == '2 5'\nassert solution('''2 2 -4 5''') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 5 2\n1 5 2''') == '2 5'\nassert solution('''3 3 -4 5\n6 8 -1''') == '-1 -4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 2') == '2 5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('3 3 -10 -5') == '10 -5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n2 1 2 1 2\n''') == '2 1 2 1 2'\nassert solution('''9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '2 2 2 1 1'\nassert solution('9 3') == '1 1 1 3 3 3 2 2 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '2 2 2 1 1'\nassert solution('5 3') == '1 1 1 3 3 3 2 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == '1 2 3 4 5 6 7 8 9'\nassert solution('2 4 3 1 5 3 6 7 8 9') == '1 2 3 4 5 6 7 8 9'\nassert solution('4 6 5 1 2 3 4 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('5 1 4 2 3 6 5 7 8 9') == '1 4 2 3 6 5 7 8 9'\nassert solution('1 1 2 3 3 3 3') == '1 2 3 3 3'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1', \"Sample Test 1\"\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2', \"Sample Test 2\""
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '2 2 2 1 1', \"Wrong\"\nassert solution('9 3') == '1 1 1 3 3 3 2 2 2', \"Wrong\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n2 1 2 1 2\n''') == '2 1 2 1 2'\nassert solution('''9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 1 2 1 2'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('25 38') == '875'\nassert solution('1 100') == '100'"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''38 24\n1 100\n''') == '875'\nassert solution('''16 8\n18 1\n''') == '17'\nprint('Solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n38 24\n\"\"\") == \"875\"\nassert solution(r\"\"\"\n1 100\n\"\"\") == \"100\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n3 1\n4 2\n6 7\n''') == '875'\n\nassert solution('''\n10 2\n7 9\n10 3\n''') == '935'\n\nassert solution('''\n5 8\n3 1\n4 2\n6 7\n''') == '853'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"875\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"42 1\") == \"42\"\nprint(\"You passed all tests!\")\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '875'\nassert solution('3 1') == '100'\nassert solution('2 1') == '100'\nassert solution('4 2') == '1'\nassert solution('3 2') == '875'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 100') == '100'\nprint('All tests passed')\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"875\"\nassert solution(\"1 100\") == \"100\""
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('38 24') == '875'\n"
    },
    {
        "number": 4855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"25\"\nassert solution(\"1 100\") == \"100\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''734 893\n221 231''') == '437'\nassert solution('''6789 15\n35 45\n89''') == '654'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''734 893\n221 231''') == '437'\nassert solution('''438 850\n734 893''') == '437'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\""
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''734 893\n221 231''') == '437'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('1324 7856') == '4536'\nassert solution('9793 8006') == '9793 8006'\nassert solution('8192 7892') == '7889'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nprint(solution(input()))"
    },
    {
        "number": 4856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"programming\""
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 131') == \"programming\"\nassert solution('7 96') == \"contest\"\nassert solution('123 456') == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 125\n''') == 'programming', 'Should return \"programming\"'\nassert solution('''\n5 120\n''') == 'contest', 'Should return \"contest\"'\nassert solution('''\n4 100\n''') == 'impossible', 'Should return \"impossible\"'\nassert solution('''\n2 127\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', 'Should return \"impossible\"'\n''') == 'impossible', '"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"2 3\") == \"impossible\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\nYour submission beats 7.61 % of python3 submissions.\n\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 7') == 'coding'\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == \"impossible\"\n\"\"\"\nl, w = [int(x) for x in input().split()]\n\nprint(''.join(chr(x + ord('a')) for x in range(l, w + 1)))\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"abc\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"1\") == \"impossible\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 X') == '.X'\nassert solution('3 12 A') == 'BBABABABABAC'\nassert solution('4 9 A') == 'BBABABABABAB'\nassert solution('5 17 A') == 'BBABABABABAB'\nassert solution('6 25 A') == 'BBABABABABAB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 \"X\"'\n    'X^') == '.^'\nassert solution('3 12 \"A\"'\n    'ABABABABABAC'\n    'BABABABABABB'\n    'ABABABABABAB') == 'BBABABABABAB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 'X'\nX^\n--\n\n.X\n--\n''') == '.^'\nassert solution('''\n3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == 'BBABABABABABB'\nassert solution('''\n2 2 'X'\nX^\n--\n\n.X\n--\n''') == '.^'\nassert solution('''\n3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == 'BBABABABABABB'\nassert solution('''\n5 15 'A'\nABABAABAABAA\nAABBAABAABAA\nAABABABABABA\nABAABABABABA\nAABABABABABA\n''') == 'ABAABABABABA'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 \"X\"'\n                'X^') == '.^'\nassert solution('2 1 \"X\"'\n                'X^') == '.'\nassert solution('2 2 \"X\"'\n                'X^') == 'X^'"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == stdin\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\") == \".^\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 X') == '.X\\n--\\n'\nassert solution('3 12 A') == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n'\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\\n\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 'X'\") == \".X\\n--\\n\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n''') == '.''^\n'''X''\n'''X'''\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\nSample Output 2:\nBBABABABABAB\nBBBABABABABA\nBBABABABABAB\n''') == 'BBBABABABABA\\nBBBABABABABA\\nBBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA\\n''BBBABABABABA'''\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 4 4 14\n1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n3 2 0\n5 0 1\n5 1 0\n7 0 0''') == '1 1 1\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\n\nassert solution('''1 20 3\n2 12\n3 19\n4 16\n5 20\n6 21\n7 25\n8 26\n9 30\n10 34\n11 36\n12 39\n13 44\n14 48\n15 51\n16 54\n17 60\n18 63\n19 66\n20 72\n21 75\n22 78\n23 81\n24 84\n25 88\n26 91\n27 94\n28 97\n29 100\n30 103\n31 106\n32 109\n33 112\n34 115\n35 118\n36 121\n37 124\n38 127\n39 130\n40 133\n41 136\n42 139\n43 142\n44 145\n45 148\n46 151\n47 154\n48 157\n49 160\n50 163\n51 166\n52 169\n53 172\n54 175\n55 178\n56 181\n57 184\n58 187\n59 190\n60 193\n61 196\n62 199\n63 202\n64 205\n65 208\n66 211\n67 214\n68 217\n69 220\n70 223\n71 226\n72 229\n73 232\n74 235\n75 238\n76 241\n77 244\n78 247\n79 250\n80 253\n81 256\n82 259\n83 262\n84 265\n85 268\n86 271\n87 274\n88 277\n89 280\n90 283\n91 286\n92 289\n93 292\n94 295\n95 298\n96 301\n97 304\n98 307\n99 310\n100 313\n101 316\n102 319\n103 322\n104 325\n105 328\n106 331\n107 334\n108 337\n109 340\n110 343\n111 346\n112 349\n113 352\n114 355\n115 358\n116 361\n117 364\n118 367\n119 370\n120 373\n121 376\n122 379\n123 382\n124 385\n125 388\n126 391\n127 394\n128 397\n129 400\n130 403\n131 406\n132 409\n133 412\n134 415\n135 418\n136 421\n137 424\n138 427\n139 430\n140 433\n141 436\n142 439\n143 442\n144 445\n145 448\n146 451\n147 454\n148 457\n149 460\n150 463\n151 466\n152 469\n153 470\n154 472\n155 475\n156 478\n157 481\n158 484\n159 486\n160 487\n161 490\n162 493\n163 495\n164 498\n165 501\n166 506\n167 509\n168 512\n169 515\n170 518\n171 521\n172 524\n173 527\n174 530\n175 533\n176 536\n177 539\n178 540\n179 543\n180 546\n181 549\n182 552\n183 555\n184 558\n185 561\n186 564\n187 567\n188 570\n189 573\n190 576\n191 579\n192 580\n193 583\n194 586\n195 589\n196 592\n197 595\n198 598\n199 601\n200 604\n201 607\n202 608\n203 611\n204 614\n205 617\n206 619\n207 620\n208 623\n209 626\n210 629\n211 632\n212 635\n213 638\n214 641\n215 644\n216 647\n217 649\n218 652\n219 654\n220 657\n221 659\n222 662\n223 665\n224 668\n225 670\n226 673\n227 676\n228 679\n229 682\n230 685\n231 688\n232 691\n233 694\n234 697\n235 700\n236 703\n237 706\n238 709\n239 712\n240 715\n241 718\n242 721\n243 724\n244 727\n245 730\n246 733\n247 736\n248 739\n249 742\n250 745\n251 748\n252 751\n253 754\n254 757\n255 760\n256 763\n257 766\n258 769\n259 770\n260 773\n261 776\n262 779\n263 782\n264 785\n265 788\n266 791\n267 794\n268 797\n269 800\n270 803\n271 806\n272 809\n273 812\n274 815\n275 818\n276 821\n277 824\n278 827\n279 830\n280 833\n281 836\n282 839\n283 842\n284 845\n285 848\n286 851\n287 854\n288 857\n289 860\n290 863\n291 866\n292 869\n293 872\n294 875\n295 878\n296 881\n297 884\n298 887\n299 890\n300 893\n301 896\n302 899\n303 902\n304 905\n305 908\n306 911\n307 914\n308 917\n309 920\n310 923\n311 926\n312 929\n313 932\n314 935\n315 938\n316 941\n317 944\n318 947\n319 950\n320 953\n321 956\n322 959\n323 962\n324 965\n325 968\n326 971\n327 974\n328 977\n329 979\n330 980\n331 983\n332 986\n333 989\n334 992\n335 995\n336 998\n337 1001\n338 1004\n339 1007\n340 1010\n341 1013\n342 1016\n343 1019\n344 1022\n345 1025\n346 1028\n347 1031\n348 1034\n349 1037\n350 1040\n351 1043\n352 1046\n353 1049\n354 1050\n355 1053\n356 1056\n357 1059\n358 1062\n359 1065\n360 1068\n361 1071\n362 1074\n363 1077\n364 1080\n365 1083\n366 1086\n367 1089\n368 1092\n369 1095\n370 1098\n371 1102\n372 1105\n373 1108\n374 1111\n375 1114\n376 1117\n377 1120\n378 1122\n379 1124\n380 1125\n381 1127\n382 1130\n383 1133\n384 1136\n385 1139\n386 1142\n387 1145\n388 1148\n389 1151\n390 1154\n391 1157\n392 1160\n393 1163\n394 1166\n395 1169\n396 1172\n397 1175\n398 1178\n399 1181\n400 1184\n401 1187\n402 1190\n403 1193\n404 1196\n405 1199\n406 1200\n407 1203\n408 1207\n409 1210\n410 1213\n411 1216\n412 1219\n413 1222\n414 1225\n415 1228\n416 1231\n417"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 4 14') == '1 0 3'\nassert solution('100 80 60 240') == '0 0 4'"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\"\nassert solution(\n    \"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3'\nassert solution('100 80 60 240') == '0 0 4'\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0\""
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 4 14') == '1 0 3'\nassert solution('100 80 60 240') == '0 0 4'\nassert solution('1 2') == '1 2 1'\nassert solution('3 4') == '3 0 2'\nassert solution('5 0 1') == '5 0 1'\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"1 2 3 4\") == \"1 1 1\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"1 2 3\") == \"1 1 1\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('1 0 3') == '1 0 3'\nassert solution('2 4 4 14') == '1 0 3'\nassert solution('100 80 60 240') == '0 0 4'\nassert solution('90 80 60 240') == '0 0 4'\n"
    },
    {
        "number": 4859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4 4 14\n''') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0\\n'''\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n10') == '1'\nassert solution('4\\n5') == '3'\nassert solution('1\\n10') == '1'\nassert solution('9\\n10') == '1'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"9\") == \"good job\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"7\") == \"6\"\nassert solution(\"8\") == \"7\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9') == 'good job'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '6'\nassert solution('7') == '12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"9\") == \"good job\"\nassert solution(\"2\") == \"1,2\"\nassert solution(\"4\") == \"3,4\"\nassert solution(\"5\") == \"4,5\"\nassert solution(\"7\") == \"6,7\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == 'good job'\nassert solution('5') == '3'\nassert solution('13') == '12'"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == 'good job'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('7') == '6'\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"\nassert solution(\"0\\n1\\n3\\n5\\n7\\n9\\n11\") == \"1\\n3\\n5\\n7\\n9\\n11\""
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n4\\n5\\n\") == \"Good job\"\nassert solution(\"10\\n3\\n4\\n5\\n\") == \"6, 9, and 8\"\nassert solution(\"9\\n3\\n4\\n5\\n\") == \"8, 7, and 6\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"good job\"\nassert solution(\"8\") == \"3\"\nassert solution(\"2\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9') == 'good job'\nassert solution('2') == '3'\nassert solution('4') == '6'\nassert solution('5') == '12'\nassert solution('7') == 'bad job'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('100 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('10000 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('10000 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('10000 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"5 7.9 40175000 272.1\") == \"175519.12652578 44.52846412284\"\nassert solution(\"20 5.9 500002 272.1\") == \"151388.69257987 36.731209323907\"\nassert solution(\"20 6.9 4000000 272.1\") == \"151388.69257987 35.95917595917\"\nassert solution(\"20 6.9 300000 272.1\") == \"151388.69257987 35.95917595917\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 8.9 40075000 272.1\n''') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    10 8.9 40075000 272.1\n''') == '157079.04857106 15.598261092309'\nassert solution('''\n    11 8.9 2.5000000 2.5000000\n''') == '1075.13427711410'\nassert solution('''\n    12 8.9 2.5000000 2.5000000\n''') == '1075.13427711410'\nassert solution('''\n    13 8.9 2.5000000 2.5000000\n''') == '1075.13427711410'\nassert solution('''\n    14 8.9 2.5000000 2.5000000\n''') == '1075.13427711410'\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"10 8.9 40075000 272.1\"\"\") == \"157079.04857106 15.598261092309\""
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7.1 3.2') == '8.973364785714'\nassert solution('100 10.1 5.2') == '3.00276402821'\n\"\"\"\n\nfrom math import log2\n\nn, p, s, v = (int(i) for i in stdin.split())\nc = log2(n) * v / p * (10 ** 9)\nprint(round(c, 6))"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 6.2 23.1') == '1701.2195'\nassert solution('4 5.2 23.1') == '1701.21277'\nassert solution('4 8.2 23.1') == '1669.3586'\nassert solution('4 8.2 23.1') == '1701.2195'"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"7.344140625\"\nassert solution(\"3 4 8.9 0.3\") == \"9.605555556\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\""
    },
    {
        "number": 4861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1.2e+3 1.2e+3\n''') == '45312.931'\nassert solution('''\n4 2.5e+4 3.0e+4\n''') == '279655.4'\nassert solution('''\n4 1.2e+5 1.2e+5\n''') == '127869.5'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n1 2\n1 3\n3 2''') == '4'\n\nassert solution('''4\n5 4 3 2 1\n2 3 1 2\n3 4 2 1\n5 4 1 2\n1 2 5''') == '6'\n\nassert solution('''4\n2 1 3 4\n1 3\n1 2\n3 4''') == '4'\n\nassert solution('''1\n1 2\n1 3\n1 4\n2 3\n2 4''') == '2'\n\nassert solution('''3\n1 1 2\n2 1 2\n1 3''') == '0'"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == '0'\n\nassert solution(\"2\") == '1'\n\nassert solution(\"3\") == '2'\n\nassert solution(\"4\") == '4'\n\nassert solution(\"5\") == '6'"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '4'\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\n\n-----Explanation-----\nInput:\nThe input contains a single integer, $N$ ($0 \\leq N \\leq 30$), the number of characters.\n\nSample Output:\nThe number of relationships that need to be explored.\n\nSample Case 2:\nThe number of relationships that need to be explored.\n\nSample Case 3:\nThe number of relationships that need to be explored.\n\nIn Sample Case 2, for $N = 2$, there are only two relationships: one between $A$ and $B$ and one between $A$ and $C$.\n\nIn Sample Case 3, there are four relationships: one between $A$ and $B$, one between $A$ and $C$, one between $B$ and $C$, and one between all three.\n'''"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('30') == '4'"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '9'\nassert solution('25') == '18'\nassert solution('10000') == '9679'\nassert solution('250000') == '18321'\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2', \"Wrong\"\nassert solution('3') == '1', \"Wrong\"\nassert solution('4') == '3', \"Wrong\"\n\n'''\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nA\nB\nD''') == '1'\nassert solution('''3\nA\nB\nC''') == '0'\nassert solution('''10\nC\nD\nA\nB\nC\nD\nA\nB\nC\nD\nA\nB''') == '4'\nassert solution('''100\nA\nB\nC\nD''') == '2'\nassert solution('''1000\nA\nB\nC\nD''') == '4'\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nA\\nA\\nA\") == \"3\"\nassert solution(\"5\\nA\\nB\\nC\\nD\\nE\") == \"5\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n\") == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nA\\nA\\nA\\n') == '3'\n\nSample Input:\n3\nA\nB\nC\nSample Output:\n1\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    4\n    A\n    A\n    A\n    A\n''') == '3'\n\nassert solution('''\n    4\n    A\n    B\n    C\n    D\n''') == '0'\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\""
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\nA\nB\nC\nD\nA\nB\n''') == '3'\n\nassert solution('''\n5\nD\nC\nC\nC\nA\n''') == '2'\n\nassert solution('''\n5\nA\nB\nC\nD\nA\n''') == '1'\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\n--\nFor $n$ questions, each question has 4 possible answers, so the answer sheet has $n + 1$ lines. For example, for $n = 4$, we have lines $1$, $2$, $3$, and $4$. If we find that the first line of the answer sheet contains an answer, then it means we are missing an answer for that question.\n\nFor $n = 4$, we have the following sample input:\n\n1\nA\nA\nA\nA\nSample Output:\n0\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nA\\nA\\nA\\n\") == \"3\"\n\nSample Input:\n2\nA\nD\nSample Output:\n0\n"
    },
    {
        "number": 4863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n'''"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 1 2\n.x.\nx.x\n.x.\n''') == '..xx..\\nxx..xx\\n..xx..\\n'\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"..xx..\""
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 1 2\n.x.\nx.x\n.x.\n''') == '..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '..xx..'"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 1 2\n.x.\nx.x\n.x.\n''') == '..xx..'\n\nassert solution('''3 3 1 2\n.x.\nx.x\n.x.\n''') == 'xx..xx'\n\nassert solution('''3 3 1 2\nxx.x.\nx.x.\n.x.x\n''') == 'xx.x.xx'\n\nassert solution('''3 3 1 2\n.x.\nxx.\nx.x\n''') == 'xx.xx.x'\n\nassert solution('''3 3 1 2\nx.x.\nx.x\n.x.\n''') == 'xx.xx.x'"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == \"..xx..\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 3 1 2\n    .x.\n    x.x\n    .x.\n''') == '''\n    ..xx..\n    xx..xx\n    ..xx..\n'''\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 2') == '..xx..'\nassert solution('3 3 1 2') == '..xx..'\nassert solution('5 3 1 2') == '..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"3 3 1 2\n.x.\nx.x\n.x.\n\"\"\") == \"..xx..\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('F 60 13 20') == '14 20'\nassert solution('B 60 10 20') == '16 10'\nassert solution('B 60 13 20') == '16 13'\nassert solution('F 60 13 21') == '15 13'\n\nYour submission was rated :D\n--- Part 2 ---\nYou have $N$ test cases and $M$ minutes to adjust. For each test case, provide a new time after adjustment (hours in $24$-hour format, followed by a space, followed by minutes).\n\n\n-----Input-----\nInput consists of a single integer $N$ ($1 \\le N \\le 500$) indicating the number of test cases that follow. Each test case consists of a single line with the following information:\n - a single character to indicate whether the clock will roll forwards (F) or backwards (B),\n - an integer $D$ ($0 \\le D \\le 120$) indicating the number of minutes to change by,\n - an integer $H$ ($0 \\le H < 24$) indicating the hour the clock currently reads (without leading zeros), and\n - an integer $M$ ($0 \\le M < 60$) indicating the minutes the clock currently reads.\n\n-----Output-----\nFor each test case, give the time (hours in $24$-hour format, followed by a space, followed by minutes) after the adjustment has occurred, one test case per line. You may report the numbers without leading zeros.\n\n-----Examples-----\nSample Input:\n1\nF 60 13 20\nSample Output:\n16 13\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\""
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 14\") == \"17 22\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''F 60 13 20\nF 60 13 20''') == \"14 20\"\nassert solution('''F 60 13 20\nB 60 13 20''') == \"13 20\"\nassert solution('''B 60 13 20\nF 60 13 20''') == \"13 20\"\nassert solution('''B 60 13 20\nB 60 13 20''') == \"13 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\nassert solution(\"B 60 -13 20\") == \"23 20\"\nassert solution(\"F 60 -13 20\") == \"12 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 -10 13 20\") == \"11 -13 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\nassert solution(\"B 60 13 59\") == \"13 59\"\nassert solution(\"F 60 13 59\") == \"14 59\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '14 20'\nassert solution(input()) == '13 20'\nassert solution(input()) == '13 20'\n"
    },
    {
        "number": 4865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''F 60 13 20\n    F 60 13 20\n    B 60 -10 13 20\n    B 60 -10 13 20\n    F 60 13 20\n    F 60 13 20\n    F 60 -10 13 20\n    F 60 -10 13 20''') == '14 20 13 20 13 20 13 20'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('FEB 9') == 'yup'\nassert solution('JAN 1') == 'nope'\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('FEB 9') == 'yup'\nassert solution('JUN 21') == 'nope'\nassert solution('JUN 1') == 'nope'\nassert solution('MAY 1') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('FEB 9') == 'yup'\nassert solution('JAN 1') == 'nope'\nassert solution('FEB 13') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 12') == 'nope'\nassert solution('OCT 16') == 'nope'\nassert solution('OCT 9') == 'nope'\nassert solution('OCT 10') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"DEC 25\") == \"nope\"\nassert solution(\"JAN 1\") == \"nope\"\n\n## Test Case 3\n\nDate: October 25\n\nExpected: yup\n\nDate: JAN 1\n\nExpected: nope\n\n## Test Case 4\n\nDate: FEB 9\n\nExpected: nope\n\nDate: OCT 25\n\nExpected: yup\n\nDate: DEC 12\n\nExpected: nope\n\nDate: JAN 31\n\nExpected: nope\n\nDate: DEC 24\n\nExpected: nope\n\nDate: JAN 1\n\nExpected: nope\n\n## Test Case 5\n\nDate: FEB 12\n\nExpected: nope\n\nDate: FEB 28\n\nExpected: nope\n\nDate: FEB 12\n\nExpected: nope\n\n## Test Case 6\n\nDate: FEB 1\n\nExpected: nope\n\nDate: FEB 2\n\nExpected: yup\n\nDate: FEB 3\n\nExpected: nope\n\nDate: FEB 4\n\nExpected: nope\n\nDate: FEB 5\n\nExpected: yup\n\nDate: FEB 6\n\nExpected: nope\n\nDate: FEB 7\n\nExpected: nope\n\nDate: FEB 8\n\nExpected: yup\n\nDate: FEB 9\n\nExpected: nope\n\nDate: FEB 10\n\nExpected: nope\n\nDate: FEB 11\n\nExpected: nope\n\nDate: FEB 12\n\nExpected: yup\n\nDate: FEB 13\n\nExpected: nope\n\nDate: FEB 14\n\nExpected: yup\n\nDate: FEB 15\n\nExpected: nope\n\nDate: FEB 16\n\nExpected: nope\n\nDate: FEB 17\n\nExpected: nope\n\nDate: FEB 18\n\nExpected: yup\n\nDate: FEB 19\n\nExpected: nope\n\nDate: FEB 20\n\nExpected: nope\n\nDate: FEB 21\n\nExpected: yup\n\nDate: FEB 22\n\nExpected: nope\n\nDate: FEB 23\n\nExpected: nope\n\nDate: FEB 24\n\nExpected: nope\n\nDate: FEB 25\n\nExpected: yup\n\nDate: FEB 26\n\nExpected: nope\n\nDate: FEB 27\n\nExpected: nope\n\nDate: FEB 28\n\nExpected: yup\n\nDate: FEB 29\n\nExpected: nope\n\nDate: FEB 30\n\nExpected: nope\n\nDate: FEB 31\n\nExpected: nope\n\nDate: JAN 1\n\nExpected: nope\n\nDate: JAN 2\n\nExpected: nope\n\nDate: JAN 3\n\nExpected: yup\n\nDate: JAN 4\n\nExpected: nope\n\nDate: JAN 5\n\nExpected: nope\n\nDate: JAN 6\n\nExpected: nope\n\nDate: JAN 7\n\nExpected: nope\n\nDate: JAN 8\n\nExpected: nope\n\nDate: JAN 9\n\nExpected: nope\n\nDate: JAN 10\n\nExpected: nope\n\nDate: JAN 11\n\nExpected: nope\n\nDate: JAN 12\n\nExpected: nope\n\nDate: JAN 13\n\nExpected: nope\n\nDate: JAN 14\n\nExpected: nope\n\nDate: JAN 15\n\nExpected: nope\n\nDate: JAN 16\n\nExpected: yup\n\nDate: JAN 17\n\nExpected: nope\n\nDate: JAN 18\n\nExpected: nope\n\nDate: JAN 19\n\nExpected: yup\n\nDate: JAN 20\n\nExpected: nope\n\nDate: JAN 21\n\nExpected: nope\n\nDate: JAN 22\n\nExpected: nope\n\nDate: JAN 23\n\nExpected: nope\n\nDate: JAN 24\n\nExpected: nope\n\nDate: JAN 25\n\nExpected: nope\n\nDate: JAN 26\n\nExpected: yup\n\nDate: JAN 27\n\nExpected: nope\n\nDate: JAN 28\n\nExpected: nope\n\nDate: JAN 29\n\nExpected: nope\n\nDate: JAN 30\n\nExpected: nope\n\nDate: JAN 31\n\nExpected: nope\n\nDate: DEC 31\n\nExpected: nope\n\nDate: DEC 30\n\nExpected: nope\n\nDate: DEC 29\n\nExpected: nope\n\nDate: DEC 28\n\nExpected: nope\n\nDate: DEC 27\n\nExpected: yup\n\nDate: DEC 26\n\nExpected: nope\n\nDate: DEC 25\n\nExpected: yup\n\nDate: DEC 24\n\nExpected: nope\n\nDate: DEC 23\n\nExpected: nope\n\nDate: DEC 22\n\nExpected: nope\n\nDate: DEC 21\n\nExpected: nope\n\nDate: DEC 20\n\nExpected: nope\n\nDate: DEC 19\n\nExpected: nope\n\nDate: DEC 18\n\nExpected: nope\n\nDate: DEC 17\n\nExpected: nope\n\nDate: DEC 16\n\nExpected: nope\n\nDate: DEC 15\n\nExpected: nope\n\nDate: DEC 14\n\nExpected: nope\n\nDate: DEC 13\n\nExpected: nope\n\nDate: DEC 12\n\nExpected: nope\n\nDate: DEC 11\n\nExpected: nope\n\nDate: DEC 10\n\nExpected: nope\n\nDate: DEC 9\n\nExpected: nope\n\nDate: DEC 8\n\nExpected: nope\n\nDate: DEC 7\n\nExpected: nope\n\nDate: DEC 6\n\nExpected: nope\n\nDate: DEC 5\n\nExpected: nope\n\nDate: DEC 4\n\nExpected: nope\n\nDate: DEC 3\n\nExpected: nope\n\nDate: DEC 2\n\nExpected: nope\n\nDate: DEC 1\n\nExpected: nope\n\nDate: FEB 29\n\nExpected: yup\n\nDate: FEB 28\n\nExpected: nope\n\nDate: FEB 27\n\nExpected: nope\n\nDate: FEB 26\n\nExpected: yup\n\nDate: FEB 25\n\nExpected: nope\n\nDate: FEB 24\n\nExpected: yup\n\nDate: FEB 23\n\nExpected: nope\n\nDate: FEB 22\n\nExpected: nope\n\nDate: FEB 21\n\nExpected: nope\n\nDate: FEB 20\n\nExpected: yup\n\nDate: FEB 19\n\nExpected: nope\n\nDate: FEB 18\n\nExpected: nope\n\nDate: FEB 17\n\nExpected: nope\n\nDate: FEB 16\n\nExpected: yup\n\nDate: FEB 15\n\nExpected: n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"OCT 31\") == \"yup\", \"Incorrect solution\""
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 01') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"DEC 25\") == \"nope\"\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''OCT 31''') == 'yup', 'Should print yup on October 31'\nassert solution('''SEP 27''') == 'nope', 'Should print nope on September 27'\nassert solution('''JAN 28''') == 'nope', 'Should print nope on January 28'\n\n------Hints------\n1. Remember to use the right quote\n2. Use python built-ins\n3. See the sample tests for examples\n'''\n)"
    },
    {
        "number": 4866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 31') == 'nope'"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.honi#.\\n#.oker#.\\n#.nera#.\\n#.irak#.\"\nassert solution(\"5 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\nakan\") == \"#.#.#.#.\\n#.honi#.\\n#.nera#.\\n#.irak#.\\n#.akan#.\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 2\") == \"#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 3 4\ncba\ndbb\nbab\ncba\n''') == '#.cba.#.\\n.cba.c#.\\n.dbb.b#.\\n#.cba.c#.\\n'\n\nassert solution('''\n1 1 3 5\n1 2 3 5\n1 1 3 5\n1 1 3 5\n1 1 3 5\n1 1 3 5\n''') == '#.#.##.\\n###.##.\\n##.##.##\\n##.##.##\\n###.##.\\n##.##.##\\n#.##.##.\\n#.#.##.##\\n'''"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\\n\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.##\"\nprint(solution(input()))\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n2 2 2 2\nhoni\noker\nnera\nirak\n''') == '#.#.#.#.\\n.honi#.\\n#.oker#.\\n#.nera#.\\n#.irak#.\\n.#.#.#.#.\\n.#.#.#.#.'\n\nassert solution('''\n4 4\n1 1 1 1\naaaa\naaab\naaa\n''') == '#.aaab#.\\n.aaa#.\\n#.aaaa#.\\n#.aaa#.\\n#.aaab#.\\n#.aaab#.\\n#.aaab#.'\n\nassert solution('''\n4 4\n1 1 1 1\naaaa\naaab\naaac\n''') == '#.aaab#.\\n#.aaab#.\\n#.aaa#.\\n#.aaa#.\\n#.aaab#.\\n#.aaab#.\\n#.aaac#.'\n\nassert solution('''\n4 4\n1 1 1 1\naaaa\naaab\naaac\n''') == '#.aaab#.\\n#.aaa#.\\n#.aaa#.\\n#.aaaa#.\\n#.aaaa#.\\n#.aaab#.\\n#.aaab#.\\n#.aaac#.'\n\nassert solution('''\n3 4\n1 1 1 1\naaaa\naaab\n''') == '#.aaab#.\\n#.aaa#.\\n#.aaa#.\\n#.aaa#.'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2 2') == '#.#.#.#.\\n.honi#.\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#'\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"5\") == \"\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 2 2') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.#'\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \\\n    \"+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|:p:|.p.|:p:|.p.|:p.|:p.|:::|.p.|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|...|:::|.n.|:::|...|:::|...|:p:|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|:::|...|:::|...|:::|...|:::|...|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|...|:::|...|:::|...|:::|...|:::|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|:P.|...|:::|...|:::|...|:::|...|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\" \\\n    \"\\n|:R:|.N.|:B:|.Q.|:K.|.B.|:::|.R.|\" \\\n    \"\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White:.r..b..:q:.k..n..r:.:p:.p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p..p"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"Black: ke1,qd1,ra1,rh1,bc1,bg1,nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: ke8,qd8,ra8,rh8,bc8,bg8,nb8,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"Black: Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"Black: Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == '+---+---+---+---+---+---+---+---+'\nassert solution('Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '|:p:|.p.|:p:|.p.|:p.|:::|.p.|'\n\"\"\"\n\nimport re\nimport sys\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P.|:P.|.P.|:P.|.P.|:P.|:P.|\\n+---+---+---+---+---+---+---+---+\\n|.R.|.N.|:B.|.Q.|.K.|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n'\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p.|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P.|:::|.P.|:::|...|:P.|.P.|:P.|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R.|.N.|:B.|.Q.|:K.|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\n    "
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K.|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\" == stdout.getvalue().strip()\n\n\"\"\"\n\nstdin = \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: KE1,QD1,RHE1,BHE1,BC1,BF1,NHE1,AE2,CE2,DE2,FE2,GH2,HI2,AE3,EI4\\nBlack: KQE8,QDE8,RAQ8,RAR8,RC8,RG8,CN6,AA7,AB7,AC7,AD7,AE7,AF7,AH7,AH6\"\nprint(\"Congratulations! All test cases passed!\")\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.000000 4.000000') == \"Diablo is happy!\"\n\n'''\n\na, b = map(float, input().split())\nn = int(input())\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1.000000 4.000000''') == 'Diablo is happy!'\nassert solution('''0.000000 4.000000''') == 'Need more materials!'\nassert solution('''0.99999 4.000000''') == 'Need more materials!'\nassert solution('''0.000000 0.000000''') == 'Need more materials!'\nassert solution('''0.000000 4.000000''') == 'Need more materials!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5.000000 8.000000\") == \"Need more materials!\"\nassert solution(\"1.000000 1.000000\") == \"Diablo is happy!\""
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.000000 3.000000\") == \"Need more materials!\"\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.500000 8.000000') == 'Need more materials!'\nprint(solution())\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('3.000000 4.000000') == 'Need more materials!'\n\n'''\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('4.000000 6.000000') == 'Need more materials!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('0.000000 1.000000') == 'Need more materials!'"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.000000 2.000000') == 'Need more materials!'\nprint(solution(input()))"
    },
    {
        "number": 4869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 10 2 1') == '6'\nassert solution('5 1 10 5 1') == 'use the stairs'\nassert solution('1 2 10 2 1') == '7'\nassert solution('7 1 10 5 1') == 'use the stairs'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([10, 1, 10, 2, 1]) == 'use the stairs'\nassert solution([8, 7, 6, 5, 4, 3, 2, 1, 1]) == 'use the stairs'\nassert solution([2, 1, 5, 4, 3, 2, 1, 1]) == '6'\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 7 3 1\") == \"6\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"2 2 2 2 2 2 2 2 2\") == \"use the stairs\"\n\ns = input().split()"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('2 2 3 4 3') == 'use the stairs'\nassert solution('5 3 7 6') == 'use the stairs'\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 1 10 2 1\n''') == '6'\n\nassert solution('''\n10 1 10 2 3\n''') == 'use the stairs'\n\nassert solution('''\n1 1 100 100\n''') == 'use the stairs'\n\nassert solution('''\n1 1 100 100\n''') == 'use the stairs'\n\nassert solution('''\n1 1 100 100\n''') == 'use the stairs'"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 10 2 1') == '6'\nassert solution('10 1 100 2 1') == 'use the stairs'"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"use the stairs\"\n\n\"\"\"\n\nimport sys\nimport math\n\nfloors = int(sys.stdin.readline())\nstart = int(sys.stdin.readline())\ngoal = int(sys.stdin.readline())\nup = int(sys.stdin.readline())\ndown = int(sys.stdin.readline())"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 1 10 2 1') == \"6\"\nassert solution('20 20 20 20 20') == \"use the stairs\"\nassert solution('5 5 5 5 5') == \"use the stairs\"\nassert solution('10 1 10 2 1') == \"6\"\nassert solution('10 20 20 20 20') == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1 10 2 1\\n') == '6\\n'\nassert solution('10 5 10 4 2\\n') == 'use the stairs\\n'\n\n'''"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"128.8\"\nassert solution(\"1\") == \"89.0\""
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '128.8'\nassert solution('3 1 2 3 4') == '89.0'\nassert solution('3 1 2 3 4 -1') == '0'"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"128.8\"\nassert solution(\"2\") == \"89.0\"\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"128.8\"\nassert solution(\"1\") == \"89.0\"\nassert solution(\"3\") == \"128.8\""
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\") == \"89.06666666666666\"\nassert solution(\"2\\n4\\n1\") == \"128.8\"\nassert solution(\"1\\n3\\n6\") == \"85.3\"\nassert solution(\"3\\n6\\n1\") == \"85.3\"\nassert solution(\"5\\n3\\n2\") == \"86.0\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n500\n120\n75\n''') == '128.8'\nassert solution('''\n6\n500\n567\n562\n527\n498\n310\n''') == '89.06666666666666'\nassert solution('''\n7\n56\n51\n74\n95\n57\n73\n''') == '89.06666666666666'\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '128.8'\nassert solution('1000000') == '89.0'\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n500\n120\n75\n\"\"\") == \"128.8\", \"First\"\nassert solution(\"\"\"\n3\n20\n100\n12\n\"\"\") == \"19.5\", \"Second\""
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"128.8\"\nassert solution(\"5\") == \"89.0\"\nassert solution(\"4\") == \"80.0\"\nassert solution(\"6\") == \"86.8\"\nassert solution(\"2\") == \"80.0\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '128.8'\nassert solution('5') == '89.06666666666666'\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\""
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 45 65 84 346\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('5\\n1 45 65 84 346') == '4'\nassert solution('7\\n1 45 65 84 346 590 679 234') == '2'\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 45 65 84 346\") == \"4\"\nassert solution(\"6 12 18 42 64 36 9 48 47\") == \"3\"\nassert solution(\"20\") == \"1\""
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n1 45 65 84 346\") == \"4\"\nassert solution(\n    \"7\\n1 42 456 53 452 454 464 1 2 3\") == \"2\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nassert solution(\"8\\n1 1 2 1 1 1 2 2 2 2 1\\n\") == \"2\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 45 65 84 346\n''') == '4'\nassert solution('''10\n1 45 65 84 346\n1 14 60 10 17 58\n1 50 76 48 75 18\n1 79 88 35 15 13\n1 97 94 60 14 60\n1 84 40 47 96 82\n1 35 72 17 98 78\n1 97 83 40 57 42\n1 57 76 87 35 40\n1 56 40 27 60 16\n1 68 79 17 88 44\n1 95 58 69 61 16\n1 80 37 59 88 77\n1 79 48 61 59 59\n1 99 55 68 58 43\n1 87 63 56 70 52\n1 95 50 69 69 52\n1 40 46 55 68 46\n1 55 49 61 32 41\n1 55 69 71 50 41\n1 56 69 72 35 41\n1 56 30 35 41 32\n1 55 72 57 35 41\n1 56 30 41 37 35\n1 56 30 35 41 32\n1 57 30 41 32 37\n1 70 30 37 35 41\n1 70 30 35 41 32\n1 70 30 37 35 41\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32\n1 70 30 35 41 32"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\n\nassert solution('1') == '0'\n\nassert solution('2') == '0'\n\nassert solution('5') == '4'\n\nassert solution('10') == '3'"
    },
    {
        "number": 4872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1 45 65 84 346\") == \"5\"\nassert solution(\"3 9 5 7 10\") == \"2\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 3\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '0'\nassert solution('7 5\\n#######\\n#.TGG#\\n#..TGG#\\n#..TGG#\\n#.TGG#\\n#######') == '1'\nassert solution('7 6\\n#######\\n#.TGG#\\n#.TGG#\\n#..TGG#\\n#.TGG#\\n#.TGG#\\n#.TGG#\\n#.TGG#\\n#######') == '2'\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n########\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\n\"\"\"\n\nfrom collections import deque\n\nh, w = map(int, input().split())\n\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 4\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\nassert solution('5 4') == '3'\nassert solution('8 4') == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\nassert solution(\"7 4\") == \"1\"\nassert solution(\"#######\") == \"1\"\nassert solution(\"#######\") == \"1\"\nassert solution(\"#P.GTG#\") == \"0\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 4\n#######\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 50') == '5'\nassert solution('13 50') == '5'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('13 50') == '5'\nassert solution('1 10') == '1'\nassert solution('1 20') == '1'\nassert solution('1 50') == '1'\nassert solution('1 60') == '1'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13 50') == '5'\nassert solution('5 10') == '2'\nassert solution('5 5') == '2'\nassert solution('13 18') == '4'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$_$____$___$__$__$___$_$__$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == '5'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\\\n13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == '5'\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n\n----------------------------------------------------------------------\nPubnite is an epic battle royale game featuring unique gameplay mechanics such as dancing! Every player enjoys dancing in the middle of fierce and brutal tactical firefights.\n\nThis unique feature has made Pubnite the second most popular game on the internet, next to none but BeeLizard\u2019s first person shooter game OvalWatch! Epig Games, the developer of Pubnite, is thinking of pulling one last trick to outsell OverWatch, and defeat its competitor, BeeLizard, once and for all.\n\nAnnouncing Epig Games\u2019s new limited-time global event: Epig Dance Off!\n\nIn Epig Dance Off, players can invent dance moves, videotape themselves dancing and submit their dance moves to Epig Games, where Epig Games will rate the moves. At the end of the event, Epig Games will announce the moves with the best ratings, and incorporate those dance moves into the game. The inventors of the moves will be crowned Supreme Winners of Epig Dance Off, and there is no greater glory than that.\n\nEpig Games ran into an issue. Too many players are eager to join the Epig Dance Off and there are too many submissions to rate. The incredibly smart designers at Epig Games came up with yet another ingenious idea \u2013 they shall use software to determine the rating of a dance!\n\nHaving not enough engineering power at Epig Games, they have hired an intern \u2013 you \u2013 to write software that rates a dance!\n\nThe rating system is designed as follows: Each dance is composed of a sequence of moves. The rating of the dance is the number of moves performed in the sequence.\n\nThe dance is described by a grid with $N$ rows and $M$ columns. Each character in the grid is either a \u2018$\u2019, denoting the dancer is seen in this position, or a \u2018_\u2019, denoting the dancer is not seen in this position. When there is a single blank column, that denotes a frame is completed and the dancer has completed one move, where a blank column is defined to contain only \u2018_\u2019.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$. It is guaranteed that $1\\leq N, M\\leq 2000$.\n\nThe next $N$ lines contains $M$ characters each. It is guaranteed that each character is either \u2018_\u2019or \u2018$\u2019. It is also guaranteed that both the first and last columns are non-blank, and no two consecutive columns are both blank.\n\n-----Output-----\nOutput a single integer $T$, the rating of the dance, i.e. number of dance moves in the recording.\n\n-----Examples-----\nSample Input:\n13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\nSample Output:\n5\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()[0:-1]\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"13 50\") == \"5\"\n\"\"\"\n\nfrom itertools import product\n\nn, m = map(int, input().split())\nl = []\nfor _ in range(n):\n    l.append(list(input()))\n\nmove = ['L', 'R', 'U', 'D', 'F']\nres = 0\nfor i in range(1, n-1):\n    for j in range(1, m-1):\n        if l[i][j]!= '_':\n            continue\n        else:\n            for mv in move:\n                if l[i+1][j] == '_' and l[i-1][j] == '_' and l[i][j+1] == '_' and l[i][j-1] == '_':\n                    l[i][j] = mv\n                    res += 1\nprint(res)\n\n\"\"\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 3\") == \"4\"\nassert solution(\"5 4\") == \"3\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('this is a test') == 'thay is a etst'\nassert solution('and there was nothing but silence?') == 'and there was nothing but silence? yay'\nassert solution('someones favorite book is called \"the old man and the sea\"') =='someones favotite book is called \"theoldmanseay\"'\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"when in the course of human events\") == \"waay in the when when tyne yna re hou evr\"\nassert solution(\"a man a plan a canal panama\") == \"a eway am a lep a nay a pnay anlatama\"\nassert solution(\"a man a plan a canal panama\") == \"a eway am a lep a nay a pnay anlatama\"\nassert solution(\"a man a plan a canal panama\") == \"a eway am a lep a nay a pnay anlatama\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"python is a great language\") == \"yay atinlay eay oay spay agitay oay ancay ay\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"i cant speak pig latin\"\n) == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\n    \"and i can speak pig latin\"\n) == \"anciyay yay antcay eakspay igpay atinlay\"\nassert solution(\n    \"i ate a bug\"\n) == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\n    \"aaa bbb ccc\"\n) == \"aaay bbcy ccc\"\n\"\"\"\nimport re\n\nwith open('dataset_244_8.txt') as f:\n    lines = f.readlines()"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n'''\n\n'''\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('the quick brown fox jumps over the lazy dog') == 'heay tacay oufax ymay otay oxbyay gutax aoyy bfay ekcay epay atinxay ymay otay oxbyay gutax aoyy'\nassert solution('    i cant speak pig latin   ') == 'iyay antcay eakspay igpay atinlay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''a bc d ef gh ij kl mn op q r\n\nas a s t uv w x y z''') == 'ay ibc dyjel opnay jilmneunxay uvywzaxqz'\n\nassert solution('''a b c d e f g h i j k l m n o p q r s t\n\nuvw x y z''') == 'ay ibc dyjel opnay jilmneunxay uvywzaxqz'\n\nassert solution('''a b c d e f g h i j k l m n o p q r s t u v w x y z''') == 'ay ibc dyjel opnay jilmneunxay uvywzaxqz'\n\nassert solution('''abcdefghijklmnopqrstuvwxyz''') == 'ay ibc dyjel opnay jilmneunxay uvywzaxqz'\n\nassert solution('''abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc ab"
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nprint(solution('''\ni dont speak pig latin\nwhy am i a bad girl?\ni am in the gfs\n'''))\n\n\"\"\"\n1\ne yt yay\nthnks dnt\nind\ni aey\nsd\nlkf\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('hello world') == 'elloh werld'\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('beegs lie a booger and now een booger is dee beegs') == 'beegs lie a booger and now een booger is dee beegs'"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n2\n3\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\nassert solution(\n'''\n2\n3\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'Anywhere is fine I guess'\nassert solution(\n'''\n1\n3\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'Anywhere is fine I guess'\n''')\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'Anywhere is fine I guess', solution('3')\nassert solution('2') == 'Anywhere is fine I guess', solution('2')\nassert solution('1') == 'Anywhere is fine I guess', solution('1')\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\nq\\npotatoes\\n3\\nnymble\\n3\\npancakes\\n4\\npea soup\\n5\\npunsch\\n') == 'nymble'\nassert solution('2\\n3\\nq\\npotatoes\\n3\\nsalad\\n3\\npea soup\\n4\\npancakes\\n') == 'Anywhere is fine I guess'\nassert solution('1\\n2\\nq\\npotatoes\\n3\\nAnywhere is fine I guess\\n') == 'Anywhere is fine I guess'\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n3\nb\nm\n\"\"\") == \"b\"\n\nassert solution(\"\"\"\n5\n2\nt\nh\ns\ns\n\"\"\") == \"t\"\n\nassert solution(\"\"\"\n2\n3\nl\ni\n\"\"\") == \"l\"\n\nassert solution(\"\"\"\n2\n2\nt\nt\n\"\"\") == \"Anywhere is fine I guess\"\n\nassert solution(\"\"\"\n7\n3\nc\nb\np\nl\no\no\n\"\"\") == \"l\""
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\n\nassert solution(\n\"\"\"\n1\nq\npancakes\n\"\"\") == \"Anywhere is fine I guess\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\nassert solution('''\n2\n1\n''') == 'Anywhere is fine I guess'\nassert solution('''\n2\n3\ntomato\nlettuce\nbanana\npancakes\n''') == 'Anywhere is fine I guess'\nassert solution('''\n5\n5\nsalt\nsugar\nbanana\npotatoes\npancakes\n''') == 'Anywhere is fine I guess'\nassert solution('''\n5\n8\nsugar\nsalt\nbanana\nsalt\nbanana\npotatoes\npancakes\n''') == 'banana'\n'''\n"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"\n1\n1\ns\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nanywhere is fine I guess\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n\n'''"
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"2\n1\npotatoes\nsalad\n3\nnymble\npancakes\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n\nassert solution(\"\"\"2\n2\nnymble\nsalad\n3\npea soup\npancakes\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n\nassert solution(\"\"\"2\n1\npea soup\nsalad\n3\nnymble\npancakes\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n\nassert solution(\"\"\"2\n2\nq\nsalad\n3\nnymble\npancakes\npunsch\n\"\"\") == \"Anywhere is fine I guess\""
    },
    {
        "number": 4876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npunsch\\n') == 'nymble'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 0 15') == '3'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == \"3\""
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"3 5 0 2\") == \"2\"\nassert solution(\"5 5 0 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 0 15\n''') == '3'\nassert solution('''\n5 0 15\n''') == '3'\n\n'''\n--- Day 10: Adapter Array ---\nYour flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan.\n\nThe shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look.\n\nTheir password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.\n\nTo try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set.\n\nBecause the shopkeeper isn't a great teacher, they've written the list of possible passwords to a text file in an unknown format.\n\nUnfortunately, the format is exactly what they did: it is a list of lines of the form password:hashtag where password is a lowercase hexadecimal string of variable length and hashtag is an 8-character string of hexadecimal digits.\n\nThe file is not that big; it contains only the wrong passwords.\n\nThe shopkeeper thinks this format is an important security feature; he wants you to decode it.\n\nTo do so, your first step is to find the positions of all of the passwords.\n\nGiven the above example of passwords and their hashes, the first step would be to find the positions of all of the passwords. The line above contains both the corrupted and correct passwords, separated by a comma. This line looks like this:\n\nfbefbfbeffefbfbe,fbefbfbeffe3ff,ffefbfbeffefbf,fbfbfbeffeef3f,efbfbeffe3ffbf\n\nHere, the password \"fbefbfbeffe3ff\" appears first, then \"fbfbfbeffe3ffbf\", and finally \"efbfbeffe3ffbf\". These are all of the possible passwords, so you can proceed.\n\nThe next step is to find the positions of the passwords that begin with \"f\", by searching for the lines that begin with \"f\" in the list; these lines contain one of the possible passwords.\n\nIn the above example, the line that begins with \"f\" is the line containing the password \"f\". The next line that begins with \"f\" is the line containing the password \"ff\". This format makes it possible to iterate over all of the possible passwords.\n\nOnce you have found the positions of all of the possible passwords, you have all of the information you need to decode the list. The line above, for example, contains the indexes of the correct passwords in this list:\n\nfbefbfbeffe3ff,ffefbfbeffe3ff,efbfbeffe3ffbf\n\nThe first password, fbefbfbeffe3ff, appears at index 0. The second password, fbfbfbeffe3ffbf, appears at index 3. The third password, efbfbeffe3ffbf, appears at index 4.\n\nTo decode the list, you need to find the indices of each of the possible passwords. The line above, for example, contains the indexes of the passwords as they appear in the list:\n\n0,1,2,3,4\n\nThe index of each password is its position in the list. So the indices of the first password are 0, the second is 1, and so on.\n\nThe last step is to decode the list. Each of the lines contains a comma and then the index of one of the possible passwords. To find the index, you need to count the number of commas in the line (remember that every password has at least 1 comma). If the index of the password appears in the line multiple times, you need to add each comma to its index.\n\nFor example, if the line above is \"ff,fff\", the password \"ff\" appears twice, so its index is 2. If the line above is \"f,f,f\", the password \"f\" appears 3 times, so its index is 3.\n\nAs you need to add up the indices, you need to add up each comma's index. So in the above example, the final index of the password \"ff\" is 1+2+3 = 6.\n\nFinally, the answer is the sum of the indices of each of the possible passwords.\n\nTask\n\nGiven a line of comma-separated passwords, determine the number of possible passwords.\n\nInput Format\n\nA single line of comma-separated passwords.\n\nConstraints\n\nThere will be no more than 50,000 passwords, no password will be larger than 16 characters, and the passwords contain only lowercase letters from the set {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z}\n\nSample Input\n\nf, f, f\nSample Output\n\n3\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 0 15\\n') == '3'"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('4 1 5') == '4'\nassert solution('3 0 3') == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 0 15') == '3'\nassert solution('5 0 5') == '1'\nassert solution('0 10 0') == '1'\n'''"
    },
    {
        "number": 4877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11 15') == '19'"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n11\n15\n''') == '19'\nassert solution('''\n11\n20\n''') == '21'\nassert solution('''\n1\n11\n''') == '11'\nassert solution('''\n1\n10\n''') == '10'\nassert solution('''\n2\n5\n''') == '7'\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 15') == '19'\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline()[:-1]\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(int((a + b) / 2))\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n2''') == '1'\nassert solution('''1 1\n2''') == '3'\nassert solution('''2 2\n1''') == '2'\nassert solution('''11 15\n1''') == '10'\nassert solution('''13 32\n2''') == '3'\n\n'''"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 15') == '19', \"error in solution\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == str(20)\nSample Input:\n-1 2\nSample Output:\n1\n\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint('Solution:', solution(input()))\n"
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == \"19\""
    },
    {
        "number": 4878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 15') == '19'\nassert solution('100 -1') == '99'\nassert solution('-2 -3') == '1'\nassert solution('11 15') == '19'\n'''\n\na, b = map(int, input().split())"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North East\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n        'North South East West'\n        ) == 'Yes'\nassert solution(\n        'North East South'\n        ) == 'No'\nassert solution(\n        'North West South'\n        ) == 'Yes'"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('South West East') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"North South South West East North East North South South East North West\"\n) == \"Yes\"\n\nassert solution(\n    \"North South North South East East North East North South North South East East\"\n) == \"No\"\n\nassert solution(\n    \"North South South East East North East North South South East East North South South East East\"\n) == \"No\"\n\nassert solution(\n    \"North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North North"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('North West South') == 'Yes'\nassert solution('North East South') == 'No'\nassert solution('East North South') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"North West South\") == \"Yes\"\nassert solution(\"East South West\") == \"Yes\"\nassert solution(\"East South East\") == \"No\"\nassert solution(\"North East North\") == \"No\"\nassert solution(\"East South East\") == \"Yes\""
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nSouth West\nEast''') == 'Yes'\nassert solution('''\nNorth West\nSouth East\nSouth East''') == 'No'\nassert solution('''\nNorth East\nNorth East''') == 'Yes'\nassert solution('''\nSouth\nNorth East\nNorth East''') == 'No'\nassert solution('''\nNorth East\nNorth East''') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''North\nSouth\nEast''') == 'Yes'\nassert solution('''North\nEast\nEast''') == 'No'\nassert solution('''North\nNorth\nEast''') == 'Yes'\nassert solution('''North\nWest\nEast''') == 'Yes'\nassert solution('''North\nEast\nNorth''') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"North North North South South South\") == \"Yes\"\nassert solution(\"North North North South South South North\") == \"No\"\nassert solution(\"North North North South South South North South\") == \"Yes\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"A\") == \"A\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"MARYISTHEWORLD\") == \"MARYISTHEWORLD\"\nassert solution(\"WEWEREWELCOMEWITHYOU\") == \"WEWEREWELCOMEWITHYOU\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 16\nagain\npirpumsemoystoal''') == \"marywasnosyagain\"\nassert solution('''6 2\na b c d e f\ng''') == \"g\"\n\n'''\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n' * 100) == 'drujfo\\n'\nassert solution('4 8 10\\n' * 100) =='mzzlzdud\\n'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) =='marywasnosyagain'\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 16 \\n again \\n pirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 20\\nabcd\\nfedcba\\nabcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal\\n') =='marywasnosyagain'\nassert solution('5 2\\na\\nab') == 'a'\nassert solution('5 2\\na\\nab') == 'a'\nassert solution('5 2\\nab\\nac') == 'ac'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '3', 'First'\nassert solution('5\\nabcdefghijklmnopqrstuvwxyz\\n') == 'cdefghijklmnopqrstuvwxyz', 'Second'\nassert solution('20\\nzvqwdltjxjdgzyvgdkgnkoyzzqczvbw\\n') == 'zvqwdltjxjdgzyvgdkgnkoyzzqczvbw', 'Third'\nassert solution('25\\nabcdefghijklmnopqrstuvwxyz\\n') == 'abcdefghijklmnopqrstuvwxyz', 'Fourth'\nassert solution('25\\nzyqxjruakvjgdckvhgjkihkzvj\\n') == 'zyqxjruakvjgdckvhgjkihkzvj', 'Fifth'\n"
    },
    {
        "number": 4880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\npirpumsemoystoal\\n'\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Even'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Even'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\n'''\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Even'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\nassert solution('4') == 'Either'\nassert solution('5') == 'Either'\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'Odd'\nassert solution('4') == 'Even'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == \"Either\"\nassert solution('2') == \"Either\"\nassert solution('3') == \"Even\"\nassert solution('4') == \"Odd\"\nassert solution('5') == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'Even'\nassert solution('10') == 'Either'\nassert solution('12') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Even\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Either\""
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n4') == 'Even'\nassert solution('5') == 'Odd'\nassert solution('10') == 'Either'"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Even\"\n\n\"\"\"\n\ninput_ = input()\ninput_ = int(input_)\n"
    },
    {
        "number": 4881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Either\"\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n') == '1'\nassert solution('5\\n314\\n1\\n') == '3'\nassert solution('5\\n5926\\n1\\n') == '4'\nassert solution('5\\n35897\\n1\\n') == '5'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n5') == '4\\n1'\nassert solution('0') == '1'\nassert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('-1') == '1'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n314\n1\n5926\n5\n35897\n''') == '3'\nassert solution('''5\n325\n1\n6\n5\n35897\n''') == '1'\nassert solution('''5\n3634\n1\n6\n5\n35897\n''') == '4'\nassert solution('''5\n323\n1\n6\n5\n35897\n''') == '1'\nassert solution('''5\n327\n1\n6\n5\n35897\n''') == '2'\n\n'''"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n314') == '3'\nassert solution('4\\n1\\n11') == '4'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('1') == '1'\nassert solution('314') == '3'\nassert solution('5926') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('314') == '3'\nassert solution('5') == '4'\nassert solution('35897') == '4'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '2'\nassert solution('10') == '1'\nassert solution('10') == '4'\nassert solution('10') == '4'\nassert solution('10') == '2'"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n314\n1\n5926\n5\n35897\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n3\n1\n5\n35897\n\"\"\") == \"1\"\nassert solution(\"\"\"\n20\n3\n1\n5\n35897\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1000\n3\n1\n5\n35897\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('314') == '3'\nassert solution('1') == '1'\nassert solution('5926') == '4'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n314\n1\n5926\n5\n35897\n''') == '3'\nassert solution('''\n5\n314\n1\n5926\n5\n35897\n''') == '1'\nassert solution('''\n5\n314\n1\n5926\n5\n35897\n''') == '4'\nassert solution('''\n5\n314\n1\n5926\n5\n35897\n''') == '5'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9 5\\nc t\\ni r\\k p\\no c\\r o\\r t e\\r t f\\r u h\\r w p\\nwe we\\ncan the\\nwork people\\nit of\\out the') == 'yes'\nassert solution('5 5\\nt o\\nq\\nf\\nt\\n') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\r o\\r t e\\r t f\\r u h\\rw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n\") == \"no\"\nassert solution(\"6 7\\nt w e\\nj e w\\nk i s\\nl e w\\no p\\nk i s\\nl e w\\nk i s\\ns g m\\nk o p\\nl e w\\nm e w\\nk i s\\nl e w\\nk o p\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\nl e w\\nm e w\\nl e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\nm e w\\nk i s\\nl e w\\nm e w\\nk o p\\nl e w\\nm e w\\nm e w\\l e w\\"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\nk e a\na r\nc i\ni n\no t\n''') == 'yes'\nassert solution('''\n4 2\ni a\na n\nc a\nc i\n''') == 'yes'\n'''\n\n\n\nimport math"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\nou c\\r o r\\n t e\\t f\\tu h\\tw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"yes\"\nassert solution() == \"no\"\nassert solution() == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\n r o\\n t e\\n t f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nthe out\\n\") == \"yes\""
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the''') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 2\\nc t') == 'yes\\nno'\nassert solution('12 1\\nc t') == 'yes\\nno'\nassert solution('10 1\\nc t') == 'yes'\nassert solution('2 2\\nc t') == 'no'\nassert solution('13 1\\nc t') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\"\"\") == \"yes\"\nassert solution(\"\"\"9 5\ni r\nc t\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\"\"\") == \"no\"\nassert solution(\"\"\"9 5\ni r\nc t\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\"\"\") == \"no\"\nassert solution(\"\"\"9 5\ni r\nc t\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\"\"\") == \"no\"\nassert solution(\"\"\"9 5\ni r\nc t\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\"\"\") == \"no\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\nc\\nt') == 'yes'\nassert solution('3 3\\nt\\te\\tc\\to') == 'yes'\nassert solution('4 3\\nt\\te\\tc\\to\\tq\\tc') == 'no'\nassert solution('5 4\\n\\tq\\tc\\to\\tc\\to\\tc\\tc\\tc\\tq\\tc') == 'no'\nassert solution('7 7\\nq\\tc\\to\\tc\\to\\tc\\to\\tc\\tc\\tc\\tc') == 'yes'"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"carrots?\\nbunnies\") == \"1\"\nassert solution(\"carrots?\\nbunnies\\nbunnies\") == \"2\"\nassert solution(\"carrots?\\nbunnies\\ncarrots\") == \"3\"\nassert solution(\"carrots?\\nbunnies\\ncarrots\\ncarrots\") == \"4\"\nassert solution(\"carrots?\\nbunnies\\ncarrots\\ncarrots\\ncarrots\") == \"5\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\ncarrots?\nbunnies\n''') == '1'\nassert solution('''\n2 1\ncarrots?\nbunnies\ncarrots?\n''') == '2'\nassert solution('''\n2 5\ncarrots?\nbunnies\ncarrots?\ncarrots?\ncarrots?\ncarrots?\n''') == '5'\nassert solution('''\n2 5\ncarrots?\nbunnies\ncarrots?\ncarrots?\ncarrots?\ncarrots?\n''') == '5'\nassert solution('''\n3 2\ncarrots?\nbunnies\ncarrots?\ncarrots?\ncarrots?\ncarrots?\n''') == '3'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '0'\nassert solution('2 3') == '1'\n'''\n\nn, p = [int(x) for x in input().split()]\nstdin = [input() for _ in range(n)]\nfor i in range(len(stdin)):\n    if stdin[i] == 'carrots?':\n        print(1)\n    elif stdin[i] == 'bunnies':\n        print(1)"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('carrots?\\nbunnies') == '1'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\ncarrots?\\nbunnies\\n') == '1\\n'\nassert solution('3 5\\ncarrots?\\nbunnies\\n') == '2\\n'"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\ncarrots?\nbunnies\n''') == '1'\n\nassert solution('''\n2 2\ncarrots?\nbunnies\n''') == '2'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\ncarrots?\\nbunnies\\n') == '1'\nassert solution('2 1\\ncarrots?\\nbunnies\\ncarrots?\\n') == '2'\n"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'"
    },
    {
        "number": 4884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 3\") == \"6\""
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\") == \"White: Kd1,Qd2,Ra3,Rh4,Bc5,Bf6,Nc7,a8,c8,d8,f8,g8,h8,a9,e10,Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\") == \"White: Kd1,Qd2,Ra3,Rh4,Bc5,Bf6,Nc7,a8,c8,d8,f8,g8,h8,a9,e10,Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"|...|:::|...|:::|...|:::|...|:::|\") == \"White: Kd1,Qd2,Ra3,Rh4,Bc5,Bf6,Nc7,a8,c8,d8,f8,g8,h8,a9,e10,Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"|:::|...|:::|...|:::|...|:::|\") == \"White: Kd1,Qd2,Ra3,Rh4,Bc5,Bf6,Nc7,a8,c8,d8,f8,g8,h8,a9,e10,Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|...|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P.|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K.|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == '''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6''':\n    print(solution(stdin))\nelse:\n    print('Something is wrong!')"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nprint(solution(input()))\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,Kg8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,b3,f4,b5,f5,g6,f6,g7,f7,h7,h6\"\nassert solution(\"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\") == \"White: Kd2,Qd4,Rd6,Kd5,Qd3,Rd1,Nd8\"\nassert solution(\"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\") == \"White: Pd2,Pd4,Pd5,Pd6,Pd7,Pd8,Pd9,Pd10,Pd11,Pd12\"\nassert solution(\"|...|:::|...|:::|...|:::|...|:::|\") == \"White: Kn1,Nk2,Nk3,Nk4,Nk5,Nk6,Nk7,Nk8,Nk9,Nk10,Nk11,Nk12,Nk13,Nk14,Nk15,Nk16,Nk17,Nk18,Nk19\"\nassert solution(\"|:::|...|:::|...|:::|...|:::|\") == \"White: Nn1,Nn2,Nn3,Nn4,Nn5,Nn6,Nn7,Nn8,Nn9,Nn10,Nn11,Nn12,Nn13,Nn14,Nn15,Nn16,Nn17,Nn18,Nn19\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\") == \"White: Kd2,Nd2,Qd1,Kd1,Nd1,Qb2,Ke1,Qf1,Qg1\\nBlack: Kc2,Nc2,Qc1,Ke1,Nc1,Qb1,Ka2,Qf1,Qg1\"\nassert solution(\"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\") == \"White: Kp3,Np3,Qp2,Kp2,Np2,Qp1,Kp1\\nBlack: Kp4,Np4,Qp3,Kp3,Np3,Qp2,Kp2,Qp1,Kp1\"\nassert solution(\"|...|:::|.n.|:::|...|:::|.p.|\") == \"White: Kn7,Nd8,Qn6,Kd7,Nd6,Qn5,Kn5\\nBlack: Kn8,Nd8,Qn6,Kd7,Nd6,Qn5,Kn5,Kb8,Nb8,Qb7,Ka7\"\nassert solution(\"|:::|...|:::|...|:::|...|:::|\") == \"White: Kc3,Nc3,Qc2,Kc2,Nc2,Qc1,Kc1\\nBlack: Kc4,Nc4,Qc3,Kc3,Nc3,Qc2,Kc2,Qc1,Kc1\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,f1,g1,h1,a4,e4\"\nassert solution(\"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\") == \"White: Ra1,Rh1,Bc1,Bf1,Nb1,Kd1,Kf1,Qd1,Kc1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Kf1,Qc1,Nb1,Kd1,Kf1,Nc1,Kf1,Nb1,Rh1,Bc1,Kd1,Bc1,Kd1,Kf1,Qd1,Rh1,Bc1,Kd1,Kf1,Qc1,Nb1,Kd1,Kf1,Nc1,Kf1,Nb1,Rh1,Bc1,Kd1,Bc1,Kd1,Kf1,Qd1,Rh1,Bc1,Kd1,Kf1,Qc1,Nb1,Kd1,Kf1,Qc1,Nb1,Qd1,Rh1,Bc1,Kd1,Bc1,Kd1,Kf1,Qd1,Rh1,Bc1,Kd1,Kf1,Qc1,Nb1,Kd1,Kf1,Nc1,Kf1,Nb1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1,Kd1,Bf1,Nb1,Qd1,Rh1,Bc1"
    },
    {
        "number": 4885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:P.|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:R.|.N.|:B.|.Q.|:K.|.B.|:::|.R.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:K.|.B.|.Q.|.K.|.B.|:::|.R.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|.B.|:::|.P.|.P.|:p:|.P.|:p:|.P.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:N.|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|...|:::|...|:::|...|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|...|:::|...|:::|...|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\"\n    \"\\n\"\n    \"|:P.|.P.|:p:|.P.|.P.|:"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'Your wish is granted!', \"Wrong solution\"\nassert solution('5 5') == 'Your wish is granted!', \"Wrong solution\"\nassert solution('9 9') == 'Your wish is granted!', \"Wrong solution\"\nassert solution('1 1') == 'You will become a flying monkey!', \"Wrong solution\"\nassert solution('7 7') == 'You will become a flying monkey!', \"Wrong solution\""
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('5 3') == 'Your wish is granted!'\nassert solution('9 2') == 'You will become a flying monkey!'\nassert solution('8 0') == 'Your wish is granted!'\nassert solution('2 4') == 'Your wish is granted!'\n\n'''\n\nimport math\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Your wish is granted!'\nassert solution('5 4') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\", \"First\"\nassert solution(\"2 4\") == \"You will become a flying monkey!\", \"Second\"\n\nfrom typing import Dict, List, Tuple\nfrom collections import defaultdict"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 2') == 'You will become a flying monkey!'"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('3 3') == 'You will become a flying monkey!'\nassert solution('0 1') == 'Your wish is granted!'\nassert solution('4 4') == 'You will become a flying monkey!'\n\"\"\"\n\nfrom collections import deque\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"input_s, expected\", [\n    (\"8 3\", \"Your wish is granted!\"),\n    (\"3 3\", \"You will become a flying monkey!\"),\n    (\"0 1\", \"Your wish is granted!\"),\n    (\"4 4\", \"You will become a flying monkey!\"),\n])\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Your wish is granted!\"\nassert solution(\"8 2\") == \"Your wish is granted!\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 3\n7 8\n8 8\n8 8\n7 8\n4 4\n8 8\n4 4\n8 8\n''') == 'Your wish is granted!'\nassert solution('''6 3\n7 8\n8 8\n8 8\n7 8\n4 4\n8 8\n4 4\n8 8\n''') == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('10') == '20'\nassert solution('30') == '20'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '5'\nassert solution('15') == '20'\nassert solution('100') == '40'\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1.0'\nassert solution('16') == '16.0'\nassert solution('16.1') == '17.0'\nassert solution('16.2') == '16.9'\nassert solution('16.4') == '18.0'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('16') == \"16\"\nassert solution('40') == \"48\"\nassert solution('80') == \"96\"\nassert solution('40.9') == \"40.99\"\nassert solution('80.9') == \"81.01\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('16') == '16'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12') == '12'\nassert solution('16') == '16'"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '8'\nassert solution('16') == '16'\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '4', \"1st example\"\nassert solution('20') == '8', \"2nd example\"\nassert solution('800') == '24', \"3rd example\"\nassert solution('16') == '16', \"4th example\"\nassert solution('1024') == '24', \"5th example\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"16\") == \"16\"\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'\nassert solution('''7 180\n20 10 20 15 10 20 20\n20 10 20 20 20 20''') == '5'\nassert solution('''2 180\n40 60''') == '1'\nassert solution('''3 180\n50 30 50\n30 30 60''') == '2'\nassert solution('''4 180\n40 50 20\n20 40 50\n30 40 40\n30 20 50''') == '3'\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 180\n45 30 55 20 80 20\n''') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '1'"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nassert solution('3 2\\n1 1 1') == '1'"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"4\""
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\\n2\\n1\\n2\\n1\") == \"2\"\nassert solution(\"5\\n30 20 20 20 20\\n\") == \"3\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nprint('All test cases passed')\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '83'\nassert solution('2') == '93'\nassert solution('10') == '1584'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '20'\nassert solution('2') == '49'\nassert solution('3') == '50'\nassert solution('4') == '70'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '79'\nassert solution('6') == '66'\nassert solution('20') == '179'"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '6'\nassert solution('6') == '10'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"25\"\nassert solution(\"5\") == \"37\"\nassert solution(\"10\") == \"43\"\nassert solution(\"30\") == \"73\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\nassert solution('4') == '5'\nassert solution('10') == '100'\nassert solution('99') == '99'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4') == '6'\nassert solution('10\\n8\\n13\\n1\\n10\\n8\\n5\\n10\\n6\\n10\\n11\\n') == '23'"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n21\\n34\\n18') == '79'\nassert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('4\\n21\\n34\\n19') == '76'\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 3 4') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3 1') == '2 3 0'\nassert solution('6 5 1') == '2 3 0'\nassert solution('1 1 1') == '1'\nassert solution('2 3 3') == '0 0 0'\nassert solution('3 4 5') == '1 1 1'"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string = '5 3 3 4') == '2 3 0'\nassert solution(input_string = '5 3 3 4') == '2 3 0'\n\n\"\"\"\nfrom random import randint\nimport collections"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('5 5 5 3\\n1 1 1 0') == '2 1 1 1'\nassert solution('10 10 10 10 10\\n1 1 1 1 1 1 1 1 1') == '2 2 1 2'"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n0 2 3\\n4 1 3\") == \"1 1 2\"\nassert solution(\"5 3 3 4\\n0 1 3\\n0 2 4\") == \"1 1 1\"\nassert solution(\"5 3 3 4\\n1 0 4\\n2 2 3\\n1 2 4\") == \"2 2 1\"\nassert solution(\"5 3 3 4\\n1 0 3\\n2 2 4\\n0 2 3\") == \"2 2 2\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 4\") == \"2 3 0\"\nassert solution(\"10 10 10 10\") == \"0 1 1 1 1 1 0\"\nassert solution(\"20 20 20 20\") == \"0 0 1 0 1 0 0\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 3 4') == '2 3 0'\nassert solution('5 2 2 3') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n1 2 3 4\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\") == \"1 1 1 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\") == \"1 1 1 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\") == \"1 1 1 0\"\nassert solution(\"5 3 3 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4\") == \"1 1 1 0\""
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nprint(solution(input()))"
    },
    {
        "number": 4890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\nfrom random import choice, sample\nfrom itertools import accumulate, product\nfrom math import gcd"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('0 1 2 2 2 7'))\nprint(solution('0'))\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('-1 -1 -1 2 2 2 7') == '1 1 1 0 0 0 1'\nassert solution('-1 -1 -1 -1 2 2 2 7') == '1 1 1 1 1 1 1 1'\nassert solution('-1 -1 -1 -1 -1 2 2 2 7') == '0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0') == '0 0 0 0 0 0'\nassert solution('1') == '1 0 0 0 0 0'\nassert solution('2') == '0 0 0 0 0 1'\nassert solution('3') == '0 0 0 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 0 0 0 0 0') == '1 0 0 0 0 0'\nassert solution('0 0 0 0 0 1') == '1 0 0 0 0 0'\nassert solution('0 0 0 0 0 0') == '1 0 0 0 0 0'\nassert solution('0 1 2 2 2 2 7') == '1 0 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 3 2 3') == '1 0 0 0 0 1'\nassert solution('6 -3 -2 3 2 1') == '1 0 1 1 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n0 1 2 2 2 7\n\"\"\") == \"1 0 0 0 0 1\"\nassert solution(\"\"\"\n0 1 2 2 2 7\n-1 -1 -1 -1 0 0 1\n\"\"\") == \"0 -1 1 0 -1 1 0 -1\"\n\n\"\"\"\n--- Part Two ---\nIt turns out that this code has a bug. You can't remove any pieces, instead, you can only remove all white pieces, and in total, only eight.\n\nMirko's new board is one of the very first sizes used on Chess: 8 * 8. As such, his code for the second puzzle is actually incorrect.\n\nWhat is the correct piece code for a king?\n\n-----Input-----\nThe input consists of $4$ integers on a single line, each between $0$ and $10$ (inclusive), separated by a space. The numbers are, in order, the numbers of kings, queens, rooks and bishops in the board.\n\n-----Output-----\nThe output should consist of $4$ integers on a single line, separated by a space; the numbers of kings and queens in the board.\n\n-----Examples-----\nSample Input:\n0 3 1 3 1 5\nSample Output:\n0 2 1 1\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1', \"Wrong result\"\nassert solution('1 1 1 2 3 2') == '0 0 1 0 0 1', \"Wrong result\"\nassert solution('-1 -1 2 -2 3 -2 4 -4 -5 -5') == '0 0 1 0 0 1', \"Wrong result\"\nassert solution('0 0 0 -1 -2 -3 -4 -5 -6') == '1 0 1 0 0 0 0', \"Wrong result\"\nassert solution('0 0 0 0 -1 -2 -3 -4 -5 -6') == '0 1 0 0 0 0 0', \"Wrong result\""
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 3 3 3 3 1\") == \"0 0 0 0 0 3\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n123456 0.6666') == '1.3334'\nassert solution('2\\nqwerty 0.3334') == '1.3333'"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('\\n'.join(\n    [\"1\",\n     \"qwerty\",\n     \"password\",\n     \"123456\",\n     \"0.0000\",\n     \"123456\",\n     \"0.3333\",\n     \"qwerty\",\n     \"0.0000\",\n     \"qwerty\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n     \"123456\",\n     \"0.3333\",\n    "
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('3\\n123456 0.6666\\nqwerty 0.3334\\nabcdef 0.6534') == '1.6534'\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nprint('all tests passed')\n\nExpected:\n3.8369\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\\n\") == \"1.3334\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n123456 0.6666\\nqwerty 0.3334\\n') == '1.3334'\nassert solution('5\\nabcd 1.0000\\nqwerty 0.0000\\n12345 1.0000\\nghij 1.0000\\n') == '2.0000'\n"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('10\\nqwerty 1.000\\nqwerty 0.9999\\nqwerty 0.0156\\nqwerty 0.0000\\nqwerty 0.0033\\nqwerty 0.0000\\nqwerty 0.0002\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0001\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwerty 0.0000\\nqwer"
    },
    {
        "number": 4892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"1000000 1000000\") == \"99999\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2 3\") == \"1\\n\"\nassert solution(\"3\\n1 2 3\") == \"3\\n\"\nassert solution(\"1\\n5 3\") == \"4\\n\"\nassert solution(\"1\\n3 1\") == \"0\\n\"\nassert solution(\"2\\n2 3\") == \"1\\n\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n1 2 4\n1 3 5\n2 3 8\n2 4 9\n3 4 10\n4 5 15\n5 6 21\n6 7 27\n7 8 33\n8 9 36\n9 10 42\n10 11 47\n11 12 52\n12 13 59\n13 14 66\n14 15 72\n15 16 78\n16 17 84\n16 18 91\n17 18 96\n17 18 98\n17 18 100\n18 19 96\n18 19 97\n18 20 95\n19 20 98\n19 20 99\n20 21 94\n20 21 99''') == '1':\n    print(\"First Test Case is correct\")\nelse:\n    print(\"First Test Case has some error\")"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"4 5 2\") == \"2\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\nassert solution('5 1\\n1 2 4 3 5') == '1'\n\nstdin = \"\"\"\n4 1\n3 2 4 5\n\"\"\"\nprint(solution(stdin))\n\nassert solution('5 1\\n3 4 5 2') == '4'\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 1\n5 3 4\nSample Output:\n4\n\"\"\") == \"5\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1'\nassert solution('3 2') == '2'\nassert solution('3 4') == '3'\nassert solution('4 5') == '5'\nassert solution('10 20') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '1'"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                   \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'G:       \\nF: * *      * *    \\nE:       *   *          *\\nD: * *      *      *    * *    \\nC: * *      * *     ** *    \\nB: --------------------------\\nA: * *\\ng: -----------------------------------------------\\nf: * *\\ne: *\\nd: *\\nc: *\\nb: *\\na: *\\n'\n\n'''\n\nimport math"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nC D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                               \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  \\ng: -----------------------------------------------*----------\\nf:                                                   \\ne: ----------------------------------------------------------\\nd:                                                   \\nc:                                                   \\nb:                                                   \\na: ----------------------------------------------------------\\n'\n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                   \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n'''\nassert solution('''\n2\nC\nB\n''') == '''C:\nB:\nA:\n'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"G:       *   *          *             *   *                  \\nF: ------*-------**-----*-------------*-------*-----------------\\nE:       *      *      *           *         *\\nD: ----*-------**-----*-------------*-------*-----------------\\nC: * *     *      * *      *           *         * *\\nB: --------------------------*----------*-----*------*\\nA:                                                  *\\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------\"\nassert solution(\"2\") == \"G:      *  *      *      *      *\\nF: ------*-------**-----*-------------*-------*-----------------\\nE:      *      *      *           *         *\\nD: ----*-------**-----*-------------*-------*-----------------\\nC: * *      *      * *      *           *         * *\\nB: --------------------------*----------*-----*------*\\nA:                                                  *\\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------\"\nassert solution(\"3\") == \"G:      *  *      *      *      *\\nF: ------*-------**-----*-------------*-------*-----------------\\nE:      *      *      *           *         *\\nD: ----*-------**-----*-------------*-------*-----------------\\nC: * *      *      * *      *           *         * *\\nB: --------------------------*----------*-----*------*\\nA:                                                  *\\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------\""
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''G:                                                               \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                               \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: ------------------------\nE: \nD: ----\nC: * *\nB: \nA:\ng: \nf:\ne: \nd:\nc:\nb:\na:\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n''') == '''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                   \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"27\") == \"\"\"G:\nF: \nE:\nD: \nC: \nB: \nA:\ng: \nf:\ne: \nd: \nc: \nb:\na: \n\"\"\"[:-1]\n\n\"\"\"Test\"\"\"\n\"\"\"\n    # input\n    \"27\"\n    # output\n    \"G:    F:    E:    D:    C:    B:    A:    g:    f:    e:    d:    c:    b:    a:    \"\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\nC D D D\nC E D C E\nC D E E E E\n''') == '''\nG:\nF: ---------------------------------*--------------*----------\nE: \nD: \nC: \nB: \nA: \ng: \nf: \ne: \nd: \nc: \nb: \na:\n'''\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('2\\n1 1\\n1 2') == 'impossible'\nassert solution('1\\n1 2') == 'impossible'\nassert solution('1000\\n1 1 1') == 'impossible'\nassert solution('3\\n1 1 1\\n2 2') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == 'possible'\nassert solution('1 2 1') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1 1\n3 2\n1 1\n1 3\n2 3\n''') == 'possible'\nassert solution('''3\n1 1 1\n3 2\n1 1\n1 3\n2 3\n''') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1\\n') == 'possible'\nassert solution('3\\n2 2 2\\n') == 'impossible'\nassert solution('3\\n3 3 3\\n') == 'impossible'\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1\\n') == 'possible'\nassert solution('5\\n1 2 3 5\\n') == 'impossible'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"possible\"\nassert solution([\"1 2\", \"1\", \"1\", \"1\"]) == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n' +\n                '1 1 1\\n' +\n                '2 2 2\\n' +\n                '3 3 3\\n') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1') == 'possible'\nassert solution('4\\n1 2 3\\n1 1') == 'impossible'\nassert solution('3\\n3 2 1') == 'impossible'\nassert solution('10\\n5 2 5 2 2 3\\n4 5 4 5') == 'impossible'"
    },
    {
        "number": 4895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == 'possible'\nassert solution('2 2 2') == 'impossible'\nassert solution('3 3 3') == 'impossible'"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 1') == '2'\nassert solution('3 1 2 3') == '3'\nassert solution('5 5') == '5'\nassert solution('5 2 2 4') == '4'\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\nassert solution(\"100\\n15 5 2 3 4 2 1 3 3 3 5 6 7 4 4 5 5 5 5 5 2 2 5 5 5 5 6 5 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 5 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n4\\n5\\n2\\n1\\n2\\n3\\n4\\n\") == \"3\"\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"3\""
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\nassert solution(\"6\\n7 5 5 2 1 3 2\") == \"5\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\"\n) == \"2\"\n\nassert solution(\n    \"1 1 3 4 2 3\"\n) == \"3\"\n\nassert solution(\n    \"10\"\n) == \"1\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\nassert solution('20\\n10 3 3 2 1 2 2 1 1 3') == '2'\nassert solution('1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 1 1 2 2\n''') == '3'\nassert solution('''\n8\n2 2 1 1 1 2 2 2\n''') == '2'\nassert solution('''\n1\n5\n''') == '0'\n'''"
    },
    {
        "number": 4896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4 3 3 2 1 2 2 1 1 3') == '3'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.92\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nPOWELL 9.72 8.61\\n\") == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\nassert solution(\"7\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nFRATER 9.78 8.93\\nPOWELL 9.72 8.61\\n\") == '29.36\\nASHMEADE\\nFRATER\\nBOLT\\nPOWELL'\nassert solution(\"9\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nFRATER 9.78 8.93\\nPOWELL 9.72 8.61\\n\") == '19.09\\nASHMEADE\\nFRATER\\nBLAKE\\nPOWELL'\nassert solution(\"10\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nFRATER 9.78 8.93\\nPOWELL 9.72 8.61\\n\") == '7.97\\nASHMEADE\\nFRATER\\nBLAKE\\nPOWELL'\nassert solution(\"11\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nFRATER 9.78 8.93\\nPOWELL 9.72 8.61\\n\") == '1.75\\nASHMEADE\\nFRATER\\nBLAKE\\nPOWELL'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\\nASHMEADE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\") == \"BLAKE\\nASHMEADE\\nPOWELL\\n\"\nprint(solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\"))"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"35.54\"\nassert solution(\"6\") == \"CARTER\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '6\\n'\n    'ASHMEADE 9.9\\n'\n    'BLAKE 9.69\\n'\n    'BOLT 9.58\\n'\n    'CARTER 9.78\\n'\n    'FRATER 9.88\\n'\n    'POWELL 9.72\\n'\n) == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\\n'"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"9.45\"\nassert solution(\"8\") == \"34.43\"\nassert solution(\"10\") == \"9.93\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"35.54\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == '35.54':\n    print('Yay!')\n\nassert solution('''\n5\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n''') == 'BLAKE':\n    print('Yay!')\n\nassert solution('''\n3\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\n''') == 'BLAKE':\n    print('Yay!')\n\nassert solution('''\n1\nASHMEADE 9.90 8.85\n''') == 'ASHMEADE'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n0 1\n0 2\n0 3\n0 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n8\n5 2\n3 4\n5 6\n6 3\n1 5\n1 2\n1 6\n2 5\n2 1\n2 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n0 1\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n0 1\n0 2\n0 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n0 1\n0 2\n1 2\n2 4\n\"\"\") == \"2\""
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6\\n') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n1 2\\n2 4\\n5 6\\n') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 2\n2 4\n5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"1\n1 1\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"100000\n1 1\n1000 1000\n9 1000\n9 1000\n\"\"\") == \"100000\"\nassert solution(\"\"\"10\n1 1\n1 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48\n1 49\n1 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n1 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n1 438\n1 439\n1 440\n1 441\n1 442\n1 443\n1 444\n1 445\n1 446\n1 447\n1 448\n1 449\n1 450\n1 451\n1 452\n1 453\n1 454\n1 455\n1 456\n1 457\n1 458\n1 459\n1 460\n1 461\n1 462\n1 463\n1 464\n1 465\n1 466\n1 467\n1 468\n1 469\n1 470\n1 471\n1 472\n1 473\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"5 6\") == \"1\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n4\\n6') == '2'\nassert solution('1\\n2\\n5\\n6') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2\\n2 4\\n5 6\") == \"2\", \"First\"\nassert solution(\n    \"3 2\\n2 4\\n5 6\") == \"1\", \"Second\"\nassert solution(\n    \"1 2\\n2 4\\n5 6\") == \"0\", \"Third\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 4\\n5 6') == '2'\nassert solution('3\\n1 2\\n2 4\\n5 6') == '1'\nassert solution('3\\n4 2\\n2 4\\n5 6') == '1'\n\nprint(solution('''\n3\n1 2\n2 4\n5 6\n'''))\n\nprint(solution('''\n3\n4 2\n2 4\n5 6\n'''))\n\nprint(solution('''\n10\n1 1\n2 1\n3 2\n3 3\n4 3\n4 4\n4 5\n5 4\n5 5\n'''))"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n1 2\\n5 6') == '2'\nassert solution('2\\n4 5') == '0'\nassert solution('2\\n1 2') == '2'\nassert solution('2\\n1 2\\n4 5') == '0'\n"
    },
    {
        "number": 4898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('7\\n1 2\\n3 6\\n4 9\\n5 8\\n6 7\\n') == '5'\n"
    }
]