[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nn = int(input())\ngraph = defaultdict(set)\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    graph[a].add(b)\n    graph[b].add(a)"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom typing import Set, Tuple, Dict\n\n\nclass Graph:\n    def __init__(self, graph: Dict[int, Set[int]] = None):\n        self.graph = defaultdict(set) if not graph else graph\n\n    def connect(self, a: int, b: int) -> None:\n        self.graph[a].add(b)\n\n    def disconnect(self, a: int, b: int) -> None:\n        self.graph[a].discard(b)\n\n    def is_connected(self, a: int, b: int) -> bool:\n        return b in self.graph[a]\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n2 7\\n2 8\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n2 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\\n1 4 5\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\\n1 2 3 4 5\"\nassert solution(\"3\\n1 2\\n2 3\\n\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5\nassert solution('''7\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7''') == '1 8 6'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5 1 8 6'\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"5\\n1 8 6\"\nassert solution(\"4\\n1 3\\n2 3\\n3 1\\n3 4\") == \"5\\n1 8 6\"\nassert solution(\"4\\n1 2\\n2 1\\n2 3\\n3 4\") == \"5\\n1 8 6\"\nassert solution(\"3\\n1 3\\n2 2\\n2 3\") == \"5\\n1 8 6\"\nassert solution(\"3\\n1 2\\n2 3\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3\\n3 4') == '5'\nassert solution('1 2\\n2 3\\n4 5\\n4 6\\n3 7\\n3 8') == '5 8 6'"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 1 2 2 1 2 3 4 5 4\") == \"3 5\"\nassert solution(\"10 1 2 2 4 1 2 3 4 5\") == \"5 4\"\nassert solution(\"8 3 1 1 1 4 1 2 2 3\") == \"4 2\"\nassert solution(\"5 1 2 2 3 4\") == \"3 4\"\n\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"10\n10 2 8 1 2 4 1 20 4 5\n\"\"\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n10\\n2\\n8\\n1\\n2\\n4\\n1\\n20\\n4\\n5') == '20\\n8'\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\nassert solution('''4\n1 5 1 1\n''') == '1 1 1'\nassert solution('''2\n1 1 1''') == '1'\n\n'''\nfrom collections import Counter\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10 10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10 10 10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10 10 10 10 2 8 1 2 4 1 20 4 5') == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 5 9''') == '4 6'\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 5 3 2 1 2 2 3 8 8') == '8 8'\nassert solution('6 1 1 1 1 2 3 3 3 3 3') == '3 3 3'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(input())\ndivisor_list = list(map(int, input().split()))"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == 24\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\") == \"24\"\nassert solution(\"5 5 4\") == \"56\"\n\n'''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"56\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\nsolution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\")\nsolution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\")\n\nsolution(\"1\\n1\")\nsolution(\"1\\n2\")\nsolution(\"1\\n3\")\n\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nM = []\nfor i in range(n):\n    row = []\n    for j in range(m):\n        row.append(a[i][j] % k)\n    M.append(row)\n\nMAX = 0\nfor i in range(n):\n    for j in range(m):\n        if j + M[i].count(0) >= m / 2:\n            print(k * (m / 2 - M[i].index(0) - 1) + sum(M[i][:j + M[i].index(0) - 1]))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 4 3 2\n''') == '4\nLRRR'\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na = [x for x in a if x > 0]\n\ns = \"\"\nwhile a:\n    s += \"L\" if a[0] > a[-1] else \"R\"\n    a.pop(0) if a[0] > a[-1] else a.pop(-1)\n\nprint(len(s))\nprint(s)"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input_str) == output_str\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [0] * n\ndp[0] = 1\n\nmax_value = 1\nfor i in range(1, n):\n    dp[i] = 1\n    for j in range(0, i):\n        if a[i] > a[j] and dp[j] + 1 > dp[i]:\n            dp[i] = dp[j] + 1\n    if dp[i] > max_value:\n        max_value = dp[i]\n\ns = ''\nfor i in range(max_value):\n    for j in range(n):\n        if dp[j] == i + 1:\n            if s:\n                s += 'R'\n            else:\n                s += 'L'\n            break\n\nprint(max_value)\nprint(s)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"3\\n2 2 2\") == \"1\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2\\n') == '1\\nR'\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\n\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = 0\nc = []\nd = 0\ne = []\n\nfor i in range(n):\n    if i > 0:\n        if a[i] < a[i - 1]:\n            b += 1\n            if b > d:\n                d = b\n                e = c\n            c = [a[i]]\n        else:\n            b = 0\n            c = []\n    else:\n        b += 1\n        if b > d:\n            d = b\n            e = c\n        c = [a[i]]"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"3\\n2 2 2\") == \"1\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nR R'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n\nprint(\"Passed\")\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"3\"\nassert solution(\"2\\n2 8\") == \"3\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 4 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n\nprint('Hooray!')"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == 3\nassert solution(\"5\\n2 2 5 2 5\\n\") == 3\nassert solution(\"4\\n1 3 3 7\\n\") == -1\nassert solution(\"2\\n2 8\\n\") == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 5 2 5\") == \"3\"\nassert solution(\"1 2 3 4 7\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 8\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\nassert solution(\"1\\n2 8\") == \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 8\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\\n\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n\") == \"YES\"\n\n\"\"\"\n\nfrom collections import namedtuple\n\nRect = namedtuple(\"Rect\", [\"bottom_left\", \"top_right\"])\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n') == 'NO'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\") == 'NO'\nassert solution(\"1 1 3 5\") == 'YES'\nassert solution(\"3 1 5 5\") == 'YES'\nassert solution(\"5 2 10 5\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n\") == \"YES\"\nassert solution(\"7 8 10 11\\n1 5 8 10\\n1 1 6 10\\n4 8 9 10\\n4 4 1 9\\n5 5 9 10\\n7 7 9 10\\n3 3 6 9\\n6 6 9 10\") == \"NO\"\nassert solution(\"7 7 9 10\\n1 5 8 10\\n1 1 6 10\\n4 8 9 10\\n4 4 1 9\\n5 5 9 10\\n7 7 9 10\\n3 3 6 9\\n6 6 9 10\") == \"NO\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1098\") == 20\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10098') == 20\nassert solution('10') == 19\nprint('The solution is correct!')\n\"\"\"\n\nn = int(input())\n\ncount = 0\nwhile n > 9:\n    n = n - 9 if n % 9 == 0 else n + 1\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1098) == 20\nassert solution(10) == 19\nassert solution(9) == 1\nassert solution(8) == 0\nassert solution(7) == 0\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n5 0 0 2 4\"\"\") == \"5 3 1 2 4\"\nassert solution(\"\"\"7\n7 0 0 1 4 0 6\"\"\") == \"7 3 2 1 4 5 6\"\nassert solution(\"\"\"7\n7 4 0 3 0 5 1\"\"\") == \"7 4 2 3 6 5 1\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\nprint(solution(\"7\\n7 0 0 1 4 0 6\")) # 7 3 2 1 4 5 6\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\"\n\nimport sys\nimport os\nimport time\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\n'''\nclass Solution {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] f = new int[n];\n        for (int i = 0; i < n; ++i) {\n            f[i] = scanner.nextInt();\n        }\n        for (int i = 0; i < n; ++i) {\n            if (f[i] == 0) {\n                System.out.println(n - f.length + i);\n                for (int j = 0; j < n; ++j) {\n                    if (i!= j) {\n                        System.out.println(f[j]);\n                    }\n                }\n            }\n        }\n    }\n}\n'''"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == '5 3 1 2 4'\nassert solution(\"7\\n7 0 0 1 4 0 6\") == '7 3 2 1 4 5 6'\nassert solution(\"7\\n7 4 0 3 0 5 1\") == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 0 0 2 4\\n') == '7\\n5 3 1 2 4'\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n3 1 1 2 1\") == \"NO\"\n\n\nprint(solution(input().split()))\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a1) == \"NO\"\nassert solution(a2) == \"YES\"\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n1 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"6 4\\n1 1 1 1 2 2\") == \"NO\"\n\"\"\"\n\nn, k = input().split()\na = list(map(int, input().split()))\n\ncnt = [0] * k\nans = []\n\nfor i in a:\n    cnt[i-1] += 1\n\nfor i in range(1, k+1):\n    if cnt[i-1] == 0:\n        ans.append(str(i))\n        for j in a:\n            if j == i:\n                cnt[i-1] -= 1\n                break"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3\\n') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3\\n') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1\\n') == 'NO'\nassert solution('5 2\\n3 2 1 2 3\\n') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == 'YES\\n1 1 2 2'\nassert solution(\"5 2\\n3 2 1 2 1\") == 'YES\\n2 1 1 2 1'\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2 1 2\") == \"NO\"\nassert solution(\"4 2\\n1 2 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nfrom string import digits, ascii_lowercase\nfrom sys import stdin\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\n\nassert solution('''11 5 1\n11010100101''') == '3'"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\", \"11010100101\") == 1\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 3\") == \"2\"\nassert solution(\"11 5 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nn, x, y = map(int, input().split())\nn = list(map(int, str(n)))\n\nfor i in range(len(n)):\n    if n[i] == 1:\n        for j in range(i, len(n)):\n            n[j] = 1 - n[j]\n        break\n\nx = n.index(1)\ny = y - 1\n\nprint(x - y)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('8') == 'YES'\nassert solution('100') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"1\\n1\\n1\\n1\") == 'YES\\nYES\\nYES'\nassert solution(\"1\\n1\\n2\\n2\\n2\\n1\") == 'NO\\nNO\\nNO'\nassert solution(\"1\\n2\\n2\\n1\\n1\\n1\") == 'NO\\nNO\\nNO'\nassert solution(\"1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\") == 'NO\\nNO\\nNO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 1\\n3\\n2 3 1\\n2 3 1') == 'YES'\nassert solution('1\\n1\\n2') == 'NO'\nassert solution('3\\n1 1 2\\n3\\n2 3 1') == 'NO'\nassert solution('2\\n1 2 1\\n3\\n2 3 1') == 'YES'\nassert solution('1\\n1 1 2\\n3\\n2 3 1') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'NO'\n\n-----Problem-----\n\n*Problem description*\nFind if array has some subsequence of length at least 3 that is a palindrome.\n\n*Input*\nAn array of integers.\n\n*Output*\nYES or NO.\n\n*Example*\nFor input:\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nFor output:\nYES\nYES\nNO\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    for i in range(len(a)):\n        if a[i]!= a[n - i - 1]:\n            break\n    else:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\n\n-----Problem-----\n\nYou are given an array $a$ consisting of $n$ integers.\n\nYour task is to determine if $a$ has some subsequence of length at least $3$ that is a palindrome.\n\nRecall that an array $b$ is called a subsequence of the array $a$ if $b$ can be obtained by removing some (possibly, zero) elements from $a$ (not necessarily consecutive) without changing the order of remaining elements. For example, $[2]$, $[1, 2, 1, 3]$ and $[2, 3]$ are subsequences of $[1, 2, 1, 3]$, but $[1, 1, 2]$ and $[4]$ are not.\n\nAlso, recall that a palindrome is an array that reads the same backward as forward. In other words, the array $a$ of length $n$ is the palindrome if $a_i = a_{n - i - 1}$ for all $i$ from $1$ to $n$. For example, arrays $[1234]$, $[1, 2, 1]$, $[1, 3, 2, 2, 3, 1]$ and $[10, 100, 10]$ are palindromes, but arrays $[1, 2]$ and $[1, 2, 3, 1]$ are not.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nNext $2t$ lines describe test cases. The first line of the test case contains one integer $n$ ($3 \\le n \\le 5000$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$ ($\\sum n \\le 5000$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if $a$ has some subsequence of length at least $3$ that is a palindrome and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case of the example, the array $a$ has a subsequence $[1, 2, 1]$ which is a palindrome.\n\nIn the second test case of the example, the array $a$ has two subsequences of length $3$ which are palindromes: $[2, 3, 2]$ and $[2, 2, 2]$.\n\nIn the third test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\n\nIn the fourth test case of the example, the array $a$ has one subsequence of length $4$ which is a palindrome: $[1, 2, 2, 1]$ (and has two subsequences of length $3$ which are palindromes: both are $[1, 2, 1]$).\n\nIn the fifth test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == 'YES\\nYES\\nNO\\nYES\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\nassert solution(\"5\\n11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\"\"\"\n\nn = int(input())\na = list(input())\nf = list(map(int, input().split()))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1337') == '1557'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1337\") == \"1553\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\n\nprint(solution(\"5\\n11111\"))\n\nassert solution(\"5\\n11111\") == \"99999\"\nprint(\"Example tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\nassert solution('2\\n33') == '33'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\n1337\n1 2 5 4 6 6 3 1 9\") == \"1557\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"2\\n\" + \"4\" + \"\\n\" + \"1 2 5 4 6 6 3 1 9\") == \"1557\"\nassert solution(\n\"1\\n\" + \"9\" + \"\\n\" + \"1 2 5 4 6 6 3 1 9\") == \"99999\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 9') == '4', 'Test 1'\nassert solution('4 2 3') == '2', 'Test 2'\n\nassert solution('1 2 3') == '1', 'Test 3'\nassert solution('1 2 4') == '4', 'Test 4'\nassert solution('1 2 5') == '4', 'Test 5'\n\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nprint('the solution is correct')"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 6\") == '1'\nassert solution(\"2 4 8\") == '3'\nassert solution(\"4 1 4\") == '2'\nassert solution(\"2 8 2\") == '0'\nassert solution(\"1 1 1\") == '0'\n\nimport re\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1\\n1 1 3\"\nassert solution(\"123 321 456\") == \"1\\n2 2 3\"\nassert solution(\"5 10 15\") == \"2\\n2 4 5\"\nassert solution(\"15 18 21\") == \"3\\n4 5 6\"\nassert solution(\"100 100 101\") == \"1\\n101 100 101\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"\"\"1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '''1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48'''\n\n\n\nassert solution('''8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n''') == '''1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48'''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nassert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 1 2'\n) == '2'\n\nassert solution(\n    '4 4 4'\n) == '0'\n\nassert solution(\n    '10 10 10'\n) == '-1'\n\nassert solution(\n    '9 9 9'\n) == '-1'\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('3\\n1 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"1 100\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 3 3 7''') == '2'\n\nassert solution('''2\n1 100000''') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 3 7') == 2\nassert solution('2\\n1 100000') == 0\nassert solution('2\\n1 100000') == 0\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == -1\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ndays = []\nfor _ in range(m):\n    s, d, c = map(int, sys.stdin.readline().split())\n    days.append((s, d, c))\n\ndp = [0] * n\nfor s, d, c in days:\n    dp[s] = c\n    for i in range(s, d):\n        dp[i] = min(dp[i], c)\n\nprint(' '.join(map(str, dp)))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str([1, 3, 1])) == str([1, 2, 3, 0, 3])\nassert solution(str([1, 5, 1])) == str([1, 2, 3, 0, 3])\nassert solution(str([4, 7, 2])) == str([-1])\nassert solution(str([10, 3, 1])) == str([2, 2, 2, 1, 0, 4, 3, 4, 4])\nassert solution(str([4, 7, 2])) == str([2, 2, 2, 1, 0, 4, 3, 4, 4])"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\n1 3 1\n1 5 1\n\"\"\") == \"1 2 3 0 3\"\nassert solution(\"\"\"\n3 2\n1 3 1\n1 2 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n10 3\n4 7 2\n1 10 3\n8 9 1\n\"\"\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\\n1 3 1\\n1 2 1\") == \"2 2 2 1 1 0 3 3 3\"\nassert solution(\"7 3 1\\n4 7 2\\n1 7 1\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 3 1\\n1 2 1\\n1 2 1\") == \"0\"\nassert solution(\"2 2 1\\n1 2 1\") == \"0\"\nassert solution(\"1 3 1\\n1 5 1\") == \"-1\"\n\nprint(\"Well done!\")\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"no\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12) == 3\nassert solution(5) == -1\nassert solution(100) == 24\nassert solution(123) == 36\nassert solution(1000) == 48\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 34') == '0'\nassert solution('12345') == '-1'\nassert solution('10 10') == '-1'\nassert solution('10 20') == '3'\nassert solution('100 200') == '7'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\n\n\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'ababababa'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"abacaba\") == \"abacababa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aab\") == \"aaba\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\n\"\"\"\n\nfrom collections import Counter, OrderedDict"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'abababa'\n\nassert solution('cat') == 'catcat'\n\nassert solution('abcd') == 'abcdabcd'\n\nassert solution('x') == 'xxxxx'\n\nassert solution('sdfg') =='sdfgsdfg'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'ababababa'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn, k = [int(x) for x in stdin.readline().split()]\nt = stdin.readline().strip()\n\nans = ''\nfor i in range(n):\n    ans += t[i]\n    if t[i] == t[i + 1]:\n        if k <= 0:\n            break\n        k -= 1\n\nwhile k > 0:\n    ans += ans[0]\n    k -= 1\n\nstdout.write(ans)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 3) == \"catcat\"\nassert solution(\"abba\", 2) == \"abbaabba\"\nassert solution(\"aaaa\", 1) == \"aaaaaaaa\"\nassert solution(\"abba\", 2) == \"abbaabba\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"a\") == \"aa\"\nassert solution(\"aaaa\") == \"aaaaaaaa\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 2 4 3') == '3\\n1 4\\n'\nassert solution('4\\n8 3 5 2') == '2\\n1 4\\n'\nassert solution('5\\n2 1 2 4 3') == '0\\n'\nassert solution('4\\n3 6 4 2') == '0\\n'\nassert solution('5\\n2 1 2 2') == '0\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 2\") == \"1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"4\\n8 3 5 2\") == \"2 1 4\"\n\n\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\n\"\"\"\nfrom sys import stdin\nimport heapq\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\n\nheap = []\nheapq.heapify(heap)\nans = 0\nfor i in range(n):\n    heapq.heappush(heap, -arr[i])\n    while heap[0] < arr[i] * (i + 1):\n        heapq.heappop(heap)\n        ans += 1\n\nprint(ans)\nprint(\" \".join(map(str, sorted(heapq.nlargest(ans, heap), key=abs))))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5\\n'\n    '2 5 1 2 2'\n) == '3\\n' + '4 1 5'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 2 4 3') == '3\\n4 1 5'\nassert solution('5\\n8 3 5 2') == '2\\n1 4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\ncount = 0\ngood_indices = set()\nfor j in range(n):\n    s = sum(a)\n    a.remove(a[j])\n    if s == sum(a):\n        good_indices.add(j)\nprint(len(good_indices))\nprint(' '.join(map(str, sorted(good_indices))))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 5 1 2 2''') == '3\\n4 1 5'\nassert solution('''4\n8 3 5 2''') == '2\\n1 4'\nassert solution('''5\n2 1 2 4 3''') == '0'\n'''\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 5 1 2\") == \"3\\n4 1 5\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"6\\n2 2 4 3 5 1\") == \"1\\n2 1 4\"\nassert solution(\"8\\n3 5 2\") == \"2\\n1 4\"\nassert solution(\"1\\n3\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"0\"\nassert solution(\"4 3 2\") == \"1 2\"\nassert solution(\"4 1 3\") == \"2 3\"\nassert solution(\"4 3 5\") == \"2 3\"\nassert solution(\"4 3 5 6\") == \"2 3\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 5 2\") == \"0\"\nassert solution(\"2 1 2 4 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 2 2\\n') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2\\n') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3\\n') == '0'\nassert solution('4\\n8 3 5 2\\n') == '2\\n1 4'\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\", \"\") == 4\nassert solution(\"aaaaa\", \"\") == 15\nassert solution(\"ajihiushda\", \"\") == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n\nsolution(\"10 100\\najihiushda\")\n\nsolution(\"5 7\\nabbba\") == -1\nsolution(\"5 7\\nabbba\") == \"3\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaaa') == 15\nassert solution('asdf') == 4\nassert solution('asd') == 1\n\n\"\"\"\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 asdf') == 4\nassert solution('5 6 aaaa') == 15\nassert solution('5 7 aaaa') == -1\n\"\"\"\n\nimport sys\n\n\"\"\"\nn, k = map(int, input().split())\ns = input()"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"abac\") == \"abac\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"aaab\") == \"aaab\"\nassert solution(\"ba\") == \"ba\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"ajihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aab') == 'aa'\nassert solution('abc') == 'abc'\nassert solution('abca') == 'abac'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == -1\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 2\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n2 3\\n3 4\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == '''YES\n2 1\n2 3\n3 4'''\n\nassert solution('''\n4 5 3\n1 2\n1 4\n2 3\n3 4''') == '''YES\n1 2\n1 3\n4 1\n'''\n\nassert solution('''\n4 4 3\n1 2\n1 4\n2 3\n3 4''') == '''NO'''\n\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n-------------\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n1 2\\n1 3\\n2 3\\n3 4\"\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n1 2\\n1 3\\n2 3\\n3 4\"\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\"\n\"\"\"\n\nimport sys\n\nclass Node:\n    def __init__(self, label):\n        self.label = label\n        self.children = []\n\n    def addChild(self, child):\n        self.children.append(child)\n\n    def hasChild(self, child):\n        return child in self.children\n\n\nclass Graph:\n    def __init__(self, vertices, edges):\n        self.vertices = []\n        self.edges = []\n\n        for v in vertices:\n            self.vertices.append(Node(v))\n\n        for e in edges:\n            edge = (e[0], e[1])\n            self.edges.append(edge)\n            self.vertices[e[0] - 1].addChild(self.vertices[e[1] - 1])\n            self.vertices[e[1] - 1].addChild(self.vertices[e[0] - 1])\n\n    def bfs(self):\n        visited = [False] * len(self.vertices)\n        queue = [0]\n        visited[0] = True\n        while len(queue) > 0:\n            currentNode = queue.pop(0)\n            for child in self.vertices[currentNode].children:\n                if not visited[child.label - 1]:\n                    queue.append(child.label - 1)\n                    visited[child.label - 1] = True\n\n        for i in range(len(visited)):\n            if not visited[i]:\n                return False\n\n        return True\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10:00\") == \"10:30\"\n\nassert solution(\"11:10\") == \"11:11\"\n\nassert solution(\"01:02\") == \"02:02\"\n\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\n\n\n\n-----Code-----\n\"\"\"\n\nimport ast\nimport sys\n\nh1, m1 = ast.literal_eval(input())\nh2, m2 = ast.literal_eval(input())\n\nh1 = int(h1)\nm1 = int(m1)\n\nh2 = int(h2)\nm2 = int(m2)"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\na, b = input().split(':')\nc, d = input().split(':')\n\ns = int(a) + int(b) + int(c) + int(d)\nm = s / 4\n\nprint(f\"{int(m // 60):02}:{int(m % 60):02}\")"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12') == '1'\nassert solution('42') == '6'\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\"\n\na = int(input())\nprint(a//8)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 1\nassert solution('10') == 2\nassert solution('42') == 6\nassert solution('3') == 1\nassert solution('10') == 2\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == 2\nassert solution('4') == 2\nassert solution('4') == 2\nassert solution('4') == 2\nassert solution('4') == 2\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"42\") == 6\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 2\nassert solution(\"64\") == 6"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nprint('All tests passed.')"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0\\n') == '0'\nassert solution('0\\n1\\n') == '0'\nassert solution('0\\n1\\n2\\n') == '0'\nassert solution('0\\n1\\n2\\n3\\n') == '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 3\n2 6\n0 4\n1 20\n0 4\n''') == '1'\nassert solution('''4\n1 3\n2 6\n0 4\n3 3\n''') == '0'\nassert solution('''3\n4 5\n1 2\n9 20\n''') == '0'\nassert solution('''2\n3 10\n1 5\n''') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n1 3\\n2 6\\n0 4\\n3 3\"\n) == \"1\"\nassert solution(\n    \"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\"\n) == \"2\"\nassert solution(\n    \"3\\n4 5\\n1 2\\n9 20\"\n) == \"0\"\nassert solution(\n    \"2\\n3 10\\n1 5\"\n) == \"7\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\nprint(\"test passed\")\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(TEST_CASES[0][0])) == str(TEST_CASES[0][1])\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n2\\n6\\n0\\n4\\n3\\n3') == '1\\n3\\n2\\n6\\n0\\n4\\n3'\nassert solution('2\\n6\\n1\\n3\\n0\\n4\\n1\\n20\\n0\\n4') == '2\\n6\\n1\\n3\\n0\\n4\\n1\\n20\\n0\\n4'\nassert solution('4\\n5\\n1\\n2\\n9\\n20\\n0\\n4') == '0\\n4\\n1\\n2\\n9\\n20\\n0\\n4'\nassert solution('3\\n10\\n1\\n5\\n0\\n4\\n1\\n20\\n0\\n4') == '0\\n4\\n1\\n5\\n0\\n4\\n1\\n20\\n0\\n4'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2\\n1 1 1 1') == \"YES\"\nassert solution('5 3 2\\n3 5 4 1') == \"NO\"\nassert solution('5 3 2\\n1 2 3 4 5') == \"YES\"\nassert solution('5 3 2\\n1 2 3 4 5') == \"YES\"\nassert solution('5 3 2\\n1 2 3 4 5') == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\n\n-----Tests-----\nsolution(5) # ok\nsolution(2) # ok\nsolution(3) # ok\nsolution(4) # ok\nsolution(5) # ok\nsolution(7) # ok\nsolution(8) # ok\nsolution(9) # ok\nsolution(10) # ok\nsolution(11) # ok\nsolution(12) # ok\nsolution(13) # ok\nsolution(14) # ok\nsolution(15) # ok\nsolution(16) # ok\nsolution(17) # ok\nsolution(18) # ok\nsolution(19) # ok\nsolution(20) # ok\nsolution(21) # ok\nsolution(22) # ok\nsolution(23) # ok\nsolution(24) # ok\nsolution(25) # ok\nsolution(26) # ok\nsolution(27) # ok\nsolution(28) # ok\nsolution(29) # ok\nsolution(30) # ok\nsolution(31) # ok\nsolution(32) # ok\nsolution(33) # ok\nsolution(34) # ok\nsolution(35) # ok\nsolution(36) # ok\nsolution(37) # ok\nsolution(38) # ok\nsolution(39) # ok\nsolution(40) # ok\nsolution(41) # ok\nsolution(42) # ok\nsolution(43) # ok\nsolution(44) # ok\nsolution(45) # ok\nsolution(46) # ok\nsolution(47) # ok\nsolution(48) # ok\nsolution(49) # ok\nsolution(50) # ok\nsolution(51) # ok\nsolution(52) # ok\nsolution(53) # ok\nsolution(54) # ok\nsolution(55) # ok\nsolution(56) # ok\nsolution(57) # ok\nsolution(58) # ok\nsolution(59) # ok\nsolution(60) # ok\nsolution(61) # ok\nsolution(62) # ok\nsolution(63) # ok\nsolution(64) # ok\nsolution(65) # ok\nsolution(66) # ok\nsolution(67) # ok\nsolution(68) # ok\nsolution(69) # ok\nsolution(70) # ok\nsolution(71) # ok\nsolution(72) # ok\nsolution(73) # ok\nsolution(74) # ok\nsolution(75) # ok\nsolution(76) # ok\nsolution(77) # ok\nsolution(78) # ok\nsolution(79) # ok\nsolution(80) # ok\nsolution(81) # ok\nsolution(82) # ok\nsolution(83) # ok\nsolution(84) # ok\nsolution(85) # ok\nsolution(86) # ok\nsolution(87) # ok\nsolution(88) # ok\nsolution(89) # ok\nsolution(90) # ok\nsolution(91) # ok\nsolution(92) # ok\nsolution(93) # ok\nsolution(94) # ok\nsolution(95) # ok\nsolution(96) # ok\nsolution(97) # ok\nsolution(98) # ok\nsolution(99) # ok\nsolution(100) # ok\nsolution(101) # ok\nsolution(102) # ok\nsolution(103) # ok\nsolution(104) # ok\nsolution(105) # ok\nsolution(106) # ok\nsolution(107) # ok\nsolution(108) # ok\nsolution(109) # ok\nsolution(110) # ok\nsolution(111) # ok\nsolution(112) # ok\nsolution(113) # ok\nsolution(114) # ok\nsolution(115) # ok\nsolution(116) # ok\nsolution(117) # ok\nsolution(118) # ok\nsolution(119) # ok\nsolution(120) # ok\nsolution(121) # ok\nsolution(122) # ok\nsolution(123) # ok\nsolution(124) # ok\nsolution(125) # ok\nsolution(126) # ok\nsolution(127) # ok\nsolution(128) # ok\nsolution(129) # ok\nsolution(130) # ok\nsolution(131) # ok\nsolution(132) # ok\nsolution(133) # ok\nsolution(134) # ok\nsolution(135) # ok\nsolution(136) # ok\nsolution(137) # ok\nsolution(138) # ok\nsolution(139) # ok\nsolution(140) # ok\nsolution(141) # ok\nsolution(142) # ok\nsolution(143) # ok\nsolution(144) # ok\nsolution(145) # ok\nsolution(146) # ok\nsolution(147) # ok\nsolution(148) # ok\nsolution(149) # ok\nsolution(150) # ok\nsolution(151) # ok\nsolution(152) # ok\nsolution(153) # ok\nsolution(154) # ok\nsolution(155) # ok\nsolution(156) # ok\nsolution(157) # ok\nsolution(158) # ok\nsolution(159) # ok\nsolution(160) # ok\nsolution(161) # ok\nsolution(162) # ok\nsolution(163) # ok\nsolution(164) # ok\nsolution(165) # ok\nsolution(166) # ok\nsolution(167) # ok\nsolution(168) # ok\nsolution(169) # ok\nsolution(170) # ok\nsolution(171) # ok\nsolution(172) # ok\nsolution(173) # ok\nsolution(174) # ok\nsolution(175) # ok\nsolution(176) # ok\nsolution"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"NO\"\nassert solution(\"5 10\") == \"NO\"\nassert solution(\"5 1 10\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('2 1 1 2 5') == 'YES'\nassert solution('4 5 3') == 'NO'\nassert solution('10 10') == 'YES'\nassert solution('100 100') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"aabaca\") == \"aba\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ajihiushda\") == \"233\"\nassert solution(\"zz\") == \"zz\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\"\"\"\n\n\n\"\"\"\nThe only difference between the easy and the hard versions is constraints.\n\nA subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \"abaca\" the following strings are subsequences: \"abaca\", \"aba\", \"aaa\", \"a\" and \"\" (empty string). But the following strings are not subsequences: \"aabaca\", \"cb\" and \"bcaa\".\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\n\nYour task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ \u2014 the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n\n\n-----Examples-----\nInput\n4 5\nasdf\n\nOutput\n4\n\nInput\n5 6\naaaaa\n\nOutput\n15\n\nInput\n5 7\naaaaa\n\nOutput\n-1\n\nInput\n10 100\najihiushda\n\nOutput\n233\n\n\n\n-----Note-----\n\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('asdf') == '4'\nassert solution('aaaaa') == '15'\nassert solution('ajihiushda') == '233'\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 asdf') == 4\nassert solution('4 5 adf') == 4\nassert solution('4 5 ajihiushda') == -1\nassert solution('10 100 ajihiushda') == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\nassert solution(\"ajihiushdaa\") == \"233\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ajihiushda') == 233\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == \"4\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 aaaaa\") == 15\nassert solution(\"5 7 aaaaa\") == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 aaaa\") == 4\nassert solution(\"5 6 aaaa\") == -1\nassert solution(\"5 7 aaaa\") == 15\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 100 1\\n') == '4'\nassert solution('2 1 1\\n') == '3'\nassert solution('3 2 2\\n') == '7'\nassert solution('30 20 10\\n') == '39'\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\nprint('Success')"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 2 1\"\n) == 4\nassert solution(\n\"3 2 2\"\n) == 7\nassert solution(\n\"1 100 1\"\n) == 3\nassert solution(\n\"30 20 10\"\n) == 39\nassert solution(\n\"10 10 10\"\n) == 10\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == 4\nassert solution(\"3 2 2\") == 7\nassert solution(\"1 100 1\") == 3\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"\n\n\nfrom itertools import accumulate\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == '4'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8') == 'YES'\nassert solution('2 2\\n1 1\\n1 1') == 'YES'\nassert solution('1 100\\n10 10') == 'NO'\nassert solution('3 4\\n1 2\\n1 1\\n1 1\\n2 2') == 'NO'\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Set\nfrom collections import Counter\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == 'YES'\nassert solution(\"3 4\") == 'NO'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n7\\n8\\n9\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4\\n9\\n8\\n5\\n7\\n4"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n') == 'YES'\n\nassert solution('3 4\\n5 7\\n5 6\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n') == 'NO'\n\n'''\n---SOLUTION---\n'''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n') == 'YES'\nassert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n') == 'NO'\nassert solution('3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n100 1\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 1\\n') == 'YES'\n\n\n-----Discussion-----\n\nI think it is actually not possible to construct a square that is symmetric with respect to the main diagonal, \nbecause in that case one tile would lie on the diagonal and another one on the secondary diagonal.\n\nTherefore, the task is much simpler, and I think one can solve this task by checking if any tile can be rotated.\n\nBasically, if we have to rotate, it means that we have to compare the top left with the bottom right, and the bottom right with the top left.\n\nIf we have to check if we can rotate, we know that if both tiles have different values, then we should rotate one tile (or both).\n\nI believe that I have implemented this solution, but I am not sure.\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"YES\"\nassert solution(\"2 3\\n2 1\\n1 2\\n2 3\\n2 3\\n3 1\\n1 1\\n1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1234\") == \"1\"\nassert solution(\"12345\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1, 2, 3\") == \"0\"\nassert solution(\"1, 2, 3, 4\") == \"1\"\nassert solution(\"1, 3, 3\") == \"1\"\nassert solution(\"1, 3, 4, 5\") == \"1\"\nassert solution(\"1, 3, 4, 5, 6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '0'\nassert solution('10') == '1'\nassert solution('9') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n\nhttps://www.coursera.org/learn/competitive-programming/lecture/R8zna/mathematical-optimization\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\"\n) == \"0\"\nassert solution(\n    \"5\"\n) == \"1\"\nassert solution(\n    \"6\"\n) == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((()))())\") == \"4\"\nassert solution(\"(()(()))()\") == \"4\"\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()\")) == 1\nassert solution(\"()))()\") == 5\nassert solution(\"(()\") == 4\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('()))()') == 5\nassert solution('(((()))())') == 4\nassert solution('((((((((((((((((())))))())))))())))(())()))') == 4\nassert solution('((((((((((((((((())))))())))))())))(())()))') == 4\n\nassert solution('(()()') == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"((()))\") == 4\nassert solution(\"(((()))\") == 0\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((()))())\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"((()))()\") == 4\nassert solution(\"()((()))()\") == 4\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"(((())))()\") == 3\nassert solution(\"((((()))))()\") == 0\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"((()))\") == 1\nassert solution(\"()()\") == 1\nassert solution(\"((()))()\") == 1\nassert solution(\"()((()))()\") == 1\nassert solution(\"()((()))()\") == 1\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"((((((()))))))\") == 4\nassert solution(\"(((((())))\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"(()()\") == 4\nassert solution(\"(((()\") == 0\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"(((()))()))(((((((((((((((((((((((((((((((((()))(((()(()())((()(()()(()(((((((())))))))))))))))()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('705') == 1\nassert solution('5071') == 4\nassert solution('1241367') == -1\nassert solution('2') == -1\nassert solution('1') == 0\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\nassert solution('20011001') == 1\n\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5071\") == \"4\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == \"4\"\n\nassert solution(\"705\") == \"1\"\n\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\n\nfrom functools import reduce\nfrom typing import List"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.setrecursionlimit(1000000)\nMOD = 998244353"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcde') == '1'\nassert solution('a') == '1'\nassert solution('abc') == '3'\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == 2\n\"\"\"\nfrom collections import Counter\nfrom itertools import groupby\nfrom operator import itemgetter\nfrom typing import Dict\n\nfrom _collections import defaultdict\nfrom collections import deque\nfrom copy import deepcopy\nfrom collections import defaultdict\nimport itertools\nfrom collections import deque"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == \"1 1 1 1 1\"\nassert solution(\"abccba\") == \"1 1 1 2 1 1\"\nassert solution(\"cbaee\") == \"1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\n\nimport sys"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('ab') == '2'\nassert solution('abc') == '3'\nassert solution('abcd') == '4'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"aaaaaaa\") == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"ab\") == 1\n\"\"\"\n\nfrom typing import Set, Dict"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"1 2 1 2 1\"\nassert solution(\"abcd\") == \"1 2 1 2 1\"\nassert solution(\"abcd\") == \"1 1 2 2 1\"\nassert solution(\"abcde\") == \"1 1 1 1 1\"\nassert solution(\"abcde\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('aaabbcbb') == 2\nassert solution('abcdedc') == 3\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == '2', \"Case 1\"\nassert solution('aaabbcbb') == '2', \"Case 2\"\nassert solution('abcdedc') == '3', \"Case 3\"\nassert solution('abcde') == '1', \"Case 4\"\n\nprint(\"The local tests are done.\")"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\na\naba\nabacaba\nba\naba\n''') == 'YES\\na\\nba\\naba\\naba\\nabacaba'\nassert solution('''\n3\nqwerty\nqwerty\nqwerty\n''') == 'YES\\nqwerty\\nqwerty\\nqwerty'\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_stdout\n\n\"\"\"\nfrom itertools import combinations, permutations\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"aaaaaaa\") == \"YES\"\nassert solution(\"aaaa\") == \"YES\"\nassert solution(\"aaabaaaaa\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\n\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == 'YES'\nassert solution(\"abacaba\") == 'YES'\nassert solution(\"ab\") == 'NO'\nassert solution(\"abab\") == 'YES'\nassert solution(\"a\") == 'NO'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"YES\\na\\nb\\nc\\nd\\ne\\nf\\ng\"\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"YES\\naba\\naba\\naba\"\nassert solution(\"a\") == \"YES\\na\\n\"\nassert solution(\"aba\") == \"YES\\naba\\n\"\nassert solution(\"abacaba\") == \"YES\\naba\\naba\\naba\"\nassert solution(\"qwerty\") == \"YES\\nqwerty\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '3'\nassert solution('100 3') == '100'\nassert solution('10 100') == '0'\nassert solution('7 3') == '3'\nassert solution('100 3') == '100'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"\n\na = list(map(int, input().split()))\nk = a[1]\nn = a[0]\n\ndp = [[0 for i in range(k + 1)] for j in range(2)]\nfor i in range(n):\n    num = int(input())\n    if num < k:\n        dp[0][num] += 1\n\nfor i in range(n):\n    num = int(input())\n    if num < k:\n        dp[1][num] += 1\n\nfor i in range(k + 1):\n    for j in range(2):\n        for num in range(i, min(n, i + k + 1)):\n            if dp[j][i] > 0 and num < n:\n                dp[j][i + num] += dp[j][i]\n\nprint(max(dp[0][k], dp[1][k]))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == answer\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 4\\n'\n) == '12'\n\nassert solution(\n    '3 9\\n'\n) == '14'\n\nassert solution(\n    '9 3\\n'\n) == '14'\n\nassert solution(\n    '506 2708\\n'\n) == '3218'\n\nassert solution(\n    '7 3\\n'\n) == '15'"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\n\"\"\"\n\nimport sys\nimport os\nfrom itertools import permutations"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\n\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 2\\n') == '8'\n\nassert solution('3 9\\n1 2\\n') == '14'\n\nassert solution('506 2708\\n1 2\\n') == '3218'\n\nassert solution('3 9\\n1 2\\n') == '14'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n\") == \"14\"\nassert solution(\"4 4\\n\") == \"12\"\nassert solution(\"3 6\\n\") == \"12\"\nassert solution(\"506 2708\\n\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 9) == 14\nassert solution(4, 4) == 12\nassert solution(506, 2708) == 3218\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"YES\\n01010\"\nassert solution(\"abce\") == \"YES\\n01010\"\nassert solution(\"abcde\") == \"YES\\n01010\"\nassert solution(\"abcdef\") == \"NO\"\nassert solution(\"abccbce\") == \"NO\"\n\nprint(solution(\"abcd\"))\nprint(solution(\"abce\"))\nprint(solution(\"abcde\"))\nprint(solution(\"abcdef\"))\nprint(solution(\"abccbce\"))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '11'\nassert solution('101010') == '101010'\nassert solution('101010') == '101010'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == \"YES\\n001010101\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"NO\"\nassert solution(\"aabccc\") == \"NO\"\nassert solution(\"aaaaa\") == \"YES\"\nassert solution(\"bbbaba\") == \"YES\"\nassert solution(\"deeedbbcccbdaa\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\\n\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'YES'\nassert solution('aa') == 'YES'\nassert solution('ab') == 'YES'\nassert solution('aab') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcdedc') == 'NO\\n'\nassert solution('abcde') == 'YES\\n00000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaabbcbb') == 'YES\\n111001001011011111'\nassert solution('abacbecfd') == 'NO\\n
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"YES\\n1100\"\nassert solution(\"cdef\") == \"YES\\n1001\"\nassert solution(\"cccc\") == \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0\") == \"5\"\nassert solution(\"3 5\") == \"8\"\n\"\"\"\nimport math\n\na, b = [int(x) for x in input().split()]\nx = math.ceil(a/0.08)\ny = math.ceil(b/0.1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"1 9\") == 9\nassert solution(\"1 10\") == -1\nassert solution(\"1 10 9\") == -1\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 2') == '25'\nassert solution('2 2\\n4 4') == '-1'\nassert solution('1 1\\n2 1') == '-1'\nassert solution('5 10\\n1 2') == '2'\nassert solution('1 10\\n1 2') == '2'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 3') == '-1'\nassert solution('2 1') == '-1'\nassert solution('3 4') == '-1'\nassert solution('6 5') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"2 5\") == \"5\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 10') == '-1'\n\na, b = map(int, stdin.split())\nprint(a * (1 + 0.08) - 1) if a * (1 + 0.08) - 1 > 0 else print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n\") == \"25\"\nassert solution(\"1 1\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '25'\nprint('Test pass.')\n\nassert solution('3 2') == '26'\nprint('Test pass.')\n\nassert solution('1 0') == '-1'\nprint('Test pass.')\n\nassert solution('0 1') == '-1'\nprint('Test pass.')\n\nassert solution('3 3') == '26'\nprint('Test pass.')"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 1') == '-1'\nassert solution('10 10') == '-1'\nassert solution('10 10 1 10') == '25'\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n1\\n1 1 1') == 'YES'\nassert solution('1 1\\n2\\n1 1 1') == 'YES'\nassert solution('1 1\\n2\\n2 2 1') == 'NO'\nassert solution('1 1\\n2\\n3 3 1') == 'NO'\nassert solution('1 1\\n3\\n3 3 1') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"YES\\n1 2 4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"YES\\n1 2 3 4 5\"\nassert solution(\"6 5\\n1 2 3 4 5 6\") == \"YES\\n1 2 3 4 5 6\"\nassert solution(\"7 6\\n1 2 3 4 5 6 7\") == \"YES\\n1 2 3 4 5 6 7\"\nassert solution(\"9 9\\n1 2 3 4 5 6 7 8 9\\n2 4 6 8 10 12 14 16 18\\n3 6 9 12 15 18 21\\n4 8 12 16 20 24\\n5 10 15 20 25 30\\n6 12 18 24 30 36\\n7 14 21 28 35 42\\n8 16 24 32 40 48\\n9 18 27 36 45 54\\n10 20 30 40 50 60\") == \"YES\\n1 2 3 4 5 6 7 8 9 10 12 14 16 18 20 24 30 36 42 48 54 60\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"6 1\") == \"YES\\n1 6\"\nassert solution(\"7 5\") == \"NO\"\nassert solution(\"10 3\") == \"NO\"\nassert solution(\"10 10\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"NO\"\nassert solution(\"7 6\") == \"YES\\n1 2 4 5 6\"\nassert solution(\"10 9\") == \"YES\\n4 5 6 7 8 9\"\nassert solution(\"7 6\") == \"YES\\n1 2 4 5 6\"\nassert solution(\"9 7\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 5 6 8\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2 4 5 6 8\") == \"YES\"\nassert solution(\"1 3 5 6 8\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('0 0') == 'NO'\nassert solution('0 1') == 'YES'\nassert solution('1 0') == 'YES'\nassert solution('0 0 0 1') == 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'YES\\n1'\nassert solution('3 4') == 'NO'\nassert solution('2 3') == 'YES\\n1 1'\nassert solution('10 10') == 'YES\\n1 1 2 2 2 2 2 2 2 2'\nassert solution('1 1') == 'YES\\n1'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3') == 'NO\\n'\nassert solution('1 1') == 'YES\\n1'\nassert solution('9 4') == 'NO\\n'"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n---------------------------------------------------------------------------\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n10 -2\\n8 -1\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 3\\n1 2\\n1 -2\\n1 -1\\n\") == 3\n\n\"\"\"\n\nfrom collections import deque\n\ninput()\nqueue = deque()\nrating = int(input())\n\nfor i in range(int(input())):\n    queue.append(tuple(map(int, input().split())))\nqueue = deque(sorted(queue, key=lambda x: x[0]))\n\nresult = 0\nlast_r = rating\n\nfor i in range(len(queue)):\n    if last_r + queue[i][1] >= 0:\n        last_r += queue[i][1]\n        result += 1\nprint(result)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\"\"\"\n\nn, r = map(int, stdin.readline().split())\n\nprojects = []\nfor _ in range(n):\n    a, b = map(int, stdin.readline().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\nprojects.sort(key=lambda x: x[1], reverse=True)\n\ncurrent_rating = r\nres = 0\nfor a, b in projects:\n    if a <= current_rating:\n        current_rating += b\n        res += 1\nprint(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\"\"\"\n\nfrom collections import deque\nimport heapq\n\nn, r = list(map(int, stdin.readline().split()))\n\nqueue = deque()\nheap = []\n\nfor _ in range(n):\n    a, b = map(int, stdin.readline().split())\n    queue.append((a, b))\n    heapq.heappush(heap, (-b, a))\n\nr -= queue[0][0]\n\nans = 0\n\nwhile len(queue) > 0:\n    b, a = queue.popleft()\n    while r < a and len(queue) > 0:\n        b2, a2 = queue.popleft()\n        r -= a2\n        a = a2\n    if r >= a:\n        ans += 1\n        r -= a\n    if len(queue) > 0:\n        queue.appendleft((a, b))\n        heapq.heappush(heap, (-b, a))\n\nprint(ans)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n10 -2\\n8 -1\") == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\n\nassert solution('''3 2\n300 -300\n1 299\n1 123''') == '3'\n\nassert solution('''3 4\n4 6\n10 -2\n8 -1''') == '3'\n\nassert solution('''1 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '1'\n\nassert solution('''3 4\n4 6\n10 -2\n8 -1\n''') == '0'"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def is_palindrome(self, arr: List[int]) -> bool:\n        # rows\n        for i in range(len(arr)):\n            if arr[i]!= arr[len(arr) - 1 - i]:\n                return False\n        # columns\n        for i in range(len(arr)):\n            if arr[i]!= arr[i * len(arr) // len(arr)]:\n                return False\n        return True\n\n    def solution(self, n: int, arr: List[int]) -> str:\n        if not n:\n            return 'NO'\n        arr.sort()\n        arr.reverse()\n        for i in range(len(arr)):\n            if self.is_palindrome(arr[:len(arr) - i]):\n                return''.join(str(x) for x in arr[:len(arr) - i])\n        return 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10 \""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"1\\n1\\n\") == \"YES\\n1 1\\n\"\n\n\n\n-----Test-----\n\n%load -m solutions.problem172\nimport sys\nimport io\nfrom contextlib import redirect_stdout\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('1\\n1\\n') == 'YES\\n1'\nassert solution('3\\n1 1 1 1 1\\n') == 'YES\\n1 3 1\\n1 3 1\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n') == 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\n\nassert solution(\"3\") == \"YES\\n1 3 1\\n3 1 3\"\n\nassert solution(\"1\") == \"YES\\n1\"\n\nassert solution(\"2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3\\n') == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution('3\\n1 1 1 1 1 3 3 3 3\\n') == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\nassert solution('4\\n1 1 1 1 1 3 3 3 3\\n') == \"NO\"\nassert solution('1\\n10\\n') == \"YES\\n10\"\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\\n\"\nassert solution(\"1\\n10\\n\") == \"YES\\n10\\n\"\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 10\n10 0\n10 -10\n30 0''') == 'YES'\nassert solution('''4 10\n10 0\n10 -10\n30 0\n-20 0''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n-20 0''') == 'YES'\nassert solution('''4 10\n5 -1\n5 0\n2 1\n4 -2''') == 'YES'\nassert solution('''4 10\n5 -1\n5 0\n2 1\n4 -2''') == 'YES'\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self."
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == \"YES\"\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == \"YES\"\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\n\"\"\"\nfrom collections import namedtuple"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 'YES'\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == 'NO'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2\\n1 2\\n') == 'YES\\n0 0 0 0 0 1 1 0 0 0\\n'\nassert solution('5 1 2\\n1 2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\nassert solution('5 1 2\\n1 2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == 'YES\\n0 1 0 2 2 0 3'\nassert solution(\"10 1 11\\n1\\n\") == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution(\"10 1 5\\n2\\n\") == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"\n\n\"\"\"\nimport sys\nfrom typing import Dict\nfrom copy import deepcopy"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\nassert solution(\"10 1 5\\n11\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\nassert solution(\"10 1 5\\n11\\n5\") == \"NO\"\n\nprint('Successfully passed all tests')\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 4\") == 'YES\\n0 1 0 2 3'\nassert solution(\"5 2 1\") == 'YES\\n0 0 0 0 1'\nassert solution(\"10 1 5\") == 'YES\\n0 0 0 0 0 1 1 0 0 0 0'\nassert solution(\"10 1 11\") == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution(\"5 2 2\") == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == 0\nassert solution(\"abcbba\") == 2\nassert solution(\"abcbda\") == 3\nassert solution(\"abc\") == 0\nassert solution(\"abcc\") == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 2\nassert solution(\"\") == 0\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == 0\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"se\") == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('test') == 0\n\nassert solution('tst') == 0\n\nassert solution('tt') == 0\n\nassert solution('et') == 0\n\nassert solution('abab') == 0"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('aaaaa') == 0\nassert solution('aaaaaaaaaaa') == 0\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('abcde') == 0\nassert solution('sadf') == 0\nassert solution('a') == 1\nassert solution('asdf') == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"aaaaa\") == 5\nassert solution(\"a\") == 0\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 3\nassert solution(\"tt\") == 2\nassert solution(\"et\") == 3\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacabae\") == 3\nassert solution(\"abacadae\") == 3\nassert solution(\"abba\") == 2\nassert solution(\"abcd\") == 0\nassert solution(\"bbab\") == 2\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\n---"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nassert solution('1.012345') == '1 1'\nassert solution('1.111000') == '1 1'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2.572479\") == \"10 3\"\n\"\"\"\n\nx = float(input())\n\na = int(x)\n\nb = int(x + 0.5)"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nimport sys\n\nx = float(sys.stdin.readline())"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.23456\") == \"10 3\"\nassert solution(\"2.5678\") == \"10 3\"\nassert solution(\"3.1234\") == \"9 9\"\nassert solution(\"4.25678\") == \"9 9\"\nassert solution(\"5.1234\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 2\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n') == 'YES\\n2 9\\n7 2'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n') == 'YES\\n2 9\\n7 2'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n') == 'YES\\n2 9\\n7 2'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n') == 'YES\\n2 9\\n7 2'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\n\nassert solution(\"8 5 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n'\nassert solution('6 3 3\\n') == 'NO\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 2\\n') == 'YES\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n\nprint(solution(\"6 3 3\"))\nprint(solution(\"6 2 3\"))\nprint(solution(\"10 4 3\"))\nprint(solution(\"8 5 3\"))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 3') == 'YES\\n3 1\\n4 1\\n1 2\\n6 2\\n7 1\\n5 3\\n2 6\\n8 7\\n4 3\\n5 6\\n7 2\\n3 7\\n'\nassert solution('7 3 3') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n7 2\\n3 7\\n'\nassert solution('7 4 3') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n7 2\\n3 7\\n'\nassert solution('7 5 3') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n7 2\\n3 7\\n'\nassert solution('10 4 3') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n7 2\\n3 7\\n'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 3') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3') == 'NO\\n'\nassert solution('8 5 3') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\nassert solution('10 4 3') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 2\") == \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"7 5 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"2 2 1\"\n) == \"1100\"\nassert solution(\n\"3 3 3\"\n) == \"101100\"\nassert solution(\n\"5 3 6\"\n) == \"01010100\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11010\") == \"101010\"\nassert solution(\"11101\") == \"111110\"\nassert solution(\"111010\") == \"111111\"\nassert solution(\"1110101010\") == \"1111101010\"\nassert solution(\"1110110110\") == \"11111110110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1\") == \"101010\"\nassert solution(\"1 1 1\") == \"101100\"\nassert solution(\"0 0 0\") == \"101010\"\nassert solution(\"1 1 1\") == \"101100\"\nassert solution(\"0 0 0\") == \"101010\"\n\n\"\"\"\n\na, b, x = map(int, stdin.readline().split())"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11101\") == \"11101\"\nassert solution(\"110011\") == \"111011\"\nassert solution(\"111001100\") == \"111110101\"\nassert solution(\"11100110011010\") == \"111110101110\"\nassert solution(\"1110011010\") == \"1111101010\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == \"0101010\"\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101100\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"11001110\") == \"11101010\"\nassert solution(\"101101110\") == \"11011100\"\nassert solution(\"111111010\") == \"111110110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 6') == '01010100'\nassert solution('5 3 1') == '101100'\nassert solution('3 3 1') == '101100'\nassert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11101\") == \"11101\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"111011\") == \"111011\"\nassert solution(\"11101110\") == \"11101110\"\nassert solution(\"11101111\") == \"11101111\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 2 4\") == \"101100\"\nassert solution(\"11 2 5\") == \"010100\"\nassert solution(\"11 3 1\") == \"101101\"\nassert solution(\"10 10 10\") == \"111111\"\nassert solution(\"10 1 1\") == \"101010\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"cb\") == \"abc\"\nassert solution(\"ac\") == \"cac\"\nassert solution(\"ca\") == \"ccac\"\nassert solution(\"bb\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa\") == \"cacbacbab\"\nassert solution(\"ab\") == \"cacbacbab\"\nassert solution(\"bc\") == \"cacbacbab\"\nassert solution(\"ca\") == \"cacbacbab\"\n\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cac\"\nassert solution(\"bb\") == \"cacb\"\nassert solution(\"abcc\") == \"acbac\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_str) == test_res\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bc\"\nassert solution(\"bb\") == \"bc\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"acb\"\n\n\"\"\"\n\nn = int(input())\na = input()\nb = input()\nc = input()\n\nprint(\"YES\" if (n * 3) % 2 == 0 and (a + b + c) not in (a * 3 + b * 3 + c * 3) else \"NO\")"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == 'ac'\nassert solution('bc') == 'bc'\nassert solution('ca') == 'cc'\nassert solution('bb') == 'bc'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'cbac'\nassert solution('bb') == 'cba'\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n-2 1') == '3 1 2'\n\"\"\"\n\nimport sys\n\nnum_length = int(sys.stdin.readline())\nnum_list = sys.stdin.readline().split()\n\nresult_list = []\nfor i in range(num_length - 1):\n    if int(num_list[i]) < 0:\n        if int(num_list[i]) + 1!= int(num_list[i + 1]):\n            result_list.append(-1)\n            break\n    elif int(num_list[i]) > num_length:\n        result_list.append(-1)\n        break\n    result_list.append(int(num_list[i]) + 1)"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\nprint(solution(\"5\\n1 1 1 1\"))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"3 2 1\") == \"2 1 3\"\nassert solution(\"5 1 2\") == \"2 1 5 3\"\nassert solution(\"2 2 1\") == \"-1\"\nassert solution(\"7 3 1\") == \"1 3 7 4 5 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_0) == test_1\n\"\"\"\nimport sys"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n\") == \"3 1 2\"\nassert solution(\"5 1 1 1\\n\") == \"1 2 3 4 5\"\nassert solution(\"5 2 3 3\\n\") == \"1 2 3 4 5\"\nassert solution(\"3 1 -2\\n\") == \"-1\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nassert sys.argv[1:] == ['-1 1 1 1']\n\nn = int(sys.stdin.readline())\nq = list(map(int, sys.stdin.readline().split()))\n\ncounts = Counter(q)"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"4 0 2\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 -2') == '3 1 2'\nassert solution('2 3 1 2') == '2 3 1'\nassert solution('1 3 1 2') == '1 3 1 2'\nassert solution('2 1 -1') == '2 1'\nassert solution('3 2 -1 1') == '2 3 1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nn = int(stdin.readline())\nq = list(map(int, stdin.readline().split()))\n\nprint(\"-1\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 -1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"100\\n
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 2 1 3') == '2'\nassert solution('1 2 1 2 1 1 3 1 2 2 2 1') == '3'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2 3\\n') == '1'\nassert solution('5\\n2 2 2 3 3\\n') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 1') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2\\n') == '1'\nassert solution('3\\n1 2 3\\n') == '1'\n\"\"\"\nimport sys\nfrom collections import deque\n\nassert solution('5\\n2 2 2 3 3\\n') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n5\n2 2 2 3 3\n''') == '2'\nassert solution('''\n5\n3 2 3 3 3\n''') == '3'\nassert solution('''\n3\n3 3 3\n''') == '0'\nassert solution('''\n4\n0 1 1 1\n''') == '0'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 2 2 3 3''') == '2'\nassert solution('''3\n1 2 3''') == '1'\nassert solution('''5\n1 2 3 3 2''') == '2'\n\n----\n\n'''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ni, j = 1, 1\n\nwhile n > i * j:\n    j += 1\n    if j % 2 == 0:\n        i += 1\n\nprint(i + j - 2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def moves_to_reach(self, n: int) -> int:\n        return int((n - 1) / 2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '10'\n    ) == '5'\n\ntry:\n    assert solution(\n        '10'\n        ) == '5'\n    assert solution(\n        '10'\n        ) == '5'\n    assert solution(\n        '10'\n        ) == '5'\n    assert solution(\n        '10'\n        ) == '5'\nexcept AssertionError:\n    print('Takahashi must be standing on the 1st row and the 1st column.')\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nn = input()\n\nprint((int(n)+1)**2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nN = int(input())\n\nprint(int(N ** 0.5))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\\n1 1\\n\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\\n\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\\n\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"119 226\\n\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"3 5 5\") == \"0 15\"\nassert solution(\"686 5 5\") == \"0 15\"\nassert solution(\"319 10 53 256\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 1 1\") == \"0 1\"\nassert solution(\"15 5 5\") == \"0 15\"\nassert solution(\"3 0 0 3\") == \"3 3\"\nassert solution(\"686 479 178 29\") == \"22 334\"\nassert solution(\"319 10 53 256\") == \"119 226\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 3\") == \"0 1\"\nassert solution(\"6 3 4\") == \"0 1\"\nassert solution(\"2 1 0\") == \"0 1\"\nassert solution(\"1 1 1\") == \"0 1\"\n\nassert solution(\"15 5 5\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15\\n5 5 5\\n5 5 5\") == '0 15'\nassert solution(\"3\\n0 0 3\\n3 0 0\") == '3 3'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7\") == \"7\"\nassert solution(\"11\") == \"11\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3''') == '''3\n7 7\n2 3\n4 5'''\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '''2\n3 4\n1 1\n2 2\n3 3'''\nassert solution('''4\n1 1 1 1''') == '''4\n4 4\n1 1\n2 2\n3 3'''\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(read_input()) == expected_output\n\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == \"3\\n7 7\\n2 3\\n4 5\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 2 1 5 3') == 3\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == 2\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\nassert solution(\"1\\n2\") == \"YES\"\nassert solution(\"2\\n2\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\n\n-----\n\nThe solution is based on the fact that if the array is sorted, then the heights of stacks are unique:\n\n1. Insert the first element into the first stack\n2. Check if the first element is equal to the last stack's top. If yes, delete last stack.\n3. If the first stack is empty, finish.\n4. If the first element is not equal to the last stack's top, push the new stack to the end of the array.\n5. Insert the new element into the new stack.\n6. Go back to step 2.\n\n* \u041f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0442\u0435\u043a. \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u0435\u043a\u0443, \u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u0435\u043a. \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0442\u0435\u043a \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u0435\u043a\u0443, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u0435\u043a \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u043f\u0443\u043d\u043a\u0442\u0443 2.\n\n* \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u0435\u043a\u0443, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0442\u0435\u043a \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u0435\u043a\u0443, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u0435\u043a \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u043f\u0443\u043d\u043a\u0442\u0443 2.\n\n* \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u0435\u043a\u0443, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0442\u0435\u043a \u043f\u0443\u0441\u0442\u043e\u0439, \u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u0435\u043a\u0443, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u0435\u043a \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u043f\u0443\u043d\u043a\u0442\u0443 2.\n\n\u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u0442\u0435\u043a\u0438 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 3 1 2') == 'YES'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 'YES'\nassert solution('3 2 1') == 'NO'\nassert solution('4 1 3') == 'YES'\nassert solution('4 2 3') == 'NO'\nassert solution('10 7 3') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 1\") == \"NO\"\nassert solution(\"3 3 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\n\nprint(solution(\"3 3 3\"))\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"4 3 1 2\") == \"NO\"\nassert solution(\"5 3 1 2 4\") == \"YES\"\nassert solution(\"5 3 1 2 6\") == \"NO\"\nassert solution(\"6 1 2 3 5 4\") == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 2 3') == 'YES'\nassert solution('2 3 1') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 3 4') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 3\") == \"YES\"\n\nprint(solution(input()))\n\n\n\n-----Solutions-----\n\nfrom collections import deque\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\", \"abdfec\") == \"4 5 4 5\"\nassert solution(\"abcd\", \"accd\") == \"-\"\nassert solution(\"abcd\", \"abcdef\") == \"0\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == \"accd\"\nassert solution(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abdfec\") == 4\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcdef', 'abdfec') == '4'\nassert solution('abcd', 'accd') == '-1'\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"accd\") == -1\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\nabcdef\nabdfec''') == '4\\n3 5 4 5'\nassert solution('''4\nabcd\naccd''') == '-1'\nassert solution('''4\nabcd\na''') == '0\\n0 0 0 0'\nassert solution('''4\nabcd\nc''') == '0\\n0 0 0 1'\nassert solution('''4\nacde\ne''') == '1\\n0 0 1 0'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\nassert solution(b) == c\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba') == \"PSPSPSPS\"\nassert solution('3\\na\\naa\\na\\na') == \"PPS\"\nassert solution('2\\na\\nc\\n') == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'PS'\nassert solution('aa') == 'PSS'\nassert solution('aaa') == 'PSPS'\nassert solution('aab') == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"baba\") == \"PSSPSS\"\n\nassert solution(\"a\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ba\") == \"PS\"\nassert solution(\"a\") == \"P\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"P\"\nassert solution(\"aba\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abab\") == \"PSPS\"\nassert solution(\"ba\") == \"PS\"\nassert solution(\"aba\") == \"PPS\"\nassert solution(\"a\") == \"P\"\nassert solution(\"baba\") == \"PSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSS\"\nassert solution(\"abab\") == \"PPSS\"\nassert solution(\"a\") == \"PPS\"\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ababa\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PPS\"\nassert solution(\"ac\") == \"PS\"\nassert solution(\"aaa\") == \"PPSS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ababa\") == \"PPSS\"\nassert solution(\"a\") == \"PPS\"\nassert solution(\"aba\") == \"PS\"\nassert solution(\"abb\") == \"PS\"\nassert solution(\"aaa\") == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"SPPS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == 10\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nimport operator"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"0 4 6 8 10\") == \"2\"\nassert solution(\"0 0 0 0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\nimport unittest\n\nfrom collections import Counter\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('1') == '1'\nassert solution('1 2 3 4 5 6') == '2'\n\"\"\"\nfrom typing import List, Union, Iterable, Set"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('1 4 6 8 10') == 2\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == 0\nassert solution('100 100 100 100 100 100') == 100\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")\nsys.stdout = open(\"output.txt\", \"w\")\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == 0\nassert solution(\"6\\n1 1 1 1 1 0 1\\n\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 1 1\") == \"0\"\nassert solution(\"5 1 1 1 0\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 0 0 1 1 0 0 1\") == \"2\"\n\n------Solution------\n\n'''\n\nimport sys\nimport re\nfrom typing import Dict, List\n\nsys.setrecursionlimit(10000)\n\nregex = r'[0-9]+'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"1 1 0 0 0\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('4\\n0 0 0 0') == '0'\nassert solution('5\\n1 1 1 1') == '0'\nassert solution('6\\n1 1 1 1') == '1'\nassert solution('7\\n1 1 1 1') == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '2'\nassert solution('6 90 12 18 30 18') == '4'\nassert solution('2 2 2 2 2') == '1'\nassert solution('3 3 3 3 3') == '1'"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == ''\n\n---"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 3 4\") == \"2\"\nassert solution(\"6 90 12 18 30 18\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n4\\n2\\n10\") == 2\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4 8 16 32\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nprint(solution(stdin))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 3 4 5\\n6 90 12 18 30 18') == '1\\n4\\n2\\n1\\n2'\n\"\"\"\n\na = input().split()\na = [int(x) for x in a]\nb = []\nfor i in a:\n    b.append(set(i))\nc = set(b[0])\nd = set(b[1])\ne = set(b[2])\nf = set(b[3])\nprint(len(c.intersection(d, e, f)))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"6 90 12 18 30 18\") == \"4\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\\n2\\n2\\n2\"\nassert solution(\"4\\n1 2 3 4\") == \"1\\n2\\n2\\n2\"\nassert solution(\"4\\n1 2 3 4\") == \"1\\n2\\n2\\n2\"\nassert solution(\"4\\n1 2 3 4\") == \"1\\n2\\n2\\n2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n\"\"\"\n\nnum_coins = int(input())\nsorted_coins = list(map(int, input().split()))\n\nsorted_coins = sorted(sorted_coins)\n\ncounter = 0\n\nwhile sorted_coins:\n    first = sorted_coins.pop(0)\n    try:\n        while sorted_coins[0] == first:\n            sorted_coins.pop(0)\n            counter += 1\n    except IndexError:\n        pass\n\nprint(counter)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1\") == \"7\"\n\nassert solution(\"2 3\") == \"0\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('5\\n1 2 3 3 3') == '2'"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"8\\n1 3 3 2 3 2 3 1\") == \"4\"\nassert solution(\"10\\n
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\nimport numpy as np\n\nfrom _aoc_utils import get_input_for_day\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '2'\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4 5 6') == 2\nassert solution('100 2 3 4 5 6') == 2\nassert solution('100 1 100 100 1 100') == 1\n\nimport re"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n0 0 1 1 0 1\\n\") == \"2\"\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\\n\") == \"-1\"\nassert solution(\"10 3\\n0 0 0 0 0 1\\n\") == \"3\"\n\nimport sys\n\n_, k = [int(x) for x in sys.stdin.readline().split()]\nh = [int(x) for x in sys.stdin.readline().split()]\n\nres = float('inf')\nfor r in range(k, 0, -1):\n    temp = [x for x in h if x >= r]\n    if len(temp) < res:\n        res = len(temp)"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\\n\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 10\") == \"-1\"\nassert solution(\"10 3\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"2\"\nassert solution(\"5 10\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\nassert solution(\"10 3\\n0 0 0 0 0 0 0 0 0 1\\n\") == \"3\"\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"10 10\\n0 0 0 0 0 0 0 0 0 0 1\") == \"3\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == 3\nassert solution('5 3\\n1 0 0 0 1\\n') == 2\nassert solution('5 10\\n0 0 0 0 0\\n') == -1\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == 3\nassert solution('1\\n0\\n') == 0\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_1) == expected_1\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == '3'\nassert solution(\"5 10\\n0 0 0 0 0 0\") == '-1'\n\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 3\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('3\\n') == '3'\nassert solution('3\\n1') == '3'\nassert solution('3\\n1\\n1') == '0'\nassert solution('3\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"3\"\nassert solution(5) == \"4\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '5'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"3\"\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"3\"), \"3\")"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\n\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '4'\nassert solution('3\\n') == '6'\nassert solution('10\\n') == '18'\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()())\") == 0\n\nassert solution(\"()())(\") == 1\n\nassert solution(\"())(\") == 1\n\nassert solution(\"()))(\") == 1\n\nassert solution(\"()()))(\") == 1"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"(((())))(((())))\"\n) ==\n0\nassert solution(\n\"((())())()\"\n) ==\n2\nassert solution(\n\"()))((()\"\n) ==\n0\nassert solution(\n\"((((((((((((((((())\"\n) ==\n19\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()(((())\") == 3\nassert solution(\"(()(((\") == 3\nassert solution(\"(()()(()(\") == 3\nassert solution(\"(()((((\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()())\") == 0\nassert solution(\"()())\") == 0\nassert solution(\"((()))\") == 1\n\nassert solution(\"(((()))(())())\") == 1\n\nassert solution(\"()))(((()\") == 3"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('(((())') == 3\nassert solution('()())') == 3\nassert solution(')())())') == 0\nassert solution('((()') == 1\nassert solution('()(()(()()()()()))') == 4\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()()()\") == 0\nassert solution(\"()))((()\") == 0\nassert solution(\"((()))\") == 0\nassert solution(\"()((()())\") == 3\nassert solution(\"(()((((()\") == 3"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((((()))\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((((\") == 3\nassert solution(\"()())()\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"))(((((\") == 3\n\nassert solution(\"()(((()))()(())(())()\") == 6\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(((())))\") == 0\nassert solution(\"(()())()\") == 1\nassert solution(\"()((()()))\") == 1\nassert solution(\"(((((())))))\") == 0\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"baaba\") == 2\n\n\"\"\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(solution(\"bbaba\"), 3)\n\n    def test_solution2(self):\n        self.assertEqual(solution(\"baaba\"), 2)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 3, \"Actual: \" + solution(\"test\")\nassert solution(\"test\") == 3, \"Actual: \" + solution(\"test\")\n\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aa\") == 1\nassert solution(\"ab\") == 1\nassert solution(\"aab\") == 2\nassert solution(\"a\") == 0\nassert solution(\"abab\") == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"\") == 0"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'a'\nassert solution('b') == ''\nassert solution('ab') == ''\nassert solution('a') == ''\nassert solution('bb') == ''\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"st\"\nassert solution(\"tst\") == \"t\"\nassert solution(\"tt\") == \"\"\nassert solution(\"et\") == \"\"\n\nassert solution(\"abcde\") == \"abcde\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"aaab\") == 2\nassert solution(\"bbb\") == 0\n\nprint(solution('asdfasdf'))\nprint(solution('fasd'))\n\n---"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == 0\nassert solution(\"abc\") == 0\nassert solution(\"abca\") == 1\nassert solution(\"abcc\") == 1\nassert solution(\"abcba\") == 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 2 1 1''') == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a=1, b=2, c=1, d=1) == 2\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 2 1\") == \"2\"\nassert solution(\"2 2 2 2\") == \"4\"\nassert solution(\"1 2 3 4\") == \"12\"\nassert solution(\"3 4 5 6\") == \"24\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1 1') == 2\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"> 1 2 1 1\") == \"2\"\nassert solution(\"> 1 2 1 1\") == \"2\"\nassert solution(\"> 1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 2\n\n----Solution----\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n9 1 4 4 6 7\\n') == '2'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 4 4 6 7\\n\") == 2\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nd = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\nassert solution('4\\n1 2 3 4 5') == '0'\nassert solution('8\\n1 2 3 4 5 6 7 8 9 10') == '4'\nassert solution('8\\n3 3 3 3 3 3 3 3') == '4'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3 4 5') == '2'\nassert solution('6 9 1 4 4 6 7') == '2'\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 4 6 7\\n') == '2'\n\n-----Time Limit-----\n1\n\n-----Memory Limit-----\n256 MB\n\n-----Source Limit-----\n1 MB\n\n-----Test Case Time Limit in seconds-----\n3\n\n-----Test Case Memory Limit in MB-----\n256\n\n----\n\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 1 4 4 6 7') == 2\n\"\"\"\n\nfrom math import ceil, floor\nfrom typing import Tuple"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 3 2\\n') == '3'\nassert solution('6 8 6 4 5\\n') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 2 2\\n') == \"1\"\nassert solution('6\\n9 1 4 4 6 7\\n') == \"2\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\nWe will use the following notation:\n\nO(m) : the number of operations for the case where M=n\nO(1) : the number of operations for the case where M=1\n\nAnd we will assume:\n\n1 <= n <= 10^5\n1 <= d_i <= 10^5\nn is even\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\") == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nfrom typing import List, Tuple, Optional, Dict\n\nNUM_HOURS: int = 24\nNUM_MINUTES: int = 60\nNUM_SECONDS: int = 60"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 24 21 23') == 3\n\n\"\"\"\n\nimport collections\nimport itertools\nimport typing"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == 3\nassert solution(\"7 24 21 23\\n12 18 10 20 20 11 22\") == 2\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"1 1\\n0 0\") == \"1\"\nassert solution(\"3 6\\n6 5 4\") == \"0\"\nassert solution(\"1 1\\n0 0\") == \"1\"\nassert solution(\"2 4\\n0 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 24 21 23') == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"10\n1 2 5 6 7 10 21 23 24 49\"\"\") == \"4\"\n\nassert solution(\"\"\"5\n2 10 50 110 250\"\"\") == \"1\"\n\nassert solution(\"\"\"6\n4 7 12 100 150 199\"\"\") == \"3\"\n\nassert solution(\"\"\"10\n4 7 12 100 150 199\"\"\") == \"1\"\n\nassert solution(\"\"\"10\n2 10 50 110 250\"\"\") == \"1\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == '4'\nassert solution(\"5\\n2 10 50 110 250\") == '1'\nassert solution(\"6\\n4 7 12 100 150 199\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\n\"\"\"\n\nimport sys\nimport os\n\nDEBUG = False"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 50 110 250\") == \"3\"\nassert solution(\"4 7 12 100 150 199\") == \"1\"\nassert solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\nassert solution(\"5\\n2 4 8 3 6\") == \"1 2\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '1 2'\n\"\"\"\n\n\"\"\"\nimport sys\n\nassert sys.version_info >= (3, 7) #  python version check"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 5 10 1 10 2\") == \"1 4\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\na = [2, 4, 8, 3, 6]\nlcm = a[0]\nfor i in range(1, len(a)):\n    lcm = lcm * a[i] // gcd(lcm, a[i])\nprint(lcm)"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\nassert solution(\"5\\n2 4 8 3 6\") == '1 2'\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\n\nmin_val = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        lcm = arr[i] * arr[j] // gcd(arr[i], arr[j])\n        if lcm > min_val:\n            min_val = lcm\n            i1 = i\n            j1 = j\nprint(i1 + 1, j1 + 1)"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('5\\n5 2 11 3 7') == '2 4'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101010\") == \"111010\"\nassert solution(\"10111010\") == \"111011110\"\nassert solution(\"101110110\") == \"1111101110\"\nassert solution(\"1011110111110\") == \"1111111111110\"\nassert solution(\"1011110111110\") == \"1111111111110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"021\") == \"121\"\nassert solution(\"11100\") == \"11110\"\nassert solution(\"01110\") == \"01110\"\nassert solution(\"11101\") == \"11110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('121') == '021'\nassert solution('120110') == '120120'\n\nprint(solution(stdin))"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('121') == '021'\nassert solution('2112010') == '211200'\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"11001\") == \"11010\"\nassert solution(\"11101\") == \"11120\"\nassert solution(\"211200\") == \"21120\"\nassert solution(\"120110\") == \"120120\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"100101\") == \"101110\"\nassert solution(\"110110\") == \"110120\"\nassert solution(\"111010\") == \"111110\"\n\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211220\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"121000\") == \"212100\"\n\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120110\") == \"120120\"\nassert solution(\"211200\") == \"211220\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('011') == '0110'\nassert solution('10') == '1010'\nassert solution('1010') == '10110'\nassert solution('10111') == '101110'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"211200\") == \"211200\"\n\nprint(solution(\"211200\"))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'6 1\\n3'\n) == '4'\n\n-----"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1\n2\n4''') == '1'\nassert solution('''5\n1\n1\n1\n1\n1''') == '0'\nassert solution('''5\n3\n3\n3\n1''') == '0'\nassert solution('''6\n1\n1\n1\n1\n1\n1''') == '0'\nassert solution('''6\n5\n1\n1\n1\n2\n1''') == '0'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '6 1'\n) == '4'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n1\") == \"3\\n2\\n1\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\nassert solution(\"10 3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n3\n''') == '4'\n\nassert solution('''\n6 4\n3\n3\n3\n3\n3\n3\n''') == '0'\n\nassert solution('''\n10 10\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n''') == '1'\n\nassert solution('''\n10 1\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n''') == '0'\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nSOLUTION"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 2 4''') == '2'\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\n\nX, K, D = sys.stdin.readline().split()\nX = int(X)\nK = int(K)\nD = int(D)"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 7\") == \"2\"\nassert solution(\"-6 4 -3\") == \"2\"\nassert solution(\"0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 4\\n\") == \"2\"\n\"\"\"\n\nimport sys\nimport os\nfrom enum import Enum\n\nfrom typing import Any\n\n\nclass Side(Enum):\n    RIGHT = 1\n    LEFT = -1\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 4') == 2\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"-1 -1 1\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n\n\"\"\"\n    Takahashi is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\n    More specifically, in one move, he can go from coordinate x to x + D or x - D.\n    He wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\n    Find the minimum possible absolute value of the coordinate of the destination.\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 10\nassert solution(2128506) == 3\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('61441') == '2'\nassert solution('2128506') == '3'\n\nimport math\n\nassert solution('61441') == '2'\nassert solution('2128506') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 0\nassert solution('2128506') == 3\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\nassert solution('571576') == 3\n\"\"\"\n\nimport math\n\nn = int(input())\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('2128506') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('14') == 0\nassert solution('61441') == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(114) == 2\nassert solution(11411) == 0\nassert solution(114514) == 1\nassert solution(1145151) == 2\nassert solution(114515151) == 10\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('14') == 0\nassert solution('61441') == 2\nassert solution('2128506') == 3\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n\"\"\"\nimport math\nimport time\n\nfrom typing import List, Set\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '27'\n\"\"\"\n\nimport math\n\nn = int(input())\nprint(int(math.factorial(n)))\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 27\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 27\n-----\nInput\n4\n\nOutput\n29\n\n\"\"\"\nimport math\na = int(input())\nn = int(math.sqrt(2 * a)) + 1\nn1 = n\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 27\n\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sys.stdin.read())) == expected_result\n\na = int(input())\n\nfor i in range(a):\n    print((i + 1) * (i + 1))\n\n-----Explanation-----\n\nThe input contains a single integer a (1 \u2264 a \u2264 30).\n\nThe code below prints the result of the formula i*i where i is the number in range (1,a)\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(13) == 1\nassert solution(927) == 1\nassert solution(48) == 0\nassert solution('95') == 0\nassert solution(100) == 1"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\nprint(\"All cases passed\")\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == 1\n\"\"\"\n\n\"\"\"\nSolution:\n\n// how many tests are there\nT = int(input())\n// read inputs\nfor i in range(T):\n    # read input\n    a = int(input())\n    # check if the number is positive\n    if a > 0:\n        # if yes, then check whether the number is divisible by 5\n        if a % 5 == 0:\n            # if yes, then print 1\n            print(1)\n        # otherwise, print 0\n        else:\n            print(0)\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n\n\"\"\"\nSolution:\n\n// how many tests are there\nT = int(input())\n// read inputs\nfor i in range(T):\n    # read input\n    a = int(input())\n    # check if the number is positive\n    if a > 0:\n        # if yes, then check whether the number is divisible by 5\n        if a % 5 == 0:\n            # if yes, then print 1\n            print(1)\n        # otherwise, print 0\n        else:\n            print(0)\n\"\"\"\n\n\"\"\"\nSolution 3\n\"\"\"\n\n\"\"\"\nSolution:\n\n// how many tests are there\nT = int(input())\n// read inputs\nfor i in range(T):\n    # read input\n    a = int(input())\n    # check if the number is positive\n    if a > 0:\n        # check whether the number is divisible by 5\n        if a % 5 == 0:\n            # if yes, print 1\n            print(1)\n        # otherwise, print 0\n        else:\n            print(0)\n\"\"\"\n\n\"\"\"\nSolution 4\n\"\"\"\n\n\"\"\"\nSolution:\n\n// how many tests are there\nT = int(input())\n// read inputs\nfor i in range(T):\n    # read input\n    a = int(input())\n    # check if the number is positive\n    if a > 0:\n        # check if the number is divisible by 5\n        if a % 5 == 0:\n            # if yes, print 1\n            print(1)\n        # otherwise, print 0\n        else:\n            print(0)\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\nprint(\"Everything ok\")\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 3 1\") == 4\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 5 3 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 3 1') == 4\nprint(solution('4 5 3 1'))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 5 1\") == \"4\"\n\"\"\"\n\nnumber_of_items = int(input())\nnumbers = [int(n) for n in input().split()]\n\nprint(sum(numbers))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(4) == 4\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n\n\"\"\"\n\nn = int(input())\nnumbers = [int(x) for x in input().split(\" \")]\n\nmax_number = max(numbers)\nsum_of_digits = 0\nfor i in range(1, max_number + 1):\n    sum_of_digits += i ** n\nprint(sum_of_digits)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == output\n\"\"\"\n\nn = int(input())\n\na = input().split()\n\nfor i in range(n):\n    a[i] = int(a[i])\n\nprint(max(a))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5 3 1') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('2 3 4 5') == '7'\nassert solution('4 3 2 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\n\"\"\"\n\nimport numpy as np\n\ntests = int(input())\n\nfor _ in range(tests):\n    n, k = [int(x) for x in input().split()]\n    v = np.arange(1, k+1)\n    ans = np.prod(v[:n])\n    print(int(ans))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\nimport math\n\n\nclass Solution:\n    def num_packages(self, n, k):\n        \"\"\"\n        Solution: https://leetcode.com/problems/polycarpus-input-output/discuss/75094/Java-DP-solution\n        \"\"\"\n        res = 0\n        while n >= k:\n            p = math.ceil(n / k)\n            res += p\n            n -= p * k\n        return res\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('7 8') == '2'\nassert solution('7 7') == '1'\nassert solution('1 1') == '0'\nassert solution
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n8 7\") == \"2\\n8\\n1\\n999999733\\n1\"\n\nprint(solution(\"\"))\n'''\n\n\nfrom itertools import combinations\nfrom collections import Counter\nfrom typing import List, Set, Dict, Tuple, NamedTuple\n\n\nclass Solution:\n    def _combination(self, n, k):\n        return [list(t) for t in combinations(n, k)][0]\n\n    def _get_shovel_count(self, n, shovel_counts):\n        shovel_count = [0] * n\n        for shovel_count in shovel_counts:\n            shovel_count[shovel_count - 1] += 1\n        return shovel_count\n\n    def _get_shovel_counts(self, n: int, k: int) -> List[int]:\n        shovel_counts = [1] * n\n        for i in range(k, n):\n            shovel_counts[i] += shovel_counts[i - 1]\n        return shovel_counts\n\n    def _get_shovel_counts_with_shovel_count(self, n: int, k: int, shovel_count: int) -> List[int]:\n        shovel_counts = [shovel_count] * n\n        for i in range(k, n):\n            shovel_counts[i] += shovel_counts[i - 1]\n        return shovel_counts\n\n    def _get_count_dict(self, a: List[int]) -> Dict[int, int]:\n        return Counter(a)\n\n    def _get_count_dict_with_count(self, a: List[int], count: int) -> Dict[int, int]:\n        count_dict = Counter(a)\n        count_dict[count] += 1\n        return count_dict\n\n    def _get_shovel_count_with_count(self, a: List[int], count: int) -> Dict[int, int]:\n        count_dict = Counter(a)\n        count_dict[count] += 1\n        return count_dict\n\n    def _is_solution(self, count_dict: Dict[int, int]) -> bool:\n        return list(count_dict.values()).count(2) >= len(count_dict) - 1\n\n    def _get_single_shovel_count_dict(self, a: List[int]) -> Dict[int, int]:\n        count_dict = Counter(a)\n        count_dict[1] = 1\n        return count_dict\n\n    def _get_shovel_counts_and_single_shovel_count_dict(self, a: List[int]) -> Tuple[List[int], Dict[int, int]]:\n        count_dict = Counter(a)\n        single_shovel_count_dict = Counter()\n        for count in count_dict:\n            if count_dict[count] == 1:\n                single_shovel_count_dict[count] = 1\n        count_dict.pop(-1)\n        count_dict.pop(1)\n        return list(count_dict.keys()), single_shovel_count_dict\n\n    def _get_shovel_count_by_n_and_k(self, n: int, k: int) -> Dict[int, int]:\n        shovel_counts = self._get_shovel_counts(n, k)\n        count_dict = self._get_count_dict(shovel_counts)\n        if self._is_solution(count_dict):\n            return count_dict\n        shovel_count = self._combination(n, k)\n        shovel_count = self._get_shovel_count(n, shovel_count)\n        shovel_count_with_count = self._get_shovel_count_with_count(shovel_count, 1)\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 1)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 2)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 3)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 4)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        shovel_count_with_count = self._get_shovel_count_with_count(shovel_count, 1)\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 1)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 2)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 3)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_dict_with_shovel_count\n        count_dict_with_shovel_count = self._get_count_dict_with_count(shovel_count, 4)\n        if self._is_solution(count_dict_with_shovel_count):\n            return count_"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\nprint(\"Passed all test cases!\")\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\n\n\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\":\n2 1 2\n1 2\n0 1\n\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": 1 2\") == \"1\"\nassert solution(\"1 1\\n0 1\") == \"1\"\nassert solution(\"1 2\\n2 1\") == \"1\"\nassert solution(\"1 2\\n2 1\\n1 1\") == \"0\"\nassert solution(\"1 2\\n2 1\\n1 1\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == 1\n\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\"\"\"\nTreat each line of input as a node in a graph, and find the number of components.\n\n---\n---\n\nInput:\n\n    5 4\n    1 2\n    1 3\n    3 2\n    4 5\n\nOutput:\n\n    2\n\n---\n---\n\nInput:\n\n    5 5\n    1 2\n    1 3\n    3 2\n    4 5\n    4 2\n\nOutput:\n\n    3\n\n---\n---\n\nInput:\n\n    5 5\n    1 2\n    1 3\n    3 2\n    4 5\n    4 2\n    2 4\n\nOutput:\n\n    1\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"1 2\\n2 1 2\\n0 1\") == \"0\"\nassert solution(\"2 2\\n1 2\\n0 1\") == \"2\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '1'\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == 1\n\"\"\"\n\nN, M = list(map(int, input().split()))\n\nbulbs = [0] * M\nswitch = [0] * N\nswitches = []\nfor i in range(M):\n    switches.append(set(list(map(int, input().split()[1:]))))\n\nbulbs[0] = 1\np = list(map(int, input().split()))\n\nfor b in range(1, M):\n    for s in switches[b]:\n        if s not in switches[b - 1]:\n            bulbs[b] = 1\n\ncount = 0\nfor i in range(len(bulbs)):\n    if bulbs[i] == 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A,B,H,M) == answer\nprint(solution(A,B,H,M))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\nfrom math import atan2, pi\nfrom typing import List\nfrom unittest import TestCase\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"1 3 6 1\") == \"7.7200000000000001\"\nassert solution(\"20 19 16 1\") == \"10.69000000000001\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0000000000\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 3 3') == '15.0'\nassert solution('2 1 0 0') == '8.0'\nassert solution('1 1 1 1') == '0.0'\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('1 1 1 1') == '0.00000000000000000000'\nassert solution('3 4 9 11') == '9.0000000000000001'\nassert solution('1 1 1 1') == '0.00000000000000000000'\nassert solution('3 4 9 0') == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\n\nimport functools\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"8\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5') == '8'\nassert solution('1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\nassert solution('1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\nassert solution('1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\nassert solution('1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 4 5 60 4') == 8\n\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"8\"\nassert solution(\"1 2 3 4 5\") == \"6\"\nassert solution(\"1 1 1\") == \"6\"\n\n------End-Of-File------\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"8\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2') == '6'\nassert solution('1 1 1') == '6'\nassert solution('1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\nassert solution(\"3 1\\n1 1 1\") == 6\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\n'''"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\n\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\n\n\"\"\"\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nn, m = list(map(int, INPUT_LINES[0].split()))\na = list(map(int, INPUT_LINES[1].split()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4\") == \"2\"\nassert solution(\"6 5\") == \"2\"\nassert solution(\"5 4\") == \"2\"\n\nassert solution(\"5 4\") == \"2\"\n\nassert solution(\"7 5\") == \"2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n2 3\\n3 4\\n1 3\\n1 3\") == \"7\\n1 4\"\nassert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2 4\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n1 4\\n\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\n\n\"\"\"\n\nimport sys\nimport functools\nfrom copy import deepcopy"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\nassert solution(\"1 1\\n1000000\") == '0\\n0'\nassert solution(\"2 1\\n1 1\") == '1\\n0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\\n\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4 2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\") == \"0\\n0\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc'''\n) == '''Yes\nYes\nYes\nYes\nNo\nNo\nNo\nNo\n'''\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcbcd\") == \"abc\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz!@#$%^&*()_+-=[]:;'\\\",.<>?/\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz1234567890\") == \"abcdefghijklmnopqrstuvwxyz1234567890\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n4 1'\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\nassert solution('''1 0\n1000000''') == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_1) == expected_1\nassert solution(input_2) == expected_2\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6 2 4 1'\n\nassert solution('''1 0\n1000000''') == '0 0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '7\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '7\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n1 3\") == '7\\n2\\n3 2'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n1 3\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('1 0\\n1 0') == '0\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 5 4 3\\n') == '4\\nLRRR'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\n-----"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\nassert solution(\"7\\n1 3 5 6 7 4 2\") == '7'\nassert solution(\"3\\n1 2 3\") == '3'\nassert solution(\"4\\n1 2 4 3\") == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n2 1 5 4 3\"\"\") == \"4\nLRRR\n\"\"\", solution(\"\"\"5\n2 1 5 4 3\"\"\") == \"4\nLRRR\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\n\"\"\"\n\nimport sys\nimport typing\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: typing.List[str]) -> int:\n        pass"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 3 5 6 7 4\") == \"7\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 4 3\") == \"4\"\nassert solution(\"1 2 4 3 5\") == \"5\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nres = []\nfor i in range(n):\n    res.append([a[i]])\n    for j in range(i+1, n):\n        if a[i] < a[j]:\n            res[i].append(a[j])\n            break\n    if len(res[i]) == 1:\n        res[i].append(max(a))\n        break\n\nwhile len(res) > 1:\n    res.sort(key=lambda x: len(x))\n    if len(res[0]) < len(res[1]):\n        res[0] = res[0] + res[1]\n        del res[1]\n    else:\n        break\n\nprint(len(res[0]))\nprint(''.join(res[0]))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nRLRL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\n\n---"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\\n\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\\n\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\\n\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRL\"\n\"\"\"\nfrom typing import List, Optional\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 5 3 4''') == '4'\nassert solution('''2\n1 2''') == '2'\nassert solution('''7\n6 5 4 3 2 4 3''') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == 3\nassert solution(\"1 2 2 3\") == 2\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == 1\nassert solution(\"2 1 1 1 1 1 1 1 1 1 1\") == 1\nassert solution(\"5 5 5 5 5 5 5 5 5 5 5\") == 0\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n1 2 5 3 4'\n) == '4'\nassert solution(\n    '2\\n1 2'\n) == '2'\nassert solution(\n    '7\\n6 5 4 3 2 4 3'\n) == '2'\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\nassert solution('8\\n1 5 7 6 4 3 4 5') == '4'\nassert solution('3\\n1 2 3') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n1 2 5 3 4\"\n) == \"4\"\nassert solution(\n    \"7\\n6 5 4 3 2 4 3\"\n) == \"2\"\n\n-----\n\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4 5\") == 1\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 5\\n1 2 3 3 3 3\") == \"0\"\n\nprint(solution(\"5 3\\n1 2 2 4 5\"))\nprint(solution(\"5 3\\n1 2 3 4 5\"))\nprint(solution(\"5 3\\n1 2 3 3 3\"))\nprint(solution(\"5 4\\n1 2 3 4 5\"))\nprint(solution(\"5 5\\n1 2 3 3 3 3\"))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\n\nassert solution('5 3\\n1 2 3 4 5') == '2'\n\nassert solution('5 3\\n1 2 2 2 2') == '0'\n\nassert solution('5 3\\n1 2 3 3 5') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\nnums = [int(x) for x in stdin.split()[1:]]\n\nnum_dict = dict()\n\nfor n in nums:\n    if n in num_dict:\n        num_dict[n] += 1\n    else:\n        num_dict[n] = 1\n\nres = 0\nfor i in range(n):\n    if num_dict.get(k - (i + 1) * 2, 0) > 0:\n        res += num_dict[k - (i + 1) * 2]\n\nprint(res)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5''') == '2'\n\nassert solution('''5 3\n1 2 3 3 3''') == '0'\n\nassert solution('''5 3\n2 2 2 2 2''') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\n\"\"\"\n\n\n\nn, k = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nn,a,b = input().split()\nb = int(b)\na = int(a)\nn = int(n)\nprint(str(n-b))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3 4') == '4'\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n-------"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(8 3 4) == 4\n\"\"\"\n\nN, A, B = [int(i) for i in stdin.split()]\n\nprint(sum([A for i in range(N)]) + sum([B for i in range(N)]))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('10 10 10') == '0'\nassert solution('7 10 10') == '5'\nassert solution('6 10 10') == '5'\nassert solution('1 10 10') == '1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\") == \"4\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('1\\n2') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n8\") == \"48\"\nassert solution(\"4\\n8\\n8\") == \"48\"\nassert solution(\"4\\n8\\n12\") == \"4\"\nassert solution(\"4\\n8\\n12\\n16\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"2\\n2\\n1\") == \"1\"\nassert solution(\"8\\n3\\n1\") == \"-1\"\nassert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"24\"\nassert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"24\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n8\\n2\\n1') == '48'\n\"\"\"\n\nimport sys\nimport os\n\nclass Logger(object):\n    def __init__(self, filename=\"default.log\"):\n        self.terminal = sys.stdout\n        self.log = open(filename, \"w\")\n\n    def write(self, message):\n        self.terminal.write(message)\n        self.log.write(message)\n\n    def flush(self):\n        pass\n\nsys.stdout = Logger(os.path.basename(__file__) + \".log\")"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n8\\n12\\n6\\n4\\n24\\n16\\n3') == '48'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().rstrip('\\n'))\nfor _ in range(t):\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    li = list(map(int, sys.stdin.readline().rstrip('\\n').split()))\n    min_num = li[0]\n    for i in li:\n        if i <= min_num:\n            min_num = i\n    for i in li:\n        if i!= min_num:\n            print(i)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"8\\n8 2 12 6 4 24 16 3\"\n) == '48'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n') == '3'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '3'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n8\\n1 1 3 4 7\\n2') == '5'\nassert solution('3\\n9\\n1 1 3 4 5 6 7 8 9\\n2') == '-1'\nassert solution('3\\n10\\n1 1 3 4 5 6 7 8 9 10\\n2') == '0'\nassert solution('3\\n11\\n1 1 3 4 5 6 7 8 9 10 11\\n2') == '-1'\n\nassert solution('4\\n3\\n1 1 3 4\\n2') == '4'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n-----Problem-----\nhttps://www.codewars.com/kata/5c857cd826c7866fec000c2b/train/python\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('1 1 2 3') == '2 3'\nassert solution('1 2 3 1 2 3') == '3 1 2'\nassert solution('1 2 2 3 3 3 3 3') == '2 3'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n5 5 1 6 1') == '3\\n5 6 1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 6 6 6 6\") == '1'\nassert solution(\"5 5 5 5 6\") == '2'\nassert solution(\"5 4 4 4 2\") == '1'\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\ni = 0\nfor j in range(n - 1):\n    if a[j]!= a[j + 1] or a[j] == a[j + 1]:\n        continue\n    else:\n        a.remove(a[j])\nprint(len(a))\nprint(\" \".join(list(map(str, a))))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\na = list(map(int, input().split()))\n\nunique = Counter(a)\n\nunique_list = [unique[i] for i in unique]\n\nunique_list.sort(reverse=True)\n\nresult = sum(unique_list[i] for i in range(len(unique_list)) if unique_list[i] > 1)\n\nprint(result)\n\nfor i in unique:\n    if unique[i] > 1:\n        print(i, end=\" \")"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"2\\n6\"\nassert solution(\"1\\n1 2 2 2 1\") == \"2\\n1\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\\n1\"\nassert solution(\"7\\n1 1 2 2 3 3 3\") == \"2\\n1 2 3\"\nassert solution(\"8\\n1 1 2 2 3 3 3 3\") == \"1\\n1 2 3\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\nassert solution(123) == 123\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nprint('All tests passed!')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('432') == '435'\n\nassert solution('99') == '103'\n\nassert solution('237') == '237'\n\nassert solution('42') == '44'\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(432)) == str(435)\nassert solution(str(99)) == str(103)\nassert solution(str(237)) == str(237)\nassert solution(str(42)) == str(44)\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\nimport itertools\nfrom typing import List"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"acbb\") == \"ab\"\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('a'*32) == 'a'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abcb\") == \"bc\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aac') == 'aac'\nassert solution('aab') == 'aab'\nassert solution('aba') == 'aba'\n\nassert solution('a') == 'a'\nassert solution('b') == 'b'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('abcde') == 'abcd'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"aba\"\nassert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\nassert solution('abac') == 'aac'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'b'\nprint(solution('2'))"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nfrom itertools import count, islice"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"1000000000000001\") == \"a\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"27\") == \"aa\"\nassert solution(\"703\") == \"aaa\"\nassert solution(\"18279\") == \"aaaa\"\n\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n\nfrom itertools import cycle"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"b\"\nassert solution(\"11\") == \"a\"\nassert solution(\"10\") == \"a\"\nassert solution(\"9\") == \"aa\"\nassert solution(\"8\") == \"ab\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\nto be or not to be\\n\") == 12\nassert solution(\"10\\na ab a a b ab a a b c\\n\") == 13\nassert solution(\"6\\naa bb aa aa bb bb\\n\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\n\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\n\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == '12'\nassert solution(\"a ab a a b ab a a b c\") == '13'\nassert solution(\"aa bb aa aa bb bb\") == '11'\n\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nto be or not to be\\n\") == \"12\"\nassert solution(\"10\\na ab a a b ab a a b c\\n\") == \"13\"\nassert solution(\"6\\naa bb aa aa bb bb\\n\") == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\nassert solution(\"aaaaa bbbbb c\") == \"A A A B B B\"\nassert solution(\"a aaaaa bbbbb c\") == \"A A A A B B B\"\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdsrc) == stdout"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\nassert solution(\"5 5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"8 2\\n1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Dict, Tuple, Deque\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    8 3\n    5 4 2 6 5 1 9 2\n    \"\"\"\n    ) == '20'\n\nassert solution(\n    \"\"\"\n    5 1\n    1 1 1 1 1\n    \"\"\"\n    ) == '1'\n\nassert solution(\n    \"\"\"\n    4 2\n    1 2000 2000 2\n    \"\"\"\n    ) == '4000'"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import deque, defaultdict\nfrom itertools import chain\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 3\n5 4 2 6 5 1 9 2\"\"\") == \"20\"\nassert solution(\"\"\"5 1\n1 1 1 1 1\"\"\") == \"1\"\nassert solution(\"\"\"4 2\n1 2000 2000 2\"\"\") == \"4000\"\nassert solution(\"\"\"5 1\n100 100 100 100\"\"\") == \"5\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -1 1 -1 1 1\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1\") == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().strip().split()))\n\ncurr_sum, pre_sum = 0, 0\nans = 0\n\nfor i in range(n):\n    curr_sum += nums[i]\n\n    if curr_sum == 0:\n        ans += 1\n\n    if pre_sum >= 0 and curr_sum < 0:\n        ans += 1\n        curr_sum = 0\n\n    pre_sum = curr_sum\n\nprint(ans)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\nclass TreeNode:\n    def __init__(self, val: int):\n        self.val = val\n        self.left = None\n        self.right = None\n\n    def __str__(self):\n        return str(self.val)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\n\n\"\"\"\n\nimport sys\n\n_, n = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\ncnt = 0\nB = []\nfor a in A:\n    if a < 0:\n        if len(B) > 0 and B[-1] < 0:\n            cnt += 1\n        B.append(a)\n    else:\n        if len(B) > 0 and B[-1] > 0:\n            cnt += 1\n        B.append(a)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -1 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"\nassert solution(\"8 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -1 1 -1 1 -1 1 1\") == \"6\"\nassert solution(\"9 -1 1 -1 1 -1 1 1\") == \"3\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 -5 3 2\n''') == '1'\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -1 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 -2 3 -9 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2 2') == '0'\nassert solution('1 100') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 100\") == \"0\"\nassert solution(\"100 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\nassert solution(\"1 1000000000 1 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 1\\n0 1\\n0 0\\n1 0\") == \"0\\n0\\n0\\n1\\n\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 100\\n2 2') == '2'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\") == \"10\"\nassert solution(\"6 6\") == \"0\"\nassert solution(\"7 6\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"1 1000000000\") == \"2000000000\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '2'\nassert solution('5 5') == '10'\nassert solution('2 1000000000') == '2000000000'\nassert solution('1 1000000000') == '1000000000'"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 2 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 3 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 4 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1, 100) == 0\nassert solution(2, 2) == 2\nassert solution(5, 5) == 10\nassert solution(2, 1000000000) == 1000000000\nassert solution(1000000000, 1000000000) == 2000000000"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 2\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 100\\n') == '2'\nassert solution('1 100\\n') == '0'\nassert solution('5 1000000000\\n') == '2000000000'\nassert solution('2 1000000000\\n') == '1000000000'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101\\n7') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('101') == '4'\nassert solution('9') == '-1'\nassert solution('101011010') == '6'\nassert solution
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"11\") == \"0\"\nassert solution(\"10\") == \"-1\"\n\"\"\"\n\nfrom typing import List\nimport math\nimport sys\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == '4'\nassert solution(\"1011\") == '4'\nassert solution(\"10111\") == '4'\nassert solution(\"101101\") == '-1'\n\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5') == '-1'\nassert solution('5\\n777') == '3'\nassert solution('5\\n7777777') == '6'\nassert solution('5\\n77777777777777777') == '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 1 2 3\") == \"4\"\nassert solution(\"5 5 1 2 3 4\") == \"1\"\nassert solution(\"15 8 1 2 3 4 5\") == \"48\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"10 4\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\nassert solution('5 5\\n1 2 3 4 5') == '1'\n\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'\n\n\"\"\"\nfrom collections import Counter\nimport math\nimport sys\n\nsys.stdin = open('input.txt')\n\nn, m = map(int, input().split())\n\npermutation = list(map(int, input().split()))\n\ncnt = Counter(permutation)\n\nprint(cnt)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n\"\"\"\nfrom typing import List, Dict\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == 4\nassert solution(\"5 5\\n1 2 3 4 5\") == 1\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == 48\n\n\n-----Explanation-----\n\nLet us assume that the sequence $p$ is sorted and in the following fashion:\n\n$p_1 < p_2 < \\dots < p_{n - 1} < p_n$\n\nSo the value of the median is $p_{n / 2}$.\n\nLet us mark the values of $p_{n / 2}$ (i.e. the median) with $m$.\n\n$$m = p_{n / 2} = p_{n - 1}$$\n\nAll other $p_l, p_{l + 1}, \\dots, p_r$ are the left and right part of $m$:\n\n\n$$m = p_{n / 2} = p_1, p_{n / 2 + 1} = p_2, \\dots, p_{n / 2 + 1} = p_{n - 1}$$\n\nSince $m$ is the value of the element which is in the middle of the sequence after sorting it in non-decreasing order,\n\n$$m = p_1, p_2, \\dots, p_{n - 1}$$\n\nbecause the sequence is sorted in non-decreasing order.\n\nThe number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of the median of $p_l, p_{l+1}, \\dots, p_r$ is exactly the given number $m$ is equal to $r - l + 1$.\n\nIt will be easy to count the number of pairs of indices $(l, r)$ such that the value of the median of $p_l, p_{l+1}, \\dots, p_r$ is exactly the given number $m$.\n\nThe number of pairs of indices $(l, r)$ such that the value of the median of $p_l, p_{l+1}, \\dots, p_r$ is exactly the given number $m$ can be found as follows:\n\n$$r - l + 1 = r - l$$\n$$r - l = m - p_l$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l = m - m = 0$$\n$$r - l ="
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\") == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 15\\n5 5 5 5 5\") == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5, 8) == 4\nassert solution(7, 10) == 2\nassert solution(5, 15) == -1\nassert solution(5, 26) == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 5\\n5 5 5 5 5\") == '1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 3 1 1 2\\n') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2\\n') == '2'\nassert solution('5 15\\n5 5 5 5 5\\n') == '1'\nassert solution('5 16\\n5 5 5 5 5\\n') == '-1'\nassert solution('5 26\\n5 5 5 5 5\\n') == '-1'\n\n---"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na.sort()"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 15\\n5 5 5 5 5\") == '2'\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 3 6 9 12\n''') == '1'\n\nassert solution('''\n3\n14 5 1\n''') == '-1'\n\nassert solution('''\n2\n500 500\n''') == '0'\n\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'\n\nassert solution('''\n5\n1 3 6 9 12\n''') == '1'"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"2 500 500\") == \"0\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"5 6\") == \"1\"\nassert solution(\"8 6 3 2 1\") == \"4\"\nassert solution(\"8 6 3 2 1\") == \"4\"\nassert solution(\"14 5 1\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"2 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21 14 10\") == '3'\nassert solution(\"500 500\") == '0'\nassert solution(\"1 3 6 9 12\") == '-1'\nassert solution(\"1 3 6 9 12\") == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"5 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(solution(str(input()))), 'Check input'\nprint('You are correct!')\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5 6\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7\") == \"7\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"8\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"9\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\n\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\\n\") == \"4\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"2 3 6 7 8 9\") == \"1\"\nassert solution(\"3 6 8 9 10 11\") == \"2\"\nassert solution(\"4 7 10 11 12\") == \"4\"\nassert solution(\"5 8 13 14 15 16\") == \"6\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\nprint(\"OK\")\n\nfrom datetime import datetime\na = datetime.now()\nprint(solution(input()))\nb = datetime.now()\nprint(b-a)"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n\") == 3\nassert solution(\"4 2\\n1 3 5 2\\n\") == 4\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == 4\nassert solution(\"6 4\\n1 2 3 4 5 6\\n\") == 5\n\nprint(solution(\"5 2\\n1 2 3 4 5\\n\"))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\nsorted_arr = sorted(arr)\n\ntot = 0\ni = 0\nj = n-1\nwhile i < j:\n    if abs(sorted_arr[i] - sorted_arr[j]) <= 5:\n        tot += 1\n        i += 1\n        j -= 1\n    else:\n        tot += 1\n        i += 1\n        j -= 1\n\nprint(tot + (k-tot)//5)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 10 1\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\"\n\nn, k, m = map(int, input().split())\na = list(map(int, input().split()))\n\nres = 0\nfor i in range(n - 1):\n    res += min(k - a[i], m)\n\nprint(res)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 10 3 6\\n\") == \"8\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10 2 5\\n1 2 3 4') == '3'\n\"\"\"\n\nn, k, m = input().split()\nl = list(map(int, input().split()))\nl = l[0: int(n)-1]\n\nl.sort()"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n6\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n'''"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n-----Explanation-----\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (2, 2, 3, 2, 2, 2).\n - Player 3 correctly answers a question. The players' scores are now (1, 1, 3, 1, 1, 1).\n - Player 1 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 3 correctly answers a question. The players' scores are now (0, -1, 2, -1, -1, -1).\n - Player 2 correctly answers a question. The players' scores are now (-1, -1, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (1, 1, 3, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (0, 0, 3, 0, 0, 0).\n - Player 1 correctly answers a question. The players' scores are now (0, -1, 2, -1, -1, -1).\n - Player 3 correctly answers a question. The players' scores are now (-1, -2, 2, -1, -1, -1).\n - Player 2 correctly answers a question. The players' scores are now (-2, -2, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (0, -2, 2, -2, -2, -2).\n - Player 3 correctly answers a question. The players' scores are now (-2, -3, 2, -2, -2, -2).\n - Player 1 correctly answers a question. The players' scores are now (-3, -3, 2, -2, -2, -2).\n - Player 3 correctly answers a question. The players' scores are now (-3, -4, 2, -2, -2, -2).\n - Player 2 correctly answers a question. The players' scores are now (-4, -4, 1, -2, -2, -2).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (-4, -4, 2, -4, -4, -4).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, -3, -3, -3).\n - Player 1 correctly answers a question. The players' scores are now (-4, -4, 2, -3, -3, -3).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, -2, -2, -2).\n - Player 2 correctly answers a question. The players' scores are now (-4, -4, 1, -2, -2, -2).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (-4, -4, 2, -3, -3, -3).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, -2, -2, -2).\n - Player 1 correctly answers a question. The players' scores are now (-4, -4, 2, -1, -1, -1).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, -1, -1, -1).\n - Player 2 correctly answers a question. The players' scores are now (-4, -4, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (-4, -4, 2, -2, -2, -2).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, -1, -1, -1).\n - Player 1 correctly answers a question. The players' scores are now (-4, -4, 2, -1, -1, -1).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (-4, -4, 1, 0, 0, 0).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\nIn the beginning, the players' scores are (-4, -4, 2, 0, 0, 0).\n - Player 3 correctly answers a question. The players' scores are now (-4, -4, 2, 0, 0, 0).\n - Player 1 correctly answers a question. The players' scores are now (-4, -4, 2, 0, 0, 0).\n - Player 3 correctly answers a question. The players' scores are now (-4,"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n----Possible Improvements----\n - Use the platform module to get the system\u2019s name (may not be possible)\n - Get an input from the keyboard instead of using a test string\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 4\") == \"No\"\nassert solution(\"6 3 4\") == \"No\"\nassert solution(\"6 3 4\\n3\") == \"No\"\nassert solution(\"6 3 4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\") == \"No\"\nassert solution(\"6 3 4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\") == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo\\n'\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"3 6 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nn, k, q = map(int, input().split())\nscores = [k] * n\nfor _ in range(q):\n    a = int(input())\n    if a in scores:\n        scores.remove(a)\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n010'\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\\n010\\n101\"\n\"\"\"\n\n\nclass Matrix:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n\n    def read_matrix(self):\n        matrix = []\n        for _ in range(self.n):\n            matrix.append(list(map(int, input().split())))\n        return matrix\n\n    def swap_rows(self, row1, row2):\n        self.matrix[row1], self.matrix[row2] = self.matrix[row2], self.matrix[row1]\n\n    def swap_columns(self, col1, col2):\n        for i in range(self.n):\n            self.matrix[i][col1], self.matrix[i][col2] = self.matrix[i][col2], self.matrix[i][col1]\n\n    def sort_matrix(self):\n        def sort_rows(matrix):\n            sorted_matrix = sorted(matrix, key=lambda row: row[0])\n            return sorted_matrix\n\n        def sort_columns(matrix):\n            sorted_matrix = sorted(matrix, key=lambda col: col[0])\n            return sorted_matrix\n\n        rows = sort_rows(self.matrix)\n        columns = sort_columns(self.matrix)\n        return rows, columns\n\n\nmatrix = Matrix(int(input()), int(input()))\nmatrix.matrix = matrix.read_matrix()\nmatrix.rows, matrix.columns = matrix.sort_matrix()\nfor row in matrix.rows:\n    print(*row)\nprint(matrix.columns)\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n010\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 2\\n1 1\\n0 1'\n) == 'YES\\n00\\n10'\nassert solution(\n    '3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1'\n) == 'YES\\n010\\n0000'\nassert solution(\n    '3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1'\n) == 'NO'\n\"\"\"\n\nimport sys\n\n\nclass Matrix:\n    def __init__(self, row_num, col_num):\n        self.row_num = row_num\n        self.col_num = col_num\n        self.matrix = self.create_matrix()\n\n    def create_matrix(self):\n        matrix = []\n        for row_index in range(self.row_num):\n            row = list(map(int, input().split()))\n            matrix.append(row)\n        return matrix\n\n    def invert_row(self, row_index):\n        matrix = self.matrix\n        row = matrix[row_index]\n        row_size = len(row)\n        for col_index in range(row_size):\n            row[col_index] = 1 - row[col_index]\n        return matrix\n\n    def invert_col(self, col_index):\n        matrix = self.matrix\n        col = [row[col_index] for row in matrix]\n        for row_index in range(self.row_num):\n            matrix[row_index][col_index] = 1 - col[row_index]\n        return matrix\n\n    def print_matrix(self):\n        matrix = self.matrix\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n\n    def is_sorted(self):\n        return False\n\n    def solve(self):\n        if self.is_sorted():\n            return \"YES\"\n\n        for row_index in range(self.row_num):\n            for col_index in range(self.col_num):\n                matrix = self.matrix\n                if row_index == 0:\n                    if matrix[row_index][col_index] == 1:\n                        matrix = self.invert_row(row_index)\n                else:\n                    if matrix[row_index][col_index] == 1:\n                        matrix = self.invert_col(col_index)\n                self.print_matrix()\n                if self.is_sorted():\n                    return \"YES\\n{}\\n{}\".format(\n                        \"\".join(map(str, [1 if row[col_index] == 1 else 0 for row in matrix])),\n                        \"\".join(map(str, [1 if col[row_index] == 1 else 0 for col in zip(*matrix)]))\n                    )\n\n        return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\n'''"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\\n00\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\nassert solution(\"5 4\\n0 0 0 1 1\\n0 1 1 1 0\\n0 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\") == \"NO\"\nassert solution(\"5 5\\n0 1 1 1 1 1\\n0 1 1 1 1 1\\n0 1 1 1 1 1\\n1 1 1 1 1 1\\n0 1 1 1 1 1\") == \"YES\\n10111\\n11111\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 1\") == \"NO\"\n\"\"\"\n\n\"\"\"\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438, \u0447\u0442\u043e \u0432\u0441\u0435 \u0442\u0440\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0432\u043d\u044b.\n\n-----Input-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0430\u043c \u0441\u0442\u043e\u0440\u043e\u043d \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0430\u043c \u0441\u0442\u043e\u0440\u043e\u043d \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0412 \u043e\u0431\u043e\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 1000.\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"YES\", \u0435\u0441\u043b\u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \"NO\" \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\"\"\"\n\n\"\"\"\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438.\n\n-----Input-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0430\u043c \u0441\u0442\u043e\u0440\u043e\u043d \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0430\u043c \u0441\u0442\u043e\u0440\u043e\u043d \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0412 \u043e\u0431\u043e\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 1000.\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"YES\", \u0435\u0441\u043b\u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \"NO\" \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\nassert solution(\"1 1\\n1\") == \"YES\\n1\"\n\n\"\"\"\nfrom typing import List, Set, Dict"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0\\n1 1 1\\n1 1 0\") == 'YES\\n010\\n0000'\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 1\n0 1''') == 'YES\n010\n0000'\n\nassert solution('''3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1''') == 'YES\n010\n0000'\n\nassert solution('''3 3\n0 0 0\n1 0 1\n1 1 0''') == 'NO\n\nassert solution('''3 3\n0 0 0\n1 0 1\n1 1 0''') == 'YES\n010\n010\n\nassert solution('''3 3\n0 0 0\n1 0 1\n1 1 0''') == 'YES\n110\n010"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('37') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1253') == 'Yes'\nassert solution('1') == 'No'\nassert solution('543') == 'No'\nassert solution('12') == 'Yes'\n\nprint(solution('1253'))\nprint(solution('1'))\nprint(solution('543'))\nprint(solution('12'))"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\nassert solution('908090') == 'Yes'\nassert solution('987654') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 'Yes'\nassert solution('437') == 'Yes'\nassert solution('331') == 'Yes'\nassert solution('11') == 'No'\nassert solution('101') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == 'Yes'\nassert solution('823') == 'No'\nassert solution('436') == 'Yes'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\nassert solution('853') == 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\" or \"No\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4321\") == \"Yes\"\nassert solution(\"54321\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"1\") == \"No\"\nprint(\"Passed\")"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1\\n0 1 0 1\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\n\"\"\"\n\nimport sys\n\nn, b, a = [int(i) for i in sys.stdin.readline().split()]\nlines = sys.stdin.readlines()"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nb = b*2\na = a*2\n\nans = 0\ns = [0] + s + [0]\n\nfor i in range(1, n+1):\n    if s[i] == 0:\n        if s[i-1] == 0:\n            if s[i+1] == 0:\n                if b >= a:\n                    ans += 1\n                    b -= 1\n                else:\n                    ans += 1\n                    a -= 1\n            else:\n                ans += 1\n                b -= 1\n        else:\n            ans += 1\n            a -= 1\n\nprint(ans)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\n\"\"\"\n\nn, b, a = map(int, stdin.split())\ns = list(map(int, stdin.split()))"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nn, b, a = map(int, stdin.readline().split())\n\ns = list(map(int, stdin.readline().split()))\n\nans = 0\nbattery = b\naccumulator = a\nfor i in range(n):\n    if s[i] == 1:\n        if battery < 0 or accumulator < 0:\n            break\n        else:\n            ans += 1\n            battery -= 1\n            accumulator -= 1\n    else:\n        if accumulator < 0:\n            break\n        else:\n            ans += 1\n            accumulator -= 1\nprint(ans)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"6 1 1\\n1 0 0 1 0 1\") == \"1\"\nassert solution(\"6 1 1\\n0 1 0 1 0 1\") == \"1\"\n\nimport sys;"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\n\"\"\"\n\na = input().split('-')\nprint(int(a[0]) - int(a[1]))\n\n\"\"\"\n\n\"\"\"\n\nimport os"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8-7+6-5+4-3+2-1-0''') == '4'\nassert solution('''2+2''') == '-46'\nassert solution('''112-37''') == '375'\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-\"\nassert solution(\"112-37\") == \"375\"\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\"))\nprint(solution(\"2+2\"))\nprint(solution(\"112-37\"))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES'\nassert solution('13 4\\n') == 'NO'\n\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4 3\\n'), 'YES')\n        self.assertEqual(solution('10 4\\n'), 'YES')\n        self."
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('9 5') == 'YES'\nassert solution('10 5') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution) == solution(solution)\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\"\nassert solution(\"10 4\\n\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\"\nassert solution(\"13 4\\n\") == \"NO\\n\"\nassert solution(\"0 1\\n\") == \"YES\\n1 1\"\nassert solution(\"0 1\\n\") == \"YES\\n1 1\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"10 4\\n\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\"\nassert solution(\"13 4\\n\") == \"NO\\n\"\n\n---\nimport collections"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"10 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\") == \"YES\\n2 1\\n1 3\"\nassert solution(\"13 4\\n3 1\\n1 4\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\nassert solution('13 4\\n') == 'NO\\n'\nassert solution('8 5\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 4\\n4 2\\n3 4\\n2 3\\n4 1\\n1 4\\n3 1\\n'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nm = [0] * k\nw = [0] * k\nfor i in range(n):\n    m[int(input())-1] += 1\n    w[int(input())-1] += 1\n\nm.sort()\nw.sort()\nm_1 = m[0]\nm_k = m[-1]\nw_1 = w[0]\nw_k = w[-1]"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES'\nassert solution('13 4\\n') == 'NO'\nassert solution('123 4\\n456 5\\n789 6') == 'YES'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\n'''\nimport sys\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1') == '-1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10\n''') == '-1'\nassert solution('''4 1 1\n1 100 1 1\n''') == '100'\n\"\"\"\n\nn, k, x = [int(i) for i in input().split(' ')]\narr = [int(i) for i in input().split(' ')]\n\narr.sort()\ncount_max = 0\ncount = 0\n\ni = 0\nwhile i < n - 1:\n    count = 0\n    while arr[i] <= arr[i + 1] - k and count < x:\n        count += 1\n        i += 1\n        if i == n - 1:\n            break\n    count_max = max(count_max, count)\n    i += 1\n\nprint(count_max) if count_max >= x else print(-1)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\") == \"100\"\n\n\"\"\"\nimport sys\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == 18\nassert solution('6 1 5\\n10 30 30 70 10 10') == -1\nassert solution('4 3 1\\n1 100 1 1') == 100\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == 100\nassert solution(\"5 2 3\\n5 1 3 10 1\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\nprint(\"Passed all tests.\")\n\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 3 10 1\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11100\") == \"1\"\nassert solution(\"01110\") == \"5\"\nassert solution(\"001110\") == \"3\"\nassert solution(\"10111010\") == \"4\"\nassert solution(\"10110111010\") == \"8\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"5\"\nassert solution(\"111111111111\") == \"24\"\nassert solution(\"11101111111111\") == \"31\"\nassert solution(\"111011110111111\") == \"39\"\nassert solution(\"1110111101111111\") == \"41\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00100') == 3\nassert solution('0101010') == 10\nassert solution('0101101010110111') == 21\nassert solution('1101011010101101101101010') == 46\nassert solution('110101101010110110110101010') == 65"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01100\") == 4\nassert solution(\"10010\") == 5\nassert solution(\"11110\") == 5\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('110011') == '8'\nassert solution('101010') == '10'\nassert solution('111111') == '15'\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '1'\nassert solution('1') == '1'\nassert solution('1110') == '5'\nassert solution('101010') == '5'\nassert solution
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"0 1 0 1 1\\n\"\n) == \"5\"\n\nassert solution(\n    \"6 1\\n\"\n    \"0 0 0 0 1 1\"\n) == \"21\"\n\nassert solution(\n    \"4 1\\n\"\n    \"0 0 0 1\\n\"\n) == \"4\"\n\nassert solution(\n    \"12 6\\n\"\n    \"0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n) == \"15\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11110') == '15'\nassert solution('1110') == '10'\nassert solution('1111') == '8'\nassert solution('11') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11010') == '1'\nassert solution('11001') == '2'\nassert solution('11101') == '2'\nassert solution('11010') == '2'\nassert solution('11101') == '2'"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '00100'\n) == 3\n\nassert solution(\n    '10000'\n) == 1\n\nassert solution(\n    '01110'\n) == 4\n\nassert solution(\n    '11010'\n) == 5\n\nassert solution(\n    '11100'\n) == 6\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"zzzzzzzzz\") == \"Yes\"\nassert solution(\"zzzzzzzzzz\") == \"No\"\nassert solution(\"zzzzzzzzzzz\") == \"Yes\"\n\nSolution\n________________________________________________\n\nS, T = input().split()"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"\n\nS = input()\nT = input()"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"azzel\"\n) == \"Yes\"\nassert solution(\n\"apple\"\n) == \"Yes\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"\n\nimport sys\nimport pdb\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"azzel\", \"apple\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"cat\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"baa\") == \"No\"\nassert solution(\"bzz\") == \"No\"\nassert solution(\"abcaaa\") == \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 3 2 1 1 5\") == \"8\"\nassert solution(\"5 2 3 1 1 1 5\") == \"9\"\nassert solution(\"4 2 4 1 2 2 4\") == \"10\"\nassert solution(\"7 3 1 1 1 3 1 1 1 1 1\") == \"7\"\nassert solution(\"7 3 1 1 1 3 1 1 1 1 1\") == \"10\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 2 1 0 2 1 0 2 1 2 1 2 0 0 2 0 0 1 0 2 0 2 0 1 2 1 0 1 2 0 2 1 0 1 2 1 2 2 1 2 0 0 1 0 2 1 0 0 1 0 2 0 2 0 2 1 0 1 0 1 2 0 2 1 1 1 2 0 1 1 2 0 1 2 1 0 1 0 0 0 1 0 2 1 2 0 1 2 0 0 2 0 0 0 0 0 1 2 2 0 0 1 1 1 1 0 0 1 2 0 2 0 0 0 0 0 2 1 2 2 0 2 1 1 2 1 0 1 1 0 2 1 1 1 0 2 0 2 0 0 0 0 0 0 0 0 0 2 1 1 0 0 0 0 2 0 0 0 2 1 0 2 1 1 1 0 1 2 2 1 0 1 2 0 1 0 0 0 0 0 2 1 0 1 2 1 2 2 0 0 1 2 0 2 1 0 1 2 0 2 1 1 1 0 0 0 1 1 0 1 0 2 1 2 2 0 0 0 0 1 2 2 0 0 0 1 1 1 1 0 0 0 2 1 2 2 0 0 2 0 2 0 0 0 0 0 0 2 0 2 1 1 1 2 0 0 1 2 1 0 1 1 0 2 0 0 0 0 0 0 0 2 0 0 1 1 0 1 0 1 0 1 1 0 2 2 1 0 2 2 0 1 0 0 0 2 1 2 2 0 1 0 1 2 0 1 0 2 2 1 0 0 1 1 2 1 0 1 1 0 2 0 2 1 0 1 0 2 0 0 0 0 0 2 1 1 0 2 0 1 0 1 0 1 0 1 0 2 0 0 1 0 1 0 2 2 0 1 0 0 0 1 2 1 0 0 1 1 0 1 0 1 0 2 0 0 0 1 1 1 2 0 1 1 2 0 1 0 0 1 0 0 0 0 0 1 1 0 1 1 2 2 1 0 0 0 0 0 0 0 0 1 2 2 1 1 1 0 1 2 0 1 2 0 2 1 0 0 2 1 0 1 0 1 1 1 0 2 1 0 0 1 2 2 0 0 1 1 1 1 0 1 1 1 1 0 0 0 0 2 1 2 2 0 2 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 1 2 1 2 1 1 2 1 0 1 0 2 0 0 0 0 2 2 2 0 0 1 2 0 1 0 0 2 0 0 2 2 0 0 0 1 0 2 2 1 2 1 2 2 1 1 1 2 0 1 1 1 2 1 0 1 1 1 1 0 1 2 1 0 1 1 0 1 0 0 1 0 2 0 2 1 0 2 2 1 0 1 1 1 0 1 1 1 0 0 0 0 1 0 2 1 0 2 2 1 0 0 0 2 0 2 0 0 0 0 1 2 1 1 1 0 0 0 1 1 0 2 1 1 1 0 2 1 1 0 1 1 0 1 2 0 1 0 1 1 1 2 2 0 1 1 0 1 1 0 0 1 2 0 2 0 0 1 0 1 1 2 1 1 1 0 0 1 1 1 1 2 1 1 1 1 1 1 0 1 1 0 1 1 1 2 1 0 0 1 1 1 0 0 0 1 0 0 1 0 1 2 1 0 0 2 0 1 0 2 0 0 2 0 2 1 1 0 0 1 0 0 0 0 1 0 0 2 2 1 1 1 2 1 0 0 1 2 0 2 2 0 2 0 0 0 1 0 0 0 2 0 2 1 1 1 1 2 0 2 1 0 1 1 2 1 1 1 1 0 1 0 1 0 1 0 2 2 1 1 0 2 2 0 1 1 1 2 0 0 0 1 1 1 0 2 2 1 0 1 1 1 1 0 1 1 0 1 1 0 2 2 0 0 1 1 0 2 2 0 0 1 1 1 1 0 1 2 1 2 1 0 1 1 2 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 0 1 0 2 2 0 2 1 0 0 1 0 0 2 1 0 0 2 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 2 1 1 1 0 1 1 0 0 1 2 1 0 0 1 0 2 2 0 2 1 0 1 1 0 1 1 2 0 0 1 0 0 1 1 0 2 1 1 1 2 2 1 0 0 1 1 0 0 1 2 1 1 1 1 2 1 1 1 1 2 1 1 0 2 0 1 1 1 0 1 0 1 1 1 0 2 0 1 1 0 0 0 2 1 0 1 1 0 1 1 1 0 1 0 2 0 2 1 1 1 1 1 1 0 1 0 2 0 1 2 1 1 2 1 1 1 1 2 1 1 0 2 0 2 0 1 1 2 1 1 1 1 1 1 0 2 1 1 1 1 1 1 1 2 0 2 0 1 1 0 1 1 1 1 2 1 1 2 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 0 0 1 2 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 2 1 1 1 1 1 0 0 1 0 2 0 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 0 2 0 1 2 1 1 0 0 0 1 0 0 1 0 1 0 1 0 1 0 0 1 0 2 0 2 0 0 1 0 0 1 1 0 0 1 1 1 1 1 0 0 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 0 0 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 2 1 0 2 1 1 1 0 2 2 0 1 1 1 1 1 1 1 1 1 0 2 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2 3\\n1 2 2\\n2 3 2\\n3 4 3\\n4 4 3\"\n) == \"4 3\"\nassert solution(\n    \"4 2 3\\n1 2 2\\n2 3 2\\n3 4 3\\n4 4 2\"\n) == \"4 2\"\nassert solution(\n    \"3 2 1\\n1 2 2\\n2 3 2\"\n) == \"3 2\"\nassert solution(\n    \"3 2 1\\n1 2 1\\n2 3 2\"\n) == \"3 2\"\nassert solution(\n    \"3 2 1\\n1 2 2\\n2 3 1\"\n) == \"3 2\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 9 3 6 5 10\") == \"true\"\nassert solution(\"6 5 9\") == \"true\"\nassert solution(\"6 5 10\") == \"true\"\nassert solution(\"6 10 10\") == \"false\"\nassert solution(\"5 9 5 10\") == \"true\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3 3 2 2 5\n3 2 7 7 1\n5 5 3 1 1\n2 2 5 5 3\n3 4 6 8 2\n''') == '8'\n\nassert solution('''3\n1 1 2 1\n2 2 1 1\n1 2 1 1\n''') == '0'\n\nassert solution('''5\n3 3 2 2 5\n3 2 7 7 1\n5 5 3 1 1\n2 2 5 5 3\n3 4 6 8 2\n''') == '12'\n\nassert solution('''2\n2 2 2\n1 1 1\n''') == '0'\n\nassert solution('''4\n3 1 1 1\n2 2 1 1\n1 1 1 1\n''') == '6'"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 1 2 1 3 2 1 1 3 1\") == \"4\"\nassert solution(\"3 10 2 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1\") == \"12\"\nassert solution(\"1 100 2 1 2 1 1 2 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"14\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1 3 3 2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 5') == '6'\nassert solution('2 3 4 5 6 7') == '10'\nassert solution('1 2 3 5 7 9 11') == '13'\nassert solution('3 2 1') == '-1'\nassert solution('1 1 1') == '1'\n\n\"\"\"\n\nimport sys\n\nm, *nums = map(int, sys.stdin.read().split())\n\nres = -1\n\nfor i in range(m):\n    for j in range(i+1, m):\n        if sum(nums[i:j+1]) >= m - j - 1:\n            res = max(res, nums[i] + nums[j] + nums[i+1] + nums[j+1])\n\nprint(res)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 3 4\") == \"14\", \"Test 1: Failed\"\nassert solution(\"4 2 1 1\") == \"0\", \"Test 2: Failed\"\nassert solution(\"7 3 1 5 3 6 2 1\") == \"9\", \"Test 3: Failed\"\nassert solution(\"1 1 1\") == \"0\", \"Test 4: Failed\"\n\nprint(\"Test finished.\")\n\"\"\"\n\n\"\"\"\nGiven the string A representing an integer N, return the string representing N + 1.\n\nA will be a single digit string (0 <= N <= 9).\n\nExample 1:\n\nInput:\n    A = \"1\"\nOutput:\n    \"2\"\nExample 2:\n\nInput:\n    A = \"9\"\nOutput:\n    \"10\"\nExample 3:\n\nInput:\n    A = \"12\"\nOutput:\n    \"13\"\nExample 4:\n\nInput:\n    A = \"101\"\nOutput:\n    \"102\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"2 700\"\n) == 3\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys\n\nclass AtCode:\n    def __init__(self, test_cases):\n        self.test_cases = test_cases\n        self.in_file, self.out_file = sys.stdin, sys.stdout\n\n    def read(self):\n        return self.in_file.readline()\n\n    def write(self, string):\n        return self.out_file.write(string)\n\n    def solve(self):\n        self.D, self.G = map(int, self.read().split())\n\n        self.p_c = []\n        for i in range(self.D):\n            self.p_c.append(list(map(int, self.read().split())))\n\n        self.total_points = 0\n        for i, c in enumerate(self.p_c):\n            self.total_points += (c[0] + c[1]) * (100 ** i)\n\n        self.p = []\n        for i, c in enumerate(self.p_c):\n            for j in range(c[0]):\n                self.p.append(c[0] * 100 ** i + j)\n\n        self.c = []\n        for i in range(self.D):\n            self.c.append(self.p_c[i][2])\n\n        self.ans = 0\n        for i in self.p:\n            if i >= self.G:\n                self.ans += 1\n        return self.ans\n\n    def main(self):\n        for t in self.test_cases:\n            self.in_file = open(t[0])\n            self.out_file = open(t[1], 'w')\n            result = self.solve()\n            self.write(str(result) + '\\n')"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\":\\n2 700\\n3 500\\n5 800\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\nIf you've passed the first test, change the solution function to return the minimum number of problems that needs to be solved in order to have a total score of G or more points.\n\"\"\"\nimport unittest\nfrom functools import reduce\nimport operator\nfrom itertools import combinations"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 300\\n3 500\\n5 800') == '3'\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == 2\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('7\\n5 5 4 5 5 6') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 5 4 5 5 6') == '2'\nassert solution('7 4 8 7 8 4 4 5') == '2'\nassert solution('8 4 8 7 8 4 4 5') == '2'\nassert solution('9 2 3 4 2 2 3 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 8 7 8 4 4 5\\n2 3 4 2 2 3 2 2 4\") == \"2\"\nassert solution(\"5 5 4 5 5 5 6\\n2 3 4 2 2 3 2 2 4\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 4 5 5 5 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 4 5 5 5 6\") == \"2\"\n\nassert solution(\"8 4 8 7 8 4 4 5\") == \"2\"\n\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == \"3\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n7\n5 5 4 5 5 5 6\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n8\n4 8 8 7 8 4 4 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n9\n2 3 4 2 2 3 2 2 4\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n3\n1 2 3\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n4\n2 2 2 2\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == 18\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 1 3') == '18'\nassert solution('6 1 5') == '-1'\nassert solution('7 2 2') == '-1'\nassert solution('6 1 3') == '9'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n10 100 1 1''') == '100'\n\nimport math"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == 100\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\\n10 1 3 10 1\") == '18'\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 1 5\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\n\nassert solution(\"4 3 1\\n1 100 1 1\") == 100\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"-1\"\nassert solution(\"4 1 5\") == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 5\\n1 100 1 1') == '100'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n11') == 'Yes'\nassert solution('1\\n21') == 'No'\nassert solution('3\\n15') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == 'Yes'\n\nassert solution('100') == 'No'\nassert solution('2') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n7\") == \"Yes\"\n\n------\nInput: 5\nOutput: Yes\n\nInput: 7\nOutput: No\n\n-----\nInput: 2\nOutput: No\n\n1 + 1 = 2\n\n\n-----\nInput: 1\nOutput: No\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"13\") == \"No\"\nassert solution(\"98\") == \"Yes\"\nassert solution(\"99\") == \"No\"\n\nSample Input\n11\n8\n1\n1\nSample Output\nYes\nYes\nNo\nNo\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 'Yes'\nassert solution('12') == 'Yes'\nassert solution('13') == 'No'\nassert solution('100') == 'No'\nassert solution('101') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"15\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\n') == 'Yes'\n\n---\n\nThe following functions are used for testing purposes:"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 'Yes'\nassert solution('10') == 'No'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"15\") == \"Yes\"\nassert solution(\"12\") == \"No\"\nassert solution(\"18\") == \"Yes\"\nassert solution(\"30\") == \"No\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys\n\nfrom typing import List"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nN = int(input())\npts = []\nfor i in range(N):\n    pts.append(input().split())\n\npts = sorted(pts, key=lambda x: x[1])\n\nmx = pts[-1][1]\nmt = pts[0][1]\n\nfor i in range(len(pts)-1):\n    if mx < pts[i+1][1]:\n        mx = pts[i+1][1]\n    if mt > pts[i][1]:\n        mt = pts[i][1]\n\nmx = mx+1\nmt = mt-1\n\npts = sorted(pts, key=lambda x: x[0])\n\nfor i in range(len(pts)-1):\n    if mx < pts[i+1][0]:\n        mx = pts[i+1][0]\n    if mt > pts[i][0]:\n        mt = pts[i][0]\n\nmx = mx+1\nmt = mt-1\n\npts = sorted(pts, key=lambda x: x[0]*10000 + x[1])\n\nfor i in range(len(pts)-1):\n    if mx < pts[i+1][0]*10000 + pts[i+1][1]:\n        mx = pts[i+1][0]*10000 + pts[i+1][1]\n    if mt > pts[i][0]*10000 + pts[i][1]:\n        mt = pts[i][0]*10000 + pts[i][1]\n\nmx = mx+1\nmt = mt-1\n\nprint(mt, mx, sep=\" \")\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\nassert solution('4\\n1 1 5\\n2 1 5\\n1 2 5\\n3 2 5') == '1 1 6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 1 1 1\n2 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '1 2 5\\n'\n\nassert solution('''\n4\n1 1 1 1\n2 1 1 1\n1 2 1 1\n3 1 1 1\n''') == '1 1 1\\n2 1 1\\n1 2 1\\n3 1 1\\n'\n\nassert solution('''\n6\n1 2 5\n1 1 1\n3 1 1\n1 1 1\n1 2 1\n3 2 1\n''') == '1 2 5\\n1 1 1\\n3 1 1\\n1 1 1\\n1 2 1\\n3 2 1\\n'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\nimport re\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"abcd\") == \"abcd\"\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('redcoder') == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('redcoder') == '1'\nprint(solution('redcoder'))"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('tacocat') == 1\nassert solution('redcoder') == 1\nassert solution('abcdefghijklmnopqrstuvwxyz') == 26\nassert solution('abcdcba') == 2\nassert solution('aababa') == 4\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"code\") == \"oodc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abc\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaa') == 3\nassert solution('abaa') == 3\nassert solution('aaaa') == 1\nassert solution('aba') == 3\nassert solution('baba') == 3\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"20\") == \"No\"\nassert solution(\"17\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == 'Yes'\nassert solution(\"1\") == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == 'Yes'\nassert solution('100') == 'No'\n\"\"\"\n\nn = int(input())\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i * j == n:\n            print('Yes')\n            break\n    else:\n        continue\n    break\nelse:\n    print('No')\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"20\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"12\") == \"Yes\"\nassert solution(\"13\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n10\\n') == 'Yes'\nassert solution('7\\n6\\n7\\n8\\n9\\n') == 'No'\nassert solution('2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\\n') == 'Yes'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == 'Yes'\nassert solution('2\\n100\\n') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"10\"\n) == \"Yes\"\nassert solution(\n    \"100\"\n) == \"Yes\"\nassert solution(\n    \"12\"\n) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"100\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"13\") == \"No\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\n\u8fd9\u9053\u9898\u6ca1\u6709\u8bf4\u660e\u9519\u8bef\u7684\u5730\u65b9\uff0c\u53ea\u8981\u4f60\u80fd\u627e\u5230\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u5c31\u884c\u4e86\u3002\n\n\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u7684\uff0c\u627e\u51fa\u4e00\u4e2a\u5c0f\u6846\u67b6\uff0c\u4e0b\u65b9\u548c\u5de6\u65b9\u662f\u8fd9\u4e2a\u5c0f\u6846\u67b6\u91cc\u9762\u6709\u54ea\u4e9b\u53ef\u80fd\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u5c0f\u6846\u67b6\u90fd\u53ef\u4ee5\u88ab\u5207\u6210\u4e09\u6bb5\uff0c\u627e\u51fa\u6bcf\u4e2a\u6846\u67b6\u4e2d\u4e09\u6bb5\u91cc\u9762\u7684\u6240\u6709\u53ef\u80fd\u3002\n\n\u53c8\u56e0\u4e3a\u6bcf\u4e2a\u5c0f\u6846\u67b6\u53ef\u80fd\u6709\u4e09\u6bb5\uff0c\u6240\u4ee5\u4e09\u6bb5\u4e5f\u53ef\u80fd\u6709\u5176\u4ed6\u7684\u6846\u67b6\u3002\n\n\u6240\u4ee5\u7b2c\u4e09\u6b21\uff0c\u7ed3\u679c\u5c31\u7b49\u4e8e\u4e0b\u65b9\u7b2c\u4e00\u6b21\u548c\u5de6\u8fb9\u7b2c\u4e00\u6b21\u7ed3\u679c\u7684\u4e58\u79ef\u3002\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\n-------\n\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 4 9 7 5\\n') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n4 4 9 7 5''') == '5'\n\nsolution(stdin)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == 5\n\"\"\"\n\nfrom typing import List, Tuple\n\nclass Input:\n    def __init__(self, num_of_sticks: int, list_of_lengths: List[int]):\n        self.num_of_sticks = num_of_sticks\n        self.list_of_lengths = list_of_lengths"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n4 4 9 7 5\"\n) == \"5\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 9 7 5') == 5\n\"\"\"\n\nimport sys\nimport queue\n\nclass Node(object):\n    def __init__(self, data, children):\n        self.data = data\n        self.children = children"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 9 7 5\\n') == 5\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nlengths = list(map(int, sys.stdin.readline().split()))\n\nmax_length = max(lengths)\ncnt = [0] * (max_length + 1)\n\nfor length in lengths:\n    cnt[length] += 1\n\nlengths = list(set(lengths))\nfor length in lengths:\n    for i in range(length, max_length + 1):\n        cnt[i] += cnt[i - length]\n\nprint(cnt[-1] // 2)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n\") == \"10\"\nassert solution(\"2 1\\n\") == \"-1\"\nassert solution(\"1 1\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5') == '10'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 5''') == '10'\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 5''') == \"10\"\nassert solution('''1 4''') == \"1\"\nassert solution('''3 5''') == \"-1\"\n\"\"\"\n\nA, B = map(int, input().split())\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"10 2\") == \"20\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"1 7\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\n\ntry:\n    A, B = map(int, stdin.readline().split())\n    if A * B > 9:\n        print(A * B)\n    else:\n        print(-1)\nexcept Exception as _:\n    exit()\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(\"{} \\times {} = {}\".format(a, b, a * b))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\nassert solution('1 1') == '-1'\nassert solution('1 2') == '-1'\nassert solution('2 1') == '2'\nassert solution('2 10') == '20'\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n10 12 1 2 14\\n\") == 5\n\"\"\"\n\n\nfrom collections import deque\n\nimport sys\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 12 1 2 14') == '5'\n\n-------------------"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n4 3\\n3 5\\n2 5\\n5 7\\n7 5\\n8 5\\n2 3\\n5 8\\n7 2\\n1 7\\n7 1\\n1 2\\n8 7\\n2 1\\n3 5\\n4 8\\n1 6\\n7 1\\n8 1\\n3 7\\n4 7\\n6 8\\n6 7\\n4 8\\n7 1\\n7 3\\n2 7\\n7 5\\n8 1\\n4 8\\n6 1\\n4 7\\n5 3\\n3 5\\n8 1\\n1 4\\n3 3\\n4 5\\n7 5\\n6 1\\n6 4\\n2 4\\n4 1\\n3 3\\n3 1\\n4 6\\n6 5\\n6 7\\n3 4\\n5 6\\n7 4\\n5 4\\n5 5\\n7 1\\n7 2\\n8 2\\n3 3\\n4 3\\n4 4\\n2 2\\n2 2\\n4 3\\n3 1\\n6 1\\n7 1\\n6 3\\n2 4\\n5 4\\n7 2\\n5 1\\n7 2\\n6 7\\n6 3\\n6 6\\n7 6\\n3 7\\n4 7\\n6 3\\n5 1\\n6 7\\n7 1\\n4 6\\n3 7\\n2 7\\n6 1\\n5 7\\n6 2\\n6 5\\n3 6\\n7 3\\n2 6\\n2 6\\n6 6\\n7 1\\n5 6\\n3 5\\n2 7\\n3 2\\n2 3\\n7 2\\n3 4\\n5 6\\n5 7\\n2 4\\n4 4\\n4 4\\n6 4\\n7 5\\n6 4\\n5 2\\n4 1\\n6 6\\n3 5\\n7 2\\n7 1\\n3 7\\n4 7\\n7 2\\n5 6\\n6 1\\n7 2\\n7 7\\n4 6\\n6 1\\n5 7\\n7 5\\n4 7\\n5 7\\n7 7\\n6 2\\n4 5\\n5 7\\n7 7\\n5 1\\n4 5\\n2 7\\n3 7\\n5 7\\n5 6\\n5 7\\n7 4\\n7 7\\n7 6\\n3 2\\n7 2\\n4 3\\n7 3\\n2 7\\n5 2\\n2 3\\n2 7\\n3 4\\n6 7\\n7 4\\n3 2\\n4 3\\n6 5\\n5 2\\n7 1\\n3 6\\n4 6\\n6 5\\n4 6\\n6 5\\n2 5\\n7 1\\n2 7\\n3 3\\n7 1\\n6 7\\n7 2\\n3 7\\n2 2\\n6 1\\n7 3\\n7 4\\n4 3\\n3 3\\n4 7\\n6 5\\n5 7\\n5 7\\n7 1\\n6 7\\n5 7\\n6 7\\n3 3\\n7 1\\n7 2\\n4 5\\n3 5\\n7 1\\n5 7\\n4 7\\n6 7\\n3 4\\n7 7\\n6 7\\n5 7\\n7 4\\n4 2\\n7 7\\n3 7\\n7 4\\n7 6\\n4 6\\n3 3\\n7 1\\n5 7\\n5 1\\n5 7\\n4 7\\n5 3\\n7 6\\n4 7\\n4 6\\n7 7\\n7 1\\n5 7\\n7 4\\n6 7\\n5 6\\n7 7\\n4 7\\n6 5\\n5 2\\n5 3\\n5 6\\n7 2\\n5 7\\n7 2\\n7 7\\n2 4\\n3 4\\n4 1\\n5 4\\n5 6\\n3 7\\n4 6\\n4 7\\n3 4\\n6 2\\n5 7\\n7 2\\n7 5\\n4 3\\n6 7\\n7 7\\n4 7\\n6 7\\n4 7\\n6 5\\n4 6\\n3 2\\n2 7\\n3 4\\n5 7\\n7 4\\n4 6\\n7 7\\n5 7\\n6 6\\n7 7\\n7 2\\n6 3\\n6 4\\n4 7\\n7 6\\n6 7\\n4 3\\n5 6\\n7 3\\n7 3\\n2 3\\n6 4\\n7 6\\n7 7\\n6 4\\n4 1\\n6 7\\n7 7\\n3 4\\n5 3\\n3 2\\n7 7\\n7 5\\n5 4\\n7 6\\n5 7\\n3 2\\n5 7\\n7 3\\n2 4\\n7 4\\n7 2\\n6 2\\n7 1\\n7 5\\n3 7\\n2 3\\n2 4\\n5 7\\n2 3\\n5 6\\n7 4\\n7 3\\n7 7\\n7 7\\n4 7\\n3 7\\n7 4\\n3 2\\n2 4\\n6 7\\n5 2\\n2 4\\n4 2\\n5 1\\n3 2\\n7 6\\n7 7\\n4 7\\n5 7\\n7 4\\n7 1\\n5 7\\n5 6\\n7 4\\n5 7\\n7 4\\n7 7\\n3 2\\n3 2\\n7 7\\n7 5\\n5 7\\n7 7\\n7 7\\n7 2\\n7 6\\n7 4\\n7 2\\n6 7\\n5 7\\n6 2\\n5 2\\n6 7\\n3 2\\n3 4\\n7 4\\n3 2\\n6 1\\n4 7\\n3 2\\n7 1\\n7 7\\n4 7\\n7 4\\n7 3\\n7 5\\n7 7\\n4 3\\n6 7\\n7 2\\n6 7\\n5 6\\n5 7\\n3 4\\n3 7\\n5 7\\n5 7\\n3 6\\n5 6\\n3 7\\n3 6\\n4 6\\n6 7\\n3 6\\n4 7\\n7 2\\n6 5\\n7 6\\n4 3\\n3 7\\n6 7\\n5 2\\n5 3\\n3 6\\n7 5\\n4 7\\n7 2\\n7 3\\n6 7\\n7 5\\n7 2\\n5 3\\n3 2\\n7 7\\n7 7\\n4 7\\n4 6\\n7 3\\n3 7\\n7 7\\n7 3\\n3 4\\n5 7\\n4 6\\n6 7\\"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\nN, M = [int(x) for x in stdin.readline().split()]\nX = [int(x) for x in stdin.readline().split()]\n\nresult = 0\n\nvisited = set()\nfor x in X:\n    if x not in visited:\n        result += 1\n        visited.add(x)\n    \n    if x - 1 not in visited:\n        result += 1\n        visited.add(x - 1)\n    \n    if x + 1 not in visited:\n        result += 1\n        visited.add(x + 1)\n\nprint(result)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 1 3 4') == '3'\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 5\n10 12 1 2 14''') == '5'\nassert solution('''1 10\n10''') == '0'\nassert solution('''1 20\n10''') == '-1'\nassert solution('''5 3\n3 2 4 5 6''') == '4'\nassert solution('''3 2\n1 2 3''') == '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n3 6 5 10 15 2 4 1\") == \"3\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"0\"\nassert solution(\"5 2\\n2 4 6 8 10\") == \"4\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"2\\n111100\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n1011\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4 5 2\\n1 2\\n2 3\\n1 4\\n4 3\\n'\n) == '101010110110101'\nassert solution(\n    '5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n'\n) == '1011011011011010110110110110110110111110'\nassert solution(\n    '4 3 2\\n1 2\\n2 3\\n1 4\\n4 3\\n'\n) == '101101101101101'\nassert solution(\n    '5 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n'\n) == '1011011011011010110110110110110110111110'\nassert solution(\n    '5 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n'\n) == '1011011011011010110110110110110110110111110'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '2\\n1110\\n1011'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '1\\n101001\\n111010'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '2\\n111100\\n110110'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111010'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n111100\\n110110'\n\n\"\"\"\n\n\"\"\"\nEXPLANATION\n\nWe want to find k ways to choose roads for the problem\n\nWe know that there are n cities\n\nThere are n-1 roads\n\nEach road connects a pair of cities\n\nLet f(n, m) be the min number of edges that connect the capitals\n\nWe want to minimize f(n, m)\n\nWe want to minimize m\n\nSince m <= n, we want to minimize f(n, m)\n\nLet x(n, m) be the number of ways to choose roads\n\nWe want x(n, m)\n\nWe want to minimize x(n, m)\n\nx(n, m) = x(n-1, m) + x(n-1, m-1)\n\nx(n, m) = x(n-1, m) + x(n-2, m-1) + x(n-3, m-2) + x(n-4, m-3) + x(n-5, m-4) + x(n-6, m-5) + x(n-7, m-6) + x(n-8, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3, m-3) + x(n-4, m-4) + x(n-5, m-5) + x(n-6, m-6) + x(n-7, m-7) +...\n\nx(n, m) = x(n-1, m) + x(n-1, m-1) + x(n-2, m-2) + x(n-3"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n11110\\n101010'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '1\\n101010\\n111100'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n11110\\n101010'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n11110\\n101010'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n11110\\n101010'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\nprint(\"Test finished.\")\n\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n') == '2'\n\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2'\n\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '1'\n\nassert solution('4 4 1\\n1 2\\n2 3\\n1 4\\n4 3\\n') == '11010'\n\nassert solution('4 5 1\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '101110'"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '''\n2\n111100\n110110'''\n\n'''\nfrom itertools import combinations"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n') == '2\\n1110\\n1011\\n'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '1\\n101001\\n'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n111100\\n110110\\n'\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\"\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3\") == \"NO\"\nassert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"2 10 10\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n\"\"\"\nimport math"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"5\\n1 2 1 2 5\") == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"NO\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 3\\n') == 'YES'\nassert solution('10 10\\n') == 'YES'\nassert solution('1 2 3\\n') == 'NO'\nassert solution('4 5 3\\n') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"4\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\nimport json"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 4') == 'YES'\nassert solution('10 10') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('1') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == 'YES'\nassert solution(\"3\\n1 2 3\") == 'YES'\nassert solution(\"2\\n10 10\") == 'YES'\nassert solution(\"3\\n4 5 3\") == 'NO'"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"10 4\\n-3 -6 5 4\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4\\n-3 -6 5 4') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\n\"\"\"\n\nH, N = map(int, input().split())\n\nhp = H\n\nfor i in range(N):\n    d = int(input())\n    hp += d\n    if hp <= 0:\n        print(i+1)\n        break\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\\n-3 -6 5 4\") == \"4999999999996\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\n\"\"\"\n\nimport sys\n\nH, n = map(int, sys.stdin.readline().split())\nd = list(map(int, sys.stdin.readline().split()))\ni = 0\nwhile i < n:\n    if H > 0:\n        H += d[i]\n        i += 1\n    else:\n        break\n    if H <= 0:\n        break\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n-3 -6 5 4\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('10 4\\n-3 -6 5 4') == '-1'\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1000 6\n-100 -200 -300 125 77 -4\"\"\"\n        output = \"\"\"9\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1000000000000 5\n-1 0 0 0 0\"\"\"\n        output = \"\"\"4999999999996\"\"\"\n        self."
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1, 2) == '2'\nassert solution(1, 4) == '4'\nassert solution(1, 6) == '6'\nassert solution(1, 10) == '10'\nassert solution(1, 100) == '100'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BBAABBBA') == 'BB'\nassert solution('BBABBABBBB') == 'BBABBA'\nassert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\nassert solution('CCCCCA') == 'CCCC'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"BBAABBBA\") == \"BB\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABCAABAAA') == 'ABC'\nassert solution('ABCAABAAA') == 'ABC'\n\nassert solution('AZAABA') == 'AZ'\nassert solution('AZAABA') == 'AZ'\n\nassert solution('AB') == 'AB'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABA\") == \"AB\"\nassert solution(\"AA\") == \"AA\"\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBAABBBA\") == 'BB'\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCD\") == \"ABC\"\nassert solution(\"ABBC\") == \"AB\"\nassert solution(\"AAABBB\") == \"AB\"\n\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"test\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"yes\") == \"es\"\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\nfrom functools import reduce\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"2\"\nassert solution(\"west\") == \"2\"\nassert solution(\"codeforces\") == \"8\"\nassert solution(\"yes\") == \"1\"\nassert solution(\"b\") == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"here\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == \"test\"\nassert solution(\"west\") == \"test\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"yes\") == \"codeforces\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\nassert solution(\"ab\") == \"a\"\nassert solution(\"\") == \"a\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"wet\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"yes\") == \"yes\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nN, X = map(int, input().split())\nvisited = set()\n\nvisited.add(0)\nfor i in range(1, N):\n    distance = abs(X - i)\n    if distance not in visited:\n        visited.add(distance)\n    else:\n        break\nelse:\n    print(i)\n    exit(0)\n\nfor i in range(N):\n    distance = abs(X + i)\n    if distance not in visited:\n        visited.add(distance)\n    else:\n        break\nelse:\n    print(i)\n    exit(0)\n\nfor i in range(N):\n    distance = abs(X - i)\n    if distance not in visited:\n        visited.add(distance)\n    else:\n        break\nelse:\n    print(i)\n    exit(0)\n\nprint(i)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 7 11') == 2\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '0'\nassert solution('3 3\\n1 7 11') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 3\n1 7 11\n\"\"\") == \"2\"\n\"\"\"\nExplanation:\n3 cities, with coordinates 1, 7 and 11, respectively.\nYou can choose D = 2, to ensure that all cities are visited.\n\nThe possible routes are:\n - Perform Move 2 to travel from coordinate 1 to coordinate 3.\n - Perform Move 2 to travel from coordinate 1 to coordinate 5.\n - Perform Move 2 to travel from coordinate 1 to coordinate 7.\n - Perform Move 2 to travel from coordinate 1 to coordinate 9.\n - Perform Move 2 to travel from coordinate 1 to coordinate 11.\n - Perform Move 1 to travel from coordinate 3 to coordinate 3.\n - Perform Move 1 to travel from coordinate 5 to coordinate 5.\n - Perform Move 1 to travel from coordinate 7 to coordinate 7.\n - Perform Move 1 to travel from coordinate 9 to coordinate 9.\n - Perform Move 1 to travel from coordinate 11 to coordinate 11.\n\nSo, choosing D = 2 will ensure that all cities are visited, and that is the maximum value of D.\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n\"\"\"\n\n\"\"\"\nInput:\n4 6\n1 2 3 4 5 6\n\nOutput:\n4\n\"\"\"\n\nfrom math import inf\n\nN, X = map(int, input().split())\nXs = list(map(int, input().split()))\n\nD = inf\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        D = min(D, abs(Xs[i] - Xs[j]))\n\nprint(D)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('abca') == 'Yes'\nassert solution('abccba') == 'Yes'\nassert solution('abccbad') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"akasaka\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nprint(solution(\"akasaka\"))\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"asaasaa\") == \"Yes\"\nassert solution(\"ababa\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('aaaa') == 'Yes'\nassert solution('ab') == 'No'\nassert solution('aaab') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcdba') == 'Yes'\nassert solution('abcdefgfedcba') == 'Yes'\nassert solution('abacde') == 'Yes'\nassert solution('abcdefghijklmnop') == 'No'\nassert solution('aaaaaaaaaaaaaaaa') == 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\na, b = map(float, input().split())\nprint(int(a * b) + int(a * b) % 1)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\nfrom math import floor\nfrom decimal import *\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n\na, b = map(float, stdin.split(\" \"))\n\nprint(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == '5'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\n\n\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom functools import lru_cache\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\") == \"1\"\nassert solution(\"3\\n1\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"3\\n1\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 5\n\"\"\"\n\nimport sys\nimport math\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    n = math.floor(n/2)\n    if n >= 3:\n        x = 2\n    else:\n        x = 1\n    print(x)"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(7) == 3\nassert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 1\nassert solution(2000000000) == 9999999999\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"3\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"1\"\nassert solution(\"4\\n1\") == \"2\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n4\\n0\") == \"2\"\nassert solution(\"3\\n2\\n2\\n1\\n1\\n0\") == \"0\"\nassert solution(\"4\\n4\\n0\") == \"1\"\nassert solution(\"1\\n2\\n1\\n1\\n0\") == \"1\"\nassert solution(\"1\\n1\\n0\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n\n---"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 1') == '3'\nassert solution('9 9 1') == '3'\nassert solution('5 4 5') == '1'\nassert solution('5 4 4') == '0'\nassert solution('5 4 6') == '2'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 3 1') == '0'\nassert solution('9 9 1') == '3'\nassert solution('5 4 5') == '1'"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 0\\n1 2\\n1 3\\n2 3\\n2 4\\n1 4\\n1 5\\n3 4\") == \"3\"\nassert solution(\"5 4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 5\\n3 5\") == \"1\"\nassert solution(\"9 4 3\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\\n5 6\\n1 6\\n2 7\\n3 7\\n4 7\\n6 7\\n7 8\\n7 9\\n8 9\\n9 8\\n7 8\\n7 9\\n6 9\\n7 7\\n5 6\\n6 7\\n5 7\\n5 9\\n6 8\\n4 8\\n6 8\\n4 7\\n3 6\\n4 6\\n3 6\\n3 7\\n1 7\\n2 7\\n1 8\\n1 9\\n1 8\\n3 9\\n3 8\\n3 7\\n2 6\\n2 7\\n3 7\\n4 8\\n4 9\\n6 8\\n7 9\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 1\\n2 3\\n1 4\\n2 5\\n4 5\\n') == '3'\nassert solution('1 9 1\\n2 9\\n3 9\\n4 9\\n5 9\\n6 9\\n7 9\\n8 9\\n9 9\\n') == '0'\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n\nprint('Hooray!')"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 2\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nassert solution(\"5 4 2\\n5 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nassert solution(\"6 6 2\\n5 1\\n5 2\\n5 3\\n4 1\\n6 5\\n6 6\\n6 7\\n7 1\\n6 8\\n8 1\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 9 1\\n1 2\\n2 3\\n3 4\\n4 1\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == '0'\nassert solution(\"5 5 4\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == '1'\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == '3'\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\n\n\"\"\"\nimport sys\nimport itertools\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\nfrom itertools import combinations, product"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 4 1') == 4\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n3 2 4 1\n\"\"\") == 4\nassert solution(\n\"\"\"\n6\n1 1 1 4 4 4\n\"\"\"\n) == 5\n\n\"\"\"\nThe first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of boxers. The next line contains $n$ integers $a_1, a_2, \\dots, a_n$, where $a_i$ ($1 \\le a_i \\le 150000$) is the weight of the $i$-th boxer.\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\nprint('Test pass.')"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\nfrom typing import List"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\n---\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_2) == test_output_2\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\n################################################################################################################################"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\n-----Solution-----\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\nimport math\nimport random\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\"\"\"\n\nfrom collections import defaultdict\nfrom random import choice\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\"\"\"\n\nimport sys\nimport random\n\nN = int(sys.stdin.readline())\nh = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 8 40') == 2\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 8 40\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\"\"\"\n\nfrom utils import parse_input"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40\\n') == '2'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 8 40\") == 2\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(solution(\n            '4\\n2 10 8 40'\n        ),\n            '2')\n\n    def test_solution2(self):\n        self.assertEqual(solution(\n            '5\\n1 2 3 4 5'\n        ),\n            '1')\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 8 40\") == 2\nassert solution(\"2 10 8 40\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?(____):-____<____') == '0101'\nassert solution('?(____):-____<____') == 'false'\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''?(_-_-__-_+_/-_-__):-__<_,-,__<_,-,-,_<___,___<_,__,-,_<__,_<__,-,_<__,-,_-<___,___<_,-,_<___,_-<_,_,_-<_,_,_-<_,_-<_,_,-,_-<___,___<_,_-,_,_-<_,_,-,_<__,_,_,_<___,___<_,_-,_,_,-,_<__,_,-,_<__,_,_,-,_<__,_,-,-,_<___,_,-,_,_<_,_,_,-,_,_,_-,_-<___,_,_-,_,_,_,_,_,-,_,-,_,-,_,_,-,_,-,_,-,_,_,_,_,_,-,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(_-_-_-_)(_-_-_-_)(_-_-_-_)\") == \"0250341\"\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '010'\nassert solution('?(____+____+_____+_____):-_____>__,____<__,__<__,__<__,__<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____') == '01010'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(____+_____-_____):-____<__,__<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(_____+__):-__>__,_____<__.\\n\") == \"0250341\"\nassert solution(\"?(_____+__):-__>__,_____<__.\\n\") == \"0250341\"\nassert solution(\"?(_____+__):-__>__,_____<__.\\n\") == \"0250341\"\nassert solution(\"?(_____+__):-__>__,_____<__.\\n\") == \"0250341\"\nassert solution(\"?(_____+__):-__>__,_____<__.\\n\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(_-?+/__*__):-___>__.\n\n
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1000000000000000000\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 100000000000000000000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 11') == 3\nassert solution('3 4 2') == 5\nassert solution('3 4 1000000000000000000') == 0\n\n\n\n-----\n\nclass XorCount:\n    def __init__(self, grid: List[List[int]], k: int):\n        self.grid = grid\n        self.k = k\n\n    def count(self) -> int:\n        pass"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"1 3 3 3\") == 3\nassert solution(\"0 3 3 2\") == 5\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"3 3 11\n2 1 5\n7 10 0\n12 6 4\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 11') == 3\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\"\"\"\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('thisisexampletwo') == 'plmaetwoxesisiht'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\nassert solution(\"exampletwo\") == \"exampletwo\"\n\"\"\"\n\n\"\"\"\n-----Challenge-----\n\nInstead of writing the solution in the template as suggested above, we're going to write our solution from scratch.\n\nIt's possible, but not necessary.\n\nIf you are going to write your solution from scratch, you can create a different file with name \"code\" in the homework directory and write your solution there.\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"exampletwo\") == \"thisisexampletwo\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 14\") == \"19\"\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 14) == 19\nassert solution(381, 492) == 873\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == 8\n\"\"\"\n\ninput_a, input_b = input().split(' ')\n\nprint(int(input_a) + int(input_b))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == \"19\"\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == 9\nassert solution(\"381 492\") == 873\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"++>\") == \"+++++>\\n>>>\\n\"\nassert solution(\"+++>\") == \"++++++++>\\n>>>\\n\"\nassert solution(\"<[<+>-]<\") == \"<<<<<-\\n>>>\\n\"\nassert solution(\"<<<[<<<+>>>+>>>>-]<<<.>.\") == \"<<<<<<<<<>>>>>>>-\\n>>>\\n\"\nassert solution(\"+++++>\") == \">>>>>>>>>\\n>>>\\n\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\nfrom collections import deque\n\nclass BFInterpreter:\n    def __init__(self, code):\n        self.code = code\n        self.memory = {}\n        self.console_input = deque([])\n        self.console_output = deque([])\n        self.position = 0\n        self.relative_base = 0\n        self.steps = 0\n\n    def step(self):\n        self.steps += 1\n        try:\n            command = self.code[self.position]\n        except IndexError:\n            return False\n\n        self.position += 1\n        if command == \"+\":\n            self.console_output.append(self.console_input.popleft())\n        elif command == \"-\":\n            self.console_output.appendleft(self.console_input.pop())\n        elif command == \">\":\n            self.memory[self.console_output.pop()] = self.console_input.popleft()\n        elif command == \"<\":\n            self.memory[self.console_output.popleft()] = self.console_input.pop()\n        elif command == \".\":\n            print(chr(self.console_output.popleft()), end=\"\")\n        elif command == \",\":\n            self.console_input.append(ord(input(\">>> \")))\n        elif command == \"[\":\n            if self.console_input[-1] == 0:\n                self.position += 1\n                try:\n                    if self.code[self.position] == \"]\":\n                        while self.code[self.position]!= \"[\":\n                            self.position += 1\n                        self.position += 1\n                except IndexError:\n                    return False\n            else:\n                while self.code[self.position]!= \"]\":\n                    self.position += 1\n        elif command == \"]\":\n            if self.console_input[-1]!= 0:\n                self.position += 1\n                try:\n                    if self.code[self.position] == \"[\":\n                        while self.code[self.position]!= \"]\":\n                            self.position += 1\n                        self.position += 1\n                except IndexError:\n                    return False\n            else:\n                while self.code[self.position]!= \"[\":\n                    self.position += 1\n        elif command == \",\":\n            self.console_input.append(self.console_output.popleft())\n        elif command == \"[\":\n            if self.console_input[-1] == 0:\n                self.position += 1\n                try:\n                    if self.code[self.position] == \"]\":\n                        while self.code[self.position]!= \"[\":\n                            self.position += 1\n                        self.position += 1\n                except IndexError:\n                    return False\n            else:\n                while self.code[self.position]!= \"]\":\n                    self.position += 1\n        elif command == \"]\":\n            if self.console_input[-1]!= 0:\n                self.position += 1\n                try:\n                    if self.code[self.position] == \"[\":\n                        while self.code[self.position]!= \"]\":\n                            self.position += 1\n                        self.position += 1\n                except IndexError:\n                    return False\n            else:\n                while self.code[self.position]!= \"[\":\n                    self.position += 1\n        else:\n            raise NotImplementedError(f\"Unknown command {command}\")\n        return True\n\n    def run(self):\n        while True:\n            if self.step():\n                return\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport math\n\nfrom typing import List"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\") == \"Hello, World!\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1+2') == '>>>'\nassert solution('1-2') == '<[-]<'\nassert solution('5-1') == '<[-]<'\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<'\n\"\"\"\n\nimport sys\n\nst = input()\nd = {\n    '+': '+',\n    '-': '-',\n    '*': '*',\n    '/': '/',\n    '<': '<',\n    '>': '>',\n    '[': '[',\n    ']': ']',\n}\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\",+0\") == \"+0\"\nassert solution(\"+10\") == \"10\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"+101010\") == \"101010\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\nassert solution(\n    \"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\\n\") == \"8\\n2\\n4\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1122334455\") == \"5\"\nassert solution(\"112233445567\") == \"5\"\nassert solution(\"1122334455678\") == \"5\"\nassert solution(\"11223344556789\") == \"5\"\nassert solution(\"1122334455678910\") == \"0\"\n\"\"\"\n\nfrom itertools import accumulate\nimport operator\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''5\n1\n3\n20\n38\n56'''\n) == '''1\n2\n5\n2\n0'''\n\nassert solution(\n'''4\n2132\n506\n999999999999999999\n1000000000000000000'''\n) == '''8\n2\n4\n1'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '5'\nassert solution(\"1011101101110110111$\\dots$\") == '5'\nassert solution(\"1111111111111$\\dots$\") == '0'\nassert solution(\"111001110011100111011110110111101111011111111110111101111011110111101111011110111101111011110111101111111$\\dots$\") == '0'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111223334444555556666677777888899999999999999999999\") == \"2\"\nassert solution(\"111223334444555556666677777888899999999999999999999\") == \"5\"\nassert solution(\"111223334444555556666677777888899999999999999999999\") == \"2\"\nassert solution(\"111223334444555556666677777888899999999999999999999\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '11212312341234512345612345671234567812345678912345678910'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112233412$\\dots$\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == \"0\\n0\\n0\\n0\\n0\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('112123123412345$') == '1'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '5'\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == '4'\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '6'\nassert solution('57') == '4'\nassert solution('575') == '4'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == '4'\n\"\"\"\n\n\"\"\"\nGiven a positive integer N, write a program that outputs the n-th value of the Fibonacci sequence modulo 10^9.\n\n-----Constraints-----\n - N is an integer between 1 and 10^12.\n\n-----Input-----\nThe first and only line of the input contains a single integer N.\n\n-----Output-----\nPrint a single line containing one integer \u2014 the n-th Fibonacci number modulo 10^9.\n\n-----Sample Input-----\n7\n\n-----Sample Output-----\n21\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234') == 3\nassert solution('12345') == 4\nassert solution('1234a') == 0\nassert solution('12345a') == 0\nassert solution('123456') == 0\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"575\") == \"4\"\n\n\"\"\"\n\n\"\"\"\nN=input()\nx=0\nfor i in range(1,int(N)+1):\n    s=str(i)\n    if '7' in s or '5' in s or '3' in s:\n        if s.count('7')>=1 and s.count('5')>=1 and s.count('3')>=1:\n            x+=1\nprint(x)\n\"\"\"\n\nN=int(input())\nprint(sum([1 for i in range(1,N+1)if '7' in str(i)or '5' in str(i)or '3' in str(i)])+4)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == '4'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"575\") == 4\n\"\"\"\n\n\"\"\"\nYou are given a positive integer N. It is known that the number of distinct positive integers less than or equal to N which have at least one occurrence of the digit 7 is exactly 51.\n\nYou have to answer several queries of the form\n\nwhat is the number of integers in the range [a, b] (both inclusive) which have at least one occurrence of the digit 7?\nFor example, for N = 10 the range is [1, 10] and for N = 12 the range is [1, 12].\n\nWrite a function to answer these queries.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - N is an integer.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of integers in the range [a, b] (inclusive) which have at least one occurrence of the digit 7.\n\n-----Sample Input-----\n2\n10\n12\n\n-----Sample Output-----\n51\n55\n\n\"\"\"\n\n\"\"\"\nYou are given an integer N.\n\nWe call a positive integer special if it is equal to the sum of its digits raised to some power that is greater than 1. For example, 2, 39, 371 and 407 are special.\n\nFor example, 371 is special, because 3^2 + 7^2 + 1^2 == 371.\n\nLet's call a positive integer K special if it is special and each of its digits raised to some power is also special.\n\nFor example, 5 is special: 2 + 22 + 222 == 5.\n\nLet's call a positive integer K special if it is special and each of its digits raised to some power is also special and K itself is not special.\n\nIn particular, 2, 39 and 407 are special because 2^2 + 9^2 + 7^2 == 407, 39^2 + 9^2 + 7^2 == 407, and 407 is not special.\n\nLet's call a positive integer K special if it is special and each of its digits raised to some power is also special and K itself is not special.\n\nIn particular, 2, 39 and 407 are special because 2^2 + 9^2 + 7^2 == 407, 39^2 + 9^2 + 7^2 == 407, and 407 is not special.\n\nWrite a function:"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0') == 1\nassert solution('1') == 0\nassert solution('10') == 0\nassert solution('11') == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('010') == 1\n\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('11') == '1'\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11100') == 1\nassert solution('1100') == 0\nassert solution('1111') == 0\nassert solution('1') == 0\nassert solution('111011110111101101111011111111111111') == 10\n\"\"\"\n\nimport sys\nimport pdb\n\nS = sys.stdin.readline().rstrip()\ncount = 0\nfor i in range(1, len(S) - 1):\n    if S[i]!= S[i - 1]:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00100\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"110\") == \"0\"\nassert solution(\"010\") == \"1\"\nassert solution(\"100\") == \"0\"\nassert solution(\"000\") == \"1\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111001100') == '2'\nassert solution('111001100') == '2'\nassert solution('111001100') == '2'\nassert solution('111001100') == '2'\nassert solution('111001100') == '2'\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11011101\") == 3\nassert solution(\"11111110\") == 0\nassert solution(\"11100110\") == 1\nassert solution(\"11100111\") == 2\nassert solution(\"11100100\") == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == 0\nassert solution(\"010\") == 1\n\"\"\"\nimport math"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 1\nassert solution('1') == 0\nassert solution('10') == 1\nassert solution('11') == 2\nassert solution('111') == 3\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6 10 31\") == \"APPROVED\"\nassert solution(\"4 3 2 1\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nfrom collections import Counter\n\nn = int(stdin.readline())\nli = list(map(int, stdin.readline().split()))\n\ncount = Counter()\n\nfor i in li:\n    if i % 2 == 0:\n        if i % 3 == 0 or i % 5 == 0:\n            count[i] += 1"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n6 7 9 10 31\\n') == 'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"5\\n1 2 3 4 5\") == \"DENIED\"\n\"\"\"\nimport stdin"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nN = int(stdin.readline())\nnumbers = stdin.readline().split()"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3\") == \"APPROVED\"\nassert solution(\"5 4 5\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDRUDRD\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUULDRD\") == \"Yes\"\nassert solution(\"RUDLURD\") == \"No\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == 'Yes'\nassert solution(\"RULUDRDRDRDRUULDRDRDRDR\") == 'Yes'\nassert solution(\"LDRLLUULRDDUDDRLRRUULLRLRLR\") == 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRUDRR') == 'No'\nassert solution('UDLRUD') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RLRD\") == \"No\"\n\nassert solution(\"UD\") == \"Yes\"\nassert solution(\"RL\") == \"No\"\n\nassert solution(\"LUDLU\") == \"Yes\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\n\n\"\"\"\n\nimport sys\nimport math\n\nA, B, C, D, E = [int(s) for s in sys.stdin.readline().strip().split(' ')]"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\nassert solution('''5\n3\n2\n4\n3\n5''') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def __init__(self):\n        self.num_cars = None\n        self.num_passengers = None\n        self.num_avail_trains = None\n        self.num_avail_buses = None\n        self.num_avail_taxis = None\n        self.num_avail_planes = None\n        self.num_avail_ships = None\n        self.passengers_per_car = None\n        self.trains_per_car = None\n        self.buses_per_car = None\n        self.taxis_per_car = None\n        self.planes_per_car = None\n        self.ships_per_car = None\n\n        self.time = None\n        self.num_cars = int(input())\n        self.num_passengers = [int(i) for i in input().split()]\n        self.num_avail_trains = [int(i) for i in input().split()]\n        self.num_avail_buses = [int(i) for i in input().split()]\n        self.num_avail_taxis = [int(i) for i in input().split()]\n        self.num_avail_planes = [int(i) for i in input().split()]\n        self.num_avail_ships = [int(i) for i in input().split()]\n        self.passengers_per_car = [int(i) for i in input().split()]\n        self.trains_per_car = [int(i) for i in input().split()]\n        self.buses_per_car = [int(i) for i in input().split()]\n        self.taxis_per_car = [int(i) for i in input().split()]\n        self.planes_per_car = [int(i) for i in input().split()]\n        self.ships_per_car = [int(i) for i in input().split()]\n        self.time = [int(i) for i in input().split()]\n\n    def solution(self) -> str:\n        trains = []\n        buses = []\n        taxis = []\n        planes = []\n        ships = []\n\n        trains_per_min = math.floor(self.num_cars / self.trains_per_car[0])\n        buses_per_min = math.floor(self.num_cars / self.buses_per_car[0])\n        taxis_per_min = math.floor(self.num_cars / self.taxis_per_car[0])\n        planes_per_min = math.floor(self.num_cars / self.planes_per_car[0])\n        ships_per_min = math.floor(self.num_cars / self.ships_per_car[0])\n\n        for i in range(0, self.num_cars):\n            if trains_per_min < self.num_avail_trains[i]:\n                trains.append(trains_per_min)\n            else:\n                trains.append(self.num_avail_trains[i])\n\n            if buses_per_min < self.num_avail_buses[i]:\n                buses.append(buses_per_min)\n            else:\n                buses.append(self.num_avail_buses[i])\n\n            if taxis_per_min < self.num_avail_taxis[i]:\n                taxis.append(taxis_per_min)\n            else:\n                taxis.append(self.num_avail_taxis[i])\n\n            if planes_per_min < self.num_avail_planes[i]:\n                planes.append(planes_per_min)\n            else:\n                planes.append(self.num_avail_planes[i])\n\n            if ships_per_min < self.num_avail_ships[i]:\n                ships.append(ships_per_min)\n            else:\n                ships.append(self.num_avail_ships[i])\n\n        for i in range(0, self.time[0]):\n            if trains[i] > self.passengers_per_car[i]:\n                trains[i] = self.passengers_per_car[i]\n\n        for i in range(0, self.time[0]):\n            if buses[i] > self.passengers_per_car[i]:\n                buses[i] = self.passengers_per_car[i]\n\n        for i in range(0, self.time[0]):\n            if taxis[i] > self.passengers_per_car[i]:\n                taxis[i] = self.passengers_per_car[i]\n\n        for i in range(0, self.time[0]):\n            if planes[i] > self.passengers_per_car[i]:\n                planes[i] = self.passengers_per_car[i]\n\n        for i in range(0, self.time[0]):\n            if ships[i] > self.passengers_per_car[i]:\n                ships[i] = self.passengers_per_car[i]\n\n        num_trains = 0\n        num_buses = 0\n        num_taxis = 0\n        num_planes = 0\n        num_ships = 0\n\n        for i in range(0, self.time[0]):\n            num_trains += trains[i]\n            num_buses += buses[i]\n            num_taxis += taxis[i]\n            num_planes += planes[i]\n            num_ships += ships[i]\n\n        return str(num_trains + num_buses + num_taxis + num_planes + num_ships)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\n\"\"\"\nGiven.\n\nA\nB\nC\nD\nE\n\nN\n\"\"\"\n\nfrom math import inf\n\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\n\np = [a, b, c, d, e]\n\ndptable = [[inf for _ in range(5)] for _ in range(n+1)]\n\nfor t in range(1, n+1):\n    for i in range(5):\n        dptable[t][i] = min(dptable[t-1][(i+1)%5], dptable[t-1][(i+2)%5], dptable[t-1][(i+3)%5]) + p[i]\n        \nprint(min(dptable[n]))"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys\n\nn, a, b, c, d, e = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\nA, B, C, D, E = list(map(int, sys.stdin.readline().split()))\n\ncities = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\nfor i in range(N):\n    a, b, c, d, e = list(map(int, sys.stdin.readline().split()))\n    cities[0][0] += a\n    cities[1][0] += a\n    cities[2][0] += a\n    cities[3][0] += a\n    cities[4][0] += a\n    cities[0][1] += b\n    cities[1][1] += b\n    cities[2][1] += b\n    cities[3][1] += b\n    cities[4][1] += b\n    cities[0][2] += c\n    cities[1][2] += c\n    cities[2][2] += c\n    cities[3][2] += c\n    cities[4][2] += c\n    cities[0][3] += d\n    cities[1][3] += d\n    cities[2][3] += d\n    cities[3][3] += d\n    cities[4][3] += d\n    cities[0][4] += e\n    cities[1][4] += e\n    cities[2][4] += e\n    cities[3][4] += e\n    cities[4][4] += e\n\nmax_time = 10000000000"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\nimport sys"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0\\n9\\n0\\n9\\n0\\n9\\n0\\n9\\n0\\n9\\n9\\n9') == '8'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\nfrom math import factorial\nfrom sys import stdin"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 2\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\n'''\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\n\"\"\"\nAlgorithm\n1. Use hashset to store the unique integer sequence\n2. Count the number of the sequences in the hashset\n3. print the result modulo (10^9 + 7)\n\nComplexity\nTime O(N)\nSpace O(N)\n\"\"\"\n\nimport sys\n\nMOD = 1000000007\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 2\nassert solution('4') == 4\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"11\"\nassert solution(\"2\") == \"3\"\nassert solution(\"20\") == \"23\"\nassert solution(\"1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '23'\nprint('PASSED')\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"7\"\nassert solution(\"20\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"23\"\nprint(solution(\"20\"))\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == ''\nassert solution(\"1\") == ''\nassert solution(\"20\") == '23'\nassert solution(\"0\") == ''\nassert solution(\"2\") == '3'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21') == '23'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '11'\nassert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20\") == \"23\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\nassert solution(\"4 1 3 2\") == \"0\"\nassert solution(\"4 1 3 5\") == \"1\"\nassert solution(\"6 2 4 2\") == \"2\"\nassert solution
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\nassert solution('4\\n1 1 2 3') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 3 3\") == 1\nassert solution(\"4 1 2 2 4\") == 2\nassert solution(\"10 1 1 1 1 1 1 1 1 1 1 1\") == 10\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\n\"\"\"\nSample Input:\n4\n3 1 3 2\n\nSample Output:\n1\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 3 2') == 1\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3 2\") == 1\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 100 90 80') == '23'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 100 90 80') == '23'\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''5 100 90 80\n98\n40\n30\n21\n80'''\n) == '23'\nassert solution(\n'''1 100 100 100\n1'''\n) == '0'\nassert solution(\n'''5 100 90 80\n98\n40\n30\n21\n80\n10'''\n) == '24'\nassert solution(\n'''5 100 90 80\n98\n40\n30\n21\n80\n0'''\n) == '28'\nassert solution(\n'''5 100 90 80\n98\n40\n30\n21\n80\n1'''\n) == '29'\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\\n1\\n2\\n:\") == \"1\"\nassert solution(\":\\n1\\n2\\n3\\n:\") == \"3\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('AB') == 'BC'\nassert solution('ZYX') == 'YZA'\nassert solution('HELLO') == 'IFNO'\n\nprint('All tests passed.')"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\nassert solution(\"ABC\", 3) == \"CBA\"\nassert solution(\"CBA\", 2) == \"ABZ\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NPQRSTUVWXYZABCDEFGHIJKLM\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n\nimport sys\nimport collections\nimport itertools\nimport re\nfrom typing import Iterator"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'B'\nassert solution('AB') == 'BC'\nassert solution('ABC') == 'BCD'\nassert solution('ZYXWVU') == 'ABCD'\nassert solution('ZYXWVUA') == 'BDEF'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(A) == B\nassert solution(AB) == BC\nassert solution(ABC) == CDE\nassert solution(ABCXYZ) == DEFGHI"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint('Hooray!')\n\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('ABC') == 'CBA'\nassert solution('ZZZ') == 'AAA'\n\"\"\"\n\n\"\"\"\nSolution:\nConvert string to list and shift each character by N.\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AB') == 'BC'\nassert solution('ABXY') == 'CDE'\nassert solution('ABXYZ') == 'CDEF'\nassert solution('XYZAB') == 'YZA'\nassert solution('XYZAB') == 'CDE'\n\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1\") == \"999999\"\nassert solution(\"2 1 2\") == \"2 2 1\"\nassert solution(\"1 3 4\") == \"4 1 3\"\nassert solution(\"1 1\") == \"1 1\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3 5 2 3 2 4') == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 2750131 199999\") == \"199999 2750131\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nimport sys\nfrom itertools import count, takewhile, islice\n\nsys.stdin = open(\"Problem_5\")\n\nn = int(input())\nprimes = takewhile(lambda x: x < 2750131, count(start=2, step=1))\n\narr = [int(i) for i in input().split()]\nprimes = list(islice(primes, n))\n\narr = arr + [primes[i] for i in range(len(primes)) if primes[i] in arr]\n\nprint(' '.join([str(i) for i in arr]))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n5 2 3 3 2\n''') == '3 4 2'\n\nassert solution('''1\n2750131 199999\n''') == '199999'\n\n\"\"\"\n\nfrom utils import get_data\n\n\"\"\"\n\u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u044d\u0448 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u00ab\u043f\u0435\u0440\u0435\u043d\u043e\u0441\u00bb. \u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u0432\u0435\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0443:\n\nhttps://stepic.org/media/attachments/lesson/24472/sample1.html\n\n\u041f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0441\u043b\u0435\u0448\u0430 \u044d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439. \u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0441\u0441\u044b\u043b\u043a\u0443.\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"221111\"\nassert solution(\"7 1\") == \"1121122\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"5 2\"), \"111111\")\n        self.assertEqual(solution(\"5 1\"), \"221111\")\n        self."
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nst1 = []\nst2 = []\nfor i in range(n):\n    if i < k:\n        st1.append(arr[i])\n    elif i > n - k:\n        st2.append(arr[i])\n    else:\n        if i % 2 == 0:\n            st1.append(arr[i])\n        else:\n            st2.append(arr[i])\n\nprint(''.join(map(lambda x: str(x + 1), st1)))\nprint(''.join(map(lambda x: str(x + 1), st2)))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"5 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"111111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"221122\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 3\") == \"22113\"\nassert solution(\"7 2\") == \"22222\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == '11112'\nassert solution(\"5 1\") == '21112'\nassert solution(\"7 1\") == '112122'\nassert solution(\"7 2\") == '22112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('5 1') == '21112'\nassert solution('5 1') == '21112'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"221122\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n100 1\") == 2\n\nfrom sys import stdin\nfrom itertools import groupby\n\nn = int(stdin.readline())\nl = sorted(map(int, stdin.readline().split()))\n\nd = {}\nfor i in range(len(l)):\n    if l[i] in d:\n        d[l[i]] += 1\n    else:\n        d[l[i]] = 1\n\na = [len(list(g)) for _, g in groupby(l)]\nd = {0: 1}\nfor i in range(1, n):\n    d[i] = d[i - 1]\n    if a[i] in d:\n        d[i] = d[a[i]]\n    if a[i - 1] in d:\n        d[i] += d[a[i - 1]]\n    d[i] %= 1000000007\n\nprint(d[n - 1])\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 1 3\") == 4\nassert solution(\"4 2 1 2 3\") == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 3 3 7\") == 4\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == e"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2 3') == 2\n\"\"\"\n\nimport unittest\n\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n\nfrom typing_extensions import Protocol, runtime_checkable\n\nS = List[int]\n\nModulo = int"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n1 1\") == 1\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"6\\n2 3 4 2 5 1\") == 6\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '6\\n4 7 1 5 4 9'\n) == '1'\n\nassert solution(\n    '5\\n1 2 3 4 5'\n) == '2'\n\nassert solution(\n    '1\\n16'\n) == '1'\n\nassert solution(\n    '4\\n1 1 1 1023'\n) == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 1 5 4 9\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\nassert solution('16') == '1'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == 1\n\n\"\"\"\n\n\nfrom typing import List\nfrom math import log\nimport os\nimport sys\n\nclass Solution:\n    def __init__(self, n: int, sequence: List[int]):\n        self.n = n\n        self.sequence = sequence\n        self.good_sequences = []\n\n    def get_good_sequences(self):\n        for x in self.sequence:\n            y = x - 1\n            while y > 0:\n                if (x + y) in self.good_sequences:\n                    y -= 1\n                else:\n                    if (x + y) % log(2, 10) == 0:\n                        self.good_sequences.append(x + y)\n                        y -= 1\n                    else:\n                        break\n\n    def min_deletions(self) -> int:\n        if len(self.sequence) == 1:\n            return 0\n        self.good_sequences = []\n        self.get_good_sequences()\n        return self.n - len(self.good_sequences)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == 1\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11101') == 4\nassert solution('11110') == 1\nassert solution('11111') == 0\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10111110\") == 6\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('0') == 0\nassert solution('0' * 100 + '1') == 99\nassert solution('0' * 1000 + '1') == 999\nassert solution('0' * 10000 + '1') == 9999\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10101010') == 5\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0011') == '4'\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 4\nassert solution('110') == 1\nassert solution('101010') == 3\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0011') == '4'"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1011') == 4\nassert solution('101111010') == 2\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0011') == '4'\n\"\"\"\n\nimport os"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('1111') == '1'\nassert solution('1101') == '0'\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 3\\n2 4\") == 2\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\"\n\nfrom typing import Iterator, List"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == 2\nassert solution('''4 1\n1 3\n2 4''') == 1\nassert solution('''4 5\n1 3\n2 4\n5 6\n3 4\n''') == 0\nassert solution('''4 5\n1 3\n2 4\n5 6\n3 4\n7 8\n''') == 0"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 3\\n2 4') == '2'\n'''\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nimport os\nimport sys\nimport time"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\nassert solution('10\\n3 5 1 2 4 6 2 3 5 3') == '4'\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 1') == '2'\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 1\") == 2\nprint('Hooray!')\n\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n------\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\"\"\"\n\nimport sys\n\ntests = int(input().strip())\n\nfor t in range(tests):\n    n, w = list(map(int, input().strip().split()))\n    line = list(map(int, input().strip().split()))\n    sum = 0\n    for i in line:\n        if sum > 0 and i > 0:\n            sum += i\n        elif sum < 0 and i < 0:\n            sum += i\n        elif sum > 0 and i < 0:\n            sum = 0\n            break\n        elif sum < 0 and i > 0:\n            sum = 0\n            break\n    if sum == 0:\n        print(w)\n    elif sum < 0:\n        print(0)\n    else:\n        print(sum)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 1\\n') == '3'\nassert solution('2 3\\n-1 1\\n') == '4'\nassert solution('3 3\\n1 1 1\\n') == '0'\nassert solution('3 3\\n1 2 1\\n') == '0'\nassert solution('2 3\\n0 1\\n') == '3'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == 3\nassert solution(\"2 4\\n-1 1\") == 4\nassert solution(\"4 10\\n2 4 1 2\") == 2\n\"\"\"\n\nn, w = map(int, input().split())\nseq = list(map(int, input().split()))\n\nminn = min(seq)\nmaxx = max(seq)"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5\n2 1 -3\n''') == '3'\nassert solution('''2 4\n-1 1\n''') == '4'\nassert solution('''4 10\n2 4 1 2\n''') == '2'\nassert solution('''4 10\n2 4 1 2\n''') == '2'\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"3 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == 3\nassert solution(\"2 4\\n-1 1\") == 4\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nlines = stdin.split('\\n')\nn, w = list(map(int, lines[0].split()))\ns = list(map(int, lines[1].split()))\n\ncounter = 0\nfor i in range(n):\n    if s[i] < 0:\n        counter += 1\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\"\"\"\n\nfrom math import gcd\nfrom fractions import Fraction\nfrom functools import reduce\n\n\nclass Polycarp:\n    def __init__(self, x):\n        self.x = x\n        self.f = [Fraction(1, 1)] * (x + 1)\n        self.f[0] = 0\n        self.f[1] = 0\n        self.f[2] = 1\n        self.f[3] = 2\n\n    def __getitem__(self, i):\n        return self.f[i]\n\n    def __setitem__(self, i, value):\n        self.f[i] = value\n\n    def div(self, i, n):\n        if i >= n:\n            self.f[i] = 0\n        else:\n            self.f[i] = Fraction(self.f[i], self.f[n])\n            self.div(i + 1, n)\n            self.div(i, n)\n\n    def mul(self, i, n):\n        if i + n <= self.x:\n            self.f[i + n] = Fraction(self.f[i] * self.f[n], self.f[i + n])\n        self.div(i + 1, i + n)\n\n    def step(self):\n        n = self.x\n        while n % 3!= 0:\n            self.mul(2, n)\n            n -= 1\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\n\n-----\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\") == \"2\"\nassert solution(\"\") == \"\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 6 3 12 9\\n\") == \"9 3 6 12 4 8\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '5 1 2 3 4'\nassert solution('''5\n1 3 3 4 5\n''') == '5 3 1 3 4'\nassert solution('''5\n5 1 1 5 5\n''') == '5 5 5 5 5'\n\nassert solution('''4\n1 1 1 1\n''') == '1 1 1 1'\nassert solution('''4\n1 2 2 1\n''') == '1 2 2 1'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('42 28 84 126') == '126 42 84 28'\nassert solution('1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    2\n    4\n    8\n    '''\n) == '''\n8\n4\n'''\n\nassert solution(\n    '''\n    4\n    42\n    28\n    84\n    126\n    '''\n) == '''\n126\n84\n42\n28\n'''\n\nassert solution(\n    '''\n    6\n    4\n    8\n    6\n    3\n    12\n    9\n    '''\n) == '''\n9\n3\n6\n12\n4\n8\n'''\n\nprint('Success')\n'''\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'\nassert solution('1 2 3 4 5') == '5'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 5 4 7 10 12') == \"3\\n7 3 5\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\nassert solution(\"4\\n4 4 4 4\") == \"4\"\nassert solution(\"5\\n4 4 4 5\") == \"4\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == \"1\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\nassert solution(\"2 2\") == \"1\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'\n\"\"\"\nfrom collections import Counter\nfrom math import log\n\nn = int(input())\nX = list(map(int, input().split()))\n\ncount = Counter(X)\n\nm = 0\nans = []\nfor key, val in count.items():\n    m = max(m, val)\n\nfor key, val in count.items():\n    if val == m:\n        ans.append(key)\nans.sort()\n\nprint(m)\nprint(' '.join(map(str, ans)))"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1 1''') == '1'\nassert solution('''2 2 2''') == '0'\nassert solution('''1 1 2''') == '0'\nassert solution('''2 2 3''') == '0'\nassert solution('''1 2 2''') == '0'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == res\nprint(solution(inp))"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 2 3\\n1 1 1') == '0 2'\nassert solution('3 3 4\\n0 0 0') == '0 0'\nassert solution('2 1 4\\n4 6') == '5 4'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"1 0\"\nassert solution(\"2 2 2\") == \"0 0\"\nassert solution(\"1 1 1\") == \"1 0\"\n\"\"\"\n\nfrom math import gcd\n\nfrom typing import List\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == '0 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nprint('\"Run\" is good. How is \"Check\"?')\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\n\"\"\"\n\nfrom math import log, ceil"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"103\") == \"3\"\n\n\"\"\"\n\nX = int(stdin.readline())\nyear = 0\n\nwhile X < 101:\n    year += 1\n    X = X * (100 / 100 + 1)\n\nprint(year)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103') == '3'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103') == '3'\n\"\"\"\n\nX = int(input())\n\nwhile X >= 100:\n    X = X * 1.01\n    print(X)\n    X = int(X)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"2\"\nassert solution(\"101\") == \"3\"\nassert solution(\"110\") == \"4\"\nassert solution(\"200\") == \"5\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103') == '3'\nassert solution('101') == '1'\nassert solution('1') == '0'\nassert solution('0') == '0'\n\"\"\"\n\nimport sys\n\nx = int(sys.stdin.readline().strip())\n\nn = 0\nwhile x < 10001:\n    x *= 1.01\n    n += 1\n\nprint(n)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"103\") == \"3\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"102\") == \"2\"\nassert solution(\"103\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '9'\nassert solution('3') == '20'\nassert solution('100') == '682289015'\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\n\"\"\"\nA simple example of finding the gcd of two numbers.\nUse Euclid's algorithm for finding the gcd.\n\nInput: Two numbers a and b\nOutput: The gcd of a and b\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"27\"\nassert solution(\"100\") == \"39581113553548924\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"9\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '9'\nassert solution('100') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '9'\n\"\"\"\n\nK = int(stdin.readline().strip())\n\nprint(sum([sum([sum([1 for a in range(K) for b in range(K) for c in range(K) if gcd(a,b,c) == 1]) for a in range(K) for b in range(K) for c in range(K) if gcd(a,b,c) == 1]))"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"9\"\n\"\"\"\nimport math\n\nk = int(input())\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '9'"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '9'\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = list(map(int, sys.stdin.readline().split()))\na.sort()\n\ns = 0\n\nfor i in range(n):\n    s += a[i] % a[i+1]\n\nprint(s)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n3 4 6') == 10\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\\n\") == 10\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\nm = 10 ** 9 + 7\n\nf = 0\nfor i in range(N):\n    f += a[i] * i\nf = f % m\n\nprint(f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3 4 6') == '10'\n\n-------"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\") == 10\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == 10\nassert solution(\"3 4 6\") == 10\nassert solution(\"3 4 6\") == 10\n\"\"\"\n\nimport math\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n\nmax_f = -float('inf')\nfor m in range(1, 10**9):\n    f = 0\n    for a in A:\n        f += math.floor(m / a) % a\n    if f > max_f:\n        max_f = f\nprint(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 6') == '10'\nassert solution('3 4 8') == '14'\nassert solution('3 4 7 8') == '19'\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 4 6\") == \"10\"\n\n----Test----\n>>> python3.\\main.py <.\\input\\input_18_1.txt\n10\n\n----Solution (Python3)----\n\"\"\"\n\nimport sys\n\nMAX_NUMBER = 1000"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4 5\") == \"10\"\nassert solution(\"1 4 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('4\\n1 2') == 'No'\nassert solution('4\\n1 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\"\n\nN = int(input())\n\nfor i in range(N):\n    D1, D2 = [int(x) for x in input().split()]\n    if D1 == D2:\n        if D1 == D2 == 6:\n            if i < N - 2 and D1 == D2 == 6 and D1 == D2 == 6:\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")\n            break\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n') == 'Yes'\n\"\"\"\n\n\"\"\"\nSolution:\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n') == 'Yes'\n\"\"\"\nimport itertools\n\nstdin = open(\"in.txt\").read().splitlines()\n\nstdin = stdin[1:]\n\ncount = 0\nfor i in range(len(stdin)):\n    if stdin[i].split()[0] == stdin[i].split()[1]:\n        count += 1\n    if i!= len(stdin) - 1:\n        if stdin[i+1].split()[0] == stdin[i+1].split()[1]:\n            count += 1\n        if stdin[i+2].split()[0] == stdin[i+2].split()[1]:\n            count += 1\n        if stdin[i+3].split()[0] == stdin[i+3].split()[1]:\n            count += 1\n\nprint('Yes') if count >= 3 else print('No')\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nstdin = input()\nwhile stdin!= \"\":\n    N, D = [int(i) for i in stdin.split(\"\\n\")]\n    doublets = 0\n    for i in range(1, N):\n        if D[i] == D[i-1]:\n            doublets += 1\n        if D[i] == D[i+1]:\n            doublets += 1\n        if D[i] == D[i+2]:\n            doublets += 1\n    if doublets >= 3:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    stdin = input()\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 4\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nr = int(input())\nprint(r ** 2 * 3.14159265358979)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test1_stdin) == test1_output\nassert solution(test2_stdin) == test2_output\n\"\"\"\nimport math"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\nimport math"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 1\nassert solution('2') == 4\nassert solution('3') == 9\nassert solution('4') == 16\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\na = int(input())\nprint(a**2 * 3.14)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 4\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\n\"\"\"\nfrom itertools import accumulate"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1\") == \"Yes\"\nassert solution(\"4 3 2\") == \"No\"\nassert solution(\"3 2 3 1\") == \"No\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"4\\n5 9 5 1\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"7\\n7 3 4 5 6 1 2\") == \"No\"\nassert solution(\"5\\n1 2 3 4 5\") == \"Yes\"\nassert solution(\"4\\n1 1 1 1\") == \"Yes\"\nassert solution(\"6\\n3 4 4 2 2 2\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 5 1\") == 'Yes'\nassert solution(\"4 3 5 2\") == 'No'\nassert solution(\"5 6 10 12 5\") == 'Yes'\nassert solution(\"10 5 8 4 6\") == 'No'\nassert solution(\"3 3 3 3\") == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 5 1') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 7\") == \"702\"\nassert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 1\\n5 6\\n5 9\") == \"5\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\\n\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nN, M = map(int, input().split())\n\ns = list(map(int, input().split()))\nc = list(map(int, input().split()))"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"3 3\", \"1 7\", \"3 2\", \"1 7\"]) == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == '9'"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '6'\nassert solution('2 4') == '4'\nassert solution('7 9') == '23'"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\"\"\"\n\n\n\n\"\"\"\nComplexity:\nO(N*K)\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '9'\nassert solution('4 3') == '22'\n\"\"\"\nfrom typing import List\n\nn, k = map(int, stdin.readline().split())"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n\") == \"9\"\nprint(\"PASS\")\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n------"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '9'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"\nimport math"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3') == '4'\n\n\"\"\"\nfrom sys import stdin\nfrom itertools import combinations"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"1010\"\nassert solution(\"11\") == \"1011\"\nassert solution(\"100\") == \"101100\"\nassert solution(\"1000\") == \"10110110\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-9') == '1011'\nassert solution('3') == '11'\nassert solution('-3') == '1011'\n\"\"\"\n\n\"\"\"\nGiven an integer N, find the base -2 representation of N.\nHere, S is the base -2 representation of N when the following are all satisfied:\n - S is a string consisting of 0 and 1.\n - Unless S = 0, the initial character of S is 1.\n - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\n-----Constraints-----\n - Every value in input is integer.\n - -10^9 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the base -2 representation of N.\n\n-----Sample Input-----\n-9\n\n-----Sample Output-----\n1011\n\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\n\"\"\"\nGiven an integer N, find the base -2 representation of N.\nHere, S is the base -2 representation of N when the following are all satisfied:\n - S is a string consisting of 0 and 1.\n - Unless S = 0, the initial character of S is 1.\n - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\n-----Constraints-----\n - Every value in input is integer.\n - -10^9 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the base -2 representation of N.\n\n-----Sample Input-----\n-9\n\n-----Sample Output-----\n1011\n\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-9') == '1011'\n\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(\"OK\")\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-9\") == '1011'\n\"\"\"\nimport sys"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9\") == '1011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(-9)) == \"1011\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n4 9\\n2 4\\n') == 12\n\"\"\"\nimport sys\n\nn, m = (int(x) for x in input().split())\nlista = []\nlistb = []\n\nfor _ in range(n):\n    a, b = (int(x) for x in input().split())\n    lista.append(a)\n    listb.append(b)\n\nlista.sort()\nlistb.sort()\n\nminn = m\nfor a in lista:\n    for b in listb:\n        if a * b < minn and a * b < m:\n            minn = a * b\nprint(minn)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == 12\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nprint(sum([i * j for i, j in zip(list(map(int, stdin.readline().split())), list(map(int, stdin.readline().split()))) if i * j <= m]))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    # Time complexity: O(NlogB)\n    # Space complexity: O(1)\n    def solution_one(self, n: int, m: int, prices: List[int], counts: List[int]) -> int:\n        if n <= 0:\n            return 0\n\n        prices = sorted(zip(prices, counts))\n        result = 0\n\n        for price, count in prices:\n            result += price * count\n            if result > m:\n                return result - price * (count - 1)\n\n        return m - result"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n4 9\\n2 4\\n') == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"12\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n10 4 8 7 3') == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n\"\"\"\n\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\nfrom sys import stdin"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n10 4 8 7 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 8 7 3\\n\") == 2\n\"\"\"\n\n\"\"\"\nSolution:\n    While you are not standing on the highest point, you have to move on the\n    left to the highest point. So we add N-i-1 to the answer.\n\n    While moving to the right you have to check if you are on the highest point.\n    If you are not on the highest point, you have to move on the left to the\n    highest point. So we add i+1 to the answer.\n\n    If the height of the current square is bigger than the previous square,\n    move on the right. So we add 1 to the answer.\n\n    O(N), O(1)\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n10 4 8 7 3\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 4 8 7 3\\n\") == \"2\"\nassert solution(\"5 4 3 2 1\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 3 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2 2 4 5\"\n) == \"1\"\nassert solution(\n    \"1 2 3 4 5\"\n) == \"2\"\nassert solution(\n    \"1 2 3 3 3\"\n) == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n1 2 2 4 5\\n') == '1'\nassert solution('5 3\\n1 2 2 4 5\\n') == '2'\nassert solution('5 3\\n1 2 3 3 3\\n') == '0'\nassert solution('5 3\\n1 2 3 4 5\\n') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''\n5 3\n1 2 2 3 5\n''') == '2'\n\nassert solution('''\n5 3\n1 2 2 2 2\n''') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\na = input().split()\na = list(map(int, a))\ns = 0\nfor i in range(n):\n    if a[i] % 2 == 0:\n        s += 1\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n\nprint('Hooray!')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\nassert solution('''5 3\n1 2 2 4 5''') == '1'\nassert solution('''5 3\n1 2 2 4 5''') == '1'\nassert solution('''5 3\n1 2 2 4 5''') == '1'\nassert solution('''5 3\n1 2 2 4 5''') == '1'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1 1 1 3\") == 4\nassert solution(\"4 4 4 2 2 1 1 3\") == 4\nassert solution(\"4 1 1 1 3\") == 2\nassert solution(\"4 1 1 1 4\") == 4\nassert solution(\"4 1 1 1 2\") == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == \"3\"\nassert solution(\"7 5\\n3 3 2 1 1 1 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 2 3\") == \"3\"\nassert solution(\"3 3 2 1 1 1 3\") == \"4\"\nassert solution(\"1 2 2 2 1 1 3\") == \"3\"\nassert solution(\"4 2 2 2 1 1 3\") == \"4\"\nassert solution(\"3 2 2 2 1 1 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 5\n1 2 2 4 2 3''') == '3'\n\"\"\"\n\n\"\"\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3\\n') == 3\nassert solution('7 5\\n3 3 2 1 1 1 3\\n') == 4\n\"\"\"\n\nimport sys\nimport collections\nimport math\nimport heapq\nfrom collections import deque\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3 4 2\") == 3\nassert solution(\"6 5\\n1 2 2 4 2 3\") == 3\nassert solution(\"7 5\\n3 3 2 1 1 1 3\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2 4 2 3') == '3'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 2 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5\\n3 3 2 1 1 1 3') == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\n-------\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.prev = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.first = None\n        self.last = None\n    \n    def add_first(self, value):\n        node = Node(value)\n        if self.first:\n            node.next = self.first\n            self.first.prev = node\n            self.first = node\n        else:\n            self.first = node\n            self.last = node\n    \n    def add_last(self, value):\n        node = Node(value)\n        if self.last:\n            self.last.next = node\n            node.prev = self.last\n            self.last = node\n        else:\n            self.first = node\n            self.last = node\n    \n    def remove_first(self):\n        if not self.first:\n            return None\n        if self.first == self.last:\n            self.first = None\n            self.last = None\n            return self.first.value\n        value = self.first.value\n        self.first = self.first.next\n        self.first.prev = None\n        return value\n    \n    def remove_last(self):\n        if not self.first:\n            return None\n        if self.first == self.last:\n            self.first = None\n            self.last = None\n            return self.first.value\n        value = self.last.value\n        self.last = self.last.prev\n        self.last.next = None\n        return value\n    \n    def remove(self, node):\n        if not node:\n            return\n        if node == self.first:\n            self.first = self.first.next\n            self.first.prev = None\n            return\n        if node == self.last:\n            self.last = self.last.prev\n            self.last.next = None\n            return\n        node.prev.next = node.next\n        node.next.prev = node.prev\n        return\n    \n    def traverse(self):\n        if not self.first:\n            return\n        current = self.first\n        while current:\n            print(current.value, end=\" \")\n            current = current.next\n        print()\n    \n    def size(self):\n        size = 0\n        current = self.first\n        while current:\n            size += 1\n            current = current.next\n        return size"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10 9 1000 42000000000000'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3\\n1 1 2\") == \"0\"\nassert solution(\"3\\n3 1 2\") == \"2\"\nassert solution(\"4\\n1 1 1\\n100 100 1\\n1 100 100\") == \"11\"\nassert solution(\"10\\n100 1 1\\n1 1 2\\n1 2 4\\n1 3 8\\n1 4 16\\n1 5 32\\n1 6 64\\n1 7 128\\n1 8 256\\n1 9 512\\n1 10 1024\\n2 1 1\\n2 1 2\") == \"42\"\nassert solution(\"6\\n1 2 3\\n1 1 2\\n1 2 4\\n1 2 6\\n2 2 1\\n2 2 2\\n2 3 4\\n2 4 8\\n2 5 16\\n2 6 32\\n3 1 1\\n3 1 2\\n3 2 4\\n3 2 6\\n3 3 8\\n3 4 16\\n3 5 32\\n3 6 64\\n3 7 128\\n3 8 256\\n3 9 512\\n3 10 1024\\n4 1 1\\n4 1 2\\n4 2 4\\n4 2 6\\n4 3 8\\n4 4 16\\n4 5 32\\n4 6 64\\n4 7 128\\n4 8 256\\n4 9 512\\n4 10 1024\\n5 1 1\\n5 1 2\\n5 2 4\\n5 2 6\\n5 3 8\\n5 4 16\\n5 5 32\\n5 6 64\\n5 7 128\\n5 8 256\\n5 9 512\\n5 10 1024\\n6 1 1\\n6 1 2\\n6 2 4\\n6 2 6\\n6 3 8\\n6 4 16\\n6 5 32\\n6 6 64\\n6 7 128\\n6 8 256\\n6 9 512\\n6 10 1024\") == \"42\"\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom typing import List\nfrom functools import lru_cache"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == ''"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n3 4 5\\n1 2 3 4') == '3'\n\nsolution = lambda s: max(list(map(int, s.split())))\n\nprint(solution('4 5\\n3 4 5\\n1 2 3 4'))\n\n'''\n\nimport math"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\nassert solution('3 6\\n3 4 5\\n3 4 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 6\\n3 4 5\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6') == '2'\nassert solution('5 5 4\\n4 3 2 1') == '0'\nassert solution('4 10 5\\n4 3 2 1') == '1'\nassert solution('4 10 2\\n4 3 2 1') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\nassert solution(\"4 6\\n3 4 5\") == 0\nassert solution(\"3 6\\n1 2 3\") == 4\nassert solution(\"2 8\\n1 2\") == 1\nassert solution(\"3 1\\n1 2\") == 0\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"5 10000\") == \"5\"\nassert solution(\"10 500\") == \"0\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7\\n1 2 3 4') == 3\nassert solution('4 6\\n1 2 3 4') == 2\n\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\nassert solution('hoge') == 'No'\nassert solution('hogehoge') == 'Yes'\n\n-----Problem-----\nTakahashi is practicing shiritori alone again today.\nShiritori is a game as follows:\n - In the first turn, a player announces any one word.\n - In the subsequent turns, a player announces a word that satisfies the following conditions:\n - That word is not announced before.\n - The first character of that word is the same as the last character of the last word announced.\nIn this game, he is practicing to announce as many words as possible in ten seconds.\nYou are given the number of words Takahashi announced, N, and the i-th word he announced, W_i, for each i. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.\n\n-----Constraints-----\n - N is an integer satisfying 2 \\leq N \\leq 100.\n - W_i is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1\nW_2\n:\nW_N\n\n-----Output-----\nIf every word announced by Takahashi satisfied the conditions, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4\nhoge\nenglish\nhoge\nenigma\n\n-----Sample Output-----\nNo\n\nAs hoge is announced multiple times, the rules of shiritori was not observed.\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nhoge\\nhoge\\nenigma\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nwords = []\nfor _ in range(n):\n    words.append(stdin.readline().strip())\n\nfor i in range(n):\n    if i == 0:\n        continue\n    if words[i] in words[:i] or words[i][0]!= words[i-1][-1]:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"5 5\") == \"0\"\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3''') == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n\nA, B = map(int, input().split())\n\nprint(A*B*(A+B-1))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '10'\nassert solution('5 6') == '11'\n\"\"\"\n\nfrom __future__ import annotations\n\nclass Solution:\n    def snack_party(self, a: int, b: int) -> int:\n        if a == b:\n            return (a + 1) * (b - 1) // 2\n        else:\n            return (a + 1) * min(a, b) + (b + 1) * min(a, b)\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nassert solution(\"ex\") == \"xx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442 1 \u0434\u043e 1000, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0446\u0438\u043a\u043b for.\n\u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input 1:\n\nSample Output 1:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n\nSample Input 2:\n\nSample Output 2:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n\nSample Input 3:\n\nSample Output 3:\n\n2\n\nSample Input 4:\n\nSample Output 4:\n\nSample Input 5:\n\nSample Output 5:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442 1 \u0434\u043e 1000, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0446\u0438\u043a\u043b for.\n\u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input 1:\n\nSample Output 1:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n\nSample Input 2:\n\nSample Output 2:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n\nSample Input 3:\n\nSample Output 3:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n\nSample Input 4:\n\nSample Output 4:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n\nSample Input 5:\n\nSample Output 5:\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442 1 \u0434\u043e 1000, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0446\u0438\u043a\u043b for.\n\u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('4 5') == 'No'\nassert solution('5 5 5 5') == 'Yes'\nassert solution('1 2 3 4') == 'Yes'\nassert solution('2 2 2 2 2') == 'Yes'\n\n'''\nn = int(stdin.readline())\nh = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('10\\n5 10 9 2 4 1') == 'No'\nassert solution('5\\n5 5 5 5 5') == 'Yes'\nassert solution('4\\n3 4 2 4') == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\n\nassert solution('''5\n1 2 1 1 4''') == 'No'\n\nassert solution('''5\n1 1 1 1 1''') == 'No'\n\nassert solution('''10\n1 2 2 1 2 2 2 2 1 2''') == 'Yes'\n\nassert solution('''6\n1 2 3 2 1 2 3''') == 'Yes'"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n1 1 2 1 3\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    5\n    1 2 1 1 3\n    \"\"\"\n) == \"Yes\"\nassert solution(\n    \"\"\"\n    5\n    3 2 1 1 3\n    \"\"\"\n) == \"No\"\n\"\"\"\nYou are given N lines of input. The i-th line contains integers Si, 1 \\leq Si \\leq 10^9.\n\nYou should return a line of output consisting of one integer: the number of positions where you can put a checkerboard. If the number is greater than 1,000,000,000,000, output a number that is at most 1,000,000,000,000.\n\nSample Input 1:\n5\n1\n2\n3\n3\n4\n\nSample Output 1:\n2\n\nSample Input 2:\n6\n1\n2\n3\n3\n4\n3\n\nSample Output 2:\n3\n\nSample Input 3:\n6\n1\n2\n3\n4\n3\n2\n\nSample Output 3:\n1\n\nSample Input 4:\n8\n5\n4\n3\n2\n1\n5\n4\n6\n7\n\nSample Output 4:\n3\n\n-----Notes-----\n- Find the number of checkerboard positions when we can remove at most one square.\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == 'Yes'\nassert solution('5\\n5 4 3 2 1') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1 1 3') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"3\\n1 2 1\") == \"No\"\nassert solution(\"5\\n2 2 1 1 3\") == \"No\"\nassert solution(\"5\\n2 1 2 1 3\") == \"Yes\"\nassert solution(\"7\\n2 1 2 1 3 5 4 3\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 1 10') == '0'\nassert solution('1 1 -10') == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\nassert solution(\"2 3 -10\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, b, c = list(map(int, sys.stdin.readline().split()))\n\nnum_solutions = 0\nfor a_1 in range(-100, 101):\n    for a_2 in range(-100, 101):\n        for a_3 in range(-100, 101):\n            if a_1 * b + a_2 * b + a_3 * b + c > 0:\n                num_solutions += 1\n\nprint(num_solutions)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == '1'\nassert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == '0'\n'''\n\n---SOLUTION---\nIn order to solve this problem, you should consider the following:\n\nFor each test case:\n\n1. Sum the first line of the test case. That is, you have to find the sum of all values in the first line of the test case.\n\n2. Sum the second line of the test case. That is, you have to find the sum of all values in the second line of the test case.\n\n3. Sum the third line of the test case. That is, you have to find the sum of all values in the third line of the test case.\n\n4. You have to find the sum of all values in the fourth line of the test case.\n\n5. You have to find the sum of all values in the fifth line of the test case.\n\n6. For the sixth line, you have to find the sum of all values that are larger than the values in the first line of the test case.\n\n7. For the seventh line, you have to find the sum of all values that are larger than the values in the second line of the test case.\n\n8. For the eighth line, you have to find the sum of all values that are larger than the values in the third line of the test case.\n\n9. For the ninth line, you have to find the sum of all values that are larger than the values in the fourth line of the test case.\n\n10. For the tenth line, you have to find the sum of all values that are larger than the values in the fifth line of the test case.\n\n11. The sum of all values that are larger than the values in the sixth line is equal to the sum of all values in the first line of the test case minus the sum of all values in the second line of the test case minus the sum of all values in the third line of the test case minus the sum of all values in the fourth line of the test case.\n\n12. The sum of all values that are larger than the values in the seventh line is equal to the sum of all values in the first line of the test case minus the sum of all values in the second line of the test case minus the sum of all values in the third line of the test case minus the sum of all values in the fourth line of the test case minus the sum of all values in the fifth line of the test case.\n\n13. For the eleventh line, you have to find the sum of all values that are larger than the values in the first line of the test case.\n\n14. For the twelfth line, you have to find the sum of all values that are larger than the values in the second line of the test case.\n\n15. For the thirteenth line, you have to find the sum of all values that are larger than the values in the third line of the test case.\n\n16. For the fourteenth line, you have to find the sum of all values that are larger than the values in the fourth line of the test case.\n\n17. For the fifteenth line, you have to find the sum of all values that are larger than the values in the fifth line of the test case.\n\n18. For the sixteenth line, you have to find the sum of all values that are larger than the values in the sixth line of the test case.\n\n19. For the seventeenth line, you have to find the sum of all values that are larger than the values in the seventh line of the test case.\n\n20. For the eighteenth line, you have to find the sum of all values that are larger than the values in the eighth line of the test case.\n\n21. For the nineteenth line, you have to find the sum of all values that are larger than the values in the ninth line of the test case.\n\n22. For the twentieth line, you have to find the sum of all values that are larger than the values in the tenth line of the test case.\n\n23. The sum of all values that are larger than the values in the eleventh line is equal to the sum of all values in the first line of the test case minus the sum of all values in the second line of the test case minus the sum of all values in the third line of the test case minus the sum of all values in the fourth line of the test case minus the sum of all values in the fifth line of the test case minus the sum of all values in the sixth line of the test case.\n\n24. The sum of all values that are larger than the values in the twelfth line is equal to the sum of all values in the first line of the test case minus the sum of all values in the second line of the test case minus the sum of all values in the third line of the test case minus the sum of all values in the fourth line of the test case minus the sum of all values in the fifth line of the test case minus the sum of all values in the sixth line of the test case minus the sum of all values in the seventh line of the test case.\n\n25. The sum of all values that are larger than the values in the thirteenth line is equal to the sum of all values in the first line of the test case minus the sum of all values in the second line of the test case minus the sum of all values in the third line of the test case minus the sum of all values in the fourth line of the test case minus the sum of all values in the fifth line of the test case minus the sum of all values in the sixth line of the test case.\n\n26. For the fourteenth line, you have to find the sum of all values that are larger than the values in the first line of the test case.\n\n27. For the fifteenth line, you have to find the sum of all values that are larger than the values in the second line of the test case.\n\n28. For the sixteenth line, you have to find the sum of all values that are larger than the values in the third line of the test case.\n\n29. For the seventeenth line, you have to find the sum of all values that are larger than the values in the fourth line of the test case.\n\n30. For the eighteenth line, you have to find the sum of all values that are larger than the values in the fifth line of the test case.\n\n31. For the nineteenth line, you have to find the sum of all values that are larger than the values in the sixth line of the test case.\n\n32. For the twentieth line, you have to find the sum of all values that are larger than the values in the seventh line of the test case.\n\n33. The sum of all values that are larger than the values in the eleventh line is equal to the sum of all values in the first line of the test case minus the sum of all values in the second line of the test case minus the sum of all values in the third line of the test case minus the sum of all values in the fourth line of the test case minus the sum of all values in the fifth line of the test case.\n\n34. The sum of all values that are larger than the values in the twelfth line is equal to the sum of all values in the first line of the test case"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\nassert solution(\"2 3 -10\\n3 2 1\\n1 2 2\") == \"0\"\n\n\"\"\"\n\nimport ast\nimport sys\n\nfor line in sys.stdin:\n    N, M, C = map(int, line.split())\n    break"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1900') == 100\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('50') == '25'\nassert solution('21') == '11'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"100\"\nassert solution(\"500\") == \"100\"\nassert solution(\"1000\") == \"50\"\nassert solution(\"2000\") == \"100\"\nassert solution(\"2500\") == \"200\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"15\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1900\") == 100\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == 1\nassert solution('1900') == 1\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1000\"\nassert solution(\"2\") == \"1000, 1000, 1\"\nassert solution(\"3\") == \"1000, 1000, 1000, 1\"\nassert solution(\"4\") == \"1000, 1000, 1000, 1000, 1, 1\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"1000\"\nassert solution(\"1800\") == \"1100\"\nassert solution(\"2000\") == \"1200\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1900\") == \"100\"\nprint(solution(\"1900\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\na = [int(i) for i in sys.stdin.readline().strip().split()]\nb = [int(i) for i in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_0) == '9'\nassert solution(test_input_1) == '13'\nassert solution(test_input_2) == '9'\nassert solution(test_input_3) == '20'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A_1, A_2,..., A_N+1, B_1, B_2,..., B_N) == max_num_monsters\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == 9\n\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\n\nfrom typing import Dict, List, Union"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n3 5 2\n4 5\"\"\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3\n5 2\n4 5\n''') == '9'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == 'No War'\n\n-------\n1.X < Z \\leq Y\n2.x_1, x_2,..., x_N < Z\n3.y_1, y_2,..., y_M \\geq Z\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\nassert solution(\"2 2 10 20\\n8 15 13\\n16 22\\n\") == \"War\"\nassert solution(\"4 2 10 20\\n8 15 13\\n16 22\\n\") == \"War\"\nassert solution(\"4 3 10 20\\n8 15 13\\n16 22\\n\") == \"War\"\n\"\"\"\n\nimport unittest\n\nN, M, X, Y = [int(v) for v in input().split(' ')]\nx = [int(v) for v in input().split(' ')]\ny = [int(v) for v in input().split(' ')]"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No War'\nassert solution('1') == 'War'\nassert solution('0 1 0 1') == 'No War'\nassert solution('0 1 1 1') == 'War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'No War'\nassert solution('5 3 10 20\\n8 15 13\\n16 22') == 'No War'\nassert solution('3 2 10 20\\n8 15 13\\n16') == 'War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nprint(solution(\"3 2 10 20\\n8 15 13\\n16 22\"))"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == 'No War'\n\n--------------------------------------------\n\nimport math"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1 2\") == \"War\"\nassert solution(\"2 1 4 3\") == \"War\"\nassert solution(\"5 3 1 4\") == \"War\"\nassert solution(\"1 1 1 1 1\") == \"No War\"\nassert solution(\"5 5 1 4\") == \"War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"4 2 10 20\\n8 15 13\\n16 22\") == \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n4\") == 6\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n1\\n\") == \"2\"\nassert solution(\"2\\n3\\n4\\n\") == \"3\"\nassert solution(\"2\\n3\\n4\\n\") == \"3\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3\\n6\\n') == 6\nassert solution('1\\n1\\n1\\n') == 0\nassert solution('1\\n2\\n1\\n') == 5\nassert solution('2\\n1\\n1\\n') == 1\nassert solution('1\\n10\\n1\\n') == 10\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n3\") == 6\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        num_clocks, *clocks = map(int, stdin.split('\\n'))\n        sorted_clocks = sorted(clocks)\n        min_interval = 0\n        clock_intervals = {}\n        for clock in clocks:\n            clock_intervals[clock] = clock_intervals.get(clock, [])\n            clock_intervals[clock].append(min_interval)\n            clock_intervals[clock].append(clock_intervals[clock][0] + clock)\n            min_interval = clock_intervals[clock][1]\n        # print(clock_intervals)\n        # print(sorted_clocks)\n        intervals = []\n        for clock in sorted_clocks:\n            intervals.append(clock_intervals[clock][1] - clock_intervals[clock][0])\n        # print(intervals)\n        if len(intervals) == 1:\n            return str(intervals[0])\n        prev = intervals[0]\n        for interval in intervals[1:]:\n            if interval < prev:\n                return str(prev)\n            prev = interval\n        return str(prev)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\nassert solution(\"2\\n1\\n2\\n\") == \"5\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\\n5\") == \"6\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\") == \"3\"\nassert solution(\"2\\n2\\n2\\n2\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n') == '6'\nprint('Test pass.')"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n\") == 0\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0'\nprint(solution('3\\n1 2 3'))\n\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\nsolution(stdin)"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n\") == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\") == 0\n\"\"\"\n\n\"\"\"\nWrite a program that receives an integer number n and a sequence of n integers, and determines whether it is possible to obtain the sequence by replacing some of its elements with the values obtained by summing all of their divisors, and prints this result (1: possible, 0: impossible).\n\n-----Constraints-----\n - 1 \\leq n \\leq 1000\n - 1 \\leq a_i \\leq 1000\n\n-----Input-----\nThe first line contains an integer n (1 \\leq n \\leq 1000) \u2014 the number of elements in the sequence.\nThe second line contains n integers a_1, \\, a_2, \\ldots, a_n (1 \\leq a_i \\leq 1000), separated by a space.\n\n-----Output-----\nPrint \"1\" if it is possible to obtain the sequence by replacing some of its elements with the values obtained by summing all of their divisors, and \"0\" otherwise.\n\n-----Sample Input-----\n5\n2 7 2 9 12\n\n-----Sample Output-----\n1\n\n-----Explanation-----\nHere the sequence is [2, 7, 2, 9, 12]. It is possible to replace elements 2, 2, 9, 12, and 12 with their sum:\n\n1 + 1 + 1 + 1 + 1 = 5\n1 + 1 + 1 + 5 = 5\n1 + 1 + 5 = 6\n1 + 5 = 6\n5 = 6\nIt is impossible to obtain the sequence by replacing any of its elements with the sum of their divisors.\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\n\nn = int(input())\nW = list(map(int, input().split()))\nW.sort()"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\n\"\"\"\n\nn = int(input())\nweights = [int(x) for x in input().split()]\nt = int(input())"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    3 3\n    3 2 1\n    1 2 3\n    4 5 6\n    \"\"\"\n) == \"6\"\n\nassert solution(\n    \"\"\"\n    4 3\n    1 6 3 4\n    5 10 7 8\n    9 2 11 12\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    4 4\n    1 6 3 4\n    5 10 7 8\n    9 2 11 12\n    \"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"3 2 1\\n\"\n    \"1 2 3\\n\"\n    \"4 5 6\"\n    ) == \"6\"\n\nassert solution(\n    \"4 4\\n\"\n    \"1 6 3 4\\n\"\n    \"5 10 7 8\\n\"\n    \"9 2 11 12\"\n    ) == \"2\"\n\nassert solution(\n    \"3 4\\n\"\n    \"1 6 3 4\\n\"\n    \"5 10 7 8\\n\"\n    \"9 2 11 12\"\n    ) == \"2\"\n\nassert solution(\n    \"3 4\\n\"\n    \"1 6 3 4\\n\"\n    \"5 10 7 8\\n\"\n    \"9 2 11 12\"\n    ) == \"2\"\n\nassert solution(\n    \"1 1\\n\"\n    \"1 1\"\n    ) == \"0\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 100\\n100') == '99'\nassert solution('4 10 3 14 5\\n10 2 3 14 5') == '7'\nassert solution('6 10 3 14 5\\n14 5 3 10 2') == '12'\nassert solution('6 10 3 14 5\\n14 5 14 14 14') == '8'\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"4\\n1 100\") == \"100\"\nassert solution(\"2\\n5 5\") == \"0\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_expected_1\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 2 3 14 5\") == \"5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\np = [int(i) for i in sys.stdin.readline().split()]\ns = sum(p)\np.sort()\nprint(int(s / 2))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"2 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"2 1 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nn = int(input())\narr = [int(x) for x in input().split(' ')]\n\narr.sort(reverse=True)\nn_arr = []\n\nfor i in range(n):\n    if arr[i] % 2 == 0:\n        n_arr.append(arr[i])\n\nprint(sum(n_arr))\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\\n\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\\n\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\\n\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\\n\"\nassert solution(\"8\\n1 1 1 1 1 1 1\\n\") == \"7\\n\"\n\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nschedule = list(map(int, sys.stdin.readline().split()))\n\nres = 0\nrest_count = 0\nfor i in range(N):\n    if schedule[i] == 1:\n        rest_count += 1\n    else:\n        res = max(res, rest_count)\n        rest_count = 0\n\nprint(res)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 0 1 0 1\n''') == '2'\n\nassert solution('''6\n0 1 0 1 1 0\n''') == '2'\n\nassert solution('''7\n1 0 1 1 1 0 1\n''') == '3'\n\nassert solution('''3\n0 0 0\n''') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\nassert solution('3\\n0 0 0\\n') == '0'\n\nfrom sys import stdin"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().splitlines()\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n0 0 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\n\nassert solution('6\\n0 1 0 1 1 0') == '2'\n\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\n\nassert solution('3\\n0 0 0') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 1\nassert solution(4) == 0\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('6') == '6'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('7') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '0'\nassert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(7) == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == 2\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '7'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\n\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == 4\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard') == 3\nassert solution('6\\n parmese hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard') == 4\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('brie soft') == 'brie'\nassert solution('camembert soft') == 'camembert'\nassert solution('feta soft') == 'feta'\nassert solution('goat soft') == 'goat'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == 4\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\n\nprint(solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\"))\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Dict, List"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\nassert solution(\"4\\nwhirlpool hard\\nscrambled eggs hard\\nflavor of mayo hard\\ngreasy cheese hard\") == \"2\"\n\nassert solution(\"3\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"1\"\n\nassert solution(\"5\\ngouda hard\\nwhipped cream hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"4\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"brie soft\") == \"brie\"\nassert solution(\"camembert soft\") == \"camembert\"\nassert solution(\"feta soft\") == \"feta\"\nassert solution(\"goat soft\") == \"goat\"\nassert solution(\"muenster soft\") == \"muenster\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == '3'\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == '3'\nprint('Test PASSED')\n\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\nassert solution(\"2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\\n\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\\n\"\n\n\"\"\"\n\n\"\"\"\n\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00ab\u0420\u0435\u0439\u0442\u0438\u043d\u0433\u00bb\n\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u00ab\u0420\u0435\u0439\u0442\u0438\u043d\u0433\u00bb\n\"\"\"\n\n\nfrom collections import deque\n\n\nclass Stack:\n    def __init__(self):\n        self._container = deque()\n\n    @property\n    def empty(self):\n        return len(self._container) == 0\n\n    def push(self, element):\n        self._container.append(element)\n\n    def pop(self):\n        return self._container.pop()\n\n    def __repr__(self):\n        return repr(self._container)\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.right_child = None\n        self.left_child = None\n\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n            return\n        curr_node = self.root\n        while True:\n            if data >= curr_node.data:\n                if curr_node.right_child is None:\n                    curr_node.right_child = new_node\n                    return\n                curr_node = curr_node.right_child\n            elif data < curr_node.data:\n                if curr_node.left_child is None:\n                    curr_node.left_child = new_node\n                    return\n                curr_node = curr_node.left_child\n\n    def lookup(self, data):\n        curr_node = self.root\n        while curr_node is not None:\n            if data == curr_node.data:\n                return data\n            elif data > curr_node.data:\n                curr_node = curr_node.right_child\n            else:\n                curr_node = curr_node.left_child\n        return False\n\n    def remove(self, data):\n        node = self.root\n        parent_node = None\n        while node is not None and node.data!= data:\n            parent_node = node\n            if data > node.data:\n                node = node.right_child\n            elif data < node.data:\n                node = node.left_child\n        if node is None:\n            return\n        if node.left_child is not None and node.right_child is not None:\n            min_node = node.right_child\n            while min_node.left_child is not None:\n                min_node = min_node.left_child\n            node.data = min_node.data\n            node = min_node\n        if parent_node is None:\n            self.root = node\n        elif parent_node.left_child == node:\n            parent_node.left_child = node\n        elif parent_node.right_child == node:\n            parent_node.right_child = node\n        else:\n            node.data = parent_node.data\n\n    def breadth_first_search(self, data):\n        curr_node = self.root\n        curr_node_stack = Stack()\n        curr_node_stack.push(curr_node)\n        while not curr_node_stack.empty:\n            curr_node = curr_node_stack.pop()\n            if curr_node.data == data:\n                return True\n            if curr_node.right_child is not None:\n                curr_node_stack.push(curr_node.right_child)\n            if curr_node.left_child is not None:\n                curr_node_stack.push(curr_node.left_child)\n        return False\n\n    def in_order(self, node, array):\n        if node is None:\n            return\n        self.in_order(node.left_child, array)\n        array.append(node.data)\n        self.in_order(node.right_child, array)\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\nprint(solution(stdin))\n\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1540/problem/E\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 5 1 5 3 4 3') == '1 0 0 2'\n\nassert solution('7\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 1\\n2 1 2\") == \"1 0 0 2\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4\n0 1 2 1\n3 2 1 1\n\"\"\") == \"1 0 0 2\"\n\n\"\"\"\n3\n1 1 3\n1 3 1\n\n3\n0 1 1\n1 1 1\n0 1 1\n\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 1 2 1\\n1 2 3\") == \"0 1 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0110111010') == '1'\nassert solution('1110111010') == '1'\nassert solution('1110111010') == '1'\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('011110') == '0'\nassert solution('111000') == '1'\nassert solution('110110') == '1'\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"100\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1110110') == '0'\nassert solution('1110110') == '0'\nassert solution('1110110') == '1'\nassert solution('1110110') == '1'\nassert solution('1110110') == '1'\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('110111') == '0'\nassert solution('111000') == '1'\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('010') == '0'\nassert solution('0110') == '1'\nassert solution('1010') == '0'\nassert solution('1011') == '1'\nassert solution('11010') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nprint(solution(\"0 1 1 0\"))\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport re\nfrom functools import reduce\nfrom typing import Callable, List, Dict\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0111010\") == \"0\"\nassert solution(\"1110101010\") == \"1\"\nassert solution(\"1110111010\") == \"1\"\nassert solution(\"11101101010\") == \"1\"\nassert solution(\"01010101010\") == \"1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('01101110') == '1'\nassert solution('101') == '1'\nassert solution('1010101010') == '0'\nassert solution('11110') == '1'\nassert solution('01110') == '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('1 1 1 0') == '0'\nassert solution('1 0 1 1 1') == '1'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"2000 40 30\") == \"No\"\n\"\"\"\n\n\"\"\"\n7.  \nJohn is walking along the street and he encounters a big dog.\nHe wants to know whether it is an owner or not.\n\n-----Input-----\nJohn walks first, then the dog.\n\n-----Output-----\nYes, it is an owner.\n\n-----Sample Input-----\nJohn owns a big dog.\n\n-----Sample Output-----\nYes, it is an owner.\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nD, T, S = (int(x) for x in input().split())\n\nimport math\n\nprint(\"Yes\" if math.ceil(D/S) <= T else \"No\")"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nfrom decimal import Decimal\nfrom math import ceil"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 10') == 'No'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == 'Yes'\n\"\"\"\n\nD, T, S = input().split()\nD = int(D)\nT = int(T)\nS = int(S)\nTakahashi = T - (D/S)\nprint(Takahashi)\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('500 20 60') == 'No'\n\"\"\"\n\nD, T, S = (int(x) for x in stdin.split())\n\nans = 'Yes' if D / S <= T else 'No'\nprint(ans)\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"87\") == \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"85 98 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nprint(\"Test finished.\")\n\n-----\nclass Solution:\n    def isBingo(self, n, m, x, y):\n        arr = [[0]*m for _ in range(n)]\n        arr[x-1][y-1] = 1\n        for i in range(n):\n            for j in range(m):\n                if arr[i][j] == 0:\n                    arr[i][j] = 1\n                    if i-1 >= 0:\n                        if arr[i-1][j] == 1:\n                            arr[i][j] = 2\n                            continue\n                    if j-1 >= 0:\n                        if arr[i][j-1] == 1:\n                            arr[i][j] = 2\n                            continue\n                    if i+1 < n:\n                        if arr[i+1][j] == 1:\n                            arr[i][j] = 2\n                            continue\n                    if j+1 < m:\n                        if arr[i][j+1] == 1:\n                            arr[i][j] = 2\n                            continue\n        if arr[i].count(2) == 3:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'Yes'\nassert solution('1 1') == 'Yes'\nassert solution('1 2 3') == 'No'\nassert solution('1 1 1') == 'Yes'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n5 6\") == 30\n\"\"\"\n\nn, m = input().split(\" \")\nn, m = int(n), int(m)\na = [int(i) for i in input().split(\" \")]\n\nprint(n + max([max(a) - i for i in range(1, m + 1)]))\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\n-----\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 2\\n3 4') == '3'\nassert solution('2 2\\n1 2\\n1 2') == '-1'\nassert solution('1 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10') == '10'\n\n------Notes------\n\nThe maximum number of days during the vacation is the total number of days minus the total number of days spent doing an assignment.\n\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"41 2\\n5 6\") == 30\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import defaultdict\n\n\nclass Solution:\n    def maximum_days_for_assignments(self, n: int, m: int, a: List[int]) -> int:\n        days_map: Dict[int, int] = defaultdict(int)\n\n        def add_days(days: int, i: int):\n            if days > 0:\n                days_map[days] += 1\n\n        for i, day in enumerate(a):\n            add_days(day - 1, i)\n            add_days(n - day + 1, i)\n\n        return max(days_map.keys()) if days_map else -1\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5') == 30\nassert solution('4 4') == -1\nassert solution('5 7') == 14\nassert solution('5 0') == -1\nassert solution('6 10') == 14\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 6\") == 30\nassert solution(\"6 1\\n10 10\") == 10\nassert solution(\"6 1\\n10 10\\n1 1\") == -1\nassert solution(\"6 1\\n5 5\") == -1\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 2\\n2 3\\n3 4') == \"3\"\nassert solution('4 2\\n5 6\\n1 2\\n2 3') == \"3\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4\n1 3\n2 5\n3 4\n5 6''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1') == '1'\nassert solution('10 3\\n1 1 1 1 1 1 1 1 1 1 1') == '7'\nassert solution('10 4\\n1 1 1 1 1 1 1 1 1 1 1') == '7'\nassert solution('4 1\\n1 1 1 1') == '-1'\nassert solution('4 1\\n1 1 1 1') == '-1'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\nimport math\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0\\n1 1\\n2 2\\n3 3\\n5 5\\n6 6\\n7 7\\n9 9\") == \"5\\n5\\n3\\n3\\n5\"\nassert solution(\"1 0\\n1 1\\n2 2\\n3 3\\n5 5\\n6 6\\n7 7\\n9 9\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\") == \"5\\n3\\n2\\n2\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 5') == '5'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"4 2\") == \"7\"\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 3\\n\") == \"5\"\n\"\"\"\n\nfrom itertools import count"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\") == \"6\"\nassert solution(\"2 15\") == \"15\"\nassert solution(\"2 20\") == \"23\"\nassert solution(\"2 50\") == \"51\"\nassert solution(\"2 100\") == \"102\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 6 8\") == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 3 7 7 8\n''') == '1'\nassert solution('''3\n5 4 7 8\n''') == '2'\nassert solution('''5\n2 3 4 5 1\n''') == '1'\nassert solution('''5\n9 3 4 5 1\n''') == '2'\nassert solution('''5\n8 1 6 1 9\n''') == '1'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n7 6 8'\n) == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 6 8') == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 7 6\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n7 6 8\\n') == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 6 8\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 4\\n1 3 5') == '1'\nassert solution('2 3 4\\n4 1 3') == '1'\nassert solution('2 3 4\\n3 1 4') == '1'\nassert solution('2 3 4\\n2 4 1') == '1'\nassert solution('2 3 4\\n2 1 4') == '1'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6 8') == '4'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 0') == '1'\nassert solution('1 0 1 1') == '1'\nassert solution('1 0 1 1 0') == '1'\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\nassert solution(\"2 3 1\") == \"1 2 3\"\n\nassert solution(\"5 5 6 2\") == \"6 5 2\"\n\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"5 5 6 2\"))\n\"\"\"\n\nn = int(input())\nx = input().split(\" \")\n\nfor i in range(n):\n    x[i] = int(x[i])\n\ny = sorted(x)\n\nfor i in y:\n    print(i)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3\\n2 3 1\") == \"3 1 2\"\n\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\nprint('Success')\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 3 2'\nassert solution('1 2 3 4') == '1 4 2 3'\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\nn = int(input())\nrecord = list(map(int, input().split()))\nprint(*record)\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\\n2 3 1\"\n) == \"3 1 2\"\nprint(solution(\"3\\n2 3 1\"))\n\n-----\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3 1 2'\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n\nN = input()\nA = input().split()\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('4 3 1') == '0'\nassert solution('5 8 25') == '8'\nassert solution('3 1 2') == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == '9'\nprint(solution(\"10 7 100\"))\n\n----------------------"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == '9'\n\"\"\"\n\nimport sys\n\nA, B, X = map(int, sys.stdin.readline().split())\n\nresult = 0\n\nfor i in range(1, 100):\n    if X < A * i + B * len(str(i)):\n        break\n    result = i\n\nprint(result)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1234456789 10 3200\") == \"200\"\nassert solution(\"12345 67 8 9\") == \"0\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = map(int, stdin.split())\n\nans = 0\nfor n in range(1, 10 ** 9 + 1):\n    if A * n + B * len(str(n)) <= X:\n        ans = max(ans, n)"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"10 7 100\"\n) == \"9\"\n\"\"\"\n\n\"\"\"\nYou are a huge baseball fan. You decide to call the MLB (Major League Baseball) and ask around for some more statistics on the height of the main players. They pass along data on more than a thousand players, which is stored as a regular Python list: height_in. The height is expressed in inches. Can you make a numpy array out of it and convert the units to meters?\n\nheight_in is already available and the numpy package is loaded, so you can start straight away (Source: stat.ucla.edu).\n\nInstructions\n100 XP\nCreate a numpy array from height_in. Name this new array np_height_in.\nPrint np_height_in.\nMultiply np_height_in with 0.0254 to convert all height measurements from inches to meters. Store the new values in a new array, np_height_m.\nPrint out np_height_m and check if the output makes sense.\n\n------------------------------------------------------------\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\"\"\"\n\nfrom sys import stdin\n\nN, K = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\n\nh.sort()\n\ncount = 0\n\nfor i in range(N):\n    if h[i] >= K:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.split()]\nh = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n1\\n2\\n3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n'''\n\nn,k = map(int, input().split())\n\narr = list(map(int, input().split()))\ncount = 0\nfor i in arr:\n    if i >= k:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\\n4 6\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nprint(solution(\"4 1\\n5 4 2 1\"))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"10 1\\n5 5 5 5 5 5 5 5 5 5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\n\"\"\"\nfrom numpy import array"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import Counter\n\nfrom io import StringIO\n\nfrom unittest.mock import patch"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"4 1\n5 4 2 1\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"4 1\n3 3 3 3\"\"\") == \"No\"\n\nassert solution(\n\"\"\"1 1\n1\"\"\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"No\"\nassert solution(\"2 2\\n1 1\") == \"Yes\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"Yes\"\nassert solution(\"4 1\\n1 2 3 4\") == \"No\"\nassert solution(\"4 1\\n1 2 3 4\\n1 2 3 4\") == \"Yes\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('11\\n1') == '1'\nassert solution('11\\n1\\n') == '1'"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".#\\n###\\n###\\n#.\") == 5\nassert solution(\".#\\n###\\n###\\n#.\") == 5\nassert solution(\".#\\n#.\") == 1\nassert solution(\".#\\n#.\") == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3 2\n..#\n###\n''') == '5'\nassert solution('''3 3 2\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\nassert solution('2 2 2\\n..#\\n###') == '1'\nassert solution('1 1 1\\n..#\\n###') == '0'\nassert solution('2 3 1\\n..#\\n###') == '3'\nassert solution('2 3 0\\n..#\\n###') == '2'\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3 2\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == 2\nassert solution('2020 2041') == 3\n\"\"\"\n\nimport sys\nimport unittest"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2020 2040') == 2\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('  ') == ''\nassert solution('2020 2040') == 2\nassert solution('2020 20 41') == 4\nassert solution('2020 20 40') == 2\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2 1') == '2'\nassert solution('2 2') == '1'\nassert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2020 2040') == '2'\n\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2020 2040\") == 2\n\n\"\"\"\n\nL, R = map(int, stdin.readline().strip().split())\nans = 0\nfor i in range(L, R + 1):\n    for j in range(i + 1, R + 1):\n        ans = min(ans, (i * j) % 2019)\nprint(ans)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder1\") == \"WA\"\nassert solution(\"AtCoder2\") == \"AC\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"AC\"\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\nassert solution(\"AtCODER\") == \"AC\"\nassert solution(\"ATcoder\") == \"WA\"\nassert solution(\"AtcODER\") == \"AC\"\n\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'AC'\nassert solution('A') == 'WA'\nassert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'WA'\nassert solution('AAtCoder') == 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'AC'\nassert solution('AtCodE') == 'AC'\nassert solution('Atcoder') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder2\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'AC'\nassert solution('AtCoder') == 'AC'\nassert solution('AtCoder_') == 'WA'\nassert solution('AAtCoder') == 'WA'\nassert solution('Atcoder') == 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('aTCoRd') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1214) == \"2\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1214') == '2'\n\nassert solution('122334') == '3'\n\nassert solution('12345') == '5'\n\nassert solution('1235') == '5'\n\nassert solution('123456') == '6'"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1214') == '2'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1214') == '2'\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"21\") == \"1\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"987654321\") == \"0\"\nassert solution(\"1233\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1324) == '2'\n\n----\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"3\"\nassert solution(\"1214\") == \"2\"\nassert solution(\"12345\") == \"5\"\nassert solution(\"12131415\") == \"5\"\nassert solution(\"1214\") == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1214') == '2'\nassert solution('1324') == '2'\nassert solution('12') == '1'\nassert solution('123') == '3'\nassert solution('34') == '4'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == \"YES\"\nassert solution(test_input_2) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 2 3 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('2 1') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('1 3') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\n\"\"\"\n\nN = int(input().strip())\nnumbers = [int(x) for x in input().strip().split(' ')]\n\nnumbers = sorted(numbers)\n\nfor i in range(len(numbers)):\n    if numbers[i]!= i+1:\n        print('NO')\n        break\nelse:\n    print('YES')"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1 2 3\") == \"YES\"\nassert solution(\"5 2 3 4 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('12') == 'YES'\nassert solution('1221') == 'NO'\nassert solution('1112') == 'YES'\nassert solution('1231') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n\nN = int(input())\n\narr = list(map(int, input().split(\" \")))\n\ncount = 0\n\nfor i in range(N):\n    for j in range(i+1, N):\n        if arr[i] > arr[j]:\n            count += 1"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('201920181') == 4\n\"\"\"\nimport math"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\nassert solution(\"90\") == 0\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2 3\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nprint(\"Success\")\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n2 4 7 11 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3\n13 37 39\n1 2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4\n0 0 0 0\n1 2 3 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"3\n1 2 -1\n-6 -12 6\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 7 11 3\\n1 2 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a1, b1) == e1\nassert solution(a2, b2) == e2\nassert solution(a3, b3) == e3\nassert solution(a4, b4) == e4\n\na, b = [int(x) for x in stdin.split('\\n')]"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nassert solution(solution.test_cases[1]) == solution.test_cases[2]\nassert solution(solution.test_cases[2]) == solution.test_cases[3]\nassert solution(solution.test_cases[3]) == solution.test_cases[4]\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2 4 7 11 3\") == \"2\"\n\n\"\"\"\n\nfrom math import ceil\n\n\"\"\"\n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0434\u0432\u0430 \u0441\u043b\u0443\u0447\u0430\u044f:\n    1. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u0442.\u0435. \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0443\u043c\u043c\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e, \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 [1, 2, 3, 4, 5], \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u043c -7 (1+2+3+4+5) = -1.\n    2. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u0442.\u0435. \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0443\u043c\u043c\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e, \u043d\u0435 \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 [1, 2, 3, 4, 5], \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u043c -7 (2+3+4+5) = 0.\n    \u0418\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u043d\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439, \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e\u0439 \u0432\u044b\u0448\u0435 \u043f\u043e \u0434\u0432\u0443\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c. \u0412\u0441\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n    \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u0438 \u043d\u0430 \u0441\u0432\u043e\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u0435.\n    \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0434\u0430\u0439\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6\\n') == '3'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == 2\n\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == 0\n\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == 3\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == '5'\nassert solution(\"dodivthree\") == '5'\nassert solution(\"bambarbia\") == '0'\nassert solution(\"hellocode\") == '10'\nassert solution(\"code??????\") == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\\ndodivthree\\n\") == \"5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\"\nassert solution(\"bambarbia\\nhellocode\\n\") == \"0\\n\"\nassert solution(\"abaca?b\\nzabbbcc\\n\") == \"5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n\"\nassert solution(\"code??????\\n??????test\\n\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\\n\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.max_pair_count = 0\n        self.left_boots_count = 0\n        self.right_boots_count = 0\n        self.compatibilities = []\n        self.left_boots = []\n        self.right_boots = []\n        self.left_right_dict = dict()\n        self.right_left_dict = dict()\n\n    def solution(self, stdin: str) -> None:\n        self.get_data(stdin)\n        self.create_compatibilities_dictionary()\n        self.iterate_through_all_compatible_combinations()\n        print(self.max_pair_count)\n        self.print_result()\n\n    def get_data(self, stdin: str) -> None:\n        self.left_boots_count, self.right_boots_count = [\n            int(x) for x in stdin.strip().split(\"\\n\")[0].split()\n        ]\n        self.left_boots = stdin.strip().split(\"\\n\")[1].split()\n        self.right_boots = stdin.strip().split(\"\\n\")[2].split()\n\n    def create_compatibilities_dictionary(self) -> None:\n        self.left_right_dict = {}\n        for left_boot in self.left_boots:\n            self.left_right_dict.setdefault(left_boot, {})\n\n            for right_boot in self.right_boots:\n                self.left_right_dict[left_boot].setdefault(right_boot, 0)\n                self.left_right_dict[left_boot][right_boot] += 1\n\n        self.right_left_dict = {}\n        for right_boot in self.right_boots:\n            self.right_left_dict.setdefault(right_boot, {})\n\n            for left_boot in self.left_boots:\n                self.right_left_dict[right_boot].setdefault(left_boot, 0)\n                self.right_left_dict[right_boot][left_boot] += 1\n\n    def iterate_through_all_compatible_combinations(self) -> None:\n        for left_boot in self.left_boots:\n            for right_boot in self.right_boots:\n                if self.check_if_compatible(left_boot, right_boot):\n                    if left_boot in self.left_right_dict and right_boot in self.left_right_dict[left_boot]:\n                        self.count_compatible_left_right_combination()\n                    elif right_boot in self.right_left_dict and left_boot in self.right_left_dict[right_boot]:\n                        self.count_compatible_right_left_combination()\n\n    def count_compatible_left_right_combination(self) -> None:\n        self.max_pair_count += 1\n        self.compatibilities.append((self.left_boots.index(left_boot), self.right_boots.index(right_boot)))\n\n    def count_compatible_right_left_combination(self) -> None:\n        self.max_pair_count += 1\n        self.compatibilities.append((self.right_boots.index(right_boot), self.left_boots.index(left_boot)))\n\n    def check_if_compatible(self, left_boot: str, right_boot: str) -> bool:\n        if left_boot == right_boot or left_boot == \"?\":\n            return True\n        elif right_boot == \"?\":\n            return left_boot!= \"?\"\n        else:\n            return False\n\n    def print_result(self) -> None:\n        print(self.max_pair_count)\n        self.print_pairs()\n\n    def print_pairs(self) -> None:\n        for compat_pair in self.compatibilities:\n            print(compat_pair[0] + 1, compat_pair[1] + 1)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"abaca?\") == 5\nassert solution(\"zabbbcc\") == 5\nassert solution(\"bambarbia\") == 0\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 0\nassert solution('codeforces') == 5\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\nassert solution('bambarbia') == '10'\nassert solution('code??????') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == '7'\nassert solution('dodivthree') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '0'\nassert solution('cabbage') == '1'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 5\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"\n\nimport itertools"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7\\n2 3\\n4 5'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4\\n1 1\\n2 2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5\\n'\nprint('Test passed')\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == 3\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nA = list(map(int, input().split()))\nA.sort()\n\ncnt = 0\nfor i in range(len(A)):\n    for j in range(i, len(A)):\n        if sum(A[i:j+1]) == 0:\n            cnt += 1\nprint(cnt)"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4 1 1 1') == '4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3''') == '3\nassert solution('''7\n4 1 2 2 1 5 3''') == '3\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '2\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '2\nassert solution('''4\n1 1 1 1''') == '4\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"4\\n5 4 3 2 1\") == \"4\\n4 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\"\"\"\nimport collections\nimport itertools\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 78 4 10\\n\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n2 78 4 10\") == \"7\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\\n\") == 12\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n2 4\\n1\") == 7\nassert solution(\"4 2\\n78 4 10\\n\") == 12\nassert solution(\"4 2\\n2 78 4 10\\n\") == 0\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == 0\nassert solution(\"2 1\\n1\\n1\") == 1\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('5 3\\n3 7 19 3 3') == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == '7'\nassert solution(\"4 2\\n2 78 4 10\") == '12'\nassert solution(\"5 2\\n3 7 19 3 3\") == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 5') == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 5') == '9'\nassert solution('3\\n2 5') == '9'\nassert solution('4\\n2 5') == '9'\n\n-----\n2\n0 1\n\n-----\n3\n0 0 1\n\n-----\n4\n0 0 1\n\n-----\n5\n0 0 1\n\n-----\n6\n0 0 1\n\n-----\n7\n0 0 1\n\n-----\n8\n0 0 1\n\n-----\n9\n0 0 1\n\n-----\n10\n0 0 1\n\n-----\n11\n0 0 1\n\n-----\n12\n0 0 1\n\n-----\n13\n0 0 1\n\n-----\n14\n0 0 1\n\n-----\n15\n0 0 1\n\n-----\n16\n0 0 1\n\n-----\n17\n0 0 1\n\n-----\n18\n0 0 1\n\n-----\n19\n0 0 1\n\n-----\n20\n0 0 1\n\n-----\n21\n0 0 1\n\n-----\n22\n0 0 1\n\n-----\n23\n0 0 1\n\n-----\n24\n0 0 1\n\n-----\n25\n0 0 1\n\n-----\n26\n0 0 1\n\n-----\n27\n0 0 1\n\n-----\n28\n0 0 1\n\n-----\n29\n0 0 1\n\n-----\n30\n0 0 1\n\n-----\n31\n0 0 1\n\n-----\n32\n0 0 1\n\n-----\n33\n0 0 1\n\n-----\n34\n0 0 1\n\n-----\n35\n0 0 1\n\n-----\n36\n0 0 1\n\n-----\n37\n0 0 1\n\n-----\n38\n0 0 1\n\n-----\n39\n0 0 1\n\n-----\n40\n0 0 1\n\n-----\n41\n0 0 1\n\n-----\n42\n0 0 1\n\n-----\n43\n0 0 1\n\n-----\n44\n0 0 1\n\n-----\n45\n0 0 1\n\n-----\n46\n0 0 1\n\n-----\n47\n0 0 1\n\n-----\n48\n0 0 1\n\n-----\n49\n0 0 1\n\n-----\n50\n0 0 1\n\n-----\n51\n0 0 1\n\n-----\n52\n0 0 1\n\n-----\n53\n0 0 1\n\n-----\n54\n0 0 1\n\n-----\n55\n0 0 1\n\n-----\n56\n0 0 1\n\n-----\n57\n0 0 1\n\n-----\n58\n0 0 1\n\n-----\n59\n0 0 1\n\n-----\n60\n0 0 1\n\n-----\n61\n0 0 1\n\n-----\n62\n0 0 1\n\n-----\n63\n0 0 1\n\n-----\n64\n0 0 1\n\n-----\n65\n0 0 1\n\n-----\n66\n0 0 1\n\n-----\n67\n0 0 1\n\n-----\n68\n0 0 1\n\n-----\n69\n0 0 1\n\n-----\n70\n0 0 1\n\n-----\n71\n0 0 1\n\n-----\n72\n0 0 1\n\n-----\n73\n0 0 1\n\n-----\n74\n0 0 1\n\n-----\n75\n0 0 1\n\n-----\n76\n0 0 1\n\n-----\n77\n0 0 1\n\n-----\n78\n0 0 1\n\n-----\n79\n0 0 1\n\n-----\n80\n0 0 1\n\n-----\n81\n0 0 1\n\n-----\n82\n0 0 1\n\n-----\n83\n0 0 1\n\n-----\n84\n0 0 1\n\n-----\n85\n0 0 1\n\n-----\n86\n0 0 1\n\n-----\n87\n0 0 1\n\n-----\n88\n0 0 1\n\n-----\n89\n0 0 1\n\n-----\n90\n0 0 1\n\n-----\n91\n0 0 1\n\n-----\n92\n0 0 1\n\n-----\n93\n0 0 1\n\n-----\n94\n0 0 1\n\n-----\n95\n0 0 1\n\n-----\n96\n0 0 1\n\n-----\n97\n0 0 1\n\n-----\n98\n0 0 1\n\n-----\n99\n0 0 1\n\n-----\n100\n0 0 1\n\n-----\n101\n0 0 1\n\n-----\n102\n0 0 1\n\n-----\n103\n0 0 1\n\n-----\n104\n0 0 1\n\n-----\n105\n0 0 1\n\n-----\n106\n0 0 1\n\n-----\n107\n0 0 1\n\n-----\n108\n0 0 1\n\n-----\n109\n0 0 1\n\n-----\n110\n0 0 1\n\n-----\n111\n0 0 1\n\n-----\n112\n0 0 1\n\n-----\n113\n0 0 1\n\n-----\n114\n0 0 1\n\n-----\n115\n0 0 1\n\n-----\n116\n0 0 1\n\n-----\n117\n0 0 1\n\n-----\n118\n0 0 1\n\n-----\n119\n0 0 1\n\n-----\n120\n0 0 1\n\n-----\n121\n0 0 1\n\n-----\n122\n0 0 1\n\n-----\n123\n0 0 1\n\n-----\n124\n0 0 1\n\n-----\n125\n0 0 1\n\n-----\n126\n0 0 1\n\n-----\n127\n0 0 1\n\n-----\n128\n0 0 1\n\n-----\n129\n0 0 1\n\n-----\n130\n0 0 1\n\n-----\n131\n0 0 1\n\n-----\n132\n0 0 1\n\n-----\n133\n0 0 1\n\n-----\n134\n0 0 1\n\n-----\n135\n0 0 1\n\n-----\n136\n0 0 1\n\n-----\n137\n0 0 1\n\n-----\n138\n0 0 1\n\n-----\n139\n0 0 1\n\n-----\n140\n0 0 1\n\n-----\n141\n0 0 1\n\n-----\n142\n0 0 1\n\n-----\n143\n0 0 1\n\n-----\n144\n0 0 1\n\n-----\n145\n0 0 1\n\n-----\n146\n0 0 1\n\n-----\n147\n0 0 1\n\n-----\n148\n0 0 1\n\n-----\n149\n0 0 1\n\n-----\n150\n0 0 1\n\n-----\n151\n0 0 1\n\n-----\n152\n0 0 1\n\n-----\n153\n0 0 1\n\n-----\n154\n0 0 1\n\n-----\n155\n0 0 1\n\n-----\n156\n0 0 1\n\n-----\n157\n0 0 1\n\n-----\n158\n0 0 1\n\n-----\n159\n0 0 1\n\n-----\n160\n0 0 1\n\n-----\n161\n0 0 1\n\n-----\n162\n0 0 1\n\n-----\n163\n0 0 1\n\n-----\n164\n0 0 1\n\n-----\n165\n0 0 1\n\n-----\n166\n0 0 1\n\n-----\n167\n0 0 1\n\n-----\n168\n0 0 1\n\n-----\n169\n0 0 1\n\n-----\n170\n0 0 1\n\n-----\n171\n0 0 1\n\n-----\n172\n0 0 1\n\n-----\n173\n0 0 1\n\n-----\n174\n0 0 1\n\n-----\n175\n0 0 1\n\n-----\n176\n0 0 1\n\n-----\n177\n0 0 1\n\n-----\n178\n0 0 1\n\n-----\n179\n0 0 1\n\n-----\n180\n0 0 1\n\n-----\n181\n0 0 1\n\n-----\n182\n0 0 1\n\n-----\n183\n0 0 1\n\n-----\n184\n0 0 1\n\n-----\n185\n0 0 1\n\n-----\n186\n0 0 1\n\n-----\n187\n0 0 1\n\n-----\n188\n0 0 1\n\n-----\n189\n0 0 1\n\n-----\n190\n0 0 1\n\n-----\n191\n0 0 1\n\n-----\n192\n0 0 1\n\n-----\n193\n0 0 1\n\n-----\n194\n0 0 1\n\n-----\n195\n0 0 1\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 5') == '9'\nassert solution('4\\n1 1 1 1') == '4'\nassert solution('3\\n0 1 2') == '5'\n\n\"\"\"\n\n\n\"\"\"\nAssume that array A has N elements. For each i from 1 to N - 1, check if A[i] can be replaced by the maximum value among its neighbors (inclusive). If so, then we will have to make the change. If this is not possible, the maximum will be unchanged. So, at the end, the maximum value of A is the value of the last element in the array.\n\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 4 2 7\") == \"14\"\n\"\"\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n\nimport numpy as np\nimport re\n\nn = int(stdin.readline())\narr = np.array([[int(x) for x in re.findall(r'\\-?\\d+', stdin.readline())] for _ in range(n)])\nprint(max(np.amax(arr, axis=1)))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == 9\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 4\") == \"10\"\nassert solution(\"4\\n1 3 4\") == \"9\"\n\n\"\"\"\n\nfrom typing import Iterator, List, Tuple, Dict"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nassert solution(\"4\\n1 5 4 2\") == \"10\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == 110\n\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"\n\n\"\"\"\nInput\n3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n\nOutput\n110\n\"\"\"\nimport sys\nimport itertools\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nimport sys\n\nn, m, q = [int(i) for i in sys.stdin.readline().split()]\n\na, b, c, d = [], [], [], []\n\nfor _ in range(q):\n    a_, b_, c_, d_ = [int(i) for i in sys.stdin.readline().split()]\n    a.append(a_)\n    b.append(b_)\n    c.append(c_)\n    d.append(d_)"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"\n\nn, m, q = map(int, stdin.readline().split())\nscores = [0] * n\nfor _ in range(q):\n    a, b, c, d = map(int, stdin.readline().split())\n    scores[b - 1] += d\n    if a!= b:\n        scores[a - 1] -= d\nprint(max(scores))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\nprint('Test finished.')\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"\n\nn, m, q = map(int, input().split())\n\nnums = []\nfor _ in range(n):\n    nums.append(tuple(map(int, input().split())))\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    count = 0\n    for i in range(n):\n        if nums[i][0] <= a <= nums[i][1] and nums[i][0] <= b <= nums[i][1] and nums[i][0] - a == c and nums[i][1] - nums[i][0] == d:\n            count += d\n    print(count)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 3\\n4 3 1 100\\n4 1 2 10\\n5 1 2 10\\n3 1 1 10\\n4 3 3 10\\n3 3 3 10\\n5 2 3 10\\n3 3 3 10\\n5 2 3 10\\n3 3 3 10') == '110'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 4\\n1 3 4 2 3\\n5 4 3 3\\n4 5 4 3\\n1 4 3 5\\n2 5 2 4\\n1 5 1 4\") == \"110\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nA = sorted(list(map(int, sys.stdin.readline().split())))\n\nmax_abs = 0\nfor i in range(N - 1):\n    if abs(A[i] - A[i + 1]) > max_abs:\n        max_abs = abs(A[i] - A[i + 1])\n\nprint(max_abs)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n\nn = int(stdin.readline().strip())\nA = list(map(int, stdin.readline().strip().split()))\n\nm = max(A) - min(A)\n\nprint(m)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4 6 3') == '5'\nassert solution('2 4 5 6 7') == '1'\nassert solution('3 4 5 6 7') == '0'\nassert solution('2 4 5 9 8 9') == '2'\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\n\"\"\"\nSteps:\n    1. Read input data\n    2. Find max abs diff\n    3. Print max abs diff\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.276142374'\nassert solution(\"3\\n1 2\\n2 3\") == '1.41421356'\nassert solution(\"3\\n1 3\\n2 1\") == '1.41421356'\nassert solution(\"3\\n0 0\\n0 0\") == '0.0'\nassert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == '1.0'\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport sys\nimport math\nimport bisect"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\n\n-----\n\n'''\n\nfrom typing import List, Tuple\n\nfrom utils import timeit\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == '2.2761423749'\nassert abs(solution('3\\n0 0\\n1 0\\n0 1') - 2.2761423749) <= 10**(-6)\nassert abs(solution('2\\n-3 -5\\n-3 3') - 3.5) <= 10**(-6)\nassert abs(solution('3\\n-1 0\\n-1 1') - 1) <= 10**(-6)\nassert abs(solution('2\\n1 2\\n-1 3') - 2) <= 10**(-6)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"12 12\") == \"0\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\nassert solution('2 1') == '1'"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"6 7\") == \"0\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_str) == expected_result\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"12 4\"\n) == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4') == 4\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 4') == 4\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solve(self, a, b):\n        return math.floor(a/2 - b/2)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '3'\n\n'''"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"12 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''12 4''') == '4'\nassert solution('''10 10''') == '0'\nassert solution('''23 11''') == '23'\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(samples[0]) == samples[1]\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nfor i in range(1, N + 1):\n    if (N // i) % 10 >= (i % 10):\n        continue\n    print((N // i) % 10, i % 10)\n    break\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nN = int(stdin.readline())\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '3'\nprint(solution(input()))"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"10000\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"100\"\nassert solution(\"4193\") == \"1000\"\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nN = int(sys.stdin.readline())\n\nmin_num = math.inf\nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        if min_num > len(str(a)) + len(str(b)):\n            min_num = len(str(a)) + len(str(b))\nprint(min_num)\n\"\"\"\n\nN = int(input())\n\nmin_num = math.inf\nfor a in range(1, N + 1):\n    for b in range(1, N + 1):\n        if min_num > len(str(a)) + len(str(b)):\n            min_num = len(str(a)) + len(str(b))\n\nprint(min_num)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000') == 3\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n3 1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n3 1 2 3\\n2 3 2\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == 1\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == 1\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\\n\") == \"1\"\n\n-----Time Complexity-----\nO(N * M)\n\n-----Space Complexity-----\nO(N * M)\n\n-----Bottom Line-----\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == 1\n'''\n\nimport sys\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n2 1 3\\n2 3 2') == '1'\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2 1 3 1\n3 1 2 3 1\n1 3 2 2 1\n3 1 3 1 3\n''') == '4'\n\nassert solution('''2 1\n1 1\n''') == '2'\n\nassert solution('''2 2\n2 1 1\n2 1 1\n''') == '0'\n\n'''\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 5\n1 1 1 1 1\n2 1 1 1 2\n3 1 1 1 3\n4 1 1 1 4\n5 1 1 1 5\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n3 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n5 4\n2 1 3 4 5\n2 1 3 4\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n5 5\n1 2 3 4 5\n1 2 3 4\n\"\"\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(4)) == \"0.5\"\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '0.5'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5'\n\n\"\"\"\n\nimport sys\nimport numpy as np\nimport math\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '0.5'\nassert solution('4') == '0.5'\nassert solution('4') == '0.5'\nassert solution('4') == '0.5'\n\"\"\"\n\nn = input()\nn = int(n)\nimport math\nx = 1/6\nodds = (n * (n + 1) / 2) - (math.floor((n * (n + 1) / 2)))\ny = odds / (n * (n + 1) / 2)\nprint(y)"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"0.5\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '0.5'\nassert solution('3') == '0.3333333333333333'\nassert solution('2') == '0.25'\nassert solution('1') == '0.16666666666666666'\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '0.5'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\nimport sys\n\nassert sys.version_info >= (3, 7)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"7\\n3\\n3 1\\n2 2\\n2 1\\n1 2\\n1 1\\n4\\n1 3\\n2 1\\n3 2\\n2 2\\n\") == \"5\"\n\"\"\"\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n2\\n1\\n2 1\\n1\\n1 1\") == \"2\"\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\nimport collections\n\nclass Person:\n    def __init__(self, n):\n        self.n = n\n        self.statements = dict()\n        self.statements[1] = [0, 0]\n        self.statements[n] = [0, 0]\n\n    def add_statement(self, a, b):\n        self.statements[a][b] += 1\n        if self.statements[a][b] > self.n - 1:\n            return False\n        return True\n\n    def test(self, x, y):\n        return (self.statements[x][1] == 1 and self.statements[x][0] == 1) or \\\n               (self.statements[y][0] == 1 and self.statements[y][1] == 1)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"5\\n3\\n1 1 1\\n2 2\\n1 1 1\\n1 1 1\\n1 1 1\\n2 3\\n\") == \"5\"\nassert solution(\"7\\n3\\n1 1 1\\n2 2\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 3\\n\") == \"7\"\nassert solution(\"7\\n1\\n2 1\\n1\\n1 1\\n1\\n2 3\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('7\\n4\\n6 1\\n4\\n6 2\\n2\\n4\\n6\\n') == '4'\nassert solution('9\\n7\\n8 2\\n6\\n4\\n5\\n7\\n3\\n6\\n9\\n') == '6'\nassert solution('5\\n4\\n6\\n1\\n4\\n2\\n1\\n4\\n') == '4'\nassert solution('5\\n4\\n6\\n1\\n4\\n2\\n1\\n4\\n') == '4'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"5\\n3\\n2 1\\n2 2\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"8\\n3\\n4 3\\n3\\n2 2\\n2 1\\n1 1 1\\n1 1 1\\n2 0 1\\n1 1 0\") == \"3\"\nassert solution(\"8\\n3\\n4 3\\n3\\n2 2\\n2 1\\n1 1 1\\n1 1 1\\n2 0 1\\n1 1 0\") == \"4\"\nassert solution(\"8\\n3\\n4 3\\n3\\n2 2\\n2 1\\n1 1 1\\n1 1 1\\n2 0 1\\n1 1 0\") == \"4\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == expected_output\n\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\"\n\nimport unittest\n\nclass TestTask2(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\"), \"2\")\n\n    def test_case_2(self):\n        self.assertEqual(solution(\"4\\n2\\n3 1\\n1\\n1 1\\n1\\n3 0\\n\"), \"3\")\n\n    def test_case_3(self):\n        self.assertEqual(solution(\"7\\n1\\n2 5\\n1\\n1 1\\n1\\n2 0\\n\"), \"6\")"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\\n1 0\\n2 1\\n:\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def union(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa!= pb:\n            if self.rank[pa] < self.rank[pb]:\n                self.parent[pa] = pb\n            elif self.rank[pb] < self.rank[pa]:\n                self.parent[pb] = pa\n            else:\n                self.parent[pb] = pa\n                self.rank[pa] += 1\n\n    def find(self, a):\n        if a!= self.parent[a]:\n            self.parent[a] = self.find(self.parent[a])\n        return self.parent[a]\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"bananaboat\") == \"bananaboat\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n\nk, string = [int(i) for i in input().split()]\n\nprint(string[:k] + (string[k:] and \"... \"))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\nimport string\nimport collections\nfrom collections import Counter, OrderedDict"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\n'''\nimport re"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('solstice') =='solstice'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('nikoandsolstice') == 'nikoand...'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('kikoyakugoo') == 'kikoo'\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aas'\nassert solution('aaa') == 'aas'\nassert solution('aaaa') == 'aas'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"banana\") == \"bananas\"\nassert solution(\"cat\") == \"cats\"\nassert solution(\"dog\") == \"dogs\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('cat') == 'cats'\nassert solution('dog') == 'dogs'\nassert solution('ant') == 'ants'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'as'\nassert solution('ab') == 'abs'\nassert solution('abc') == 'abcs'\nassert solution('aab') == 'aabs'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('hello') == 'helloes'\n\n\"\"\"\n\nimport unittest\nimport sys\nimport os"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('apple') == 'apples'\nassert solution('fish') == 'fish'\nassert solution('Camel') == 'Camel'\nassert solution('camel') == 'cameles'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apples'\nassert solution('zombie') == 'zombies'\nassert solution('money') =='monies'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('pineapple') == 'pineapples'\nassert solution('takne') == 'taknes'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('3 2\\n1\\n1 3\\n1') == '0'\nassert solution('3 2\\n2\\n1 3\\n2') == '0'\nassert solution('3 2\\n1\\n1 3\\n2') == '1'\n\n------Problem-----\nThe following problem was asked by Snapchat.\n\nGiven a list of possibly overlapping intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n\nIntervals can \"touch\", such as [0, 1] and [1, 2], but they won't be considered overlapping.\n\nFor example, given the intervals (7, 9), (2, 4), (5, 8), return 1 as the last interval can be removed and the first two won't overlap.\n\nThe intervals are not necessarily ordered in any way.\n\n------Solution------\nIt is simply a matter of counting how many of the intervals we have to remove in order to make the rest non-overlapping."
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\nassert solution(\"3 2\\n2\\n1 3\\n3\\n2 1\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_0) == test_output_0\n\n-----\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n2\n1 3\n1\n3\n''') == '1'\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\nassert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n2\n1 3\n1\n3\n''') == '1'\n\nassert solution('''\n4 4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n''') == '0'\n\nassert solution('''\n4 2\n2\n1 4\n1\n3\n''') == '1'\n\nassert solution('''\n4 2\n1\n1\n1\n1\n''') == '0'\n\nassert solution('''\n4 2\n1\n3\n2\n3\n''') == '2'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\nN = int(stdin.readline().rstrip())\nS = stdin.readline().rstrip()\n\nslime_map = {S[0]: 1}\nslimes = 1\nfor c in S[1:]:\n    if c in slime_map:\n        slimes += slime_map[c]\n    slime_map[c] = 1 if c not in slime_map else slime_map[c] + 1\nprint(slimes)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\n\"\"\"\nfrom typing import List\nimport time\nimport random"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\nprint(solution(\"aabbbbaaca\"))\n\nassert solution(\"abbbbbbbbbb\") == \"1\"\nprint(solution(\"abbbbbbbbbb\"))\n\nassert solution(\"aaaaaaa\") == \"1\"\nprint(solution(\"aaaaaaa\"))\n\nassert solution(\"aabbbbbbbbbb\") == \"4\"\nprint(solution(\"aabbbbbbbbbb\"))\n\nassert solution(\"abaaaaab\") == \"3\"\nprint(solution(\"abaaaaab\"))"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abbbbaaca') == '5'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaabbbbbba\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, 2, 4) == 3\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5 2 4') == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nanswer = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] % 2 == 0 and a[j] % 2 == 0:\n            answer += 1\n\nprint(answer)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '1\\n2\\n3\\n4'\nassert solution('3\\n5 2 4') == '2\\n3\\n4\\n5'\nassert solution('3\\n5 2 4\\n6 6 6') == '6\\n3\\n4\\n5'\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5 2 4') == '3'\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na_x2 = [i // 2 for i in a]\na_x3 = [i * 3 for i in a]\na_1x2 = [i * 2 for i in a]\na_1x3 = [i * 3 for i in a]"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n5 2 4''') == '3'\nassert solution('''4\n1 1 1 1''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\n\"\"\"\n\u8ff7\u60d1\u7248\n\nimport sys\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\nimport sys\nfrom math import ceil\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 1 0 3\") == \"3\"\nassert solution(\"1 1 1 3\") == \"3\"\nassert solution(\"0 1 0 3\") == \"3\"\nassert solution(\"1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A, B, C, K) == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\nA, B, C, K = [int(x) for x in stdin.split(\" \")]"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n--------------------------------\n\nThe magic number of a set of distinct positive integers is the smallest positive integer such that the sum of the powers of its members is equal to 1. For example, the magic numbers of the following sets of integers are:\n\n{1, 2, 3} = 3\n{1, 2, 4, 8} = 4\n{1, 3, 5, 7} = 1\nNotice that the sum of the powers of its members is equal to 1.\n\nA magic number set is called a combinatorial number set if it contains at most 12 non-zero elements.\n\nWrite a program that takes as input a number n, and returns the magic number set of the integers from 1 to n, sorted in increasing order.\n\nInput Format\nThe input consists of a single integer n \\geq 1.\n\nConstraints\n - 1 \\leq n \\leq 12 \\times 10^6\n - n is an integer.\n\nOutput Format\nYour program should display the elements of the magic number set of integers from 1 to n in increasing order.\n\nSample Input 0\n1\n\nSample Output 0\n{1, 2, 3}\n\nExplanation 0\nThe magic number of the set of integers from 1 to 3 is 3, since 1 + 2 + 3 = 6.\n\nSample Input 1\n5\n\nSample Output 1\n{1, 2, 4, 5, 8}\n\nExplanation 1\nThe magic number of the set of integers from 1 to 5 is 4, since 1 + 2 + 4 + 5 + 8 = 21.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1 1 3''') == 2\nassert solution('''1 1 1 1''') == 1\nassert solution('''1 1 1 1 1''') == 0\nassert solution('''1 1 1 1 1 1 1 1 1 1 1''') == 0\nassert solution
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('4 1 1 2') == '4'\nassert solution('1 2 2 1') == '2'\nassert solution('1 0 2 1') == '1'\nassert solution('1 0 2 1') == '1'\n\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c\n- \uac01 \uce74\ub4dc\uac00 \ucd1d 3\uc7a5\uc774 \ub4e4\uc5b4\uc788\ub2e4.\n- \uac01 \uce74\ub4dc\ub294 \uc815\uc218\uac12\uc774 \uc801\ud600\uc788\uace0, \uc774 \uc815\uc218\uac12\uc774 \ub098\ud0c0\ub0b4\ub294 \uc22b\uc790\ub97c \uce74\ub4dc\uc5d0 \uc801\uc740 \ubc29\ubc95\uc774 \uc788\ub2e4.\n- 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\uc911 \ud558\ub098\uc774\ub2e4.\n- 0\uc740 0\uc73c\ub85c, 1\uc740 1\ub85c, 2\ub294 2\ub85c, 3\uc740 3\uc73c\ub85c, 4\ub294 4\ub85c, 5\ub294 5\uc73c\ub85c, 6\uc740 6\uc73c\ub85c, 7\uc740 7\uc73c\ub85c, 8\uc740 8\ub85c, 9\uc740 9\ub85c \uc801\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4.\n\n\uc785\ub825\n- \uccab\uc9f8 \uc904\uc5d0 \uce74\ub4dc\uc758 \ucd1d \uac1c\uc218 A, B, C\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \\leq A, B, C \\leq 9)\n- \ub458\uc9f8 \uc904\uc5d0 A\uc7a5, B\uc7a5, C\uc7a5\uc758 \ucd1d \ud569\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. (0 \\leq A+B+C \\leq 9)\n- \uc14b\uc9f8 \uc904\uc5d0 K\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (0 \\leq K \\leq A+B+C)\n\n\ucd9c\ub825\n- \uccab\uc9f8 \uc904\uc5d0 \uce74\ub4dc\ub97c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc5d0\ub294 K\uc640 \uc77c\uce58\ud558\ub294 \uc815\uc218\uac12\uc744 \ucd9c\ub825\ud558\uace0, \uc544\ub2d0 \uacbd\uc6b0\uc5d0\ub294 -1\uc744 \ucd9c\ub825\ud558\ub77c.\n\"\"\"\n\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().strip().split())\nS = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\n\nresult = []\nfor i in range(A):\n    result.append(0)\nfor i in range(B):\n    result.append(1)\nfor i in range(C):\n    result.append(2)\n\nprint(result)\nprint(sorted(result))\nprint(result[K-1])\n\n\"\"\"\n\uc815\ud655\uc131  \ud14c\uc2a4\ud2b8\n\ud14c\uc2a4\ud2b8 1 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 2 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 3 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 4 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 5 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 6 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 7 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 8 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 9 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 10 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 11 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 12 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 13 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 14 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 15 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 16 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 17 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 18 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 19 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 20 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 21 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 22 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 23 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 24 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 25 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 26 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 27 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 28 \u3009    \ud1b5\uacfc (0.02ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 29 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 30 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 31 \u3009"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"7 4\") == \"No\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('5 5') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 6\") == \"Yes\"\nassert solution(\"1 4\") == \"No\"\nassert solution(\"2 5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read().splitlines()\n\nassert len(stdin) == 1\n\nx, y = [int(x) for x in stdin[0].split(\" \")]\n\nassert 1 <= x <= 100\nassert 1 <= y <= 100"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n2 3\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 3\\n1 2\\n2 4\\n3 4\") == \"2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3') == '2'\n\"\"\"\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\nedges = defaultdict(list)\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    edges[a].append(b)\n    edges[b].append(a)\n\nvisited = set()\nres = 0"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == 2\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 3\") == \"2\"\nassert solution(\"1 2\\n1 3\\n2 3\") == \"2\"\n\n\"\"\"\n\nn, m = map(int, input().split())\nvisited = {}\ngraph = {}\n\nfor i in range(n):\n    graph[i] = []\n    visited[i] = 0\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n4 3\\n3 1\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n4 6\\n5 1\\n5 4\\n3 2\\n3 4\\n6 2\") == \"3\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n3 1\\n3 2\") == \"0\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n5 5\\n4 3\\n3 1\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n4 6\\n5 1\\n5 4\\n3 2\\n3 4\\n6 2\") == \"5\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == 2\n\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == expected_return\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n3 4\\n4 1\\n5 4\\n1 2\\n1 3\\n3 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\nprint(solution(\"5 2\\n\"))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 3\\n3 4\\n4 5\\n5 6\\n') == '18'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5 6\") == \"3+4+5+6\"\n\"\"\"\n\nfrom typing import List\n\nN, L = [int(i) for i in stdin.split()]\nlst = [int(i) for i in stdin.split()][1:]\n\ndiff = []\nfor i in range(N - 1):\n    diff.append(abs(lst[i] - lst[i + 1]))\n\nprint(str(sum(lst)) + \" \" + str(min(diff)))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 3 4 5 6\") == \"18\"\nprint(solution(\"5 2\\n2 3 4 5 6\"))"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n') == '18'\n\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n3 4 5 6 7') == '18'"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"15\"\nassert solution(\"5 3\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''15\n''') == '60'\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(15) == 60\nprint(solution(15))"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15') == '60'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n\n\"\"\"\nBest solution"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\\n\") == \"60\\n\"\nassert solution(\"10\\n\") == \"55\\n\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"16\"\nassert solution(\"15\") == \"60\"\n\n\"\"\"\n\nimport sys\nfrom math import log"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('15') == '60'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"60\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-10\") == \"0\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == 60\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\n\"\"\"\n\nfrom typing import List\n\nX, N = [int(s) for s in stdin.split()]\nP = [int(s) for s in stdin.splitlines()[1:]]\n\nP.sort()\n\nL = [p for p in P if p < X]\nU = [p for p in P if p > X]"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 10 6 5') == '8'\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nA, B = [int(x) for x in sys.stdin.readline().split()]\n\nL = [int(x) for x in sys.stdin.readline().split()]\n\nL.append(B)\nL.sort()\n\nx = []\n\nfor i in range(len(L) - 1):\n    x.append(L[i + 1] - L[i])\n\nx.sort()\n\nfor i in range(len(x)):\n    if x[i] == 0:\n        print(L[i])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"6 5\n4 7 10 6 5\"\"\"\n) == '8'\nprint('Test succeeded')"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\nassert solution(\"6 5\") == \"6\"\nassert solution(\"8 4 7 10 6 5\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8 5\n4 7 10 6 5''') == '8'\nassert solution('''8 5\n4 7 10 6 5''') == '8'\nassert solution('''8 5\n4 7 10 6 5''') == '8'\nassert solution('''8 5\n4 7 10 6 5''') == '8'\n'''"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nx = int(sys.stdin.readline().strip())\nn = int(sys.stdin.readline().strip())\nseq = [int(i) for i in sys.stdin.readline().split()]\n\na = seq[:]\na.sort()\n\nmin_diff = x\nfor i in range(len(a)):\n    if abs(a[i] - x) < min_diff:\n        min_diff = abs(a[i] - x)\n        min_num = a[i]\n\nprint(min_num)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n2 3\") == \"1\"\nassert solution(\"4 5\\n3 3\") == \"2\"\nassert solution(\"2 3\\n1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 1\\n3 3\\n4 4\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''3 2\n2 1''') == '1'\nassert solution(\n'''5 4\n4 3''') == '0'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\nh, w = map(int, sys.stdin.readline().split())\n\ncells_to_remove = rows * h + cols * w\nprint(rows * h - cells_to_remove)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"2 2\\n1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 1') == '1'\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7 5 1 10 3 20\\n') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2 3 7 5 1 10 3 20\") == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"6\"\n\nimport codewars_test as test\n\n@test.describe(\"Fixed Tests\")\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"3\"\n\n\"\"\"\nimport sys\nimport math\n\ninput = sys.stdin.read()\nn, k = map(int, input.split())\n\nnum = list(map(int, input.split()))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 4\\n7 3 5 1 10 3 20\") == '-1'\nassert solution(\"7 4\\n7 5 1 10 3 20\") == '-1'\nassert solution(\"7 4\\n7 5 10 3 20\") == '-1'\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '7 4'\n) == '6'\nassert solution(\n    '7 2'\n) == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1\\n'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1\\n'\n\n'''\n\nimport itertools\nimport functools"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '3'\nassert solution('4 4\\n.*\\n.*\\n.*\\n.*') == '0'\nassert solution('3 4\\n.**\\n.*\\n.*') == '-1'\nassert solution('3 3\\n***\\n.*\\n.*') == '-1'\nassert solution('3 3\\n.***\\n.*\\n.*') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1 1 1\\n1 2 1\\n1 3 1\\n1 4 1\\n1 5 1\\n1 6 1\\n\"\nassert solution(\"1\") == \"1 1 1\\n\"\nassert solution(\"2\") == \"1 1 1\\n2 1 1\\n2 2 1\\n\"\nassert solution(\"3\") == \"1 1 1\\n2 1 1\\n3 1 1\\n\"\nassert solution(\"5\") == \"1 1 1\\n2 1 1\\n3 1 1\\n4 1 1\\n\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"2 2\\n*.*\\n.*.*\") == \"-1\"\nassert solution(\"1 1\\n.*\\n.*\") == \"-1\"\nassert solution(\"2 3\\n*.*\\n**.*\") == \"-1\"\nassert solution(\"3 2\\n***\\n**\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"-1\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\") == \"3\"\nassert solution(\"4 4\\n**\\n.*\\n**\") == \"2 2 1\"\nassert solution(\"4 4\\n..*\\n.*\\n.*\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n') == '-1'\nassert solution('5 5\\n.***\\n.*.\\n.*.\\n*.*\\n.....\\n') == '-1'\nassert solution('5 5\\n.***\\n.*.\\n*.*\\n*.*\\n*..\\n') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\\n2 2 1\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\\n2 2 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\".....\\n...*.\\n*...\\n*...\\n*...\") == \"2\"\nassert solution(\"*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"......\\n..*..\\n...*.\\n....*.\\n......\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '-1\\n'\nassert solution('3 3\\n*.*\\n.*.\\n*.*\\n') == '-1\\n'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n') == '-1\\n'\nassert solution('5 5\\n.*...\\n.*...\\n.*...\\n.*...\\n.....\\n') == '-1\\n'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('good') == '0'\nassert solution('string') =='string'\nassert solution('xyyx') == '2'\nassert solution('aabc') == '2'\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('good') == 0\nassert solution('abc') == 0\nassert solution('aaa') == 0\nassert solution('aabc') == 2\nassert solution('aaaa') == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 1\nassert solution(\"bad\") == 2\nassert solution(\"aa\") == 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"good\") == \"0\"\nassert solution(\"string\") == \"1\"\nassert solution(\"xyyx\") == \"2\"\nassert solution(\"zzz\") == \"0\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 2\nassert solution(\"bad\") == 1\nassert solution(\"aa\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"good\") == \"0\"\nassert solution(\"aabc\") == \"2\"\nassert solution(\"aaa\") == \"3\"\n\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 'abc'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaa'\nassert solution('aaaaa') == 'aaa'\n\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(good) == 0\nassert solution(string) == 2\nassert solution(aabc) == 2\nassert solution(aaa) == 3\n\n\"\"\"\n\nimport sys\n\n_, *string = sys.stdin.readlines()"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aab') == 'a'\nassert solution('abc') == ''\nassert solution('xyxy') == ''\nassert solution('abcd') == ''\nassert solution('abbc') == ''\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaa\") == \"abc\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\"\"\"\nimport itertools\nfrom collections import Counter, defaultdict\nfrom itertools import permutations\nfrom typing import List\n\nfrom solutions.utils.singly_linked_list import Node, build_singly_linked_list, linked_list_to_list\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'YES\\n10100'\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"YES\\n10\"\nassert solution(\"2 2\\n1 1\\n\") == \"NO\"\nassert solution(\"3 1\\n2 3\\n\") == \"YES\\n110\"\nassert solution(\"4 1\\n1 4\\n\") == \"YES\\n100\"\nassert solution(\"6 1\\n1 6\\n\") == \"YES\\n10101\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n3 4\") == \"YES\\n101\"\nassert solution(\"4 3\\n1 3\\n2 1\\n3 4\") == \"NO\\n\"\nassert solution(\"4 5\\n1 5\\n2 1\\n1 4\\n3 1\\n4 2\\n5 2\\n3 3\") == \"NO\\n101011101\"\nassert solution(\"4 5\\n1 5\\n2 1\\n3 1\\n4 2\\n3 4\") == \"YES\\n
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\") == \"YES\\n10100\"\nassert solution(\"4 4\\n1 3\\n2 2\\n1 2\\n2 3\\n\") == \"YES\\n1110\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2\\n2 1\\n1 4\\n3 4\\n6 1') == 'YES\\n10100'\nassert solution('5 3\\n1 4\\n3 1\\n4 2') == 'YES\\n101010'\nassert solution('5 6\\n1 4\\n3 1\\n4 2\\n6 1') == 'NO'\nassert solution('5 3\\n1 4\\n3 1\\n4 2') == 'NO'\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 1\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 3\\n4 1') == 'YES\\n100'\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\"\"\"\nfrom collections import defaultdict, deque\n\n\nclass Graph:\n    def __init__(self, v):\n        self.v = v\n        self.g = defaultdict(list)\n\n    def add_edge(self, v, u):\n        self.g[v].append(u)\n        self.g[u].append(v)\n\n    def get_next_vertices(self, v):\n        return [e for e in self.g[v] if e not in self.visited]\n\n    def dfs(self, v):\n        self.visited.append(v)\n        for w in self.g[v]:\n            if w not in self.visited:\n                self.dfs(w)\n\n    def is_bipartite(self):\n        self.visited = []\n        self.dfs(0)\n\n        self.queue = deque([v for v in range(self.v) if v not in self.visited])\n        while len(self.queue) > 0:\n            v = self.queue.popleft()\n            if v in self.visited:\n                return False\n            self.visited.append(v)\n\n            for w in self.get_next_vertices(v):\n                self.queue.append(w)\n\n        return True\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 4\n1 2\n2 3\n3 1\n1 4\n2 3\n1\n4\"\"\") == 'NO'\nassert solution(\"\"\"4 4\n1 2\n2 3\n1 3\n2 4\n2\n4\"\"\") == 'YES\n1011'\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 1\n4 5\n5 1\n2\n3\"\"\") == 'NO'\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 1\n5 1\n2\n3\"\"\") == 'YES\n1011'\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 1\n1 4\n2\n3\n4\"\"\") == 'NO'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 7\\n1 2\\n5 5\") == \"0\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\\n\"\n\"\"\"\n\nn, m = map(int, input().split())\nl = set()\nfor _ in range(n):\n    a, b = map(int, input().split())\n    l.add(a)\n    l.add(b)\nl = sorted(list(l))\nd = {}\nj = 0\nfor i in l:\n    if i not in d:\n        d[i] = j\n        j += 1\n\nfor _ in range(m):\n    if int(input()) not in d:\n        print(d[int(input())] + 1)\n    else:\n        print(0)\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\\n\") == '2\\n3 4'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == \"2\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == '0'\nassert solution('1 2\\n1 2\\n5 5\\n') == '0'\nassert solution('2 2\\n1 2') == '0'\nassert solution('2 2\\n2 2') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\\n\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n1 2\") == \"0\"\nassert solution(\"2 3\\n1 3\\n3 3\") == \"0\"\nassert solution(\"2 3\\n1 3\\n3 4\") == \"1\"\nassert solution(\"2 2\\n1 2\\n2 2\") == \"0\"\nassert solution(\"2 2\\n2 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == '2\\n3 4'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4 9 2 3) == 2\nprint(\"Passed!\")\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\nprint(solution(\"4 9 2 3\"))\n\n---\n6.4. Write a program that reads an integer and outputs the number of prime numbers that are strictly less than the given integer.\n\n-----Constraints-----\n - 1\\leq n\\leq 10^9\n - n is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n\n5\n\n-----Output-----\nThe number of prime numbers that are strictly less than 5 is 2.\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n\nimport math\n\na, b, c, d = [int(x) for x in stdin.split()]\ncount = 0\nfor i in range(a, b + 1):\n    if math.gcd(i, c) == 1 and math.gcd(i, d) == 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 3 4''') == '1'\nassert solution('''1 9 2 3''') == '2'\nassert solution('''1 9 2 3 6''') == '4'\nassert solution('''1 9 2 3 6 7''') == '6'\nassert solution('''1 9 2 3 6 7 8''') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 9 2 3\") == 2\nassert solution(\"5 9 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n\n\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nprint(solution(\"123456789\"))\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '123456789'\n) == 'Yes'\nassert solution(\n    '12345678'\n) == 'No'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(123456789) == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\nassert solution(3) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('123789') == 'No'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"987654321\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('127') == '4'\n\n------Solution-----\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == '4'\nprint(solution(\"127\"))\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123) == \"4\"\nassert solution(0) == \"0\"\nassert solution(7) == \"4\"\nassert solution(4) == \"2\"\nassert solution(32) == \"5\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('127') == '4'\n'''"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('127') == '4'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('100') == '1'\nassert solution('2') == '1'\nassert solution('5') == '2'\nassert solution('7') == '3'\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"horse\") == \"orse\"\nassert solution(\"trot\") == \"rotr\"\nassert solution(\"pang\") == \"pango\"\nassert solution(\"asdfghjkl\") == \"lkjhgfdsa\"\nassert solution(\"zxcvbnm\") == \"nbcvuza\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('tokyo') == 'kyoto'\nassert solution('nyc') =='syc'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('kyoto') == 'tokyo'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcdef') == 'cdefab'\nassert solution('abcde') == 'deabc'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('python') == 'pythn'\nassert solution('codewars') == 'warsc'\nassert solution('codewars') == 'warsc'\nassert solution('codewars') == 'warsc'\nassert solution('codewars') == 'warsc'\n\n-------------\n- After rotation, they are the same string.\n- If they are not the same string, they are not the same even if we rotate them by another number of times.\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('lax') == 'kax'\nassert solution('kyoto') == 'tokyo'\nassert solution('mami') =='momi'\nassert solution('japan') == 'japan'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cabacc\") == \"1\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == '1'\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc', 'abc') == 1\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('cabaccx') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cabacc\") == \"1\"\nprint(\"Passed!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\n\nA, B, K = input().split()\n\nA = int(A)\nB = int(B)\nK = int(K)"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 12 2\") == \"2\"\nassert solution(\"4 5 2\") == \"1\"\nassert solution(\"8 8 8\") == \"8\"\nassert solution(\"6 12 4\") == \"2\"\nassert solution(\"6 12 6\") == \"6\"\n\n-----\n\nConstraints\n1 <= A, B <= 100\nThere exists a K such that A and B have K divisors.\n\nExamples\nInput: A=8, B=12, K=2\nOutput: 2\n\nInput: A=6, B=12, K=4\nOutput: 4\n\nInput: A=6, B=12, K=6\nOutput: 6\n\nInput: A=6, B=12, K=8\nOutput: 8\n\nInput: A=6, B=12, K=10\nOutput: 12\n\nInput: A=6, B=12, K=12\nOutput: 12"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8 12 2''') == '2'\n\"\"\"\n\n\"\"\"\nfrom sys import stdin\nimport math\n\nA, B, K = map(int, stdin.readline().split())\n\nlower_limit = math.floor(A / B)\nupper_limit = math.floor(B / A)"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 12 2\\n') == '2'\nprint('test passed\\n')\n\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\n\"\"\"\nfrom typing import List\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\nimport math\n\na, b, k = list(map(int, input().split()))\n\nt = math.floor(math.sqrt(b / a))"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 9 3\\n') == '3'\nassert solution('1 2 4\\n') == '2'\nassert solution('1 2 5\\n') == '1'\nassert solution('5 7 3\\n') == '7'\n\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 12 2') == '2'\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1024') == '2020'\nassert solution('1') == '5'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1024') == '2020'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"524\") == \"4410\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1024') == 2020\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\nimport math"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n4\\n\") == \"5\"\nassert solution(\"2\\n1 4\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 4\") == '5'\n\n\"\"\"\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"5\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom typing import List, Iterator, Dict\n\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n    z: int = 0\n\n    def __add__(self, other: Point) -> Point:\n        return Point(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __sub__(self, other: Point) -> Point:\n        return Point(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def __mul__(self, other: int) -> Point:\n        return Point(self.x * other, self.y * other, self.z * other)\n\n    def __truediv__(self, other: int) -> Point:\n        return Point(self.x // other, self.y // other, self.z // other)\n\n    def __iter__(self) -> Iterator[int]:\n        return iter((self.x, self.y, self.z))\n\n\n@dataclass\nclass Case:\n    inp: List[str]\n    out: str\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\nprint(solution(\"2\\n1 4\"))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt((sum([(i - 1)**2 for i in X])) / N))\n\n\n\nN = int(input())\nX = list(map(int, input().split()))\n\npow_list = [x - 1 for x in X]\nprint(sqrt(sum(pow_list) / N))\n\n\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum(x - 1 for x in X) / N))\n\n\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(i - 1) ** 2 for i in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2 for x in X]) / N))\n\n---\n\nfrom math import sqrt\n\nN = int(input())\nX = list(map(int, input().split()))\n\nprint(sqrt(sum([(x - 1) ** 2"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4\") == \"5\"\nassert solution(\"2\\n2 2\") == \"0\"\n\"\"\"\nimport sys\nfrom functools import lru_cache\nfrom collections import deque\nimport numpy as np"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\"\n\nimport unittest\nimport math\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        coordinates = stdin.split('\\n')[1]\n        coordinates = [int(x) for x in coordinates.split(' ')]\n        coordinates.sort()\n        # initialize variables\n        stamina = 0\n        points = 0\n        meeting_coordinate = coordinates[-1]\n        # calculate points and stamina\n        for coord in coordinates:\n            if meeting_coordinate < coord:\n                #calculate points\n                points += (coord - meeting_coordinate)**2\n                #calculate stamina\n                stamina += (coord - meeting_coordinate)**2\n            meeting_coordinate = coord\n        # return answer\n        return points\n\nclass Test(unittest.TestCase):\n    def test_sample(self):\n        self.assertEqual(Solution().solution('2\\n1 4'), '5')\n    def test_sample2(self):\n        self.assertEqual(Solution().solution('3\\n1 1'), '0')\n    def test_sample3(self):\n        self.assertEqual(Solution().solution('1\\n1'), '0')\n    def test_sample4(self):\n        self.assertEqual(Solution().solution('3\\n1 1 2'), '1')\n    def test_sample5(self):\n        self."
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == '5'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 4\n''') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"7 5\") == \"3\"\nassert solution(\"13 5\") == \"4\"\nassert solution(\"19 1\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nThe last one is the hard one, take the input from the standard input,\nAnd convert it to integers, put them in a list, use a function to calculate\nthe minimum number of power strips, and then print the minimum number of power strips.\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\nassert solution('1 10') == '0'\nassert solution('1 10') == '0'\nassert solution('4 10') == '3'\nassert solution('10 10') == '1'\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\nfrom math import sqrt, ceil\n\nA, B = map(int, stdin.split())\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 1\n\"\"\"\n\nimport sys\n\ns1 = sys.stdin.readline().strip()\ns2 = sys.stdin.readline().strip()\n\ncount = 0\nfor i in range(len(s1)):\n    if s1[i] == s2[i]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\ns, t = input(), input()\n\ncount = 0\n\nfor i in range(3):\n    if t[i] == \"S\" and s[i] == \"C\":\n        count += 1\n    elif t[i] == \"C\" and s[i] == \"R\":\n        count += 1\n    elif t[i] == \"R\" and s[i] == \"S\":\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(S) == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\n-------\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CSS') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == 2\n\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 5 4 2\") == \"2\"\n\n\"\"\"\n\n\n\n\"\"\"\nSOLUTION\n\nimport itertools"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution(input()))\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\n\"\"\"\nfrom math import inf\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\nlow = inf\nfor i in range(n):\n    if nums[i] < nums[i + 1] < nums[i + 2] or nums[i] > nums[i + 1] > nums[i + 2]:\n        low = min(low, nums[i])\n\nprint(low)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 5 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\"\"\") == '5.410'\n\nassert solution(\n\"\"\"\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\"\"\") == '5.620'\n\nassert solution(\n\"\"\"\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\"\"\") == '5.480'\n\nassert solution(\n\"\"\"\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\"\"\") == '6.040'\n\nassert solution(\n\"\"\"\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\"\"\") == '6.720'\n\"\"\"\n\nimport numpy as np\nimport unittest"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == answer\nprint(answer)\n\n'''"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('1 2') == '1.0 2.0'\nassert solution('1 2\\n3 4') == '1.0 2.0\\n3.0 4.0'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\n\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\n\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\n\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.040'\n\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\"\"\"\n) == \"5.410\"\n\nassert solution(\n\"\"\"5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\"\"\"\n) == \"5.620\"\n\nassert solution(\n\"\"\"8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\"\"\"\n) == \"5.480\"\n\nassert solution(\n\"\"\"5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\"\"\"\n) == \"6.040\"\n\nassert solution(\n\"\"\"8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\"\"\"\n) == \"6.040\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\n\n\"\"\"\n\nimport math\n\nn = int(input())\nx = list()\ny = list()\nfor _ in range(n):\n    x_, y_ = input().split()\n    x.append(float(x_))\n    y.append(float(y_))\nd_x = dict()\nd_y = dict()\nfor i in range(len(x)):\n    if x[i] not in d_x:\n        d_x[x[i]] = list()\n    if y[i] not in d_y:\n        d_y[y[i]] = list()\n    d_x[x[i]].append(y[i])\n    d_y[y[i]].append(x[i])\n\nans = 0\nfor i in d_x:\n    if len(d_x[i]) == 1:\n        continue\n    for j in d_y[d_x[i][0]]:\n        for k in d_x[i]:\n            if k!= j:\n                ans += abs(k - j)\nprint(math.pi / 2 * ans / n)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 16\\n5 5 5 5 5') == '2'\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\ncurrent_sum = 0\ni = 0\nwhile current_sum <= m:\n    current_sum += a[i]\n    i += 1"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\") == '4'\nassert solution(\"7 10\") == '2'\nassert solution(\"5 15\") == '-1'\nassert solution(\"5 26\") == '-1'\n\"\"\"\n\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\nprint(-1 if n * m - sum(a) < 0 else n * m - sum(a))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 4\\n5 5 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 5\\n5 5 5 5 5\") == \"0\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 5\\n5 5 5 5 5') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"1 1 1 1 2 1 1 2 1 2 1 1 1 1\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n\"\"\"\n\nimport itertools\nfrom collections import Counter\nfrom typing import Callable, List\n\nfrom icontract import require, ensure\n\nABSOLUTE_TOLERANCE = 0\nrelative_tolerance = 5e-5  # out of 100\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n\n\n'''\n    # \n'''\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"1 1 1 1\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 2 4 3 1') == '1 2 3'\nassert solution('1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('1 2 1 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\nassert solution('1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('1 2 1 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == '3'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3') == '3'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"\nimport heapq"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nThe number of rows is given.\nWe can extract the number of columns and the matrix as a 2D array.\nThe number of rows can be written as the ceiling of the result of n over 2.\n\nFor the initial value of the counter, we choose 1 because it is not the first number we visit.\nThe initial values of the array are 1s so we can immediately start the iteration.\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('xxxxxx') == '0'\nassert solution('xx') == '1'\nassert solution('xxiii') == '1'\nassert solution('xiiii') == '2'\nassert solution('xxxiii') == '3'"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxxii\") == 0\nassert solution(\"xxx\") == 0\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxxx\") == 1\nassert solution(\"exxxii\") == 1\nassert solution(\"exxxix\") == 1\nassert solution(\"xxxiii\") == 0\nassert solution(\"xxixx\") == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxxx\") == \"0\"\nassert solution(\"xxxi\") == \"1\"\nassert solution(\"xxix\") == \"1\"\nassert solution(\"xxxxxxxx\") == \"8\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxxiii\") == '1'\nassert solution(\"xxxx\") == '0'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", [\"x\", \"y\"])"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\nassert solution('1\\n2\\n') == 2\nassert solution('1\\n2\\n3\\n') == 6\nassert solution('1\\n2\\n3\\n4\\n') == 20\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 48\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '48'\nassert solution('4\\n2') == '8'\nassert solution('2\\n4') == '8'\nassert solution('3\\n1') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"48\"\nprint(solution(\"4\"))\n\nYou can change this constant to test your solution with different inputs."
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"48\"\n\n-------Solution---------\n\na = int(input())\n\nresult = 3*(a**2)\nprint(result)\n\n'''\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '48'\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"48\"\nprint(\"Test 1 PASSED\")\n\n---Problem---\n\nGiven: Positive integers a, b, and c.\nReturn: The integer corresponding to the perimeter of the triangle with sides of length a, b, and c.\n\n-----Constraints-----\n - 1 \\leq a, b, c \\leq 10^6\n - a, b, and c are integers.\n\n-----Input-----\nThis problem is given by stdin.\n\n-----Output-----\nPrint the perimeter of the triangle to stdout.\n\n-----Sample Input-----\n3\n5\n7\n\n-----Sample Output-----\n17\n\nThe perimeter is (3 + 5 + 7) = 17.\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"48\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nS, W = map(int, input().split())\nprint('unsafe' if W >= S else'safe')"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"10 5\") == \"safe\"\nassert solution(\"7 10\") == \"safe\"\nassert solution(\"2 5\") == \"unsafe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n\") == 'unsafe'\nassert solution(\"5 5\\n\") =='safe'\n\"\"\"\n\nS, W = input().split()\nW = int(W)\nS = int(S)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\"\n\nS, W = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\"\n\ns, w = [int(i) for i in stdin.split(' ')]\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"10 10\") == \"safe\"\nassert solution(\"1 1\") == \"unsafe\"\nassert solution(\"2 5\") == \"unsafe\"\nassert solution(\"10 100\") == \"unsafe\"\n\nSolution\n'''\nimport math"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\n-----\nIf the number of wolves is greater than or equal to that of sheep, the wolves will attack the sheep.\nIf the wolves will attack the sheep, print unsafe; otherwise, print safe.\n\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4 5''') == '6'\nprint('Sample Tests Passed')\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 4 5') == '6'\nassert solution(\n    '4 3 5') == '6'\nassert solution(\n    '4 5 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 6\") == \"6\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4 5''') == '6'\nassert solution('''10 10 10''') == '50'\nassert solution('''1 1 1''') == '0'\nassert solution('''2 3 4''') == '2'\nassert solution('''1 1 1''') == '0'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"3 5 5\") == \"10\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3 4 5'\n) == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == \"6\"\n\"\"\"\n\n\"\"\"\n[\ubb38\uc81c]\n\uc218\ub3c4 \uc694\uae08 \uacc4\uc0b0 \ubb38\uc81c\n\n[\ubb38\uc81c \ud574\uc124]\n\ub2e4\uc74c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.\n\n1. \uc694\uae08 \uacc4\uc0b0\uc758 \ubaa9\uc801\uc740 \ucd5c\ub300\ud55c \uc801\uac8c \ub0b4\uc57c \ud55c\ub2e4.\n2. \ud55c \ub2ec\uc5d0 \ucd5c\ub300 1000\ub9cc\uc6d0\uc744 \ub0b4\uc57c \ud55c\ub2e4.\n3. \ub2e8, \ub2ec\ub825\uc744 \uc774\uc6a9\ud558\uc5ec \ub9de\ucdb0\uc57c \ud55c\ub2e4.\n4. \uc608\ub97c \ub4e4\uc5b4 \ud55c \ub2ec\uc774 28\uc77c \uc911 \ub0a0\uc9dc\uac00 31\uc77c \uc911\uc778 \ub2ec\uc774\ub77c\uba74, 28\uc77c\uc744 \ub0a0\uc9dc\ub85c \uac00\uc815\ud558\uace0 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.\n\n[\ucd9c\ub825 \ud615\uc2dd]\n\uc218\ub3c4\uc694\uae08\uc744 \ucd9c\ub825\ud558\uc138\uc694.\n\n[\uc608\uc81c \ud480\uc774]\n\n\uc785\ub825:\n28\n29\n31\n\n\ucd9c\ub825:\n620000\n\n\ubc18\ub840:\n28\uc77c\uc774 \uc18d\ud558\ub294 \uc6d4\uc774 31\uc77c\uc774\ubbc0\ub85c, 28\uc77c\uc744 \ub0a0\uc9dc\ub85c \uac00\uc815\ud558\uace0 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694.\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"2 11 1\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 11 4\\n') == '4'"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10 5') == '2'\nassert solution('1 1 1') == '0'\nassert solution('1 2 3') == '1'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\n------MEMOIZATION------\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n2 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nA, B, C = map(int, input().split())\ncount = 0\nwhile B >= A and C > count:\n    count += 1\n    B -= A\nprint(count)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\"\"\"\n\"\"\"\nOther Solution\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '10'\nprint(solution('2 5'))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 3) == 9\nassert solution(5, 5) == 25\nassert solution(10, 10) == 100\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 5''') == 10\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, 5) == 10\n'''"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"3 10\") == \"30\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\nprint(A*B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\n\nsolution('2 5') # 10\n\n---\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 5) == 10\nprint(solution(2, 5))\n\n'''"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 7') == \"10\"\n\"\"\"\n\nfrom collections import deque\nfrom fractions import Fraction"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == '10'\n\n\"\"\"\n\n\"\"\"\n@time: 2020-09-09 17:04\n@author: Sergey\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 7') == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 7\\n') == 10\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\na, b, t = [int(c) for c in input().split()]\n\ntotal = 0\n\nwhile a <= t:\n    total += a\n    a *= 2\n\ntotal += b\n\nprint(total)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\nA, B, T = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 7') == '10'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 7') == '10'\nassert solution('3 5 6') == '9'\nassert solution('3 2 5') == '0'\nassert solution('3 2 2') == '1'\nassert solution('3 2 0') == '1'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2\n''') == 'NG'\nassert solution('''5\n1 3\n''') == 'NG'\nassert solution('''5\n2 2\n''') == 'OK'\nassert solution('''5\n3 3\n''') == 'NG'\nassert solution('''7\n9 11\n''') == 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\"\n\nA, B, K = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n500 600') == 'OK'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n500 600') == \"OK\"\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\n\"\"\"\n\nimport sys\n\nimport math\n\na, b = map(int, sys.stdin.readline().strip().split())\nk = int(sys.stdin.readline().strip())\n\nlow = math.floor(a / k)\nhigh = math.ceil(b / k)"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\n---\n\u9ad8\u6a4b\u541b\u306f golf \u30b3\u30f3\u30c6\u30b9\u30c8\u306b\u51fa\u5834\u3057\u305f\u3002\n\u4ed6\u306e\u4eba\u3082\u51fa\u5834\u3057\u3066\u304d\u305f\u304c\u3001\u5148\u884c\u8005\u306b\u306a\u3063\u305f\u306e\u306f\u30b8\u30e7\u30d6\u95a2\u6570\u3002\n\u4eca\u56de\u306f\u30b8\u30e7\u30d6\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30ab\u30ea\u30ad\u30e5\u30e9\u30e0\u3092\u4f5c\u308a\u305f\u3044\u3002\n\u30b8\u30e7\u30d6\u95a2\u6570\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u30ad\u30e3\u30ea\u30a2\u3092 K \u3067\u5272\u308a\u7d9a\u3051\u305f\u6642\u306b\u30011 \uff5e 1000 \u307e\u3067\u306e\u8ddd\u96e2\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n\u3082\u3057\u3053\u308c\u3092\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u3089 OK \u3068\u51fa\u529b\u3057\u3001\u3067\u304d\u306a\u3051\u308c\u3070 NG \u3068\u51fa\u529b\u3059\u308b\u3002\n\n-----Constraints-----\n - \u884c\u306f\u4eca\u56de\u306f 1 \\leq A, B \\leq 1000\n - 1 \\leq K \\leq 1000\n\n-----Input-----\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\nK\nA B\n\n-----Output-----\n\u51fa\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306e\u3046\u3061 OK \u307e\u305f\u306f NG \u3067\u3042\u308b\u3002\nOK\n\n\u6b21\u306b\u3001\u4ed6\u306e\u4eba\u3082\u51fa\u5834\u3057\u3066\u304d\u305f\u304c\u3001\u5148\u884c\u8005\u306b\u306a\u3063\u305f\u306e\u306f\u30b8\u30e7\u30d6\u95a2\u6570\u3002\n\u305d\u306e\u305f\u3081\u306b\u30b8\u30e7\u30d6\u95a2\u6570\u3092\u4f5c\u308a\u305f\u3044\u3002\n\u4f5c\u308b\u30b8\u30e7\u30d6\u95a2\u6570\u306f\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306b\u306a\u308b\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u30ad\u30e3\u30ea\u30a2\u3092 K \u3067\u5272\u308a\u7d9a\u3051\u305f\u6642\u306b\u30011 \uff5e 1000 \u307e\u3067\u306e\u8ddd\u96e2\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n\u3082\u3057\u3053\u308c\u3092\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u3089 OK \u3068\u51fa\u529b\u3057\u3001\u3067\u304d\u306a\u3051\u308c\u3070 NG \u3068\u51fa\u529b\u3059\u308b\u3002\n\n-----Sample Input-----\n7\n500 600\n\n-----Sample Output-----\nOK\n\n\u7b2c2\u884c\u3067\u306f\u3001500 \u3068 600 \u304c\u8868\u793a\u3055\u308c\u305f\u3002\n\u305d\u306e\u5f8c\u3001\u3069\u306e\u3088\u3046\u306a\u51fa\u529b\u3092\u51fa\u3057\u305f\u3044\u304b\u8003\u3048\u308b\u3002\n\u3053\u306e\u6642\u3001\u30b8\u30e7\u30d6\u95a2\u6570\u304c 567 \u304b 500 \u304b 600 \u304b\u3067\u5272\u308a\u5207\u308c\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\u3082\u3057\u30b8\u30e7\u30d6\u95a2\u6570\u304c 567 \u304b 500 \u304b 600 \u304b\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u5408\u3060\u3063\u305f\u3089 OK \u3068\u51fa\u529b\u3057\u3001\u3067\u304d\u306a\u3051\u308c\u3070 NG \u3068\u51fa\u529b\u3057\u305f\u3044\u3002\n\u3053\u308c\u306f\u3001\u95a2\u6570\u3092\u4f5c\u6210\u3057\u305f\u5f8c\u306b\u3001\u305d\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066\u5224\u5b9a\u3059\u308b\u3053\u3068\u3060\u3002\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u95a2\u6570\u3092\u4f5c\u6210\u3057\u305f\u5f8c\u306b\u3001\u305d\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066\u5224\u5b9a\u3059\u308b\u306e\u3068\u540c\u3058\u306a\u306e\u3067 OK \u3068\u51fa\u529b\u3057\u3066\u307f\u308b\u3002\n\n\u5148\u306b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u308b\u3068\u3053\u308d\u304b\u3089\u5b9f\u884c\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 500 600\\n\") == \"OK\"\n\"\"\"\nimport math\nfrom sys import stdin"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n500 600') == 'OK'\nassert solution('12\\n300 400') == 'NG'\n\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\nassert solution(\"6 2\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == '2.6666666667'\n\"\"\"\n\nimport sys\n\nT, X = map(float, sys.stdin.readline().split())\nprint(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"8 3\"\n) == \"2.6666666667\"\n\"\"\"\n\nT, X = [int(i) for i in stdin.split(\" \")]\n\nprint(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nt, x = map(int, input().split())\n\nprint(\"{0:.3f}\".format(math.floor(t / x)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 4\") == \"6.5\"\nassert solution(\"1 1\") == \"2.0\"\nassert solution(\"10 10\") == \"11.0\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\nprint((T * X - T) / (X - 1))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"2.6666...\"\n\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666...\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 3') == '1'\nassert solution('6 4 3') == '1'\nassert solution('4 6 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output\n\n---Problem 010---\nWrite a program which takes an integer in input and print its factorial.\n\n-----Constraints-----\n - The integer in input must be within the range of [0, 13].\n\n-----Input-----\nInput is given from Standard Input in the following format:\n3\n\n-----Output-----\nOutput is taken from Standard Output in the following format:\n6\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n120"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4 3\\n') == '1'\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 4 3') == '1'\n\n-----Test Case-----\nTest Case 1\n6 4 3\n\nTest Case 2\n20 10 10\n\nTest Case 3\n20 10 10\n\n-----Explanation-----\nTest Case 1\nFor the first test case, the program computes the optimal solution for transferring 3 milliliters from Bottle 2 to Bottle 1. \nAfter transferring 3 milliliters, the remaining milliliters in Bottle 2 are 3 milliliters. \nSince 3 milliliters of water will not fit in the remaining capacity of Bottle 1, the amount of water transferred in the first bottle is 3 milliliters, \nand the remaining amount of water in the second bottle is 3 milliliters. \nTherefore, the amount of water in the first bottle is 3 milliliters, and the amount of water in the second bottle is 3 milliliters.\n\nTest Case 2\nFor the second test case, the program computes the optimal solution for transferring 10 milliliters of water from Bottle 2 to Bottle 1. \nAfter transferring 10 milliliters, the remaining milliliters in Bottle 2 are 10 milliliters. \nSince 10 milliliters of water will not fit in the remaining capacity of Bottle 1, the amount of water transferred in the first bottle is 10 milliliters, \nand the remaining amount of water in the second bottle is 10 milliliters. \nTherefore, the amount of water in the first bottle is 10 milliliters, and the amount of water in the second bottle is 10 milliliters.\n\nTest Case 3\nFor the third test case, the program computes the optimal solution for transferring 10 milliliters of water from Bottle 2 to Bottle 1. \nAfter transferring 10 milliliters, the remaining milliliters in Bottle 2 are 0 milliliters. \nSince 10 milliliters of water will not fit in the remaining capacity of Bottle 1, the amount of water transferred in the first bottle is 10 milliliters, \nand the remaining amount of water in the second bottle is 0 milliliters. \nTherefore, the amount of water in the first bottle is 10 milliliters, and the amount of water in the second bottle is 0 milliliters.\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3') == '1'\nassert solution('6 4 3') == '0'\nassert solution('1 1 1') == '0'\nassert solution('9 9 9') == '0'\nassert solution('9 9 9\\n1 1 1') == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 3') == '1'\n\n\"\"\"\nfrom math import floor, ceil\n\na, b, c = input().split(' ')\na = int(a)\nb = int(b)\nc = int(c)\n\na_res = floor(b / a)\nb_res = b % a"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 4 3') == '1'\n\n\"\"\"\n\n\"\"\"\n<Solution>\n\nA, B, C = [int(x) for x in stdin.split(' ')]\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4 3') == 1\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 3 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"1\\n3 2\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\") == '3'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"3\\n3 1 2\\n1 3 2\") == \"3\"\nassert solution(\"5\\n1 3 2 4 5\\n5 1 4 3 2\") == \"1\"\nassert solution(\"2\\n1 2\\n2 1\") == \"0\"\nassert solution(\"3\\n3 2 1\\n2 1 3\") == \"1\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('2\\n1 3\\n3 1') == '1'\n\"\"\"\n\nfrom typing import List\n\nfrom collections import defaultdict\n\nfrom sys import stdin\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('2\\n3 1 2\\n1 3 2') == '-1'\nassert solution('1\\n3 1 2\\n2 3 1') == '2'\nassert solution('2\\n3 1 2\\n2 3 1') == '0'\nassert solution('2\\n1 3 2\\n2 1 3') == '1'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n\n-----\n2\n1 1\n1 1\n\n-----\n3\n1 1 1\n1 2 2\n1 3 3\n\n-----\n5\n1 1 1 1\n2 2 2 2\n3 3 3 3\n4 4 4 4\n5 5 5 5\n\n-----\n5\n1 1 2 2 3\n1 1 2 2 3\n1 1 3 2 3\n1 1 3 2 3\n1 1 3 3 2\n1 1 3 3 2\n\n-----\n5\n1 1 2 3 1\n1 2 2 3 1\n1 3 2 3 1\n1 1 3 1 2\n1 2 1 3 2\n1 3 1 2 3\n\n-----\n8\n1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 2 2 2 2 2 2 2 2\n3 1 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n\n-----\n8\n1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 3 2\\n3 1 2') == '3'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == '3'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"ATC\") == 3\nassert solution(\"A\") == 1\nassert solution(\"AC\") == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nS = input()\n\nbest = 0\n\nbest_substring = \"\"\n\nfor i in range(len(S)):\n    for j in range(len(S), i, -1):\n        s = S[i:j]\n        if s.count(\"A\") == s.count(\"C\") == s.count(\"G\") == s.count(\"T\"):\n            if len(s) > best:\n                best = len(s)\n                best_substring = s\n\nprint(best)\nprint(best_substring)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ATCODER') == 3\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().rstrip()\n\nA = len(S[:S.index('A')])\nC = len(S[:S.index('C')])\nG = len(S[:S.index('G')])\nT = len(S[:S.index('T')])\n\nprint(max(A, C, G, T))"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 3\nassert solution('ATC') == 3\nassert solution('ACGT') == 4\nassert solution('ATCAB') == 4\nassert solution('ATCAC') == 4\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == 9\n\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 9\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"9\"\nprint(solution(\"11\"))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"9\"\nprint(solution(\"11\"))\n\n'''"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(11) == 9\n\"\"\"\n\nn = int(stdin.readline())\ncount = 0\n\nfor i in range(1, n + 1):\n    if len(str(i)) % 2 == 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\nassert solution('12') == '7'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"9\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n----"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import Counter\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcd') == 1\nassert solution('acbcd') == 2\nassert solution('abcde') == 3\nassert solution('abcdef') == 6\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cupofcoffee') == 'hotteacupofcoffee'\nassert solution('cupofhottea') == 'hottea'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\"\n\nimport unittest\n\n\nclass TestCorrectness(unittest.TestCase):\n    \"\"\"\n    In this problem, we can only replace one character with another character, but we may choose any character to replace.\n    So, this problem will be an example of DP.\n    Because of this, we can use a bottom-up solution.\n    \"\"\"\n\n    def setUp(self) -> None:\n        pass\n\n    def solution(self, input: str) -> int:\n        S = input[0]\n        T = input[1]\n        n = len(S)\n\n        # We make a lookup table to store the min number of operations required to convert S to T.\n        # If S[i] == T[j], it means that the operation from S to T requires one operation,\n        # which is the copying of the ith character of S to the jth character of T.\n        # If S[i]!= T[j], it means that the operation from S to T requires two operations,\n        # which are the copying of the ith character of S to the jth character of T,\n        # and the copying of the jth character of T to the (i+1)th character of S.\n        # The lookup table stores the minimum number of operations required to convert S to T.\n        dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            dp[i][i] = 0  # The operation from the empty string to the empty string is 0.\n            dp[i][i + 1] = 1  # The operation from the empty string to a nonempty string is 1.\n            dp[i][i + 2] = 2  # The operation from the empty string to a string of length 2 is 2.\n\n        for length in range(3, n + 1):  # For each string length.\n            for i in range(n - length + 2):  # For each start index.\n                j = i + length - 1  # The index of the last character of the substring.\n                dp[i][j] = dp[i + 1][j - 1]\n                for k in range(i, j):  # For each middle index.\n                    if S[k] == T[k]:  # If the middle character is not changed, we simply copy the character.\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n                    else:\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n\n        return dp[0][n - 1]\n\n    def test_solution(self) -> None:\n        self.assertEqual(self.solution(\"cupofcoffee\"), 4)\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == 4\nassert solution('cupofhottea') == 4\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"cupofhottea\") == \"hottea\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nprint(solution(\"cupofcoffee\"))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n3 4\") == \"4 5 6\"\nassert solution(\"3 3\\n1 0\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nk, x = input().split()\nk, x = int(k), int(x)\n\nstones = range(k, k + x + 1)\n\nprint(*stones, sep=\" \")\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n\n---Problem 2---\n\nThe number of elements of a finite set can be determined using the following formula:\n\nn = \\lfloor{\\sqrt{n}}\\rfloor + 1\nThe values of \\lfloor{\\sqrt{n}}\\rfloor and \\sqrt{n} are integers.\n\nWrite 5 lines of code to test the correctness of solution:\nThere are 10 elements in a set, and their coordinates are -3, -2, -1, 0, 1, 2, 3, 4, 5, 6.\nAmong them, the coordinates of 9 out of them are odd.\nFor each of these coordinates, print the number of elements in the set.\n\n-----Constraints-----\n - 1 \\leq K \\leq 100\n - 0 \\leq X \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK X\n\n-----Output-----\nPrint all the odd coordinates and the number of elements in the set that contain each of them, with spaces in between.\n\n-----Sample Input-----\n3 7\n\n-----Sample Output-----\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n2 2\n2 2\n3 3\n3 3\n3 3\n3 3\n\nWe know that there are three stones painted black, and the stone at coordinate 3 is painted black. There are three possible cases:\n - The three stones painted black are placed at coordinates -3, -2, and -1.\n - The three stones painted black are placed at coordinates -2, -1, and 0.\n - The three stones painted black are placed at coordinates -1, 0, and 1.\nThus, five coordinates potentially contain a stone painted black: -3, -2, -1, 0, and 1.\nIn the first three cases, there is one element in the set that contains the stone at coordinate -3, -2, and -1.\nIn the second three cases, there is one element in the set that contains the stone at coordinate -2, -1, and 0.\nThe remaining three coordinates have two elements in the set that contains the stone at coordinate -1, 0, and 1.\nThus, five numbers are printed: 1, 1, 1, 1, and 2."
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n\nimport math\n\nX = int(input())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\nassert solution('-5') == 'No'\nassert solution('45') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"35\") == \"Yes\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'No'\nassert solution('26') == 'Yes'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'No'\nassert solution('-25') == 'No'\nassert solution('-39') == 'No'\nassert solution('40') == 'Yes'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'No'\nassert solution('-25') == 'Yes'\nassert solution('32') == 'No'\nassert solution('-32') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'No'\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\nassert solution('25') == 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\npoints = []\nfor i in range(N):\n    coord = list(map(int, sys.stdin.readline().split()))\n    points.append(coord)\n\nmatches = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        diff = 0\n        for k in range(D):\n            diff += (points[i][k] - points[j][k]) ** 2\n        if diff.is_integer():\n            matches += 1\n\nprint(matches)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\") == \"1\"\nassert solution(\"4 4\\n4 4\\n1 1\\n1 1\") == \"5\"\nassert solution(\"2 3\\n1 1\\n4 4\") == \"0\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\nfrom collections import Counter\n\nstdin = \"4 2\\n1 2\\n2 3\\n4 1\\n1 2\\n4 2\"\n\nn, d = list(map(int, stdin.split()))\n\ncoords = []\nfor _ in range(n):\n    coords.append(list(map(int, stdin.split()[1:])))\n\ndist = {}\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        total = 0\n        for k in range(d):\n            total += (coords[i][k] - coords[j][k]) ** 2\n        dist[(i, j)] = total ** 0.5\n\nc = Counter(dist.values())\nprint(sum(i == int(i) for i in dist.values()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2\\n5 5') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\nassert solution('2 2\\n1 1\\n5 5') == '0'\nassert solution('1 3\\n2 3\\n3 2') == '2'\nassert solution('2 2\\n1 1\\n5 5\\n-2 8') == '1'\nassert solution('1 3\\n2 3\\n3 2') == '2'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 2 2 1\\n4 2 1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n5 5\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1243') == 'Bad'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3776\") == \"Bad\"\nassert solution(\n    \"7765\") == \"Good\"\nassert solution(\n    \"9988\") == \"Bad\"\nassert solution(\n    \"9999\") == \"Good\"\nassert solution(\n    \"1111\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3214\") == \"Bad\"\nassert solution(\"2314\") == \"Good\"\nassert solution(\"1425\") == \"Bad\"\nassert solution(\"2014\") == \"Bad\"\nassert solution(\"3245\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('12345') == 'Bad'\nassert solution('1221') == 'Bad'\nassert solution('1112') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1111') == 'Bad'\nassert solution('1223') == 'Bad'\nassert solution('1212') == 'Bad'\nassert solution('1234') == 'Bad'\n\n---"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"Bad\"\nassert solution(\"3776\") == \"Good\"\nassert solution(\"2211\") == \"Bad\"\nassert solution(\"1234\") == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234') == \"Bad\"\nassert solution('1235') == \"Good\"\nassert solution('1112') == \"Bad\"\nassert solution('1111') == \"Good\"\nassert solution('111111') == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1235') == 'Bad'\nassert solution('12345') == 'Good'\nassert solution('12354') == 'Bad'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == solution(s)\n\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3.5\"\nassert solution(\"10 20 30 40 50\") == \"36.25\"\nassert solution(\"2 1\") == \"2.0\"\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 4\") == '3.5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('3\\n1 2 3') == '2.0'\nassert solution('2\\n3 4') == '3.5'\nassert solution('2\\n1 1') == '1.0'\nassert solution('1\\n1') == '1.0'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nprint(solution('2\\n3 4'))\nassert solution('') == ''\nprint(solution('2\\n3 4'))\nassert solution('') == ''\nprint(solution('2\\n3 4'))\nassert solution('') == ''\nprint(solution('2\\n3 4'))\nassert solution('') == ''\nprint(solution('2\\n3 4'))\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3.5\"\n\"\"\"\n\n\"\"\"\n\n1\n3 4\n\n2\n3 4\n\n1\n4 4\n\n2\n4 2\n\n1\n4 4\n\n3\n4 3\n\n2\n4 2\n\n1\n4 4\n\n1\n3 3\n\n1\n3 3\n\n1\n4 4\n\n3\n4 3\n\n\"\"\"\n\nn = int(input())\nv = list(map(int, input().split()))\n\npot = []"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2\") == \"5\"\nassert solution(\"1 2 3\") == \"6\"\n\"\"\"\n\nstdin = input()\nans = 0\n\nsatisfaction_points = [int(i) for i in stdin.split(' ')]\n\nfor i in range(1, len(satisfaction_points)):\n    ans += satisfaction_points[i] + (satisfaction_points[i-1]*satisfaction_points[i])\n\nprint(ans)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n2 5 4\\n3 6') == '14'\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nn = int(stdin.readline())\nA = list(map(int, stdin.readline().strip().split()))\nB = list(map(int, stdin.readline().strip().split()))\nC = list(map(int, stdin.readline().strip().split()))\n\nres = 0\nres += sum(B)\n\nfor i in range(n - 1):\n    res += B[i] * C[i]\n\nprint(res)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nFACECATCATCAT\") == \"3\"\nassert solution(\"2\\nAAB\") == \"0\"\nassert solution(\"5\\nABCCAB\") == \"3\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\nIf the string abcd... contains all the letters of the alphabet at least once, then it is called an anagram of the empty string. For example, abcd... is an anagram of the empty string.\n\nGiven a string containing uppercase English letters, your task is to count how many \"anagrams\" of the empty string can be formed with exactly k non-repeating letters.\n\nFor example, if str = \"BACDEFG\" and k = 2, there are 4 anagrams: \"\", \"B\", \"C\", and \"DE\".\n\nFunction Description\n\nComplete the anagram function in the editor below. It should return the integer number of ways to form the empty string from exactly k non-repeating letters.\n\nanagram has the following parameter(s):\n\ns: a string\nk: an integer\nInput Format\n\nThe first line contains a single integer, the number of test cases.\n\nEach of the next k lines contains a string  and an integer,, where  contains  uppercase English letters and  is the number of non-repeating letters in the string.\n\nConstraints\n\nOutput Format\n\nFor every test case, print the number of ways to form the empty string from exactly  non-repeating letters, modulo 109 + 7.\n\nSample Input 0\n\n2\nBANANA\n3\nAAB\nSample Output 0\n\n2\n4\nExplanation 0\n\nIn the first test case, there are two ways to form the empty string:\n\n* From no letters: \"\"\n* From  non-repeating letters: B, A, N, A, and N\n\nIn the second test case, there are four ways to form the empty string:\n\n* From no letters: \"\"\n* From  non-repeating letters: A, A, B, and A\n* From  non-repeating letters: A, B, A, and B\n* From  non-repeating letters: B, A, B, and A\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABCDBABCQ') == 2\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\nassert S.isalpha(), \"Incorrect input\"\n\nassert len(S) <= 50, \"Incorrect input\"\n\nfor i in range(len(S) - 2):\n    if S[i:i + 3] == \"ABC\":\n        print(1)\n        break\n\nelse:\n    print(0)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\nprint('Tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n10\nZABCDBABCQ\n''') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('113323333') == '6'\nassert solution('11332222') == '0'\nassert solution('1333') == '1'\nassert solution('2233') == '1'\nassert solution('333') == '0'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(S) == result\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABABCD') == '2'\nprint(solution('ABBCD'))"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nABCDBABCQ') == 2\nassert solution('5\\nABCD') == 1"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\nZABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == 2\n\nassert solution('''5\nHOROKANAI\nMASHIKE\nOBIRA\nRUMOI\nHABORO''') == 2\n\nassert solution('''5\nRUMOI\nMASHIKE\nOBIRA\nHABORO\nHOROKANAI''') == 2\n\nassert solution('''5\nHABORO\nMASHIKE\nOBIRA\nRUMOI\nHOROKANAI''') == 2\n\nassert solution('''5\nMASHIKE\nOBIRA\nHABORO\nHOROKANAI\nRUMOI''') == 2"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\nsys.setrecursionlimit(2500)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('MASHIKE') == '2'\nassert solution('MASHIKE:RUMOI,HOROKANAI') == '2'\nassert solution('MASHIKE:RUMOI:HABORO') == '1'\nassert solution('MASHIKE:RUMOI:HABORO:HOROKANAI') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n'\n    'MASHIKE\\n'\n    'RUMOI\\n'\n    'OBIRA\\n'\n    'HABORO\\n'\n) == '2'\nassert solution(\n    '2\\n'\n    'SANTIS\\n'\n    'IKKO'\n) == '0'\n\"\"\"\n\n\"\"\"\nSolution:\n\nThis problem can be solved by using recursion. In order to do so, we need to know \nwhat are the possible combinations. There are several rules to follow.\n\n1. If we have a single choice, we can either select it, or we can skip it. We can \n    choose several people at once by selecting it multiple times.\n2. If the previous choice is finished, we can choose another one.\n3. The final choice should start with a letter that matches the current line. \n    We can skip the current line in the same way as before.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\nLOL\nLEL\nLOL\nLMAO''') == '2'\nassert solution('''1\nMASHIKE\n''') == '1'\nassert solution('''1\nMASHIKE\nLMAO\n''') == '0'\n'''"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\n\"\"\"\nSolution:\n\n1. Generate all possible triplets and check if they fulfill the conditions.\n2. If yes, check if all triplets share the same prefix.\n3. If yes, check how many prefixes are in the list.\n4. If yes, check how many prefixes are different.\n5. If yes, count!\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(MASHIKE) == 2\nassert solution(RUMOI) == 1\n\"\"\"\nimport unittest"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"3 4\") == \"No\"\nassert solution(\"4 4\") == \"No\"\nassert solution(\"20 20\") == \"Yes\"\nassert solution(\"10 10\") == \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"100 100\") == \"Yes\"\nassert solution(\"10 10\") == \"Yes\"\nassert solution(\"10 100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 1\\n2 1\\n3 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2\\n4 5\\n6 7\") == \"Yes\"\nassert solution(\"3 4\\n1 2\\n2 3\\n4 5\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 1\\n2 2\\n3 0') == 'Yes'\nassert solution('3 3\\n0 1\\n2 2\\n0 0') == 'Yes'\nassert solution('3 3\\n0 1\\n1 2\\n1 0') == 'No'\n\n---------------------\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippa\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n\nimport sys\n\ninput()"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('beer') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('siabc') == 'No'\nassert solution('sippuu') == 'Yes'\nassert solution('siabc') == 'No'\nassert solution('sippuu') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippy\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"iitiiit\") == \"No\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"srwqe\") == \"No\"\nassert solution(\"qponm\") == \"Yes\"\nassert solution(\"pqpqp\") == \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"addacd\") == \"No\"\nassert solution(\"asdasd\") == \"No\"\nassert solution(\"asdadd\") == \"No\"\nassert solution(\"aassdd\") == \"Yes\"\n\nIn the first test case, there is a match between the 3-rd and 4-th characters in sippuu, and the 5-th and 6-th characters in sippuu.\nIn the second test case, the first and last characters are not equal to each other in addacd.\nIn the third test case, there are no matches between the characters in asdasd.\nIn the fourth test case, the first and last characters are not equal to each other in asdadd.\nIn the fifth test case, the first and last characters are not equal to each other in aassdd.\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3 70\\n'\n    '7 60\\n'\n    '1 80\\n'\n    '4 50'\n) == '4'\n\nassert solution(\n    '3 70\\n'\n    '7 60\\n'\n    '1 80\\n'\n    '4 50\\n'\n    '1 1'\n) == 'TLE'\n\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"3 20\\n10 10\\n1 20\\n4 10\") == \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3 70\\n7 60\\n1 80\\n4 50\\n'\n) == '4'\n\nassert solution(\n    '4 23\\n7 20\\n10 40\\n10 60\\n'\n) == 'TLE'\n\nassert solution(\n    '4 4\\n7 10\\n10 100\\n10 20\\n'\n) == '100'\n\nassert solution(\n    '5 100\\n100 100\\n100 100\\n100 100\\n100 100\\n'\n) == '0'\n\nassert solution(\n    '2 10\\n10 10\\n'\n) == '10'"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(':') == ':', 'WA: wrong result for input \":\"'\nassert solution('3 70') == '4', 'WA: wrong result for input 3 70'\nassert solution('5 2') == 'TLE', 'WA: wrong result for input 5 2'\nassert solution('5 100') == 'TLE', 'WA: wrong result for input 5 100'\nassert solution('1 1') == '1', 'WA: wrong result for input 1 1'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 9') == '8'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1,2,3) == 6\nassert solution(5,5,2) == 17\n\nassert solution(1,1,1) == 0\nassert solution(5,5,5) == 25\nassert solution(5,5,1) == 25\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\") == 8\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 9') == 8\n\"\"\"\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().strip().split())\nprint(N * A + B)\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 9\\n') == '8'\nassert solution('4 9 8\\n') == '12'\nassert solution('4 1 5\\n') == '6'\nassert solution('3 1 1\\n') == '4'\nassert solution('3 5 1\\n') == '8'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(solution(\"4 2 9\"))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9\") == 8\nassert solution(\"2 5 3\") == 8\nassert solution(\"8 10 15\") == 16\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 9\") == 8\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\ncornistnt\\npeanutbomb\\nconstraint') == 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == '1'\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\na\\nacornistnt\\npeanutbomb\\nconstraint\") == 1\n\"\"\"\n\n\"\"\"\nI was wrong to think the solutions provided to be:\n'a'  'a'  'c'  'o'\n'n'  'n'  'i'  't'\n'o'  'n'  'n'  'b'\n'b'  'o'  'b'  'b'\n'u'  'b'  'b'  'b'\n'p'  'e'  'p'  'e'\n'a'  'c'  'r'  'o'\n'n'  'i'  't'  'e'\n'b'  'n'  'b'  'b'\n'c'  'o'  'n'  'i'\n'r'  'o'  'n'  'n'\n't'  'o'  'n'  'n'\n'b'  'e'  'p'  'e'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b'  'b'\n'b'  'b'  'b"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\n-----Problem-----\nA builder is looking to build a row of N houses that can be of K different colors. He has a goal of minimizing cost while ensuring that no two neighboring houses are of the same color.\nGiven an N by K matrix where the nth row and kth column represents the cost to build the nth house with kth color, return the minimum cost which achieves this goal.\n-----Sample Input-----\n3 3\n1 2 3\n4 5 6\n7 8 9\n\n-----Sample Output-----\n7\n\nn, k = [int(x) for x in stdin.readline().split()]\ncosts = []\nfor i in range(n):\n    costs.append(list(map(int, stdin.readline().split())))\n\nprint(costs)\n\n-----Problem-----\nA chessboard is an 8x8 grid, with each square labeled with a unique number 0 through 63. A knight's starting position is the square labeled \"Rook\" and a target position is the square labeled \"Bishop\".\nIn a single move, the knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from its current position. The knight can also move to a square that is one square horizontally and two squares vertically, or one square vertically and two squares horizontally away from its current position.\nGiven a starting square \"start\" and a target square \"end\", find the lowest number of moves required for the knight to travel from \"start\" to \"end\".\n-----Sample Input-----\nstart = \"A1\"\nend = \"C3\"\n\n-----Sample Output-----\n4"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n\n-------------\n\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\na\\nacornistnt') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\naaaaa\\naaaaa\\naaaaa\\naaaaa') == '3'\n\"\"\"\n\nimport sys\nimport string\n\nsys.setrecursionlimit(15000)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n3') == '2'\nassert solution('5\\n6') == '1'\nassert solution('1\\n5\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100') == '2'"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nprint('Cool!')"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\") == \"1\\n2\\n5\\n2\\n0\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1112222333\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nans = []\nfor _ in range(n):\n    k = int(sys.stdin.readline().strip())\n    l = 1\n    for i in range(1, k + 1):\n        l = (l * i) % 10\n    ans.append(l)\n\nprint('\\n'.join(map(str, ans)))\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('112123123412345$\\dots$') == '0'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '5'\nassert solution('112123123412345$\\dots$') == '0'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '5'\n\nassert solution('112123123412345$\\dots$') == '0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11223344556677889910010111213141516\") == \"0\" * 16\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1\n2\n3\n2\n1\n3\n4\n1\n3\n\"\"\") == \"2 1 2 3 2 1 3 4 1 3\"\n\nassert solution(\"\"\"\n3\n2\n2\n3\n\"\"\") == \"2 2 2 3\"\n\n\"\"\"\n  \nimport unittest\nfrom collections import deque"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2132\\n506\\n999999999\\n1000000000\\n\") == \"8\\n2\\n9\\n8\"\n\n\"\"\"\n\n\nfrom typing import Callable, Dict, List\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('112123123412345$\\dots$') == '1'\nassert solution('11112131234123412$\\dots$') == '2'\nassert solution('11111112222222$\\dots$') == '5'\nassert solution('1111211121212$\\dots$') == '4'\nassert solution('111211111212$\\dots$') == '3'"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\") == \"1 1 2 3 2 3 1 3 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\") == \"1 1 2 3 2 3 1 3 1\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\") == \"1 2 1 1 2\"\nassert solution(\"8 1\\n7 2\\n7 8\\n3 4\\n4 5\\n1 2\\n1 3\\n5 6\\n6 7\\n2 3\\n3 8\") == \"1 1 1 1 2 2 2 3 3 3\"\nassert solution(\"10 3\\n10 4\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"1 1 1 1 2 2 2 3 3 3\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n10 3\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3\\n1 1 2 3 2 3 1 3 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 1\\n1 4\\n1 2\\n') == '1\\n1 2 1 1 2'\nassert solution('6 2\\n4 5\\n3 6\\n3 5\\n5 2\\n') == '2\\n1 2 1 1 2'\nassert solution('6 3\\n4 5\\n3 6\\n3 5\\n5 2\\n') == '2\\n1 2 1 1 2'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"1 1 2 3 2 3 1 3 1\"\n\n-----Test 4-----\n\nInput\n5 3\n1 2\n2 3\n3 4\n4 5\n\nOutput\n2\n3 3 3\nInput\n4 1\n1 2\n1 3\n2 3\n\nOutput\n1\n3 3\nInput\n3 3\n1 2\n1 3\n2 3\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abc') == ''\nassert solution('abcd') == ''\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\"\n\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split(' '))\n\nroad = list(map(int, stdin.readline().strip().split(' ')))\n\nfor i in range(1, n):\n    road[i] = road[i] + road[i - 1]\n\nroad.sort(reverse=True)\n\nprint(n - road[k - 1] - 1)\nprint(' '.join(list(map(str, road[k - 1:]))))"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 3\") == \"1 1 2 3 2 3 1 3 1\"\nassert solution(\"3 1\\n1 4\\n1 2\") == \"1 1 1 2 2 2 2\"\n\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n):\n        self.size = n\n        self.edges = []\n        self.graph = [[] for _ in range(n)]\n\n    def addEdge(self, source, dest):\n        self.graph[source].append(dest)\n        self.graph[dest].append(source)\n        self.edges.append((source, dest))\n    \n    def dfs(self, source, visited, component):\n        visited[source] = True\n        for neighbour in self.graph[source]:\n            if visited[neighbour] == False:\n                self.dfs(neighbour, visited, component)\n        component.append(source)\n\n    def countComponents(self):\n        components = []\n        visited = [False] * self.size\n        for node in range(self.size):\n            if visited[node] == False:\n                component = []\n                self.dfs(node, visited, component)\n                components.append(component)\n        return len(components)\n    \n    def findClusters(self):\n        components = self.countComponents()\n        clusters = []\n        for component in components:\n            cluster = {}\n            for node in component:\n                cluster[node] = []\n                for edge in self.edges:\n                    if edge[0] == node:\n                        cluster[node].append(edge[1])\n                    if edge[1] == node:\n                        cluster[node].append(edge[0])\n            clusters.append(cluster)\n        return clusters"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected\nprint(solution(stdin))\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\n\n\n-----Solved-----\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0 0'\nassert solution('1\\n2') == '0 0'\nassert solution('2\\n1 2') == '1 0'\nassert solution('2\\n1 2 4') == '2 0'\nassert solution('4\\n1 2 3 4') == '2 2'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 4 4\n''') == '2 4'\nassert solution('''9\n1 1 8 8 8 4 4 4 4\n''') == '3 8'\nassert solution('''7\n4 3 7 1 4 3 3\n''') == '3 6'"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\n\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom math import ceil\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\nassert solution(\"8\\n6 6 4 2 4 4 2\") == \"4 8\"\nassert solution(\"1\\n1\") == \"0 1\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\n\"\"\"\n\n--- Day 5: Sunny with a Chance of Asteroids ---\n\nYou're starting to sweat as the ship makes its way toward Mercury. The Elves suggest that you get the air conditioner working by upgrading your ship computer to support the Thermal Environment Supervision Terminal.\n\nThe Thermal Environment Supervision Terminal (TEST) starts by running a diagnostic program (your puzzle input). The TEST diagnostic program will run on your existing Intcode computer after a few modifications:\n\nFirst, you'll need to add two new instructions:\n\nOpcode 3 takes a single integer as input and saves it to the position given by its only parameter. For example, the instruction 3,50 would take an input value and store it at address 50.\nOpcode 4 outputs the value of its only parameter. For example, the instruction 4,50 would output the value at address 50.\nPrograms that use these instructions will come with documentation that explains what should be connected to the input and output. The program 3,0,4,0,99 outputs whatever it gets as input, then halts.\n\nSecond, you'll need to add support for parameter modes:\n\nEach parameter of an instruction is handled based on its parameter mode. Right now, your ship computer already understands parameter mode 0, position mode, which causes the parameter to be interpreted as a position - if the parameter is 50, its value is the value stored at address 50 in memory. Until now, all parameters have been in position mode.\n\nNow, your ship computer will also need to handle parameters in mode 1, immediate mode. In immediate mode, a parameter is interpreted as a value - if the parameter is 50, its value is simply 50.\n\nParameter modes are stored in the same value as the instruction's opcode. The opcode is a two-digit number based only on the ones and tens digit of the value, that is, the opcode is the rightmost two digits of the first value in an instruction. Parameter modes are single digits, one per parameter, read right-to-left from the opcode: the first parameter's mode is in the hundreds digit, the second parameter's mode is in the thousands digit, the third parameter's mode is in the ten-thousands digit, and so on. Any missing modes are 0.\n\nFor example, consider the program 1002,4,3,4,33.\n\nThe first instruction, 1002,4,3,4, is a multiply instruction - the rightmost two digits of the first value, 02, indicate opcode 2, multiplication. Then, going right to left, the parameter modes are 0 (hundreds digit), 1 (thousands digit), and 0 (ten-thousands digit, not present and therefore zero):\n\nABCDE\n 1002\n\nDE - two-digit opcode,      02 == opcode 2\n C - mode of 1st parameter,  0 == position mode\n B - mode of 2nd parameter,  1 == immediate mode\n A - mode of 3rd parameter,  0 == position mode,\n                                  omitted due to being a leading zero\nThis instruction multiplies its first two parameters. The first parameter, 4 in position mode, works like it did before - its value is the value stored at address 4 (33). The second parameter, 3 in immediate mode, simply has value 3. The result of this operation, 33 * 3 = 99, is written according to the third parameter, 4 in position mode, which also works like it did before - 99 is written to address 4.\n\nParameters that an instruction writes to will never be in immediate mode.\n\nFinally, some notes:\n\nIt is important to remember that the instruction pointer should increase by the number of values in the instruction after the instruction finishes. Because of the new instructions, this amount is no longer always 4.\nIntegers can be negative: 1101,100,-1,4,0 is a valid program (find 100 + -1, store the result in position 4).\nThe TEST diagnostic program will start by requesting from the user the ID of the system to test by running an input instruction - provide it 1, the ID for the ship's air conditioner unit.\n\nIt will then perform a series of diagnostic tests confirming that various parts of the Intcode computer, like parameter modes, function correctly. For each test, it will run an output instruction indicating how far the result of the test was from the expected value, where 0 means the test was successful. Non-zero outputs mean that a function is not working correctly; check the instructions that were run before the output instruction to see which one failed.\n\nFinally, the program will output a diagnostic code and immediately halt. This final output isn't an error; an output followed immediately by a halt means the program finished. If all outputs were zero except the diagnostic code, the diagnostic program ran successfully.\n\nAfter providing 1 to the only input instruction and passing all the tests, what diagnostic code does the program produce?\n\n\n-----\n\nYour puzzle answer was 461723.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n\n-----\n\nYou are given a list of numbers in a random order. Print out the list in increasing order without any duplicates.\n\n-----\n\nIn order to solve this problem you will need to make use of Python's build-in function called \"sorted()\".\n\n-----\n\nTo solve this problem you will need to look at the documentation for Python's \"sorted()\" function.\n\n-----\n\nInput format\n\nThe first line of input contains an integer,, denoting the number of elements in the list.\nEach of the  subsequent lines contains an integer describing the value of the  element in the list.\n\nConstraints\n\nThe elements in the list are unique.\n\nOutput format\n\nPrint the list in increasing order.\n\n-----\n\nSample input\n\n6\n1\n2\n2\n3\n3\n4\nSample output\n\n1 2 3 4\n\n\n-----\n\nYou are given a list of numbers in a random order. Print"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3\\n3 1\\n1 2\\n2 4\") == \"2 3 1 4\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\nd = list(map(int, input().split()))"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\nassert solution(\"5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\nassert solution(\"1 2\\n2 1\") == '1 2'\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import deque\n\nN = int(stdin.readline())\nqueue = deque()\n\nfor i in range(N):\n    a, b = map(int, stdin.readline().split())\n    queue.append((a, b))\n\np = [None] * N\n\nfor i in range(N):\n    a, b = queue.popleft()\n    if i == 0:\n        if a == 1:\n            p[b - 1] = b\n        elif b == 1:\n            p[a - 1] = a\n        else:\n            p[a - 1] = a\n            p[b - 1] = b\n    else:\n        if p[a - 1] is None:\n            p[a - 1] = a\n        if p[b - 1] is None:\n            p[b - 1] = b\n        if a < b:\n            if p[a - 1] > p[b - 1]:\n                p[a - 1] = a\n                p[b - 1] = b\n            elif p[a - 1] == p[b - 1]:\n                p[a - 1] = a\n        else:\n            if p[a - 1] > p[b - 1]:\n                p[a - 1] = b\n                p[b - 1] = a\n            elif p[a - 1] == p[b - 1]:\n                p[a - 1] = b\n                p[b - 1] = a\n\nfor i in p:\n    stdout.write(str(i))\n    stdout.write('\\n')\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\\n\") == \"3 1 2\"\nprint('test passed')\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3\\n3 1\\n1 2\\n2 3\") == \"3 1 2\"\nassert solution(\"4\\n2 3\\n1 2\\n1 2\") == \"2 1 3\"\n\"\"\"\n\nfrom collections import Counter, deque\nfrom typing import List, Deque, Tuple\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\n'''"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2\\n') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 10 20\\n') == '1'\nassert solution('3\\n1 10 20\\n') == '1'\nassert solution('3\\n1 10 20\\n') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 6') == '1'\nassert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6\\n1 10 17 12 15 2\"\n) == \"3\"\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n\n\"\"\"\n\nimport sys\nimport typing\n\nsys.stdin = open(\"python/in.txt\")\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 10 20 30') == 3\nassert solution('6\\n1 10 17 12 15 2') == 1\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = []\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        s.append(abs(a[i] - a[j]))\nprint(max(s))\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n\"\"\"\n\nfrom collections import deque\nfrom math import inf\n\nstdin = input()\nstdin = stdin.split(\"\\n\")\nn = int(stdin[0])\narr = list(map(int, stdin[1].split()))"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1 5\\n2 0 5\\n0 1 2\\n1 0 1\\n0 1 1\\n0 0 1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1 5\\n2 0 5\\n0 1 2\\n1 0 1\\n0 0 1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1 5\\n2 0 5\\n0 1 2\\n1 0 1\\n0 0 1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test) == test_answer\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3'\n) == '4\\n-1\\n5\\n2\\n0\\n1'\n\nassert solution(\n    '3\\n15 5 3 2\\n15 5 4 3\\n16 7 5 2'\n) == '-1\\n0\\n1'\n\nassert solution(\n    '1\\n15 5 3 2'\n) == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"10 5 2 3\\n1 4 3 2\\n1 5 5 1\\n4 5 2 1\") == \"5\\n4\"\nassert solution(\"10 5 2 3\\n1 5 3 2\\n1 5 5 1\\n4 5 2 1\") == \"5\\n-1\"\nassert solution(\"10 5 2 3\\n1 5 4 2\\n1 5 5 1\\n4 5 2 1\") == \"5\\n4\"\nassert solution(\"10 5 2 3\\n1 5 5 1\\n1 5 3 2\\n4 5 2 1\") == \"5\\n4\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ac?b?c') == 24\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"a???c\") == 46"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a???c\") == \"46\"\nassert solution(\"cccbbbaaa\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''ac?b?c\n''') == 24\nassert solution('''???\n''') == 2835\nassert solution('''a???c\n''') == 46\nassert solution('''??????\n''') == 0\nassert solution('''a???c\n''') == 46\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ac?b?c\") == 24\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\n\nassert solution(\"????????\") == 2835\n\nassert solution(\"a???c\") == 46\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('a??b??c') == 2835\nassert solution('ac??b??c') == 46\n\n\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"aaaaa?aaa\") == 6\nassert solution(\"??a??\") == 36\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a???c\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"cccbbbaa\") == \"0\"\nassert solution(\"acabbbaaa\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('1 2 3 4 5') == '11'\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('1 3 3') == '5'\n\nassert solution('2 3 5') == '7'\n\nassert solution('2 1 1') == '7'\n\nassert solution('1 2 1') == '7'"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\nassert solution('4 0\\n1 3 3 7') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\"\"\") == \"18\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 3 3\\n1 2 1\\n') == '5'\nassert solution('4 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\") == \"16\"\nassert solution(\"5 4\") == \"18\"\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 3 3 7\n\"\"\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    3 2\n    1 3 3\n    2 3 5\n    2 1 1\n    \"\"\"\n) == '5'\n\nassert solution(\n    \"\"\"\n    4 0\n    1 3 3 7\n    \"\"\"\n) == '16'\n\nassert solution(\n    \"\"\"\n    5 4\n    1 2 3 4 5\n    1 2 8\n    1 3 10\n    1 4 7\n    1 5 15\n    \"\"\"\n) == '18'\n\nassert solution(\n    \"\"\"\n    4 0\n    1 3 3 7\n    \"\"\"\n) == '16'\n\nassert solution(\n    \"\"\"\n    5 4\n    2 4 5 6 9\n    2 3 6 5\n    2 4 7 10\n    3 4 7 10\n    \"\"\"\n) == '23'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n') == '14'\nassert solution('10 1 1\\n0 9\\n0 5\\n') == '45'\nassert solution('10 1 1\\n0 9\\n1 5\\n') == '-1'\nassert solution('10 1 1\\n0 9\\n1 5\\n') == '-1'\n\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0445 \u0438 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0438\u0434\u0443\u0442 \u043f\u043e\u0434\u0440\u044f\u0434. \n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: \nHello world!\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043a\u0438. \n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \nHello world!\n\nList1 = 'Hello world!'\nList2 = 'Hello world!'\nprint(List1)\nprint(sorted(List1))\nprint(List2)\nprint(sorted(List2))\n\"\"\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\nassert solution(\"10 1 1\\n0 9\\n0 5\") == 45\nassert solution(\"10 1 1\\n0 9\\n1 5\") == -1\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\nassert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 1\") == \"14\"\nassert solution(\"10 1 1\") == \"45\"\nassert solution(\"10 1 1\") == \"45\"\n\"\"\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\n\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 7') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A) == 'Yes'\nassert solution(A) == 'Yes'\nassert solution(A) == 'Yes'\nassert solution(A) == 'Yes'\nassert solution(A) == 'Yes'\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 5\\n') == 'Yes'\nassert solution('1 1 1\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\na, b, c = list(map(int, stdin.split()))"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 1\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 3\") == \"Yes\"\nassert solution(\"7 1 2\") == \"Yes\"\n\"\"\"\n\nA, B, C = [int(i) for i in input().split()]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\nassert solution(\"3 3 3\") == \"No\"\n\"\"\"\n\nA, B, C = map(int, input().split())\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2\") == \"No\"\nassert solution(\"1 2 3\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 2 4\") == \"No\"\nassert solution(\"9 9 9\") == \"Yes\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\\n\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"2\", \"12\", \"5\", \"1000 2000\"]) == \"1\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12 1000 2000\") == \"1\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 5\\n1000 2000') == '1'\n\"\"\"\n\nimport math\nimport sys\n\nN = int(sys.stdin.readline())\nT, A = map(int, sys.stdin.readline().split())\nH = [int(h) for h in sys.stdin.readline().split()]\n\nmin_diff = 10 ** 9\nmin_diff_place = 0\n\nfor i in range(N):\n    diff = math.fabs(T - (H[i] * 0.006))\n    if diff < min_diff:\n        min_diff = diff\n        min_diff_place = i + 1\n\nprint(min_diff_place)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n1\") == \"0\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\\n\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\nt, a = map(int, stdin.readline().split())\nh = [int(x) for x in stdin.readline().split()]\n\nprint(h.index(min(i for i in h if t - i * 0.006 < a < t + i * 0.006)))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nt, a = map(int, sys.stdin.readline().split())\nh = list(map(int, sys.stdin.readline().split()))\n\nh_sum = sum(h)\nh_avg = h_sum / n\n\nh_avg_abs = abs(h_avg - a)\nh_abs_min = min(h_avg_abs, t - h_avg_abs)\n\nprint(h.index(h_abs_min))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 5\\n1000 2000') == '1'\n\n-----\n\n6. Given two strings a and b consisting of lowercase characters. The task is to make these two strings anagram. An anagram of a string is another string that contains same characters, only the order of characters can be different. For example, \u201cact\u201d and \u201ctac\u201d are anagram of each other.\n\nInput Format:\nThe first line of input contains a single integer T denoting the number of test cases.\nThe first line of each test case contains a single string denoting s1.\nThe second line of each test case contains a single string denoting s2.\n\nOutput Format:\nFor each testcase, in a new line, print 1 if the two strings are anagram else print 0.\n\nYour Task:\nThis is a function problem. You only need to complete the function anagram that takes two strings as parameters and returns either 0 or 1.\n\nConstraints:\n1 <= T <= 100\n1 <= |s1|,|s2| <= 105\n\nExample:\nInput:\n2\ngeeksforgeeks forgeeksgeeks\nprogramming\npython code\nOutput:\n0\n1\n\nExplanation:\nTestcase 1:\ns1 = geeksforgeeks\ns2 = forgeeksgeeks\nBoth the strings are anagrams of each other.\n\nTestcase 2:\ns1 = python code\ns2 = python code\nBoth the strings are anagrams of each other.\n\n-----Source: https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other/\n-----\n\n7. Given a string, S, of length N that is indexed from 0 to N-1, print its even-indexed and odd-indexed characters as 2 space-separated strings on a single line (see the Sample below for more detail).\n\nNote: 0 is considered to be an even index.\n\n-----Sample Input-----\n2\nHacker\nRank\n\n-----Sample Output-----\nHce akr\nRn ak\n\n-----\n\n8. Print the output of the following program:\n\nSample Input:\n6\n78 65 89 12 56 63\n\n-----Explanation-----\n\nSample Output:\n78 12 56 89 63 89\n\n-----\n\n9. Print the output of the following program:\n\nSample Input:\n4\nHacker\nRank\nHacker\nRank\n\n-----Explanation-----\n\nSample Output:\nHce akr\nRn ak\nHce akr\nRn ak\n\n-----\n\n10. Print the output of the following program:\n\nSample Input:\n5\n0 1 2 3 4\n\n-----Explanation-----\n\nSample Output:\n0 1 2 3 4\n\n-----\n\n11. Print the output of the following program:\n\nSample Input:\n7\n9 4 5 6 1 2 3\n\n-----Explanation-----\n\nSample Output:\n9 4 5 6 1 2 3\n\n-----\n\n12. Print the output of the following program:\n\nSample Input:\n6\n1 2 3 4 5 6\n\n-----Explanation-----\n\nSample Output:\n1 2 3 4 5 6\n\n-----\n\n13. Print the output of the following program:\n\nSample Input:\n3\n2 1 3\n\n-----Explanation-----\n\nSample Output:\n2 3 1\n\n-----\n\n14. Print the output of the following program:\n\nSample Input:\n3\n8 5 9\n\n-----Explanation-----\n\nSample Output:\n5 8 9\n\n-----\n\n15. Print the output of the following program:\n\nSample Input:\n5\n10 2 3 4 5\n\n-----Explanation-----\n\nSample Output:\n10 4 5 2 3\n\n-----\n\n16. Print the output of the following program:\n\nSample Input:\n5\n10 5 4 3 2\n\n-----Explanation-----\n\nSample Output:\n10 5 4 3 2\n\n-----\n\n17. Print the output of the following program:\n\nSample Input:\n5\n9 5 6 8 9\n\n-----Explanation-----\n\nSample Output:\n5 6 8 9 9\n\n-----\n\n18. Print the output of the following program:\n\nSample Input:\n5\n10 9 8 7 6\n\n-----Explanation-----\n\nSample Output:\n10 9 8 7 6\n\n-----\n\n19. Print the output of the following program:\n\nSample Input:\n6\n1 2 3 4 5 6\n\n-----Explanation-----\n\nSample Output:\n1 2 3 4 5 6\n\n-----\n\n20. Print the output of the following program:\n\nSample Input:\n5\n1 2 3 4 5\n\n-----Explanation-----\n\nSample Output:\n2 3 4 5 1\n\n-----\n\n21. Print the output of the following program:\n\nSample Input:\n6\n8 5 4 3 2 1\n\n-----Explanation-----\n\nSample Output:\n8 5 4 3 2 1\n\n-----\n\n22. Print the output of the following program:\n\nSample Input:\n5\n3 2 1 6 4\n\n-----Explanation-----\n\nSample Output:\n3 2 1 6 4\n\n-----\n\n23. Print the output of the following program:\n\nSample Input:\n5\n8 7 9 2 5\n\n-----Explanation-----\n\nSample Output:\n7 9 2 5 8\n\n-----\n\n24. Print the output of the following program:\n\nSample Input:\n5\n10 2 5 4 1\n\n-----Explanation-----\n\nSample Output:\n10 4 5 2 1\n\n-----\n\n25. Print the output of the following program:\n\nSample Input:\n6\n1 2 3 4 5 6\n\n-----Explanation-----\n\nSample Output:\n1 2 3 4 5 6\n\n-----\n\n26. Print the output of the following program:\n\nSample Input:\n5\n8 5 9 7 0\n\n-----Explanation-----\n\nSample Output:\n8 5 9 0 7\n\n-----\n\n27. Print the output of the following program:\n\nSample Input:\n3\n1 0 1\n\n-----Explanation-----\n\nSample Output:\n0 1 1\n\n-----\n\n28. Print the output of the following program:\n\nSample Input:\n6\n0 5 8 9 1 2\n\n-----Explanation-----\n\nSample Output:\n0 5 8 9 1 2\n\n-----\n\n29. Print the output of the following program:\n\nSample Input:\n4\n3 5 4 0\n\n-----Explanation-----\n\nSample Output:\n3 4 0 5\n\n-----\n\n30. Print the output of the following program:\n\nSample Input:\n4\n6 5 4 3\n\n-----Explanation-----\n\nSample Output:\n6 5 4 3\n\n-----\n\n31. Print the output of the following program:\n\nSample Input:\n6\n8 0 2 3 5 6\n\n-----Explanation-----\n\nSample Output:\n8 0 2 3 5 6\n\n-----\n\n32. Print the output of the following program:\n\nSample Input:\n5\n2 3 4 5 6\n\n-----Explanation-----\n\nSample Output:\n2 3 4 5 6\n\n-----\n\n33. Print the output of the following program:\n\nSample Input:\n7\n9 8 2 6 7 0 1\n\n-----Explanation-----\n\nSample Output:\n9 8 2 6 7 0 1\n\n-----\n\n34. Print the output of the following program:\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1'\n\nIf you want to test the solution locally, get the input from the user:\n\nN = int(input())\nM = int(input())\n\nassert solution(input()) == str(solution)"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == 1\nassert solution('2 2') == 0\nassert solution('2 3') == 1\nassert solution('3 3') == 1\nassert solution('3 4') == 2\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '3'\nassert solution('1 1') == '0'\nassert solution('2 2') == '0'\nassert solution('3 4') == '1'\nassert solution('5 2') == '10'\n\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n1 2\\n4 1\\n2 4\\n\") == '1'\n\"\"\"\n\nfrom sys import stdin\n\nN, M = [int(x) for x in stdin.readline().split()]\ncnt = 0\nfor _ in range(N):\n    if int(stdin.readline()) % 2 == 0:\n        cnt += M\n    else:\n        cnt += 0\nprint(cnt / (N + M))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"10 10\") == \"4\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"8 16\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n') == 1\nassert solution('2 2\\n') == 0\n\n---\n---\n### Best time complexity for this solution is O(N*M) because we are only iterating through input once.\n\n### To solve this problem, we are going to start with three variables:\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 3, 3) == 0\nassert solution(\"ACACTACG\", 2, 8) == 3\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ATCODER\") == \"3\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('ATC') == '2'\nassert solution('AATTCCGGG') == '7'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(ACACTACG) == 2\nassert solution(ATCODER) == 3\nassert solution(ACGATCODER) == 6\nassert solution(AC) == 0"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ACACTACG\\n3 7\\n2 3\\n1 8') == '2\\n0\\n3'\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"AGGTAB\") == \"1 2 4 5\"\nassert solution(\"ATAGAT\") == \"2 2 1 1\"\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint('All tests passed.')\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == test_result\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 3, 3) == 0\nassert solution(\"ACACTACG\", 1, 8) == 3\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\nassert solution('4 1\\n20 10 10\\n') == '20'\n\"\"\"\nfrom typing import List, Tuple\n\nn, k = map(int, stdin.readline().split())\nprices: List[Tuple[int, int]] = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n\nprices = sorted(prices, key=lambda x: x[1], reverse=True)\n\nsum_ = 0\nfor i in range(k):\n    sum_ += prices[i][1]\n\nprint(sum_)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\nprices = list(map(int, sys.stdin.readline().strip().split()))\n\nmax_price = sum(prices[:k])\ncurr_price = max_price\n\nfor i in range(k, n):\n    curr_price -= prices[i-k]\n    curr_price += prices[i]\n    if curr_price > max_price:\n        max_price = curr_price\n\nprint(max_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == '210'\nprint('Test success.')"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 100 80 120 80\") == \"210\"\nprint(solution(\"50 100 80 120 80\"))\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n10 20\\n30 40\") == \"80\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\np = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint(solution(\"5 3\\n50 100 80 120 80\"))\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint(solution(\"5 3\\n50 100 80 120 80\"))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"5 3\\n50 100 80 120 80\\n\") == \"210\"\nassert solution(\n\"5 3\\n40 120 100 80 100\\n\") == \"240\"\n\"\"\"\n\nN, K = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\n\ntotal = 0\nfor i in range(K):\n    total += prices[i]\n\nprint(total)"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 3 4\\n5 1 1\") == \"8\"\nassert solution(\"1 3 4\\n5 1 1\\n5 5 1\") == \"9\"\nassert solution(\"1 3 4\\n5 1 1\\n5 5 1\\n5 5 1\") == \"10\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 3 5\") == \"5\"\nassert solution(\"2 4 6\") == \"10\"\nassert solution(\"2 4 7\") == \"14\"\nassert solution(\"2 4 8\") == \"20\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 2 1') == '5'\n\nprint('Success')\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == 4\nassert solution(\"1 3 5\") == 9\nassert solution(\"3 3 3\") == 7\nassert solution(\"5 5 5\") == 9\nassert solution(\"1 1 1\") == 0\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 5) == \"0\"\n'''\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"1 5\") == \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\nassert solution('5 3') == '10'\nassert solution('7 5') == '10'\n\n---\n\nhttps://www.codewars.com/kata/57d12a9c1c9a6cdec00029a1\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"0\\n\"\nprint(solution(\"3 5\"))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 3') == '10'\nassert solution('0 3') == '0'\nassert solution('10 2') == '10'\nassert solution('4 1') == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nX, A = input().split(' ')\nprint(int(X) < int(A))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\nimport sys\n\nsys.stdin = open('test_files/Y11R5P1/A.in')\nsys.stdout = open('test_files/Y11R5P1/A.out', 'w')\n\nfrom math import inf"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\n\nprint(min([abs(n-k), abs(n-k-k), abs(n-k-k-k)]))"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == '1'\nassert solution('1 3') == '0'\nassert solution('1 5') == '0'\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'3 3 3') == 'win'\nassert solution(\n'4 5 6') == 'bust'\nassert solution(\n'7 8 9') == 'win'\nassert solution(\n'7 7 7') == 'bust'\n\n\"\"\"\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nprint('win' if a + b + c >= 22 else 'bust')\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 9') == 'win'\n\n\"\"\"\nfrom functools import reduce\nfrom typing import Dict, List, Tuple, Union\n\n\"\"\"\n\ud68c\uace0: \n\ucd5c\uc885\uc801\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\ub358 \ubc29\ud5a5\uc73c\ub85c \uc54c\uace0\ub9ac\uc998\uc744 \uc124\uacc4\ud588\uc5c8\ub2e4.\n\uc774\ub54c \uc5ec\ub7ec\ubd84\uc740 \uc54c\uace0\ub9ac\uc998\uc744 \ucc38\uace0\ud574\uc11c \ucd94\uac00\uc801\uc73c\ub85c \uc54c\uace0\ub9ac\uc998\uc744 \uc124\uacc4\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4.\n\n1. \uc785\ub825\ubc1b\uc740 \ub370\uc774\ud130\ub97c \ud55c \uac1c\uc758 \uc790\ub8cc\uad6c\uc870\ub85c \ud1b5\uc77c\uc2dc\ud0a4\uae30\n2. \ub370\uc774\ud130 \uac1c\uc218\uac00 3\uac1c \uc774\uc0c1\uc778 \uacbd\uc6b0 \ud1b5\uc77c\uc2dc\ud0a4\uae30\n3. \ub370\uc774\ud130\uc758 \uac12\uc774 \ucd5c\uc18c 2\uc9c4\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc81c\uacf5\ub418\ub294\uc9c0 \ud655\uc778\ud558\uae30\n4. \ub370\uc774\ud130\uc758 \uac12\uc774 \ucd5c\uc18c 2\uc9c4\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc81c\uacf5\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \ud68c\ubb38\uc774 \ub418\ub294\uc9c0 \ud655\uc778\ud558\uae30\n5. \ud68c\ubb38\uc774 \ub418\uba74 \ud569\uc774 21\uc774 \ub418\ub294 \uc870\uac74\uc744 \ucd94\uac00\ud558\uc5ec bust\uac00 \uc544\ub2cc win\uc744 \ucd9c\ub825\ud558\uae30\n6. \ud68c\ubb38\uc774 \ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \uac00\ub2a5\ud55c \ub2f5\uc778\uc9c0 \ud655\uc778\ud558\uae30\n7. \uac00\ub2a5\ud55c \ub2f5\uc774 \uc544\ub2c8\uba74 bust\ub97c \ucd9c\ub825\ud558\uae30\n\n\uba85\ud655\ud558\uac8c \uc54c\uace0\ub9ac\uc998\uc744 \uc124\uacc4\ud588\uc9c0\ub9cc, \uc54c\uace0\ub9ac\uc998\uc744 \uc124\uacc4\ud55c \ub3c4\uc911\uc5d0 \uc790\uccb4\uc801\uc73c\ub85c \ub2f5\uc744 \ucd9c\ub825\ud558\ub294 \ubd80\ubd84\uc5d0 \uc2e4\ud328\ud55c \uc6d0\uc778\uc774 \ubc1c\uacac\ub41c \uacbd\uc6b0 \ud639\uc740 \uadf8 \uc804\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud574\uc11c \ub2f5\uc744 \ucd9c\ub825\ud558\ub294 \ubd80\ubd84\uc5d0 \uc2e4\ud328\ud55c \uacbd\uc6b0\uac00 \uc788\uc5c8\ub2e4.\n\uc6b0\uc120 \ub370\uc774\ud130\ub97c \ud55c \uac1c\uc758 \uc790\ub8cc\uad6c\uc870\ub85c \ud1b5\uc77c\uc2dc\ud0a4\ub824\uace0 \ud588\uc9c0\ub9cc \uc608\uc678\ucc98\ub9ac\ub85c \uc870\uac74\ubb38\uc744 \ub354 \ub9ce\uc774 \ucd94\uac00\ud558\uc600\uace0 \uc5ec\uae30\uc11c\ub3c4 \ub354 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\ub97c \uc9dc\uc57c\ud560 \ub4ef \ud558\ub2e4.\n\ubb38\uc81c\uc758 \ub2f5\uc744 \uc5bb\uc744 \uc218 \uc788\ub3c4\ub85d \uc218\uc815\ud574\uc57c \ud558\ub294 \uac83\uc740 \ud68c\ubb38\uc774 \uc544\ub2c8\uba74 \ud68c\ubb38\uc774 \ub420 \uc218 \uc788\ub294\uc9c0, \uc544\ub2c8\uba74 \ubaa8\ub4e0 \ub370\uc774\ud130 \uac12\uc774 2\uc9c4\uc218\ub85c \uc81c\uacf5\ub418\ub294\uc9c0 \ud655\uc778\ud558\uae30 \ub4f1\uc774\ub2e4.\n\n\"\"\"\n\n\"\"\"\n\uc785\ub825\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \ubc1b\uc544 \ucd5c\uc885\uc801\uc73c\ub85c \ucd5c\uc885 \uac12\uc774 \ucd9c\ub825\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \uc9dc\uc57c\ud55c\ub2e4.\n\uc785\ub825\ubc1b\uc740 \ub370\uc774\ud130\uc758 \uac1c\uc218\uac00 3\uac1c \uc774\uc0c1\uc778 \uacbd\uc6b0\ub9cc \uc704\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4.\n\ub370\uc774\ud130\uc758 \uac1c\uc218\uac00 3\uac1c \uc774\uc0c1\uc778 \uacbd\uc6b0\ub294 \uc544\ub798\uc5d0 \uc815\ubcf4\ub97c \ud1b5\uc77c\uc2dc\ud0a4\ub294 \uc791\uc5c5\uc774 \uc788\ub294\ub370, \ud68c\uace0\ub294 \ud558\ub098\ub3c4 \ucc38\uace0\ud558\uc9c0 \uc54a\uc558\ub2e4.\n\ub370\uc774\ud130\uc758 \uac12\uc774 \ucd5c\uc18c 2\uc9c4\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc81c\uacf5\ub418\ub294\uc9c0 \ud655\uc778\ud558\uae30\n\ub370\uc774\ud130\uc758 \uac12\uc774 \ucd5c\uc18c 2\uc9c4\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc81c\uacf5\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \ud68c\ubb38\uc774 \ub418\ub294\uc9c0 \ud655\uc778\ud558\uae30\n\ud68c\ubb38\uc774 \ub418\uba74 \ud569\uc774 21\uc774 \ub418\ub294 \uc870\uac74\uc744 \ucd94\uac00\ud558\uc5ec bust\uac00 \uc544\ub2cc win\uc744 \ucd9c\ub825\ud558\uae30\n\ud68c\ubb38\uc774 \ub418\ufffd"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n\ninput = input().split(' ')"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == 'win'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"1 2 3\") == \"bust\"\nassert solution(\"6 9 11\") == \"bust\"\nassert solution(\"1 1 1\") == \"bust\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('5 3 3') == \"bust\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 7 11') == 'bust'\nassert solution('5 6 7') == 'win'\nassert solution('5 6 13') == 'bust'\nassert solution('5 7 9') == 'win'\n\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 5 8') == 'bust'\nassert solution('5 5 20') == 'bust'\nassert solution('1 1 1') == 'bust'\nassert solution('1 2 3') == 'win'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"8\"\n\n-----"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '6'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('1') == '1'\n\"\"\"\n\nn = int(input())\n\ndivisors = []\n\nfor i in range(1, n + 1):\n    if n % i == 0:\n        divisors.append(i)\n\nprint(min(divisors))\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\nassert solution('5 7') == '14'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nprint('Test passed\\n')\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nimport sys\n\nfrom tools import timing\n\n\n@timing\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '8'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"6\"\nassert solution(\"6\") == \"6\"\nassert solution(\"7\") == \"14\"\nassert solution(\"10\") == \"100\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '6'\nassert solution('5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 4\") == 2\nassert solution(\"3 3\\n3 4\") == 1\nassert solution(\"4 1\\n2 3\") == 2\nassert solution(\"2 1\\n4 3\") == 2\nassert solution(\"4 1\\n1 2\") == 3\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2') == '2'\n\"\"\"\n\nN, D = map(int, input().split())\n\nmax_iter = 0\nfor i in range(N):\n    max_iter += (D + 1)\n    D += 1\n\nprint(max_iter)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\nThis problem can be solved using binary search in O(n log n) time, where n is the number of input lines.\n\nLet L be the maximum number of apples that a inspector can inspect. Then, we can partition the number of apples into two parts:\n\nT(1) = { apples[i] : i \\in [1, D] }\nT(2) = { apples[i] : i \\in [D, N] }\n\nIn order to achieve the objective, one needs to inspect apples[i] in order for every i.\nIf a number of apples is in the first part, then one should always inspect it.\nOtherwise, if the number of apples is in the second part, one should only inspect it if it is the largest among all numbers in the first part.\nThis means that if we have to inspect apples[i] (1 \\leq i \\leq D) then we can inspect apples[i] (1 \\leq i \\leq D), because they are the largest among all numbers in the first part.\nWe can also infer that if we have to inspect apples[i] (D \\leq i \\leq N) then one should always inspect apples[i] (D \\leq i \\leq N).\n\nThen, the task is to find a partition of the number of apples that satisfies the constraints.\nWe can apply binary search in the following way:\n\n1. We can define a recursive function solve(L, T, apples) that takes as arguments the number of apples that are not yet inspected and the total number of apples that we have inspected so far, and returns the minimum number of inspectors that we need to deploy.\n\n2. We know that the number of apples that are not yet inspected is T - sum(T).\n\n3. We also know that the number of apples that we have inspected so far is sum(T).\n\n4. To find a partition of the number of apples that satisfies the constraints, we should decide whether the number of apples that are not yet inspected is greater than the number of apples that we have inspected so far.\n\n5. If the number of apples that are not yet inspected is greater than the number of apples that we have inspected so far, then the partition is not a solution because we cannot achieve the objective.\n\n6. Otherwise, if the number of apples that are not yet inspected is equal to the number of apples that we have inspected so far, then we should decide whether the number of apples that are not yet inspected is greater than or equal to L.\n\n7. If the number of apples that are not yet inspected is greater than or equal to L, then we know that it is a solution because we have reached the maximum number of apples that can be inspected.\n\n8. Otherwise, if the number of apples that are not yet inspected is smaller than L, then we need to split the number of apples into two parts:\n\nT(1) = { apples[i] : i \\in [1, D] }\nT(2) = { apples[i] : i \\in [D, N] }\n\nIn order to achieve the objective, one needs to inspect apples[i] for every i.\nWe can split the number of apples into two parts and inspect apples[i] for every i.\nIf the number of apples is in the first part, then we will check apples[i] (1 \\leq i \\leq D).\nIf the number of apples is in the second part, then we will check apples[i] (D \\leq i \\leq N).\nIn the worst case, we will inspect apples[i] (1 \\leq i \\leq D) for every i.\n\n9. If the number of apples is in the first part, then we will inspect apples[i] (1 \\leq i \\leq D), because they are the largest among all numbers in the first part.\nIf the number of apples is in the second part, then we will always inspect apples[i] (D \\leq i \\leq N), because they are the largest among all numbers in the first part.\n\n10. If the number of apples is in the first part, then we can split the number of apples into two parts:\n\nT(1) = { apples[i] : i \\in [1, D] }\nT(2) = { apples[i] : i \\in [D, N] }\n\nIn the worst case, we will split the number of apples into two parts:\n\nT(1) = { apples[i] : i \\in [1, D] }\nT(2) = { apples[i] : i \\in [D, N] }\n\n11. The worst case is also the best case, which means that if the number of apples is in the second part, then we should always inspect apples[i] (D \\leq i \\leq N) for every i.\n\n12. We can apply binary search in the following way:\n\n1. We can define a recursive function solve(L, T, apples) that takes as arguments the number of apples that are not yet inspected and the total number of apples that we have inspected so far, and returns the minimum number of inspectors that we need to deploy.\n\n2. If we have to split the number of apples into two parts, then we split the number of apples into two parts:\n\nT(1) = { apples[i] : i \\in [1, D] }\nT(2) = { apples[i] : i \\in [D, N] }\n\n3. We can define a function count_apples(T, apples) that takes as arguments the number of apples that are not yet inspected and the total number of apples that we have inspected so far, and returns the number of apples that we have inspected so far.\n\n4. If we have to inspect apples[i] (1 \\leq i \\leq D), then we should count apples[i] for every i.\nIf we have to inspect apples[i] (D \\leq i \\leq N), then we should count apples[i] for every i.\nIn the worst case, we will count apples[i] for every i.\n\n5. If we have to split the number of apples into two parts, then we will count apples[i] for every i.\n\n6. We will use binary search in the following way:\n\n1. We can define a recursive function solve(L, T, apples) that takes as arguments the number of apples that are not yet inspected and the total number of apples that we have inspected so far, and returns the minimum number of inspectors that we need to deploy.\n\n2. If we have to inspect apples[i] (1 \\leq i \\leq D), then we will count apples[i] for every i.\n\n3. If we have to inspect apples[i] (D \\leq i \\leq N), then we will count apples[i] for every i.\n\n4. If we have to split the number of apples into two parts, then we will count apples[i] for every i.\n\n5. We will apply binary search in the following way:\n\n1. If we have to inspect apples[i] (1 \\leq i \\leq D), then we will count apples[i] for every i.\n\n2. If we have to inspect apples[i] (D \\leq i \\leq N), then we will count apples[i] for every i.\n\n3. If we have to split the number of apples into two parts, then we will count apples[i] for every i.\n\n4. We can apply binary search in the following way:\n\n1. If we have to inspect apples[i] (1 \\leq i \\leq D), then we will count apples[i] for every i.\n\n2. If we have to inspect apples[i] (D \\leq i \\leq N), then we will count apples"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2\\n') == 2\n\"\"\"\n\n\"\"\"\nsample input :\n1\n2\n\nsample output :\n2\n\nsample input :\n1\n0\n\nsample output :\n0\n\nSolution :\nSince 1 apple tree will always have an apple, we need at least one inspector.\nWe can place the inspector under any of the trees.\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3\\n1 2\\n2 3\\n3 3\\n\") == 2\n\n\"\"\"\n\n\"\"\"\nINPUT:\n9 3\n\nOUTPUT:\n3\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n5 5') == '2'\nassert solution('4 5\\n5 5') == '2'\nassert solution('4 3\\n5 5') == '1'\n\n\"\"\"\nfrom math import floor"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"45\") == \"bon\"\nassert solution(\"78\") == \"hon\"\nassert solution(\"904\") == \"pon\"\nassert solution(\"100\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"pon\"\nprint(solution(\"16\"))\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 'hon'\nassert solution('10') == 'pon'\nassert solution('15') == 'bon'\nassert solution('100') == 'pon'\nassert solution('1000') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''16''') == 'pon'\nassert solution('''24''') == 'bon'\nassert solution('''34''') == 'hon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nN = int(stdin.readline())\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == 'pon'\nassert solution('18') == 'hon'\nassert solution('20') == 'hon'\nassert solution('110') == 'bon'\nassert solution('56') == 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 4 4''') == '8'\nassert solution('''3\n3 1 2''') == '5'\nassert solution('''3\n1 2 3''') == '4'\n\n---------------------\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 1 2\\n') == '11'\n\"\"\"\n\nN = int(stdin.readline())\ntakoyaki_list = list(map(int, stdin.readline().split()))\n\nprint(sum(\n    sum(\n        takoyaki_list[i] * takoyaki_list[j]\n        for i in range(N)\n        if i!= j\n    )\n    for j in range(N)\n))\n\n\"\"\"\nShort solution:\nprint(sum(sum(i * j for i in range(1, N + 1) if i!= j) for j in range(N)))\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n3 1 2') == '11'\nprint(\"Test 1 PASSED\")\n\n-----Test 2-----\nInput:\n1\n1\n\n-----Sample Output-----\n1\n\n-----Test 3-----\nInput:\n2\n5 5\n\n-----Sample Output-----\n10\n\n-----Test 4-----\nInput:\n4\n10 5 7 12\n\n-----Sample Output-----\n66\n\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 11\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\n\nn = int(inputs[0])\na = list(map(int, inputs[1].strip().split()))\nb = [0 for i in range(len(a))]\n\nfor i in range(len(a)):\n    b[i] = a[i] - i\n\nc = [0 for i in range(len(a))]\nfor i in range(len(a)):\n    if i == 0:\n        c[0] = a[0] - 0\n    else:\n        c[i] = c[i - 1] + a[i] - i\n\ntotal = 0\nfor i in range(len(c)):\n    for j in range(i + 1, len(c)):\n        total += c[j] * b[i]\n\nprint(total)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\\n1 2 3\"\n) == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '11'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1\") == 6\nassert solution(\"3 1 2\") == 11\n\"\"\"\n\nimport numpy as np\n\nN = int(input())\nd = list(map(int, input().split()))\n\nhealth = np.zeros(N)\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        health[i] += d[j]\n        health[j] += d[i]\n\nprint(sum(health))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"5\\n4\\n5\\n5\\n5\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == '4\\n3\\n4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\":\\n4\\n3\\n4\\n\") == \"4\\n3\\n4\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n4\\n3\") == \"4\"\nassert solution(\"1\\n4\\n3\\n\") == \"3\"\nassert solution(\"1\\n4\\n3\\n8\\n\") == \"8\"\nassert solution(\"1\\n4\\n3\\n8\\n7\\n5\\n\") == \"8\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '6\\n5\\n6\\n'\n\"\"\"\n\n\n\"\"\"\nSolution 2\n\nWrite a program that:\nasks for N\nasks for N lines, each containing exactly one integer, with a maximum of 200000.\nprints N lines, each containing the maximum of the remaining N-1 integers\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - 1 \\leq A_i \\leq 200000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n\n-----Output-----\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Sample Input-----\n3\n1\n4\n3\n\n-----Sample Output-----\n4\n3\n4\n\n - The maximum value among the two elements other than A_1, that is, A_2 = 4 and A_3 = 3, is 4.\n - The maximum value among the two elements other than A_2, that is, A_1 = 1 and A_3 = 3, is 3.\n - The maximum value among the two elements other than A_3, that is, A_1 = 1 and A_2 = 4, is 4.\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\nassert solution('2\\n4\\n3\\n') == '4\\n3\\n'\nassert solution('2\\n4\\n3\\n') == '4\\n3\\n'\nassert solution('1\\n4\\n3\\n') == '4\\n3\\n'\nassert solution('1\\n4\\n3\\n') == '4\\n3\\n'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\"\n\nN = int(input())\nlst = []\nlst1 = []\nfor i in range(N):\n    lst.append(int(input()))\n\nfor i in range(N):\n    if i == 0:\n        for j in range(i + 1, N):\n            if lst[j] > lst[i]:\n                lst1.append(lst[j])\n        if len(lst1) == 0:\n            print(max(lst))\n        else:\n            print(max(lst1))\n    elif i > 0 and i < N - 1:\n        for j in range(i + 1, N):\n            if lst[j] > lst[i]:\n                lst1.append(lst[j])\n        if len(lst1) == 0:\n            print(max(lst))\n        else:\n            print(max(lst1))\n    elif i == N - 1:\n        for j in range(i - 1, N):\n            if lst[j] > lst[i]:\n                lst1.append(lst[j])\n        if len(lst1) == 0:\n            print(max(lst))\n        else:\n            print(max(lst1))"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == 9\n\"\"\"\n\nA, B = [int(num) for num in stdin.split()]\n\nfor i in range(A+1, B):\n    if i % 2 == 0:\n        print(int((i/2))*2)\n    else:\n        print(int(i/2))"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\nassert solution(\"5 1\\n\") == \"1\"\nassert solution(\"1 3\\n\") == \"0\"\nassert solution(\"3 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"10 4\") == \"8\"\nassert solution(\"10 1\") == \"10\"\nassert solution(\"10 9\") == \"10\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"3 5\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\nprint(\"PASSED\")\n\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n') == '9'\n'''"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == 9\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"6 6\") == \"6\"\n\"\"\"\nimport itertools\n\nclass Solution:\n    def max_coins(self, inputs: list) -> int:\n        l = [int(x) for x in inputs.split()]\n        A = l[0]\n        B = l[1]\n\n        s = list(range(A, B+1))\n\n        result = 0\n        for l in itertools.combinations(s, 2):\n            result = max(result, l[0]*l[1])\n\n        return result"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n-30 -10 10 20 50') == '40'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\nassert solution(\"5 1\\n-30 -10 10 20 50\") == \"10\"\nassert solution(\"5 2\\n-30 -10 10 20 50\") == \"7\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13') == 2\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '0'\nassert solution('10 15') == '2'\n\"\"\"\n\nimport sys\n\ntry:\n    n, m = list(map(int, sys.stdin.readline().split()))\n    if n > m:\n        print(n - m)\n    else:\n        print(m - n)\nexcept:\n    print('0')\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a=8, b=13) == '2'\nprint(\"Test 1 OK\")\n\n------END OF FILE------\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13\\n') == '2'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 13\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(real_input))\n\n\"\"\"\n\nimport math\n\ninput_str = input()\na, b = map(int, input_str.split())\n\nsnow_cover = math.ceil((b - a) / 2)\nprint(snow_cover)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"8 9\") == \"2\"\nassert solution(\"15 18\") == \"1\"\nassert solution(\"100 102\") == \"2\"\nassert solution(\"101 102\") == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n10 15\") == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 15\") == \"2\"\nassert solution(\"8 13\") == \"2\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4') == '3'\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\nassert solution('3 3') == '2'\nassert solution('4 4') == '3'\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 4''') == '3'\nassert solution('''10 4''') == '3'\nassert solution('''10 4''') == '3'\nassert solution('''10 4''') == '3'\nassert solution('''10 4''') == '3'\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"10 4\"\n) == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"20 15\") == \"4\"\nassert solution(\"10 10\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n10 4\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n10 5\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n5 5\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n10 6\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"\n20 9\n\"\"\"\n) == \"6\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == '3'\nassert solution('10 5') == '2'\nassert solution('10 6') == '1'\nassert solution('10 7') == '0'\nassert solution('10 8') == '0'\n\"\"\"\n\nH, A = [int(x) for x in input().split(' ')]\n\nwhile H > 0 and A > 0:\n    if H == 1:\n        print(A - 1)\n        break\n    if H <= A:\n        print(1)\n        break\n    H -= A\n    A -= 1\n    print(A)"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 4\n''') == '3'\nprint('Test success.')\n\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4\\n') == '3'\n\"\"\"\n\n\"\"\"\nH A\n\n\"\"\"\n\nH, A = map(int, stdin.split(' '))\n\ni = 0\nwhile H > 0:\n    H -= A\n    i += 1\n\nprint(i)"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n10 4\n''') == '3'\nprint('Test 1: pass')\n\nassert solution('''\n10 4\n''') == '3'\nprint('Test 2: pass')\n\nassert solution('''\n20 7\n''') == '4'\nprint('Test 3: pass')\n\nassert solution('''\n15 9\n''') == '5'\nprint('Test 4: pass')\n\nassert solution('''\n15 17\n''') == '2'\nprint('Test 5: pass')"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 75 25 100') == '50'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 5 0 10') == '10'\nassert solution('0 5 0 0') == '0'\nassert solution('0 5 0 10 0') == '10'\nassert solution('0 5 0 10 0 0') == '10'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 75 25 100\") == \"50\"\n\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 75 25 100''') == '50'\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 25\") == \"50\"\nassert solution(\"0 75 25 50\") == \"50\"\nassert solution(\"0 75 25 25 50\") == \"50\"\nassert solution(\"0 75 25 25 50 100\") == \"50\"\n\nprint(solution(input()))\n\nimport unittest\nfrom typing import Any, List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        start_A, end_A = map(int, stdin.split(' ')[:2])\n        start_B, end_B = map(int, stdin.split(' ')[2:])\n\n        return str(max(0, end_A - start_B, end_B - start_A))\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution().solution\n\n    def test_one(self) -> None:\n        self."
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('105') == '1'\nassert solution('15') == '1'\nassert solution('19') == '2'\nassert solution('17') == '0'\nassert solution('3') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"105\\n\") == \"1\"\nprint(solution(\"105\\n\"))"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('105\\n') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"105\") == \"1\"\n\nn = int(stdin)\ni = 2\nc = 0\nwhile i <= n:\n    if len(set(primeFactors(i))) == 8:\n        c += 1\n    i += 1\nprint(c)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('105') == 1\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(105) == 1\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"105\") == \"1\"\nprint(solution(\"105\"))\n\n\n\n\n'''"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('105') == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '7 3'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n2\\n3\\n4\\n5\\n6\\n7\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 3''') == '1'\n\"\"\"\n\nfrom math import gcd\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = input('')\nprint(int(N) + 1)"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111') == '111'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\nprint(solution(input()))\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"111\"\n) == \"111\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"1\") == \"2\"\nassert solution(\"211\") == \"221\"\nassert solution(\"21111\") == \"2211\"\nassert solution(\"22111\") == \"2311\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '111'\nassert solution('100') == '100'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nfor i in range(1, 1000):\n    if int(str(i)[0]) == N:\n        print(i)\n        break\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"4 2 4\") == \"7\"\nassert solution(\"1 4 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '5'\nassert solution('1 6 3') == '5'\nassert solution('1 6 100') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == '5'\n\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 6 3') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('1 6 2') == '4'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('1 6 7') == '8'\n\n---\n\nAll rights reserved.\n\nSolution for leetcode - Problem - Median of 2 sorted arrays\n\nGiven two sorted arrays A and B of size M and N respectively and two integers C and D.\nThe task is to find the median of the array obtained after merging the above two arrays ( i.e. array of size (M + N)).\nIf M + N is even, then the median will be ( (A_i + B_j) / 2 ) where i is the index of the median,\nj is the index of the median in the array obtained after merging the above two arrays, and indexing of the array starts from 1.\nIf M + N is odd, then the median will be ( (A_i + B_j + 1) / 2 ) where i is the index of the median,\nj is the index of the median in the array obtained by merging the above two arrays, and indexing of the array starts from 1.\nIt is guaranteed that the median is unique in the merged array.\n\nAssumptions\n\nNumber of elements in A are less than or equal to the number of elements in B\nLength of array A and B are equal\nLength of array A is less than or equal to length of array B\nAll the elements of array A and B are distinct.\n\nInput Format\nFirst line of input contains T - number of test cases. T test cases follow.\nFirst line of each test case contains two integers M and N - number of elements in arrays A and B respectively.\nSecond line of each test case contains M integers - elements of array A.\nThird line of each test case contains N integers - elements of array B.\nFourth line of each test case contains two integers C and D.\n\nConstraints\n1 \\leq T \\leq 100\n1 \\leq M, N \\leq 10^5\n1 \\leq A[i], B[i] \\leq 10^6\n\nOutput Format\nFor each test case, print the required median, in a new line.\n\nSample TestCase 1\nInput\n4\n6 4\n2 4 5 8 12\n5 4 7 13 21\n2 4 6 8 10\n2 2 2 2 2\n5 4 7 13 21\n3 4 6 8 10\n1 2 3 4 5\n1 1 1 1 1\n2 3 4 5 6\nOutput\n8\n9\n10\n6\nExplanation:\nTest Case 1: After merging the above two arrays, we have merged array as 2, 4, 5, 8, 12,\nwhere median is 8, index of median is 4.\n\nTest Case 2: After merging the above two arrays, we have merged array as 2, 4, 5, 6, 8, 10,\nwhere median is 6, index of median is 3.\n\nTest Case 3: After merging the above two arrays, we have merged array as 2, 2, 2, 2, 2, 2,\nwhere median is 2, index of median is 2.\n\nTest Case 4: After merging the above two arrays, we have merged array as 2, 3, 4, 5, 6, 8,\nwhere median is 6, index of median is 4.\n\n'''\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(8) == 5\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == \"5\"\nassert solution(8) == \"5\"\nassert solution(7) == \"9\"\nassert solution(6) == \"9\"\nassert solution(1) == \"2\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == m\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\nimport sys\n\nassert sys.stdin.readline() == \"8\\n\"\nassert solution(sys.stdin.readline()) == \"5\\n\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"5\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == m"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\n\"\"\"\n@param values: a list of integers\n@return: an integer\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('5 6 7 8') == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('1 1 1 1') == 'Yes'\n\n---\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'No'\nassert solution('0 0 0 0') == 'No'\nassert solution('10 10 10 10') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\n\"\"\"\n\nA, B, C, D = list(map(int, stdin.split(\" \")))"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5 4 2') == 6\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 3 4\") == \"5\"\n\"\"\"\n\n\"\"\"\nRead input from STDIN. Print output to STDOUT\n\nInput Format:\nThe first line of input contains an integer, T, the number of test cases.\nThe T subsequent lines of test cases each contain an integer, N, representing the number of gems.\nThe next line contains N space-separated integers, A_1, A_2,..., A_N, representing the value of the ith gem.\nThe last line contains N space-separated integers, B_1, B_2,..., B_N, representing the cost of the ith gem.\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(5)\n\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 5\\n6 3 4\\n\") == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1\\n1\\n1\") == '2'\nassert solution(\"2\\n1 1\\n1\\n1\") == '1'\nassert solution(\"2\\n10 1\\n1\\n1\") == '0'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 4 5 6') == '4'\nprint('Test 1 PASSED')\n\nassert solution('5\\n3 4 5 6 1') == '3'\nprint('Test 2 PASSED')\n\nassert solution('3\\n1 2 3') == '0'\nprint('Test 3 PASSED')\n\nassert solution('2\\n3 1') == '-1'\nprint('Test 4 PASSED')\n\nassert solution('1\\n1') == '0'\nprint('Test 5 PASSED')"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\"\nassert solution(\"3 3\\n#.#\\n.#.\\n\") == \".#.\"\nassert solution(\"4 4\\n#.#\\n.#.\\n##.\\n.#.\") == \"###\"\nassert solution(\"4 4\\n#..\\n#..\\n##.\\n#..\\n\") == \"#.#\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n0 0\\n#\\n1 1\\n') == '0 0\\n#\\n1 1'\n\"\"\"\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"###\n###\n.##\"\"\"\"\nassert solution(\"\"\"4 4\n....\n##.#\n.#.#\n.##.\n\"\"\") == \"\"\"###\n###\n.##\"\"\"\"\nassert solution(\"\"\"4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n.\\n#\\n#\\n\\n.\\n\") == \"1 2\\n3\\n\"\nassert solution(\"4 4\\n.#\\n#.\\n#.\\n\\n.\\n\") == \"1 2 3\\n3\\n4\\n\"\nassert solution(\"4 5\\n##.\\n##.\\n##.\\n\\n##.\\n\") == \"1 2 3 4\\n5\\n\"\nassert solution(\"6 4\\n####\\n####\\n####\\n\\n###\\n\") == \"1 2 3 4 5\\n6\\n\"\nassert solution(\"1 1\\n#\\n\\n#\") == \"1\\n\\n\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#.\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution_text) == solution_answer\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n\nr = int(input())\nC = 2 * 3.1415926535 * r\nprint(C)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(1)) == '6.28318530717958623200'\nassert solution(str(2)) == '12.566370614359172'\n\"\"\"\n\nimport math\nimport sys\n\nR = float(sys.stdin.readline().rstrip())\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\n------------Solution------------\n\nimport math\nimport sys"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n\") == \"6.28318530717958623200\"\n\n---\n\nWe can find the circumference of a circle with R = 1, as follows:\n\n1 * 1 * pi * 2 = 2 * pi * 1 = pi * 2\n\nTherefore, the circumference is 2 * pi, which is 4, and we print it as \"4\".\n\"\"\"\n\nimport sys\n\ninput()\nprint(4 * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823330727082306\n)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\nassert solution('3\\n') == '19.63493447521338572701'\nassert solution('4\\n') == '30.283185307179586476925'\nassert solution('5\\n') == '42.90845068351904251892'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n\nimport sys\n\nR = int(sys.stdin.readline())\n\npi = 3.14159\n\nprint(f'{pi * R:.2f}')"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\nassert solution('3\\n') == '19.634146341463414634146'\nassert solution('4\\n') == '30.1'\nassert solution('5\\n') == '42.8'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASS\") == \"Yes\"\nassert solution(\"AASS\") == \"No\"\nassert solution(\"ASSS\") == \"Yes\"\nassert solution(\"AASSS\") == \"No\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASSA\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ASSAA') == 'Yes'\nassert solution('AA') == 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"SSSS\") == \"No\"\nassert solution(\"SSSSS\") == \"No\"\nassert solution(\"SSSSSS\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ASSA\") == 'Yes'\nassert solution(\"ASZS\") == 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\n\nassert solution(\"SSSS\") == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\ns = input()\nprint(\"Yes\" if s.count(\"A\") * s.count(\"S\") == 2 * s.count(\"AS\") else \"No\")\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AAAA') == 'Yes'\nassert solution('SSSS') == 'No'\nassert solution('ZS') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('AAA') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AAAA') == 'Yes'\nassert solution('AAAB') == 'No'\nassert solution('ABAB') == 'Yes'\nassert solution('AABB') == 'No'\nassert solution('ABAA') == 'Yes'\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"7\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('-1 -2') == '-3'\nassert solution('-3 -2') == '1'\nassert solution('-4 -2') == '2'\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import namedtuple\nfrom typing import List\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n\n\nclass Solution:\n    \"\"\"\n    The largest number among A + B, A - B, and A \\times B.\n\n    >>> solution = Solution(13, 3)\n    >>> solution.result == -10\n    True\n    >>> solution = Solution(-13, 3)\n    >>> solution.result == -10\n    True\n    >>> solution = Solution(-13, -3)\n    >>> solution.result == 1\n    True\n    >>> solution = Solution(-13, -3)\n    >>> solution.result == 2\n    True\n    \"\"\"\n\n    def __init__(self, a: int, b: int) -> None:\n        self.result = self.get_result(a, b)\n\n    @staticmethod\n    def get_result(a: int, b: int) -> int:\n        \"\"\"\n        >>> Solution(13, 3).get_result(13, 3)\n        -10\n        >>> Solution(1, 2).get_result(1, 2)\n        3\n        >>> Solution(-1, -2).get_result(-1, -2)\n        1\n        >>> Solution(-1, -2).get_result(1, 2)\n        2\n        >>> Solution(13, -3).get_result(13, -3)\n        1\n        >>> Solution(-13, 3).get_result(-13, 3)\n        -10\n        >>> Solution(13, -3).get_result(13, -3)\n        2\n        >>> Solution(-13, -3).get_result(13, -3)\n        1\n        \"\"\"\n        return max(a + b, a - b, a * b)\n\n    def __repr__(self) -> str:\n        return f'Solution(result={self.result})'\n\n\nSolutionParameters = namedtuple('SolutionParameters', ('a', 'b'))\n\n\n@ensure(lambda result, a, b, lines: result == Solution.get_result(a, b), 'Solution result')\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-13 3\") == -10\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n\n\"\"\"\nSolution:\na, b = [int(i) for i in stdin.read().split()]\nprint(max(a+b, a-b, a*b))\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3') == '-10'\nassert solution('-7 -4') == '4'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-13 3') == -10\n'''"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-13 3\") == '-10'\n\"\"\"\n\n\"\"\"\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e X. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043b\u0438 \u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e X \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0443 [a, b].\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 a, b, x \u0438 n, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 YES, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e x \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0443 \u0438 NO \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input 1:\n1\n5\n6\nSample Output 1:\nYES\n\nSample Input 2:\n1\n5\n4\nSample Output 2:\nNO\n\"\"\"\n\n\"\"\"\na, b, x, n = int(input()), int(input()), int(input()), int(input())\nprint('YES') if a <= x <= b else print('NO')\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e my_func(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0440\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0434\u0432\u0443\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043f\u043e\u043f\u044b\u0442\u0430\u0439\u0442\u0435\u0441\u044c \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 max \u0438 min.\n\nSample Input 1:\n1\n2\n3\nSample Output 1:\n2\nSample Input 2:\n5\n5\n5\nSample Output 2:\n11\n\"\"\"\n\n\n\"\"\"\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e my_func(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0440\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0434\u0432\u0443\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043e\u0431\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0430\u0437\u0443. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b.\n\nSample Input 1:\n1\n2\n3\nSample Output 1:\n2\nSample Input 2:\n5\n5\n5\nSample Output 2:\n11\n\"\"\"\n\n\n\"\"\"\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e my_func(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0440\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0434\u0432\u0443\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043e\u0431\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0430\u0437\u0443. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b.\n\nSample Input 1:\n1\n2\n3\nSample Output 1:\n2\nSample Input 2:\n5\n5\n5\nSample Output 2:\n11\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 a, b, c, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438. \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input 1:\n1\n2\n3\nSample Output 1:\nYES\nSample Input 2:\n1\n2\n4\nSample Output 2:\nNO\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n'''\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('-13 -3') == '-16'\nassert solution('-13 3') == '-10'\nassert solution('-13 -3') == '-16'\nassert solution('-13 -3') == '-16'\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n6 5 6 8''') == '3'\nprint('Test pass.')"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == 2\nassert solution(\"4\\n1 1 1 1\") == 4\nassert solution(\"5\\n1 2 1 2 1\") == 3\nassert solution(\"5\\n1 2 1 2 1\") == 3\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 2 1') == '3\\n2 2 1'\n\nsolution(stdin)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\nc') == ''\nassert solution('a\\nb\\n\\nc') == ''\nassert solution('a\\n\\nb\\n\\nc') == ''\nassert solution('a\\n\\nb\\nc') == 'b\\nc'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\n\nassert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 1 2 3 4') == '2\\n3 4'\n\nassert solution('1 1 1 1') == '4\\n1 1 1 1'\nassert solution('1 2 3 4 5') == '1\\n5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(21) == 7\nassert solution(28) == 4\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"9\") == \"3\"\nassert solution(\"8\") == \"4\"\n\nassert solution(\"7\") == \"3\"\nassert solution(\"21\") == \"1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"7\"\nassert solution(\"28\") == \"4\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n6\\n21\\n28\\n999999999\\n999999984\\n') == '3\\n2\\n1\\n7\\n4\\n333333333'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('3\\n7') == '2'\nassert solution('5\\n28') == '4'\nassert solution('5\\n999999999') == '333333333'\nassert solution('5\\n999999984') == '333333328'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n3\\n5\") == \"1\\n1\\n1\"\nassert solution(\"4\\n2\\n4\\n9\") == \"2\\n2\\n1\"\nassert solution(\"7\\n6\\n6\\n7\\n16\\n19\\n22\\n28\\n33\\n41\\n49\\n58\\n67\\n78\") == \"4\\n5\\n1\"\nassert solution(\"10\\n3\\n5\\n8\\n13\\n21\\n34\\n55\\n89\\n144\\n233\\n377\\n610\\n987\\n1597\\n2584\\n4181\\n6765\\n10946\\n17718\\n28657\\n46368\\n75025\\n121393\\n196418\\n317811\\n514229\\n832040\\n1346269\\n2178309\\n3524578\\n5702887\\n9227465\\n14930352\\n24157817\\n39088169\\n63245986\\n102334155\\n165580141\\n267914296\\n433494437\\n701408733\\n1134903170\\n1836311903\\n2971215073\\n4807526976\\n7778742049\\n12586269025\\n20365011074\\n32951280099\\n53316291173\\n86267571272\\n139583862445\\n225851433717\\n366404853530\\n590093388010\\n956937818579\\n1492935843195\\n\n---\nmin_x = float('inf')\nmin_k = float('inf')\nmin_res = float('inf')\n\nfor i in range(n+1):\n    for j in range(n+1):\n        for k in range(n+1):\n            if i + 2*i + 4*i == n:\n                x = i\n                k = j\n                if i*j*k < min_res:\n                    min_x = i\n                    min_k = j\n                    min_res = k\n\nreturn str(min_x) + '\\n' + str(min_k) + '\\n' + str(min_res)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(21) == 7\nassert solution(28) == 4\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\\n\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '4'\nassert solution('999999999\\n999999984') == '333333333'\nassert solution('999999999\\n999999984') == '333333328'\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\nsolution.some_attr = \"some_value\"\nassert solution.some_attr == \"some_value\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('1 2') == '0'\nassert solution('1 0') == '10'\nassert solution('0 1') == '1'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('2 2') == '0'\nassert solution('3 7') == '4'\nassert solution('4 5') == '5'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('512 4') == '50'\n\nassert solution('1000000000 9') == '1'"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('ab') == 'ab'\nassert solution('aab') == 'aab'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n5 5\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5\\n') == '2\\n5 5'\nassert solution('3\\n5 1 4\\n') == '2\\n4 5'\n\"\"\"\n\nn = int(input())\nstdin = input()\n\ndata = list(map(int, stdin.split(' ')))\n\nl = len(data)\nsum_of_heights = sum(data)\n\nhalf_of_sum = sum_of_heights / 2"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 5 1 2 2 1') == '5'\nassert solution('7 4 5 3 1 2 2 1') == '7'\nassert solution('5 3 7 5 1 5') == '2'\nassert solution('3 7 5 1 5') == '2'\nassert solution('7 4 5 3 1 5') == '2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\n\nprint(\"Success\")\n\nimport sys\nlines = []\nfor line in sys.stdin:\n    lines.append(line)\n\nans = solution(lines[1])\nprint(ans)\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n5 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '-1'\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n10 11\\n8 2\\n3 1\\n4 9\\n6 5\\n5 4\\n6 2\\n3 1\\n4 9\\n6 5\\n5 4\\n6 2\\n3 1\\n4 9\\n6 5\\n5 4\\n6 2\\n3 1\\n4 9\\n6 5\\n5 4\\n6 2') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '2\\n'\nassert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '-1\\n'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '-1\\n'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '-1\\n'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"10 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"10 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\nassert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nimport math\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'tleelte'\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 3') == 'tleelte'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\") == \"tleel\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleel\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\nassert solution(\"10 9 3\") == \"aabbcccddea\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('20 12 10') == '10'\nassert solution('1 1 1') == '0'\nassert solution('20 20 20') == '0'\nassert solution('20 100 1') == '100'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == '12'\nassert solution(\"20 21 6\") == '18'\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\nprint((m + k - 1) // k)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"20 12 6\"\n) == \"12\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\nimport sys\n\nn, x, t = map(int, sys.stdin.readline().split())\n\nprint(n//x + (n%x)*t)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdin.read()\n\nimport stdio\n\nstdio.writeln(solution(stdio.read()))\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdin.read()"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([\"20 12 6\"]) == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_result\n\n----\n\nWrite 5 lines of code to test the correctness of solution:\nTakahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?\n\n-----Constraints-----\n - 1 \\leq N,X,T \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN X T\n\n-----Output-----\nPrint an integer representing the minimum number of minutes needed to make N pieces of takoyaki.\n\n-----Sample Input-----\n20 12 6\n\n-----Sample Output-----\n12\n\nHe can make 12 pieces of takoyaki in the first 6 minutes and 8 more in the next 6 minutes, so he can make 20 in a total of 12 minutes.\nNote that being able to make 12 in 6 minutes does not mean he can make 2 in 1 minute.\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6\\n') == 12\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n1\\n2\\n3\\n4\\n5\") == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n8\\n10\\n8\\n6') == '3'\nassert solution('8\\n8\\n10\\n8\\n6') == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected_result)\nprint(str(solution(str(input()))))\n\n'''\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\"\n\nN = int(stdin.readline())\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"8\") == \"4\"\nassert solution(\"12\") == \"6\"\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"8\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"13\") == \"3\"\n\"\"\"\n\nN = int(input())\ngroups = N // 3 + 1\nprint(groups)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '1'\nassert solution('9\\n') == '3'\nassert solution('8\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '2'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n') == '2'\nprint(solution('8\\n'))\n\"\"\"\nimport sys"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"8\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n\nimport math\n\nA, P = [int(x) for x in input().split(\" \")]"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nInput\n\n1 3\n\nOutput\n\n3\n\nWe can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\n\") == 3\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # Your code goes here\n        nums = list(map(int, stdin.split(\"\\n\")))\n        a = nums[0]\n        p = nums[1]\n        m = 0\n        \n        for i in range(0, p + 1):\n            for j in range(0, p + 1):\n                for k in range(0, p + 1):\n                    if i + 2 * j + 3 * k == p and i * a + j * a + k * a == a * p:\n                        m += 1\n        return m\n        "
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == 3\n'''\n\nimport unittest\nimport sys\n\nclass Solution(object):\n    def solution(self, stdin):\n        \"\"\"\n        Find the number of apple we can make from the first P pieces of apple\n\n        Parameters\n        ----------\n        stdin : str\n            input from standard input\n\n        Returns\n        -------\n        str\n            maximum number of apple we can make from the first P pieces of apple\n\n        \"\"\"\n        # read the input from the standard input\n        a, p = map(int, stdin.split())\n        # print the maximum number of apple we can make from the first P pieces of apple\n        print(a // p + a % p)\n        return\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        # open the input\n        with open('test_input.txt', 'r') as f:\n            stdin = f.read()\n        # call the solution\n        Solution().solution(stdin)\n        # close the input\n        f.close()"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n\") == \"3\"\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n\") == \"3\"\nassert solution(\"1 3\\n\") == \"3\"\nassert solution(\"1 3\\n\") == \"3\"\nassert solution(\"1 3\\n\") == \"3\"\nassert solution(\"1 3\\n\") == \"3\"\n\n------Solution-----\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\") == \"16\"\nprint(solution(\"4 12\"))"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\nassert solution(\"4 9\\n\") == \"3\"\nassert solution(\"20 20\\n\") == \"0\"\nassert solution(\"1 1\\n\") == \"0\"\nassert solution(\"10 9\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '5'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    stdin='4 12\\n') == '16', 'Solutions works'\n\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n') == '16'\nassert solution('4 11\\n') == '-1'\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n\n\"\"\"\nCode Challenge\n  Name: \n    Bricks\n  Filename: \n    bricks.py\n  Problem Statement:\n    We want to make a row of bricks that is target inches long. \n    We have a number of small bricks (1 inch each) and big bricks (5 inches each). \n    Make a function that prints True if it is possible to make the exact target \n    by choosing from the given bricks or False otherwise. \n    Take list as input from user where its 1st element represents number of small bricks, \n    middle element represents number of big bricks and 3rd element represents the target.\n  Input: \n    2, 2, 11\n  Output:\n    True\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Reverse Function\n  Filename: \n    reverse.py\n  Problem Statement:\n    Define a function reverse() that computes the reversal of a string.\n    Without using Python's inbuilt function\n    Take input from User  \n  Input: \n    I am testing\n  Output:\n    gnitset ma I  \n\"\"\"\n\n\"\"\"\nCode Challenge\n  Name: \n    Translate Function\n  Filename: \n    translate.py\n  Problem Statement:\n    Write a function translate() that will translate a text into \"r\u00f6varspr\u00e5ket\" \n    Swedish for \"robber's language\". \n    That is, double every consonant and place an occurrence of \"o\" in between. \n    Take Input from User  \n  Input: \n    This is fun\n  Output:\n    ToThohisos isos fofunon  \n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Operations Function\n  Filename: \n    operation.py\n  Problem Statement:\n    Write following functions for list operations. Take list as input from the User\n    Add(), Multiply(), Largest(), Smallest(), Sorting(), Remove_Duplicates(), Print()\n    Only call Print() function to display the results in the below displayed \n    format (i.e all the functions must be called inside the print() function \n    and only the Print() is to be called in the main script)\n\n  Input: \n    5,2,6,2,3\n  Output:\n    Sum = 18\n    Multiply = 360\n    Largest = 6\n    Smallest = 2\n    Sorted = [2, 2, 3, 5, 6]\n    Without Duplicates = [2, 3, 5, 6]  \n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Sorting\n  Filename: \n    sorting.py\n  Problem Statement:\n    You are required to write a program to sort the (name, age, height) \n    tuples by ascending order where name is string, age and height are numbers. \n    The tuples are input by console. The sort criteria is:\n    1: Sort based on name;\n    2: Then sort based on age;\n    3: Then sort by score. \n    The priority is that name > age > score\n  Input: \n    Tom,19,80\n    John,20,90\n    Jony,17,91\n    Jony,17,93\n    Json,21,85\n  Output:\n    [('John', 20, 90), ('Jony', 17, 91), ('Jony', 17, 93), ('Json', 21, 85), ('Tom', 19, 80)]\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Centered Average\n  Filename: \n    centered.py\n  Problem Statement:\n    Return the \"centered\" average of an array of integers, which we'll say is the \n    mean average of the values, except ignoring the largest and smallest values in the array. \n    If there are multiple copies of the smallest value, ignore just one copy, \n    and likewise for the largest value. Use int division to produce the final average. \n    You may assume that the array is length 3 or more.\n    Take input from user  \n  Input: \n    1, 2, 3, 4, 100\n  Output:\n    3\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Unlucky 13\n  Filename: \n    unlucky.py\n  Problem Statement:\n    Return the sum of the numbers in the array, returning 0 for an empty array. \n    Except the number 13 is very unlucky, so it does not count and numbers that \n    come immediately after a 13 also do not count\n    Take input from user  \n  Input: \n    13, 1, 2, 13, 2, 1, 13\n  Output:\n    3\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    generator\n  Filename: \n    generator.py\n  Problem Statement:\n    This program accepts a sequence of comma separated numbers from user \n    and generates a list and tuple with those numbers.  \n  Input: \n    2, 4, 7, 8, 9, 12\n  Output:\n    List : ['2','4','7','8','9', '12'] \n    Tuple : ('2','4','7','8','9', '122')\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    weeks\n  Filename: \n    weeks.py\n  Problem Statement:\n    Write a program that adds missing days to existing tuple of days\n  Input: \n    ('Monday', 'Wednesday', 'Thursday', 'Saturday')\n  Output:\n    ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Supermarket\n  Filename: \n    supermarket.py\n  Problem Statement:\n    You are the manager of a supermarket. \n    You have a list of items together with their prices that consumers bought on a particular day. \n    Your task is to print each item_name and net_price in order of its first occurrence. \n    Take Input from User  \n  Hint: \n    item_name = Name of the item. \n    net_price = Quantity of the item sold multiplied by the price of each item.\n    try to use new class for dictionary : OrderedDict\n  Input: \n    BANANA FRIES 12\n    POTATO CHIPS 30\n    APPLE JUICE 10\n    CANDY 5\n    APPLE JUICE 10\n    CANDY 5\n    CANDY 5\n    CANDY 5\n    POTATO CHIPS 30\n  Output:\n    BANANA FRIES 12\n    POTATO CHIPS 60\n    APPLE JUICE 20\n    CANDY 20\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Teen Calculator\n  Filename: \n    teen_cal.py\n  Problem Statement:\n    Take dictionary as input from user with keys, a b c, with some integer \n    values and print their sum. However, if any of the values is a teen -- \n    in the range 13 to 19 inclusive -- then that value counts as 0, except \n    15 and 16 do not count as a teens. Write a separate helper \"def \n    fix_teen(n):\"that takes in an int value and returns that value fixed for\n    the teen rule. In this way, you avoid repeating the teen code 3 times  \n  Input: \n    {\"a\" : 2, \"b\" : 15, \"c\" : 13}\n  Output:\n    Sum = 17\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Facorial\n  Filename: \n    factorial.py\n  Problem Statement:\n    Find the factorial of a number. \n  Hint: \n    Factorial of 3 = 3 * 2 * 1= 6 \n    Try to first find the function from math module using dir and help \n  Input:\n    Take input from User  \n  Output:\n    print the factorial of a given number.\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Styling of String\n  Filename: \n    "
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"aa\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokudaik\") == \"No\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"achokudai\") == \"No\"\nassert solution(\"achokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n\nS = input()\nT = input()\n\nfor i in range(len(S)):\n    if S[i:] + S[:i] == T:\n        print('Yes')\n        break\nelse:\n    print('No')"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16\\n') == '9'\nassert solution('3 11\\n') == 'IMPOSSIBLE'\nassert solution('2 9\\n') == 'IMPOSSIBLE'\nassert solution('9 8\\n') == 'IMPOSSIBLE'\nassert solution('3 5\\n') == '1'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\nfrom sys import stdin, stdout\n\nA, B = map(int, stdin.readline().split())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(abs(a - b))\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16\\n') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 16') == '9'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('117') == 'Yes'\nassert solution('567') == 'No'\nassert solution('235') == 'No'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('117') == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('117') == 'Yes'\n\"\"\"\n\nN = int(stdin.readline().rstrip())\n\nprint('Yes' if '7' in str(N) else 'No')\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('117') == 'Yes'\nassert solution('361') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'No'\nassert solution('117') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(121) == \"Yes\"\nassert solution(1111) == \"No\"\nassert solution(741) == \"Yes\"\nassert solution(111) == \"No\"\nassert solution(101) == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('117') == 'Yes'\nassert solution('222') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\nassert solution('301') == 'No'\nassert solution('367') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(117) == \"Yes\"\nassert solution(125) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"No\"\nassert solution(\"117\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\n\"\"\"\nLargest palindromic product of 3-digit numbers.\nProblem 543\n\nThe largest palindrome made from the product of two 3-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\"\"\"\n\n\"\"\"\nProof:\nA palindrome, p, is a number that can be read the same forward and backward, e.g., 671, 676, 9061.\nIf there are more than 2 digits, we can always factor out a single digit and check if the remaining\nproduct is a palindrome. For instance, the largest 3-digit palindrome is 9009 = 91 \u00d7 99.\nLet p = 91 \u00d7 99.\nWe can factor out a single digit from p: p = 91 \u00d7 9 \u00d7 9 = 712, which is a palindrome.\nNow the product of p and 999 is 9061 = 91 \u00d7 9 \u00d7 999, which is a palindrome.\nLikewise we can factor out a single digit from 999: 999 = 9 \u00d7 9 \u00d7 9 = 729, which is a palindrome.\nSo we have p = 712 and 999 = 729. Clearly, p * 999 is a palindrome.\n\nSuppose we want to find the largest palindrome made from the product of two 3-digit numbers.\nWe can factor out two digits from each number, and the remaining product must be a palindrome.\nSo what is the largest palindrome made from the product of two 3-digit numbers?\nLet p1 = 999 \u00d7 9 \u00d7 9 \u00d7 9 = 9876543, and p2 = 9876543 \u00d7 9 \u00d7 9 = 729.\np1 * p2 = 999 \u00d7 9876543 \u00d7 9876543 = 98765554321, which is a palindrome.\n\nFor any 3-digit number, e.g., N = 123, the largest palindrome made from the product of two 3-digit\nnumbers is 9x99, e.g., N = 123 = 1x12x12, since 999x99 = 9x99x99 = 987654321, which is a palindrome.\n\"\"\"\n\n\"\"\"\nAnother solution:\nLet S(n) denote the sum of the digits in the decimal notation of n.\nFor example, S(101) = 1 + 0 + 1 = 2.\nGiven an integer N, determine if S(N) divides N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nIf S(N) divides N, print Yes; if it does not, print No.\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\nYes\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(101) == \"No\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(12) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"12\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'No'\nassert solution('1011') == 'No'\nassert solution('10111') == 'Yes'\nassert solution('111111111') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12\\n') == 'Yes'\nassert solution('101\\n') == 'Yes'\nassert solution('10\\n') == 'No'"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nimport sys\nimport math\n\nclass Solution:\n    def __init__(self):\n        self.points = list()\n\n    def solution(self, stdin):\n        if len(sys.argv)!= 2:\n            print('No/Invalid input')\n            return\n        self.points = [int(i) for i in sys.argv[1].split()]\n\n        # Checking if the points are in clockwise order\n        if self.isClockwise(self.points[0], self.points[1], self.points[2], self.points[3]) == False:\n            self.points.reverse()\n\n        x1 = self.points[0]\n        y1 = self.points[1]\n        x2 = self.points[2]\n        y2 = self.points[3]\n\n        if x1 == x2 and y1 == y2:\n            print('1 1 -1 0')\n            return\n\n        # Calculation of area of triangle\n        A = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n        # Calculation of height and width\n        if x2 - x1 == 0 and y2 - y1!= 0:\n            h = math.inf\n            w = A\n        elif x2 - x1!= 0 and y2 - y1 == 0:\n            h = A\n            w = math.inf\n        else:\n            w = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n            h = A\n\n        # Calculation of centre of triangle\n        x_centre = (x1 + x2) / 2\n        y_centre = (y1 + y2) / 2\n\n        # Calculation of middle point of base\n        x_mid = (2 * x_centre - x1 - x2) / 2\n        y_mid = (2 * y_centre - y1 - y2) / 2\n\n        # Calculation of mid point of height\n        x_mid1 = (2 * x_mid - w) / 2\n        y_mid1 = (2 * y_mid - h) / 2\n\n        # Calculating of middle point of height\n        x_mid2 = (2 * x_mid + w) / 2\n        y_mid2 = (2 * y_mid + h) / 2\n\n        # Calculation of final points\n        print(x_mid1, y_mid1, x_mid2, y_mid2)\n\n    # Returns True if the points are in clockwise order, else False\n    def isClockwise(self, x1, y1, x2, y2):\n        return (x2 - x1) * (y2 - y1) > (x2 - x1) * (y2 - y1)\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n\"\"\"\n\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"1 1 0 1\") == \"1 1 0 1\"\nassert solution(\"0 0 1 1\") == \"0 0 1 1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\n\"\"\"\n\nimport math\n\nx1, y1, x2, y2, x3, y3, x4, y4 = map(int, stdin.split())\n\n\"\"\"\nprint(x1, y1, x2, y2, x3, y3, x4, y4)\nprint(type(x1))\n\"\"\"\n\na = math.sqrt(pow((x3 - x1), 2) + pow((y3 - y1), 2))\nb = math.sqrt(pow((x4 - x1), 2) + pow((y4 - y1), 2))\nc = math.sqrt(pow((x4 - x2), 2) + pow((y4 - y2), 2))\nd = math.sqrt(pow((x2 - x1), 2) + pow((y2 - y1), 2))\nprint(round(-a/2 + b/2, -1), round(-a/2 + c/2, -1), round(a/2 + b/2, -1), round(a/2 + c/2, -1))\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 0 1 1\") == \"-1 1 0 0\"\n\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS = input()\nT = input()\nA = int(input())\nB = int(input())\n\nprint(A-B, B, sep=\" \")\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n-----Explanation-----\nAfter throwing away a ball with \"red\" written on it, we have two balls with the string S and four balls with the string T.\n\"\"\"\n\n\"\"\"\n\u9996\u5148\u8981\u7406\u89e3\u4ec0\u9ebc\u662f\u6bd4\u4f8b: \u6bd4\u4f8b\u662f\u4e00\u500b\u5716\u9748\u6027\u7684\u6982\u5ff5\uff0c\u5176\u5be6\u6bd4\u4f8b\u5c31\u662f\u7d66\u5b9a\u77e9\u5f62\u7684\u9577\u5ea6\u8ddf\u9ad8\u5ea6\u4e4b\u9593\u7684\u6bd4\u4f8b\uff0c\u6bd4\u59824\u8ddf5\u7684\u6bd4\u4f8b\u662f\u77e9\u5f624\u8ddf5\u9ad8\u5ea6\u7684\u6bd4\u4f8b\u3002\n\n\u90a3\u4ec0\u9ebc\u662f\u6bd4\u4f8b\u7684\u7406\u89e3\uff0c\u4f86\u81ea\u65bc\u9019\u6a23\u4e00\u500b\u5716\u9748\u6027\u7684\u6982\u5ff5\uff0c\u4f8b\u5982\uff1a\u77e9\u5f621\u8ddf2\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f1\uff0c\u77e9\u5f623\u8ddf4\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f3\uff0c\u77e9\u5f625\u8ddf6\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f5\uff0c\u9019\u4e9b\u77e9\u5f62\u7684\u6bd4\u4f8b\u5c31\u662f\u6bd4\u4f8b\uff0c\u53c8\u7a31\u6bd4\u4f8b\u77e9\u5f62\u6982\u5ff5\u3002\n\n\u4e00\u500b\u6bd4\u4f8b\u662f\u77e9\u5f62\u7684\u9577\u5ea6\u8ddf\u9ad8\u5ea6\u4e4b\u9593\u7684\u6bd4\u4f8b\uff0c\u8ddf\u90a3\u500b\u6bd4\u4f8b\u662f\u6982\u5ff5\u662f\u548c\u6211\u5011\u5728\u7b2c\u4e00\u500b\u904a\u6232\u7b97\u7684\u4e00\u6a23\uff0c\u4f46\u662f\u77e9\u5f62\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f\u4e0d\u4e00\u6a23\u7684\uff0c\u4e0d\u4e00\u6a23\u7684\u6982\u5ff5\u5728\u9019\u88e1\u5c31\u662f\u6bd4\u4f8b\u77e9\u5f62\u3002\n\n\u56e0\u70ba\u4e00\u500b\u6bd4\u4f8b\u662f\u77e9\u5f62\u7684\u9577\u5ea6\u8ddf\u9ad8\u5ea6\u4e4b\u9593\u7684\u6bd4\u4f8b\uff0c\u6240\u4ee5\u9019\u500b\u6982\u5ff5\u5728\u65bc\u4f86\u7b2c\u4e00\u500b\u904a\u6232\u7684\u7b97\u6cd5\u958b\u59cb\uff0c\u6bd4\u5982\u7b97\u4e00\u500b\u77e9\u5f62\u7684\u6bd4\u4f8b\u5c31\u662f\u8a08\u7b97\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\uff0c\n\u9019\u500b\u6bd4\u4f8b\u7b97\u6cd5\u7d50\u675f\u5f8c\u5c31\u6703\u51fa\u73fe\u77e9\u5f62\uff0c\u800c\u9019\u500b\u6bd4\u4f8b\u7684\u77e9\u5f62\u6703\u4e0d\u4e00\u6a23\uff0c\u4e5f\u5c31\u662f\u90a3\u500b\u6982\u5ff5\uff0c\u6240\u4ee5\u9019\u500b\u6bd4\u4f8b\u7684\u77e9\u5f62\u6982\u5ff5\u5c31\u662f\u6bd4\u4f8b\u77e9\u5f62\u3002\n\n\u8b93\u6211\u5011\u5efa\u7acb\u4e00\u500b\u6bd4\u4f8b\u7684\u77e9\u5f62\u7b97\u6cd5\uff0c\u56e0\u70ba\u77e9\u5f62\u7684\u9577\u5ea6\u8ddf\u9ad8\u5ea6\u7684\u6bd4\u4f8b\u4e0d\u4e00\u6a23\uff0c\u6240\u4ee5\u6211\u5011\u8981\u5206\u5225\u7b97\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\uff0c\n\u7b97\u5b8c\u5f8c\u5c31\u6703\u5f97\u5230\u77e9\u5f62\u3002\n\n\u4f86\u770b\u6211\u5011\u8981\u600e\u9ebc\u7b97\u77e9\u5f62\u7684\u6bd4\u4f8b\uff0c\u7576\u6211\u5011\u8981\u7b97\u77e9\u5f62\u7684\u9577\u5ea6\u6642\uff0c\u5c31\u8981\u5206\u5225\u7b97\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\uff0c\u9019\u500b\u6642\u5019\u90a3\u5169\u500b\u6bd4\u4f8b\u6c92\u6709\u8981\u7b97\u5169\u6b21\uff0c\n\u6240\u4ee5\u5c31\u8b8a\u6210\u7b97\u4e00\u6b21\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\u7684\u77e9\u5f62\uff0c\u6240\u4ee5\u9019\u6642\u5019\u7684\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\u7b97\u6cd5\u7684\u7d50\u679c\u662f\u77e9\u5f62\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\uff0c\n\u5176\u5be6\u9019\u500b\u77e9\u5f62\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\u7b97\u6cd5\u53ef\u4ee5\u76f4\u63a5\u547c\u53eb\uff0c\u53ea\u662f\u6211\u5011\u8981\u81ea\u5df1\u81ea\u5df1\u518d\u7b97\u4e00\u6b21\uff0c\u9019\u6642\u5019\u90a3\u5169\u500b\u6bd4\u4f8b\u5c31\u53ef\u4ee5\u76f4\u63a5\u547c\u53eb\uff0c\n\u6240\u4ee5\u9019\u500b\u77e9\u5f62\u9577\u5ea6\u548c\u9ad8\u5ea6\u7684\u6bd4\u4f8b\u7b97\u6cd5\u53ef\u4ee5\u76f4\u63a5\u547c\u53eb\uff0c\u800c\u4e0d\u5fc5\u81ea\u5df1\u518d\u7b97\u4e00\u6b21\uff0c\u6240\u4ee5\u9019\u500b\u6bd4\u4f8b\u7b97\u6cd5\u53ef\u4ee5\u76f4\u63a5\u547c\u53eb\uff0c\n\u6240\u4ee5\u9019\u500b\u6bd4\u4f8b\u7684\u77e9\u5f62\u6982\u5ff5\u5c31\u662f\u6bd4\u4f8b\u77e9\u5f62\uff0c\u800c\u6bd4\u4f8b\u77e9\u5f62\u7684\u6982\u5ff5\u53ef\u4ee5\u76f4\u63a5\u547c\u53eb\uff0c\u6240\u4ee5\u9019\u500b\u77e9\u5f62\u6982\u5ff5\u5c31\u662f\u6bd4\u4f8b\u77e9\u5f62\u3002\n\n\u90a3\u4ec0\u9ebc\u662f\u6bd4\u4f8b\u7684\u7406\u89e3\uff0c\u4f86\u81ea\u65bc\u9019\u6a23\u4e00\u500b\u5716\u9748\u6027\u7684\u6982\u5ff5\uff0c\u4f8b\u5982\uff1a\u77e9\u5f621\u8ddf2\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f1\uff0c\u77e9\u5f623\u8ddf4\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f3\uff0c\u77e9\u5f625\u8ddf6\u4e4b\u9593\u7684\u6bd4\u4f8b\u662f5\uff0c\u9019\u4e9b\u77e9\u5f62\u7684\u6bd4\u4f8b\u5c31\u662f\u6bd4\u4f8b\uff0c\u53c8\u7a31\u6bd4\u4f8b\u77e9\u5f62\u6982\u5ff5\u3002"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n\nS, T = input().split()\nA, B = map(int, input().split())\nU = input()\n\nS_count = sum(1 for ball in S if ball == U)\nT_count = sum(1 for ball in T if ball == U)\n\nprint(A - S_count, B - T_count)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = stdin.split()\nA, B = map(int, input().split())\nU = input()\nA -= 1\nB -= 1\ncount = 0\n\nfor a, b in zip(range(A, A + A + 1), range(B, B + B + 1)):\n    if S[a]!= T[b]:\n        count += 1\n        if S[a]!= U[b]:\n            count += 1\n\nprint(count, A + A + A + 1)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcba\") == \"No\"\nassert solution(\"abcabcbc\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcabc\") == \"Yes\"\nassert solution(\"aababcaab\") == \"Yes\"\nassert solution(\"ababab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n5\nabcabc\n''') == 'Yes'\n\nassert solution(\n'''\n7\nabcabc\n''') == 'No'\n\nassert solution(\n'''\n6\nabcabc\n''') == 'Yes'\n\nassert solution(\n'''\n7\nabcabc\n''') == 'No'\n\nassert solution(\n'''\n7\nabcabcd\n''') == 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabca') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n\n\"\"\"\n3. Write 5 lines of code to implement a python program for the following problem:\nGiven a positive integer N. The program must print \u201c1\u201d if N is even, otherwise the program must print \u201c0\u201d.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint 1 if N is even, otherwise print 0.\n\n-----Sample Input-----\n6\n\n-----Sample Output-----\n1"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"ababab\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\nassert solution(\"3 5 6 2\") == \"3.0 1\"\nassert solution(\"5 10 8 10\") == \"7.0 0\"\nassert solution(\"1 100 100 1\") == \"0.0 0\"\n\"\"\"\nfrom __future__ import annotations\n\nimport math\n\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1 2\\n') == '3.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1 2\\n') == '3.0 0'\nassert solution('1 1 1 1\\n') == '0 1'\nassert solution('2 2 2 2\\n') == '1 0'\n\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 1 1 1') == '0.000000 0'\n\n-------------\nW, H, x, y\n\n[[0,0], [W,0], [W,H], [0,H]]\n\n[x,y]\n\n[[0,0], [0,H], [W,H], [W,0]]\n\n[0,0] + [x,0]\n[0,0] + [W,0]\n[0,H] + [x,0]\n[0,H] + [W,0]\n[0,0] + [0,y]\n[0,0] + [x,y]\n[W,0] + [0,y]\n[W,0] + [x,y]\n[W,H] + [0,y]\n[W,H] + [x,y]\n\n[[0,0], [W,0], [W,H], [0,H]] + [[0,0]]\n\n[[0,0], [0,H], [W,H], [W,0]] + [[0,0]]\n\n[[0,0], [0,H], [W,H], [W,0]] + [[0,0]]\n\n[[0,0], [0,H], [0,0], [W,0]] + [[0,0], [x,y]]\n\n[[0,0], [0,H], [0,0], [W,0]] + [[W,0], [x,y]]\n\n[[0,0], [0,H], [0,0], [W,0]] + [[W,0], [0,y]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [x,y]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [W,0], [x,y]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,y], [W,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [W,y]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0], [0,0]]\n\n[[0,0], [0,H], [0,0], [0,0]] + [[0,0], [0,0], [0,0"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\") == '3.0 0'\nassert solution(\"4 4 1 1\") == '4.0 4.0'\nassert solution(\"5 5 4 6\") == '5.0 9.0'\nassert solution(\"4 6 5 4\") == '4.0 7.0'\nassert solution(\"6 4 4 6\") == '6.0 10.0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1\\n') == '0'\nassert solution('2 3 1 2\\n') == '3.0 0'\nassert solution('2 3 1 1\\n') == '1.0 0'\n\n-------------------\n\nW,H,x,y=map(int,input().split())\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('4 2 3 3') == '6.250000 1'\nassert solution('2 1 1 1') == '1.000000 1'\nassert solution('1 2 1 2') == '1.000000 1'\nassert solution('5 2 1 2') == '6.250000 1'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 1 1 1') == '1.00000 1'\nassert solution('2 3 3 3') == '0.666667 0'\nassert solution('4 5 2 1') == '3.14159 0'\nassert solution('5 5 5 5') == '0.555555 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 W Y P Y W\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\nassert solution('4\\nG W P G') == 'Three'\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 G W Y P Y W') == \"Four\"\n\n---\n\nn = int(input())\ncolors = {input() for _ in range(n)}\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 P W Y P W\\n') == 'Three'\nassert solution('4 W Y P Y W\\n') == 'Four'\nassert solution('6 G W Y P Y W\\n') == 'Four'\nassert solution('4 W Y P Y W\\n') == 'Four'\nassert solution('3 W Y P Y W\\n') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nG W Y P\") == \"Four\"\nassert solution(\"4\\nG W Y P\") == \"Four\"\nassert solution(\"6\\nG W Y P\") == \"Four\"\nassert solution(\"4\\nG W Y P G\") == \"Four\"\nassert solution(\"4\\nG W Y P G Y\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 P W G G G G\") == \"Four\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 G W Y P Y W\") == \"Four\"\nassert solution(\"2 G W Y P Y W\") == \"Four\"\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('G W Y P Y W') == 'Four'\nassert solution('G W Y P Y W G') == 'Four'\nassert solution('G W Y P Y W G G') == 'Four'\nassert solution('G W Y P Y W P') == 'Four'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 3 4 2', '2 3 1 3 4 2') == '6'\nassert solution('5 3 3', '1 2 4 2 3') == '2'\nassert solution('5 5 6', '1 2 6 10 3') == '2'\n\"\"\"\n\nn, x, y = [int(i) for i in input().split(' ')]\ndur = [int(i) for i in input().split(' ')]\ndur.sort()\n\nresult = 0\ni, j = 0, len(dur) - 1\nwhile i <= j:\n    if x <= 0 and y >= 0:\n        result += 1\n        break\n\n    dur[i] -= x\n    dur[j] += y\n    i += 1\n    j -= 1\n\nprint(result)\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == \"2\"\nassert solution(\"5 5 6\\n1 2 6 10 3\\n\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\n\n-------------\n\n\n\nhttps://app.codility.com/demo/results/training3M1XF3-P94/"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 3 4 2\\n2 3 1 3 4 2') == '6'\nassert solution('5 5 6\\n1 2 6 10 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\n\n\n-----------------------\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == \"2\"\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == '6'"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n4 8 2 6 2\n4 5 4 1 3\n\"\"\") == \"7\"\nassert solution(\"\"\"5\n4 8 2 6 2\n4 5 4 1 3\n\"\"\") == \"7\"\nassert solution(\"\"\"4\n1 3 2 4\n1 3 2 4\n\"\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\n\n\"\"\"\n\na = [int(x) for x in stdin.readline().split()]\nb = [int(x) for x in stdin.readline().split()]\n\nprint(sum([max(a[i], b[i]) for i in range(len(a))]))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == '7'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3\\n') == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\n\nassert solution(\"4 5 4 1 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\\n\") == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"4 8 2 6 2\", \"4 5 4 1 3\", \"\"]) == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\nassert solution(\"1 3 2 4\\n1 3 2 4\") == \"0\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(a[0], end=\" \")\n\nfor i in range(1, n):\n    if a[i - 1] % 10 == 1 and a[i] % 10 == 2:\n        a[i - 1] += 1\n    if a[i - 1] % 10 == 2 and a[i] % 10 == 1:\n        a[i - 1] -= 1\n    print(a[i - 1], end=\" \")\n\nprint()\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_1) == test_1_result"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # Reading the input\n        num_of_vertices, num_of_edges = map(int, stdin.split(\" \"))\n        graph = defaultdict(list)\n        for _ in range(num_of_edges):\n            v, u = map(int, stdin.split(\" \"))\n            graph[v].append(u)\n            graph[u].append(v)\n\n        # Computing the answer\n        visited = [0] * num_of_vertices\n        ans = 0\n        for v in range(num_of_vertices):\n            if visited[v] == 0:\n                self.dfs(graph, v, visited)\n                ans += 1\n\n        return ans\n\n    def dfs(self, graph, v, visited):\n        visited[v] = 1\n        for u in graph[v]:\n            if visited[u] == 0:\n                self.dfs(graph, u, visited)"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n') == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n2 3') == '0'\nassert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '2'\nassert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n3 5') == '1'\nassert solution('6 8\\n1 2\\n3 4\\n5 6\\n2 3\\n3 4\\n5 6\\n6 1') == '2'\nassert solution('6 8\\n1 2\\n3 4\\n5 6\\n2 3\\n3 4\\n5 6\\n6 1\\n2 3\\n3 4\\n5 6\\n6 1') == '0'\n\n'''\n\nimport sys"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == '2\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == 2\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1\\n1 3\\n2 3\\n2 4') == '4'\nassert solution('5\\n2 1\\n1 3\\n2 3\\n2 4\\n2 5') == '4'\nassert solution('5\\n2 0\\n0 1\\n2 3\\n2 4\\n2 5') == '0'\nassert solution('5\\n1 0\\n0 1\\n2 3\\n2 4\\n2 5') == '4'\nassert solution('5\\n0 1\\n0 2\\n1 3\\n1 4\\n1 5') == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\") == \"4\"\n\"\"\"\n\nfrom math import floor\n\nclass Vertex:\n    def __init__(self, index, color):\n        self.index = index\n        self.color = color\n\nclass Edge:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\nclass Graph:\n    def __init__(self, n):\n        self.vertices = [Vertex(i, 1) if i < n/2 else Vertex(i, 2) for i in range(n)]\n        self.edges = []"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 1 2\\n1 2\") == 1\nassert solution(\"1 0 0 0 2\\n1 2\") == 0\nassert solution(\"3 1 2\\n2 3\") == 0\nassert solution(\"5 1 0 0 1 2 3 4\\n1 2\\n2 3\\n3 4\\n4 5\") == 4\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"5\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"5\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"5\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"5\\n2 0 0 0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1', 'wrong result'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4', 'wrong result'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4', 'wrong result'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\") == \"0\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\n\"\"\"\n\nimport math\nimport sys\n\nMAX_N = 100010"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"dcba\"\nassert solution(\"efgh\") == \"ghef\"\nassert solution(\"hijk\") == \"fkji\"\nassert solution(\"abcc\") == \"ccba\"\nassert solution(\"efghi\") == \"ghfe\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('afogk') == 'alvuw'\nassert solution('asdji') == 'qoztvz'\nassert solution('nijfvj') == 'tvqhwp'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"afogk\") == \"bc\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('az') == 'bc'\nassert solution('bf') == 'bc'\n\nsolution('nijfvj')\nsolution('tvqhwp')\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"afogk\") == \"qoztvz\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"abcd\") == \"acb\"\nassert solution(\"zzz\") == \"acz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"afogk\") == \"qoztvz\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"tvqhwp\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ac\") == \"bb\"\nassert solution(\"ab\") == \"bb\"\nassert solution(\"a\") == \"b\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('az') == 'bc'\nassert solution('bf') == 'bc'\nassert solution('cx') == 'cw'\nassert solution('dx') == 'ej'\nassert solution('ex') == 'ey'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n20 10 40 30\") == \"NO\"\nassert solution(\"5 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"4 4\\n20 10 40 30\") == \"NO\"\nassert solution(\"5 5\\n20 10 40 30\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n15 13 15 15 12''') == 'YES\\n1 2 5'\nassert solution('''5 4\n15 13 15 15 12''') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n10 20 30 40') == 'NO'\nassert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\nassert solution('4 4\\n20 10 40 20') == 'NO'\nassert solution('1\\n20 10 40 20') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input/2019_10.txt\").read()) == \"YES\\n1 2 3 4\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3\n15 13 15 15 12''') == '''YES\n1 2 5'''\nassert solution('''5 4\n15 13 15 15 12''') == '''NO'''\nassert solution('''4 4\n20 10 40 30''') == '''YES\n1 2 3 4'''\nassert solution('''6 4\n15 10 20 25 15 25''') == '''YES\n1 2 5'''\n\nassert solution('''5 3\n20 15 10 20''') == '''NO'''\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\\n\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('5 1 2 4 0 2') == 'NO'\nassert solution('5 1 6 8 2 9 0 10') == 'NO'\nassert solution('5 1 3 6 8 2 9 0 10') == 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"9\\n1 2 4 0 2\") == \"NO\\n0 0 0 0 0 1 0 1\"\nassert solution(\"1\\n1\") == \"YES\\n1 0 0 0 0 1 0 1\"\nassert solution(\"1\\n2\") == \"NO\\n0 0 0 0 0 1 0 1\"\nassert solution(\"0\\n1\") == \"YES\\n1 0 0 0 0 1 0 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10\\n') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('1 2 4 0 2\\n') == 'NO'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\") == \"YES\"\nassert solution(\"9 1 8 4 0\") == \"YES\"\nassert solution(\"9 8 7 6 5\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('4 1 3 6 8 2 9 0 10') == 'NO'\nassert solution('5 1 2 3 9 7 10 6 0 4') == 'YES\\n0 1 1 1 0 1 1 0 1'\n\n####################################################################################################################################################################################################################################\n\nimport sys; input = sys.stdin.readline; print = sys.stdout.write;"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5\\n1 2 3 4 0 2\") == \"NO\\n1 1 1 1 1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"1\\n5 1 3 6 8 2 9 0 10\") == \"NO\\n0 0 0 0 0 0 1 0 1 0\"\nassert solution(\"3\\n5 1 3 6 8 2 9 0 10\") == \"NO\\n1 0 0 0 0 1 0 1 0\"\n\nprint('Hooray!')"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"4\\n2 1 4 0 2\") == \"NO\\n0 1 0 1 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\\n1 0 0 0 1\"\nassert solution(\"3\\n1 2 3\") == \"YES\\n1 0 0 1\"\nassert solution(\"6\\n1 2 3 5 6 7\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"7\\n2 1 3 4 5 6 7\") == \"YES\\n1 1 1 1 1 1 0 1\"\nassert solution(\"5\\n1 1 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '3'\nassert solution('''10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '0'\nassert solution('''10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '1134'\nassert solution('''10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '0'\n\n'''"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\n\n-----Test cases-----\n\n---\n\nInput\n5\n1 3 3 2\n8 5 8 8\n9 3 8 4\n2 6 0 6\n5 2 0 0\n\nOutput\n2\n1\n6\n0\n\n\n---\n\nInput\n1\n10 4 8 1\n4 2 8 4\n\nOutput\n1\n1\n\n---\n\nInput\n1\n5 3 1 7\n8 4 10 2\n2 3 0 4\n\nOutput\n1\n0\n1\n\n\n---\n\nInput\n1\n1 0 0 1\n1 1 1 1\n\nOutput\n0\n\n---\n\nInput\n3\n1 2 1 1\n3 1 1 1\n1 0 1 1\n\nOutput\n1\n0\n1\n\n---\n\nInput\n1\n1 1 1 1\n1 1 1 1\n\nOutput\n1\n0\n0\n\n---\n\nInput\n1\n1 1 1 1\n1 1 1 1\n\nOutput\n1\n1\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"1\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"0\\n0\\n1134\\n0\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List, Dict, Tuple\n\nimport intcode\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"5 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nimport sys\nimport bisect\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nprint('The local tests are done. Click on \"Check\" for more details about input and output.')"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 3\nassert solution(\"2\") == 1\nassert solution(\"20\") == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 3\nassert solution('8') == 1260\nassert solution('20') == 12164510040883200\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\nassert solution('4\\n') == '3'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"aaa\") == \"\"\nassert solution(\"a\") == \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"aaabac\") == \"\"\nassert solution(\"babab\") == \"\"\nassert solution(\"cbaab\") == \"cba\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"def\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == 'def'\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('c') == 'c'\nassert solution('cc') == ''\nassert solution('ccc') == ''\nassert solution('ccca') == 'ccc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == ''\n\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"c\", 1) == \"b\"\nassert solution(\"cccccc\", 1) == \"cccccc\"\nassert solution(\"cccbbbbaaababccccccbc\", 1) == \"bbbbaaababccccccbc\"\nassert solution(\"acccbccbbaacbcc\", 2) == \"cccbcbbaacbcc\"\nassert solution(\"cccbacbcccbacbcccbacb\", 3) == \"cccbcbacbcccbacbcc\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\narr = [0] * n\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    arr[t - 1] = d\n\ncur = 0\nfor i in range(n):\n    if arr[i]!= 0:\n        cur += k[i]\n    else:\n        cur += k[i] // arr[i]\n\nprint(math.ceil(cur))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b\n\nprint(solution(a))\n'''\n\nimport sys\n\nn, m = [int(x) for x in input().split()]\nk = [int(x) for x in input().split()]\nd = [[int(x) for x in input().split()] for _ in range(m)]\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 3 2') == '20'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\norders = [0] * n\nfor i in range(m):\n    d, t = map(int, stdin.readline().split())\n    orders[t - 1] = d\n\nprev = 0\nans = 0\nfor i in range(n):\n    if orders[i] > 0:\n        ans += orders[i]\n        prev = orders[i]\n    else:\n        ans += prev + 1\n        prev = prev + 1\n\nprint(ans)\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 1 1 1 1') == '2'\nassert solution('2 1 0 1 0') == '3'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3\\n1\\n1\\n1\") == '4'\nassert solution(\"6\\n5\\n5\\n4\\n4\\n5\\n5\\n2\\n3\\n3\\n3\\n3\") == '20'\nassert solution(\"7\\n6\\n5\\n4\\n4\\n5\\n5\\n5\\n2\\n3\\n3\\n3\\n3\") == '20'\nassert solution(\"5\\n4\\n3\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n3\") == '20'\nassert solution(\"6\\n5\\n4\\n4\\n5\\n5\\n5\\n2\\n3\\n3\\n3\\n3\") == '20'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n.*\\n.*') == '3\\n2 2 1'\nassert solution('2 3\\n.*\\n.*') == '3\\n3 2 1'\nassert solution('4 4\\n**.\\n.*\\n.*\\n.*') == '3\\n3 3 1'\nassert solution('2 2\\n**\\n.*') == '-1'\nassert solution('3 4\\n***\\n.*\\n.*') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n**.*\\n*.*\") == \"2 2 1\"\nassert solution(\"3 3\\n.***\\n*.*\\n.***\") == \"2 2 1\"\nassert solution(\"3 3\\n.***\\n.**.*\\n.*.*\") == \"2 2 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 5\\n*...\\n*..\\n*..\\n*..\\n.....\\n\") == \"-1\"\nassert solution(\"3 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 5\\n.*...\\n.*..\\n*..\\n*..\\n.....\\n\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    5 5\n    .*...\n    ****.\n    .****\n    ..**.\n    .....\n    \"\"\"\n) == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n\nassert solution(\n    \"\"\"\n    3 3\n    *.*\n    .*.\n    *.*\n    \"\"\"\n) == '-1'\n\nassert solution(\n    \"\"\"\n    5 5\n    .*...\n    ****.\n    .****\n    ..**.\n    .....\n    \"\"\"\n) == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n\nassert solution(\n    \"\"\"\n    5 5\n    .*...\n    ****.\n    .*...\n    .*...\n    .....\n    \"\"\"\n) == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n3 2 1\\n3 4 1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('3 3\\n.*\\n.*\\n*.') == '-1'\nassert solution('3 3\\n.*\\n.**\\n.*.') == '-1'\nassert solution('3 3\\n*.*\\n.*.') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\nassert solution(\"4 3\\n***\\n.*\\n.*\") == \"2\"\nassert solution(\"4 4\\n****\\n*.*\\n.*.\") == \"1\"\nassert solution(\"4 4\\n****\\n.*.*\\n.*.\") == \"2\"\nassert solution(\"4 4\\n****\\n**.*\\n.*.\") == \"2\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"4 4\\n*..\\n*.*\\n*.*\\n*..\") == \"2\\n3 3 1\\n3 4 1\"\nassert solution(\"4 4\\n.*..\\n.*.*\\n.*.*\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"4 4\\n.*..\\n.*.*\\n.*.*\\n.*..\") == \"2\\n3 3 1\\n3 4 1\"\nassert solution(\"4 4\\n.*..\\n.*.*\\n.*.*\\n.*..\") == \"2\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == 'Yes'\n\nassert solution('100') == 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"527\") == \"No\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"999\") == \"No\"\nassert solution(\"103\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 'Yes'\nprint(solution('575'))\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_str) == output_str\n\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('121') == 'Yes'\nassert solution('9775') == 'Yes'\nassert solution('75') == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('576') == 'Yes'\nassert solution('575') == 'Yes'\nassert solution('553') == 'No'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('10 10') == 'Draw'\nassert solution('1 1') == 'Draw'\nassert solution('13 13') == 'Draw'\nassert solution('13 12') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"5 4\") == \"Draw\"\nassert solution(\"3 3\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"2 8\") == \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"7 5\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"8 6\"\n) == \"Alice\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"8 6\"\n) == \"Alice\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('2 5') == 'Bob'\nassert solution('1 2') == 'Draw'\nassert solution('1 1') == 'Draw'\nassert solution('4 4') == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'Alice'\nassert solution('7 8') == 'Bob'\nassert solution('4 3') == 'Draw'\nassert solution('7 8') == 'Alice'\nassert solution('5 7') == 'Draw'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n\nimport sys\n\nimport pytest\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n0 0\\n1 1\\n3 0\") == \"3\\n1\"\n\"\"\"\n\nN, M = map(int, stdin.readline().split())"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n2 0\n0 0\n-1 0\n1 0\n''') == '2\\n1'\n\n\"\"\"\nfrom typing import Tuple\nimport numpy as np\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = list(map(int, stdin.split(' ')))\n\n        A = np.array([list(map(int, stdin.split('\\n')[1].split(' ')[1:])) for _ in range(n)])\n        B = np.array([list(map(int, stdin.split('\\n')[2 + i].split(' ')[1:])) for i in range(m)])\n        \n        A = A.transpose(1,0)\n        B = B.transpose(1,0)\n\n        dists = np.array([np.sum(np.abs(A - B[i])) for i in range(m)])\n\n        return '\\n'.join(map(str, dists.argmin(axis=0)))"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 2\n2 0\n0 0\n-1 0\n1 0\n\"\"\") == \"\"\"\n2\n1\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\nlines = stdin.readlines()\nN, M = map(int, lines[0].split())\n\ndic = {}\nfor i in range(1, N+1):\n    a, b = map(int, lines[i].split())\n    dic[i] = (a, b)\n\ndic_2 = {}\nfor i in range(N+1, N+1+M):\n    c, d = map(int, lines[i].split())\n    dic_2[i] = (c, d)\n\nresult = {}\n\nfor i in range(1, N+1):\n    candi = list(dic_2.keys())\n    for j in range(len(candi)):\n        if abs(dic[i][0]-dic_2[candi[j]][0]) + abs(dic[i][1]-dic_2[candi[j]][1]) <= abs(dic[i][0]-dic[i][1]):\n            result[i] = candi[j]\n\nfor i in range(1, N+1):\n    print(result[i])\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n3 3\\n3 3\\n3 3\") == \"0\\n1\\n2\"\nassert solution(\"3 3\\n1 1\\n2 0\\n3 0\") == \"1\\n1\\n2\"\nassert solution(\"3 3\\n1 1\\n2 2\\n3 0\") == \"2\\n2\\n0\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nprint(\"Passed!\")\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == '2\\n1'\n\n------Problem 3-------\nThere are N cities and M friends traveling to visit them. The cities are numbered 1 to N.\nEach friend has a score assigned to each city. The friends want to go to the city with the largest sum of scores.\n\nWhich city will the friend go to?\n\n-----Constraints-----\n - 1 \\leq N,M \\leq 10^5\n - 1 \\leq scores_i \\leq 10^8\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M\nscores_1\nscores_2\n...\nscores_M\n\n-----Output-----\nPrint the city number of the friend to go to.\n\n-----Sample Input-----\n3 3\n2 3 5\n3 2 6\n3 2 3\n\n-----Sample Output-----\n2\n\nThe score for each city is:\nCity 1 has a score of 2+3+5=11\nCity 2 has a score of 3+2+6=9\nCity 3 has a score of 2+2+3=6\nThe largest sum is 11, so the friend should go to city 2.\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n2\"\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '14'\nassert solution('1') == '3'\nassert solution('8') == '79'\nassert solution('5') == '29'\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\nfrom io import StringIO\nimport sys\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '14'\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '14'\nassert solution('3') == '8'\nassert solution('5') == '28'\nassert solution('8') == '29'\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 14\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"22\"\nassert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"4 2\\n...\\n...\\n.##\\n.#.\\n\") == \"No\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == 'Yes'\nassert solution(\"3 2\\n.#.\\n.#.\\n#.#\\n#.\") == 'No'\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"#.#\\n.#.\\n#.#\\n#.\") == \"No\"\nassert solution(\"#..\\n.#.\\n#..\\n..#\") == \"Yes\"\nassert solution(\"#..\\n.#.\\n#..\\n..#\") == \"No\"\nassert solution(\"#.#\\n.#.\\n#.#\\n#.#\") == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n.#.\n.#.\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n#.#\\n#.#\\n#.#') == 'No'\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n..\") == \"No\"\nassert solution(\"1 2\\n#..\") == \"No\"\nassert solution(\"2 2\\n##\") == \"No\"\nassert solution(\"3 3\\n#.#\\n#.#\\n#.#\\n#.#\") == \"No\"\nassert solution(\"3 3\\n#.#\\n#.#\\n#.#\\n#.#\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n##\\n##\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.\\n.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n.#\\n.#\\n#.\") == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport re\n\nN, M = [int(x) for x in re.findall(r'\\d+', sys.stdin.readline())]\nA = [sys.stdin.readline() for i in range(N)]\nB = [sys.stdin.readline() for i in range(M)]"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n##.\\n.#.\\n#.#\\n#.\\n.\") == \"No\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 5 6') == '47'\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2\") == \"53\"\nassert solution(\"1 5 2\") == \"53\"\nassert solution(\"7 5 3\") == \"83\"\nassert solution(\"7 7 3\") == \"114\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    panels = [int(i) for i in line.split()]\n    print(sum(panels) + max(panels))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\nimport sys\n\nA, B, C = map(int, sys.stdin.read().split())\nprint(max(A * B, A * C, B * C))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"4 5 6\") == \"33\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\n\"\"\"\n\nA, B, C = [int(i) for i in stdin.split()]\n\nA = str(A)\nB = str(B)\nC = str(C)\n\nA = \"\".join([x for x in A[::-1]])\nB = \"\".join([x for x in B[::-1]])\nC = \"\".join([x for x in C[::-1]])\n\nprint(int(A) + int(B) + int(C))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\n\"\"\"\nProblem Statement:\n\nThere are three \"integer panels\", each with a digit between 1 and 9 (inclusive) printed on it, and one \"operator panel\" with a + printed on it.\n\nThe player should construct a formula of the form X + Y, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)\n\nThen, the amount of the allowance will be equal to the resulting value of the formula.\n\nGiven the values A, B and C printed on the integer panels used in the game, find the maximum possible amount of the allowance.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A, B, C \\leq 9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C\n\n-----Output-----\nPrint the maximum possible amount of the allowance.\n\n-----Sample Input-----\n1 5 2\n\n-----Sample Output-----\n53\n\nThe amount of the allowance will be 53 when the panels are arranged as 52+1, and this is the maximum possible amount.\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\n\nfrom typing import List\nimport functools\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n4980\n7980\n6980''') == '15950'\n\nassert solution('''4\n9120\n1350\n4200\n5200''') == '6350'\n\nassert solution('''3\n30000\n50000\n70000''') == '120000'\n\nassert solution('''5\n9500\n9500\n9500\n9500\n9500''') == '95000'\n\nassert solution('''5\n0\n9500\n9500\n9500\n9500''') == '0'"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(\"Passed\")\n\n\"\"\"\n\n\"\"\"\n\u6838\u5fc3\u601d\u8def\uff1a\n\n\u6839\u636e\u9898\u76ee\u8981\u6c42\uff0c\u6765\u5224\u65ad\u6700\u5927\u4f18\u60e0\u5238\u662f\u5426\u5b58\u5728\u3002\n\n\"\"\"\n\n\"\"\"\n\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a\uff1a\n\n\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u4e3a\uff1aN = 2 \\leq N \\leq 10\n\n\u8f93\u5165\u6570\u636e\u4e2d\u7684\u6570\u636e\u4e3a\uff1ap_i = [0 \\leq p_i \\leq 10000]\n\n\u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u7ed9\u8f93\u5165\u6570\u636e\u4e2d\u7684\u6bcf\u4e00\u4e2ap_i\u9644\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u6765\u786e\u5b9a\u6700\u5927\u4f18\u60e0\u5238\u662f\u5426\u5b58\u5728\u3002\n\n\u75280\u8868\u793a\u5426\uff0c\u75281\u8868\u793a\u662f\uff0c\u5982\uff1a[0, 0, 0, 0]\n\n\"\"\"\n\nN = int(input())\nls = [int(input()) for _ in range(N)]\nfor i in range(N):\n    if ls[i] % 2 == 0:\n        ls[i] = 1\n    else:\n        ls[i] = 0\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(solution(\"3\\n4980\\n7980\\n6980\"))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\"\nimport sys"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\n---"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint('Test PASS.')"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"29\\n20\\n7\\n35\\n120\\n21\") == \"159\"\n\"\"\"\n\na, b, c, d, e = map(int, input().split())"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29 20 7 35 120') == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nnumbers = [int(i) for i in stdin.split(\" \")]"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\nfrom datetime import timedelta, datetime\n\nDishes = List[str]\n\n@dataclass\nclass Order:\n    time: int\n    dishes: Dishes\n\n\nclass Restaurant:\n    # food: List[str]\n    # time_per_food: List[int]\n    # orders: List[Order]\n\n    def __init__(self):\n        self.food = [\"ABC Don (rice bowl)\": timedelta(minutes=A),\n        \"ARC Curry\": timedelta(minutes=B),\n        \"AGC Pasta\": timedelta(minutes=C),\n        \"APC Ramen\": timedelta(minutes=D),\n        \"ATC Hanbagu (hamburger patty)\": timedelta(minutes=E)]\n\n        self.time_per_food = [A, B, C, D, E]\n\n        self.orders = []\n\n    def process(self, order_time: int, dish: str):\n        # Check for invalid orders\n        if order_time % 10!= 0:\n            return\n\n        if len(self.orders) > 0:\n            last_order = self.orders[-1]\n            if last_order.time + timedelta(minutes=self.time_per_food[dish]) > order_time:\n                return\n\n        self.orders.append(Order(order_time, dish))\n\n    def get_next_order_time(self) -> datetime:\n        # Find the next order that can be processed\n        for order in self.orders:\n            if order.time <= datetime.now():\n                return order.time\n\n        # No more orders\n        return None\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('ABC Don') == '29'\nassert solution('ARC Curry') == '50'\nassert solution('AGC Pasta') == '57'\nassert solution('APC Ramen') == '180'\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom typing import List\n\nimport math"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4\\n3\\n2\\n1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n10 30\\n') == '7.5'\n\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 30') == '7.5'\nassert solution('100 80') == '0.2'\nassert solution('100') == '0.1'\nassert solution('1 100') == '1.0'\nassert solution('1 2 3 4 5 6 7 8 9 10 11') == '1.0'\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '-2'\nassert solution('1 1') == 'nan'\nassert solution('1 2 3') == '0.14285714285714285'\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n\ns = 0\nfor i in A:\n    s += 1 / i\n\nprint(round(s / N, 5))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == '2'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\n----\nSolution:\n\n'''"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nheights = []\n\nfor _ in range(n):\n    heights.append(int(input()))\n\nheights.sort()\n\nprint(heights[-k] - heights[k - 1])\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == '2'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"B\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\nprint(solution('B'))\nprint(solution('a'))"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\n\n-------"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(A) == A\nassert solution(B) == A\n\nimport sys"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == 'A'\nassert solution('B') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"A\"\nassert solution(\"A\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"b\") == \"b\"\nassert solution(\"B\") == \"A\"\n\"\"\"\n\nimport pytest\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"A\"\nassert solution(\"C\") == \"C\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'A'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n\"\"\"\n\nfrom typing import Any, List\n\nfrom stream import Stream\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"\n\nimport sys\n\nK, S = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\n\"\"\"\n\nK, S = [int(item) for item in stdin.split()]\n\nprint(sum([int(K / 3) ** i for i in range(S // 3 + 1)]))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\nprint(solution(\"2 2\"))\n\n---"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n\") == \"6\"\n\"\"\"\n\nfrom typing import Generator"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\nassert solution('2 1') == '0'\nassert solution('1 3') == '0'\nassert solution('3 1') == '0'\nassert solution('1 0') == '1'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == '6'\n\n-------\n3.2\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.3\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.4\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.5\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.6\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.7\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.8\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.9\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.10\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.11\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.12\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.13\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.14\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.15\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.16\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.17\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.18\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.19\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.20\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.21\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264100\nfor all i,j, 1\u2264i<N,1\u2264j<M\n\nhow many elements of the matrix are equal to the element A(N,M)?\n\n-------\n3.22\n\nThere is a matrix consisting of N rows and M columns.\n\nGiven that:\n\n1\u2264N,M\u2264100\n1\u2264Aij\u2264"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 6\nassert solution('1 3') == 3\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\")!= \"YYMM\"\nassert solution(\"1905\")!= \"YYMM\"\nassert solution(\"1905\")!= \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1955\") == \"MMYY\"\nassert solution(\"1955\") == \"AMBIGUOUS\"\nassert solution(\"1999\") == \"NA\"\n\"\"\"\nimport re"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1911\") == \"MMYY\"\nassert solution(\"1951\") == \"AMBIGUOUS\"\nassert solution(\"1991\") == \"NA\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"XX1905\") == \"AMBIGUOUS\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'1905') == 'YYMM'\nassert solution(\n'1950') == 'MMYY'\nassert solution(\n'1902') == 'AMBIGUOUS'\nassert solution(\n'1904') == 'AMBIGUOUS'\nassert solution(\n'1961') == 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\") == 2\nprint(solution(\n    \"3\"))\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '2'\nassert solution('10\\n') == '4'\nassert solution('100\\n') == '14'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '1'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nprint('Test passed')"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n') == '2'\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"2\"\n\"\"\"\n\nK = input().strip()"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nA, B = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n\nA, B = map(int, input().split())\n\nhour = A - B\n\nprint(hour % 24 if hour > 0 else 24 - abs(hour % 24))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\n\ninput_lines = iter(sys.stdin.read().splitlines())\nA, B = [int(x) for x in next(input_lines).split()]\n\nprint(f\"{(A + B) % 24}\")\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 12\") == \"21\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().split()\nk = int(a[0])\nn = int(a[1])\n\ni = 0\nr = 0\n\nwhile i < k:\n    a = sys.stdin.readline().split()\n    if int(a[0]) <= n:\n        r += int(a[0])\n    else:\n        r += int(a[0]) - 100 * (int(a[0]) - n)\n    i += 1\n\nprint(r)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2919\\n') == '3719'\nprint('Test Pass.')"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2919\\n') == '3719'\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n\n\"\"\"\nINPUT FORMAT\nThe first line contains an integer N, the number of contests.\nEach of the next N lines contains two integers, one from each contestant:\nthe contest's Displayed Rating and the contest's Inner Rating.\n\nOUTPUT FORMAT\nPrint the contest's Inner Rating.\n\nSAMPLE INPUT 0\n2\n101 79\n788 10\n\nSAMPLE OUTPUT 0\n79\n\nSAMPLE INPUT 1\n5\n100 1\n100 1\n100 2\n100 2\n100 3\n\nSAMPLE OUTPUT 1\n200\n\nSAMPLE INPUT 2\n3\n1234 1234\n1234 1234\n1234 1234\n\nSAMPLE OUTPUT 2\n0\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys\n\nN, R = sys.stdin.readlines()\nN, R = int(N), int(R)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1\n4 3\n3 3\n3 2\n3 1\n2 1\n2 2\n2 3\n1 1\n1 2\n1 3''') == \"3\"\n\nassert solution('''2 100\n50 50\n''') == \"0\"\n\nassert solution('''5 20\n35 17\n44 9\n48 10\n58 20\n99 90\n''') == \"100\"\n\nassert solution('''4 3848\n34 2000\n50 6\n44 18\n10 43\n''') == \"2870\"\n\nassert solution('''3 1\n2 1\n2 1\n''') == \"0\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2919') == '3719'\nprint(solution(input()))"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\n\"\"\"\n\nfrom decimal import *\nimport math"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == \"4\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1, 2) == 1\nassert solution(11, 2) == 4\nassert solution(11, 3) == 2\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == 4\n\"\"\"\n\nn, k = map(int, input().split())\nprint(len(str(n)) - len(str(n).rstrip('0')))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n\n----\n1. Convert the base-10 number N to base-K.\n2. Count the number of digits in N in base-K.\n\n3. For example, N = 111010, K = 4\n\n4. In base 4, 111010 is 111101.\n5. So the number of digits in N in base 4 is\n 5+1+1+1+1+1 = 5.\n\n6. So the number of digits in N in base 4 is 5.\n\n7. The number of digits in N in base 4 is\n 4.\n\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 2') == '4'\nassert solution('10 2') == '2'\nassert solution('13 10') == '3'\nassert solution('100 10') == '2'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11, 2) == 4\nassert solution(11, 3) == 2\nassert solution(11, 4) == 1\nassert solution(1, 10) == 1\nassert solution(0, 10) == 0\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '3'\nassert solution('8') == '2'\nassert solution('30') == '4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '4\\n'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == 'Yay!'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\nassert solution(\"4 4\") == \"Yay!\"\n\nassert solution(\"1 1\") == \"Yay!\"\n\nassert solution(\"3 8\") == \"Yay!\"\n\nassert solution(\"5 9\") == \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '(:'\nassert solution('1 1') == 'Yay!'\nassert solution('7 1') == 'Yay!'\nassert solution('8 2') == 'Yay!'\nassert solution('1 2') == '(:'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"Yay!\"\n\nassert solution(\"4 5\") == \"Yay!\"\n\nassert solution(\"1 8\") == \"Yay!\"\n\nassert solution(\"8 9\") == \"Yay!\"\n\nassert solution(\"8 7\") == \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"7 4\") == \"Yay!\"\nassert solution(\"3 3\") == \"Yay!\"\nassert solution(\"2 2\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '(':\nassert solution('1 1') == 'Yay!':\nassert solution('1 16') == 'Yay!':\nassert solution('5 16') == 'Yay!':\nassert solution('3 5') == 'Yay!':\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\n\"\"\"\n\na, b = map(int, stdin.strip().split())\n\nprint('Yay!' if a + b <= 16 and a % 2 == 0 and b % 2 == 0 else ':(')"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Yay!\"\nassert solution(\"16 5\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\nassert solution(\"1 16\") == \"Yay!\"\nassert solution(\"3 16\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n-------------------\n| SOLUTION:       |\n-------------------"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"1234678910\") == \"15\"\nassert solution(\"11111111111\") == \"0\"\nassert solution(\"99999\") == \"0\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"456789\") == \"0\"\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == \"34\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234567876') == '34'"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"12\"\nassert solution(\"12345\") == \"345\"\nassert solution(\"123456\") == \"567\"\nassert solution(\"1234567\") == \"456\"\nassert solution(\"12345678\") == \"5678\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"1234567876\"\n) == \"34\"\n\nassert solution(\n    \"1234567876\"\n) == \"34\"\n\nassert solution(\n    \"1234567876\"\n) == \"34\"\n\nassert solution(\n    \"1234567876\"\n) == \"34\"\n\nassert solution(\n    \"1234567876\"\n) == \"34\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 52 2 9 49 54 16 36') == '2999999987 2'\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution_text) == solution_result\nprint(\"You are right!\")"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\nassert solution(\"2 9\\n\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\\n\") == \"12 13\"\nassert solution(\"6 52 0 13 26 52\\n\") == \"2999999987 2\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 4 1\\n\") == \"3\"\nassert solution(\"3 1 4 1\\n\") == \"1\"\nassert solution(\"5 1 1 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 3\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\n\"\"\"\nfrom itertools import accumulate\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 1\\n1 1 1 2 2\") == 2\nassert solution(\"3 1 4 1\\n1 1 1 2 2\") == 1\nassert solution(\"3 1 2 1\\n1 1 1 2\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 1 4 1\") == \"3\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 2 2') == '2'\nassert solution('1 1 1 2 2') == '2'\nassert solution('1 1 1 2 2') == '2'\nassert solution('1 1 1 2 2') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n1 1 4 1\") == \"3\"\nassert solution(\n    \"5\\n1 1 1 2 2\") == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == \"3\"\nassert solution(\"3 1 4 1\\n1 1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 4 1\\n3 1 2\") == \"3\"\nassert solution(\"5 1 1 2 2\\n2 1 1 2\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, m = map(int, stdin.readline().split())\n\ng = {\n    (i, j) : 0\n    for i in range(n)\n    for j in range(i + 1, n)\n}\n\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    g[(a, b)] = 1\n    g[(b, a)] = 1\n\nm = sum([len(i) for i in g.values()])"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"1 3\\n2 3\") == \"2\"\nassert solution(\"3 1\\n3 2\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n3 2') == '2'\nassert solution('1 2\\n2 1') == '2'\nassert solution('1 2\\n2 3\\n3 2') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == '2'\nassert solution(\"2 0\\n\") == '1'\nassert solution(\"3 2\\n1 3\\n2 3\") == '2'\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\n\n\n-----Tests-----\n-----Visualizer-----\n-----Code-----\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('3 2\\n1 3\\n2 3') == '2'\nassert solution('2 0') == '1'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n1 3\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport unittest\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\nassert solution('5 3\\n2 3\\n2 4\\n5 1\\n4 1') == '2'\nassert solution('4 0\\n') == '1'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4''') == '4'\nassert solution('''5 2\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4''') == '4'\nassert solution('''7 1\n1 2 3 4 5 6\n1 1\n1 2\n1 3\n2 3\n2 4\n3 4\n3 5\n4 5\n4 6\n5 6''') == '6'"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == 11\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == 4\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 1\\n1 2 3 4 5') == '11'\nassert solution('7 2\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\nassert solution('7 3\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '10'\nassert solution('7 4\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '11'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"input.txt\").read()) == '4'\nprint(\"Cool!\")"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\") == 11\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == 4\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('1 2 3 4 5') == '11'\nassert solution('1 2\\n2 3') == '12'\nassert solution('1 2\\n2 3\\n3 4') == '14'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n--------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n''') == '4'\nassert solution('''\n5 1\n1 2 3 4 5\n''') == '11'\n\nassert solution('''\n5 1\n1 2 3 4 5\n''') == '11'\nassert solution('''\n8 1\n1 2 1 1 1 1 1 1\n''') == '3'\nassert solution('''\n8 1\n1 2 1 2 1 2 1 2\n''') == '5'"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1 1'\nassert solution('3 2') == '1 1'\nassert solution('3 1') == '2 1'\nassert solution('2 1 2') == '2 2'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 6\n10 15 12\n1 9 12 23 26 37\n\"\"\") == \"\"\"\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\"\"\", solution(\"\"\"\n2 3\n5 10000000000\n5 6 9999999999\n\"\"\") == \"\"\"\n1 5\n2 1\n2 9999999994\n\"\"\"\n\"\"\"\nIn this problem, your task is to determine the number of the room in the dormitory where the letter should be delivered.\n\nInput\nThe first line contains two integers n and m \u2014 the number of dormitories and the number of letters. The second line contains n integers a1, a2,..., an \u2014 the number of rooms in the i-th dormitory. The third line contains m integers b1, b2,..., bm \u2014 the room numbers of all letters.\n\nOutput\nPrint m integers: the room numbers of all letters.\n\nConstraints\n1 <= n, m <= 2 * 10^5\n1 <= ai, bi <= 10^10\n\nExamples\nInput\n3 6\n10 15 12\n1 9 12 23 26 37\n\nOutput\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\nInput\n2 3\n5 10000000000\n5 6 9999999999\n\nOutput\n1 5\n2 1\n2 9999999994\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6 9999999999\") == \"1 9\"\nassert solution(\"3 6 12 23 26 37\") == \"1 9\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\ndormitory = [int(x) for x in input().split()]\nroom = [int(x) for x in input().split()]\n\ndormitory = sorted(dormitory)\nroom = sorted(room)\n\nres = []\nfor i in range(m):\n    j = room.index(room[i])\n    res.append(f\"{dormitory[j] + 1} {i + 1}\")\n\nprint('\\n'.join(res))"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == \"1 1\\n2 2\\n3 1\\n4 2\\n5 3\\n6 1\"\nassert solution(\"3 6\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 6\n10 15 12\n1 9 12 23 26 37\"\"\") == \"\"\"1 1\n1 9\n2 2\n2 13\n3 1\n3 12\"\"\"\n\nassert solution(\"\"\"2 3\n5 10000000000\n5 6 9999999999\n\"\"\") == \"\"\"1 5\n2 1\n2 9999999994\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\\n\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\\n\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\"\"\"\n\nimport sys\n\na, b, c, d = list(map(int, sys.stdin.readline().split()))\nprint(b if a + b <= c else c)\nprint(c if b + c <= d else d)\nprint(d if a + b + c <= d else a + b + c - d)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\n\"\"\"\n\na, b, c, d = list(map(int, input().split()))\n\npossible_sums = [a + b, a + c, b + c, a + b + c]\n\nprint(sorted(set(possible_sums)))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\nstdin = input()\n\na, b, c, d = [int(n) for n in stdin.split()]"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\nimport re\n\nx = re.split(\"\\s+\", stdin.strip())"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 5 2') == '2 1 3'\nassert solution('2 3 1 2') == '2 1 3'\nassert solution('2 3 4 5') == '3 2 2'\n\"\"\"\n\nimport sys\n\nstdin = [int(x) for x in sys.stdin.read().split()]"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\na, b, c, d = map(int, stdin.split())"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == '2 1 3'\nassert solution(\"40 40 40 60\") == '20 20 20'\nassert solution(\"201 101 101 200\") == '1 100 100'\nassert solution(\"9 9 9 9\") == '9 9 9'\n\n\"\"\"\nfrom collections import Counter\n\nfrom math import gcd"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGBBGRRRGR'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRBGBGBRRGR\"\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRBRBGBGBGRG'\n\nprint('Hooray!')\n\n\"\"\"\n\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('GR') == 'GR'\nassert solution('RR') == 'RR'\nassert solution('RGB') == 'RGR'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''9\nRBGRRBRGG''') == '2'\nassert solution('''8\nBBBGBRRR''') == '2'\nassert solution('''13\nBBRRRRGGGGGRR''') == '6'\n\"\"\"\nfrom typing import Dict, List, Tuple\nfrom collections import deque\nfrom math import inf\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\"\n\nprint(\"\\nSuccess!\")\n\n------------------\n\nInput\n4\nBBB\n\nOutput\n1\nB\n\nInput\n4\nRRB\n\nOutput\n0\n\nInput\n4\nGBG\n\nOutput\n0\n\nInput\n4\nGGG\n\nOutput\n0\n\nInput\n4\nGGB\n\nOutput\n2\nR\n\nInput\n4\nRRR\n\nOutput\n2\nR\n\nInput\n4\nRGB\n\nOutput\n0\n\nInput\n4\nRBR\n\nOutput\n3\nR\n\nInput\n4\nGGR\n\nOutput\n3\nG\n\nInput\n4\nGGB\n\nOutput\n2\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\nGGR\n\nOutput\n1\nG\n\nInput\n4\nGGB\n\nOutput\n1\nG\n\nInput\n4\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRBRBGBGBGRG\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nBGBG') == '5'\nassert solution('3\\nRRG') == '1'\nassert solution('4\\nRRRR') == '0'\nassert solution('7\\nGBGBGBGBG') == '3'\nassert solution('11\\nRRRRRGGGGGGRRRR') == '6'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRBGBGBGRG'\n\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"9\nRBGRRBRGG\n\"\"\"\n        output = \"\"\"2\nRBGRGBRGR\n\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"8\nBBBGBRRR\n\"\"\"\n        output = \"\"\"2\nBRBGBRGR\n\"\"\"\n        self."
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRBBBGBGRG'\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 4 7 5 6 8\\n') == '4\\n2 3 5 6\\n'\nassert solution('6 7 8 3 4 5 9 10 11\\n') == '6\\n1 2 3 7 8 9\\n'\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 4 7 5 6 8') == '4'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('9 6 7 8 3 4 5 9 10 11') == '6'\nassert solution('10 9 8 7') == '1'\nassert solution('6 7 8 3 4 5 9 10 11') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 9 8 7') == '1 2 3 7 8 9'\nassert solution('6 7 8 3 4 5 9 10 11') == '1 2 3 7 8 9'"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('10 9 8 7') == '1'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"1 2 3\"\nassert solution(\"9 8 7 6 5 4 3 2 1 10 11\") == \"2 3 4 5\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 3 4 7 5 6 8\") == \"2 3 5 6\"\nassert solution(\"4 10 9 8 7\") == \"1 4\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6 1 2 3 7 8 9\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4 7 5 6 8\") == '4'\nassert solution(\"1 3 5 2 4 6\") == '2'\nassert solution(\"10 9 8 7\") == '1'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6'\nassert solution(\"1 3 5 2 4 6\") == '2'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == '4\\n2 3 5 6'\nassert solution('6\\n1 3 5 2 4 6') == '2\\n1 4'\nassert solution('4\\n10 9 8 7') == '1\\n1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6\\n1 2 3 7 8 9'\n\n'''\n\nimport sys"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"3 3 4 7 5 6 8\"]) == [4, 2, 3, 5, 6]\nassert solution([\"1 3 5 2 4 6\"]) == [2, 1, 4]\nassert solution([\"1 3 5 2 4 6\"]) == [2, 1, 4]\nassert solution([\"1 3 5 2 4 6\"]) == [2, 1, 4]\nassert solution([\"1 3 5 2 4 6\"]) == [2, 1, 4]\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12345) == \"Yes\"\nassert solution(111111) == \"No\"\n\"\"\"\n\n\"\"\"\nGiven three integers A, B and C, return any string S such that:\n\nS has length A + B and contains exactly C A's followed by B B's.\nThe substring \"AAA\" does not occur in S.\nFor example, given A = 1, B = 2, and C = 3, any solution may be:\n\nS = \"AAABBBBCCC\"\n\n--Problem Link--\nhttps://www.hackerrank.com/challenges/string-validators/problem\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 3') == 'No'\nassert solution('2 1') == 'No'\nassert solution('2 2') == 'Yes'\n\n###"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('3 2') == 'No'\nassert solution('3 3') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('3 3') == 'No'\nassert solution('1 1') == 'Yes'\nassert solution('3 2') == 'No'\nassert solution('1 3') == 'Yes'"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"4 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\n\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nfrom typing import List, Tuple, Set\n\nimport pytest\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n\nimport sys\n\nX, Y = map(int, sys.stdin.readline().strip().split())\n\nprint((X + Y) * 2 if X < Y else X * 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"81 59\") == \"110\"\nassert solution(\"81 60\") == \"110\"\nassert solution(\"81 61\") == \"110\"\nassert solution(\"81 62\") == \"110\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('81 58') == '110'\n\n\"\"\"\n\nfrom typing import Optional, Union"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\"\n) == \"8\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 8\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"8\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 8\n\n----\nSample Input:\n3\n\nSample Output:\n27\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 8\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 8\n\nimport sys\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '11111111'\nassert solution('3') == '11111111'\nassert solution('2') == '22'\nassert solution('4') == '12111122'\nassert solution
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 8\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nimport math\n\nX = int(input())"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n\"\"\"\n\nx = int(input().strip())\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5) == \"YES\"\nassert solution(4) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(4) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(6) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n----\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(7) == \"YES\"\nassert solution(5) == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('1') == 'NO'\nassert solution('9') == 'NO'\n\nprint('All test cases passed.')\n\n---"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\nimport math"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n\nn = int(input())\n\nprint('ABC') if n >= 1000 and n <= 1999 else print('ABC' + str(n)[1:])\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 'ABC'\nassert solution('2') == 'ACB'\nassert solution('3') == 'BAC'\nassert solution('4') == 'BCA'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"999\n\"\"\"\n) == \"ABC\"\n\n\"\"\"\nIn the beginning, AtCoder, the first round of the contest is labeled as ABC001.\nBecause there are 999 rounds in total, ABC999 is the last round.\n\nIn the 1000-th round, there will be no more rounds.\nSo, we can label the contest as ABC999.\n\nThe beginning of the next 1000-th round is labeled as ABC1000.\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == \"Yay!\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n2\\n4\\n8\\n9\\n15\"\n) == \"Yay!\"\n\n-----\nA city has five antennas standing in a straight line,\nwhich are called Antenna A, B, C, D and E from west to east.\n\nTwo antennas can communicate directly if the distance between them is k or less,\nand they cannot if the distance is greater than k.\n\nDetermine if there exists a pair of antennas that cannot communicate directly.\n\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.\n\n---Constraints---\n - a, b, c, d, and k are integers between 0 and 123 (inclusive).\n - a < b < c < d\n\n---Input---\nA single line of five space-separated integers a, b, c, d and k,\nrepresenting the coordinates of the antennas and the distance between them.\n\n---Output---\nPrint Yay! if there exists a pair of antennas that cannot communicate directly,\nand print :( if there is no such pair.\n\n---Sample Input---\n1\n2\n4\n8\n9\n15\n\n---Sample Output---\nYay!\n\nIn this case, there is no pair of antennas that cannot communicate directly, because:\n - the distance between A and B is 2 - 1 = 1\n - the distance between A and C is 4 - 1 = 3\n - the distance between A and D is 8 - 1 = 7\n - the distance between A and E is 9 - 1 = 8\n - the distance between B and C is 4 - 2 = 2\n - the distance between B and D is 8 - 2 = 6\n - the distance between B and E is 9 - 2 = 7\n - the distance between C and D is 8 - 4 = 4\n - the distance between C and E is 9 - 4 = 5\n - the distance between D and E is 9 - 8 = 1\nand none of them is greater than 15. Thus, the correct output is Yay!.\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"0 2 4 8 9 15\") == \":(\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"Yay!\"\nassert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"0 2 4 8 9 15\") == \":(\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n') == ':(\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n') == 'Yay!'\n\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n16\") == \":(\".\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n15\\n16\") == \":(\".\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n15\\n16\") == \":(\".\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 8 9 15\") == 'Yay!'\nassert solution(\"1 2 2 2 2 2 2 2 2\") == 'Yay!'\nassert solution(\"1 2 4 8 9 16 17 21 20 22 25 19 24 18 23\") == 'Yay!'\nassert solution(\"1 2 4 8 12 16 20 24 28 30 32 36 38 40 42 44 48 52 56 60 62 64 68 76 80 82 84 86 88 90 92 94 96 98 100 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200\") == 'Yay!'\n\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\n\n---\n\nWrite 5 lines of code to test the correctness of solution:\nYou will be given an integer a and a string s consisting of lowercase English letters as input.\nWrite a program that prints s if a is not less than 3200 and prints red if a is less than 3200.\n\n-----Constraints-----\n - 2800 \\leq a < 5000\n - s is a string of length between 1 and 10 (inclusive).\n - Each character of s is a lowercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\ns\n\n-----Output-----\nIf a is not less than 3200, print s; if a is less than 3200, print red.\n\n-----Sample Input-----\n3200\npink\n\n-----Sample Output-----\npink\n\na = 3200 is not less than 3200, so we print s = pink.\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\nassert solution(\"blue\") == \"blue\"\nassert solution(\"green\") == \"green\"\n\"\"\"\n\na = int(stdin)\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pink') == 'pink'\nassert solution('pink')!='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"2800\") == \"red\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"pink\") == \"pink\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3200) == \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\nassert solution(\"blue\") == \"blue\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pink') == 'pink'\nassert solution('blue') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pink') == 'pink'\nassert solution('3200') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\n\"\"\"\n\na = int(stdin)\nprint(f\"{a} is not less than 3200, so we print s = {a}\") if a >= 3200 else print(f\"{a} is less than 3200, so we print red = {a}\")\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1199') == 'ABC'"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1199\") == \"ABC\"\nassert solution(\"1024\") == \"ARC\"\nassert solution(\"1100\") == \"AGC\"\nassert solution(\"1020\") == \"ABC\"\nassert solution(\"1139\") == \"ARC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1199\") == 'ABC'\n\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1201\") == \"ARC\"\nassert solution(\"2800\") == \"AGC\"\nassert solution(\"4208\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1600) == \"ABC\"\nassert solution(1234) == \"ARC\"\nassert solution(2000) == \"AGC\"\nassert solution(10000) == \"ABC\"\nassert solution(1911) == \"ARC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234') == 'ARC'\nassert solution('12345') == 'ABC'\nassert solution('123456') == 'ABC'\nassert solution('1234567') == 'AGC'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"99\") == \"9\"\nassert solution(\"9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"912\") == \"91\"\nassert solution(\"991\") == \"1010\"\nassert solution(\"911\") == \"91\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('119') == '991'\nassert solution('101') == '101'\nassert solution('123') == '132'"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '999'\nassert solution('112') == '110'\nassert solution('812') == '802'\nassert solution('921') == '912'\nassert solution('991') == '999'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '19'\nassert solution('999') == '1111'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '119') == '991'\nassert solution(\n    '1111') == '1111'\nassert solution(\n    '9') == '9'\nassert solution(\n    '9') == '9'\nassert solution(\n    '11') == '11'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('119') == '991'\nassert solution('111999') == '91991'\n\n'''"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"1\"\nassert solution(\"123\") == \"321\"\nassert solution(\"9123\") == \"123123123\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\n\n-----------------------------------------------------\n\n\nimport string"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\nprint(solution(\"abbaac\"))\nprint(solution(\"ac\"))\nprint(solution(\"bccddaaf\"))\nprint(solution(\"zzzzzzzzzz\"))"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\nfrom collections import Counter\nfrom collections import OrderedDict\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"abracadabra\") == \"abracadabra\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"aaaaaaaaaaa\") == \"aaaaaaaaaaa\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\nassert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"ccddddddddddd\") == \"dddddd\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = map(int, INPUT_LINES)\n\nfor i in INPUT_INT:\n    print(i // 10 % 2)"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"0\"\nassert solution(\"100 13\") == \"5\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nassert solution(\"10 4\\n100 13\\n123 456\\n92 46\") == \"0\\n4\\n4\\n333\\n0\"\nassert solution(\"10 4\\n123 456\\n92 46\") == \"0\\n4\\n4\\n333\\n0\"\nassert solution(\"10 4\\n0 4\") == \"0\\n4\\n4\\n333\\n0\"\nassert solution(\"1 1\") == \"0\\n0\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"10\\n2\") == \"1\"\nassert solution(\"1\\n2\\n3\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n4\\n\\n') == '0'\nassert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    a, b = map(int, sys.stdin.readline().rstrip().split())\n    print(a // b)"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\") == \"5\"\nassert solution(\"13 9\") == \"2\"\nassert solution(\"100 13\") == \"0\"\nassert solution(\"123 456\") == \"2\"\nassert solution(\"92 46\") == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\"))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\\n13 9\") == 2\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    a, b = map(int, input().split())\n    if a % b == 0:\n        print(0)\n    else:\n        print(1 + (a - 1) // b)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 1 2\") == 2.666666666666667\n-----Explanation-----\nThe average temperature is: $\\frac{\\sum \\limits_{i = 1}^{3} a_i}{3} = \\frac{1 + 2 + 3}{3} = 2.666666666666667$.\n\nFor the first three consecutive days there is no segment of not less than $k = 3$ days, so the heat intensity value is $0$.\n\nThe last day is not a part of the segment of not less than $k = 3$ days, so its average temperature is $\\frac{1}{1} = 1$.\n\nThe maximum of these values is $2.666666666666667$.\n\nSo, the heat intensity value for given period of days is $2.666666666666667$.\n\nIt is important to check that your solution correctly calculates the heat intensity value for any given period of days, so that it is not $0$.\n\n\"\"\"\n\nn, k = map(int, input().split())\ndata = list(map(int, input().split()))"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\nimport math"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\n\"\"\"\nl = [x for x in input().split()]\nn, k = int(l[0]), int(l[1])\na = list(map(int, input().split()))\nans = 0.0\nfor i in range(len(a) - k + 1):\n    ans = max(ans, sum(a[i:i + k]) / k)\nprint(ans)\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\nassert solution('4 4\\n1 2 3 4') == '0.0'\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 2.0, \"WA\"\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\nassert solution(\"2 5\\n1 1\") == 1.3333333333333333\nassert solution(\"5 5\\n1 1 2 3 4 5\") == 4.0\n\n\"\"\"\n\nnk = input().split()\nn = int(nk[0])\nk = int(nk[1])\na = list(map(int, input().split()))"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nn, k = input().split()\ntemps = input().split()\ntemps = list(map(int, temps))\n\nprint(sum(temps[:k])/k)"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'No'\n'''\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\nprint(solution('6\\n1 3\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n2 1 2 3 3\\n1 4\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES')\nprint(solution('6\\n1 3\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n2 1 2 3 3\\n1 4\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO')\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == 'NO'\nassert solution('3 2 1') == 'YES'\nassert solution('1 2') == 'YES'\nassert solution('4 1 2 3') == 'NO'\nassert solution('4 3 2 1') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('2 1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"YES\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\") == \"YES\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\") == \"YES\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1\") == \"YES\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n5 6\") == \"NO\"\nassert solution(\"5 1\\n4 2\\n2 1 4 3\\n1 3\") == \"NO\"\nassert solution(\"5 2\\n3 1\\n4 2\\n5 1\\n1 4\") == \"YES\"\nassert solution(\"5 3\\n3 1\\n4 1\\n5 2\\n1 4\\n2 5\") == \"YES\"\nassert solution(\"5 4\\n4 2\\n2 1 4 3\\n1 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\n\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()\n\nres = ''\n\nfor i in range(n):\n    res += s[i] * (i + 1)\n\nprint(res)"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"oops\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bab\") == \"baa\"\nassert solution(\"baabbb\") == \"bab\"\n\"\"\"\n\nn = int(input())\ns = input()\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"z\") == \"z\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"aa\") == \"aa\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"oopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('baabbb') == 'bab', 'error'\nassert solution('ooopppssss') == 'oops', 'error'\nassert solution('z') == 'z', 'error'\n\nprint('The local tests are done. Try SolutionIITB2211.solution()')\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\nassert solution('1 0\\n') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == '2'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3\\n2 3 4\\n1 3 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nn, m = map(int, sys.stdin.readline().split())\nmatrix = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor _ in range(m):\n    u, v, w = map(int, sys.stdin.readline().split())\n    matrix[u][v] = w\n    matrix[v][u] = w\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == '2'"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'\nassert solution('1 0\\n') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\n\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == 'RGBRGBR'\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBG\") == \"GRBG\"\nassert solution(\"RGGG\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RRRRRRRRR\") == \"RRRRRRRRR\"\n\"\"\"\n\nfrom collections import deque\nfrom copy import deepcopy\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('BBB') == 'BB'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGRRR\") == \"RRR\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('RR') == ''\nassert solution('RGR') == 'RGR'\nassert solution('RRGRGRBGR') == 'RRGRGRBGR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGRBB\") == \"RGBGRB\"\nassert solution(\"RBRGBGGRRBBR\") == \"RBRRGBGGRRBBR\"\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\nassert solution(\"BRB\") == \"RR\"\n\nassert solution(\"GRB\") == \"GRB\"\n\nassert solution(\"RGB\") == \"RRR\"\n\nassert solution(\"RGBRR\") == \"RRRR\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\nassert solution(\"RGRBGB\") == \"RG\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRB\"\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == 48000.0\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\n\n---\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\n\n-----Problem-----\nA year has passed and there is a new set of data due for your application. The data is given as a string of comma-separated values (CSV) and, for each i from 1 to n, is structured as follows:\n- The first line is a pair of integers x_i and u_i.\n- The second line is a pair of numbers y_1,..., y_i, with y_i the number of coins of the i-th type of coin, or 0 if the i-th type of coin is not present.\nNote that you can have several coins of the same type.\nThe total value of the gift is x_1 * y_1 +... + x_n * y_n.\nYou are given an arbitrary value of x_1 * y_1 +... + x_n * y_n.\nFind the minimum value of y_i such that x_1 * y_1 +... + x_n * y_n can be obtained.\n\n-----Constraints-----\n - 2 \\leq n \\leq 100\n - 100 \\leq x_1 * y_1 +... + x_n * y_n \\leq 10^{8}\n - x_i * y_i is an integer.\n - x_i * y_i is in the range [1, 10^8].\n - x_i is either JPY or BTC.\n - u_i = JPY or BTC.\n\n-----Input-----\nThe first line of the input contains an integer n, which is the number of types of coins present.\nThe second line of the input contains a comma-separated list of integers x_1, x_2,..., x_n, which represent the amount of money of each type of coin.\nThe third line of the input contains a comma-separated list of integers y_1, y_2,..., y_n, which represent the amount of coins of each type of coin.\n\n-----Output-----\nPrint the minimum number of coins that can be used to obtain the specified amount of money.\n\n-----Sample Input-----\n3\n10000 JPY,100000 JPY,100000000 JPY\n10,1,10\n\n-----Sample Output-----\n10\n\nThe minimum number of coins that can be used to obtain 10000 yen is 10.\n\n-----Problem-----\nFor the same amount of money, we can obtain as many different currencies as we want.\nConsider all pairs of currency:\n- JPY can be exchanged to BTC\n- JPY can be exchanged to USD\n- BTC can be exchanged to USD\nThe result is the sum of all these pairs.\n\nThe problem is formulated as follows:\nGiven a value of money, and a list of pairs of currencies, find the smallest number of currency units required to exchange the money.\n\n-----Constraints-----\n - 2 \\leq n \\leq 100\n - 1 \\leq x_i \\leq 10^{8}\n - x_i is either JPY or BTC.\n - The list of currencies will contain only unique pairs.\n\n-----Input-----\nThe first line of the input contains an integer n, which is the number of pairs of currencies.\nThe second line of the input contains a comma-separated list of integers x_1, x_2,..., x_n, which represent the amount of money of each pair of currencies.\nThe third line of the input contains a comma-separated list of integers y_1, y_2,..., y_n, which represent the amount of each pair of currencies that can be obtained.\n\n-----Output-----\nPrint the minimum number of currency units that can be used to exchange the specified amount of money.\n\n-----Sample Input-----\n3\n10000 JPY,100000 JPY,100000000 JPY\n10,1,10\n\n-----Sample Output-----\n3\n\nIt takes 3 units of JPY to exchange the amount of money 10000 JPY.\n\n-----Problem-----\nThe number of coins of different types of coins must be at least as much as the amount of money.\nFor example, if there are 10 types of coins, the amount of money must be 10 times more than the total number of coins.\nGiven an amount of money and a list of coins of different types, find the minimum number of coins that can be used to exchange the money.\n\n-----Constraints-----\n - 1 \\leq n \\leq 100\n - 1 \\leq x_i \\leq 10^{8}\n - x_i is either JPY or BTC.\n - The list of coins will contain only unique pairs.\n\n-----Input-----\nThe first line of the input contains an integer n, which is the number of types of coins.\nThe second line of the input contains a comma-separated list of integers x_1, x_2,..., x_n, which represent the amount of money of each type of coin.\nThe third line of the input contains a comma-separated list of integers y_1, y_2,..., y_n, which represent the amount of each type of coin that can be obtained.\n\n-----Output-----\nPrint the minimum number of coins that can be used to exchange the money.\n\n-----Sample Input-----\n4\n10000 JPY,100000 JPY,100000000 JPY,100000000 USD\n10,1,10,10\n\n-----Sample Output-----\n4\n\nThe minimum number of coins that can be used to exchange 10000 JPY is 4, which is the minimum number of coins needed to exchange 10 USD.\n\n-----Problem-----\nThe number of coins of different types of coins must be at least as much as the amount of money.\nFor example, if there are 10 types of coins, the amount of money must be 10 times more than the total number of coins.\nGiven an amount of money and a list of coins of different types, find the minimum number of coins that can be used to exchange the money.\n\n-----Constraints-----\n - 1 \\leq n \\leq 100\n - 1 \\leq x_i \\leq 10^{8}\n - x_i is either JPY or BTC.\n - The list of coins will contain only unique pairs.\n\n-----Input-----\nThe first line of the input contains an integer n, which is the number of types of coins.\nThe second line of the input contains a comma-separated list of integers x_1, x_2,..., x_n, which represent the amount of money of each type of coin.\nThe third line of the input contains a comma-separated list of integers y_1, y_2,..., y_n, which represent the amount of each type of coin that can be obtained.\n\n-----Output-----\nPrint the minimum number of coins that can be used to exchange the money."
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n1\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n') == ''\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"test 1: pass\")\n\nassert solution(\"10000 JPY\\n0.10000000 BTC\\n1234567890 JPY\\n0.10000000 BTC\") == \"23634567890\"\nprint(\"test 2: pass\")\n\nassert solution(\"10000 JPY\\n0.10000000 BTC\\n-1234567890 JPY\\n0.10000000 BTC\") == \"23634567890\"\nprint(\"test 3: pass\")\n\nassert solution(\"10000 JPY\\n-0.10000000 BTC\\n1234567890 JPY\\n0.10000000 BTC\") == \"23634567890\"\nprint(\"test 4: pass\")\n\nassert solution(\"10000 JPY\\n0.10000000 BTC\\n-1234567890 JPY\\n-0.10000000 BTC\") == \"23634567890\"\nprint(\"test 5: pass\")"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\nimport math\n\nlines = stdin.splitlines()\nN = int(lines[0])\narr = [l.split() for l in lines[1:]]\n\nresult = 0\nfor x, u in arr:\n    if u == \"JPY\":\n        result += int(x)\n    else:\n        result += float(x) * 380000.0\n\nprint(result)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == 48000.0\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4 2'\n) == '3'\n\n-----\n\n1) \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0442 0 \u0434\u043e 100 \u0441 \u0448\u0430\u0433\u043e\u043c 10\n2) \u0418\u0441\u043a\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.\n3) \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u043f\u043e\u0434 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.\n4) \u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n5) \u0421\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n6) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443.\n7) \u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043d\u0430 \u0447\u0435\u0442\u044b\u0440\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432.\n8) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u043e\u0436\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0448\u0435.\n9) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.\n10) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432\u044b\u0448\u0435.\n11) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443.\n12) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e\u0434 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 9 \u0438 10.\n13) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442 11 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e.\n14) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442 12 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e.\n15) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442 13 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e.\n16) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n17) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432\u044b\u0448\u0435 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n18) \u0412\u044b\u0437\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438\u0437 9 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n---\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n\n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0435\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u044d\u043b"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '3'"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nN, i = input().split()\nprint(int(N) - int(i))\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2\n''') == '3'\nassert solution('''3 1\n''') == '0'\nassert solution('''2 1\n''') == '1'\n'''\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2\n''') == '3'\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 2\n\"\"\") == \"3\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == 3\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n') == '3'"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'ba'\nassert solution('abc') == 'cba'\nassert solution('aaaa') == 'aaaa'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(solution(\"ip cc\"))\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ip cc') == 'icpc'\nprint(solution('ip cc'))\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self, stdin: List[str]):\n        self.stdin = stdin\n\n    def solve(self) -> None:\n        n = int(self.stdin[0])\n        s = self.stdin[1]\n        t = self.stdin[2]\n        res = ''\n        for i in range(n):\n            res += s[i] + t[i]\n        print(res)"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1234\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"1234 5678 910111213141516171819\"\nassert solution(\"i p c\") == \"i c p c\"\nassert solution(\"i p c\") == \"i c p c\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ip cc') == 'icpc'"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(solution(\"ip cc\"))"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ip cc\") == \"icpc\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nassert solution(\"abc\") == \"acb\"\nassert solution(\"abcc\") == \"acbc\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ip cc') == 'icpc'\nprint('Test 1: Ok')"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABB\") == \"No\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\nassert solution(\"BBAB\") == \"Yes\"\nassert solution(\"BBABA\") == \"Yes\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\nassert solution(\"ABA\") == \"Yes\"\n\"\"\"\n\nS = input()\n\ncountA = 0\ncountB = 0\n\nfor s in S:\n    if s == 'A':\n        countA += 1\n    elif s == 'B':\n        countB += 1"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABB\") == \"No\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABBAAA\") == \"Yes\"\nassert solution(\"ABBBAB\") == \"No\"\nassert solution(\"AAABB\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAA\") == \"No\"\nassert solution(\"ABAB\") == \"No\"\n\n------Solution------\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABB') == 'No'\nassert solution('ABA') == 'Yes'\nassert solution('ABAB') == 'No'\nassert solution('ABBBA') == 'No'\nassert solution('BABA') == 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BBA') == 'Yes'\nassert solution('BBAB') == 'Yes'\nassert solution('ABAB') == 'No'\nassert solution('AAAB') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABB') == 'Yes'\nassert solution('BAB') == 'No'\n\n\"\"\"\n\nimport unittest\nfrom typing import Callable\nfrom unittest.mock import patch\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        pass\n    \n    def test_solution_with_mock(self):\n        pass\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    data = [\n        ('ABC', 'Yes'),\n        ('BAB', 'Yes'),\n        ('AAA', 'No'),\n        ('BBB', 'No'),\n    ]\n\n    def test(self):\n        for s, solution in self.data:\n            self.assertEqual(solution, solution(s))"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRS\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n\n\"\"\"\n23. Remove Duplicates from Sorted Array\nEasy\n\nGiven a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nExample 1:\n\nGiven nums = [1,1,2],\n\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\n\nIt doesn't matter what you leave beyond the returned length.\nExample 2:\n\nGiven nums = [0,0,1,1,1,2,2,3,3,4],\n\nYour function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\n\nIt doesn't matter what values are set beyond the returned length.\nClarification:\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n\"\"\"\n\n\"\"\"\n24. Swap Nodes in Pairs\nMedium\n\nGiven a linked list, swap every two adjacent nodes and return its head.\n\nYou may not modify the values in the list's nodes, only nodes itself may be changed.\n\nExample:\n\nGiven 1->2->3->4, you should return the list as 2->1->4->3.\n\"\"\"\n\n\"\"\"\n25. Valid Parentheses\nEasy\n\nGiven a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\n\nExample 1:\n\nInput: s = \"()\"\nOutput: true\nExample 2:\n\nInput: s = \"()[]{}\"\nOutput: true\nExample 3:\n\nInput: s = \"(]\"\nOutput: false\nExample 4:\n\nInput: s = \"([)]\"\nOutput: false\nExample 5:\n\nInput: s = \"{[]}\"\nOutput: true\n\"\"\"\n\n\"\"\"\n26. Remove Duplicates from Sorted Array II\nEasy\n\nGiven a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nExample 1:\n\nGiven nums = [1,1,1,2,2,3],\n\nYour function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n\nIt doesn't matter what you leave beyond the returned length.\nExample 2:\n\nGiven nums = [0,0,1,1,1,1,2,3,3],\n\nYour function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.\n\nIt doesn't matter what values are set beyond the returned length.\nClarification:\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n\"\"\"\n\n\"\"\"\n27. Remove Element\nEasy\n\nGiven an array nums and a value val, remove all instances of that value in-place and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n\nExample 1:\n\nGiven nums = [3,2,2,3], val = 3,\n\nYour function should return length = 2, with the first two elements of nums being 2.\n\nIt doesn't matter what you leave beyond the returned length.\nExample 2:\n\nGiven nums = [0,1,2,2,3,0,4,2], val = 2,\n\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\n\nNote that the order of those five elements can be arbitrary.\n\nIt doesn't matter what values are set beyond the returned length.\nClarification:\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n\"\"\"\n\n\"\"\"\n28. Implement strStr()\nEasy\n\nImplement strStr().\n\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\nClarification:\n\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\n\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().\n\"\"\"\n\n\"\"\"\n29. Divide Two Integers\nMedium\n\nGiven two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\n\nReturn the quotient after dividing dividend by divisor.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.\n\nNote:\n\nAssume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231,  231 \u2212 1]. For this problem, assume that your function returns 231 \u2212 1 when the division result overflows.\n\nExample 1:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = truncate(3.33333..) = 3.\nExample 2:\n\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = truncate(-2.33333..) = -2.\nExample 3:\n\nInput: dividend = 0, divisor = 1\nOutput: 0\nExample 4:\n\nInput: dividend = 1, divisor = 1\nOutput: 1\n\"\"\"\n\n\"\"\"\n30. Substring with Concatenation of All Words\nMedium\n\nYou are given a string"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRS\") == \"2\"\nassert solution(\"RR\") == \"1\"\nassert solution(\"RS\") == \"0\"\nassert solution(\"R\") == \"0\"\nassert solution(\"\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRS') == 2\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRR\") == \"3\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRR\") == \"2\"\nassert solution(\"SSS\") == \"0\"\nassert solution(\"RRS\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRRR') == '4'\nassert solution('R') == '0'\nassert solution('S') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRR') == 3\nassert solution('RRS') == 2\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('1 2 3 4') == '4 3 2 1'\nassert solution('1 2 3 4 5') == '5 4 3 2 1'\nassert solution('1 2 3 4 5 6') == '6 5 4 3 2 1'\nassert solution('1 2 3 4 5 6 7') == '7 6 5 4 3 2 1'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n2 3 1') == '3 1 2'\nassert solution('1 2 3\\n3 1 2') == '1 2 3'\nassert solution('1 2 3\\n1 3 2') == '2 1 3'\n\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4 5 6 7\") == \"7 6 5 4 3 1 2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"99 92 93 94 95 96 97 98 99 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 27 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\"\nprint(\"Passed!\")\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    \"1 2 3\" ) == \"3 1 2\"\nassert solution(    \"3 1 2\" ) == \"2 3 1\"\nassert solution(    \"1 2 3 4\" ) == \"3 4 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3\"\n) == \"3 1 2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\n-----Test Input-----\n1 2 3\n\n-----Test Output-----\n3 1 2\n\n-----Test Input-----\n10 20 30\n\n-----Test Output-----\n30 10 20\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n') == '3 1 2'\nassert solution('3 1 2\\n') == '2 1 3'\nassert solution('2 1 3\\n') == '3 1 2'\nassert solution('3 2 1\\n') == '1 2 3'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"7 4 9\\n2 8 5\\n3 6 1\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('30 100') == '100'\nprint(solution(stdin))"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"30 100\"\n) == \"100\"\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 100') == '100'\n\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"10\"\n\nassert solution(\"20 30\") == \"20\"\n\nassert solution(\"20 80\") == \"40\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('30 100') == '100'\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('30 100') == '100'\n\n-------Problem Details----------\nA and B are two space separated numbers. The cost of the Ferris wheel is given by the equation:\n\nA + A * (0.1)^B\nWhere B is the age of Takahashi.\n\nWhen B is an even number, the cost of the Ferris wheel is A times 0.5.\n\nWhen B is an odd number, the cost of the Ferris wheel is A plus the cost of riding the Ferris wheel by the children between 6 and 12 years old (inclusive) times 0.5.\n\nFor example:\n\nWhen B = 10, the cost of Takahashi's Ferris wheel is A + (A * (0.1)^10) * 0.5 = A + 50.0\nWhen B = 12, the cost of Takahashi's Ferris wheel is A + (A * (0.1)^12) * 0.5 = A + 100.0\nWhen B = 14, the cost of Takahashi's Ferris wheel is A + (A * (0.1)^14) * 0.5 = A + 200.0\nWhen B = 16, the cost of Takahashi's Ferris wheel is A + (A * (0.1)^16) * 0.5 = A + 250.0\nWhen B = 18, the cost of Takahashi's Ferris wheel is A + (A * (0.1)^18) * 0.5 = A + 300.0\nWhen B = 20, the cost of Takahashi's Ferris wheel is A + (A * (0.1)^20) * 0.5 = A + 350.0\n\nSo, if A is 30, and B is 100, the cost of Takahashi's Ferris wheel is 30 + (30 * (0.1)^100) * 0.5 = 130.0\n\nYou have to print the value of the Ferris wheel.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B\") == \"A\"\nprint(solution(\"A B\"))\n\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30 100\") == \"100\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+-++\") == \"0\"\nassert solution(\"--\") == \"0\"\nassert solution(\"+--\") == \"1\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-\") == \"0\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+-') == '0'\n\nassert solution('++') == '1'\n\nassert solution('+-') == '0'\n\nassert solution('0') == '0'\n\nassert solution('0') == '0'"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('+-') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == '0'\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('+-') == '0'\nassert solution('+-++') == '2'"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+-') == '2'\n\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+-') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/04/30\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/01/12\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2020/02/29') == 'TBD'\nassert solution('2019/02/28') == 'Heisei'\nassert solution('2010/12/31') == 'TBD'\nassert solution('2000/02/29') == 'TBD'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2018/12/31') == 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2016/12/25\") == \"TBD\"\n\"\"\"\n\nimport sys\nfrom typing import Dict"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2000/12/31') == 'TBD'\n\n\"\"\"\n\nS = input().strip()"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"18 2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3 1337 1337 1337\") == 3\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('3 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '9'\n\"\"\"\n\nn = int(input())\n\ntopics = sorted(list(map(int, input().split())))"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == 9\nassert solution('3\\n1337 1337 1337') == 3\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = list(map(int, sys.stdin.readline().rstrip().split()))\n\ncnt = 0\nc = 1\ni = 0\n\nwhile i < n:\n    if c == 1:\n        cnt += 1\n    if cnt == 0:\n        cnt = 1\n    if c == 1 and a[i] > cnt:\n        c = 0\n    if c == 0 and a[i] > cnt:\n        c = 1\n        cnt = 1\n    if c == 0 and a[i] <= cnt:\n        cnt -= 1\n    if c == 1 and a[i] <= cnt:\n        c = 0\n    i += 1\n\nprint(cnt)"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\\n\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\\n\") == 9\nassert solution(\"3\\n1337 1337 1337\\n\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nN = int(input())\nlst = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 3 2 1 3 2\\n\") == \"3\\n2 1\"\n\nprint(solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\"))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2 1\"\n\nassert solution(\"7 2\") == \"2 1\"\n\nassert solution(\"10 4\") == \"3 1 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nsolution(\"5 2\\n1 2 3 3 1 2\\n\") == \"2\\n2 1\"\n\nsolution(\"5 1\\n2 3 4 1 2\\n\") == \"1\\n2\"\n\nsolution(\"10 3\\n1 2 3 3 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nsolution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nsolution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nsolution(\"20 10\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nsolution(\"20 20\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == '1 -1 3 2 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n8\\n14\\n10\\n\") == \"2 1 3 2\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n1 4\\n1 2\\n2 3\\n3 4\\n4 5') == '2\\n-1\\n3\\n2'\n\"\"\"\nfrom __future__ import annotations\n\nfrom functools import lru_cache\nfrom typing import Callable, List, Union\n\nfrom icontract import require\n\nfrom python.polycarp_problem import (\n    Polycarp,\n    PolycarpStrategy,\n    PolycarpStrategyLazy,\n    PolycarpStrategyNoLazy,\n)\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.polycarp: Polycarp = Polycarp()\n\n    def read_input(self) -> None:\n        n_coins, n_queries = tuple(map(int, input().split()))\n        self.polycarp.coins = tuple(map(int, input().split()))\n\n        for _ in range(n_queries):\n            self.polycarp.query(int(input()))\n\n    @require(lambda n_coins: n_coins >= 1)\n    def solve_polycarp(self) -> None:\n        self.polycarp.run_strategy()\n\n    def solution_strategy(self, strategy: PolycarpStrategy) -> None:\n        self.polycarp.run_strategy(strategy=strategy)\n\n    def solve_polycarp_lazy(self) -> None:\n        self.solution_strategy(strategy=PolycarpStrategyLazy)\n\n    def solve_polycarp_no_lazy(self) -> None:\n        self.solution_strategy(strategy=PolycarpStrategyNoLazy)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2\\n2\\n\") == \"0\\n1\\n1\\n0\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n2\\n4\\n8\\n4\\n2\\n2\\n2\\n1\\n8') == '4 2\\n-1\\n3\\n2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n2\\n4\") == \"1 2 3\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\n1 2 5\n4\n2\n3\n2\n\"\"\") == \"\"\"3\n2\n-1\n2\n\"\"\"\n\nassert solution(\"\"\"5 3\n8\n2\n8\n2\n5\n\"\"\") == \"\"\"5\n-1\n-1\n-1\n-1\n3\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n1 2 3\") == \"0\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\nassert solution(\"4 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '21'\nassert solution('4 2\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\nassert solution('2 2\\n1 1\\n1 1') == '0'\nassert solution('4 2\\n1 2 2 2 2\\n1 1\\n1 1') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\n\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\nprint(\"Success!\")\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\nprint(\"The local tests are done. Try Solution Next!\")\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == '21'\nprint(solution(input()))\n\n\n    \"\"\"\n\n    stdin = stdin.split(\"\\n\")\n    n, k = int(stdin[0].split(\" \")[0]), int(stdin[0].split(\" \")[1])\n    cards = [int(i) for i in stdin[1].split(\" \")]\n    favs = [int(i) for i in stdin[2].split(\" \")]\n    h = [int(i) for i in stdin[3].split(\" \")]\n    \n    card_dic = dict()\n    for card in cards:\n        if card not in card_dic:\n            card_dic[card] = 1\n        else:\n            card_dic[card] += 1\n    \n    dp = [0 for _ in range(len(cards))]\n    for i in range(len(cards)):\n        dp[i] = h[i]\n    \n    for i in range(len(cards)):\n        dp[i] += sum([(k // card_dic[j]) * h[j] for j in range(len(cards)) if card_dic[j] <= k])\n    \n    res = 0\n    for i in dp:\n        res = max(res, i)\n    \n    return str(res)\n    \n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 6 6') == '2'\nassert solution('8 10 12') == '3'\nassert solution('8 10 12 10 10 12') == '0'\nassert solution('10 10 10 10 10 10 10 10') == '2'\nassert solution('8 8 8 8 8 8 8 8 8 8') == '0'\n\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == '2\\n1 2 3\\n1 1 2'\nassert solution(\"5\\n8 10 10 10 10\") == '2\\n2 2 1'\nassert solution(\"4\\n1 1 1 1\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 6 6 6') == 2\n\na = solution('4 8 10')\nprint(a)\nprint(solution(a))\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3') == '2 2 1'\nassert solution('1 3') == '2 1 1'\nassert solution('1 2 2 3') == '1 1 2 3'"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution('3\\n2 8 10') == '2\\n2 2 1\\n2 3 2\\n'\nassert solution('4\\n1 1 1 1') == '0\\n'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 4 6\") == \"2\\n1 2 3\\n1 1 2\\n1 1 1\\n1 1 1\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = deque()\n\nfor x in a:\n    if x not in q:\n        q.append(x)\n\nq.popleft()\n\ns = \"\"\n\nfor i in range(n-1):\n    if i % 2 == 0:\n        if a[i] > a[i+1]:\n            q.popleft()\n            q.append(a[i])\n            s += \"2\\n\" + str(i+1) + \" \" + str(i+2) + \"\\n\"\n        else:\n            q.popleft()\n            q.appendleft(a[i])\n            s += \"1\\n\" + str(i+1) + \" \" + str(i+2) + \"\\n\"\n    else:\n        if a[i] < a[i+1]:\n            q.popleft()\n            q.append(a[i])\n            s += \"2\\n\" + str(i+1) + \" \" + str(i+2) + \"\\n\"\n        else:\n            q.popleft()\n            q.appendleft(a[i])\n            s += \"1\\n\" + str(i+1) + \" \" + str(i+2) + \"\\n\"\n\nprint(len(q))\nprint(s)\n\nprint(len(q))\nprint(s)\n\nprint(len(q))\nprint(s)\n\nprint(len(q))\nprint(s)\n\nprint(len(q))\nprint(s)"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nprint('Hooray!')"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2'\nassert solution('3\\n8 10') == '2\\n2 2 1'\nassert solution('4\\n1 1 1 1') == '0'\n\"\"\"\n\nimport math\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nk = 0\nd = {}\nfor i in range(n):\n    if i in d:\n        continue\n    if a[i] in d:\n        d[a[i]].append(i)\n    else:\n        d[a[i]] = [i]\n        k += 1\n\nd = {k: v for k, v in sorted(d.items(), key=lambda item: len(item[1]))}\n\nfor k, v in d.items():\n    if len(v) > 1:\n        l = len(v)\n        for i in range(l):\n            for j in range(i + 1, l):\n                d[k].append([abs(v[i] - v[j]), v[i], v[j]])\n    \nd = {k: v for k, v in sorted(d.items(), key=lambda item: sum(item[1]))}\n\nfor k, v in d.items():\n    print(k)\n    for i in range(len(v)):\n        print(' '.join([str(x) for x in v[i]]))\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"11110101\") == 1\nassert solution(\"10101010\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('101010') == ''\nassert solution('10101010') == '2'\nassert solution('1111111111111111111111111') == '0'\nassert solution('1110101010101011111111111110') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"10111010\") == 0\nassert solution(\"11101010\") == 1\nassert solution(\"10010001\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\n\"\"\"\nfrom typing import Dict\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\n\"\"\"\nimport sys\nfrom typing import Tuple\nfrom collections import defaultdict\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\n\n\"\"\"\nfrom typing import List\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10010001\") == 1\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin_1) == test_stdin_ans_1\n\"\"\"\nfrom itertools import groupby"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 2\nassert solution(\"10100100\") == 0\n\nassert solution(\"11111111\") == 0\nassert solution(\"10111010\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nDEBUG = True\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\n\"\"\"\n\nimport sys\nimport collections\n\nSegment = collections.namedtuple('Segment', ('start', 'end'))\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\nassert solution('''6 1\n7 5\n8 6\n9 5\n10 6\n9 7''') == '1 3 5 6'\n\n\"\"\"\n\n\"\"\"\n\nimport sys\n\nlines = []\nk, n = [int(x) for x in sys.stdin.readline().strip().split()]\n\nfor i in range(n):\n    lines.append([int(x) for x in sys.stdin.readline().strip().split()])\n\ncounter = 0\nstart = [0] * n\nend = [0] * n\nfor i in range(n):\n    start[i] = min(lines[i])\n    end[i] = max(lines[i])\n\nfor i in range(n):\n    for j in range(n):\n        if start[j] >= start[i] and end[i] <= end[j]:\n            counter += 1\n\nprint(counter)\nprint(*(i + 1 for i, x in enumerate(start) if counter > x))\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\\n4 6 7'\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\\n1 4 5'\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n1 2') == '0\\n1 2'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == '4\\n1 3 5 6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3'\n\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3'\n\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30'\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List, Tuple, Generator"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\nassert solution('2\\n1\\n1') == '1\\n1'\nassert solution('1\\n2') == '2\\n2'\n\n-----Tests-----"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4 5') == '15'\nassert solution('1 2 3 4 5 6 7 8 9') == '30'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    4\n    5 6 15 30\n    \"\"\"\n) == \"30\"\nassert solution(\n    \"\"\"\n    4\n    4 6 15 30\n    \"\"\"\n) == \"31\"\nassert solution(\n    \"\"\"\n    3\n    3 4 6\n    \"\"\"\n) == \"10\"\n\n\"\"\"\nLong solution:\n\nimport numpy as np\nfrom functools import reduce\n\nn = int(input())\na = list(map(int, input().split()))\nq = int(input())"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\nprint(solution(\"2\\n4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\"))\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\n\"\"\"\nfor i in range(int(input())):\n    n, *a = map(int, input().split())\n    a.sort()\n    ans = a[-3]\n    for j in range(3):\n        ans = max(ans, a[-j-1] // a[-j-2])\n    print(ans)\n\"\"\"\n\nfor i in range(int(input())):\n    n, *a = map(int, input().split())\n    print(max(a[-3:]))"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4\\n5 6 15 30\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\\n31\\n10\"\n\"\"\"\n\nfrom sys import stdin\nimport collections\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\n''') == '2'\nassert solution('''\n4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\n''') == '1'\n\n'''\nn = 4\nd = {\n    2: {\n        10: set(),\n        20: set(),\n    },\n    3: {\n        6: set()\n    },\n    5: {\n        2: set(),\n        3: set(),\n        4: set(),\n        99: set(),\n        100: set()\n    }\n}\n\nfor line in stdin.split('\\n'):\n    if not line:\n        continue\n    n, *arr = line.split()\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n        for j in range(i + 1, len(arr)):\n            d[arr[i]][arr[j]] |= {arr[i]} | {arr[j]}\n\nfor i in range(int(n)):\n    for j in range(i + 1, int(n)):\n        if sum(abs(k - l) for k, l in zip(d[i].keys(), d[j].keys())) == 1:\n            print(2)\n            continue\n    print(1)\n'''\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nprint(\"Test 1 successful!\")\nassert solution(test_input_2) == test_output_2\nprint(\"Test 2 successful!\")\n\n-----\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport math\n\nimport numpy as np\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('10') == '1'\nassert solution('1') == '1'\nassert solution('10 1 20') == '2'\nassert solution('2 3 4 99 100') == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == 2\nassert solution(\"4\\n2\\n10 1 20\\n1\\n42\") == 1\nassert solution(\"4\\n2\\n10 1 20\\n2\\n2 3 4 99 100\") == 2\nassert solution(\"1\\n42\") == 1\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nprint(\"Success!\")\n\n-----\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 4\") == 'YES'\nassert solution(\"1 2 3 4\") == 'NO'\nassert solution(\"5 2 6 27\") == 'NO'\nassert solution(\"3 3 5 18\") == 'YES'\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 6\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'NO'\nassert solution('3 3 5 18') == 'YES'\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n\nq = int(input().strip())\nfor _ in range(q):\n    a, b, n, S = map(int, input().strip().split())\n    x = (S // n) - (a // n)\n    y = (S % n) - (b % n)\n    if x < 0:\n        x = 0\n    if y < 0:\n        y = 0\n    print(\"YES\" if x == 0 and y == 0 else \"NO\")\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 6\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 6\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 6 4') == 'YES'\nassert solution('5\\n2 6 27') == 'NO'\nassert solution('3\\n3 5 18') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 0 1 2 3 4\") == \"YES\\n0\\n\"\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\\n\"\nassert solution(\"4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"4 3 1 5 3\") == \"NO\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\n\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\n\nassert solution('5 4 3 2 1 0') == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\n\nassert solution('5 1 4 3 2 1') == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\n\nassert solution('5 1 4 3 2 0') == 'NO\\n'\n\nassert solution('5 1 2 4 3 0') == 'NO\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1 0\\n\"\nassert solution(\"5 1 4 2 3\") == \"YES\\n0\\n5\\n4 3 2 1\\n\"\nassert solution(\"5 1 4 3 2\") == \"YES\\n0\\n5\\n4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 0 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 2 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 2 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 0 4 3 2 1\") == \"YES\\n0\\n\"\n\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\nassert solution(\"5 1 1 1 2 1\") == \"YES\\n1\\n1\\n1\\n2 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"5 4 3 2 1 0\") == 'YES'\nassert solution(\"5 1 2 3 4 0\") == 'YES'\nassert solution(\"4 3 1 5 3\") == 'NO'\nassert solution(\"4 3 1 5 3\") == 'NO'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == 8\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\") == -1\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == -1\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nbooks = []\nfor _ in range(n):\n    t, a, b = map(int, sys.stdin.readline().split())\n    books.append((t, a, b))\n\nbooks.sort(key=lambda x: x[0])\n\ndp = [[0 for _ in range(k + 1)] for _ in range(n)]\ndp[0][0] = 0\n\nfor i in range(n):\n    for k in range(k + 1):\n        if k >= books[i][1]:\n            dp[i][k] = max(dp[i - 1][k], dp[i - 1][k - books[i][1]] + books[i][0])\n        else:\n            dp[i][k] = dp[i - 1][k]"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1') == '8'\nassert solution('8 3\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1\\n1 0 1') == '4'\nassert solution('1 0 1\\n2 1 1') == '6'\nassert solution('5 1 1\\n2 1 1\\n3 0 0\\n5 1 0\\n3 0 1') == '8'\nassert solution('2 1 1\\n1 0 1') == '4'\nassert solution('1 0 1\\n2 1 1') == '6'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\n\"\"\"\nassert solution(\"\"\"\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0''') == '18'\n\nassert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1''') == '8'\n\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1''') == '-1'\n\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1''') == '8'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r\"D:\\Code\\MyCode\\tools\\test.txt\", \"r\").read()) == \"10\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1') == '8'\n\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"3 1\\n1 1 2\\n4 2\\n6 4 8\") == \"2\\n6\\n-1\"\nassert solution(\"1 1\\n3 1\\n5 1\\n7 1\") == \"1\\n3\\n-1\"\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '2\\n6\\n-1\\n7'\n\"\"\"\n\nq = int(stdin.readline())\n\nwhile q > 0:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    ans = 0\n    for x in a:\n        if x <= ans:\n            continue\n        if abs(ans - x) > k:\n            break\n        ans = x\n    if ans == 0:\n        print('-1')\n    else:\n        print(ans)\n    q -= 1\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\nassert solution(\"3 1\\n4 5\\n1 5\\n2 4\\n2 2\\n2 2\") == \"2\"\nassert solution(\"6 1\\n1 1 2 3 4 5 6\\n7 5\\n7 7 8 9 10\") == \"7\"\n\"\"\"\n\nfrom typing import List, Tuple, Optional, Union\n\nfrom collections import Counter\n\nQUERY = Tuple[int, int, List[int]]\nPRODUCTS = List[int]\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('4 2') == '-1'\nassert solution('5 2 5') == '6'\nassert solution('5 2 1') == '6'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '6'\nassert solution('2\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 15 16 23') == 5\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == 3\n\"\"\"\nfrom typing import List\nfrom collections import Counter, defaultdict\nimport math\n\n\nclass Solution:\n    def min_remove_to_make_valid(self, a: List[int]) -> int:\n        count = Counter(a)\n        valid_count = defaultdict(int)\n        for num, freq in count.items():\n            if freq % 6 == 0:\n                valid_count[num] = freq\n            else:\n                valid_count[num] = 0\n        return math.inf if max(valid_count.values()) == 0 else len(a) - max(valid_count.values())\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 15 16 23 42') == '0'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 15 16 23\") == '5'\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == '0'\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == '3'\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\nans = 0\n\nfor i in range(n):\n    ans += a[i] // 6\n    if a[i] // 6 > 0:\n        ans += 1\n\nprint(ans)"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"8 8 4 15 16 23\") == \"0\"\nassert solution(\"4 8 15 16 42 23\") == \"5\"\nassert solution(\"4 8 15 16 23 42\") == \"0\"\nassert solution(\"4 8 15 16 16 23\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42 4') == '7'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 16 23 15 16 42 23 42 4') == '0'\n\n'''"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str):\n        t = int(stdin.readline())\n        for i in range(t):\n            a, b = map(int, stdin.readline().split())\n            print(self.getMinMoves(a, b))\n    \n    def getMinMoves(self, a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return self.getMinMoves(a - b, b) + 1\n        if a < b:\n            return self.getMinMoves(b - a, a) + 1\n        return -1"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n18 4') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('1000000001 1000000000') == '87654322'\nassert solution('1000000001 1') == '9150'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"2\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"13 10\") == \"3\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    a,b = list(map(int, input().split()))\n    if a==b:\n        print(0)\n    elif a>b:\n        print(int(a/b)-1)\n    else:\n        print(int(b/a)-1)\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n18 4') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n100500 9000') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 5\n13 42''') == '0'\nassert solution('''1337 420\n123456789 1000000000\n100500 9000''') == '2'\nassert solution('''18 4\n1337 420\n123456789 1000000000\n100500 9000''') == '3'\nassert solution('''1337 420\n123456789 1000000000\n100500 9000''') == '2'\nassert solution('''1337 420\n123456789 1000000000\n100500 9000''') == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000''') == '0\\n3\\n2\\n92\\n87654322\\n9150'\n\"\"\"\n\n\nimport sys\nimport itertools\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('1337 420\\n18 4') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport unittest\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\") == '0\\n3'\n\n\"\"\"\n\nimport sys\nimport os\nimport random\n\n\"\"\"\n\n[+]Temporal marker           : Sat, 14:32 | Feb 19, 20\n[+]Temporal marker untethered: Sat, 14:32 | Feb 19, 20\n[+]Comments                  : Easy\n[+]Space Complexity          : O(1)\n[+]Time Complexity           : O(N)\n[+]Level                     :\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/problems/min-moves-to-equal-sum\n[+] Supplement Sources       : N/A\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n100500 9000\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\"\nassert solution(\"1 2\\n3 4\") == \"1\"\n\n\n\n----\n\nIn one move, you can choose any integer $k$ from $1$ to $10$ and add it to $a$ or subtract it from $a$. In other words, you choose an integer $k \\in [1; 10]$ and perform $a := a + k$ or $a := a - k$. You may use different values of $k$ in different moves.\n\nYour task is to find the minimum number of moves required to obtain $b$ from $a$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of moves required to obtain $b$ from $a$.\n\n\n-----Example-----\nInput\n5\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n\nOutput\n0\n3\n2\n92\n87654322\n\n-----Note-----\n\nIn the first test case of the example, you don't need to do anything.\n\nIn the second test case of the example, the following sequence of moves can be applied: $13 \\rightarrow 23 \\rightarrow 32 \\rightarrow 42$ (add $10$, add $9$, add $10$).\n\nIn the third test case of the example, the following sequence of moves can be applied: $18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$)."
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n7 5 12345\") == \"12339\"\nassert solution(\"5\\n5 0 4\") == \"0\"\nassert solution(\"10\\n5 15\") == \"15\"\nassert solution(\"17\\n8 54321\") == \"54306\"\nassert solution(\"499999993\\n9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 0 4\") == \"12339\"\nassert solution(\"10 5 15\") == \"54306\"\nassert solution(\"17 8 54321\") == \"999999995\"\nassert solution(\"499999993 9 1000000000\") == \"999999998\"\nassert solution(\"10 5 187\") == \"185\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"7 5 12345\\n\"\n\"5 0 4\\n\"\n\"10 5 15\\n\"\n\"17 8 54321\\n\"\n\"499999993 9 1000000000\\n\"\n\"10 5 187\\n\"\n\"2 0 999999999\"\n) == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('499999993 9 1000000000') == '999999995'\nassert solution('10 5 15') == '15'\nassert solution('2 0 999999999') == '999999998'\nassert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\"\"\"\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    x, y, n = [int(n) for n in stdin.readline().split()]\n\n    c = 0\n    while x * c <= n:\n        if (n - x * c) % y == 0:\n            print(x * c + y)\n            break\n        c += 1\n\n    else:\n        print(n)"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n5 12345\\n'\n    '5 0 4\\n'\n    '10 5 15\\n'\n    '17 8 54321\\n'\n    '499999993 9 1000000000\\n'\n    '10 5 187\\n'\n    '2 0 999999999'\n) == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor i in range(T):\n    x, y, n = map(int, sys.stdin.readline().split())\n    k = 0\n    while k < n:\n        if k % x == y:\n            print(k)\n            break\n        k += 1\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\nassert solution(\"8 3\\n1 2 2 3 2 4 6 10\") == '8'\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque, Counter\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\nprint('The solution is correct!')\n\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"10 3\") == \"6\"\nassert solution(\"6 3\") == \"4\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"8 2\") == \"8\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n7 2\n1 2 2 3 2 4 10\n\"\"\"\n) == 6\nassert solution(\n\"\"\"\n8 2\n1 2 2 3 2 4 6 10\n\"\"\"\n) == 8\nassert solution(\n\"\"\"\n7 3\n1 2 2 3 2 4 5\n\"\"\"\n) == 4\nassert solution(\n\"\"\"\n8 3\n1 2 2 3 2 4 6 10\n\"\"\"\n) == 8\nassert solution(\n\"\"\"\n7 4\n1 2 2 3 2 4 5\n\"\"\"\n) == 4\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 2 3') == '2'\nassert solution('4 2\\n1 2 2 3') == '2'\nassert solution('4 2\\n1 2 2 3') == '2'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"7 3\") == \"4\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.readline().split()]\n\nd = [int(i) for i in stdin.readline().split()]\n\nnums = sorted(d)\n\nsums = [0] * n\n\nfor i in range(n):\n    for j in range(i+1, n):\n        sums[i] += nums[j]\n\nmax_sums = [0] * n\n\nfor i in range(n):\n    for j in range(i, n):\n        max_sums[j] = max(max_sums[j], sums[i] + nums[j])\n\nfor i in range(k, n):\n    if max_sums[i] % k == 0:\n        print(i+1)\n        break\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('aBc') == 'abC'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('A') == 'a'\nassert solution('AA') == 'aa'\nassert solution('ab') == 'ab'\nassert solution('abcd') == 'abcd'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\n\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('CBA') == 'cba'\nassert solution('TBA') == 'tba'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('ABAB') == 'aBAB'\nassert solution('CBABA') == 'cBABA'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('ABC') == 'abc'\nassert solution('ABCDE') == 'abcde'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == test_result\nprint(solution(stdin))"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"4\\nmoscow\\n20\\nmoscow\\n10\\nmoscow\") == \"1\\n3\\n4\\n2\"\nassert solution(\"10\\nmoscow\\n20\\nmoscow\\n10\\nmoscow\\n20\\nmoscow\\n10\\nmoscow\") == \"6\\n5\\n4\\n3\\n2\\n1\"\nassert solution(\"5\\nmoscow\\n20\\nmoscow\\n10\\nmoscow\\n10\\nmoscow\\n20\\nmoscow\\n10\\nmoscow\") == \"1\\n3\\n4\\n2\\n5\\n6\"\nassert solution(\"9\\nkazan\\n50\\nkazan\\n35\\nkazan\\n35\\nkazan\\n50\\nkazan\\n35\\nkazan\\n35\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\nkazan\\n50\\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == '3\\n4\\n6\\n1\\n5\\n2\\n'"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2\\n1'\nassert solution('1\\n2\\n1') == '2\\n1\\n1'\nassert solution('1\\n2\\n1\\n1') == '2\\n1\\n1\\n1'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n''') == '3\\n4\\n6\\n1\\n5\\n2\\n'\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('2 990') == 'No'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\nK, X = (int(n) for n in stdin.split())"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 900\\n\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split())\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\\n\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split())\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\n\"\"\"\nhttps://qiita.com/drken/items/a85d6b6be7b6ecaf42fc\n\u89e3\u8aac\n\u30bd\u30fc\u30c8\u3059\u308b\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u8981\u7d20\u306e\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u6700\u5f8c\u307e\u3067\u3068\u304b\u6700\u521d\u304b\u3089\u3068\u304b\u6bd4\u8f03\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u30bd\u30fc\u30c8\u3057\u3066\u3001\u8981\u7d20\u306e\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u6bd4\u8f03\u3059\u308b\u3002\n\n\u3053\u306e\u3084\u308a\u65b9\u3060\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u8981\u7d20\u306e\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u6700\u5f8c\u307e\u3067\u3068\u304b\u6700\u521d\u304b\u3089\u3068\u304b\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3053\u306e\u3084\u308a\u65b9\u3060\u3068\u3001\u30bd\u30fc\u30c8\u3059\u308b\u524d\u306b\u30010, 1, 2,..., N-1 \u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u8981\u7d20\u306e\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u6700\u5f8c\u307e\u3067\u3068\u304b\u6700\u521d\u304b\u3089\u3068\u304b\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3059\u3054\u304f\u6642\u9593\u304c\u304b\u304b\u308b\u3002\n\n\u305d\u3046\u3044\u3046\u3053\u3068\u306f\u3001NlogN \u304b\u3064\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3068\u3044\u3046\u3053\u3068\u306f\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3053\u306e\u60f3\u5b9a\u3068\u3057\u3066\u3001\n\nK 1\n500 100\n1000 200\n\u3068\u3059\u308b\u3068\u3001\n\nN = 2\n\n500 500\n100 100\n1000 200\n\u3068\u306a\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nK 2\n500 100\n1000 200\n\u3068\u3059\u308b\u3068\u3001\n\nN = 3\n\n500 100 100\n100 200 200\n1000 200 200\n\u3068\u306a\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nK 3\n500 100 100\n1000 200 200\n100 300 300\n\u3068\u3059\u308b\u3068\u3001\n\nN = 4\n\n500 100 100 100\n100 200 200 200\n100 100 300 300\n1000 200 200 200\n\u3068\u306a\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3088\u3063\u3066\u3001NlogN \u304b\u3064\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nN = 2\u306e\u3068\u304d\u306b\u3001500 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u307e\u305f 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 500 \u304b\u3089 100 \u304b\u3089 \u306e\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u3001\u6bd4\u8f03\u3059\u308b\u3002\n\n\u307e\u305a\u3001\u8981\u7d201 \u304b\u3089\u8981\u7d202 \u307e\u3067\u3068\u3044\u3046\u3053\u3068\u3067\u6bd4\u8f03\u3059\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u6bd4\u8f03\u3059\u308b\u3002\n\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u3092\u6b21\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u6bd4\u8f03\u3059\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u6bd4\u8f03\u3059\u308b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3059\u308b\u3002\n\u3053\u306e\u3088\u3046\u306a\u7d20\u76f4\u306a\u6bd4\u8f03\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u3053\u308c\u3092\u3059\u308b\u3068\u3001NlogN \u304b\u3064\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3059\u3050\u306b\u304a\u3082\u3063\u305f\u3053\u3068\u306b\u306a\u308b\u306f\u305a\u3060\u304c\u3001\u3053\u308c\u306f\u6700\u60aa\u306a\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"1 10\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n\n\n\"\"\"\nHi, here's your problem today. This problem was recently asked by Google:\n\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nFor example,\n\"A man, a plan, a canal: Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\n\nNote:\nHave you consider that the string might be empty? This is a good question to ask during an interview.\n\nFor the purpose of this problem, we define empty string as valid palindrome.\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\nfrom math import factorial\n\n\"\"\"\nThe probability that Snuke wins the game is the probability that Snuke has to reach an even score of K.\n\nSnuke's score is the sum of N independent dice rolls. The probability that each roll has a value between 1 and K is equal to the probability that the sum of N independent dice rolls has a value between K and K+1, i.e. N independent dice rolls that are either all smaller than K or all larger than K.\n\nNote that N independent dice rolls are independent from each other, i.e. the outcomes of the N rolls of the dice are independent of each other. This means that the probability that the sum of N independent dice rolls has a value between K and K+1, i.e. that the sum of N independent dice rolls has a value between K and K+1, is the product of the probabilities that each of the N independent dice rolls has a value between K and K+1.\n\nThat is, the probability that the sum of N independent dice rolls has a value between K and K+1 is equal to the product of the probabilities of each of the N independent dice rolls.\n\nFor example, if N = 10, Snuke has N independent dice, each of which shows the integers from 1 to 10. Snuke may win the game if he rolls a 10, with probability of 1/10, or if he rolls a 9, with probability of 9/10. In either case, there is no chance that Snuke has to roll a 1 to obtain a score of K.\n\nSnuke may win the game if the N independent dice all show the value K, with probability 1/3, or if Snuke rolls a number that is a multiple of K, e.g. K = 3, with probability of 1/2, or if Snuke rolls a number that is a multiple of K+1, e.g. K+1 = 6, with probability of 1/2. In either case, there is no chance that Snuke has to roll a 10 to obtain a score of K.\n\nTherefore, the probability of Snuke winning the game is the product of the probabilities of each of the N independent dice rolls.\n\nIt can be proven that the probability that Snuke wins the game is always a multiple of 1/6, i.e. the product of all the probabilities of N independent dice rolls.\n\nTODO: Mathematical proof\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 10\n''') == '0.145833333333'\n\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List, Union\n\n\nclass Solution:\n    def __init__(self, input_string: str) -> None:\n        self.n, self.k = list(map(int, input_string.split()))\n\n    def solve(self) -> Union[str, float]:\n        pass\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nimport sys\nimport random\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\n\nfrom math import factorial as fact\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nprint(solution(stdin))"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('SAT') == '1'\nassert solution('MON') == '0'\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(SAT) == 1\nassert solution(SUN) == 0\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAT) == 1\n\"\"\"\n\nfrom datetime import datetime as dt\n\nS = input()"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 2\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('SAT') == 1\nassert solution('MON') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('SAT') == 1\nassert solution('TUE') == 1\nassert solution('WED') == 2\nassert solution('THU') == 3\nassert solution('FRI') == 4\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SUN\") == 0\nassert solution(\"MON\") == 1\nassert solution(\"TUE\") == 2\nassert solution(\"WED\") == 3\nassert solution(\"THU\") == 4\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"SUN\") == 0\nassert solution(\"FRI\") == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(rDx) == x\n\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\nprint(solution(\"2 10 20\"))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1\\n2\\n3\\n'\nassert solution('5 0\\n') == '5\\n5\\n5\\n5\\n5\\n'\nassert solution('2 10 10\\n') == '10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n'\nassert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n'\nprint('Passed!')\n\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\nprint(solution('2 10 20'))\n\n2.7 Sum of first n positive integers\nTask\nWrite a program to take a number input n (n>0) and a number input m (m>0) from the standard input, \nthen output all numbers between n and m inclusively, one number per line.\n\nInput Format:\nThe first line contains a number n, the second line contains a number m.\n\nOutput Format:\nOutput n lines. The n lines should contain all the numbers in the range, one number per line.\n\nSample Input:\n5\n7\n\nSample Output:\n5\n6\n7\n\nn = int(input())\nm = int(input())\n\nfor i in range(n,m+1):\n    print(i)\n\n2.8 Sum of squares of first n positive integers\nTask\nWrite a program to take a number input n (n>0) from the standard input, \nthen output the sum of its squares.\n\nInput Format:\nThe first line contains a number n.\n\nOutput Format:\nThe first line contains the sum of its squares.\n\nSample Input:\n5\n\nSample Output:\n55\n\nn = int(input())\n\nprint(n*(n+1)*(2*n+1))\n\n2.9 Fizz Buzz\nTask\nWrite a program to take a number input n (n>0) from the standard input, \nthen output the numbers from 1 to n, except the multiples of 3 (3, 6, 9, 12,...), \ninstead output \"Fizz\" if the number is a multiple of 3, \"Buzz\" if the number is a multiple of 5, \nand output \"FizzBuzz\" if the number is a multiple of 3 and 5.\n\nInput Format:\nThe first line contains a number n.\n\nOutput Format:\nOutput n lines. The n lines should contain the numbers from 1 to n, except the multiples of 3 (3, 6, 9, 12,...), \ninstead output \"Fizz\" if the number is a multiple of 3, \"Buzz\" if the number is a multiple of 5, \nand output \"FizzBuzz\" if the number is a multiple of 3 and 5.\n\nSample Input:\n10\n\nSample Output:\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\n\nn = int(input())\n\nfor i in range(1,n+1):\n    if (i%3==0) and (i%5==0):\n        print(\"FizzBuzz\")\n    elif i%3 == 0:\n        print(\"Fizz\")\n    elif i%5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n\n2.10 String operations\nTask\nGiven a string and a character, write a function to output a new string made of the original string \nin which all occurrences of the character have been changed to \"*\".\n\nFor example, if the string is \"abca\" and the character is \"c\", then the result should be \"ab*a\".\n\nNote that the input string is passed as an array of characters.\n\nInput Format:\nThe first line contains the string, and the second line contains the character.\n\nOutput Format:\nThe first line contains the new string, with all instances of the character changed to \"*\".\n\nSample Input:\nabca\nc\n\nSample Output:\nab*a"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\n\"\"\"\n\nimport unittest\nimport math\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n\nr, d, x = [int(i) for i in input().split(' ')]\nfor i in range(2000, 2011):\n    print(int(r*x - d))\n    r, d, x = r, d, int(r*x - d)\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"0\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\"\"\"\n\nclass Solution:\n    def splitArray(self, nums):\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        dp[1] = nums[0]\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1], nums[i - 1] + dp[i - 2])\n        res = dp[n]\n        for i in range(1, n):\n            if dp[i] >= dp[n] - dp[i]:\n                res = min(res, dp[i] + dp[n] - dp[i])\n        return res\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"5 1 3 2 1 4\") == \"4\"\nassert solution(\"5 1 3 2 1 4\") == \"0\"\nassert solution(\"3 4 1 2\") == \"0\"\nassert solution(\"3 1 2\") == \"0\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3 1 1 4') == 5\nassert solution('5\\n1 3 2 1 4') == 4\nassert solution('3\\n4 1 2') == 0\nassert solution('3\\n1 2 3') == 6\nassert solution('7\\n2 4 1 4 1 1 1') == 7\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\nprint('Success')\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 1 1 4') == 5\nassert solution('5\\n1 3 2 1 4') == 4\nassert solution('3\\n4 1 2') == 0\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nassert solution(\"2 2 3\\n2 2 2\\n1 1 1\\n100 100 100\\n1 1000000000 1000000000\") == 'NO\\nNO\\nNO\\nNO\\nYES\\nYES\\n1 1 1000000000\\n1 1 1000000000'\nassert solution(\"1 1 1\\n100 100 100\\n100 100 100\") == 'NO\\nNO\\nNO'\nassert solution(\"1 2 3\\n1 2 2\\n1 2 2\") == 'YES\\n1 1 1\\nYES\\n1 1 1'\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == 'YES\\n1 1 1\\nYES\\n1 1 1'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('5 3 2') == 'YES'\nassert solution('100 100 100') == 'YES'\nassert solution('50 49 49') == 'YES'\nassert solution('10 30 20') == 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print())"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\") == \"\"\"\nYES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000\n\"\"\"\nprint(solution(\"\"\"\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\"))"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"1 1000000000 1000000000\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\\n1 2 3\\n2 4 6\") == \"YES\\n2 2 1\"\nassert solution(\"4 3 2\\n1 2 3\\n2 4 6\\n2 4 6\") == \"NO\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    x, y, z = map(int, input().split())\n    if x >= y:\n        if x >= z:\n            a, b, c = x, y, z\n        elif y > z:\n            a, b, c = x, z, y\n        else:\n            a, b, c = x, y, z\n    elif y >= x:\n        if y >= z:\n            a, b, c = y, x, z\n        elif x > z:\n            a, b, c = y, z, x\n        else:\n            a, b, c = y, x, z\n    else:\n        if z >= x:\n            a, b, c = z, x, y\n        elif x > y:\n            a, b, c = z, y, x\n        else:\n            a, b, c = z, y, x\n\n    print(\"YES\" if b == c else \"NO\")\n    print(a, b, c)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"input.txt\").read()) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\n\nclass Box:\n    def __init__(self, x: int, y: int, z: int) -> None:\n        self.x = x\n        self.y = y\n        self.z = z\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\n\n\n-----Test Set-----\n\n[Python] Syntax\n0\n1\n2\n10\n5\n1 2 3 4 5 6 7 8 9\n5 2 1 4 2\n1 2 3 4 5\n3\n4\n2\n1 2\n0\n1\n1\n4\n\n[JavaScript] Syntax\n0\n1\n2\n10\n5\n1 2 3 4 5 6 7 8 9\n5 2 1 4 2\n1 2 3 4 5\n3\n4\n2\n1 2\n0\n1\n1\n4\n\n-----Java-----\n\npublic class Test {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int k = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        int[] cnt = new int[m];\n        for (int i = 0; i < m; i++) {\n            cnt[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (k >= a[i] && cnt[j] == 0) {\n                    cnt[j] = 1;\n                    break;\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < m; i++) {\n            if (cnt[i] == 0) {\n                sum++;\n            }\n        }\n        System.out.println(sum);\n    }\n}\n\n\n\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_expected\nprint(solution(stdin))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\nfrom itertools import groupby\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nn = len(a)\n\nmax_objects = 0\n\nfor i in range(n):\n    max_objects += k // a[i]\n\nfor j in range(m):\n    max_objects -= (k // a[j])"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'ab a b'\nassert solution('a b c') == 'abc ac b c'\nassert solution('a b c d') == 'ab ac ad bc bd c'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"\n\nn, k = [int(c) for c in stdin.split()]\ns = stdin.split('\\n')[1]"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\n\nassert solution(\"aaaaaaa\") == 0\n\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())\ns = stdin.readline().strip()\nl = [stdin.readline().strip() for _ in range(k)]\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sadasdadas\") == \"9\"\nassert solution(\"aaaaaaa\") == \"0\"\nassert solution(\"abacaba\") == \"12\"\n\"\"\"\n\nimport math\nfrom collections import Counter\n\nn, k = [int(el) for el in input().split()]\ns = input()\n\ncounter = Counter(s)\nprint(math.factorial(n + k) // math.factorial(k) // math.factorial(n) // math.factorial(n - k))\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'abacaba'\n) == 12\n\nassert solution(\n    'aaaaaaa'\n) == 0\n\nassert solution(\n    'aabbbbbbaa'\n) == 21\n\nassert solution(\n    'aabccddd'\n) == 4\n\nassert solution(\n    'aabb'\n) == 1"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('sadfaasdda') == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaaaa\") == 0\nassert solution(\"abacaba\") == 12\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 12\n\nassert solution('aaaaaaa') == 0\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == '2'\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == '-1'\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '-2999999997'\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '6'\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == '2'\nassert solution(\"4\\n4\\n1 -2 -1 -3\") == '-1'\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '-2999999997'\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '-1'"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n1 -2 -1 -3\") == \"-1\"\nassert solution(\"4\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\"\n\nassert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '''2\n-1\n6\n-2999999997'''\n\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5\\n2 1\\n3 2\\n3 4\\n'\n\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '4 1\\n1 2\\n1 3\\n'\n\nassert solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n''') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n'\n\nassert solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n''') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n'\n\nassert solution('''9 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n6 9\n''') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n2 4\") == \"3 2\\n2 1\\n3 2\\n4 3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n4 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == \"3 1\\n2 3\\n4 2\"\nassert solution(\"7 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n\") == \"3 6\\n2 1\\n4 7\\n5 2\\n6 3\\n7 4\\n8 5\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"7 7\\n1 2\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6\\n6 7\\n\") == \"7 1\\n1 2\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6\\n6 7\\n\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n\"\n\n----"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 1\\n3 2\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\nassert solution('6 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6'\nassert solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == '9 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10'\n\n-----\n\nIt is important to note that the maximum degree of the spanning tree is equal to the maximum degree of the original graph."
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('499993') == '40'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"499993\\n\") == \"41664916690999888\"\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1\n5\n499993\n\n\"\"\") == '0\\n40\\n41664916690999888'\n\n\"\"\"\nimport sys\nimport math\nimport random\nimport bisect\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '1'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\") == \"0\"\nassert solution(\"2\\n5\") == \"8\"\nassert solution(\"3\\n7\") == \"26\"\nassert solution(\"3\\n9\") == \"104\"\nassert solution(\"3\\n11\") == \"334\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport math\nfrom functools import lru_cache\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"499993\\n1\") == '0'\nassert solution(\"499993\\n5\") == '40'\nassert solution(\"499993\\n499993\") == '41664916690999888'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\nassert solution(\"499993\") == \"41664916690999888\"\n\nassert solution(\"499993\") == \"41664916690999888\"\n\nassert solution(\"499993\") == \"41664916690999888\"\n\nassert solution(\"499993\") == \"41664916690999888\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '0'\nassert solution('499993') == '41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1') == '0'\nassert solution('2\\n2\\n2\\n2\\n2') == '0'\nassert solution('3\\n3\\n3\\n3\\n3') == '0'\nassert solution('4\\n4\\n4\\n4\\n4') == '0'\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nsys.stdin = open(\"Solutions/week1/in.txt\", \"r\")\n\n\"\"\"\n!topdown\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n4 5 7 6 7 5 4 4 6 4''') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\n\nd = [0] * n\nodd = 0\neven = 0\nfor i in range(n):\n    if a[i] % 2 == 0:\n        even += 1\n    else:\n        odd += 1\nfor i in range(n):\n    if i == 0:\n        if odd!= 0:\n            d[i] = 1\n        else:\n            d[i] = -1\n    else:\n        if (i - a[i - 1]) % 2 == 0:\n            d[i] = d[i - 1] + 1\n        else:\n            d[i] = -1\nprint(*d)"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"3 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"2 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"1 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n----\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint(solution('64\\n32\\n97\\n2\\n12345'))\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"64 32 97 2 12345\") == 'YES 2 4 8'\nassert solution(\"64 32 97 2 12345\") == 'YES 2 4 8'\nassert solution(\"64 32 97 2 12345\") == 'YES 2 4 8'\nassert solution(\"64 32 97 2 12345\") == 'YES 2 4 8'\nassert solution(\"64 32 97 2 12345\") == 'YES 2 4 8'\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\nassert solution(\"64 32 97 2 12345\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"YES\\n1 2 1\"\nassert solution(\"2\\n2\\n2\\n2\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"2\\n3\\n4\\n5\\n6\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('2 4 6 8 10') == 'YES'\nassert solution('4 6 10 18') == 'YES'\nassert solution('2 2 4') == 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345\\n') == 'YES\\n2 4 8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345\\n') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == 2\n\nassert solution(\"bbbb\") == 2\n\nassert solution(\"ababab\") == 0\n\nassert solution(\"ababab\") == 0\n\nassert solution(\"aa\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('a') == 1\nassert solution('aa') == 1\nassert solution('abbababbb') == 3\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba') == 2\nassert solution('bbbb') == 2\nassert solution('abbb') == 1\nassert solution('abbbb') == 0\n\nassert solution('bbabbb') == 2\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaa\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaaaaaaaaaaa\") == 2\nassert solution(\"aaaaaaaaaaaaaaaaaaaaa\") == 0\nassert solution(\"abababababababababababababababab\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"aa\" * 10000) == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"abbba\") == 2\nassert solution(\"abbbb\") == 0\nassert solution(\"abbba\") == 2\nassert solution(\"abbbb\") == 0\n\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"abbb\") == 1\nassert solution(\"abab\") == 0\nassert solution(\"aaaa\") == 0\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5 2\\n1 0\\n2 0\\n3 2\\n0 3\\n0 1\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1\\n1 0\\n2 1\") == \"9\"\nassert solution(\"5\\n0 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\n\nn = int(stdin.readline())\npoints = []\nfor _ in range(n):\n    x, y = map(int, stdin.readline().split())\n    points.append((x, y))\n\np_cnt = len(set(points))\n\nfor i in range(n):\n    x, y = points[i]\n    p_cnt = min(p_cnt,\n        min(abs(x), abs(y)) + abs(x + y) - 1)\n\nprint(p_cnt)"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == '15'\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\n\"\"\"\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    points.append([x, y])\n\npoints = sorted(points)\ncur_x = points[0][0]\ncur_y = points[0][1]\nresult = 0\nfor point in points[1:]:\n    x, y = point\n    result += abs(cur_x - x) + abs(cur_y - y)\n    cur_x = x\n    cur_y = y\n\nprint(result)\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\n\"\"\"\n\nA = int(stdin.readline().strip())\nB = int(stdin.readline().strip())"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n\") == \"2\"\nassert solution(\"1\\n3\\n\") == \"1\"\nassert solution(\"3\\n3\\n\") == \"2\"\n\nprint(solution(\"3\\n1\\n\"))\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(1)) == '2'\nassert solution(str(3)) == '1'\n\"\"\"\n\n\n\"\"\"\nProblems: \n    - Find the correct answer for all of the questions.\n\nAssumptions:\n    - No loops\n    - All strings\n\nStrategy:\n    - We know what the answer is, so we can either check if it is correct or the guess was wrong.\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\n\"\"\"\n\na, b = list(map(int, input().split()))"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0.8 1 1.2') == '0.96'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('4') == '2.000000000000'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('1') == '1.000000000000'\nassert solution('2') == '1.000000000000'\nassert solution('5') == '1.000000000000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == '1.000000000000'\n\n----\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(3)) == str(1.000000000000)\n\"\"\"\n\nfrom math import ceil\nimport math"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == '1.0'\nassert solution(\"7\") == '3.5'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nL = int(stdin.readline().strip())\n\nmax_volume = 0\nfor a in range(1, int(L / 2) + 1):\n    for b in range(1, int(L / 2) + 1):\n        for c in range(1, int(L / 2) + 1):\n            volume = a * b * c\n            if volume > max_volume and sum((a, b, c)) == L:\n                max_volume = volume\nprint(max_volume)"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0.8 1 1.2') == '1.000000000000'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"1\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\n-----\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == 'Hello World'\nassert solution('2\\n2\\n1\\n2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Hello World'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"1+1\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\nTakahashi is now one year old. As N=2, he must receive integers A and B, and we should print A+B.\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1\"\n) == \"Hello World\"\n\nassert solution(\n    \"2\"\n) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\n-----Explanation-----\nThe first line contains an integer N, which means that N=1.  \n\nSince N is 1, we should print Hello World.  \n\nIf N is 2, then we have to ask for two integers A and B.  \n\nSince N is 2, we should print A+B.  \n\nThe following two lines contain two integers A and B, which can be parsed to ints and then added.\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3333'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\n\na, b = map(int, stdin.split())\n\nresult = ''.join(['3' * b + '4' * a, '3' * a + '4' * b])\n\nprint(result)\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3333\"\nprint(solution(\"4 3\"))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"1 2\") == \"12\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"4 4\") == \"4444\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3333'\nprint(solution('4 3'))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 1') == '11'\n\n\"\"\"\n\na, b = [int(i) for i in stdin.split()]\n\na, b = str(a), str(b)\n\nprint(''.join(a * int(b)) if int(a) > int(b) else ''.join(b * int(a)))"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\nassert solution('b') == 'c'\nassert solution('c') == 'd'\nassert solution('d') == 'e'\nassert solution('e') == 'f'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'a'\n    ) == 'b'\n\nassert solution(\n    'c'\n    ) == 'd'\n\nassert solution(\n    'z'\n    ) == '{'\n\nassert solution(\n    'b'\n    ) == 'c'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'b'\n\n-------------TestCase 2-------------\n\nWrite 5 lines of code to test the correctness of solution:\nGiven is a lowercase English letter C that is not z. Print the letter that follows C in alphabetical order.\n\n-----Constraints-----\n - C is a lowercase English letter that is not z.\n\n-----Input-----\ng\n\n-----Output-----\nh\n\n-----Sample Input-----\nc\n\n-----Sample Output-----\nd\n\nc is followed by d."
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\n\nassert solution('f') == 'g'\n\nassert solution('z') == 'A'\n\nassert solution('c') == 'D'\n\n\"\"\"\n\nimport os\nfrom sys import stdin"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"z\") == \"a\"\nassert solution(\"y\") == \"a\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_case[0]) == test_case[1]"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\n\n---\nprint(chr(ord('a') + 1))\n\n'a'\n\n\n\n'b'\n\n'c'\n\n\n\n'd'\n\n'e'\n\n'f'\n\n'g'\n\n'h'\n\n'i'\n\n'j'\n\n'k'\n\n'l'\n\n'm'\n\n'n'\n\n'o'\n\n'p'\n\n'q'\n\n'r'\n\n's'\n\n't'\n\n'u'\n\n'v'\n\n'w'\n\n'x'\n\n'y'\n\n'z'\n\n\n\n'A'\n\n'B'\n\n'C'\n\n'D'\n\n'E'\n\n'F'\n\n'G'\n\n'H'\n\n'I'\n\n'J'\n\n'K'\n\n'L'\n\n'M'\n\n'N'\n\n'O'\n\n'P'\n\n'Q'\n\n'R'\n\n'S'\n\n'T'\n\n'U'\n\n'V'\n\n'W'\n\n'X'\n\n'Y'\n\n'Z'\n\n\n\n'a'\n\n'b'\n\n'c'\n\n'd'\n\n'e'\n\n'f'\n\n'g'\n\n'h'\n\n'i'\n\n'j'\n\n'k'\n\n'l'\n\n'm'\n\n'n'\n\n'o'\n\n'p'\n\n'q'\n\n'r'\n\n's'\n\n't'\n\n'u'\n\n'v'\n\n'w'\n\n'x'\n\n'y'\n\n'z'\n\n\n\n' '\n\n'!'\n\n'\\''\n\n'#'\n\n'$'\n\n'%'\n\n'&'\n\n'('\n\n')'\n\n'*'\n\n'+'\n\n','\n\n'-'\n\n'.'\n\n'/'\n\n':'\n\n';'\n\n'<'\n\n'='\n\n'>'\n\n'?'\n\n'@'\n\n'[''\n\n']'\n\n'\\\\'\n\n'_'\n\n'`'\n\n'a'\n\n'b'\n\n'c'\n\n'd'\n\n'e'\n\n'f'\n\n'g'\n\n'h'\n\n'i'\n\n'j'\n\n'k'\n\n'l'\n\n'm'\n\n'n'\n\n'o'\n\n'p'\n\n'q'\n\n'r'\n\n's'\n\n't'\n\n'u'\n\n'v'\n\n'w'\n\n'x'\n\n'y'\n\n'z'\n\n'{'\n\n'}'\n\n'|'\n\n'~'\n\n\n\n'\\n'\n\n'\\t'\n\n'\\r'\n\n' '\n\n'\\x0b'\n\n'\\x0c'\n\n'\\x0e'\n\n'\\x0f'\n\n'\\x10'\n\n'\\x11'\n\n'\\x12'\n\n'\\x13'\n\n'\\x14'\n\n'\\x15'\n\n'\\x16'\n\n'\\x17'\n\n'\\x18'\n\n'\\x19'\n\n'\\x1a'\n\n'\\x1b'\n\n'\\x1c'\n\n'\\x1d'\n\n'\\x1e'\n\n'\\x1f'\n\n\n\n' '\n\n'!'\n\n'\"'\n\n'#'\n\n'$'\n\n'%'\n\n'&'\n\n'\\''\n\n'('\n\n')'\n\n'*'\n\n'+'\n\n','\n\n'-'\n\n'.'\n\n'/'\n\n':'\n\n';'\n\n'<'\n\n'='\n\n'>'\n\n'?'\n\n'@'\n\n'A'\n\n'B'\n\n'C'\n\n'D'\n\n'E'\n\n'F'\n\n'G'\n\n'H'\n\n'I'\n\n'J'\n\n'K'\n\n'L'\n\n'M'\n\n'N'\n\n'O'\n\n'P'\n\n'Q'\n\n'R'\n\n'S'\n\n'T'\n\n'U'\n\n'V'\n\n'W'\n\n'X'\n\n'Y'\n\n'Z'\n\n'a'\n\n'b'\n\n'c'\n\n'd'\n\n'e'\n\n'f'\n\n'g'\n\n'h'\n\n'i'\n\n'j'\n\n'k'\n\n'l'\n\n'm'\n\n'n'\n\n'o'\n\n'p'\n\n'q'\n\n'r'\n\n's'\n\n't'\n\n'u'\n\n'v'\n\n'w'\n\n'x'\n\n'y'\n\n'z'\n\n'0'\n\n'1'\n\n'2'\n\n'3'\n\n'4'\n\n'5'\n\n'6'\n\n'7'\n\n'8'\n\n'9'\n\n\n\n'\\xa0'\n\n'\\u0a0d'\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\n'\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\r'\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n' '\n\n'\\u200b'\n\n'\\u200e'\n\n'\\u200f'\n\n'\\u2060'\n\n'\\u2061'\n\n'\\u2062'\n\n'\\u2063'\n\n\n\n'\\u200a'\n\n'\\u202a'\n\n'\\u202c'\n\n'\\u202d'\n\n'\\u202e'\n\n'\\u202f'\n\n'\\u205f'\n\n'\\u2066'\n\n'\\u2067'\n\n'\\u2068'\n\n'\\u2069'\n\n'\\u2066'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\u2064'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2007'\n\n\n\n'\\xa0'\n\n'\\u2009'\n\n\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\u2064'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2007'\n\n\n\n'\\xa0'\n\n'\\u2009'\n\n\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\u2064'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2007'\n\n\n\n'\\xa0'\n\n'\\u2009'\n\n\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\u2064'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2007'\n\n\n\n'\\xa0'\n\n'\\u2009'\n\n\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\u2064'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2007'\n\n\n\n'\\xa0'\n\n'\\u2009'\n\n\n\n'\\u2028'\n\n'\\u2029'\n\n\n\n'\\u2064'\n\n'\\u2069'\n\n\n\n'\\xa0'\n\n'\\u2007'\n\n\n\n'\\xa0'\n\n'\\u2009'\n\n\n\n'\\u2028"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('papam papap') == 'papap papam papap'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"jab joe jas\") == \"jasjojojasjab\"\nassert solution(\"oja jojoja sas\") == \"sasasasasjojojoja\"\nassert solution(\"yzaozzkxbcvbwmm\") == \"bcvbwmmxkoyzaozzk\"\nassert solution(\"zaxpkpehkbqwzskqhj\") == \"qhjkspkqhjkpehkbqwz\"\n\"\"\"\n\ns, t = input().split()\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"order\",\"atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'oder'\n) == 'atcoder'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n\"\"\"\n\nS = stdin.strip().split('\\n')[0]\nT = stdin.strip().split('\\n')[1]\n\nprint(S+T)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oder\", \"atc\") == \"atcoder\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oder atc') == 'atcoder'\n\nassert solution('abc') == 'abcabc'\n\nassert solution('abac') == 'abacabac'\n\nassert solution('aab') == 'aabaa'\n\n\"\"\"\n\n\"\"\"\n\n3.1.4.11 Sorting: Heapsort\n\nIf you have an array that is almost sorted, you can sort it in linear time and space.\n\nFor instance, if you have an array of strings that are almost sorted in some order, you can sort it in linear time and space.\n\nYou are given a sequence of n integers a1, a2,..., an. In the end, you will print the sequence a1, a2,..., an, but sorted in increasing order.\n\nHowever, there are some elements ai, such that i < j and ai > aj. This means that a1 < a2 <... < ai > aj >... > an.\n\nYou should satisfy the following condition:\n\n- the elements between ai and aj should be moved in front of the list, i.e. in the sequence a1, a2,..., an, ai should be placed immediately before aj;\n- the elements between ai+1 and an should stay in the same order as they are.\n- after this step you will obtain the required sequence.\n\nGiven n elements, you should print the sequence a1, a2,..., an, ai,..., an, where i < j and ai > aj.\n\nInput format\n\nThe first line contains the integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100).\n\nThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).\n\nConstraints\n\nThe elements in the sequence ai, i\u2009\u2264\u2009j are all integers.\n\nOutput format\n\nPrint the sequence a1, a2,..., an in increasing order, each on a separate line.\n\nSample 1.\n\nInput\n\n3\n\n3\n\n2\n\n4\n\nOutput\n\n3\n\n2\n\n1\n\n4\n\nSample 2.\n\nInput\n\n4\n\n4\n\n1\n\n2\n\n3\n\nOutput\n\n1\n\n2\n\n3\n\n4\n\nSample 3.\n\nInput\n\n5\n\n3\n\n2\n\n4\n\n5\n\n1\n\nOutput\n\n2\n\n3\n\n4\n\n5\n\n1\n\n\"\"\"\n\n\"\"\"\n\n3.1.4.11 Sorting: Heapsort\n\nIf you have an array that is almost sorted, you can sort it in linear time and space.\n\nFor instance, if you have an array of strings that are almost sorted in some order, you can sort it in linear time and space.\n\nYou are given a sequence of n integers a1, a2,..., an. In the end, you will print the sequence a1, a2,..., an, but sorted in increasing order.\n\nHowever, there are some elements ai, such that i < j and ai > aj. This means that a1 < a2 <... < ai > aj >... > an.\n\nYou should satisfy the following condition:\n\n- the elements between ai and aj should be moved in front of the list, i.e. in the sequence a1, a2,..., an, ai should be placed immediately before aj;\n- the elements between ai+1 and an should stay in the same order as they are.\n- after this step you will obtain the required sequence.\n\nGiven n elements, you should print the sequence a1, a2,..., an, ai,..., an, where i < j and ai > aj.\n\nInput format\n\nThe first line contains the integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100).\n\nThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).\n\nConstraints\n\nThe elements in the sequence ai, i\u2009\u2264\u2009j are all integers.\n\nOutput format\n\nPrint the sequence a1, a2,..., an, ai,..., an in increasing order, each on a separate line.\n\nSample 1.\n\nInput\n\n3\n\n3\n\n2\n\n4\n\nOutput\n\n3\n\n2\n\n1\n\n4\n\nSample 2.\n\nInput\n\n4\n\n4\n\n1\n\n2\n\n3\n\nOutput\n\n1\n\n2\n\n3\n\n4\n\nSample 3.\n\nInput\n\n5\n\n3\n\n2\n\n4\n\n5\n\n1\n\nOutput\n\n2\n\n3\n\n4\n\n5\n\n1\n\n\"\"\"\n\n\"\"\"\n\n3.1.4.11 Sorting: Heapsort\n\nIf you have an array that is almost sorted, you can sort it in linear time and space.\n\nFor instance, if you have an array of strings that are almost sorted in some order, you can sort it in linear time and space.\n\nYou are given a sequence of n integers a1, a2,..., an. In the end, you will print the sequence a1, a2,..., an, but sorted in increasing order.\n\nHowever, there are some elements ai, such that i < j and ai > aj. This means that a1 < a2 <... < ai > aj >... > an.\n\nYou should satisfy the following condition:\n\n- the elements between ai and aj should be moved in front of the list, i.e. in the sequence a1, a2,..., an, ai should be placed immediately before aj;\n- the elements between ai+1 and an should stay in the same order as they are.\n- after this step you will obtain the required sequence.\n\nGiven n elements, you should print the sequence a1, a2,..., an, ai,..., an, where i < j and ai > aj.\n\nInput format\n\nThe first line contains the integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100).\n\nThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).\n\nConstraints\n\nThe elements in the sequence ai, i\u2009\u2264\u2009j are all integers.\n\nOutput format\n\nPrint the sequence a1, a2,..., an, ai,..., an, in increasing order, each on a separate line.\n\nSample 1.\n\nInput\n\n3\n\n3\n\n2\n\n4\n\nOutput\n\n3\n\n2\n\n1\n\n4\n\nSample 2.\n\nInput\n\n4\n\n4\n\n1\n\n2\n\n3\n\nOutput\n\n1\n\n2\n\n3\n\n4\n\nSample 3.\n\nInput\n\n5\n\n3\n\n2\n\n4\n\n5\n\n1\n\nOutput\n\n2\n\n3\n\n4\n\n5\n\n1\n\n\"\"\"\n\n\"\"\"\n\n3.1.4.11 Sorting: Heapsort\n\nIf you have an array that is almost sorted, you can sort it in linear time and space.\n\nFor instance, if you have an array of strings that are almost sorted in some order, you can sort it in linear time and space.\n\nYou are given a sequence of n integers a1, a2,..., an. In the end, you will print the sequence a1, a2,..., an, but sorted in increasing order.\n\nHowever, there are some elements ai, such that i < j and ai > aj. This means that a1 < a2 <... < ai > aj >... > an.\n\nYou should satisfy the following condition:\n\n- the elements between ai and aj should be moved in front of the list, i.e. in the sequence a"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('oxer atc') == 'atcoder'\nassert solution('oxer atcc') == 'atccoder'\nassert solution('oxer atc xer') == 'atcxer'\nassert solution('oxer atc xer xxer') == 'atcxxer'\n\n\"\"\"\n\nimport sys\n\ns, t = sys.stdin.read().strip().split('\\n')\n\ns = s + t\nt = t + s\n\nprint(t)\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2 1 2\\n\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\na = list(map(int, input().split()))\n\nodd = 0\neven = 0\n\nfor i in a:\n    if i % 2 == 0:\n        even += i\n    else:\n        odd += i"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\n\nassert solution(\"6\\n5 1 2 4 6 3\") == '0'\n\nassert solution(\"2\\n1000000 1000000\") == '1000000'\n\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('3\\n1 1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('6\\n1, 2, 4, 6, 3') == '0'"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 1 2 4 5 3') == '0'\nassert solution('2 1000000') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"2 1 4 5 6 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"1000000 1000000\") == \"1000000\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['6 2 3 3', '7 10 50 12 1 8']) == 5\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 10 50 12 1 8\") == \"5\"\nassert solution(\"6 2 3 3\") == \"5\"\nassert solution(\"7 4 2 1\") == \"1\"\nassert solution(\"7 4 2 1\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\nassert solution(\"7 4 2 1\\n100\\n\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == 5\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import accumulate\n\nn, a, b, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\np = list(accumulate(h, min))\n\nbest = max(p[-1] - b * k, 0)\nfor i in range(n - 1):\n    best = max(best, p[i] - a * k)\nprint(best)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == expected_output\n\"\"\"\n\nimport sys\n\ninput_as_list = list(map(int, input().split(\" \")))\nn, a, b, k = input_as_list\nh = list(map(int, input().split(\" \")))\n\np = [0] * n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected_output)\n\n\n-----Notes-----\nYou may assume that all monsters are either killed or dead before your secret technique is used.\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 3\\n7 10 50 12 1 8\\n\") == 5\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"7 4\\n5 2 6 7 3 1 0\") == \"3\"\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f:\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0412 \u043d\u0435\u0439 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 n, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f n \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0438 \u0432\u0437\u044f\u0442\u044c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441\u043f\u0438\u0441\u043a\u0430. \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e m, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 n. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e m, \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 m \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 10^9. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e \u043c\u044b \u0437\u043d\u0430\u0435\u043c, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 m \u0447\u0438\u0441\u0435\u043b, \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 1. \u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a \u0441\u043f\u0438\u0441\u043a\u0443, \u0447\u0442\u043e \u043c\u044b \u0437\u043d\u0430\u0435\u043c.\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:\n\u0412 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 n, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430. \u0412 \u043f\u044f\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f n \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0438 \u0432\u0437\u044f\u0442\u044c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441\u043f\u0438\u0441\u043a\u0430. \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e m, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 n. \u0412 \u0448\u0435\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e m, \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 m \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 10^9. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e \u043c\u044b \u0437\u043d\u0430\u0435\u043c, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 m \u0447\u0438\u0441\u0435\u043b, \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 1. \u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a \u0441\u043f\u0438\u0441\u043a\u0443, \u0447\u0442\u043e \u043c\u044b \u0437\u043d\u0430\u0435\u043c.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443:"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3\\n2 4\\n3 5\") == \"3\"\nassert solution(\"2 2\\n1 3\\n3 4\") == \"0\"\nassert solution(\"2 3\\n0 1\\n1 2\") == \"1\"\nassert solution(\"1 1\\n1 2\") == \"0\"\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"1 2\\n2 3\"), \"0\")\n        self."
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n0 1 2 3\n''') == '0\\n0 1 2 3'\nprint(\"PASSED\")\n\nassert solution('''5 4\n2 1 0 4 0 5\n''') == '2\\n2 1 0 3 5'\nprint(\"PASSED\")\n\nassert solution('''3 2\n1 0\n''') == '1\\n1 0'\nprint(\"PASSED\")\n\nassert solution('''3 3\n1 1 1\n''') == '1\\n1 1 1'\nprint(\"PASSED\")\n\nassert solution('''3 3\n2 1 0\n''') == '2\\n2 1 0'\nprint(\"PASSED\")"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"6 3\") == \"3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2\") == \"1\"\nassert solution(\"3 4\\n1 2 3 4\") == \"0\"\nassert solution(\"3 5\\n0 1 2 3\") == \"1\"\nassert solution(\"7 9\\n0 1 2 3 4 5 6 7\") == \"0\"\nassert solution(\"1 2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\n\n\"\"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 0 6 10 12\") == 3\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"5 1\\n3\") == \"0\"\nassert solution(\"2 3\\n1 3\") == \"1\\n1 3\"\nassert solution(\"4 3\\n0 0 0 0\") == \"1\\n1 1 1 1\"\nassert solution(\"4 4\\n0 0 0 0\") == \"2\\n2 2 2 2\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n\nimport sys\n\nn, m = [int(num) for num in sys.stdin.readline().split()]"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n\n\"\"\"\nfrom typing import List, Tuple, Union\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\"\"\"\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\n\nk = [int(i) for i in sys.stdin.readline().split()]\n\nd = []\nt = []\nfor i in range(m):\n    d_t = list(map(int, sys.stdin.readline().split()))\n    d.append(d_t[0])\n    t.append(d_t[1])\n\nm_k = [0 for _ in range(n)]\nfor i in range(m):\n    if t[i] > n:\n        m_k = [0 for _ in range(n)]\n    else:\n        m_k[t[i] - 1] = 1\n\nd_k = [0 for _ in range(m)]\nfor i in range(m):\n    if d[i] > n:\n        d_k = [0 for _ in range(m)]\n    else:\n        d_k[d[i] - 1] = 1\n\nk_m_k = k.copy()\nk_d_k = k.copy()\nfor i in range(len(k_m_k)):\n    if t[i] > n:\n        k_m_k[i] = 0\n    else:\n        k_m_k[i] = 1\n\nfor i in range(len(k_d_k)):\n    if d[i] > n:\n        k_d_k[i] = 0\n    else:\n        k_d_k[i] = 1\n\nk_m_k.sort()\nk_d_k.sort()\n\nsum_k_m_k = sum(k_m_k)\nsum_k_d_k = sum(k_d_k)\n\nm_s = [0 for _ in range(n)]\nd_s = [0 for _ in range(m)]\nfor i in range(n):\n    if k_m_k[i] == 0:\n        m_s[i] = 99999\n    else:\n        m_s[i] = sum_k_m_k\n\nfor i in range(m):\n    if k_d_k[i] == 0:\n        d_s[i] = 99999\n    else:\n        d_s[i] = sum_k_d_k\n\nm_s.sort()\nd_s.sort()\n\nm_s_ind = 0\nd_s_ind = 0\n\nans = 9999\nwhile m_s_ind < n and d_s_ind < m:\n    if m_s[m_s_ind] <= d_s[d_s_ind]:\n        ans = min(ans, d_s_ind + k_d_k.index(1) + 1)\n        m_s_ind += 1\n    else:\n        ans = min(ans, m_s_ind + k_m_k.index(1) + 1)\n        d_s_ind += 1\n\nprint(ans)\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\nprint(solution(input()))"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\n\"\"\"\n\nfrom collections import Counter\n\n_, n, m = list(map(int, input().split(' ')))\n_, k = list(map(int, input().split(' ')))\n\nmicro = [list(map(int, input().split(' '))) for _ in range(n)]\n_ = list(map(int, input().split(' ')))\n\nfor _ in range(m):\n    days, type_ = list(map(int, input().split(' ')))\n    micro[type_ - 1] = [days, 0]\n\nk = Counter(k)\n\nans = 0\nn = k.most_common(1)[0][1]\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == 20\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\nfrom math import inf"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 3 2\") == 8\n\"\"\"\nfrom collections import Counter\nfrom itertools import chain\nimport numpy as np\nfrom typing import List, Dict, Set\n\nfrom utils import read_input_multiple_int_separated_by_lines, read_input_integers\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\nprint(solution(input()))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n1 1 1 1 1 1 1 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1''') == 'YES\\nYES\\nNO\\nYES\\nYES'\nprint(solution(input()))\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n1 1 1 1 1\\n1\") == \"YES\"\nassert solution(\"4\\n2\\n1 1 1 1 1\\n2\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 1 1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\n\"\"\"\n\nimport sys\n\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    n = int(sys.stdin.readline())\n    sticks = [int(x) for x in sys.stdin.readline().split()]\n    if n == 1:\n        print(\"YES\")\n    else:\n        sticks.sort()\n        if sticks[0] == sticks[1] and sticks[1] == sticks[2]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5') == 'YES'\nassert solution('4\\n1 1 1 1 1\\n2\\n10 5 1 10 5 1 1 1') == 'NO'\nassert solution('4\\n1 1 1 1 1\\n2\\n10 5 1 10 5 1 1 1') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 10000 10000 10000\") == \"YES\\nNO\\n\"\nassert solution(\"1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 5 2 10 1 1 2 5\") == \"YES\\nYES\\n\"\nassert solution(\"1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 5 2 10 1 1 2 5\") == \"YES\\nNO\\n\"\n\nprint(solution(\"1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n2\\n10000 5 2 10 1 1 2 5\"))\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n4 4 4 4 4\\n5\\n6 5 5 5 5 5\\n6\\n5 4 4 4 4 4\\n3\\n5 5 5 5 5\\n1\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"3\\n5\\n4 4 4 4 4\\n5\\n6 5 5 5 5 5\\n6\\n5 4 4 4 4 4\\n3\\n5 5 5 5 5\\n1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"3\\n5\\n1 1 1 1 1\\n5\\n4 4 4 4 4\\n5\\n6 5 5 5 5 5\\n6\\n5 4 4 4 4 4\\n3\\n5 5 5 5 5\\n1\\n1 1 1 1 1\") == \"YES\"\n\nassert solution(\"3\\n5\\n4 4 4 4 4\\n5\\n6 5 5 5 5 5\\n6\\n5 4 4 4 4 4\\n3\\n5 5 5 5 5\\n1\\n1 1 1 1 1\") == \"NO\"\n\nassert solution(\"3\\n5\\n4 4 4 4 4\\n5\\n6 5 5 5 5 5\\n6\\n5 4 4 4 4 4\\n3\\n5 5 5 5 5\\n1\\n1 1 1 1 1\") == \"YES\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\"\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\"\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n1\\n1') == '1'\nassert solution('2\\n1\\n2\\n1') == '2'\nassert solution('2\\n1\\n2\\n1\\n1\\n2\\n1\\n1') == '1'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 4\\n1 2 2\\n1 3 3\\n1 4 3\") == \"3\"\nassert solution(\"5 10 5\\n2 3 1\\n2 4 2\\n3 4 3\\n1 2 1\\n3 4 4\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\") == \"9\"\n\n\"\"\"\nfrom collections import defaultdict\nimport sys\nimport heapq\nsys.setrecursionlimit(100000)\n\nclass Edge:\n    def __init__(self, to, weight):\n        self.to = to\n        self.weight = weight\n\nclass Graph:\n    def __init__(self, num_vertices):\n        self.num_vertices = num_vertices\n        self.graph = defaultdict(set)\n\n    def add_edge(self, from_, to, weight):\n        self.graph[from_].add(Edge(to, weight))\n\n    def print_graph(self):\n        for src, neighbors in self.graph.items():\n            for neighbor in neighbors:\n                print(src, neighbor.to, neighbor.weight)\n    \n    def get_neighbors(self, src):\n        neighbors = []\n        for edge in self.graph[src]:\n            neighbors.append(edge.to)\n        return neighbors\n\n\nclass Dijkstra:\n    def __init__(self, graph, src, dst=None):\n        self.graph = graph\n        self.src = src\n        self.dst = dst\n        self.queue = [(0, self.src)]\n        self.processed = {}\n        self.shortest_path_to = {}\n        self.current_shortest_distance = {}\n        self.paths = []\n\n    def process(self):\n        while self.queue:\n            current_distance, current_vertex = heapq.heappop(self.queue)\n            if current_vertex in self.processed:\n                continue\n            self.processed[current_vertex] = True\n            if current_vertex == self.dst:\n                break\n            for neighbor in self.graph.get_neighbors(current_vertex):\n                neighbor_distance = current_distance + self.graph[current_vertex][neighbor].weight\n                if neighbor not in self.current_shortest_distance or neighbor_distance < self.current_shortest_distance[neighbor]:\n                    self.current_shortest_distance[neighbor] = neighbor_distance\n                    heapq.heappush(self.queue, (neighbor_distance, neighbor))\n                    self.shortest_path_to[neighbor] = current_vertex\n        print(self.current_shortest_distance[self.dst])\n\n    def get_shortest_path_to(self, dst):\n        path = []\n        next_vertex = dst\n        while next_vertex!= self.src:\n            path.append(next_vertex)\n            next_vertex = self.shortest_path_to[next_vertex]\n        path.append(self.src)\n        return path[::-1]\n\n    def get_shortest_paths(self):\n        while self.queue:\n            current_distance, current_vertex = heapq.heappop(self.queue)\n            if current_vertex == self.dst:\n                break\n            self.processed[current_vertex] = True\n            for neighbor in self.graph.get_neighbors(current_vertex):\n                neighbor_distance = current_distance + self.graph[current_vertex][neighbor].weight\n                if neighbor not in self.current_shortest_distance or neighbor_distance < self.current_shortest_distance[neighbor]:\n                    self.current_shortest_distance[neighbor] = neighbor_distance\n                    heapq.heappush(self.queue, (neighbor_distance, neighbor))\n                    self.shortest_path_to[neighbor] = current_vertex\n        self.paths = list(self.shortest_path_to.items())\n        return self.paths\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 3\") == 2\n\"\"\"\n\nn, m, k = [int(el) for el in stdin.split()]\n\nimport heapq\n\nedges = []\nfor _ in range(m):\n    a, b, w = [int(el) for el in stdin.split()]\n    edges.append((w, a - 1, b - 1))\n\nedges.sort()\n\ndistances = [float('inf')] * n\nvisited = [False] * n\nheap = []\n\ndistances[0] = 0\nheapq.heappush(heap, (0, 0))\n\nwhile len(heap) > 0:\n    distance, source = heapq.heappop(heap)\n    if visited[source]:\n        continue\n    visited[source] = True\n    for (w, target) in edges:\n        if target!= source:\n            continue\n        if w + distance < distances[target]:\n            distances[target] = w + distance\n            heapq.heappush(heap, (w + distance, target))\n\nprint(distances[k - 1])\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9\\n1 2 1\\n1 3 1\\n3 4 2\\n4 1 4\") == \"2\"\nassert solution(\"5 10 10\\n2 5 2\\n3 4 2\\n4 2 2\\n5 3 4\\n3 4 2\\n4 3 2\\n4 5 6\\n5 1 7\\n5 1 2\\n4 1 8\\n2 5 4\\n3 4 6\\n5 3 2\\n1 5 2\\n2 3 4\\n5 1 8\\n3 1 3\\n1 5 3\\n4 2 3\\n5 2 3\\n1 4 4\\n4 3 5\\n1 5 1\\n3 1 1\\n2 4 2\\n5 4 4\\n1 1 3\\n1 4 1\\n5 4 5\\n2 3 4\\n3 1 2\\n3 2 2\\n1 4 2\\n4 2 6\\n5 1 3\\n2 4 4\\n1 1 4\\n5 3 1\\n5 2 1\\n3 2 5\\n5 4 2\\n5 5 5\\n4 2 3\") == \"7\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2\\n1 2 1\\n2 3 1') == '3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\nfrom heapq import heappop, heappush"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 16\\n1 3 3\\n3 1 2\\n2 4 2\\n3 4 4\\n3 3 1') == '1\\n'\nassert solution('5 10 9\\n1 2 1\\n1 3 1\\n2 4 1\\n3 4 1\\n3 5 9\\n4 5 9\\n5 1 3') == '9\\n'\nassert solution('5 8 1\\n1 3 3\\n3 1 1\\n2 4 1\\n3 4 1\\n3 5 1\\n4 5 1\\n5 1 3') == '3\\n'\nassert solution('7 10 3\\n1 2 1\\n1 3 1\\n2 3 1\\n3 4 1\\n3 5 1\\n4 5 1\\n5 1 3\\n6 7 1\\n7 1 6\\n6 1 4') == '4\\n'\nassert solution('8 10 3\\n1 2 1\\n1 3 1\\n2 3 1\\n3 4 1\\n3 5 1\\n4 5 1\\n5 1 3\\n6 7 1\\n7 1 6\\n6 1 4') == '3\\n'\n\"\"\"\n\n\nfrom collections import deque\n\nn, m, k = map(int, input().split())\ngraph = {}\nfor _ in range(m):\n    x, y, w = map(int, input().split())\n    if x not in graph:\n        graph[x] = {}\n    if y not in graph:\n        graph[y] = {}\n    graph[x][y] = w\n    graph[y][x] = w\n\nqueue = deque([(k, 0)])\nvisited = set()\nvisited.add(k)\nwhile queue:\n    cur_k, cur_dist = queue.popleft()\n    if cur_k == 1:\n        print(cur_dist)\n        break\n    for neighbor in graph[cur_k]:\n        if neighbor not in visited:\n            visited.add(neighbor)\n            queue.append((neighbor, cur_dist + graph[cur_k][neighbor]))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n4 6 7\\n5 3 7\\n5 6 3\\n6 2 2\\n1 3 1\\n4 1 7\\n5 7 4') == '7'\nassert solution('4 3 2\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n4 6 7\\n5 3 7\\n5 6 3\\n6 2 2\\n1 3 1\\n4 1 7\\n5 7 4') == '9'\nassert solution('5 6 10\\n3 5 1\\n5 3 2\\n5 4 1\\n6 5 9\\n4 3 7\\n6 1 2\\n5 1 2\\n6 2 4\\n4 2 6\\n3 4 5\\n2 4 4\\n3 4 2') == '5'\nassert solution('7 9 15\\n1 2 2\\n2 3 3\\n3 4 4\\n4 5 5\\n5 6 6\\n6 7 7\\n7 8 8\\n8 9 9\\n9 10 10\\n2 5 8\\n3 6 9\\n4 7 9\\n5 8 7\\n5 10 1\\n6 7 2\\n7 8 2\\n7 10 2\\n1 9 1\\n1 10 1\\n2 10 2\\n4 9 4\\n3 7 4\\n2 7 1') == '7'\n\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 1\") == \"3\"\nassert solution(\"4 10 2\") == \"5\"\nassert solution(\"4 10 3\") == \"6\"\nassert solution(\"4 10 4\") == \"7\"\nassert solution(\"4 10 5\") == \"8\"\n\"\"\"\nfrom math import inf\nfrom collections import defaultdict"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 2 1 1 1\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\n'''"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n1 1 3 4 2\"\n) == \"3 1\"\n\nassert solution(\n    \"6\\n1 5 12 13 2 15\"\n) == \"7 2\"\n\nassert solution(\n    \"10\\n1 2 5 129 185 581 1041 1909 1580 8150\"\n) == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\nprint(solution(\"5\\n1 1 3 4 2\"))\nprint(solution(\"6\\n1 5 12 13 2 15\"))\nprint(solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\"))\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\n\"\"\"\nimport numpy as np\n\nstdin = open(0).read()\nn = int(stdin.split('\\n')[0])\nnums = [int(i) for i in stdin.split('\\n')[1].split(' ')]\nprint(np.min(np.diff(np.sort(nums))))\nprint(n)\n\n\"\"\"\n\"\"\"\n\u041a\u0430\u043a\u043e\u0432\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0442\u0440\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445?\n\u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u043d\u0438\u0445.\n\n\n-----Input-----\n\n\u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430.\n\n-----Output-----\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u043d\u0438\u0445.\n\n\n-----Examples-----\nInput\n\n3\n9\n3\n8\n\nOutput\n\n13\n\n\n-----Note-----\n\n\u0414\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u043e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0437\u0430\u0434\u0430\u0447\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0442\u0440\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f max(a, b, c).\n\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 0.\n\nSample Input 1:\n\na\n\nSample Output 1:\n\n1\n\nSample Input 2:\n\naaaa\n\nSample Output 2:\n\n4\n\nSample Input 3:\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\na\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\naa\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n2\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\nSample Input 1:\n\na\n\nSample Output 1:\n\n1\n\nSample Input 2:\n\nabracadabra\n\nSample Output 2:\n\n13\n\nSample Input 3:\n\nw1re2f3edc5\n\nSample Output 3:\n\n16\n\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\"\"\"\n\nimport heapq\nimport sys\n\nMAX_KEY = sys.maxsize"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nprint(solution(\"5009\\n7\\n9876\\n10000\\n10\"))\n\n\n-----Solution-----\n\ncounter = 0\nwhile counter < int(stdin):\n    number = int(stdin)\n    if number < 10:\n        print(1)\n        print(number)\n        break\n    number_str = str(number)\n    number_set = set(number_str)\n    if number_str[0] in number_set:\n        number_set.remove(number_str[0])\n    if number_str[-1] in number_set:\n        number_set.remove(number_str[-1])\n    if number_set:\n        print(len(number_set) + 1)\n        print(number_str[0])\n        number_set.add(number_str[0])\n        for element in number_set:\n            print(element, end='')\n        print(number_str[-1])\n    else:\n        print(1)\n        print(number_str[0])\n        print(number_str[-1])\n    counter += 1\n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5009\") == \"2 5000 9\"\nassert solution(\"7\") == \"1\"\nassert solution(\"9876\") == \"1\"\nassert solution(\"10000\") == \"1\"\nassert solution(\"10\") == \"1\"\n\"\"\"\n\n\"\"\"\nheapq\n\"\"\"\nimport heapq"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\"\n\nassert solution(\"5\\n7\\n9\\n1\\n10\\n7\\n9\\n101\\n1000\\n1000\\n3\\n1\\n1\\n3\\n2\\n1\\n3\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n6\\n6\\n6\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n8\\n8\\n8\\n8\\n8\\n8\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1 10\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nprint(solution(\"5009\\n7\\n9876\\n10000\\n10\"))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5009) == \"2 5000 9\"\n\"\"\"\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    round_nums = []\n    for i in range(10):\n        if n - i >= 0:\n            round_nums.append(i)\n            n -= i\n    k = len(round_nums)\n    if n:\n        k += 1\n        round_nums.append(n)\n    print(k, *round_nums)\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n3\\n5\\n6\") == \"4\\n2\\n3\\n5\\n6\"\nassert solution(\"4\\n2\\n3\\n5\\n6\\n8\") == \"2\\n2\\n5\\n9\\n10\"\nassert solution(\"10\\n4\\n3\\n5\\n6\\n8\\n1\") == \"5\\n5\\n10\\n16\\n17\"\nassert solution(\"1\\n2\\n3\") == \"2\\n2\\n2\"\nassert solution(\"3\\n2\\n1\") == \"3\\n1\\n2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\") == \"1\"\nassert solution(\"1\\n1\") == \"2\"\nassert solution(\"8\\n9\") == \"1\"\nassert solution(\"10\\n12\") == \"1\"\nassert solution(\"11\\n14\") == \"3\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5009') == '2 5000 9'\nassert solution('7\\n9876') == '1'\nassert solution('10000\\n10') == '1'\nassert solution('10\\n10') == '1'\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 1') == '1 1 1 1', 'wrong result'\nassert solution('5\\n3 4 1 2') == '3 3 3', 'wrong result'\n\"\"\"\n\nq = int(stdin.readline())\n\nfor _ in range(q):\n    n = int(stdin.readline())\n    p = [int(item) for item in stdin.readline().split()]\n\n    book_set = set()\n    for i in range(n):\n        if p[i] == i + 1:\n            book_set.add(i + 1)\n    \n    result = [n - len(book_set)] * n\n    for i in range(n):\n        if result[i] > 0:\n            result[i] = 0\n            book_set.add(i + 1)\n        for j in range(i + 1, n):\n            if p[i] == p[j]:\n                result[i] += 1\n                result[j] -= 1\n\n    print(*result)\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1'\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n1 3\\n5\\n2 4') == '1 1 1 1 1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1 3 3 3'\nassert solution('3\\n2\\n1 2\\n2\\n2') == '1 1 2 1'\nassert solution('5\\n4\\n3 2 1\\n5\\n4 3 2 1\\n4') == '1 1 1 1 2 1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n4\\n1 2 3 4\\n5\\n2 3 4 1 5\\n') == '4 4 4 1 4'\nassert solution('4\\n4\\n2 3 1 4\\n5\\n3 4 1 2 5\\n') == '3 3 3 2 3'\nassert solution('4\\n4\\n3 4 1 2\\n5\\n1 2 4 3 5\\n') == '2 2 2 2'\nassert solution('4\\n4\\n2 3 1 4\\n5\\n3 4 1 2 5\\n') == '2 2 2 2'\nassert solution('4\\n4\\n2 3 1 4\\n5\\n3 4 1 2 5\\n') == '2 2 2 2'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\"\"\"\n\nn = int(stdin.readline())\nquery = stdin.readline()\n\nper = [int(i) for i in stdin.readline().split(' ')]\n\nans = [0] * n\n\nfor i in range(n):\n    ans[per[i]-1] += 1\n\nfor i in ans:\n    print(i)\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"3 3 3\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"1 2 2 2 2\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 3 1\") == \"1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"6\\n6\\n1 2 3 4 5 6\") == \"1 2 2 3 3\"\nassert solution(\"6\\n1\\n1\") == \"1 1\"\nassert solution(\"6\\n6\\n1 2 3 4 5 6\") == \"1 2 2 3 3\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 1 5\\n') == '1 1 1 1'\nassert solution('4\\n2 3 5\\n') == '3 3 3'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_str) == test_res\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 1 1 1\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 4 5\\n2 1 4\") == \"1\"\nassert solution(\"4\\n3 1 3 1\\n3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1''') == '3\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 2 1 3\\n4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n1 1 2\\n2\\n1 2 1') == '2\\n1\\n1'\nassert solution('3\\n5\\n1 2 3 4 5') == '1\\n1\\n1'\nassert solution('3\\n3\\n1 2 2') == '1\\n1\\n1'\nassert solution('3\\n2\\n1 1 1') == '1\\n1\\n1'"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()\nprint('Well done!')\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\\n\") == \"3\\n2\\n1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '2'\nassert solution('2\\n4') == '3'\nassert solution('3\\n3\\n1 2 2') == '2'\nassert solution('4\\n5') == '2'\n\nSolution:\nn = int(input())\nprices = list(map(int, input().split()))\nsum_prices = sum(prices)\nmin_price = 10**7\n\nfor i in range(n):\n    prices[i] += i * min_price\n    if sum(prices) >= sum_prices:\n        break\n    min_price += 1\n\nprint(min_price)\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5') == '3'\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import Counter, deque\nfrom itertools import combinations\nfrom typing import List, Deque, Tuple, Generator\n\n\nclass Solution:\n    def min_prices(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        for i in range(1, n):\n            dp[i] = prices[i] + min(dp[j] for j in range(i) if dp[j] > prices[i])\n        return min(dp)\n\n    def min_prices_2(self, prices: List[int], n: int) -> int:\n        dp = [prices[0]] + [0] * (n - 1)\n        for i in range(1, n):\n            dp[i] = min(dp[i - 1] + prices[i], prices[i])\n        return min(dp)\n\n    def min_prices_3(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        for i in range(1, n):\n            dp[i] = prices[i] + min(dp[j] for j in range(i) if dp[j] >= prices[i])\n        return min(dp)\n\n    def min_prices_4(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = prices[i] + min(dp[j] for j in range(i) if dp[j] >= prices[i])\n        return min(dp)\n\n    def min_prices_5(self, prices: List[int], n: int) -> int:\n        dp = [prices[0]] + [0] * (n - 1)\n        for i in range(1, n):\n            dp[i] = prices[i] + min(dp[j] for j in range(i) if dp[j] >= prices[i])\n        return min(dp)\n\n    def min_prices_6(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        for i in range(1, n):\n            dp[i] = prices[i] + min(dp[j] for j in range(i) if dp[j] > prices[i])\n        return min(dp)\n\n    def min_prices_7(self, prices: List[int], n: int) -> int:\n        dp = [prices[0]] + [0] * (n - 1)\n        for i in range(1, n):\n            dp[i] = prices[i] + min(dp[j] for j in range(i) if dp[j] >= prices[i])\n        return min(dp)\n\n    def min_prices_8(self, prices: List[int], n: int) -> int:\n        dp = [prices[0]] + [0] * (n - 1)\n        stack: List[Tuple[int, int]] = []\n        stack.append((0, prices[0]))\n        for i in range(1, n):\n            while stack and dp[stack[-1][0]] >= prices[i]:\n                j, p = stack.pop()\n                dp[i] = min(dp[i], dp[j] + prices[i])\n            stack.append((i, prices[i]))\n        return dp[-1]\n\n    def min_prices_9(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        stack: List[Tuple[int, int]] = []\n        stack.append((0, prices[0]))\n        for i in range(1, n):\n            while stack and dp[stack[-1][0]] >= prices[i]:\n                j, p = stack.pop()\n                dp[i] = min(dp[i], dp[j] + prices[i])\n            stack.append((i, prices[i]))\n        return dp[-1]\n\n    def min_prices_10(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        stack: Deque[Tuple[int, int]] = deque()\n        stack.append((0, prices[0]))\n        for i in range(1, n):\n            while stack and dp[stack[-1][0]] >= prices[i]:\n                j, p = stack.pop()\n                dp[i] = min(dp[i], dp[j] + prices[i])\n            stack.append((i, prices[i]))\n        return dp[-1]\n\n    def min_prices_11(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        stack: Deque[Tuple[int, int]] = deque()\n        stack.append((0, prices[0]))\n        for i in range(1, n):\n            while stack and dp[stack[-1][0]] >= prices[i]:\n                j, p = stack.pop()\n                dp[i] = min(dp[i], dp[j] + prices[i])\n            stack.append((i, prices[i]))\n        return dp[-1]\n\n    def min_prices_12(self, prices: List[int], n: int) -> int:\n        dp = [0] * n\n        dp[0] = prices[0]\n        stack: List[Tuple[int, int]] = []\n        stack.append((0, prices[0]))\n        for i in range(1, n):\n            while stack and dp[stack[-1][0]] >= prices[i]:\n                j, p = stack.pop()\n                dp[i] = min(dp[i], dp[j] + prices[i])\n            stack.append((i, prices[i]))\n        return dp[-1]"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"ex2.txt\", \"r\").read()) == open(\"res2.txt\", \"r\").read()"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4 2 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\n\n\n\"\"\"\n\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nstarts = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('10 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 0 0 1 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n10 4 10 15\n1 2\n4 3\n''') == '0 0 1 2'\n\nassert solution('''\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n''') == '5 4 0 5 3 3 9 0 2 5'\n\nassert solution('''\n4 2\n10 9 4 11\n1 2\n4 3\n''') == '0 0 1 2'\n\nassert solution('''\n5 3\n8 7 6 5\n1 2\n2 3\n3 4\n4 5\n''') == '2 3 1 0'\n\nassert solution('''\n10 4\n9 2 6 8 5 4 3 7 1\n3 4\n4 5\n''') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == 'YES\\nabb'\nassert solution(\"3 3\\n2 1 3\\n2 3 1\") == 'NO'\n\nprint(solution(\"3 2\\n1 2 3\\n1 3 2\"))\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'YES\\nabb'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == 'abb'\n\"\"\"\n\nfrom math import factorial\nfrom collections import Counter\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\ns = list(input())\n\ns = [s[i] for i in q]\n\ns_dict = Counter(s)\n\nans = \"\"\n\nfor char, freq in s_dict.items():\n    if freq > 1:\n        ans += char * (freq - 1)"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\nassert solution('3 2\\n2 3 1\\n3 1 2') == 'abb'\n\"\"\"\n\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\nassert solution(\"3 2\\n1 2 3\\n1 3 2\\n1 2 3\") == \"abc\"\nassert solution(\"3 2\\n1 2 3\\n1 3 2\\n1 2 3\\n1 3 2\") == \"abc\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'YES\\nabb'\n\"\"\"\n\nn, k = map(int, input().split())\np, q = [0] * n, [0] * n\nfor i in range(n):\n    p[i], q[i] = map(int, input().split())\n\ns = 'a'\n\nfor i in range(k):\n    for j in range(n):\n        if i < p[j] and i < q[j]:\n            s += chr(ord('a') + j)\n            break\n\nprint('YES' if s == ''.join(sorted(s)) else 'NO')\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'abb'\nassert solution('1 3 2') == 'abc'\nassert solution('1 3 2 4') == 'abcd'\n\nassert solution('2 1 3') == 'ab'\nassert solution('3 1 2') == 'abc'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n10 20 10') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\nassert solution('5\\n4 5 4 5 4') == '10'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\") == '43'\nassert solution(\"4\\n10 10 10 10\") == '64'\nassert solution(\"6\\n5 4 5 4 4 5\") == '69'\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 20 10 10 20\") == \"43\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\"\nassert solution(\"2\\n1 4\\n\") == \"3\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n20 10 20''') == '43'\n\nassert solution('''4\n10 10 10 10''') == '64'\n\nassert solution('''6\n5 4 5 4 4 5''') == '69'\n\nassert solution('''2\n1 4''') == '3'\n\n'''"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4') == '1 3 2'\nassert solution('1 1 1 1 1 1') == '1 5 2 4 3'\nassert solution('3 4 5 6') == '4 5 1 3 2 6'\nassert solution('2 1 2 3') == '2 1 3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == '3'\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 4 5 1 3') == '3'\n\n\"\"\"\n\nimport sys\nimport collections\nimport functools\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n4 2 5 1 3\n''') == '3'\n\nassert solution('''\n5\n4 2 5 3 1\n''') == '0'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '5'\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\nassert solution(\"4 1 5 2 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 5 1 3\") == '3'\nassert solution(\"5 4 2 1 3\") == '3'\nassert solution(\"6 4 2 1 3\") == '0'\nassert solution(\"5 5 4 3 2 1\") == '5'\nassert solution(\"4 5 4 5 4 5\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/54bfa7bfa9d9c1c1d000048/train/python\n\"\"\"\n\n\"\"\"\nfor i in range(1, N):\n    if i not in P:\n        P[i] = min(P.values())\n    elif P[i] > P[i-1]:\n        P[i] = P[i-1]\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\nassert solution('4\\n1 2 3 4') == '0'\n\n-----\nfrom itertools import combinations\nn = int(stdin.readline().strip())\nnums = list(map(int, stdin.readline().strip().split(' ')))\n\nres = 0\nfor comb in combinations(nums, 2):\n    if comb[0] <= comb[1]:\n        res += 1\nprint(res)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 5 1 3\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\nfrom collections import defaultdict\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3 3\\n') == '1'\nassert solution('5 3 3 3 3\\n') == '1'\nassert solution('5 3 3 3 3\\n') == '1'\nassert solution('5 3 3 3 3\\n') == '1'\nassert solution('4 3 3 3\\n') == '1'\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 3 3 3\") == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 3 3') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"4 2 1 4 2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\n\"\"\"\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == '1'\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 0\") == \"2\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 1\") == \"3\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\ninput_str = stdin.read()\nx_1, x_2, x_3, x_4, x_5 = input_str.split()\ninput_list = [x_1, x_2, x_3, x_4, x_5]\n\nfor i in range(len(input_list)):\n    if input_list[i] == '0':\n        print(i + 1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 1 0 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nH, W = map(int, input().split(' '))\n\nS_min = W*(H//3)\nS_max = (W*(H//3))*2\n\nprint(S_max - S_min)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n\nassert solution('10 10') == '10'\n\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n3 5 4 6\") == \"0\"\nassert solution(\"1 5\\n1 1\") == \"0\"\n\"\"\"\nimport sys\n\nfrom collections import namedtuple\n\n\nclass Point(namedtuple(\"Point\", [\"x\", \"y\"])):\n    def __add__(self, other: \"Point\") -> \"Point\":\n        return Point(self.x + other.x, self.y + other.y)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == '0'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n3 4') == '0'\nassert solution('3 5\\n1 2\\n2 3') == '2'\nassert solution('6 5\\n1 2\\n3 4\\n4 5') == '3'\nassert solution('8 3\\n3 2\\n4 2\\n5 1\\n6 1\\n7 1\\n8 1') == '1'\nassert solution('9 3\\n3 2\\n4 2\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1') == '0'\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\n\"\"\"\nHeuristic:\n\nIf one wants to minimize the area of the largest piece, then a good strategy is to\ndecide in the order in which to cut: the largest piece, the one that is the smallest,\nand the one that is the second smallest.\n\nThis leads to the formula S_{max} - S_{min} = min(max(H, W), W + H) - max(min(H, W), W + H).\n\nWe can further simplify the formula to\nS_{max} - S_{min} = min(max(H, W), W + H) - min(min(H, W), W + H)\n\nThis is a matter of subtraction.\n\nFor the second approach, we want to minimize the area of the smallest piece.\nThis leads to the formula S_{max} - S_{min} = (min(H, W) - W) + (min(H, W) - H).\n\nFor the third approach, we want to minimize the area of the largest piece.\nThis leads to the formula S_{max} - S_{min} = (H - W) + (H - W).\n\nFor the fourth approach, we want to minimize the area of the smallest piece.\nThis leads to the formula S_{max} - S_{min} = min(H, W) - min(H, W).\n\nFor the fifth approach, we want to minimize the area of the largest piece.\nThis leads to the formula S_{max} - S_{min} = (H - W) + (H - W).\n\nFor the sixth approach, we want to minimize the area of the smallest piece.\nThis leads to the formula S_{max} - S_{min} = min(H, W) - min(H, W).\n\nIn conclusion, one can find the minimum of the sum of the six expressions.\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n') == '0'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"2 10 10 10 10 1 1 1 1\") == \"No\"\nassert solution(\"2 10 10 10 10 1 1 1 1\") == \"Yes\"\n\"\"\"\n\nN = int(input())\n\na = [int(i) for i in input().split(' ')]\n\np = [0] * N\n\nfor i in range(N):\n    if a[i] % 4 == 0:\n        p[i] = a[i]\n    else:\n        p[i] = a[i] * a[i - 1]\n\np = list(set(p))\np.sort()"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2\\n') == 'Yes'\nassert solution('3\\n1 10 100\\n') == 'Yes'\nassert solution('4\\n1 10 100 20\\n') == 'No'\nassert solution('5\\n1 10 100 20 30\\n') == 'No'\nassert solution('6\\n1 10 100 20 30 40\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10 10\") == \"No\"\nassert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"10 10 10 10\") == \"Yes\"\nassert solution(\"1 10 100 10 10\") == \"No\"\nassert solution(\"5 5 5 5 5\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\nassert solution(\"2\\n10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\\\n1 10 100\") == \"Yes\"\nassert solution(\"4\\\\n1 2 3 4\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\nassert solution(\"3\\n2 4 5\\n\") == \"No\"\nassert solution(\"2\\n2 4\\n\") == \"Yes\"\nassert solution(\"2\\n1 2\\n\") == \"No\"\nassert solution(\"2\\n1 1\\n\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nN = int(lines[0].strip())\nnums = [int(i) for i in lines[1].strip().split()]\n\nnums.sort()\n\n\"\"\"\n    if i == 0:\n        prod = 1\n    elif i == N - 1:\n        prod = 1\n    else:\n        prod = nums[i - 1] * nums[i + 1]\n    if prod % 4!= 0:\n        print(\"No\")\n        return\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\nassert solution(\"4\\n1 2 3 4\") == \"No\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 100 10\\n') == 'Yes'\nassert solution('10 100 1\\n') == 'No'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n[Analysis]\nTime: O(N + M)\nSpace: O(N + M)\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == t\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('aac') == 'No'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('abcd') == 'No'\nassert solution('abdc') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('axcy') == 'No'\nassert solution('atcoder') == 'No'\n\"\"\"\n\ns, t = stdin.split('\\n')\n\nprint('Yes' if sorted(s) < sorted(t) else 'No')\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1\") == \"YES\"\nassert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 6 1\") == \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nfrom Helpers import helper as hlp\nfrom Helpers import test_class\nimport re\n\n\nclass Solution(test_class.test_class):\n\n    def setUp(self) -> None:\n        super().setUp()\n\n    def sum_equals_to_a_multiple_of_c(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        nums = [int(num) for num in numbers]\n        nums = sorted(nums)\n        nums = [num for num in nums if num % a == 0]\n\n        if not nums:\n            return False\n\n        for num in nums:\n            if sum([num for num in nums if num % num == 0]) >= c:\n                return True\n            if sum([num for num in nums if num % num == 0]) < c:\n                return False\n\n        return False\n\n    def sum_equals_to_a_multiple_of_c_v2(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        nums = [int(num) for num in numbers]\n        nums = sorted(nums)\n        nums = [num for num in nums if num % a == 0]\n        curr = nums.pop(0)\n\n        if not nums:\n            return False\n\n        while nums:\n            next_num = nums.pop(0)\n            curr = sum([next_num, curr])\n            if curr % b == 0 and sum([curr % num for num in nums]) >= c:\n                return True\n            if curr % b!= 0:\n                curr = curr % b\n            if curr % b == 0 and sum([curr % num for num in nums]) < c:\n                return False\n        return False\n\n    def sum_equals_to_a_multiple_of_c_v3(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        num_list = [int(num) for num in numbers]\n        num_list.sort()\n        num_list = [num for num in num_list if num % a == 0]\n        curr = num_list.pop(0)\n\n        if not num_list:\n            return False\n\n        while num_list:\n            next_num = num_list.pop(0)\n            curr = sum([next_num, curr])\n            if curr % b == 0 and sum([curr % num for num in num_list]) >= c:\n                return True\n            if curr % b!= 0:\n                curr = curr % b\n            if curr % b == 0 and sum([curr % num for num in num_list]) < c:\n                return False\n        return False\n\n    def sum_equals_to_a_multiple_of_c_v4(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        nums = [int(num) for num in numbers]\n        nums = sorted(nums)\n        nums = [num for num in nums if num % a == 0]\n        curr = nums.pop(0)\n\n        if not nums:\n            return False\n\n        while nums:\n            next_num = nums.pop(0)\n            curr = sum([next_num, curr])\n            if sum([curr % num for num in nums]) >= c:\n                return True\n            if sum([curr % num for num in nums]) < c:\n                return False\n        return False\n\n    def sum_equals_to_a_multiple_of_c_v5(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        nums = [int(num) for num in numbers]\n        nums = sorted(nums)\n        nums = [num for num in nums if num % a == 0]\n        curr = nums.pop(0)\n\n        if not nums:\n            return False\n\n        while nums:\n            next_num = nums.pop(0)\n            curr = sum([next_num, curr])\n            if curr % b == 0 and sum([curr % num for num in nums]) >= c:\n                return True\n            if curr % b!= 0:\n                curr = curr % b\n            if curr % b == 0 and sum([curr % num for num in nums]) < c:\n                return False\n        return False\n\n    def sum_equals_to_a_multiple_of_c_v6(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        nums = [int(num) for num in numbers]\n        nums = sorted(nums)\n        nums = [num for num in nums if num % a == 0]\n        curr = nums.pop(0)\n\n        if not nums:\n            return False\n\n        while nums:\n            next_num = nums.pop(0)\n            curr = sum([next_num, curr])\n            if sum([curr % num for num in nums]) >= c:\n                return True\n            if sum([curr % num for num in nums]) < c:\n                return False\n        return False\n\n    def sum_equals_to_a_multiple_of_c_v7(self, numbers: List[str], a: int, b: int, c: int) -> bool:\n        nums = [int(num) for num in numbers]\n        nums = sorted(nums)\n        nums = [num for num in nums if num % a == 0]\n        curr = nums.pop(0)\n\n        if not nums:\n            return False\n\n        while nums:\n            next_num = nums.pop(0)\n            curr = sum([next_num, curr])\n            if curr % b == 0 and sum([curr % num for num in nums]) >= c:\n                return True\n            if curr % b!= 0:\n                curr = curr % b\n            if curr % b == 0 and sum([curr % num for num in nums]) < c:\n                return False\n        return False\n\n    def test_1(self):\n        self.assertEqual(True, self.sum_equals_to_a_multiple_of_c([1, 1, 1], 1, 2, 2))\n        self.assertEqual(True, self.sum_equals_to_a_multiple_of_c([1, 1, 1], 1, 2, 3))\n\n    def test_2(self):\n        self.assertEqual(True, self.sum_equals_to_a_multiple_of_c([7, 7, 1], 7, 2, 5))\n\n    def test_3(self):\n        self.assertEqual(False, self.sum_equals_to_a_multiple_of_c([1, 2, 4], 2, 8, 11))\n\n    def test_4(self):\n        self."
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n'''\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('7 5 42\\n') == 'NO'\n\"\"\"\nfrom decimal import Decimal\n\nA, B, C = [int(x) for x in input().split()]\n\na = A / B\nb = B / A\nc = C / B\nd = Decimal(a).as_integer_ratio()\ne = Decimal(b).as_integer_ratio()\nf = Decimal(c).as_integer_ratio()\n\ng = max([d, e, f])"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 1\") == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_lines) == stdout_str\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2 2) == 1\n\n\"\"\"\n\nfrom sys import stdin\nimport math\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == stdout\n\n\n-----Test Input-----\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == '1'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"3 10\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == 1\nprint(\"Passed.\")"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '1'\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n'''\nimport math"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\"\n\nX, Y, Z = map(int, input().split())\ncount = 0\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin.readline()) == stdout\n'''\n\n\nimport numpy as np\nimport sys\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''13 3 1''') == '3'\nassert solution('''13 5 1''') == '2'\nassert solution('''13 7 1''') == '1'\nassert solution('''10 10 10''') == '0'\nassert solution('''15 1 2''') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n') == '1'\nassert solution('4 5 6\\n') == '1'\nassert solution('7 8 9\\n') == '2'\n\"\"\"\n\nimport sys\n\nwidth = int(sys.stdin.readline().rstrip())\nheight = int(sys.stdin.readline().rstrip())\nseat = int(sys.stdin.readline().rstrip())\n\nall = seat\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4''') == 2\n\n'''\nNotes:\n- No runtime test\n- Wrong answer\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for input like '3\n    - Wrong answer for"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\"\"\"\nimport sys\n\n_stdin = sys.stdin"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5''') == 2\n\nassert solution('''4\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5''') == 2\n\nassert solution('''2\n0 0\n0 2''') == 1\n\nassert solution('''2\n0 1\n0 2''') == 0\n\nassert solution('''1\n0 0\n1 1''') == 0"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\n\"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\n---output---\n2\n\n---sample---\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\n---input---\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\n---output---\n2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\nassert solution(\n'''\n3\n1 2\n2 3\n3 1\n4 2\n0 4\n5 5\n''') == '0'\n\nassert solution(\n'''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '1'\n\nassert solution(\n'''\n3\n1 0\n1 3\n1 2\n0 4\n2 3\n0 2\n4 4\n''') == '2'\n\nassert solution(\n'''\n4\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '0'"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('10 3') == '10'\nassert solution('3 10') == '3'\nassert solution('3 3') == '3'\nassert solution('3 10 10') == '7'\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 3\\n0 3\") == \"7\"\nassert solution(\"1 1\\n1 1\") == \"2\"\nassert solution(\"2 4\\n0 3\") == \"7\"\nassert solution(\"3 4\\n0 1\\n0 3\") == \"8\"\nassert solution(\"4 4\\n0 1\\n0 3\\n0 5\") == \"8\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 4\n0 3\n''') == '7'\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n0 3\\n\") == \"7\"\n\"\"\"\n\n\"\"\"\nThe following code will be run by the checker program.\nThe code simply parses the input and asserts that the solution is correct.\n\"\"\"\nimport sys\nimport subprocess"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n0 1\\n') == '3'\nassert solution('4 5\\n0 1\\n2 3\\n4 5\\n') == '9'\n\"\"\"\nfrom typing import List, Tuple, Union\n\nN, T = [int(s) for s in stdin.split('\\n')[:2]]\nt = [int(s) for s in stdin.split('\\n')[2:]]\n\nans = 0\n\nlast_switch_off = [0] * N\n\nfor i in range(N):\n    if t[i] < last_switch_off[i]:\n        ans += T - last_switch_off[i] + t[i]\n    else:\n        ans += t[i] - last_switch_off[i]\n    last_switch_off[i] = t[i]\n\nprint(ans)\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\\nL\\n3\\nL\\n\") == \"2\\n1\\n2\\n1\\n2\\n3\\n1\\n3\\n2\\n\"\nassert solution(\"3\\n2\\n1\\nL\\n3\\nL\\n\") == \"1\\n1\\n1\\n2\\n2\\n2\\n3\\n2\\n3\\n1\\n\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n\n\nclass MySolution:\n    def __init__(self, ):\n        self.s = []\n\n    def min_pop_index(self, stdin):\n        '''\n        Time complexity O(N)\n        Space complexity O(N)\n        '''\n        n = int(stdin.split()[0])\n        self.s = [0] * n\n        for i in range(1, n+1):\n            self.s[i-1] = i\n        self.s[n-1] = 1\n        for i in range(n, 0, -1):\n            if stdin.split()[1] == 'R':\n                self.s[self.s.index(i)] = self.s[self.s.index(i) - 1]\n            elif stdin.split()[1] == 'L':\n                self.s[self.s.index(i)] = self.s[self.s.index(i) - 1]\n            print(self.s.index(1))"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == expected\n\"\"\"\n\n\nfrom operator import itemgetter\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n? 2\\n1\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('1\\n2\\n3\\n? 2\\n1\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '0\\n2\\n1'\nassert solution('1\\n2\\n3\\n? 2\\n1\\nR 4\\n? 1\\nR 5\\n? 1\\n') == '1\\n2\\n2'\nassert solution('1\\n2\\n3\\n? 2\\n1\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('1\\n2\\n3\\n? 2\\n1\\nR 4\\n? 1\\nR 5\\n? 1\\n') == '2\\n2\\n2'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\") == \"1\\n1\\n2\"\nassert solution(\"\"\"\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\") == \"0\\n2\\n1\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nL 1\\nR 2\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL 4\\n?1\\nL 5\\n?1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n7200\\n\")\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('1\\n3') == '1'\nassert solution('1\\n4') == '1'\nassert solution('1\\n5') == '3'\nassert solution('1\\n6') == '2'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('6\\n5\\n4\\n2\\n1\\n1\\n1') == '2'\nassert solution('20\\n12\\n10\\n6\\n1') == '-1'\nassert solution('18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n18\\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n30\\n14\\n27\\n1000000000000000000') == '6\\n6\\n-1\\n6'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n3\\n1\\n4\\n5\\n3\\n7') == '1\\n1\\n0'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7\n1\n10\n25\n30\n14\n27\n1000000000000000000\n''') == '''\n0\n4\n6\n6\n-1\n6\n72\n'''\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"5\\n3\\n2\\n4\\n5\\n2\\n1\\n2\\n2\\n4\\n3\\n2\\n5\\n2\\n2\\n4\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n5\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3\\n3\\n6\\n3\\n3"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '3\\n2\\n4\\n1\\n2\\n3'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '0\\n0\\n0\\n0\\n0\\n0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('./tests/Y11R5P1/A.in', 'r').read()) == open('./tests/Y11R5P1/A.out', 'r').read()\n\nprint('Well done! Click \"Check\" to review your tests.')"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'NO'\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'NO'\nassert solution(\"4\\n11 11\\n1\\n100\") == 'YES'\nassert solution(\"4\\n11 11\\n1\\n100\") == 'YES'\nassert solution(\"4\\n11 11\\n1\\n100\") == 'YES'\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"1\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 3\") == 'YES'\nassert solution(\"4\\n1 1 2 1\") == 'NO'\nassert solution(\"2\\n11 11\") == 'YES'\nassert solution(\"1\\n100\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"1\\n3\\n1 1 2\\n3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n1 1 2\\n2\\n1 1 2\\n2\\n1 2 3\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n1\") == \"YES\"\nassert solution(\"1\\n100\\n100\\n100\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''3\n1 2 3\n1 2 3\n1 2 3\n4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n1 1 3\\n2\\n11 11\\n1\\n100\\n\") == \"YES\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\n\n\"\"\"\nimport math\n\nfrom collections import Counter"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\nassert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"4\"\n\nprint(solution(\"abacaba\"))\nprint(solution(\"bacabaa\"))\nprint(solution(\"zcabd\"))\nprint(solution(\"dbacz\"))\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"0\"\nassert solution(\"abacaba\") == \"4\"\nassert solution(\"abcdef\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\nassert solution(\"a\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"7\\n\"\n    \"abacaba\\n\"\n    \"bacabaa\"\n) == \"4\"\n\nassert solution(\n    \"5\\n\"\n    \"zcabd\\n\"\n    \"dbacz\"\n) == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s1) == s2\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 4\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\nassert solution(\"abcbba\") == 3\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8 -17 2999999997 0 1'\nassert solution(\"3 2 1\\n100 1 4\\n1 10 5\\n1 1 1000000000\\n1 1 999999999\") == '198 -17 2999999997 0 1'"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nprint(\"PASSED\")\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"0\\n0\\n0\\n1\"\nassert solution(\"4 3 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"1\\n1\\n1\\n0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n\nimport sys\nfrom typing import List, Optional, Any"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8 -17 2999999997 0 1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n2 4 5\\n1 10 5\\n10000000 1 1000000000\\n1 1 1000000000\") == \"198\\n-17\\n2999999997\\n0\\n1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 -17 2999999997 0 1\"\n\"\"\"\n\nimport math\nfrom unittest import TestCase\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 2 3\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"2\\n1 1 1\") == \"0\\n1\\n-17\\n2999999997\\n0\\n1\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n3\\n8\\n10\") == '1\\n1\\n1\\n1'\nassert solution(\"3\\n100\\n10000000\\n1\") == '1\\n100\\n10000000\\n1'\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n2\") == '3\\n1\\n1\\n1\\n1\\n1\\n2'\nassert solution(\"5\\n1\\n1\\n1\\n1\\n1\\n2\") == '3\\n1\\n1\\n1\\n1\\n1\\n2'\nassert solution(\"6\\n5\\n6\\n7\\n8\\n9\\n13\") == '5\\n5\\n5\\n5\\n5\\n5\\n9'\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\") == \"3\\n2\\n4\\n5\"\nassert solution(\"5\\n2\") == \"3\\n3\\n6\\n7\\n9\\n10\"\nassert solution(\"1\\n3\") == \"2\\n3\\n4\\n5\"\nassert solution(\"2\\n5\") == \"3\\n7\\n11\\n13\\n17\\n19\\n23\\n29\\n31\\n41\\n43\\n47\\n53\\n59\\n61\\n67\\n71\\n73\\n79\\n83\\n89\\n97\\n101\\n103\\n107\\n113\\n119\\n127\\n131\\n137\\n139\\n149\\n151\\n157\\n163\\n169\\n173\\n179\\n181\\n191\\n193\\n197\\n199\\n209\\n211\\n223\\n227\\n229\\n233\\n239\\n241\\n251\\n257\\n263\\n269\\n271\\n277\\n281\\n283\\n289\\n293\\n299\\n301\\n307\\n311\\n313\\n317\\n323\\n329\\n331\\n337\\n347\\n349\\n353\\n359\\n361\\n367\\n373\\n379\\n383\\n389\\n397\\n401\\n409\\n419\\n421\\n431\\n433\\n439\\n443\\n449\\n457\\n463\\n467\\n479\\n487\\n491\\n499\\n503\\n509\\n521\\n523\\n541\\n547\\n557\\n563\\n569\\n571\\n577\\n587\\n593\\n599\\n601\\n607\\n613\\n617\\n619\\n631\\n641\\n643\\n647\\n653\\n659\\n661\\n673\\n677\\n683\\n691\\n701\\n709\\n719\\n727\\n733\\n739\\n743\\n751\\n757\\n761\\n769\\n773\\n787\\n797\\n809\\n811\\n821\\n823\\n827\\n829\\n839\\n853\\n857\\n859\\n863\\n877\\n881\\n883\\n887\\n907\\n911\\n919\\n929\\n937\\n941\\n947\\n953\\n967\\n971\\n977\\n983\\n991\\n997\\n1009\\n1013\\n1019\\n1021\\n1031\\n1033\\n1039\\n1049\\n1051\\n1061\\n1063\\n1069\\n1087\\n1091\\n1093\\n1097\\n1103\\n1109\\n1111\\n1123\\n1129\\n1151\\n1153\\n1163\\n1171\\n1181\\n1187\\n1193\\n1201\\n1213\\n1217\\n1223\\n1229\\n1231\\n1237\\n1249\\n1259\\n1277\\n1279\\n1283\\n1289\\n1291\\n1297\\n1301\\n1303\\n1307\\n1319\\n1321\\n1327\\n1361\\n1367\\n1373\\n1381\\n1399\\n1409\\n1423\\n1427\\n1429\\n1433\\n1439\\n1447\\n1451\\n1453\\n1459\\n1471\\n1481\\n1483\\n1487\\n1489\\n1493\\n1499\\n1511\\n1523\\n1531\\n1543\\n1549\\n1553\\n1559\\n1567\\n1571\\n1579\\n1583\\n1597\\n1601\\n1607\\n1609\\n1613\\n1619\\n1621\\n1627\\n1637\\n1657\\n1663\\n1667\\n1669\\n1693\\n1697\\n1699\\n1709\\n1721\\n1723\\n1733\\n1741\\n1747\\n1753\\n1759\\n1777\\n1783\\n1787\\n1789\\n1801\\n1811\\n1823\\n1831\\n1847\\n1861\\n1867\\n1871\\n1873\\n1877\\n1879\\n1889\\n1891\\n1907\\n1913\\n1931\\n1933\\n1949\\n1951\\n1973\\n1979\\n1987\\n1993\\n1997\\n1999\\n2003\\n2011\\n2017\\n2027\\n2029\\n2039\\n2053\\n2063\\n2069\\n2081\\n2083\\n2087\\n2089\\n2099\\n2111\\n2113\\n2129\\n2131\\n2137\\n2141\\n2143\\n2153\\n2161\\n2179\\n2203\\n2207\\n2213\\n2221\\n2237\\n2243\\n2251\\n2267\\n2269\\n2273\\n2281\\n2287\\n2293\\n2297\\n2309\\n2311\\n2333\\n2339\\n2341\\n2347\\n2351\\n2357\\n2371\\n2377\\n2381\\n2383\\n2393\\n2419\\n2421\\n2427\\n2441\\n2447\\n2459\\n2467\\n2473\\n2477\\n2503\\n2507\\n2521\\n2531\\n2539\\n2543\\n2549\\n2551\\n2557\\n2579\\n2591\\n2593\\n2609\\n2617\\n2621\\n2633\\"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n30\\n12\\n19\\n20\\n') == '1\\n3\\n9\\n13\\n27\\n'\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043d\u0430\u0431\u043e\u0440 \u0447\u0438\u0441\u0435\u043b, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0445 \u0435\u0434\u0438\u043d\u0438\u0446. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0435\u0434\u0438\u043d\u0438\u0446, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n4\\n2') == '4'\nassert solution('2\\n7\\n2\\n7') == '7'\nassert solution('5\\n7\\n2\\n7') == '9'\nassert solution('6\\n7\\n2\\n7') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"4\\n2\") == \"8\"\nassert solution(\"6\\n1\") == \"3\"\nassert solution(\"6\\n2\") == \"9\"\nassert solution(\"6\\n3\") == \"10\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n33\\n27\\n12\\n\") == \"1\\n3\\n9\\n13\\n25\"\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n10000\") == \"9\\n10000\"\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n2\\n1\\n\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10 8 5 3') == '70'\nassert solution('12 8 8 7 2') == '77'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n''') == '''\n70\n77\n177177\n999999999000000000\n999999999\n55\n10\n'''\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\nprint(solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\"))\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70771771779999999997777777\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"177177\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"777777777777777777777\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"9999999997777777\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"9999999997777777\"\n\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 9999999999 000000000 000000000\"\n\na, b, x, y, n = map(int, stdin.split('\\n')[1].split())\ns = min(n // a, n // b, n // x, n // y)\na *= s\nb *= s\nx *= s\ny *= s\n\nprint(a * b if a * b < 10 ** 9 else 10 ** 9)\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"7077177177999999999000\\n999999999999999999999100\\n5510\\n10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"777777777777777777777\\n99999999999999999999\\n5510\\n10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"77777777777777777777\\n99999999999999999999\\n5510\\n10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"77777777777777777777\\n99999999999999999999\\n5510\\n10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"77777777777777777777\\n99999999999999999999\\n5510\\n10\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n2 3\\n') == '0'\nassert solution('10 10\\n2 4\\n7 4\\n9 3\\n') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '0'\nassert solution('9 3\\n10 10') == '2'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1 0 2 2 1\"\n\"\"\"\n\nimport math\nimport sys\nimport os"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n2 4\") == \"2\"\n\nassert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'b'\nassert solution('abab') == 'b'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n2 4\") == \"2\"\nassert solution(\"9 3\\n2 4\") == \"2\"\nassert solution(\"2 3\\n10 10\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"1 1000000000\\n1 1000000000\\n1 1000000000\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '2'\nassert solution('9 3\\n4 9') == '1'\nassert solution('9 3\\n4 9') == '0'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"22\") == 13\nassert solution(\"9999\") == 90\nassert solution(\"1\") == 1\nassert solution(\"777\") == 66\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))\n\n\n\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1111) == 1\nassert solution(22) == 2\nassert solution(1) == 1\nassert solution(111) == 3\nassert solution(1111) == 4\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\\n\") == \"13\\n90\\n1\\n66\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('22') == '13'\nassert solution('99') == '12'\nassert solution('777') == '13'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))\n\n-------------------------------------------\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == '13\\n90\\n1\\n66'\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"1\\n1\\n2\\n2\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('2\\n1\\n5\\n1 1 1 1 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\"\"\"\n\nfrom typing import List, Dict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        splitted = stdin.split(\"\\n\")\n        k = int(splitted[0])\n        d = {}\n        for i in range(1, k + 1):\n            n = int(splitted[i].split()[0])\n            seq = splitted[i].split()[1:]\n            d[n] = seq\n\n        for n, seq in d.items():\n            for i in range(n):\n                for j in range(i + 1, n):\n                    n1 = 0\n                    n2 = 0\n                    s1 = 0\n                    s2 = 0\n                    for s in seq:\n                        if i < len(s) and j < len(s):\n                            if i == j:\n                                n1 += 1\n                                n2 += 1\n                            s1 += int(s[i])\n                            s2 += int(s[j])\n                    if n1 == 1 and s1 == s2:\n                        return \"YES\\n\" + str(i + 1) + \" \" + str(j + 1)\n        return \"NO\"\n\n\nassert Solution().solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'NO'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1') == 'YES\\n2 2\\n4 1'\n\"\"\"\n\nfrom typing import List, Tuple, Set\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n''') == 'YES\\n2 6\\n1 2'\nassert solution('''\n4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n''') == 'YES\\n2 2\\n4 1'\nassert solution('''\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n''') == 'NO'\n\nassert solution('''\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n''') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nprint('The local tests are done. Try Solution().solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\")')"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\nassert solution(\"2 -3 -1 5 -4\") == 13\n\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def maxAbsoluteSum(self, A, K):\n        deq = collections.deque(A)\n        cur = 0\n        max_sum = 0\n        for _ in range(K):\n            cur += deq.popleft()\n            deq.append(cur)\n            max_sum = max(max_sum, abs(cur))\n        return max_sum\n        \ns = Solution()\nassert s.maxAbsoluteSum([4,2,3], 1) == 5\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n1\") == \"5\"\nassert solution(\"3 -1 0 2\\n3\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\\n2\") == \"13\"\nassert solution(\"2 -3 -1 5 -4\\n2\\n2\\n2\\n2\") == \"22\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[4,2,3]\\n1\") == \"5\"\nassert solution(\"[3,-1,0,2]\\n3\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == \"13\"\n\"\"\"\n\nimport numpy as np\nimport pdb\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        A = list(np.array(A) * -1)\n        A.sort()\n        A.reverse()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n\n        return sum(A)\n\n\nsol = Solution()\nprint(sol.largestSumAfterKNegations(A=\n                                    [4, 2, 3],\n                                    K=1))\nprint(sol.largestSumAfterKNegations(A=\n                                    [3, -1, 0, 2],\n                                    K=3))\nprint(sol.largestSumAfterKNegations(A=\n                                    [2, -3, -1, 5, -4],\n                                    K=2))\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4,2,3') == 5\nassert solution('3,-1,0,2') == 6\nassert solution('2,-3,-1,5,-4') == 13\n\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[4,2,3]\") == \"5\"\nassert solution(\"[3,-1,0,2]\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\") == \"13\"\n\nimport codewars_test as test\ntest.assert_equals(solution(\"[4,2,3]\"), \"5\")\ntest.assert_equals(solution(\"[3,-1,0,2]\"), \"6\")\ntest."
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 -3 -1 5 -4') == 6\nassert solution('3 -1 0 2') == 6\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(    [4, 2, 3], 1) == 5\nassert solution(    [3, -1, 0, 2], 3) == 6\nassert solution(    [2, -3, -1, 5, -4], 2) == 13\n\nimport unittest\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\") == \"5\"\nassert solution(\"3 -1 0 2\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\") == \"13\"\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        print(A)\n        if K % 2 == 0:\n            return sum(A)\n        else:\n            return sum(A[0:-K])\n\n\n\"\"\"\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        n = len(A)\n        if K >= n:\n            return sum(A)\n        elif K == 0:\n            return sum(A)\n        else:\n            for i in range(K):\n                if A[i] >= 0:\n                    A[i] = -A[i]\n                    K -= 1\n                else:\n                    break\n            if K % 2 == 1:\n                A[-1] = -A[-1]\n            return sum(A)\n\n\"\"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\nassert solution('[0,0,0]') == True\nassert solution('[0,0,0,-0]') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\n\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        target = sum(A) / 3\n        if target % 1!= 0:\n            return False\n        target = int(target)\n        l, r = 0, len(A) - 1\n        s = 0\n        while l <= r:\n            s += A[l]\n            if s == target:\n                break\n            l += 1\n        while l <= r:\n            s += A[r]\n            if s == target * 2:\n                return True\n            r -= 1\n        return False\n\nassert Solution().canThreePartsEqualSum([0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]) == True\nassert Solution().canThreePartsEqualSum([0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1]) == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == \"true\""
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n'''\n\nfrom typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n        \n        s //= 3\n        \n        count = 0\n        cur_sum = 0\n        for a in A:\n            cur_sum += a\n            count += 1\n            if cur_sum == s:\n                cur_sum = 0\n                count = 0\n        return count >= 3"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"1\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[0,-2,0]\") == True\nassert solution(\"[-2,-2,2,-2,0]\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == True\nassert solution(\"0,2,1,-6,6,7,9,-1,2,0,1\") == False\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nbeat\\n:\\nvet\\nbeet\\nbed\\n:\\nvet\\nbet\\nbeet\") == \"beet and vet\"\n\nassert solution(\"2\\nab\\na\") == \"ab\"\nassert solution(\"3\\nabc\\ndef\\nab\") == \"abc and def\"\nassert solution(\"2\\nac\\na\") == \"ac\"\nassert solution(\"6\\naaa\\naaa\\naba\\naaa\\nab\") == \"aba and aaa\"\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"vet,beet\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\nbeat\\n: \\nbeat\\n\\n\\n\\n\\nvet\\n: \\nvet\\n\\n\\n\\n\\n\\nbet\\n: \\nbet\\n\\n\\n\\n\\n\\nbet') == 'bet vet'\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) =='vet'\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a:') == 'a'\nassert solution('a:b') == 'b'\nassert solution('a:b:') == ''\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n\"\"\") == \"beet vet\"\nassert solution(\"\"\"2\nbeet\nvet\n\"\"\") == \"beet vet\"\nassert solution(\"\"\"5\nbark\nbarker\nbarrel\nbarrel\nbarrel\n\"\"\") == \"bark barrel\"\nassert solution(\"\"\"4\na\nbb\nab\naa\n\"\"\") == \"bb aa aa ab ab\"\nassert solution(\"\"\"4\na\nbb\nab\naa\n\"\"\") == \"bb aa aa ab ab\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\njimmy\\nwas\\nhere\\n\") == \"was\"\nassert solution(\"3\\none\\ntwo\\nthree\\n\") == \"one\"\n\n'''"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nbeat\\n: \\nbeat\\nvet\\n: \\nvet\\nbeet\\n: \\nbeet\\nbed\\n: \\nbed\\nvet\\n: \\nvet\\nbet\\n: \\nbet\") == \"beet vet\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nbeat\\nvet\\nbeet\") == \"beet\\nvet\"\nassert solution(\"5\\nbeat\\nvet\\nbeet\\nbed\\nbet\") == \"beet\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == \"beet\\nvet\"\n'''"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8') == '8'\n\n---\nThe dynamic programming solution is trivial.\nThe main idea is to transform one number into another number by choosing either itself, or\ntransforming the number into a smaller number, which will be achieved by the sum of\nthe cost of changing the number to the left and the number to the right.\nThe cost of transforming the number into a smaller one is a square of the difference\nbetween the numbers.\nIf the cost of transforming the number to the left equals to the cost of transforming\nthe number to the right, we can choose to transform the left, otherwise the right.\nThe cost of transforming the number to the left equals to the cost of transforming\nthe number to the right if the number to the left is greater or equal to the number\nto the right.\nSo the cost of transforming the number to the left equals to the cost of transforming\nthe number to the right if the left number is greater or equal to the right number.\nOtherwise, the cost of transforming the number to the left equals to the cost of\ntransforming the number to the right plus the square of the difference between the\nleft and the right numbers.\nSince we can choose the left or the right for each number,\nwe can use a table to store the minimum cost from transforming the number into the\nleft or the right.\nThe minimum cost of transforming the number into the left is the minimum between the\ncost of transforming the number into the left and the cost of transforming the\nnumber into the right plus the square of the difference between the number to the\nleft and the right numbers.\nAnd the minimum cost of transforming the number into the right is the minimum\nbetween the cost of transforming the number into the left and the cost of\ntransforming the number into the right plus the square of the difference between\nthe number to the left and the right numbers.\nSo the cost of transforming the number into a smaller number equals to the minimum\ncost of transforming the number into the left or the right.\nThe minimum cost is initialized as the large number.\nAfter filling the table, we can get the minimum cost for each number by traversing\nthe table from right to left.\nSince each table cell corresponds to a different number,\nand the minimum cost of transforming the number into a smaller number equals to\nthe minimum cost of transforming the number into the left or the right,\nthe minimum cost of transforming the number into a smaller number equals to the\nminimum cost of transforming the number into the left or the right.\nThe final answer equals to the minimum cost."
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8') == '8'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4 8\\n\") == \"8\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\na = list(map(int, sys.stdin.readline().rstrip().split(\" \")))\n\ntotal = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        total += max(a[i] - a[j], 0) ** 2\n\nprint(total)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a1, a2,..., an) == expected\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 8') == '8'\n\nprint(solution(input()))"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8') == '8'\n\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n') == '8'\nprint(solution('4 8\\n'))\nprint(solution('4 8\\n'))\nassert solution('1 2 3\\n') == '0'\nassert solution('2 1 3\\n') == '3'\nassert solution('2 2 3\\n') == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split(' ')))\nsum_ = sum(abs(i - j) ** 2 for i in A for j in A if i!= j)\nprint(sum_)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 3 5\n''') == '9'\nassert solution('''3\n1 3 3\n''') == '0'\nassert solution('''2\n1 2\n''') == '1'\nassert solution('''2\n3 5\n''') == '13'\nassert solution('''3\n1 3 4\n''') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('1\\n5') == '6'\nassert solution('1\\n5\\n10') == '11'\nassert solution('1\\n5\\n10\\n15') == '16'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n\nX = int(input())\nA = int(input())\nB = int(input())\n\nleft = X - A - B\nprint(left)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234 150 100') == '84'\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\nassert solution(\"1234 150 100\") == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234 150 100') == '84'\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"150 100\") == \"84\"\n\"\"\"\n\nx = int(input())\na, b = map(int, input().split())\n\nsum = 0\nwhile b > 0:\n    sum += a\n    b -= 1\n    if b >= 0:\n        sum -= b\n\nprint(sum)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n3\\n10') == '1'\nassert solution('1000\\n200\\n300') == '999'\nassert solution('1234\\n150\\n100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"2 3\") == \"18\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"4 1\") == \"24\"\nassert solution(\"2 4\") == \"16\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\nassert solution('2 1') == '2'\nassert solution('2 2') == '4'\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 8\nassert solution(\"4 4\") == 64\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == 8\nprint(solution('1 1'))\n\"\"\"\nimport numpy as np\nimport time\nimport math"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"2 1\") == \"4\"\nassert solution(\"3 5\") == \"110\"\nassert solution(\"4 5\") == \"276\"\nassert solution(\"4 5\") == \"110\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations\n\nmod = 10**9+7\nn, m = map(int, input().split())"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 8\nassert solution(\"2 1\") == 2\n\"\"\"\n\nimport math\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"IMPOSSIBLE\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nnot_return = {str(i) for i in range(n)}\n\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    if str(a) in not_return and str(b) in not_return:\n        not_return.remove(str(a))\n        not_return.remove(str(b))"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == IMPOSSIBLE\n'''"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == 'POSSIBLE'\n\n'''\n    l1 = stdin.split('\\n')\n    l1 = l1[1:]\n    l1 = [i.split() for i in l1]\n    l1 = [[int(i[0]), int(i[1])] for i in l1]\n    n, m = map(int, l1[0])\n    l2 = l1[1:]\n    l2 = [i[0:2] for i in l2]\n    l3 = []\n    for i in l2:\n        l3.append((i[0], i[1]))\n    print(n, m)\n    print(l3)\n'''\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == 'POSSIBLE'\n\n'''\nfor (num_services, num_islands) in zip(stdin[::2], stdin[1::2]):\n    num_services = int(num_services)\n    num_islands = int(num_islands)\n'''\n\nassert solution('') == ''\nassert solution('1 2\\n2 3') == 'POSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\nassert solution(\"1 2\\n2 3\\n\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('3 2\\n1 3\\n2 3') == 'IMPOSSIBLE'\n\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n\n\"\"\"\n    def solution(stdin):\n        return \"\".join([stdin[idx] for idx in range(1, len(stdin), 2)])\n    return solution(stdin)\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"test passed\")"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\n\"\"\"\n\nstdin = input()\n\n\"\"\"\n\nprint(stdin)\n\na = stdin.split()\n\nprint(a)"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\nfrom typing import List, TextIO, Generator, Tuple\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n\nimport sys\n\ns1, s2, s3 = sys.stdin.read().split()"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nrng gorilla apple\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"\nrng ORNG gorilla apple\n\"\"\") == \"NO\"\n\nassert solution(\n\"\"\"\nrng ORNG gorr a\n\"\"\") == \"NO\"\n\nassert solution(\n\"\"\"\nrng ggorr a\n\"\"\") == \"NO\"\n\nassert solution(\n\"\"\"\nggorr a\n\"\"\") == \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"36 24\"), \"GREATER\")"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'LESS'\nassert solution('36\\n24') == 'GREATER'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nassert solution(\"1 1\") == \"EQUAL\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3624') == 'GREATER'\nassert solution('362431') == 'LESS'\nassert solution('1234567') == 'EQUAL'\n\nprint(solution(stdin.readline()))\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\n------Solution ------\n\"\"\"\na, b = map(int, stdin.split())\nprint(\"GREATER\" if a > b else \"LESS\" if a < b else \"EQUAL\")\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('36 24') == 'GREATER'\nassert solution('38 24') == 'LESS'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('36 24\\n') == 'GREATER'\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n------Hints------\n- Is it worth to count the number of blue cards?\n\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\nassert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nN, s_1, s_2, s_3 = [s.strip() for s in sys.stdin.readline().strip().split()]\ns_1, s_2, s_3 = int(s_1), int(s_2), int(s_3)\n\nM = [s.strip() for s in sys.stdin.readline().strip().split()]\nM = int(M[0])\n\ns = set()\n\nfor i in range(M):\n    s.add(sys.stdin.readline().strip())\n\ncost = 0\nfor i in range(M):\n    if s_1 == s_2 == s_3 == s[i]:\n        cost += 1\n\nprint(cost)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\napple\\ngrape\\napple\\n1\\ngrape') == '2'\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1') == '0'\n\"\"\"\n\nfrom typing import Dict, List\nfrom collections import Counter\nfrom decimal import Decimal"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\napple\norange\napple\n1\ngrape''') == '2'\n\"\"\"\n\nimport unittest\n\nN, *strings = input().split()\nM, *targets = input().split()"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\na\nb\n:\na\n1\nc\n:\nc\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"3\na\nb\n:\na\n1\nc\n:\nc\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"3\na\nb\n:\na\n1\nc\n:\nc\n1\n\"\"\") == \"1\"\n\n\"\"\"\nFrom https://www.slideshare.net/hirano-yui/topics-and-tools-for-coding-challenges-ex7\n\nIn this problem you have to find the longest word of the input string. The input string contains a number of words separated by a single space character.\n\nInput:\n3\na b\nc\nd\n\nOutput:\n3\n\nExplanation:\nThe longest word in the string is \"d\".\n\nInput:\n4\na\nb\nc\nd\n\nOutput:\n4\n\nExplanation:\nThe longest word in the string is \"d\".\n\nInput:\n5\na b c d e\n\nOutput:\n5\n\nExplanation:\nThe longest word in the string is \"e\".\n\nTime complexity: O(N)\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"G\") == \"C\"\nassert solution(\"C\") == \"G\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'A'\nassert solution('A') == 'T'\nassert solution('C') == 'G'\n\n\"\"\"\n\nfrom itertools import cycle\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == 14\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\nimport sys\nfrom collections import deque\n\nclass TreeNode:\n    def __init__(self, value):\n        self.val = value\n        self.left = None\n        self.right = None\n\n    def __str__(self):\n        return f'<{self.val}, {self.left}, {self.right}>'\n\n\nclass Solution:\n    def __init__(self):\n        self.paths = []\n    \n    def get_leaves(self, root):\n        if root.left is None and root.right is None:\n            return [root.val]\n        left_paths = self.get_leaves(root.left) if root.left is not None else []\n        right_paths = self.get_leaves(root.right) if root.right is not None else []\n        return left_paths + right_paths\n    \n    def get_paths(self, root, val):\n        if root is None:\n            return None\n        if root.val == val:\n            return [root.val]\n        if root.left is None and root.right is None:\n            return None\n        left_paths = self.get_paths(root.left, val) if root.left is not None else None\n        right_paths = self.get_paths(root.right, val) if root.right is not None else None\n        return left_paths if left_paths is not None else right_paths\n    \n    def get_leaves_paths(self, root):\n        if root is None:\n            return None\n        leaves_paths = self.get_leaves(root)\n        leaves_paths_list = []\n        for leaf in leaves_paths:\n            leaf_path = self.get_paths(root, leaf)\n            if leaf_path is None:\n                continue\n            leaves_paths_list.append(leaf_path)\n        return leaves_paths_list\n    \n    def add_path(self, root, leaf_path):\n        if root is None:\n            return None\n        if root.val == leaf_path[0]:\n            if leaf_path[-1] not in self.paths:\n                self.paths.append(leaf_path)\n        self.add_path(root.left, leaf_path)\n        self.add_path(root.right, leaf_path)\n    \n    def solution(self, stdin):\n        tree_nodes = [int(x) for x in stdin.split('\\n')]\n        root = TreeNode(tree_nodes[0])\n        for i in range(1, len(tree_nodes)):\n            self.add_path(root, tree_nodes[i])\n        return len(self.paths)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == 14\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == 14\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input_1) == answer_1\nassert solution(input_2) == answer_2\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nl = []\nfor i in range(N):\n    l.append([int(i) for i in sys.stdin.readline().rstrip().split(' ')])"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4') == '2'\nassert solution('4 4\\n4 4 4 4') == '0'\nassert solution('1 1\\n1') == '0'\nassert solution('2 1\\n1 1') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2\\n') == '1'\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '1'\nassert solution('7 6') == '2'\nassert solution('10 10') == '0'\n\"\"\"\n\nn, x = list(map(int, input().split()))\nbox = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    if box[i] > x:\n        count += box[i] // x\n        if box[i] % x > 0:\n            count += 1\nprint(count)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n2 2 2''') == '1'\nassert solution('''4 1\n2 2 1 1''') == '4'\nassert solution('''3 5\n1 1 1 1 1''') == '0'\nassert solution('''4 3\n1 1 1 1''') == '5'\n\n'''\nIntroduction\nIn this problem, you will be given an integer array consisting of integers ranging from 1 to N. You need to find out the number of elements which are not on the diagonal of a NxN matrix formed by arranging the elements of the array on the main diagonal. You must also count the number of elements on the diagonal.\n\nInput Format\nThe first line of the input consists of a single integer N, denoting the number of elements in the array.\nThe next line consists of N space-separated integers, each denoting the element of the array.\n\nOutput Format\nThe output consists of a single line containing the required answer.\n\nSample Input\n3\n1 1 2\n\nSample Output\n1\n\nExplanation\nThe array consists of the following elements:\n1 1 2\n\nThe elements 1 and 2 are not on the diagonal.\n1 is not on the diagonal.\n\n'''\n\n-----------------------------------------------------------------------------------------------\n\n\n\n'''\nHint:\n\n1. Try to see if the array is a bipartite graph.\n2. Try to see if it is a tree.\n3. Try to see if it is a DAG.\n\n'''\n\n-----------------------------------------------------------------------------------------------\n\n\n\n'''\nSolution:\n\nIf you try to see if the given array is bipartite, you will notice that all even numbers are on the left and all odd numbers on the right.\nNow, try to see if the array is a tree. Here are the possible cases:\n\nArray is empty: yes\nArray has only one element: yes\nArrays has only two elements: yes\nIf the array has more than two elements, it has to be a tree!\n\nIn order to find the number of non-diagonal elements, we just need to do the following:\n\nCount the number of elements in the array.\nSubtract the number of elements on the diagonal.\n\n'''\n\n-----------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n2 2 2\\n\") == \"1\"\nassert solution(\"4 4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"1 1\\n1 1\\n\") == \"0\"\nassert solution(\"5 5\\n1 1 1 1 1\\n\") == \"0\"\nassert solution(\"1 1\\n1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == 1\n\"\"\"\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nleft, right = 0, 0\nans = 0\nwhile right < n:\n    if a[right] > m:\n        ans += 1\n        a[left] = a[right]\n        left += 1\n    right += 1\n\nans += (n - left)\nprint(ans)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\nassert solution(\"1 0 1\\n2 1 2\\n3 1 3\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n3 1 3\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1''') == \"Yes\"\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == \"No\"\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == \"No\"\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == \"Yes\"\nassert solution('''2 1 2\n1 0 1\n1 0 1''') == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == 'No'\n\n---Problem Statement---\nSubaru has a 20 dollar gift card. She pays for the entire trip and gives the remainder of her money to her best friend. She wants to create a loop in her best friend's account to facilitate her use of her gift card.\n\nGiven the initial amount of money in her best friend's account, she wants to know how many numbers in the range [0, 99] could possibly be valid.\n\nFor example, if the account starts with $5, she could pay for $3 at the beginning of the trip. However, she does not want to pay $5, since this is a value she cannot use in her gift card. Therefore, the possible valid numbers for her best friend are [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99].\n\nIn this example, the sum of all the possible valid numbers is 10.\n\nDefine a function gift_card_loop(inital_amount) that takes an integer as input representing the amount in the account. The function should return the total number of valid numbers in the range [0, 99] for the card.\n\nYou must account for values of inital_amount that are negative or zero.\n\nSample Input\n10\n\nSample Output\n55"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n\nclass Solver:\n    def __init__(self, input_str):\n        self.mat = np.array(list(map(lambda x: list(map(int, x.split())), input_str.split('\\n')[:-1])))\n        self.correct_mat = np.array([[1, 2, 1], [2, 1, 2], [1, 1, 1]])\n\n    def solve(self):\n        size = self.mat.shape[0]\n        a_sum, b_sum, a_count, b_count = defaultdict(int), defaultdict(int), defaultdict(int), defaultdict(int)\n        for i in range(size):\n            for j in range(size):\n                a_sum[self.mat[i, j]] += 1\n                b_sum[self.mat[i, j]] += 1\n        for i in range(size):\n            for j in range(size):\n                if a_sum[self.mat[i, j]] == 1:\n                    a_count[self.mat[i, j]] += 1\n                if b_sum[self.mat[i, j]] == 1:\n                    b_count[self.mat[i, j]] += 1\n        for i in range(size):\n            for j in range(size):\n                if (a_count[self.mat[i, j]] == 1 and b_count[self.mat[i, j]] == 1) and \\\n                    (a_sum[self.mat[i, j]] == 2 or b_sum[self.mat[i, j]] == 2):\n                    return \"Yes\"\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\nassert solution('AR') == 'ARC'\nassert solution('RA') == 'ARC'\nassert solution('AB') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\nassert solution(\"ARC\") == \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 8 2'\n) == '3'\n\n-----Explanation-----\n'4 8 2'\n\nIf x = 2, then the values divisible by 2 are 4, 6 and 8.\nIf x = 3, then the values divisible by 3 are 0, 3, 6, 9 and so on.\nTherefore, the number of integers that are divisible by 2 or 3 in the range [4, 8] equals 3.\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = map(int, input().split())\n\ndivisible = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        divisible += 1\n\nprint(divisible)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 4\") == '1'\nassert solution(\"4 8 2\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(solution(\"4 8 2\"))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\n-------------\nimport re\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 2 3 4 8') == '2'\nassert solution('1 2 3 4 16') == '4'\nassert solution('1 2 3 4 32') == '1'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nD = int(input())\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nD = int(stdin.readline())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\n\"\"\"\n\nD = int(stdin.readline().rstrip())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nD = stdin.strip()\nd = int(D)\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n\nx = input().strip()"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"10\") == \"5\"\nassert solution(\"13\") == \"5\"\n\"\"\"\n\n\"\"\"\n----- Challenge 1 -----\n----- Number One -----\nYou are given a string S consisting of alphanumeric characters, spaces and symbols (, *.\nYour task is to find all the substrings of string S that contain 2 or more vowels.\nAlso, these substrings must lie in between 2 consonants and should contain vowels only.\n\n----- Example -----\nString S = \"GeeksforGeeks\"\n\nThe substrings containing vowels are \"GFG\", \"Gee\", \"eek\", \"eeks\", \"k\", \"for\", \"Geeks\", \"Geeksfor\", \"GeeksforG\", \"eeksforG\", \"GeeksforGeeks\", \"GeeksforGeeksfor\", \"GeeksforGeeksforG\", \"GeeksforGeeksforGeeks\"\nThe answer would be\n[\u201cGFG\u201d, \u201cGee\u201d, \u201ceek\u201d, \u201ceeks\u201d, \u201ck\u201d, \u201cfor\u201d, \u201cGeeks\u201d, \u201cGeeksfor\u201d, \u201cGeeksforG\u201d, \u201ceeksforG\u201d, \u201cGeeksforGeeks\u201d, \u201cGeeksforGeeksfor\u201d, \u201cGeeksforGeeksforG\u201d, \u201cGeeksforGeeksforGeeks\u201d]\n\n----- Example 2 -----\nString S = \"GFGfor\"\n\nThe substrings containing vowels are \"GFG\", \"Gee\", \"eek\", \"eeks\", \"k\", \"for\", \"Geeks\", \"Geeksfor\", \"GeeksforG\", \"eeksforG\", \"GeeksforGeeks\", \"GeeksforGeeksfor\", \"GeeksforGeeksforG\", \"GeeksforGeeksforGeeks\"\nThe answer would be\n[\u201cGFG\u201d, \u201cGee\u201d, \u201ceek\u201d, \u201ceeks\u201d, \u201ck\u201d, \u201cfor\u201d, \u201cGeeks\u201d, \u201cGeeksfor\u201d, \u201cGeeksforG\u201d, \u201ceeksforG\u201d, \u201cGeeksforGeeks\u201d, \u201cGeeksforGeeksfor\u201d, \u201cGeeksforGeeksforG\u201d, \u201cGeeksforGeeksforGeeks\u201d]\n\n----- Example 3 -----\nString S = \"GeeksQuiz\"\n\nThe substrings containing vowels are \"Geeks\", \"eek\", \"eks\", \"k\", \"Quiz\"\nThe answer would be\n[\u201cGeeks\u201d, \u201ceek\u201d, \u201ceks\u201d, \u201ck\u201d, \u201cQuiz\u201d]\n\n----- Example 4 -----\nString S = \"aBcDeF\"\n\nThe substrings containing vowels are \"a\", \"e\", \"i\", \"o\", \"u\" and \"BcDeF\"\nThe answer would be\n[\u201ca\u201d, \u201ce\u201d, \u201ci\u201d, \u201co\u201d, \u201cu\u201d, \u201cBcDeF\u201d]\n\n----- Input Format -----\nYou are given a string S.\n\n----- Constraints -----\n - 1 \u2264 |S| \u2264 100, where |S| represents the length of string S.\n - It is a lowercase alphabetical character, a space or a special symbol.\n\n----- Output Format -----\nYou are required to print the answer as explained in the example section.\n\n----- Sample Input -----\nquiz\n\n----- Sample Output -----\nexpected\n\n----- Sample Input -----\na\n\n----- Sample Output -----\nExpected\n\"\"\"\n\n\"\"\"\n----- Challenge 2 -----\n----- Number Two -----\nYou are given a string S.\nYour task is to print all possible combinations, up to size k, of the string in lexicographic sorted order.\n\n----- Example -----\nString S = BANANA\nk = 3\n\nAll possible combinations of size 3 of string S in lexicographic sorted order are BAN, ANB, BAN, ABN, NAB, and ANA.\nPrint the first one on a new line.\nThe order of combinations are user-defined but the order of letters in each combination is also user-defined.\nUse the following link to see how to generate all permutations of a string in lexicographic order.\n\nhttps://www.geeksforgeeks.org/print-all-combinations-of-given-string/\n\n----- Example 2 -----\nString S = ab\nk = 2\n\nAll possible combinations of size 2 of string S in lexicographic sorted order are ab, aB, Ab, AB, bA, and BA.\nPrint the first one on a new line.\nThe order of combinations are user-defined but the order of letters in each combination is also user-defined.\n\n----- Example 3 -----\nString S = abc\nk = 3\n\nAll possible combinations of size 3 of string S in lexicographic sorted order are ABC, ABc, AbC, aBC, AbC, ABC, ABc, AbC, ABC, abC, AbC, ABC\nPrint the first one on a new line.\nThe order of combinations are user-defined but the order of letters in each combination is also user-defined.\n\n----- Example 4 -----\nString S = abcd\nk = 4\n\nAll possible combinations of size 4 of string S in lexicographic sorted order are ABCD, ABC, ABcd, ABd, AbCd, AbC, AbD, AbD, ACd, AcD, AD, ADc, Acd, AbCd, AbD, ACD, ABCd, AbCd, ACd, ADc, ABD, AD, ADc, ADd, ACD, AbCd, AbD, ACD, ABD\nPrint the first one on a new line.\nThe order of combinations are user-defined but the order of letters in each combination is also user-defined.\n\n----- Input Format -----\nYou are given a string S and an integer value k.\n\n----- Constraints -----\n - 1 \u2264 |S| \u2264 10^5\n - 1 \u2264 k \u2264 |S|\n - It is a lowercase alphabetical character, a space or a special symbol.\n\n----- Output Format -----\nPrint all possible combinations of string S on a new line such that each combination is printed in lexicographic sorted order.\n\n----- Sample Input -----\nbanana\n4\n\n----- Sample Output -----\nba\nna\nan\nn\n\n----- Sample Input -----\nabcd\n3\n\n----- Sample Output -----\nab\nac\nad\nbc\nbd\ncd\n\"\"\"\n\n\"\"\"\n----- Challenge 3 -----\n----- Number Three -----\nYou are given a string S.\nYour task is to print all possible combinations, up to size k, of the string in lexicographic sorted order.\n\n----- Example -----\nString S = BANANA\nk = 3\n\nAll possible combinations of size 3 of string S in lexicographic sorted order are BAN, ANB, BAN, ABN, NAB, and ANA.\nPrint the first one on a new line.\nThe order of combinations are user-defined but the order of letters in each combination is also user-defined.\nUse the following link to see how to generate all permutations of a string in lexicographic order.\n\nhttps://www.geeksforgeeks.org/print-all-combinations-of-given-string/\n\n----- Example 2 -----\nString S = ab\nk = 2\n\nAll possible combinations of size 2 of string S in lexicographic sorted order are ab, aB, Ab, AB, bA, and BA.\nPrint the first one on a new line.\nThe order of combinations are user-defined but the order of letters in each combination is also user-defined.\n\n----- Example 3 -----\nString S = abc\nk = 3\n\nAll possible combinations of size 3 of string S in lexic"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"7\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"50\"\n\"\"\"\n\nn = int(input())\nmax_count = 0\nnumber = 0\nfor i in range(1, n + 1):\n    count = 0\n    while i % 2 == 0:\n        count += 1\n        i /= 2\n    if count > max_count:\n        max_count = count\n        number = i\nprint(int(number))\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n7') == '4'\n\"\"\"\n\nfrom math import ceil, log2, sqrt"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7''') == '4'\nassert solution('''8''') == '4'\nassert solution('''1''') == '1'\nassert solution('''2''') == '1'\nassert solution('''3''') == '0'\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '4'\n\"\"\"\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a=4, b=7, c=9, d=3) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 7 9 3''') == 'Yes'\nassert solution('''2 4 6 7''') == 'No'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\n---\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\nimport sys\nimport math\n\nfor line in sys.stdin:\n    a, b, c, d = line.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    if d >= math.sqrt(a ** 2 + b ** 2) and d >= math.sqrt(c ** 2 + a ** 2) and d >= math.sqrt(c ** 2 + b ** 2):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"\n\nstdin = input()\nprint('ABC'.upper())\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n-----Explanation-----\natcoder\nbeginner\ncontest\n\n(a + t + c + o + d + e + r + e + d + e + n + s + e + g)\n(a + t + c + o + d + e + r + e + d + e + n + s + e + g)\n\nAtcoder is acronym of A + T + C + O + D + E + R + E + D + E + N + S + E + G,\nwhile beginner is acronym of B + E + N + D + E + R + E + D + E + N + S + E + G.\nABC is acronym of A + B + C.\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"atcoder beginner contest\"\n) == \"ABC\"\nprint(solution(\n    \"atcoder beginner contest\"\n))\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nprint(\"AC\")\n\n---------------------\nimport itertools\n\nwords = stdin.split(' ')\n\nprint(''.join([w[0].upper() for w in words]))\n\nassert solution(\"atcoder beginner contest\") == \"ABC\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(i) for i in stdin.split()]\nt = False"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('100 100 100') == 'Yes'\nassert solution('50 100 120 200') == 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 120 100\") == \"No\"\nassert solution(\"50 120 100\") == \"No\"\n\"\"\"\n\nA, B, C = [int(i) for i in stdin.split()]\nprint(\"Yes\" if A + B >= C else \"No\")\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('10 20 30') == 'No'\nassert solution('50 500 400') == 'No'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nwhile True:\n    input_line = sys.stdin.readline().rstrip()\n    if input_line == \"\":\n        break\n\n    A, B, C = [int(x) for x in input_line.split()]\n    if A == B == C == 0:\n        break\n    if C > A and C > B:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'Yes'\nassert solution('1 1 2') == 'No'\nassert solution('1 2 3') == 'No'\nassert solution('2 2 3') == 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('2 3 5') == 'No'\nassert solution('30 70 130') == 'Yes'\nassert solution('5 10 100') == 'No'\nassert solution('30 70 100') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 120 100\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 8\n7 9 8 9''') == '5'\nassert solution('''4 8\n3 3 3 3''') == '0'\n'''\nYou are given two strings, A and B.\nString A represents a list of cities where different indices are separated by commas and NO commas appear in the same city. String B represents a list of cities where different indices are separated by commas and ALL the commas in B are placed BETWEEN cities.\n\nFor example, if A = \"0, 2, 4, 5\" and B = \"1, 3\" then cities 0, 1, 2, 3, 4, 5 are in A but cities 1 and 3 are in B.\n\nWrite a function:"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\") == \"5\"\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 5 6') == ''\nassert solution('1 2 3 4 5 7') == ''\n\n'''\n\nfrom collections import Counter\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4 8\\n7 9 8 9'\n) == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 8\\n9 8 9') == '5'\n\"\"\"\nimport re"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == 5\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\") == \"5\"\nassert solution(\"4 8\") == \"5\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 3\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('4\\n2 3 4 5') == '4 2 1 3'\n\n-----\n3.  The path sum of a binary tree is the sum of all node values\n    along the path from the root to the node. Given a binary tree,\n    return the path sum of the binary tree.\n    A binary tree is a structure composed of binary trees.\n    For example, the following binary tree is represented by a\n    list [1, [2, [4, None, None], [5, None, None]], [3, [6, None, None], [7, None, None]]].\n    The path sum of a binary tree is the sum of all nodes on a path\n    from the root to the leaf node.\n    1\n   / \\\n  2   3\n / \\   \\\n4   5   6\n   / \\   \\\n  7   8   9\n   The path sum for the above binary tree is 1 + 2 + 4 + 7 + 8 + 9 = 33.\n   You can assume the binary tree will not be empty.\n-----Input-----\nThe first line of input contains the number of test cases T.\nEach test case consists of two lines. The first line contains an integer N\ndenoting the number of nodes in the tree.\nThe second line contains N space-separated integers A1, A2,..., AN,\nwhere A{i} represents the value of the ith node in the tree.\n-----Output-----\nFor each test case, print a single line containing an integer that\nrepresents the path sum for the given tree.\n-----Sample Input-----\n2\n4\n1 2 3 4\n5\n1 2 3 4 5\n-----Sample Output-----\n34\n45\n\n-----\n4.  Given a sorted array, find the smallest positive integer that\n    does not exist in the array.\n    The array can contain duplicates and negative numbers as well.\n-----Input-----\n- The first line contains an integer T, number of test cases.\n- For each test case, there will be only one line of input, which\n  is the sorted array of size N.\n- Each array element is separated by a space.\n-----Output-----\n- For each test case, print the smallest positive integer that\n  does not exist in the array.\n-----Sample Input-----\n2\n-1 2 -3 3 4 5\n2\n3\n-1 -2 -3 -4\n4\n-1 -2 -3 -4 -5\n-----Sample Output-----\n1\n2\n\n-----\n5.  Given the array nums consisting of 2n elements in the form\n    [x1,x2,...,xn,y1,y2,...,yn].\n    Return the array in the form [x1,y1,x2,y2,...,xn,yn].\n-----Input-----\n- The first line contains an integer T, number of test cases.\n- The next T lines each contains an integer N followed by the array nums.\n-----Output-----\n- For each test case, print the array elements in the form\n  [x1,y1,x2,y2,...,xn,yn]\n-----Sample Input-----\n1\n4\n1 2 3 4\n5\n1 -2 3 -4\n2\n3 4\n1 2 3 4\n3\n1 -1 2 -3\n-----Sample Output-----\n2 -1 4 3\n1 -1 3 4\n\n-----\n6.  Given a binary string s (ASCII encoded),\n    remove consecutive duplicates from it and return the new string.\n-----Input-----\n- The first line of input contains an integer T,\n  the number of test cases.\n- For each test case, there is a single line of input containing s.\n-----Output-----\n- For each test case, print the new string.\n-----Sample Input-----\n2\n101101\n1100110011010\n-----Sample Output-----\n101\n110\n\n-----\n7.  You are given an array of positive integers nums and want to erase\n    a subarray containing unique elements. The score you get by erasing\n    the subarray is equal to the sum of its elements.\n    Return the maximum score you can get by erasing exactly one subarray.\n-----Input-----\n- The first line of input contains an integer T, the number of test cases.\n- For each test case, there is a single line of input containing the array nums.\n- Each array element is separated by a space.\n-----Output-----\n- For each test case, print the maximum score you can get by erasing exactly\n  one subarray.\n-----Sample Input-----\n2\n2 1 3 4 2 2 2 3 1 4\n2 2 1 3 4\n-----Sample Output-----\n10\n4\n\n-----\n8.  You are given a sorted unique integer array nums.\n    Return the smallest sorted list of ranges that cover all the\n    integers in the array exactly. That is, each element of nums is\n    covered by exactly one of the ranges, and there is no integer x\n    such that x is in one of the ranges but not in nums.\n    Each range [a,b] in the list should be output as:\n    \"a->b\" if a!= b\n    \"a\" if a == b\n-----Input-----\n- The first line of input contains an integer T, the number of test cases.\n- For each test case, there is a single line of input containing the array nums.\n- Each array element is separated by a space.\n-----Output-----\n- For each test case, print each range in the list on a new line.\n-----Sample Input-----\n2\n3 1 2 5 3\n5\n1 3 4 5 6\n-----Sample Output-----\n1->2\n3->5\n1->6\n\n-----\n9.  You are given an array of distinct integers arr.\n    Return the size of a maximum size turbulent subarray of arr.\n    A subarray is turbulent if the comparison sign flips between each adjacent pair\n    of elements in the subarray.\n-----Input-----\n- The first line of input contains an integer T, the number of test cases.\n- For each test case, there is a single line of input containing the array arr.\n- Each array element is separated by a space.\n-----Output-----\n- For each test case, print the maximum size turbulent subarray.\n-----Sample Input-----\n2\n1 2 3 4 5\n1 2 -3 4 5\n-----Sample Output-----\n5\n3\n\n-----\n10.  You are given a 2-D array of size m * n.\n    Rotate the array by 90 degrees (clockwise).\n-----Input-----\n- The first line of input contains an integer T, the number of test cases.\n- For each test case, there is a single line of input containing two integers m and n\n  separated by a space.\n- Each array element is separated by a space.\n-----Output-----\n- For each test case, there will be a single line of output containing the rotated array.\n-----Sample Input-----\n2\n2 2\n1 2\n2 2\n1\n2\n2\n-----Sample Output-----\n1 2\n2 1\n\n-----\n11.  Given a string s, find the length of the longest substring without repeating characters.\n-----Input-----\n- The first line of input contains an integer"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == expected_output\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4 2 1 3'\nassert solution('4 2 1 3') == '4 2 1 3'\nassert solution('8 5 2 9 3') == '3 9 8 5 2'\nassert solution('4 5 2 9 1') == '1 9 4 5 2'\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\n---"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"2 1 2\") == \"2 1 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"3 1 1 2 2 3 4\") == \"3 4 2 1 1\"\nassert solution(\"5 1 1 2 2 3 3 4\") == \"4 3 3 1 1 2\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 3\") == \"4 2 1 3\"\nassert solution(\"4 1 1 1 4\") == \"4 4 1 1\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"2 1\\n1 1\") == \"No\"\nassert solution(\"1 1\\n0 0\") == \"Yes\"\nassert solution(\"10 3\\n5 6 7 10 9\") == \"No\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\nassert solution('1 10\\n10 1') == 'No'"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\n-----\n10 3\n4 5 6\n\n-----\n1\n1\n1\n0\n\n-----\n10 3\n0 1 2\n\n-----\n2\n5\n3\n0\n\n-----\n10 3\n0 1 2\n\n-----\n10 3\n5 4 3\n\n-----\n3\n1\n3\n0\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n1 1 1\n0\n\n-----\n10 3\n5 4 3\n\n-----\n5 4 3\n1 1 1\n0\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n5 4 3\n1 1 1\n0\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n5 4 3\n1 1 1\n0\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3\n\n-----\n10 3\n5 4 4\n\n-----\n10 3\n5 4 3"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 6\") == \"Yes\"\nassert solution(\"10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nh, n = [int(s) for s in stdin.split()]\na = [int(s) for s in stdin.split()]"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == 6\nassert solution('ababab') == 2\nassert solution('aaaaa') == 5\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('abc') == 3\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\n\n-------\n8. Write a program to find the number of ways to make change for a given number of units using the fewest coins.\n\nFor example, if you have 4 types of coins, you can make change for 4 units with 2 coins:\n\n-----Constraints-----\n1 \\leq units \\leq 200\n\n-----Input-----\nEnter the number of types of coins:\n3\nEnter the number of units:\n12\n\n-----Output-----\nEnter the number of types of coins:\n3\nEnter the number of units:\n12\n\n-----Sample Input-----\n3\n12\n\n-----Sample Output-----\nEnter the number of types of coins:\n3\nEnter the number of units:\n12\n\n-----Sample Input-----\n2\n1\n\n-----Sample Output-----\nEnter the number of types of coins:\n2\nEnter the number of units:\n1\n\n-----Sample Input-----\n4\n50\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n50\n\n-----Sample Input-----\n4\n51\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n51\n\n-----Sample Input-----\n4\n100\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n100\n\n-----Sample Input-----\n4\n199\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n199\n\n-----Sample Input-----\n4\n1000\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n1000\n\n-----Sample Input-----\n4\n1000\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n1000\n\n-----Sample Input-----\n4\n5000\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n5000\n\n-----Sample Input-----\n4\n10000\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10000\n\n-----Sample Input-----\n4\n10001\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10001\n\n-----Sample Input-----\n4\n10002\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10002\n\n-----Sample Input-----\n4\n10005\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10005\n\n-----Sample Input-----\n4\n10006\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10006\n\n-----Sample Input-----\n4\n10010\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10010\n\n-----Sample Input-----\n4\n10011\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10011\n\n-----Sample Input-----\n4\n10100\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10100\n\n-----Sample Input-----\n4\n10101\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10101\n\n-----Sample Input-----\n4\n10110\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10110\n\n-----Sample Input-----\n4\n10111\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n10111\n\n-----Sample Input-----\n4\n11000\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11000\n\n-----Sample Input-----\n4\n11001\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11001\n\n-----Sample Input-----\n4\n11010\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11010\n\n-----Sample Input-----\n4\n11011\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11011\n\n-----Sample Input-----\n4\n11100\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11100\n\n-----Sample Input-----\n4\n11101\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11101\n\n-----Sample Input-----\n4\n11110\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11110\n\n-----Sample Input-----\n4\n11111\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n11111\n\n-----Sample Input-----\n4\n111110\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111110\n\n-----Sample Input-----\n4\n111111\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111111\n\n-----Sample Input-----\n4\n111112\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111112\n\n-----Sample Input-----\n4\n111113\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111113\n\n-----Sample Input-----\n4\n111114\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111114\n\n-----Sample Input-----\n4\n111115\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111115\n\n-----Sample Input-----\n4\n111116\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111116\n\n-----Sample Input-----\n4\n111117\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111117\n\n-----Sample Input-----\n4\n111118\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111118\n\n-----Sample Input-----\n4\n111119\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111119\n\n-----Sample Input-----\n4\n111120\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111120\n\n-----Sample Input-----\n4\n111121\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111121\n\n-----Sample Input-----\n4\n111122\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111122\n\n-----Sample Input-----\n4\n111123\n\n-----Sample Output-----\nEnter the number of types of coins:\n4\nEnter the number of units:\n111123\n\n-----Sample Input-----\n4\n111124\n\n-----Sample Output-----\nEnter the number"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 4\nassert solution('ababab') == 4\nassert solution('abc') == 3\nassert solution('aa') == 1\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abc') == 3\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 3\nassert solution('abcd') == 4\nassert solution('abcde') == 5\nassert solution('abcb') == 3\nassert solution('abcde') == 5\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"abaababaa\") == 5\nassert solution(\"abaababa\") == 6\nassert solution(\"aaaaa\") == 5\nassert solution(\"aaaaaa\") == 5\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abbbbbb') == 4\nassert solution('ababab') == 4\nassert solution('x') == 0\nassert solution('xx') == 2\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bca\") == \"Yes\"\nassert solution(\"aac\") == \"Yes\"\nassert solution(\"acb\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bdb\") == \"No\"\nassert solution(\"bcd\") == \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"aba\") == \"No\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"abd\") == \"No\"\nassert solution(\"acb\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\"\n\nimport unittest\nimport collections"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcc\") == \"No\"\nassert solution(\"aba\") == \"Yes\"\n\n---\n\nWrite a program to create a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The program should just print the values only.\n\n-----Constraints-----\n - |S|=20\n\n-----Input-----\nInput is taken from Standard Input in the following format:\n\n---"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('abca') == 'No'\nassert solution('abcc') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('a') == 'No'\nassert solution('ab') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('abc') == 'Yes'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\n\nfrom functools import reduce"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n4 2\") == '646'\n\nassert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == '646'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\nassert solution('1\\n1000000\\n1000000') == '757402647'\nassert solution('2\\n1 3\\n4 2') == '20'\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == '646'\n\nassert solution(\"1\\n1000000\\n1000000\") == '757402647'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\nassert solution(\"2\\n1 3\\n4 2\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\n\na, b = [int(x) for x in stdin.split('\\n')]\n\nprint(solution(f'{a}\\n{b}'))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == 646\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nf = [0] * n\n\nfor i in range(n):\n    f[i] = sum(a[:i] * b[:i])\n    for j in range(i + 1, n):\n        f[i] = min(f[i], f[i] + sum(a[i:j] * b[i:j]))\n\nprint(f[0])\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nassert 1 <= n <= 10 ** 5\nassert 1 <= m <= 10 ** 5\nassert 1 <= k <= n\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == '17'\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1''') == '7'\nassert solution('''9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\") == \"17\"\n\n\n-----Big O Notation-----\n\nThe solution will be O(k * n * m) = O(k * m * n).\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1''') == '7'\nassert solution('''9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''5 1 4\n2 5 7 4 6\n5 4\n''') == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2\\n', 'error'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0\\n', 'error'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1\\n', 'error'"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n\"\"\"\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.parent[x]!= x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xp, yp = self.find(x), self.find(y)\n        if xp == yp:\n            return False\n        if self.size[xp] < self.size[yp]:\n            xp, yp = yp, xp\n        self.parent[yp] = xp\n        self.size[xp] += self.size[yp]\n        return True\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\"\"\") == '2'\nassert solution(\"\"\"7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\"\"\") == '0'\nassert solution(\"\"\"7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\"\"\") == '1'\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import Dict\n\nfrom collections import defaultdict\n\nsys.setrecursionlimit(100010)\n\n\nclass UndirectedTree:\n    def __init__(self, num_vertices: int):\n        self.num_vertices = num_vertices\n        self.adj_list = defaultdict(list)\n\n    def add_edge(self, u: int, v: int):\n        self.adj_list[u].append(v)\n        self.adj_list[v].append(u)\n\n    def dfs(self, node: int, dist_map: Dict[int, int], curr_max: int):\n        if node not in dist_map:\n            dist_map[node] = 0\n\n        if dist_map[node] > curr_max:\n            dist_map[node] = curr_max\n        for adj_node in self.adj_list[node]:\n            self.dfs(adj_node, dist_map, curr_max)\n\n    def find_shortest_dist(self, start_node: int = 1):\n        dist_map = dict()\n        curr_max = sys.maxsize\n        self.dfs(start_node, dist_map, curr_max)\n        return min(dist_map.values())\n\n    def find_shortest_dist2(self, start_node: int = 1):\n        dist_map = dict()\n        curr_max = sys.maxsize\n        dist_map[start_node] = 0\n        for adj_node in self.adj_list[start_node]:\n            self.dfs(adj_node, dist_map, curr_max)\n        return min(dist_map.values())\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '1'\nprint(\"Passed\")\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '1'\n\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 3\\n2 4\") == \"2\"\nassert solution(\"1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n3 7\") == \"0\"\nassert solution(\"1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n3 7\\n7 1\") == \"1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"5\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1000000000\") == \"1\"\nassert solution(\"2 0\") == \"2\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"6\"\nassert solution(\"5 6\") == \"6\"\nassert solution(\"5 6\") == \"6\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"12\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == ''"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nprint('Passed')\n\n\"\"\"\n\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\n\nclass TestSolutions(unittest.TestCase):\n    def test_solution(self):\n        with patch('sys.stdin', StringIO('6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1')):\n            with patch('sys.stdout', StringIO()) as stdout:\n                solution()\n                self.assertEqual(stdout.getvalue(), '10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n')\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 7\n3 7\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '''10\n15\n1999999999\n113\n1000000001\n1\n'''\n\nassert solution('''3 7\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '''10\n15\n1999999999\n113\n1000000001\n1\n'''\n\nassert solution('''3 7\n3 7\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '''10\n15\n1999999999\n113\n1000000001\n1\n'''\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 10\\n2 2 2 1 1 2 1 2 2\") == \"1\\n2 2 2\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nl1 = []\ncount = 0\nl2 = []\nfor i in range(n):\n    if i not in l1:\n        l1.append(l[i])\n        l2.append(l[i])\n    else:\n        l2.append(l[i])\n        if l1.count(l[i])==1:\n            l1.remove(l[i])\n        else:\n            l1.remove(l[i])\n        count = count + 1\nprint(count)\nprint(' '.join(map(str, l2)))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2 2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"2 3\") == \"3 2\"\nassert solution(\"3 1\") == \"3 1\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_cases.input_1) == test_cases.output_1\nassert solution(test_cases.input_2) == test_cases.output_2\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\nassert solution('4 4\\n1 1 2 2 3') == '1\\n2 3'\nassert solution('1 1\\n1') == '1'\nassert solution('1 2\\n1') == '1'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\nassert solution('10 4\\n5 6 7 1 2 3 4 5') == '1 3 2'\nassert solution('10 4\\n5 6 8 1 2 3 4 5') == '1 3 2'\n\n---\n\n\nIf you want to try it yourself, here is a short solution in Python (using stdin.readlines() to receive all lines from the input):\n\nimport sys\n\nn, k = map(int, input().split())\nids = list(map(int, input().split()))\n\nl = []\nfor i in range(n):\n    l.append((ids[i], i))\n\nl.sort(key=lambda x: x[0])"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n\nn, k = map(int, input().split())\n\nl = list(map(int, input().split()))\n\nc = 0\n\nwhile c < k:\n    c += l.count(l[c])\n    l.pop(l.index(l[c]))\n\nprint(len(l))\nprint(' '.join(map(str, l)))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\"\"\"\n\n\"\"\"\nGiven the integer k, return the kth element of the infinite integer sequence [1, 2, 3,...].\n\nExample\n\nFor k = 3, the output should be\nkthTerm(3) = 3.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer k\n\nGuaranteed constraints:\n1 \u2264 k \u2264 20.\n\n[output] integer\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\"\"\") == \"263\"\nassert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\"\"\") == \"263\"\nassert solution(\"\"\"1\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\"\"\") == \"263\"\nassert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\"\"\") == \"263\"\nassert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\"\"\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == '263'\n\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"286\"\nassert solution(\"3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"261\"\nassert solution(\"2\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"256\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\n\"\"\"\n\nimport collections\nimport math\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"163\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\"\"\") == \"263\"\n\"\"\"\n)\n\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\n\"\"\"\n\nfrom typing import List\nimport string"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"c\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abacaba\") == \"bc\"\nassert solution(\"dfcbbcfeeedbaea\") == \"c\"\n\n\n\"\"\"\n\nfrom typing import List\nimport re"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"7\"\n\"\"\"\n\ns, q = input().strip(), int(input().strip())\nfor _ in range(q):\n    l, r = [int(x) for x in input().strip().split()]\n    print(len(set(s[l - 1: r])))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == '3'\n\nimport sys\nimport io\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"coco\"\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\ns = stdin\nq = int(stdin)\n\nstr = list(s)\ndict = {}\nfor x in str:\n    if x not in dict:\n        dict[x] = 1\n    else:\n        dict[x] += 1\n\nfor i in range(q):\n    qu = list(stdin)\n    type = int(stdin)\n    if type == 1:\n        s = stdin[3:]\n        r = stdin[1:3]\n        s = s.replace(r, '')\n        for key in dict:\n            if key in s:\n                dict[key] = dict[key] - 1\n        print(dict[r])\n    if type == 2:\n        l = int(stdin[1:])\n        r = int(stdin[3:])\n        print(len(set(s[l:r+1])))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"\") == \"\"\n\"\"\"\n\nimport sys\nfrom typing import Dict, List, Tuple\n\nSTRING: str = sys.stdin.readline().strip()\nQUERIES: int = int(sys.stdin.readline().strip())\nQUERIES_L: List[Tuple[int, int, str]] = []\nfor _ in range(QUERIES):\n    QUERIES_L.append(tuple(map(int, sys.stdin.readline().strip().split())))\n\nCHARS_DICT: Dict[int, int] = {i: 0 for i in range(1, 27)}\n\nfor i, c in enumerate(STRING):\n    CHARS_DICT[ord(c) - 97] = 1\n\nfor l, r, c in QUERIES_L:\n    CHARS_DICT[ord(c) - 97] += 1\n    if l > 1:\n        CHARS_DICT[ord(STRING[l - 1]) - 97] -= 1\n    if r < len(STRING):\n        CHARS_DICT[ord(STRING[r]) - 97] -= 1\n\nsys.stdout.write(str(len(CHARS_DICT.values())) + \"\\n\")\n\nfor key, val in sorted(CHARS_DICT.items()):\n    if val > 0:\n        sys.stdout.write(str(key) + \" \" + str(val) + \"\\n\")\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == 'cdfr'\nprint(\"Passed!\")\nassert solution(\"abacaba\") == 'bab'\nprint(\"Passed!\")\nassert solution(\"dfcbbcfeeedbaea\") == 'bae'\nprint(\"Passed!\")\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 'zabcdefghijklmnopqrstuvwxy'\nprint(\"Passed!\")\nassert solution(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('154873296') == '154873396'\nassert solution('386592714') == '336592714'\nassert solution('729641835') == '729645835'\nassert solution('863725149') == '863725145'\nassert solution('975314628') == '979314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n154873296\") == \"336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n154873396\"\nassert solution(\"729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n154873296\\n386592714\") == \"729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n154873396\\n336592714\"\nassert solution(\"863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n154873296\\n386592714\\n729641835\") == \"979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n154873396\\n336592714\\n863725145\"\nassert solution(\"975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n154873296\\n386592714\\n729641835\\n863725149\") == \"412958357\\n631457992\\n998236471\\n247789563\\n154873396\\n336592714\\n863725145\\n975314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nprint('The solution is correct!')\n\n-------------------------------------------------------\n\nYour task is to change at most $9$ elements of this field (i.e. choose some $1 \\le i, j \\le 9$ and change the number at the position $(i, j)$ to any other number in range $[1; 9]$) to make it anti-sudoku. The anti-sudoku is the $9 \\times 9$ field, in which:  Any number in this field is in range $[1; 9]$;  each row contains at least two equal elements;  each column contains at least two equal elements;  each $3 \\times 3$ block (you can read what is the block in the link above) contains at least two equal elements. \n\nIt is guaranteed that the answer exists.\n\nYou have to answer $t$ independent test cases.\n\nInput\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\nOutput\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\nassert solution('''4\n7\n8\n6\n1\n9\n2\n5\n3\n''') == '''4\n7\n8\n6\n1\n9\n2\n5\n3'''\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9'''\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\"\"\"\nimport numpy"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nprint(\"Test Completed\")\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1548732963865927147296418358637251499753146284612968357641296759\"\n) == \"154873396386592714732961296759\"\nassert solution(\"38659271436976291548732963865927147296418358637251499753146284612968357641296759\") == \"33659271436976291548732961296759\"\nassert solution(\"7296418358637251496314628461296835764129675979531427143697629154873296386592714\") == \"7296458358637251453693146284612968357641296759795314271436\"\nassert solution(\"8637251496314628461296835764129675979531427143697629154873296386592714\") == \"8637251453693146284612968357641296759795314271436\"\nassert solution(\"975314628461296835764129675979531427143697629154873296386592714\") == \"9793146284612968357641296759795314271436\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"input_2_2.txt\").read()) == open(\"output_2_2.txt\").read()\n\n\"\"\""
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 1\\n3 4\\n7 3\") == \"6\"\n\nassert solution(\"5 2\\n1 1\\n3 4\\n7 3\\n5 6\") == \"8\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 5\\n3 4\") == \"8\"\nassert solution(\"7 6\\n1 1 1 3 5 3 5 7\\n1 1 2 3 4 5 6 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"8\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\n\n\"\"\"\n\nfrom typing import List\n\nfrom helpers import irange\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"3 5\\n4 3\\n7 3\\n9 1\") == \"2\\n6\\n-1\""
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 8\\n1 2\\n3 3\\n4 5\\n1 5\\n2 6\\n7 8\\n1 8\\n3 5\\n7 3\\n1 8\\n3 9') == '8\\n6\\n-1\\n9\\n4\\n'\nassert solution('10 7\\n1 3\\n3 1\\n2 2\\n4 5\\n1 5\\n2 6\\n6 7\\n1 7\\n4 2\\n1 7\\n5 3\\n7 3\\n1 7\\n5 9') == '8\\n6\\n-1\\n9\\n4\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '''3\n6\n8\n-1\n9\n4'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n4 1\\n5 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 6 5 4\") == \"NO\"\nassert solution(\"7 6 5 3\") == \"NO\"\nassert solution(\"7 6 5 2\") == \"YES\"\nassert solution(\"7 6 5 1\") == \"YES\"\nassert solution(\"7 6 5 0\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES\\nYES\\nNO\\nNO\\nYES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 3 2 8\"\n) == \"YES\"\nassert solution(\n    \"100 101 102 105\"\n) == \"YES\"\nassert solution(\n    \"3 2 1 100000000\"\n) == \"NO\"\nassert solution(\n    \"10 20 15 14\"\n) == \"YES\"\nassert solution(\n    \"101 101 101 3\"\n) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().strip())\n\nfor _ in range(t):\n    a, b, c, n = map(int, sys.stdin.readline().strip().split())\n    print('YES' if (a + b + c) % n == 0 else 'NO')\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"5 3 2 8\") == 'YES'\nassert solution(\"100 101 102 105\") == 'YES'\nassert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"10 20 15 14\") == 'YES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\\n\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\nprint(solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\\n\"))\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\n\n\n'''"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5', 'wrong result'\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8', 'wrong result'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3', 'wrong result'\n\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3', 'wrong result'\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"4 10\\n1 2 3 4 5 6 7 8 9 10\") == \"8 12 9 10 6 8\"\nassert solution(\"10 10\\n1 5 7 8 9 10 10 10\") == \"3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n    \n    def __repr__(self):\n        return f'Node(value={self.value}, left={self.left}, right={self.right})'"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"4 6\\n1 2 3 4 5 6 7 8 9 10\") == \"6 6 10 6 10 6 10 6 10 6 6\"\n\n---"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2\n3 4\n5 6''') == '8 6 5'\n\nassert solution('''4\n1 2 3 4\n5 6 7 8''') == '3 4 6 5'\n\nassert solution('''4\n2 1 3 4\n5 6 7 8''') == '9 8 12 6 8'\n\nassert solution('''5\n2 1 5 3 5\n5 6 7 8 9''') == '9 8 12 6 8'\n\nassert solution('''5\n2 1 5 3 5\n5 6 7 8 9''') == '9 8 12 6 8'"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3\"\nassert solution(\"1 2 1 1 2 2 2 2 2\") == \"9\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == 'YES'\nassert solution('1\\n2') == 'NO'\nassert solution('1\\n2\\n3\\n3\\n3\\n4\\n4\\n5\\n5\\n5\\n6\\n7\\n7\\n8\\n8\\n8\\n8\\n9\\n9\\n9\\n9\\n9\\n10\\n10\\n11\\n11\\n12\\n12\\n12\\n13\\n13\\n13\\n13\\n13\\n13\\n13\\n14\\n14\\n15\\n15\\n15\\n16\\n16\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n17\\n18\\n18\\n18\\n18\\n19\\n19\\n19\\n19\\n20\\n20\\n21\\n21\\n21\\n22\\n22\\n22\\n22\\n23\\n23\\n23\\n23\\n23\\n23\\n23\\n23\\n23\\n23\\n23\\n24\\n24\\n24\\n24\\n24\\n24\\n24\\n24\\n24\\n24\\n24\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\n25\\"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"7 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"YES\\nYES\\nNO\"\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"9 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nNO\"\nassert solution(\"9 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 6 + 'NO' * 5\n\nassert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES' * 10\n\n\n-----Problem-----\n\nInvert the edges of the given tree to construct a new one.\n\n-----Solution-----"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 2\") == \"NO\"\nassert solution(\"4 3 1 2\") == \"YES\"\nassert solution(\"5 3 1 2\") == \"NO\"\nassert solution(\"10 3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\"\"\"\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = []\n\n    def addEdge(self, u, v, w):\n        self.graph.append([u, v, w])\n\n    def find(self, parent, i):\n        if parent[i] == i:\n            return i\n        return self.find(parent, parent[i])\n\n    def applyUnion(self, parent, rank, x, y):\n        xroot = self.find(parent, x)\n        yroot = self.find(parent, y)\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    def kruskal(self):\n        result = []\n        i, e = 0, 0\n        self.graph = sorted(self.graph, key=lambda item: item[2])\n        parent = []\n        rank = []\n        for node in range(self.V):\n            parent.append(node)\n            rank.append(0)\n        while e < self.V - 1:\n            u, v, w = self.graph[i]\n            i = i + 1\n            x = self.find(parent, u)\n            y = self.find(parent, v)\n            if x!= y:\n                e = e + 1\n                result.append([u, v, w])\n                self.applyUnion(parent, rank, x, y)\n        print(result)\n\n\"\"\"\nMy solution"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"5 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 5\\n3 2\\n3 4\\n4 2\\n4 5\\n5 2\\n5 3\\n5 4\\n\") == \"NO\\nNO\\nNO\\nNO\\nYES\"\nassert solution(\"9 9\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n5 7\\n5 8\\n5 9\\n5 10\\n6 7\\n6 8\\n6 9\\n6 10\\n7 8\\n7 9\\n7 10\\n8 9\\n8 10\\n9 10\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"2 1\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nprint(\"test 1 OK\")\n\nassert solution(\"5 8\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\") == \"NO\\nNO\"\nprint(\"test 2 OK\")\n\nassert solution(\"5 8\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\\n3 4\\n3 3\\n3 2\") == \"YES\\nYES\\nYES\\nYES\\nYES\"\nprint(\"test 3 OK\")\n\nassert solution(\"4 8\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\") == \"YES\\nYES\"\nprint(\"test 4 OK\")\n\nassert solution(\"4 8\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\\n3 4\\n3 3\\n3 2\\n3 1\") == \"NO\\nNO\"\nprint(\"test 5 OK\")"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\n\"\"\"\n\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict, deque\n\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n1 2 2 1 3\\n4\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES'\n\"\"\"\n\n\"\"\"\n\uc544\ub798\uc5d0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc2dc\uc624.\n\ncode\ub294 \uc81c\ucd9c\ud560 \ub54c \uc81c\ucd9c\ud55c \ucf54\ub4dc\uc774\ub2e4. \uc544\ub798\uc5d0 \uc788\ub294 \ucf54\ub4dc\ub294 \uc218\uc815\ud558\uc9c0 \ub9c8\uc138\uc694.\ncode\ub294 \uc81c\ucd9c\ud560 \ub54c \uc81c\ucd9c\ud55c \ucf54\ub4dc\uc774\ub2e4. \uc544\ub798\uc5d0 \uc788\ub294 \ucf54\ub4dc\ub294 \uc218\uc815\ud558\uc9c0 \ub9c8\uc138\uc694.\n\"\"\"\n\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) < n:\n        print('NO')\n    elif a[0]!= a[1]:\n        print('NO')\n    else:\n        print('YES')\n        print('1', end=' ')\n        for i in range(1, n - 1):\n            if a[i] == a[i + 1]:\n                print(i + 1, i + 2, end=' ')\n            else:\n                print(i + 1, end=' ')\n        print()\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('0') == 'NO'\nassert solution('5\\n2 2 1 3\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('5\\n2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'NO\\nYES\\n1 2\\n1 3\\n1 4\\nNO'\nassert solution('5\\n2 2 1 3\\n3\\n1 2 3\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\nassert solution(\"4\\n4\\n1 2 2 1 3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"NO\\nYES\\n1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n4\\n1 2 2 1 3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"NO\\nNO\\nNO\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"NO\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\\n1 2\\n1 3\\n1 4\"\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == 'YES\\n1 3\\n3 5\\n5 4'\n\"\"\"\n\nimport unittest\nimport sys\nsys.setrecursionlimit(10**5)\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 1\\n4\\n1 1000 101 1000\\n\") == \"YES\\n1 3\\n3 5\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n\") == \"NO\\nYES\\n1 2\\n1 3\\n1 4\"\nassert solution(\"1\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1111100\") == \"01111\"\nprint(solution(\"11101110\"))\nassert solution(\"11101110\") == \"0111111\"\nprint(solution(\"11101110\"))\nassert solution(\"11101110\") == \"0111111\"\nprint(solution(\"11101110\"))\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11011010\") == \"01111010\"\nassert solution(\"11011010\", k=1) == \"10111010\"\nassert solution(\"11011010\", k=2) == \"11011100\"\nassert solution(\"11011010\", k=3) == \"11101110\"\nassert solution(\"11011010\", k=5) == \"11101101\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11011010\") == \"01111010\"\n\"\"\"\nfrom time import time\nimport sys\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110110\") == \"0110110\"\nassert solution(\"1110111\") == \"0110111\"\nassert solution(\"11101100\") == \"01110100\"\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11101110\") == \"0111111\"\nassert solution(\"11101111\") == \"0111110\"\nassert solution(\"11101101\") == \"0111110\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11011010\") == \"0111110\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"0011111\"\nassert solution(\"11011010\") == \"011110\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11010') == '01010'\nassert solution('11101010') == '01111010'\nassert solution('11011010') == '01111010'\nassert solution('111011010') == '01111010'\nassert solution('1111100') == '0011111'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10011') == '10011'\nassert solution('11010') == '10010'\nassert solution('11011') == '11010'\nassert solution('11111') == '11110'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"0011111\"\n\"\"\"\n\nimport sys\nsys.stdin = open('input_data/input2')\n\nT = int(input())\nfor t in range(1, T+1):\n    n, k = list(map(int, input().split()))\n    s = input()\n    result = []\n    for i in range(k):\n        for j in range(1, n):\n            if s[j] > s[j-1]:\n                s = s[:j-1] + s[j] + s[j-1] + s[j+1:]\n                result.append(s)\n    result.sort()\n    print(f\"#{t} {result[0]}\")"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == '3\\n1 4 7'\n\nsolution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == '3\\n1 2 4'\n\nsolution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == '4\\n1 3 5 6'\n\nsolution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == '4\\n1 3 5 6'"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\n\n\"\"\"\n\u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445.\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438.\n\u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n1. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432.\n\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u044d\u0442\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `set` \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0438\u0437 $n$ \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443 \u043d\u0430\u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0432\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432.\n2. \u0417\u0430\u0442\u0435\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u044e\u0449\u0438\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043d\u0430\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b.\n\u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0444\u043b\u0430\u0433\u043e\u043c.\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0440\u0435\u0437\u043a\u0438 \u043a \u043d\u0435\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0443.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0444\u043b\u0430\u0433 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430.\n\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b \u0438\u043c\u0435\u044e\u0442 \u0441\u0432\u043e\u0439 `flag`.\n\u041e\u043d \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437 $n$ \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432.\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043d\u0438\u0445 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0435\u0441\u044f \u0432 \u043a\u0430\u043a\u043e\u043c-\u0442\u043e \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430.\n\u041e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\"\"\") == '3\n1 4 7'\n\nassert solution(\"\"\"5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n\"\"\") == '3\n1 2 4'\n\nassert solution(\"\"\"6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n\"\"\") == '4\n1 3 5 6'"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\n\"\"\"\nfrom itertools import combinations\n\nn, k = list(map(int, input().split()))\n\nsegments = []\nfor _ in range(n):\n    segments.append(list(map(int, input().split())))"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\n\nprint(\"Successfully solved\")"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1 2 3\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\nprint(\"Success\")\n\n-----Test-----\n\nInput:\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n\nOutput:\n4\n1 3 5 6\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport timeit\n\nimport numpy as np\n\nfrom scipy.sparse import csr_matrix\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n1 2 1 2 2\") == \"3\"\nassert solution(\"5\\n1 4 1 1 1 1\\n2 2 2 2 2 2\") == \"10\"\nassert solution(\"6\\n1 5 1 1 1 1\\n2 2 2 2 2 2\") == \"10\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n-3 0') == '0'\n\"\"\"\n\nn = int(stdin.readline())\npoints = [int(i) for i in stdin.readline().split()]\nspeed = [int(i) for i in stdin.readline().split()]\n\nsum_dist = 0\nfor i in range(n - 1):\n    sum_dist += min(abs(points[i] - points[i + 1]), abs(points[i + 1] - points[i]))\n\nprint(sum_dist)\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 4 3\\n2 2 2 3 4') == '19'\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '15'\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1 4 3 5\") == \"19\"\nassert solution(\"2 1 4 3 5\") == \"0\"\nassert solution(\"3 2 5 6\") == \"6\"\nassert solution(\"8 5 4 1 5 7 8 9 3 2\") == \"30\"\nassert solution(\"8 5 4 1 5 7 8 9 3 2\") == \"30\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\\n\") == 3\n\nassert solution(\"5\\n1 3 2 5 4\\n2 2 2 3 4\\n\") == 19\n\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 3 2\n-100 2 3\n''') == 3\n\nassert solution('''5\n2 1 4 3 5\n2 2 2 3 4\n''') == 19\n\nassert solution('''2\n2 1\n-3 0\n''') == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"2\\n2 1\\n-3 0\") == \"0\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom utils import *\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == '3'\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split()))\narray.sort()\n\ndistance = 0\n\nfor i in range(1, n):\n    distance += array[i] - array[i - 1]\n\nprint(distance)\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n') == '21 7 15 21 3 '\nassert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n') == '1 3 3 '\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\n\n\"\"\"\n\nimport math\nfrom typing import List\n\nfrom utils.decorators import timeit\nfrom utils.graph import Graph, Vertex\n\nfrom itertools import combinations\n\n\nclass Solution:\n    @timeit\n    def solution(self, input: str) -> str:\n        n, m = list(map(int, input.split()))\n        graph = Graph()\n        vertices = set()\n        for line in input.split(\"\\n\")[:-1]:\n            if len(line.strip()) == 0:\n                continue\n            vertex, neighbor, weight = list(map(int, line.split()))\n            if neighbor in vertices:\n                graph.add_edge(vertex, neighbor, weight)\n            else:\n                graph.add_vertex(vertex)\n                graph.add_edge(vertex, neighbor, weight)\n                vertices.add(neighbor)\n        graph.set_vertex_weights()\n        assert graph.vertex_count == n\n        assert graph.edge_count == len(vertices)\n        max_edge = max(graph.weights.values())\n        assert max_edge <= m\n        return \" \".join(map(str, [graph.query(q) for q in range(1, m + 1)]))\n\n    @timeit\n    def solution2(self, input: str) -> str:\n        n, m = list(map(int, input.split()))\n        graph = Graph()\n        for line in input.split(\"\\n\")[:-1]:\n            if len(line.strip()) == 0:\n                continue\n            vertex, neighbor, weight = list(map(int, line.split()))\n            if neighbor in graph.vertices:\n                graph.add_edge(vertex, neighbor, weight)\n            else:\n                graph.add_vertex(vertex)\n                graph.add_edge(vertex, neighbor, weight)\n        assert graph.vertex_count == n\n        "
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1 3 4 4\\n1\") == \"NO\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1 3 4 4\\n1\") == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 2\n4\n5 5 5 5''') == 'YES'\nassert solution('''1\n100''') == 'YES'\nassert solution('''2\n1 2 4\n1 3 4 4''') == 'NO'\nassert solution('''2\n1 2 4\n1 3 4 4''') == 'NO'\nassert solution('''1\n100''') == 'YES'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 4') == 'YES'\nassert solution('3\\n1 2 4\\n1 2 3') == 'NO'\nassert solution('1\\n100') == 'YES'\nassert solution('2\\n3\\n1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2 4\") == \"YES\"\nassert solution(\"3\\n1 2 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\") == \"YES\"\nassert solution(\"4\\n1 2 2\") == \"YES\"\nassert solution(\"3\\n1 2 4\") == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == \"NO\"\n\n\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_from_txt(self, txt='example.txt', **kwargs):\n        with open(os.path.join(os.path.dirname(__file__), 'data', txt)) as f:\n            input = f.read()\n        return self.assertIO(input, **kwargs)\n\n    def test_from_stdin(self, txt='example.txt', **kwargs):\n        return self.assertIO(txt, **kwargs)\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 4\\n\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n\") == \"NO\"\nassert solution(\"2\\n1 2\\n\") == \"YES\"\n\"\"\"\n\nimport sys\nimport math\nimport copy"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == 'NO'\nassert solution('3\\n1 2 4') == 'YES'\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('5\\n1 2 2') == 'YES'\nassert solution('5\\n1 2 2\\n1 2 4') == 'NO'\nassert solution('3\\n1 2 4') == 'NO'\n'''"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1010\\n1101\\n\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\\n\") == \"11\"\n\n'''"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010\\n1101') == '12'\nassert solution('1001\\n10101') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution('4 4\\n1010\\n1101'), '12')\n        self.assertEqual(solution('4 5\\n1001\\n10101'), '11')"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\\n110\\n10101\") == \"12\"\nassert solution(\"1001\\n10101\\n101010\") == \"11\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"2 4 1 5\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6\") == \"2 4 1 5\"\nassert solution(\"8\\n10\") == \"NO\"\nassert solution(\"2\\n4\") == \"YES\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"10\\n12\") == \"YES\\n2 4 6 8 1 3 5 11\"\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6\\n8\\n10\\n') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES'\nassert solution('3\\n5\\n7\\n9\\n') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES'\nassert solution('2\\n10\\n') == 'NO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\\nYES'\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"2\\n4\\n6\\n8\\n10\") == \"YES\"\nassert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n'''"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2') == 'NO'\nassert solution('4\\n6') == 'YES\\n2 4 6 8 1 3 5 11'\nassert solution('6\\n8') == 'YES\\n2 4 1 5'\nassert solution('10\\n2') == 'NO'\nassert solution('10\\n12') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"5\\n7\\n10\\n6\\n8\\n12\\n2\\n3\\n4\\n11\\n5\\n9\") == \"NO\"\nassert solution(\"5\\n7\\n10\\n6\\n8\\n12\\n2\\n3\\n4\\n11\\n5\\n9\\n13\\n14\\n15\") == \"NO\"\nassert solution(\"5\\n7\\n10\\n6\\n8\\n12\\n2\\n3\\n4\\n11\\n5\\n9\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\") == \"NO\"\nassert solution(\"5\\n7\\n10\\n6\\n8\\n12\\n2\\n3\\n4\\n11\\n5\\n9\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('1\\n') == 'NO'\nassert solution('2\\n') == 'NO'\nassert solution('3\\n') == 'NO'\nassert solution('4\\n') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n16\") == \"NO\"\nassert solution(\"10\\n20\") == \"YES\"\n\"\"\"\n\nfrom typing import Callable, Iterator\nimport sys\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"3\\n1 1 2\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n3') == '2'\n'''\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\\n\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '9\\n3 1 4 1 5 9 2 6 5'\n) == '5'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2 3') == '3'\nassert solution('5\\n1 1 1 1 1') == '1'\nassert solution('5\\n2 2 2 2 2') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    5\n    9\n    3 1 4 1 5 9 2 6 5\n    3\n    1 1 2\n    5\n    1 1 1 1 1\n    8\n    8 7 6 5 4 3 2 1\n    1\n    1\n    \"\"\") == \"\"\"\n    5\n    1\n    0\n    4\n    0\n    \"\"\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '5\\n1\\n0\\n4\\n0'\n\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    seen = set()\n    ans = 0\n    for i in range(n):\n        if i not in seen:\n            l = r = i\n            while l > 0 and a[l] - a[l - 1] <= 1:\n                l -= 1\n            while r < n - 1 and a[r + 1] - a[r] <= 1:\n                r += 1\n            if l <= r:\n                seen.update(range(l, r + 1))\n                ans += r - l + 1\n    print(ans)\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == '3'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == '4'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == '2'\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == '7'\n\n-----Problem-----\n\nFind the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non-intersecting or one of them lies inside the other one.\n\n-----Solution-----\n\n'''\n\nimport sys"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 2') == '2'\n'''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4\\n3\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3\\n4\\n2\\n7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\nassert solution(\"5\\n7\\n3\\n5\\n2\") == \"2\\n3\\n5\\n7\\n14\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    h, m = map(int, input().split())\n    if h == 23:\n        if m!= 59:\n            print(59 - m)\n        else:\n            print(0)\n    else:\n        if m == 0:\n            print(0)\n        elif m > 30:\n            print(60 - m + 60 * (h + 1))\n        else:\n            print(60 - m)\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_case_0) == solution.test_case_0_result\n\"\"\"\n\nimport sys\n\ntest_cases = int(sys.stdin.readline().strip())\nfor _ in range(test_cases):\n    h, m = map(int, sys.stdin.readline().strip().split())\n    hour = int(h)\n    minute = int(m)\n    if hour > 0 and minute > 0:\n        hour -= 1\n        minute += 60\n    elif hour == 0 and minute > 0:\n        minute -= 1\n    print(hour * 60 + minute)\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('10 20') == '20'\nassert solution('1 23') == '23'\nassert solution('11 59') == '59'\nassert solution('0 0') == '2359'\n\n-----\n\n\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u043d\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0441\u0442\u0443\u043f\u0438\u0442 \u043d\u043e\u0432\u044b\u0439 \u0433\u043e\u0434. \u0412\u0440\u0435\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u043e\u0433\u043e \u0433\u043e\u0434\u0430 \u0438 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u0433\u043e \u0433\u043e\u0434\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0441 \u043d\u043e\u0432\u044b\u043c \u0433\u043e\u0434\u043e\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u0435\u0441\u0435\u043d\u043d\u0438\u0439 \u0438 \u0447\u0442\u043e \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u043a\u043e\u0433\u0434\u0430-\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0448\u043b\u043e \u043a \u043f\u043e\u0434\u0430\u0440\u043a\u0443 \u043e\u0442 \u0434\u0443\u0448\u0438 \u0431\u043e\u0433\u0430 \u0441 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435\u043c - \u0432\u0435\u0441\u043d\u043e\u0439. \u0412\u0440\u0435\u043c\u0435\u043d\u0430 \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u0435\u0440\u043d\u0435\u0442\u0441\u044f \u0432\u0435\u0441\u043d\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0412\u0435\u0441\u043d\u043e\u0439 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u0442 \u043c\u0435\u0441\u044f\u0446, \u043a\u043e\u0433\u0434\u0430 \u0443\u0442\u0440\u043e\u043c \u0432 \u0441\u0430\u043c\u044b\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c \u0433\u043e\u0434\u0430 \u043e\u0442\u043c\u0435\u0447\u0430\u044e\u0442 \u0432\u043e\u0434\u043e\u043b\u0435\u0439 \u0432 \u0432\u0438\u0434\u0435 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438\u0437 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430. \u0412 \u0432\u0435\u0441\u0435\u043d\u043d\u0435\u043c \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u0435\u0441\u0435\u043d\u043d\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043b\u0435\u0442\u043d\u0435\u0439 \u043e\u0441\u0435\u043d\u044c \u0438 \u0435\u0449\u0435 \u0434\u0432\u0430 \u0434\u043d\u044f, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043a \u043a\u0440\u0430\u0441\u043d\u043e\u043c\u0443 \u0432\u0435\u0441\u0435\u043d\u043d\u0435\u043c\u0443 \u0432 \u043b\u0435\u0442\u043d\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043e\u0441\u0435\u043d\u044c.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u0432\u0438\u0434\u0435 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 3. \u0412\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 4. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445, \u043d\u043e \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 5. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0433\u0440\u0430\u044e\u0442 \u0440\u043e\u043b\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 6. \u0422\u0435\u0441\u0442\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u044d\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u0412\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u0433\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u043f\u043e\u0434 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0435\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432, \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 7. \u0412 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435 \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0412\u0441\u0435 \u0447\u0435\u0442\u044b\u0440\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURDLRUDR\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('LRUD') == 'LRUD'\nassert solution('LURDLDRU') == 'LRU'\nassert solution('LLDDRRUDDDLLU') == 'LRU'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"3 4\"\n\n\nassert solution(\"LRUD\") == \"1 2\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LRUD') == 'L1R2D'\nassert solution('LLDDRRR') == 'L1L2D2R2'\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LRUDUDRR') == '1 2'\nassert solution('LRUDUD') == '1 2'\nassert solution('LRDRUDDUUDR') == '1 2'\nassert solution('LLRUUDRRRUDRRDD') == '1 3'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"RUD\") == \"UD\"\nassert solution(\"UDDDU\") == \"UDDD\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LRUD\") == \"UD\"\nassert solution(\"LURD\") == \"UDR\"\nassert solution(\"RRUDU\") == \"UDR\"\nassert solution(\"LLDDR\") == \"UDR\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LLDDRRR\") == \"RR\"\nassert solution
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import deque\nfrom enum import Enum\nfrom typing import Deque\n\n\nclass Direction(Enum):\n    LEFT = 0\n    RIGHT = 1\n    UP = 2\n    DOWN = 3\n\n\nclass Solution:\n    def __init__(self, start: str, end: str) -> None:\n        self.start = start\n        self.end = end\n\n        self.queue: Deque[int] = deque([])\n        self.direction = Direction.UP\n        self.x_start = 0\n        self.y_start = 0\n        self.x_end = 0\n        self.y_end = 0\n\n        self.init_queue(start)\n        self.get_endpoint()\n\n    def init_queue(self, start: str) -> None:\n        for x in range(len(start)):\n            if start[x] == \"U\":\n                self.queue.append(Direction.UP)\n            elif start[x] == \"R\":\n                self.queue.append(Direction.RIGHT)\n            elif start[x] == \"D\":\n                self.queue.append(Direction.DOWN)\n            elif start[x] == \"L\":\n                self.queue.append(Direction.LEFT)\n\n    def get_endpoint(self) -> None:\n        while len(self.queue)!= 0:\n            direction = self.queue.pop()\n\n            if direction == Direction.UP:\n                self.x_start += 1\n                self.y_start -= 1\n            elif direction == Direction.DOWN:\n                self.x_start -= 1\n                self.y_start += 1\n            elif direction == Direction.RIGHT:\n                self.x_start += 1\n                self.y_start += 1\n            elif direction == Direction.LEFT:\n                self.x_start -= 1\n                self.y_start -= 1\n\n            if (self.x_start, self.y_start) == (self.x_end, self.y_end):\n                return\n\n        return\n\n    def solution(self) -> None:\n        answer: Deque[int] = deque([])\n        flag = False\n        for x in range(len(self.start)):\n            if self.start[x]!= self.end[x]:\n                flag = True\n\n        if not flag:\n            return \"1 \" + str(len(self.start)) + \" \" + str(len(self.start))\n\n        for x in range(len(self.start)):\n            if self.start[x]!= self.end[x]:\n                answer.append(x + 1)\n                answer.append(x + 1)\n                break\n\n        return \" \".join(list(map(str, answer)))\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LLDDR\") == \"3 4\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"i2/solutions/SDE_1_A/A.in\")\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3''') == '3'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3''') == '1'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3''') == '0'\nassert solution('''4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3''') == '2'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n4\\n4\\n4\\n4\\n') == '2'\nassert solution('3\\n2\\n1\\n5\\n4\\n') == '3'\nassert solution('3\\n2\\n1\\n5\\n4\\n') == '3'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 4 1 4 3 4\\n 5\\n 2 1 5 4 3') == '3\\n1\\n0\\n2'\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == '3\\n1\\n0\\n2'\nassert solution(\"4\\n8\\n1 2 1 2 1 3 1 4\\n5\\n3 1 4 1 2 2\") == '2\\n0\\n2'\nassert solution(\"4\\n6\\n1 1 2 2 1 2\\n4\\n1 2 2 1 2 1\") == '3\\n0\\n2'\n\n\"\"\"\n\nimport collections\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a_1 = collections.Counter(a)\n    n_1 = len(a_1)\n    if n_1 % 2 == 0:\n        x = n_1 // 2\n    else:\n        x = (n_1 // 2) + 1\n    print(x)\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 4 1 4 3 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\nassert solution(\"5\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"30\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('1\\n1337') == '0'\nprint('Test finished')\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == '121'\n\"\"\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == '121'\n\nassert solution(\"1\\n1337\") == '0'\nassert solution(\"4\\n1 2\\n2 3\\n1 4\") == '0'\nassert solution(\"6\\n1 2\\n2 3\\n1 4\\n5 6\\n5 7\\n5 8\") == '24'\n\nassert solution(\"5\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == '81'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\"\"\"\n\n\"\"\"\nSolution:\n\n1.\na = [1, 2, 3, 4, 5, 6]\n[1]\n[1, 1]\n[1, 1, 1]\n[1, 1, 1, 1]\n\n2.\na = [1, 2, 3, 4, 5, 6]\n[1, 1, 2]\n[1, 1, 2, 1]\n[1, 1, 2, 1, 1]\n[1, 1, 2, 1, 1, 1]\n\n3.\na = [1, 2, 3, 4, 5, 6]\n[1, 2, 3]\n[1, 2, 3, 2]\n[1, 2, 3, 2, 1]\n[1, 2, 3, 2, 1, 1]\n\n4.\na = [1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4]\n[1, 2, 3, 4, 2]\n[1, 2, 3, 4, 2, 1]\n[1, 2, 3, 4, 2, 1, 1]\n\n5.\na = [1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5, 2]\n[1, 2, 3, 4, 5, 2, 1]\n[1, 2, 3, 4, 5, 2, 1, 1]\n\"\"\"\n\n\"\"\"\nSolution:\n\n[1]\n[1, 1]\n[1, 1, 1]\n[1, 1, 1, 1]\n\n[1, 2]\n[1, 2, 1]\n[1, 2, 1, 1]\n[1, 2, 1, 1, 1]\n\n[1, 2, 3]\n[1, 2, 3, 2]\n[1, 2, 3, 2, 1]\n[1, 2, 3, 2, 1, 1]\n\n[1, 2, 3, 4]\n[1, 2, 3, 4, 2]\n[1, 2, 3, 4, 2, 1]\n[1, 2, 3, 4, 2, 1, 1]\n\n[1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5, 2]\n[1, 2, 3, 4, 5, 2, 1]\n[1, 2, 3, 4, 5, 2, 1, 1]\n\n[1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4, 5, 6, 2]\n[1, 2, 3, 4, 5, 6, 2, 1]\n[1, 2, 3, 4, 5, 6, 2, 1, 1]\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == 6\nassert solution(\"5 10\\n20 100 50 20 100500\\n8 8\") == 0\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == 8\nassert solution(\"5 10\\n20 100 50 20 100500\") == 227\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\n\n\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '6'\nassert solution('1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '18'\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2\") == \"5\"\nassert solution(\"1 1\\n1 2\") == \"0\"\nassert solution(\"2 1\\n1 1\") == \"2\"\nassert solution(\"1 2\\n2 1\") == \"4\"\nassert solution(\"1 2\\n2 2\") == \"2\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 2 1 3\") == \"6\"\nassert solution(\"2 5\\n1 2 1 3\") == \"6\"\nassert solution(\"2 5\\n4 4\") == \"0\"\nassert solution(\"2 5\\n7 7\") == \"7\"\nassert solution(\"3 2\\n1 2 1 3\") == \"1\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2\") == 2\n\"\"\"\n\nclass Solution:\n    def max_num_cookie(self, greed_factors: list[int], size_cookies: list[int]) -> int:\n        greed_factors.sort()\n        size_cookies.sort()\n\n        # greed_factors = [1, 2, 3]\n        # size_cookies = [1, 1, 2]\n\n        size_cookie_index = len(size_cookies) - 1\n        max_num_cookie = 0\n\n        for greed_factor_index, greed_factor in enumerate(greed_factors):\n            if greed_factor > size_cookies[size_cookie_index]:\n                continue\n            else:\n                max_num_cookie += 1\n                size_cookie_index -= 1\n\n        return max_num_cookie\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n2 1 3') == 2\nassert solution('2 3 1\\n3 1 2') == 1\nassert solution('2 3 1\\n3 2 1') == 2\nassert solution('2 3 1\\n3 3 2') == 2\nassert solution('2 3 1\\n3 4 2') == 2\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1, 2, 3\") == \"1\"\nassert solution(\"1, 2, 3\\n1, 1\") == \"2\"\nassert solution(\"1, 2, 3\\n1, 1\\n1, 1\") == \"3\"\nassert solution(\"1, 2, 3\\n1, 1\\n1, 1\\n1, 1\") == \"3\"\nassert solution(\"1, 2, 3\\n1, 1\\n1, 1\\n1, 1\\n1, 1\") == \"3\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''[1,2,3]\n[1,1]''') == '1'\nassert solution('''[1,2]\n[1,2,3]''') == '2'\nassert solution('''[1,2,3]\n[1,1]''') == '1'\nassert solution('''[1,2,3]\n[1,1,3]''') == '2'\nassert solution('''[1,2,3]\n[1,1,3]''') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1, 2, 3\\n1, 1') == '1'\nassert solution('1, 2\\n1, 2, 3') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1\\n1') == '1'\nassert solution('1\\n1\\n1') == '2'\nassert solution('1\\n1\\n2') == '1'\nassert solution('1\\n2\\n2') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '1'\nassert solution('2 1') == '1'\nassert solution('3 2') == '2'\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 10 1\") == \"1\"\nassert solution(\"10 10 10 1\") == \"2\"\nassert solution(\"5 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"2 1 2 3 2\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('3 2') == '2'\nassert solution('3 3') == '3'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n3\\n1\\n2\\n1\\n2\\n2\\n2\\n3\\n\") == \"2\\n\"\nassert solution(\"2\\n1\\n3\\n1\\n2\\n1\\n2\\n2\\n2\\n3\\n\") == \"2\\n\"\nassert solution(\"2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\") == \"2\\n\"\nassert solution(\"3\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n3\\n1\\n2\\n2\\n3\\n3\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n3\\n2\\n3\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\") == \"3\\n\"\nassert solution(\"5\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n3"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == [1,3,3,1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        # add [1] to first 2 elements\n        row = [1, 1]\n        for i in range(2, rowIndex + 1):\n            # save this for the next row\n            next_row = [1]\n            for j in range(len(row) - 1):\n                # add previous two numbers, with the current element in the middle\n                next_row.append(row[j] + row[j + 1])\n            # add 1 to the last element\n            next_row.append(1)\n            # overwrite row with the next row\n            row = next_row\n        return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == [1,3,3,1]"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\nassert solution(\"4\") == [1, 4, 6, 4, 1]\nassert solution(\"10\") == [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n\"\"\"\nimport math\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> list:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        ans = []\n        for i in range(0, rowIndex + 1):\n            ans.append(math.comb(rowIndex, i) * math.factorial(rowIndex - i) / (math.factorial(i) * math.factorial(rowIndex - i)))\n        return ans\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('4') == [1,4,6,4,1]\nassert solution('33') == [1,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1, 3, 3, 1]\nassert solution('7') == [1, 7, 21, 35, 35, 21, 7, 1]\nassert solution('10') == [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\n\n\n'''"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> [int]:\n        \"\"\"\n        [1, 4, 6, 4, 1]\n        [1, 5, 10, 10, 5, 1]\n        [1, 6, 15, 20, 15, 6, 1]\n        [1, 7, 21, 35, 35, 21, 7, 1]\n        [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        \"\"\"\n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        else:\n            i = 0\n            r = [[1]]\n            while i < rowIndex:\n                r.append([])\n                r[i+1] += [1]\n                for j in range(len(r[i]) - 1):\n                    r[i+1] += [r[i][j] + r[i][j+1]]\n                r[i+1] += [1]\n                i += 1\n            return r[-1]\n\n\nsolution = Solution()\nprint(solution.getRow(0))\nprint(solution.getRow(1))\nprint(solution.getRow(2))\nprint(solution.getRow(3))\nprint(solution.getRow(4))"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"101\") == \"5\"\nassert solution(\"11111111111111111111111111111101\") == \"31\"\n\nsolution(\"00000000000000000000000010000000\")\n\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n = n & (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        for i in range(32):\n            if n & (1 << i):\n                count += 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return sum([int(i) for i in list('{0:032b}'.format(n))])\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return sum(int(i) for i in list(bin(n).replace(\"0b\",\"\")))\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= (n - 1)\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return sum([1 for i in list(bin(n).replace(\"0b\",\"\")) if int(i)])"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000001111011') == 3\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        result = 0\n        while n:\n            result += n & 1\n            n >>= 1\n        return result\n    \n    def hammingWeight_sol2(self, n: int) -> int:\n        return sum([int(c) for c in bin(n)[2:]])\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(0b11101101101101101111111111101) == \"31\"\nassert solution(0b11111111111111111111111111101) == \"31\"\nassert solution(0b101101101101101101111111111101) == \"7\"\nassert solution(0b1101101101101101101111111111101) == \"7\"\nassert solution(0b11111111111111111111111111101) == \"31\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        # using built-in functions\n        # return bin(n).count(\"1\")\n\n        # approach: bitwise manipulation\n        # 32 bits\n        # number = 0\n        # mask = 1\n        # for i in range(32):\n        #     if n & mask!= 0:\n        #         number += 1\n        #     mask = mask << 1\n\n        # return number\n\n        # approach: loop through bits\n        number = 0\n        mask = 1\n        for i in range(32):\n            if n & mask!= 0:\n                number += 1\n            mask = mask << 1\n        \n        return number\n\nsolution = Solution()\n\nassert solution.hammingWeight(0b00000000000000000000000000001011) == 3\nassert solution.hammingWeight(0b00000000000000000000000010000000) == 1\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"00000000000000000000000010111101\") == 3\nassert solution(\"111111111111111111111111111111101\") == 31\nassert solution(\"00000000000000000000000010111101\") == 3\nassert solution(\"00000000000000000000000010111101\") == 3\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\nassert solution('11') == 2\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n'''"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"124\"\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123') == '124'\nassert solution('0') == '1'\nassert solution('111111111') == '110111101'\nassert solution('9') == '10'\nassert solution('9111') == '11010'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == '124'\nassert solution('999') == '1000'\nassert solution('1000') == '1001'\nassert solution('10001') == '10010'\nassert solution('101010') == '101011'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1,2,3') == '1,2,4'\nassert solution('4,3,2,1') == '4,3,2,2'\nassert solution('99') == '100'\nassert solution('9') == '10'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1,2,3,4,5,6,7\") == \"1,2,3,4,5,6,7\"\nassert solution(\"1,2,3,4,5,6,7,8\") == \"1,2,3,4,5,6,7,9\"\nassert solution(\"1,2,3,4,5,6,7,9\") == \"1,2,3,4,5,6,8,9\"\nassert solution(\"1,2,3,4,5,6,8,9\") == \"1,2,3,4,5,6,7,9\"\n\nassert solution(\"1,2,3,4,5,6,7,9,9\") == \"1,2,3,4,5,6,8,9,0\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == '1235'\nassert solution('9875') == '9876'\nassert solution('1111') == '1112'\nassert solution('0000') == '0001'\nassert solution('0909') == '0910'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"999\") == \"1000\"\nassert solution(\"1111\") == \"1112\"\nassert solution(\"0\") == \"1\"\nassert solution(\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234') == '1235'\nassert solution('9876') == '9977'\n\nprint(solution('1234'))\nprint(solution('9876'))"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[1,2,3]\") == \"[1,2,4]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[3,2,0]\") == \"[4,3,1,2]\"\n\n\"\"\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123') == '124'\nassert solution('0') == '1'\nassert solution('12345') == '12345'\nassert solution('111111') == '111112'\nassert solution('9') == '1'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == 4\n\"\"\"\nimport ast\nimport astunparse\nfrom ast import *\nfrom typing import List\n\nA, B = map(int, input().split())\nn = [A+B, A-B, A*B]\nprint(max(n))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n\") == \"4\"\nassert solution(\"3 4\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == expected_result\n\n----\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 4\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nprint(max([a+b, a-b, a*b]))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n') == '4'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\ninput_str = stdin.read()\n\nA, B = map(int, input_str.split(' '))"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nimport math\nimport numpy\nfrom typing import List"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('3 1') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('3 5\\n0 5\\n-2 4\\n3 4') == '3'\nassert solution('5 9\\n-2 4\\n3 4\\n0 5\\n-1 1') == '1'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nimport sys\n\nimport math\n\nd, n = map(int, sys.stdin.readline().split())\n\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, sys.stdin.readline().split())))\n\ndists = [0] * n\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        dist = math.sqrt(sum([(x * x) for x in arr[i]])) + math.sqrt(sum([(x * x) for x in arr[j]]))\n        if dist <= d:\n            dists[i] += 1\n            dists[j] += 1\n\nprint(len([x for x in dists if x!= 0]))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n-2 4\") == \"1\"\nassert solution(\"3 4\\n3 4\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"1 2\\n1 1\") == \"2\"\nassert solution(\"3 4\\n1 2\\n1 3\\n1 1\") == \"4\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\nassert solution('23') == 'No'\nassert solution('12345') == 'Yes'\nassert solution('2345') == 'No'\n\nprint('PASSED')\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"21\") == \"No\"\nassert solution(\"9\") == \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12\\n') == 'Yes'\nassert solution('45\\n') == 'No'\nassert solution('123\\n') == 'Yes'\nassert solution('321\\n') == 'Yes'\nassert solution('1234\\n') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'\nprint(solution('12'))\n\n-----\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 -1\\n\") == \"12\\n8\\n10\"\n\n-----\n1 2 3\n2 3 4\n4 5 6\n------\n0 1 2\n3 4 5\n6 7 8\n------\n0 1 2\n3 4 5\n6 7 8\n------\n1 2 3\n2 3 4\n5 6 7\n\"\"\"\n\nN = int(input())\na = [int(i) for i in input().split()]\ncnt = 0\nfor i in range(1, N):\n    a[i] = max(a[i - 1], a[i])\n\nfor i in range(N - 1):\n    if a[i] >= a[i + 1]:\n        cnt += a[i] - a[i + 1] + 1\n\nprint(cnt)\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n\nn = int(input())\n\narr = list(map(int, sys.stdin.readlines()))\n\narr.sort()\n\ntmp = 0\nans = []\nfor i in range(n):\n    tmp += abs(arr[i] - arr[i - 1])\n    if i == n - 1:\n        ans.append(tmp + arr[0] + arr[n - 1])\n    else:\n        ans.append(tmp)\n\nprint(\"\\n\".join(map(str, ans)))\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nn = int(stdin.readline())\nm = list(map(int, stdin.readline().split()))\n\nm.sort()"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('d') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'vowel'\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'vowel'\nassert solution('c') == 'consonant'\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'\n\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\nprint(solution('a'))\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBBWW') == 1\nassert solution('WWWBB') == 1\nassert solution('WBBBW') == 2\nassert solution('WWWW') == 0\nassert solution('BWBW') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBWW\") == 1\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\ncount = 0\nfor i, c in enumerate(S):\n    if c == \"W\":\n        count += 1\nprint(count)"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BBW') == '0'\nassert solution('WW') == '0'\nassert solution('B') == '0'\nassert solution('WWWW') == '4'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BBWWW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWBWWBWBWW\") == 2\nassert solution(\"WWWW\") == 0\nassert solution(\"BBBWW\") == 1\nassert solution(\"WWWBBBBWWWW\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BBWBB\") == \"0\"\nassert solution(\"WBBBB\") == \"0\"\nassert solution(\"WBBBWB\") == \"1\"\nassert solution(\"WBWWW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n\n\"\"\"\n2. Numbers can be added to string\n\nGiven a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.\n\nExample 1:\n\nInput: \"2-1-1\"\nOutput: [0, 2]\nExplanation: \n((2-1)-1) = 0 \n(2-(1-1)) = 2\nExample 2:\n\nInput: \"2*3-4*5\"\nOutput: [-34, -14, -10, -10, 10]\nExplanation: \n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n\n-----Constraints-----\n - 1 \u2266 N \u2266 20\n - There will be at most 20 digits in N.\n - N will contain at least one operator.\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains the string N.\n\n-----Output-----\nPrint all the different results in a list.\n\n-----Sample Input-----\n3\n2-1-1\n2*3-4*5\n2+3*4-5\n\n-----Sample Output-----\n[0, 2]\n[-34, -14, -10, -10, 10]\n[-1]\n\"\"\"\n\n\"\"\"\n3. Nested lists\n\nGiven a list of lists, implement a function that returns the sum of the values in all of the nested lists.\n\nExample 1:\n\nInput: [[1, 2], [3], [4, 5, 6]]\nOutput: 21\nExplanation: \nThe nested list has values [1, 2], [3], [4, 5, 6]. The sum of the values in the nested list is 3 + 4 + 5 + 6 = 21.\n\n-----Constraints-----\n - The number of sub-lists in the input list is an integer and is equal to the length of the input list.\n - The length of each sub-list is an integer and is less than or equal to 20.\n - Each element in each sub-list is an integer and is less than or equal to 99.\n\n-----Input-----\nThe first line contains an integer, T, the number of test cases.\nThe next T lines each contain an integer, n, the number of lists in the current test case.\nThe next n lines contain one list each. Each list consists of n space-separated integers.\n\n-----Output-----\nFor each test case, output the sum of the values in all of the nested lists.\n\n-----Sample Input-----\n3\n1\n2\n3\n4\n5\n6\n\n-----Sample Output-----\n15\n21\n33\n\n\"\"\"\n\n\"\"\"\n4. Matrix Addition\n\nGiven two two-dimensional lists of numbers of the size 2 \u00d7 N, create a new two-dimensional list of numbers which contains their sum.\n\nExample:\n\nGiven a list:\n\n1 2\n3 4\nResult should be:\n\n2 6\n7 10\nYou can think of the indices of the list as two variables, row and column, initialized to 0.\n\n-----Constraints-----\n - The size of the two-dimensional list is 2 x N.\n - The length of the lists inside the two-dimensional list is less than or equal to 10.\n - The length of the lists inside the two-dimensional list is less than or equal to 10.\n\n-----Input-----\nThe first line contains an integer N, the number of lists.\nThe next N lines each contain one list of N integers.\n\n-----Output-----\nPrint the two-dimensional list of numbers.\n\n-----Sample Input-----\n3\n1 2 3 4\n4 5 6 7\n8 9 10 11\n12 13 14 15\n\n-----Sample Output-----\n2 7 12 19 27\n8 12 16 25 34\n15 18 21 28 35\n\n\"\"\"\n\n\"\"\"\n5. Matrix Addition\n\nGiven a two-dimensional list of numbers of the size 2 \u00d7 N, create a new two-dimensional list of numbers which contains their sum.\n\nExample:\n\nGiven a list:\n\n1 2\n3 4\nResult should be:\n\n2 6\n7 10\nYou can think of the indices of the list as two variables, row and column, initialized to 0.\n\n-----Constraints-----\n - The size of the two-dimensional list is 2 x N.\n - The length of the lists inside the two-dimensional list is less than or equal to 10.\n - The length of the lists inside the two-dimensional list is less than or equal to 10.\n\n-----Input-----\nThe first line contains an integer N, the number of lists.\nThe next N lines each contain one list of N integers.\n\n-----Output-----\nPrint the two-dimensional list of numbers.\n\n-----Sample Input-----\n3\n1 2 3 4\n4 5 6 7\n8 9 10 11\n12 13 14 15\n\n-----Sample Output-----\n2 7 12 19 27\n8 12 16 25 34\n15 18 21 28 35\n\n\"\"\"\n\n\"\"\"\n6. Matrix Addition\n\nGiven a two-dimensional list of numbers of the size 2 \u00d7 N, create a new two-dimensional list of numbers which contains their sum.\n\nExample:\n\nGiven a list:\n\n1 2\n3 4\nResult should be:\n\n2 6\n7 10\nYou can think of the indices of the list as two variables, row and column, initialized to 0.\n\n-----Constraints-----\n - The size of the two-dimensional list is 2 x N.\n - The length of the lists inside the two-dimensional list is less than or equal to 10.\n - The length of the lists inside the two-dimensional list is less than or equal to 10.\n\n-----Input-----\nThe first line contains an integer N, the number of lists.\nThe next N lines each contain one list of N integers.\n\n-----Output-----\nPrint the two-dimensional list of numbers.\n\n-----Sample Input-----\n3\n1 2 3 4\n4 5 6 7\n8 9 10 11\n12 13 14 15\n\n-----Sample Output-----\n2 7 12 19 27\n8 12 16 25 34\n15 18 21 28 35\n\n\"\"\"\n\n\"\"\"\n7. Two sum\n\nGiven a list of numbers and a target number k, write a function that returns a pair of numbers from the list that sums to k. \nIf there are more than one such pair, return the pair with the smallest indices (i.e. begin the pair at the index with the smallest value).\n\nThe input will be two lists, a list of numbers and a target number k.\n\nExample:\n\nGiven numbers=[2, 7, 11, 15] and k=9,\nreturn (2, 7) or (7, 2) since 11 + 15 is 22."
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BW') == '1'\nassert solution('WB') == '2'\nassert solution('WW') == '0'\nassert solution('BWBW') == '0'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"4 16\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('1 21') == 'Yes'\nassert solution('1 21') == 'Yes'\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"No\"\nassert solution(\"1 21\") == \"Yes\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 21\") == 'Yes'\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\nprint('Yes' if (a ** 2 + b ** 2) % int(sys.stdin.readline()) == 0 else 'No')\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('1 21\\n2 15') == 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 21') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport os\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == 4\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nm = 0\nfor i in range(n):\n    if (a[i] % 3) == 0 and (a[i] % 7) == 0:\n        m = max(m, i+1)\nprint(m)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 2 4') == '2'\nassert solution('8\\n1 1 2 2 2 1 1') == '0'\nassert solution('7\\n3 1 4 1 5 9 2') == '4'"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 4 1 5 9 2') == 4\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\\n2 3 4 4\"\nassert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\\n1 4 2 3 1\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7\n3 1 4 1 5 9 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"2\n2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"6\n3 1 4 2 4 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"7\n2 2 2 2 2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"10\n5 5 5 5 5 5 5 5 5 5 5\n\"\"\") == \"1\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4') == '5'\nassert solution('7\\n1') == '18'\nassert solution('1\\n1') == '1'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\n-----Explanation-----\nInput:\nA = 4\n\nOutput:\n5\n\nThe two squares with color A = 4 are white and the other two are black.\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('2 4 6') == '0'\nassert solution('3 9 18') == '24'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"5\\n1\") == \"13\"\nassert solution(\"2\\n0\") == \"2\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4\\n') == '5'\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n\nn = int(input())\na = int(input())\n\nblack_squares = n*n - a\nprint(black_squares)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    # @param A : integer\n    # @param B : integer\n    # @return an integer\n    def paint(self, A, B):\n        return int((A ** 2 - B ** 2) / 2 + A - 1)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().paint(3, 4), 5)\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 4 6\"\n) == \"YES\"\nassert solution(\n    \"1 1 2\"\n) == \"NO\"\nassert solution(\n    \"100 200 100\"\n) == \"NO\"\nassert solution(\n    \"100 200 300\"\n) == \"NO\"\nassert solution(\n    \"10 20 30\"\n) == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('1 2 5') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('1 2 4') == 'NO'\nassert solution('2 2 6') == 'YES'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 5 6\") == \"NO\"\nassert solution(\"4 4 4\") == \"NO\"\nassert solution(\"2 6 4\") == \"YES\"\nassert solution(\"10 7 6\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == 'YES'\n\n\"\"\"\n\na,b,c = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 1 2\") == \"NO\"\nassert solution(\"10 10 10\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 3 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('5 8 3') == 'NO'\nassert solution('1 1 1') == 'YES'\nassert solution('1 1 2') == 'YES'\nassert solution('1 1 3') == 'YES'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'YES'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 3 5') == 'NO'\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6') == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\nassert solution('89') == 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"99\") == \"No\"\nassert solution(\"38\") == \"Yes\"\nassert solution(\"21\") == \"No\"\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('29') == 'Yes'\nassert solution('20') == 'No'\n\"\"\"\n\n\"\"\"\nimport re\nimport math\n\nimport stdio\n\nstdio.readInt()\n\nstdio.write('Yes') if re.search('[89]$', str(stdio.readInt())) else stdio.write('No')\n\"\"\"\nimport re\nimport math\n\nn = int(input())\nprint('Yes') if re.search('9', str(n)) else print('No')\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == \"Yes\"\nassert solution(34) == \"No\"\nassert solution(37) == \"Yes\"\nassert solution(4) == \"No\"\nassert solution(99) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"64\") == \"No\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"7\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3 3\n1 2 4''') == '1'\nassert solution('''2 2 3\n1 2\n''') == '0'\nassert solution('''3 3 1\n0 1 2\n''') == '1'\nassert solution('''10 3 6\n9 6 1\n5 10 8\n4 7 2\n3 1 0\n0 10 9\n7 3 1\n8 4 2\n6 5 3\n''') == '14'\nassert solution('''10 3 6\n9 6 1\n5 10 8\n4 7 2\n3 1 0\n0 10 9\n7 3 1\n8 4 2\n6 5 3\n''') == '14'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\n\"\"\"\n\nn, m, x = [int(num) for num in input().split()]\n\ntolls = [int(num) for num in input().split()]"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == '1'\nassert solution(\"5 3 3\\n5 1 4\") == '1'\nassert solution(\"5 3 3\\n1 2 4\\n5 1 4\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3\\n1 2 4') == 1\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\nassert solution(\"3 3 3\\n1 2 4\") == \"0\"\nassert solution(\"5 5 3\\n1 2 4\") == \"2\"\nassert solution(\"5 3 1\\n1 2 4\") == \"1\"\n\nimport sys\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nn, m, x = map(int, stdin.readline().split())\ntoll = list(map(int, stdin.readline().split()))\ntoll = toll[:m]\ntoll.append(0)\ntoll.append(n)\ntoll.sort()\n\nans = 0\nfor i in range(m):\n    ans += toll[i + 1] - toll[i]\nprint(ans)\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('3 2 1\\n2 3 4') == '2'\nassert solution('10 10 2\\n8 9 4\\n4 8 1\\n9 10 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"#.#\\n###\\n#.#\") == \"Yes\"\nassert solution(\"#.\\n###\\n#.\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"#.#\\n###\\n#..\") == \"Yes\"\nassert solution(\"..#\\n#..\\n#.\") == \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == \"Yes\"\nassert solution(\"3 3\\n..\\n###\\n..\") == \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"###\\n#.#\\n###\") == \"Yes\"\nassert solution(\"#.#\\n###\\n###\") == \"No\"\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n.#\\n###\\n.#\\n') == 'Yes'\nassert solution('3 3\\n.#\\n###\\n.\\n') == 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"#.#\\n###\\n.#.\") == \"Yes\"\nassert solution(\"###\\n###\\n#.\") == \"No\"\n\n---\nSolution:\n\n  import sys\n\n  H, W = map(int, sys.stdin.readline().split())\n\n  s = []\n  for i in range(H):\n    s.append(list(sys.stdin.readline()[:-1]))\n\n  def dfs(x, y):\n    if x < 0 or x >= H or y < 0 or y >= W:\n      return False\n    if s[x][y] == '#':\n      s[x][y] = '.'\n      dfs(x + 1, y)\n      dfs(x - 1, y)\n      dfs(x, y + 1)\n      dfs(x, y - 1)\n      return True\n    return False\n\n  for x in range(H):\n    for y in range(W):\n      if dfs(x, y):\n        return \"Yes\"\n\n  return \"No\"\n\nhttps://www.algoexpert.io/questions/Hanoi\n \n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '10 30 20') == 'Yes'\nassert solution(\n    '10 20 10') == 'No'\n\"\"\"\n\nimport collections\nimport itertools\n\nstdin = lambda: input().strip().split(' ')\nread_int = lambda: int(stdin()[0])\nread_ints = lambda: [int(s) for s in stdin()]\nread_tuple = lambda: tuple(map(int, stdin()))\nread_tuples = lambda: [tuple(map(int, stdin())) for _ in range(read_int())]\nread_list = lambda: list(map(int, stdin()))\nread_lists = lambda: [list(map(int, stdin())) for _ in range(read_int())]\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"10 30 20\"\n) == \"Yes\"\nassert solution(\n    \"20 20 10\"\n) == \"No\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"> 1\\n> 2\\n> 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\n------\n\n>>> (a + b) * (c + d) == (a + c) * (b + d)\nTrue\n>>> (a + b) * (c + d) == a * (b + d) + c * (b + d)\nTrue\n>>> (a + b) * c == a * c + b * c\nTrue\n>>> c * (a + b) == a * c + b * c\nTrue\n>>> a * (b + d) == a * b + a * d\nTrue\n\n>>> (a + b + c) * d == a * d + b * d + c * d\nTrue\n>>> (a + b + c) * d == (a + b) * d + c * d\nTrue\n\n>>> (a + b) * (c + d) == a * (b + d) + b * (c + d)\nTrue\n>>> a * (b + d) == a * b + a * d\nTrue\n>>> a * (b + d) == a * b + a * d\nTrue\n>>> a * (b + d) == (a + b) * d\nTrue\n>>> a * (b + d) == (a + b) * d\nTrue\n>>> a * (b + d) == a * (b + d)\nTrue\n>>> a * (b + d) == a * d + b * d\nTrue\n>>> a * (b + d) == a * d + b * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d\nTrue\n>>> a * (b + d) == a * b + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + (a + b) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b) * d\nTrue\n\n>>> (a + b + c) * d == a * d + b * d + c * d\nTrue\n>>> (a + b + c) * d == (a + b) * d + c * d\nTrue\n>>> a * (b + d) == a * b + a * d\nTrue\n>>> (a + b) * (c + d) == a * (b + d) + b * (c + d)\nTrue\n>>> (a + b) * (c + d) == (a + b) * c + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + a * d\nTrue\n>>> a * (b + d) == a * b + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + (a + b) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * d + b * d + (a + b) * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b + a * d + b * d + (a + b + c + d) * d\nTrue\n>>> a * (b + d) == a * b"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 30 20\n''') == 'Yes'\nassert solution('''10 10 10\n''') == 'No'\nassert solution('''100 100 100\n''') == 'No'\nassert solution('''30 30 10\n''') == 'No'\n'''\n[[30, 30, 10],\n [10, 30, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 30, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n [10, 10, 10]]\n[[30, 10, 10],\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10 30 20''') == 'Yes'\nassert solution('''30 10 20''') == 'No'\nassert solution('''30 10 10''') == 'No'\nassert solution('''30 30 30''') == 'Yes'\nassert solution('''3 3 3''') == 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('a b c') == 'No'\nassert solution('100 100 100') == 'No'\nassert solution('2 1 3') == 'Yes'\nassert solution('1 1 3') == 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Left'\nassert solution('10 3 2') == 'Left'\nassert solution('1 3 5 7 9') == 'Right'\nassert solution('5 5 5 5') == 'Balanced'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 8 7 1''') == 'Left'\n\n'''\n\n'''"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"Left\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"4 4 4 4\") == \"Right\"\n\n'''"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"3 3 3 3\") == \"Balanced\"\nassert solution(\"4 7 8 9\") == \"Right\"\n\"\"\"\n\na, b, c, d = map(int, input().split())\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nprint(solution(\"3 8 7 1\"))"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": 1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == 8\n\n-------Test Input--------\nInput\n3\n0 1 1 0 0 0 1 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n0 0 0 0 0 0 0 0 0 0 0\n\n-------Test Output--------\n8\n\n'''"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2'\n) == '8'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\nassert solution('4 5 6 7 8 9 -2 -3 4 -2') == '10'\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\n---Problem: 2038. Digit Factorials\n---Solved by: Kunal\n---Difficulty: Medium\n---Tags: Math, Mathematical\n---Time:  TBD\n---Memo: \n- Given a non-negative integer N, return the sum of its digits.\n- For example, given N = 123, return 6.\n- 1\n- 1 2\n- 1 2 3\n- 1 2 3 4\n- 1 2 3 4 5\n- 1 2 3 4 5 6\n- 1 2 3 4 5 6 7\n- 1 2 3 4 5 6 7 8\n- 1 2 3 4 5 6 7 8 9\n- 1 2 3 4 5 6 7 8 9 0\n- 1 2 3 4 5 6 7 8 9 10\n- 1 2 3 4 5 6 7 8 9 100\n- 1 2 3 4 5 6 7 8 9 101\n- 1 2 3 4 5 6 7 8 9 1010\n- 1 2 3 4 5 6 7 8 9 1011\n- 1 2 3 4 5 6 7 8 9 1012\n- 1 2 3 4 5 6 7 8 9 1013\n- 1 2 3 4 5 6 7 8 9 1014\n- 1 2 3 4 5 6 7 8 9 1015\n- 1 2 3 4 5 6 7 8 9 1016\n- 1 2 3 4 5 6 7 8 9 1017\n- 1 2 3 4 5 6 7 8 9 1018\n- 1 2 3 4 5 6 7 8 9 1019\n- 1 2 3 4 5 6 7 8 9 1020\n- 1 2 3 4 5 6 7 8 9 1021\n- 1 2 3 4 5 6 7 8 9 1022\n- 1 2 3 4 5 6 7 8 9 1023\n- 1 2 3 4 5 6 7 8 9 1024\n- 1 2 3 4 5 6 7 8 9 1025\n- 1 2 3 4 5 6 7 8 9 1026\n- 1 2 3 4 5 6 7 8 9 1027\n- 1 2 3 4 5 6 7 8 9 1028\n- 1 2 3 4 5 6 7 8 9 1029\n- 1 2 3 4 5 6 7 8 9 1030\n- 1 2 3 4 5 6 7 8 9 1031\n- 1 2 3 4 5 6 7 8 9 1032\n- 1 2 3 4 5 6 7 8 9 1033\n- 1 2 3 4 5 6 7 8 9 1034\n- 1 2 3 4 5 6 7 8 9 1035\n- 1 2 3 4 5 6 7 8 9 1036\n- 1 2 3 4 5 6 7 8 9 1037\n- 1 2 3 4 5 6 7 8 9 1038\n- 1 2 3 4 5 6 7 8 9 1039\n- 1 2 3 4 5 6 7 8 9 1040\n- 1 2 3 4 5 6 7 8 9 1041\n- 1 2 3 4 5 6 7 8 9 1042\n- 1 2 3 4 5 6 7 8 9 1043\n- 1 2 3 4 5 6 7 8 9 1044\n- 1 2 3 4 5 6 7 8 9 1045\n- 1 2 3 4 5 6 7 8 9 1046\n- 1 2 3 4 5 6 7 8 9 1047\n- 1 2 3 4 5 6 7 8 9 1048\n- 1 2 3 4 5 6 7 8 9 1049\n- 1 2 3 4 5 6 7 8 9 1050\n- 1 2 3 4 5 6 7 8 9 1051\n- 1 2 3 4 5 6 7 8 9 1052\n- 1 2 3 4 5 6 7 8 9 1053\n- 1 2 3 4 5 6 7 8 9 1054\n- 1 2 3 4 5 6 7 8 9 1055\n- 1 2 3 4 5 6 7 8 9 1056\n- 1 2 3 4 5 6 7 8 9 1057\n- 1 2 3 4 5 6 7 8 9 1058\n- 1 2 3 4 5 6 7 8 9 1059\n- 1 2 3 4 5 6 7 8 9 1060\n- 1 2 3 4 5 6 7 8 9 1061\n- 1 2 3 4 5 6 7 8 9 1062\n- 1 2 3 4 5 6 7 8 9 1063\n- 1 2 3 4 5 6 7 8 9 1064\n- 1 2 3 4 5 6 7 8 9 1065\n- 1 2 3 4 5 6 7 8 9 1066\n- 1 2 3 4 5 6 7 8 9 1067\n- 1 2 3 4 5 6 7 8 9 1068\n- 1 2 3 4 5 6 7 8 9 1069\n- 1 2 3 4 5 6 7 8 9 1070\n- 1 2 3 4 5 6 7 8 9 1071\n- 1 2 3 4 5 6 7 8 9 1072\n- 1 2 3 4 5 6 7 8 9 1073\n- 1 2 3 4 5 6 7 8 9 1074\n- 1 2 3 4 5 6 7 8 9 1075\n- 1 2 3 4 5 6 7 8 9 1076\n- 1 2 3 4 5 6 7 8 9 1077\n- 1 2 3 4 5 6 7 8 9 1078\n- 1 2 3 4 5 6 7 8 9 1079\n- 1 2 3 4 5 6 7 8 9 1080\n- 1 2 3 4 5 6 7 8 9 1081\n- 1 2 3 4 5 6 7 8 9 1082\n- 1 2 3 4 5 6 7 8 9 1083\n- 1 2 3 4 5 6 7 8 9 1084\n- 1 2 3 4 5 6 7 8 9 1085\n- 1 2 3 4 5 6 7 8 9 1086\n- 1 2 3 4 5 6 7 8 9 1087\n- 1 2 3 4 5 6 7 8 9 1088\n- 1 2 3 4 5 6 7 8 9 1089\n- 1 2 3 4 5 6 7 8 9 1090\n- 1 2 3 4 5 6 7 8 9 1091\n- 1 2 3 4 5 6 7 8 9 1092\n- 1 2 3 4 5 6 7 8 9 1093\n- 1 2 3 4 5 6 7 8 9 1094\n- 1 2 3 4 5 6 7 8 9 1095\n- 1 2 3 4 5 6 7 8 9 1096\n- 1 2 3 4 5 6 7 8 9 1097\n- 1 2 3 4 5 6 7 8 9 1098\n- 1 2 3 4 5 6 7 8 9"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 0 1 0 0 0 1 1 0 1\n2 2 2 2 2 2 2 2 2 2\n0 1 1 1 0 1 1 1 1 1 1\n3 4 3 3 2 3 2 3 2 3 2\n0 1 1 1 1 1 1 1 1 1 1 1\n3 2 3 3 2 3 2 3 2 3 2 3\n0 1 1 1 1 1 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2\n0 0 0 1 1 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1 1 1 1\n3 2 3 3 2 3 2 3 2 3 2 3\n0 1 1 1 1 1 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 1 1 1 1 1 1 1 1 1 1 1 1\n0 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 1 1 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1 1 1 1 1\n0 0 0 1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 0 3 1 0 3 2 1 3 1 3 2 1 3 2 2 2 2 1 3 2 3 3 2 3 2 3 3 2 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 1 0 1 0 0 1 0 1\\n0 1 1 1 1 1 1 1 1 1') == '8'\n\n\"\"\"\nfrom typing import List\nfrom itertools import accumulate"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == '8'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 0 1 0 0 0 1 0 1\\n1 2 3 4 5 6 7 8 9 -2 -3 4 -2\\n1 1 1 1 1 1 1 1 1 1 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-6651\") == \"No\"\nassert solution(\"2696651\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123') == 'Yes'\nassert solution('1-234') == 'Yes'\nassert solution('123-') == 'No'\nassert solution('12-3') == 'No'\nassert solution('12-34') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == 'Yes'\nassert solution('A B') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == \"Yes\"\nassert solution('3 5') == \"No\"\nassert solution('3 6') == \"Yes\"\nassert solution('7 3') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"0 9\") == \"No\"\nassert solution(\"1 9\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('10-10') == 'No'\nassert solution('0-0') == 'Yes'\nassert solution('0-01') == 'No'\nassert solution('3-7') == 'No'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('25-3572') == 'No'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('269-6651') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"9-42\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4 4'\n) == 'Yes'"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"2 1 4\") == \"0\"\nassert solution(\"2 3 5\") == \"2\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"4 4 4\") == \"0\"\n\"\"\"\n\n\"\"\"\nThis solution is inspired by https://leetcode.com/problems/minimum-distance-between-bst-nodes/discuss/104574/Python-solution-with-detailed-explanation\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 6\\n') == '1'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"4 5 2 5\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n\n'''"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2 6''') == '1'\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 6\\n') == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 6\\n') == '1'\n\n-----Explanation-----\nIn this case, the answer should be 1. The figure shows the proposed solution.\n\n-----Challenge-----\nCan you come up with a solution which works in O(N) time complexity, where N is the length of the input?\n\n'''\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\nassert solution(\"1 9 0\") == \"1 9\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\"\n\n\"\"\"\n- This solution works, but it doesn't pass the time limit.\n\"\"\"\nimport sys\nimport bisect\nimport heapq\n\nA, B, K = map(int, sys.stdin.readline().split())\nnums = [0] * (B - A + 1)\nfor i in range(A, B + 1):\n    nums[i - A] = i\n\nprint(' '.join([str(nums[i]) for i in range(len(nums)) if i + 1 < K or i + 1 - K < len(nums) and nums[i + 1 - K] < nums[i - K]]))"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 8 2''') == '''3\n4\n7\n8'''"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(A, B, K) == '\\n'.join(solution(A, B, K))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 8, 2) == [3, 4, 7, 8]\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nimport math\nimport sys\nfrom functools import lru_cache\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Intermediate Contest\") == \"IIC\"\nassert solution(\"AtCoder Advanced Contest\") == \"ACC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'AtCoder Beginner Contest'\n) == 'ABC'\nassert solution(\n    'AtCoder Intermediate Contest'\n) == 'IC'\nassert solution(\n    'AtCoder Advanced Contest'\n) == 'AC'\nassert solution(\n    'AtCoder Expert Contest'\n) == 'EC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3 5 4) == 'YES'\nassert solution(2 4 2) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n\na, b, x = [int(s) for s in input().split()]\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\") == \"YES\"\nassert solution(\"5 4 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('3 5 5') == 'NO'\nassert solution('1 1 1') == 'YES'\nassert solution('2 2 2') == 'NO'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n4 5 6') == 'YES'\nassert solution('2 1 4\\n3 5 7') == 'NO'\nassert solution('2 2 6\\n8 9 10') == 'YES'\n\"\"\"\n\nimport sys\n\nA, B, X = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 4') == \"YES\"\n\"\"\"\n\nA, B, X = [int(x) for x in stdin.split()]\ncount = A"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('101') == '2'\nassert solution('100 100') == '0'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"100 17\n\"\"\"\n) == \"83\"\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17\\n') == '83'\n\"\"\"\n\nX, t = [int(s) for s in stdin.split()]\nprint(X * t % 100)"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '100 17'\n) == '83'\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 17') == '83'"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 17') == '83'\nprint('All tests passed.')\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 6') == '4'\nassert solution('6 7') == '6'\nassert solution('12 9') == '24'\nassert solution('10 8') == '24'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1,2\") == \"2\"\nassert solution(\"5\\n1,2,3,4,5\") == \"15\"\nassert solution(\"6\\n1,2,3,4,5,6\") == \"18\"\nassert solution(\"5\\n1,2,3,4,5\") == \"15\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"3\\n10 20 30\") == \"6\"\nassert solution(\"4\\n10 100 1000 10000\") == \"1000\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1000000000 1000000000') == '1000000000000000000'\nassert solution('1\\n10000') == '10000'\nassert solution('1\\n1') == '1'\n\"\"\"\n\nimport os\nimport sys\n\npath = os.path.dirname(os.path.realpath(__file__))\n\nsys.stdin = open(path + \"/in\", \"r\")\nsys.stdout = open(path + \"/out\", \"w\")\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == 24\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, Iterator, List, NamedTuple, Tuple, Union\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n\n\nclass Row(NamedTuple):\n    A: Union[int, float]\n    B: Union[int, float]\n\n    def __mul__(self, other: Union[int, float]) -> Row:\n        return Row(self.A * other, self.B * other)\n\n\nclass Matrix(NamedTuple):\n    rows: List[Row]\n\n    def __mul__(self, other: Matrix) -> Matrix:\n        return Matrix(\n            [Row(a, b) for (a, b) in zip(row_a, row_b)]\n            for row_a, row_b in zip(self.rows, other.rows)\n        )\n\n    def __rmul__(self, other: Matrix) -> Matrix:\n        return Matrix(\n            [Row(a, b) for (a, b) in zip(row_a, row_b)]\n            for row_a, row_b in zip(self.rows, other.rows)\n        )\n\n    def __matmul__(self, other: Matrix) -> Matrix:\n        return Matrix(\n            [Row(a + b, c + d) for (a, b), (c, d) in zip(self.rows, other.rows)]\n        )\n\n    def trace(self) -> Union[int, float]:\n        return sum(row.A for row in self.rows)\n\n\n@require(lambda rows: all(len(row) == len(rows[0]) for row in rows))\n@ensure(lambda result: result >= 0)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1000000000 1000000000''') == '1000000000000000000'\nassert solution('''2\n1 1000000000''') == '-1'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 1 2') == '6'\nassert solution('2\\n100 1000') == '-1'\n\"\"\"\n\nn = int(input())\nargs = input().strip().split(' ')\nargs = [int(i) for i in args]\n\nres = 1\nfor i in args:\n    if res * i > 10 ** 18:\n        print('-1')\n        exit()\n    res *= i\nprint(res)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\\n1000\") == \"100\\n1000\"\nassert solution(\"10\\n200\") == \"200\\n200\"\nassert solution(\"1\\n10\") == \"10\\n10\"\nassert solution(\"100\\n1000\") == \"1000000000000000000\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1\\n2') == '2\\n2\\n4'"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == 1\n\nprint(solution())"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3') == '6'\nassert solution('2 2\\n1 0') == '-1'\n\"\"\"\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(100001)\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\\n218\\n\") == \"Yes\"\nprint(solution(\"2018\\n218\\n\"))\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\n\"\"\"\n\nN = int(input())\nA = int(input())\n\nN_500_coins = (N // 500)\nN_1_coins = (N % 500)"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('218\\n2018') == 'Yes'\nassert solution('218\\n2606') == 'No'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input()).strip()\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\nassert solution(\"2018\\n316\") == \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3 6''') =='safe'\nassert solution('''4 3 6''') =='safe'\nassert solution('''4 3 6''') =='safe'\nassert solution('''4 3 6''') =='safe'\nassert solution('''4 3 6''') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 6\\n') =='safe'\nassert solution('7 6 9\\n') == 'dangerous'\nassert solution('6 6 6\\n') == 'dangerous'\nassert solution('6 10 3\\n') == 'dangerous'\n\"\"\"\nimport math\n\nX, A, B = map(int, input().split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 3 6\"\n) == \"safe\"\n\n\"\"\"\n\nimport sys\n\nX, A, B = [int(_) for _ in sys.stdin.readline().rstrip().split(\" \")]"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('4 2 6') == 'dangerous'\n\"\"\"\n\nx, a, b = map(int, stdin.split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n\nX, A, B = map(int, stdin.split('\\n')[0].split())\nprint('safe' if B >= A else 'dangerous' if A > X else 'delicious')\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('3 6 3') == 'dangerous'\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '3'\nassert solution('16') == '9'\nassert solution('100') == '81'\nassert solution('101') == '91'\nassert solution('1000') == '81'\n\"\"\"\n\nn = int(stdin.readline())\n\nsquare_num = 0\n\nwhile n > square_num ** 2:\n    square_num += 1\n\nprint(square_num ** 2)\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nprint(solution('10'))\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5) == 3\nassert solution(10) == 9\nassert solution(7) == 4\nassert solution(11) == 5\nassert solution(12) == 6\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"4\") == \"2\"\nassert solution(\"8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(int(input()))) == str(int(input()))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '9'\nassert solution('5') == '4'\nassert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\"\nimport math\n\nn = int(input())\nroot = int(math.floor(math.sqrt(n)))\nmax = root\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"4\n3 9\n1 2\n2 3\n3 4\n\"\"\") == \"10\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"5\n3 9\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"18\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"10\n6 7\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"9\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n2 3\\n1 1\\n3 2\"\n) == \"10\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nt = a = [0] * n\nfor i in range(n):\n    _, t[i], a[i] = map(int, sys.stdin.readline().rstrip().split())\n\nt_sum = sum(t)\na_sum = sum(a)"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3\\n1 1\") == \"10\"\nassert solution(\"3\\n1 1\\n3 2\") == \"6\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\nassert solution(\"1\\n1\\n1\") == \"1\"\n\n\"\"\"\nimport sys\n\nfrom math import gcd"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\n3\n2 3\n1 1\n3 2\n\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2''') == '10'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3\\n2 3\\n1 1\"\n) == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 'yes'\nassert solution('abcd') == 'no'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n\n\"\"\"\n2. Write a function definition for python code to reverse a string.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.\n\n-----Constraints-----\n - 2 \u2264 |S| \u2264 26, where |S| denotes the length of S.\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nIf all the characters in S are different, print yes (case-sensitive); otherwise, print no.\n\n-----Sample Input-----\na\n\n-----Sample Output-----\nno\n\"\"\"\n\n\"\"\"\n3. Write a function definition for python code to count the number of vowels in a given string.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S consisting of lowercase English letters. Determine how many vowels are in S.\n\n-----Constraints-----\n - |S| is in range [1, 3, \u2026, 26].\n - |S| consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the count of vowels.\n\n-----Sample Input-----\na\n\n-----Sample Output-----\n0\n\n-----Sample Input-----\na, b, c\n\n-----Sample Output-----\n0\n\n-----Sample Input-----\nad, be, ca, d, e, f, g\n\n-----Sample Output-----\n7\n\n\"\"\"\n\n\"\"\"\n4. Write a function definition for python code to find the total number of substrings of a given string of length k.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S of lowercase English letters. Determine the total number of substrings of length k of S.\n\n-----Constraints-----\n - |S| is in range [1, 10^4].\n - |S| consists of lowercase English letters.\n - k is in range [1, |S|].\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nk\n\n-----Output-----\nPrint the number of substrings of length k of S.\n\n-----Sample Input-----\na\n3\n\n-----Sample Output-----\n6\n\n-----Sample Input-----\naa\n3\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\naaabbb\n2\n\n-----Sample Output-----\n13\n\n\"\"\"\n\n\"\"\"\n5. Write a function definition for python code to find the first occurence of the substring ss in a given string.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S of lowercase English letters and an integer k. Find the first position of the substring ss in S, where ss is a string of length k.\n\n-----Constraints-----\n - |S| is in range [1, 10^5].\n - |S| consists of lowercase English letters.\n - k is in range [1, |S|].\n - |ss| is in range [1, |S|].\n - |ss| consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nk\nss\n\n-----Output-----\nPrint the position of the first occurence of ss in S.\n\n-----Sample Input-----\nabacabadaba\n3\naba\n\n-----Sample Output-----\n7\n\n-----Sample Input-----\nabacabadaba\n3\nbac\n\n-----Sample Output-----\n-1\n\"\"\"\n\n\"\"\"\n6. Write a function definition for python code to find the last occurence of the substring ss in a given string.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S of lowercase English letters and an integer k. Find the last position of the substring ss in S, where ss is a string of length k.\n\n-----Constraints-----\n - |S| is in range [1, 10^5].\n - |S| consists of lowercase English letters.\n - k is in range [1, |S|].\n - |ss| is in range [1, |S|].\n - |ss| consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nk\nss\n\n-----Output-----\nPrint the position of the last occurence of ss in S.\n\n-----Sample Input-----\nabacabadaba\n3\naba\n\n-----Sample Output-----\n7\n\n-----Sample Input-----\nabacabadaba\n3\nbac\n\n-----Sample Output-----\n-1\n\"\"\"\n\n\"\"\"\n7. Write a function definition for python code to check if two strings are complementary.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given two strings S1 and S2. Check whether S1 and S2 are complementary.\n\n-----Constraints-----\n - |S1| and |S2| are in range [1, 10^5].\n - |S1| and |S2| consist of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS1\nS2\n\n-----Output-----\nPrint True if S1 and S2 are complementary, False otherwise.\n\n-----Sample Input-----\na\na\n\n-----Sample Output-----\nTrue\n\n-----Sample Input-----\naa\na\n\n-----Sample Output-----\nFalse\n\n-----Sample Input-----\naa\na\n\n-----Sample Output-----\nFalse\n\"\"\"\n\n\"\"\"\n8. Write a function definition for python code to check if a given string contains all unique characters.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S. Check whether it contains all unique characters.\n\n-----Constraints-----\n - |S| is in range [1, 10^5].\n - |S| consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint True if all the characters in S are unique, False otherwise.\n\n-----Sample Input-----\na\n\n-----Sample Output-----\nFalse\n\n-----Sample Input-----\nabacabadaba\n\n-----Sample Output-----\nTrue\n\"\"\"\n\n\"\"\"\n9. Write a function definition for python code to compute the reverse complement of a DNA string.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S consisting of lowercase English letters. Compute the reverse complement of S.\n\n-----Constraints-----\n - |S| is in range [1, 10^5].\n - |S| consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the reverse complement of S.\n\n-----Sample Input-----\ngctacatgcat\n\n-----Sample Output-----\ncgtaatgcatc\n\n-----Sample Input-----\nacgtccggcctcgg\n\n-----Sample Output-----\ngctcgtcggacgtc\n\n\"\"\"\n\n\"\"\"\n10. Write a function definition for python code to find the longest prefix of a given string which is also a suffix.\n\"\"\"\n\n\"\"\"\nSolution\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S consisting of lowercase English letters. Find the longest prefix of a given string which is also a suffix.\n\n-----Constraints-----\n - |S| is in range [1, 10^5].\n - |S| consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the longest prefix of a given string which is also a suffix.\n\n-----Sample Input-----\nabracadabra\n\n-----Sample Output-----\nabracad\n\n-----Sample Input-----\nabracadabra\n\n-----Sample Output-----\nabracadabra\n\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'yes'\nassert solution('abcdefghijklmnop') == 'no'\nassert solution('aabcc') == 'yes'\nassert solution('aabc') == 'yes'\nassert solution('aaabb') == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"yes\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"no\"\nassert solution(\"abcd\") == \"yes\"\nassert solution(\"zzz\") == \"yes\"\nassert solution(\"\") == \"yes\"\n\nimport sys\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('abbc') == 'no'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == 2\nassert solution(2) == 5\nassert solution(3) == 6\nassert solution(4) == 8\n\nprint(solution(5))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WEEWW') == 1\n\nassert solution('WEWWE') == 1\n\nassert solution('WWWEW') == 2\n\nassert solution('WWWE') == 2\n\nassert solution('WEEW') == 2"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WEEWW\") == 1\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WEEWW') == '1'\n\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WEWEWE\") == 0\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5WEEWW') == 1\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5WEEWW') == 1\nassert solution('3WWEWW') == 0\nassert solution('4WWWEW') == 2\nassert solution('2WWWEW') == 0\nassert solution('1WWWEW') == 2\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WWWWE\") == \"0\"\nassert solution(\"WWWWW\") == \"3\"\nassert solution(\"WE\") == \"1\"\nassert solution(\"EW\") == \"0\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WWWWW') == 0\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5WEEWW') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WEEW\") == 0\nassert solution(\"WEWE\") == 0\nassert solution(\"WEWNW\") == 0\nassert solution(\"WEWNW\") == 1\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\n\n\"\"\"\n\nfrom collections import Counter\n\nn, m = map(int, input().split())\nc = Counter()\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    c[a] += 1\n    c[b] += 1\n\nfor i in range(1, n + 1):\n    print(c[i])\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2\\n1 4\\n2 3\\n\") == \"2\\n2\\n1\\n1\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4\n''') == '''2\n2\n1\n1'''\n\nassert solution('''4 1\n1 1\n''') == '''2\n1\n1\n'''\n\nassert solution('''4 1\n1 2\n''') == '''2\n1\n1\n'''\n\nassert solution('''4 1\n1 4\n''') == '''1\n2\n'''\n\nassert solution('''4 1\n1 1\n''') == '''2\n1\n1\n'''"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\n---------------------"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\nassert solution('4 4\\n1 2\\n2 3\\n1 4\\n4 1') == '2\\n2\\n1\\n1\\n0'\nassert solution('4 4\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n2\\n1\\n1\\n1'\nassert solution('4 4\\n1 2\\n2 3\\n1 4\\n4 1') == '2\\n2\\n1\\n1\\n2'\nassert solution('4 4\\n1 2\\n2 3\\n1 4\\n4 1') == '2\\n2\\n1\\n1\\n2'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n\nn, m = map(int, input().split())\nroads = {(a, b): 0 for a in range(1, n + 1) for b in range(1, n + 1)}\nfor _ in range(m):\n    a, b = map(int, input().split())\n    roads[(a, b)] = 1\n    roads[(b, a)] = 1\n\nprint(\"\\n\".join(map(lambda x: str(roads[x]), roads)))\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('N M\\n1 2') == '2'\nassert solution('N M\\n1 2\\n2 3') == '3'\nassert solution('N M\\n1 2\\n2 3\\n1 4') == '3'\nassert solution('N M\\n1 2\\n2 3\\n1 4\\n1 4') == '4'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\nassert solution('4 3\\n1 2\\n2 3\\n1 4\\n2 2\\n1 3') == '2\\n2\\n1\\n1\\n0'\nassert solution('3 3\\n1 2\\n1 3\\n1 4\\n2 1\\n2 3\\n2 4\\n3 4\\n1 2\\n2 3\\n3 1') == '0\\n0\\n0\\n2'\n\nprint('Success')"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nscore = []\nfor _ in range(n):\n    score.append(int(stdin.readline().rstrip()))\nscore.sort()\nresult = 0\nfor i in range(n):\n    if i % 2 == 0:\n        result += score[i]\n    else:\n        result -= score[i]\nprint(result)\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nl1 = []\nl2 = []\n\nfor i in range(0, len(l)):\n    if l[i] % 10 == 0:\n        l1.append(l[i])\n    else:\n        l2.append(l[i])\n\nl1.sort(reverse=True)\nl2.sort(reverse=True)"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('3\\n0\\n5\\n10') == '30'\nassert solution('0\\n0\\n0\\n0') == '0'\nassert solution('1\\n1\\n1\\n1') == '3'\n\"\"\"\n\nn = int(input())\n\nnums = [int(input()) for _ in range(n)]\n\nmax_num = max(nums)\n\ncount = 0\nfor i in range(n):\n    if nums[i]!= 0:\n        count += 1"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n5\\n10\\n15\\n') == '25'\nassert solution('3\\n5\\n10\\n') == '30'"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\\n15\\n1\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25\\n'\nassert solution('1\\n10\\n') == '10\\n'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('3\\n10\\n15\\n5') == '30'"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"2\\n5\\n10\") == \"30\"\nassert solution(\"1\\n5\\n10\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\"\nassert solution(\"3\\n5\") == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbca') == 2\n\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str) == str\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(S) == output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Sunny') == 'Cloudy'\nprint(solution('Sunny'))\n\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\nassert solution(\"Rainy\") == \"Rainy\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 3\") == \"3\"\nassert solution(\"1 1 4\") == \"4\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('6 8 150') == '142'\nassert solution('7 17 120') == '119'\nassert solution('2 3 5') == '5'\nassert solution('5 7 10') == '7'\n\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport math\n\nn, a, b = list(map(int, stdin.split()))"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 17 120\\n') == '119'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nimport sys"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 17 120\\n') == '119'\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nprint(N * M)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_cases[0]) == test_cases[1][0]\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1900'\n\"\"\"\n\nfrom functools import lru_cache\nimport math\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\n------Solution------\n\nn, m = map(int, stdin.readline().split())\nanswer = (1900 * (n - m) + n * 380) * (m // 2) + ((n - m) * 190 + n * 380) * (m // 4) + ((n - m) * 190 + (n - m) * 380) * (m // 8) + ((n - m) * 190 + (n - m) * 380) * (m // 16)\nprint(answer)\n\n------Test Data and Tests------\nYour code will be run against a variety of test cases, with varying input arguments.\nYou will have sufficient time to read the test cases and write your own code to solve the problem.\n\n1. The first line of the input will contain a single integer T, the number of test cases.\nT lines follow, each containing 2 space-separated integers N and M, the number of questions in the contest, and the number of test cases that failed, respectively.\n1 \u2264 T \u2264 100\n1 \\leq N \\leq 100\n0 \\leq M \\leq N\n\n2. The second line of the input will contain 2 space-separated integers N and M, the number of questions in the contest and the number of test cases that failed, respectively.\n1 \\leq N \\leq 100\n0 \\leq M \\leq N\n\n3. For each of the test cases, print the expected value of the total execution time of the code, in milliseconds, as an integer.\n\n4. The code will be executed on each test case with 1/2 probability in 1900 milliseconds, and correctly solve each of the other N-M cases with 1/2 probability in 100 milliseconds.\n\nSample Input:\n\n1 1\n1 1\n100 101\n1 1\n100 101\n\nSample Output:\n\n3800\n3800\n10000\n3800\n10000\n\n------Notes------\nThe expected value of the total execution time of the code, in milliseconds, is X.\nIt can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '3800'\nassert solution('2 5\\n') == '6100'\nassert solution('3 4\\n') == '5500'\nassert solution('4 5\\n') == '13600'\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1900\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"835\"\n\"\"\"\n\nN, M = input().split()\nN, M = int(N), int(M)\ncnt = 0\ncur = 0\nwhile N:\n    if cnt == M:\n        N -= 1\n        cnt = 0\n    cur += 1\n    cnt += 1\n    if cur == 1900:\n        cur = 0\n    if cur == 1:\n        N -= 1\nprint(cur * 1900 + 1900 + (N * 100))\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"codeforcesregularcontest\") == \"f\"\nassert solution(\"abcedghijklmnopqrstuvwxyz\") is None\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n---"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('atcoderexpertcontest') == 'b'\nassert solution('atcoderbeginnercontest') == 'c'\nassert solution('abcd') == None\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nprint(\"test passed\")\n\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2 4 4 3\n''') == '4\\n3\\n3\\n4'\n\"\"\"\nfrom typing import List, Optional, Union, Iterator\nfrom pydantic import BaseModel\n\nclass Num(BaseModel):\n    n: int\n    \n\nclass Data(BaseModel):\n    nums: List[int]\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 4 4 3\n''') == '4\\n3\\n3\\n4'\n\n\"\"\"\n\nimport math\nimport time\n\n\nclass Solution:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    def solution(self, stdin):\n        n = int(stdin.readline())\n        arr = list(map(int, stdin.readline().split()))\n        if len(arr) == 1:\n            return str(arr[0])\n        arr.sort()\n        for i in range(n):\n            if (n + 1) % 2!= 0:\n                if i + 1 >= math.ceil((n + 1) / 2) and i + 1 < n:\n                    return str(arr[i + 1])\n            else:\n                if i + 1 >= math.ceil(n / 2) and i + 1 < n:\n                    return str(arr[i + 1])\n                elif i + 1 < math.ceil(n / 2):\n                    return str(arr[i])\n        return ''\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"4\\n2 4 4 3\"\n) == \"4\\n3\\n3\\n4\"\n\"\"\"\n\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\n---\n\nIt seems that there is an error in the solution.\nThis error should be in the third-last line.\n\nYou can check it by running your code on the sample test cases.\n\nYour task is to correct the solution so that all test cases pass.\n\nTo achieve this, find the median of the list [3,4,1,2] in a single traversal.\nFirst, the median of [3,4,1,2] is 2.5.\nThen, the median of [4,1,2] is 2.5.\nFinally, the median of [1,2] is 1.5.\n\nIt is important to note that the median of [2] is 2.\nThis is an example of how the median can be calculated recursively.\n\nIf the list has an odd number of elements, then the median is defined to be the middle element.\nFor example, the median of [3,4] is 3.5.\nIf the list has an even number of elements, then the median is defined to be the average of the middle two elements.\nFor example, the median of [3,5] is 3.5.\n\nFor example, if the input is:\n4\n2 4 4 3\n\nThen, the output should be:\n4\n3\n3\n4\n\nThe first line of the input gives the number of test cases, T.\nFor each test case, there are 2 lines.\nFor each test case, the first line contains a single integer, N, which is the size of the list.\nThe second line contains N integers separated by spaces, which is the list of the values.\n\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    4\n    2 4 4 3\n    \"\"\") == '4\\n3\\n3\\n4'\nassert solution(\n    \"\"\"\n    5\n    2 4 4 4 4\n    \"\"\") == '4\\n3\\n3\\n4\\n4'\nassert solution(\n    \"\"\"\n    4\n    5 4 4 3\n    \"\"\") == '4\\n4\\n3\\n3'\n\n\"\"\"\nNote\n1. For each i = 1, 2,..., N, let the median of X_1, X_2,..., X_N be B_i.\n2. The median of X_1, X_2,..., X_N is the (\\frac{N+1}{2})-th largest value among X_1, X_2,..., X_N.\n3. The median of X_1, X_2,..., X_N is the (\\frac{N+1}{2})-th smallest value among X_1, X_2,..., X_N.\n\nThe median of a sequence of N numbers can be defined as the average of the (N-1)/2 smallest and (N-1)/2 largest values.\n\nThe median of the sequence of N odd numbers can be defined as the average of the N/2 largest and smallest values.\n\nThe median of the sequence of N even numbers can be defined as the average of the (N+1)/2 smallest and (N+1)/2 largest values.\n\nMedian of X_1,..., X_n is defined as:\n\nA: If n is even, then median is the average of the n/2 largest and smallest values.\nB: If n is odd, then median is the average of the (n+1)/2 smallest and largest values.\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"2\"\n\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2 4 2 1') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 1 2 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2 4 2 1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2 4 2 1') == '2'\nassert solution('6 1 2 3 4 2 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\nfor i in range(0, len(l)):\n    for j in range(i+1, len(l)):\n        for k in range(j+1, len(l)):\n            for l in range(k+1, len(l)):\n                print(l)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2 4 2 1') == '2'\nassert solution('1 2 3 4 2 1') == '0'\nassert solution('4 1 2 3 2 1') == '3'\nassert solution('4 1 5 2 3 2 1') == '4'\n\nimport math\nimport sys\n\n\"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\n\"\"\"\n\nN = int(input().strip())\nA = list(map(int, input().strip().split()))\n\na = A.count(min(A))\nb = A.count(max(A))\n\nprint(max(a*b, 0))\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2 4 2 1\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n7 1\\n2\\n5\\n10\") == \"8\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 1') == '4'\nassert solution('5 7 1 2') == '8'\nassert solution('6 4 3 5 2') == '12'\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7 1 2 5 10') == '8'\n\"\"\"\n\nn, d, x = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(x + (n - 1) * (a[0] - 1))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1\\n2\\n5\\n10\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 7 1 2 5\\n') == '8'\nassert solution('4 2\\n5 4 1') == '9'\nassert solution('2 1\\n2 2') == '3'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 1 2 5 10\") == \"8\"\nassert solution(\"2 4 2 1 1\") == \"6\"\n\"\"\"\n\n\"\"\"\nIf the number of participants N is odd, then the number of chocolate pieces prepared at the beginning of the camp is:\n\n(N / 2) + (N / 2 + 1) + (N / 2 + 2) + (N / 2 + 3) +... + (N / 2 + N)\n= N / 2 + N / 2 + N / 2 + N / 2 +... + N / 2\n= (1/2)N + (2/2)N + (3/2)N +... + (N/2)N\n= N + (N + 1) + (N + 2) + (N + 3) +... + (N + N)\n= N + N + N + N +... + N\n= N * N\n\nIf the number of participants N is even, then the number of chocolate pieces prepared at the beginning of the camp is:\n\n(N / 2) * (N / 2 + 1) * (N / 2 + 2) * (N / 2 + 3) *... * (N / 2 + N)\n= N / 2 * N / 2 * N / 2 * N / 2 *... * N / 2\n= (1/2)N / 2 * (2/2)N / 2 * (3/2)N / 2 *... * (N/2)N / 2\n= (1/2)N + (2/2)N + (3/2)N +... + (N/2)N\n= N + (N + 1) + (N + 2) + (N + 3) +... + (N + N)\n= N + N + N + N +... + N\n= N * N\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n7 1\n2\n5\n10\n''') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 1 2 5\") == \"8\"\n\"\"\"\n\nn, d, x = [int(s) for s in input().split()]\na = [int(s) for s in input().split()]\n\nchocolate = 0\nfor i in range(n):\n    chocolate += a[i] * (d - i)\n\nprint(chocolate - x)\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n7 1\n2\n5\n10\n''') == '8'\nassert solution('''\n1\n100\n100\n''') == '100'\nassert solution('''\n5\n7 1\n2\n5\n10\n''') == '8'\nassert solution('''\n3\n7 1\n2\n5\n''') == '8'\nassert solution('''\n4\n7 1\n2\n5\n''') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 6 8 10') == '8'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"1\\n0\\n0\\n50\") == \"0\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n2\\n100\\n') == '2'\nassert solution('2\\n1\\n0\\n100\\n') == '0'\nassert solution('2\\n1\\n0\\n5\\n') == '0'\nassert solution('2\\n0\\n0\\n10\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A B C X\\n') == 'No'\nassert solution('2 2 2 100\\n') == '2'\nassert solution('2 2 2 50\\n') == 'No'\nassert solution('0 0 1 100\\n') == '1'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2\\nThere are two ways to select coins.'"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\n\"\"\"\n\nimport numpy as np\n\nclass Coins:\n    def __init__(self, A, B, C, X):\n        self.A = int(A)\n        self.B = int(B)\n        self.C = int(C)\n        self.X = int(X)\n        self.combinations = self.combinations()\n\n    def combinations(self):\n        a = np.arange(self.A + 1)\n        b = np.arange(self.B + 1)\n        c = np.arange(self.C + 1)\n        combs = np.array([a, b, c])\n        combs = combs.T.reshape(-1, 3)\n        combs = combs[combs[:, 0] + combs[:, 1] + combs[:, 2] == self.X]\n        return len(combs)"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2 100') == '2'\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\\n\"\n\"\"\"\n\n\"\"\"\n1) You have 10 coins and you want to select the 3 coins that have the largest value.\nIn how many ways can you select 3 coins so that they are the largest ones?\nFor example, there are 6 possible ways to select 3 coins so that they are the largest.\n1 + 2 + 3 = 6\n1 + 2 + 4 = 6\n1 + 2 + 5 = 6\n1 + 3 + 4 = 6\n1 + 3 + 5 = 6\n1 + 4 + 5 = 6\n2 + 3 + 4 = 6\n2 + 3 + 5 = 6\n2 + 4 + 5 = 6\n3 + 4 + 5 = 6\nIn how many ways can you select 3 coins so that they are the largest ones?\nIn the example above, there are 6 ways.\n\n2) You have 6 coins and you want to select the 2 coins that have the same value.\nIn how many ways can you select 2 coins so that they are the same ones?\nThere are 2 ways to select 2 coins that are the same.\n\n3) You have 6 coins and you want to select the 3 coins that have the same value.\nIn how many ways can you select 3 coins so that they are the same ones?\nThere is 1 way to select 3 coins that are the same.\n\n-----Constraints-----\n - 0 \\leq A, B, C \\leq 50\n - A + B + C \\geq 1\n - 50 \\leq X \\leq 20 000\n - A, B and C are integers.\n - X is a multiple of 50.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA\nB\nC\nX\n\n-----Output-----\nPrint the number of ways to select coins.\n\n-----Sample Input-----\n10\n10\n10\n100\n\n-----Sample Output-----\n1\n\nThere is only 1 way to select coins that are the largest ones.\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\nassert solution(\"1\\n1\\n1\\n50\") == 1\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''2\n2\n2\n100''') == 2\nassert solution(\n'''2\n2\n2\n100''') == 2\nassert solution(\n'''1\n2\n1\n100''') == 0\nassert solution(\n'''1\n2\n1\n100''') == 0\nassert solution(\n'''2\n2\n2\n1''') == 0\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == \"Yes\"\nassert solution('1 3 5') == \"No\"\nassert solution('0 0 0') == \"Yes\"\nassert solution('1 1 1') == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == 'Yes'\n\n------------Explanation-------------\nThe value of C is 2, which is not less than A=1 and not greater than B=3.\n\n-------------Test Data-------------\nInputs:\n1 3 2\n4 5 6\n7 8 9\n0 2 3\n2 6 9\n4 6 8\n0 1 5\n0 0 6\n1 2 3\n0 1 4\n0 0 4\n0 0 0\n\nOutput:\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nNo\nNo\nNo\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"3 3 1\") == \"No\"\n\nimport stdin\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == \"Yes\"\n\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    a, b, c = line.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if c < a < b or c > a > b:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\nprint(\"Yes\" if c >= a and c <= b else \"No\")\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"2 1 1\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 3\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 2 3') == 'No'\nassert solution('4 2 3') == 'No'\n\"\"\"\n\nimport sys\nimport os\n\ntest_cases = []\ntest_cases.append(('1 3 2', 'Yes'))\ntest_cases.append(('1 2 3', 'No'))\ntest_cases.append(('4 2 3', 'No'))"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == 'Yes'\n\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\n\nimport sys\n\nN, X = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\nl = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\nl.sort()"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1000\n120\n100\n140\n''') == '9'\n\nassert solution('''3 1000\n120\n100\n140\n''') == '9'\n\nassert solution('''2 10\n5\n8\n''') == '2'\n\nassert solution('''2 10\n5\n8\n''') == '2'\n\nassert solution('''1 1000\n1\n''') == '0'"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\nprint(\"Tests passed.\")\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\nassert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1000') == '9'\n\n\"\"\"\n\nimport math\n\nfrom collections import Counter\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\n\"\"\"\n\nimport sys\n\nN, X = map(int, sys.stdin.readline().split())\nm = [int(sys.stdin.readline()) for _ in range(N)]\nprint(sum([max(0, c - X // i) for c, i in zip(m, [1, *[2] * (N - 1)])]))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 'apple', 'orange', 'apple') == 2\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n\") == '2'\n\nassert solution(\"3\\napple\\norange\\napple\\n\") == '2'\n\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\napple') == '1'\nassert solution('1\\norange') == '1'\nassert solution('1\\napple\\norange') == '2'\nassert solution('2\\napple\\norange') == '2'\nassert solution('3\\napple\\norange') == '2'\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\\napple\\no\\negg\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\\norange\\napple\") == \"2\"\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\napple') == '2'\nassert solution('3\\norange') == '2'\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(':apple') == 'apple'\nassert solution(':orange') == 'orange'\nassert solution(':apple') == 'apple'\nassert solution(':orange') == 'orange'\nassert solution(':') == 'apple'\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == 1\nassert solution('1\\n2') == 2\nassert solution('1\\n3') == 3\nassert solution('1\\n4') == 4\nassert solution('1\\n5') == 5\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apple'\nassert solution('orange') == 'orange'\nassert solution('apple, apple') == 'apple, apple'\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\napple\\norange\\napple') == '2'\nassert solution('7\\nbanana\\napple\\norange\\napple') == '4'\n\n------\n\nn = int(stdin.readline())\ns = set()\nfor _ in range(n):\n    s.add(stdin.readline().strip())\nprint(len(s))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2100 2500 2700 2700\\n\") == \"2 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\nprint(solution(stdin))"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2100 2700 2700\") == \"2 2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4\n2100 2500 2700 2700\n''') == '2 2'\nassert solution('''\n5\n1600 2400 2700 2700 2800 2800\n''') == '1 2'\nassert solution('''\n10\n2100 2500 2700 2700 2800 2800 2800 2800 2800 2900\n''') == '5 2'\nassert solution('''\n4\n2100 2500 2700 2700\n''') == '1 1'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2100 2500 2700 2700') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2100 2500 2700 2700\") == \"2 2\"\nassert solution(\"800 1200 1600 2000 2300\") == \"8 8\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\n\nfrom functools import reduce\nfrom operator import add"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oxo') == 900\nassert solution('xxx') == 700\n\"\"\"\n\n\"\"\"\n14. Write a program to check whether the input string is a palindrome or not.\nFor example, the string \"radar\" is a palindrome, and the string \"stop\" is not a palindrome.\n\n-----Constraints-----\n - S is a string of length between 1 and 100, inclusive.\n - Each character in S is a lowercase English alphabetic letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint True if S is a palindrome, otherwise, print False.\n\n-----Sample Input-----\nradar\n\n-----Sample Output-----\nTrue\n\nThe string radar is a palindrome, so the output is True.\n\n-----Sample Input-----\nstop\n\n-----Sample Output-----\nFalse\n\nThe string stop is not a palindrome, so the output is False.\n\"\"\"\n\n\"\"\"\n15. Write a program that calculates the sum of all the multiples of 3 or 5 below a given number n.\nFor example, for n = 100, you need to find the sum of all the multiples of 3 or 5 below 100, i.e. 3, 5, 6, 9, 10, 12, 15, 18, 20,....99.\n\n-----Constraints-----\n - 1 <= n <= 10^18\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the sum of all the multiples of 3 or 5 below n.\n\n-----Sample Input-----\n100\n\n-----Sample Output-----\n23\n\nThe sum of all the multiples of 3 or 5 below 100, i.e. 3, 5, 6, 9, 10, 12, 15, 18, 20,...99, is 23.\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oxo') == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ooxx\") == 900\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oxo') == 900\nprint('Success')\n\n----------------------------------\n\nYou go on a trip with your best friend, and you have a list of places to visit. You're planning to go from place A to place B and then you want to go from place B to place C. However, you want to make sure that there's enough time for you to get to place C.\n\nFrom A to B: take x (in minutes) minutes\nFrom B to C: take y (in minutes) minutes\n\nReturn the minimum time in minutes that you will need to travel from place A to place C.\n\n-----Constraints-----\n - x and y are integers, 1 <= x, y <= 1000\n - x and y will be in the same order as the given places.\n\n-----Input-----\nInput is given in the following format:\nint x\nint y\n\n-----Output-----\nPrint the minimum time in minutes that you will need to travel from place A to place C.\n\n-----Sample Input-----\n5 4\n\n-----Sample Output-----\n20\n\n----------------------------------\n\nYou're in the middle of a jungle. You see a path to the left and right with a sign pointing north. You're at the end of the path and need to decide which way to go.\n\nThe sign says \"LEFT\" on the left and \"RIGHT\" on the right. Which way should you go?\n\n-----Constraints-----\n - x and y are integers, 0 <= x <= 1000\n\n-----Input-----\nInput is given in the following format:\nint x\nint y\n\n-----Output-----\nPrint LEFT if you want to go left or RIGHT if you want to go right.\n\n-----Sample Input-----\n5\n4\n\n-----Sample Output-----\nRIGHT\n\n----------------------------------\n\nYou are playing a solitaire game. The game consists of two stacks of cards: the goal is to arrange them in ascending order, using a new stack of cards. The cards are represented by integers, and the corresponding rules are as follows:\n\n-   The first card in the initial stack is called the foundation; no other card is called the foundation.\n-   During the game, if a card has a higher value than the card immediately above it, this card moves above the card that has the lower value.\n\nIn this problem, you will be playing with a deck of cards represented as a string of space-separated integers. The goal of the game is to arrange all of the cards in ascending order by moving the top cards to the bottom.\n\nReturn a string representing the final state of the game.\n\n-----Constraints-----\n - N is a positive integer, 2 <= N <= 1000\n\n-----Input-----\nInput is given in the following format:\nstring N\n\n-----Output-----\nPrint the final state of the game.\n\n-----Sample Input-----\n2 3 5 1 4\n\n-----Sample Output-----\n5 4 1 3 2\n\n----------------------------------\n\n-   A set of four cards, each represented by a single positive integer, are placed face-up on a table. The objective is to arrange them in ascending order, using a new set of cards. The cards are represented by integers, and the corresponding rules are as follows:\n\n-   The first card in the initial set is called the foundation; no other card is called the foundation.\n-   During the game, if a card has a higher value than the card immediately above it, this card moves above the card that has the lower value.\n\nIn this problem, you will be playing with a deck of cards represented as a string of space-separated integers. The goal of the game is to arrange all of the cards in ascending order by moving the top cards to the bottom.\n\nReturn a string representing the final state of the game.\n\n-----Constraints-----\n - N is a positive integer, 2 <= N <= 1000\n\n-----Input-----\nInput is given in the following format:\nstring N\n\n-----Output-----\nPrint the final state of the game.\n\n-----Sample Input-----\n2 3 5 1 4\n\n-----Sample Output-----\n5 4 1 3 2\n\n----------------------------------\n\n-   You're given a set of integers with duplicates. You need to find the size of the largest subset of integers, which are all distinct (i.e. there are no duplicates in the set).\n\nInput\nThe first line of the input contains an integer T, the number of test cases. T test cases follow.\n\nEach test case contains a single line of input containing a set of integers S.\n\nOutput\nFor each test case, output a single line containing the largest size of the subset.\n\nConstraints\n1 \u2264 T \u2264 1000\n0 < len(S) \u2264 1000\n0 < S[i] \u2264 1000, for each valid i\n\nExample\nInput:\n3\n1 3 4 5\n2 4 4\n3 4 5\n\nOutput:\n2\n2\n3\n\nExplanation:\nFor the first test case, the subset of distinct integers are {1, 3, 4, 5}, so the answer is 4.\n\nFor the second test case, the subset of distinct integers are {2, 4, 4}, so the answer is 2.\n\nFor the third test case, the subset of distinct integers are {3, 4, 5}, so the answer is 3.\n\n----------------------------------\n\n-   You're given a string S. Your task is to find the length of the longest substring of S that contains no repeated characters.\n\nInput\nThe only line of input contains a string S, with length in range [1, 1000].\n\nOutput\nPrint the length of the longest substring with no repeated characters.\n\nConstraints\n-   The string contains only uppercase English letters.\n\nExample\nInput:\nGEEKSFORGEEKS\n\nOutput:\n7\n\nExplanation:\nThe longest substring without repeated characters is GEEKSFORGEEKS, so the answer is 7.\n\n----------------------------------\n\n-   You're given a string S. Your task is to find the longest substring that contains no repeated characters.\n\nInput\nThe only line of input contains a string S, with length in range [1, 1000].\n\nOutput\nPrint the length of the longest substring with no repeated characters.\n\nConstraints\n-   The string contains only uppercase English letters.\n\nExample\nInput:\nGEEKSFORGEEKS\n\nOutput:\n7\n\nExplanation:\nThe longest substring without repeated characters is GEEKSFORGEEKS, so the answer is 7.\n\n----------------------------------\n\n-   You're given two strings S1 and S2. The task is to find the longest common substring of S1 and S2.\n\nInput\nThe first line of input contains an integer T, i.e. the number of test cases. The only line of each test case contains two strings S1 and S2.\n\nOutput\nPrint the longest common substring of S1 and S2.\n\nConstraints\n-   1 \u2264 T \u2264 10\n-   1 \u2264 |S1|, |S2| \u2264 10^5\n\nExample\nInput:\n2\ngeeksforgeeks\ngeeksgeeks\n\nOutput:\ngee\n\nExplanation:\nFor the first test case, gee is the longest common substring of S1 and S2.\n\nFor the second test case, geeks is the longest common substring of S1 and S2.\n\n----------------------------------\n\n-   You're given a string S. Your task is to find the longest substring that contains at most two distinct characters.\n\nInput\nThe only line of input contains a string S, with length in range [1, 1000].\n\nOutput\nPrint the length of the longest substring with at most two distinct characters.\n\nConstraints\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xox\") == 700\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oxo') == 900\nassert solution('xox') == 700\nassert solution('ooo') == 700\nassert solution('xo') == 700\nassert solution('ox') == 700\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ooxx\") == 1000\nassert solution(\"ooo\") == 800\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\nprint(solution(\"oxo\"))"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xo\") == 700\nassert solution(\"ooo\") == 700\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\na, b = input().split(' ')\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"H\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HH') == 'H'\nassert solution('DH') == 'D'\n\"\"\"\n\nimport sys\n\ntest_cases = [('HH', 'H'), ('DH', 'D')]\n\nfor test_case in test_cases:\n    stdin = test_case[0]\n    expected = test_case[1]\n    print(stdin, expected)\n\n    result = solution(stdin)\n    print(result)\n    assert result == expected\n\nprint('Test Success!')"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DD\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('HH') == 'H'\nassert solution('DH') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'H'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"7\") == \"7=7\"\nassert solution(\"123\") == \"1+2+3=6\"\nassert solution(\"1233\") == \"1+2+3+3=10\"\nassert solution(\"10\") == \"10=10\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('10101') == '1-0-1-0=7'\nassert solution('101010') == '1-0-0-1-0=7'\nassert solution
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nprint(solution(\"1222\"))"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\n-------Test-------\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5\n1 1 2 2\"\"\"\n        output = \"\"\"2\n2\n0\n0\n0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"6\n1 1 2 2 3 3\"\"\"\n        output = \"\"\"0\n1\n0\n0\n0\n1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"5\n1 1 1 1\"\"\"\n        output = \"\"\"4\n0\n0\n0\n0\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n4 1 2 2\") == \"0\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n5 4 2 2\") == \"0\\n0\\n0\\n0\\n0\"\nassert solution(\"5\\n4 5 2 2\") == \"0\\n0\\n0\\n0\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(1)) == str(0)\nassert solution(str(2)) == str(1)\nassert solution(str(3)) == str(0)\nassert solution(str(4)) == str(2)\nassert solution(str(5)) == str(3)\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"6\\n2 1 5 1 5 3\") == \"3\\n0\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(5)) == str(2)\nassert solution(str(1)) == str(2)\nassert solution(str(2)) == str(0)\nassert solution(str(3)) == str(0)"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n3 1\") == \"1\\n2\\n0\\n0\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nx = int(input())\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\nprint('Test pass.')"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n') == '3'\nassert solution('5\\n') == '3'\nassert solution('3\\n') == '1'\n\nassert solution('12\\n') == '8'\nassert solution('21\\n') == '16'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\nassert solution('0') == '0'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('6') == '3'\nassert solution('7') == '4'\n\"\"\"\nfrom utils import checkValue\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '3'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1111) == 'Yes'\nassert solution(2234) == 'No'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"101\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1198') == 'No'\nassert solution('1000') == 'Yes'\nassert solution('1111') == 'Yes'\nassert solution('9222') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('123') == \"No\"\nassert solution('9999') == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('3334') == 'No'\nassert solution('1234') == 'No'\nassert solution('2222') == 'No'\nassert solution('6667') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\"\n\nn = int(stdin.readline())\n\ncount = 0\n\nfor i in range(1000, n+1):\n    str_n = str(i)\n    if len(set(str_n)) == 4:\n        count += 1\n        if \"11\" in str_n:\n            count -= 1\n            break"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == '3'\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 5\n2 4\n3 6\n''') == '3'\nassert solution('''\n2\n1 5\n2 4\n3 6\n''') == '3'\nassert solution('''\n3\n1 2 3\n2 4 5\n3 6 7\n''') == '0'\nassert solution('''\n3\n1 1 1\n2 2 2\n3 3 3\n''') == '0'\nassert solution('''\n4\n1 2 3 4\n2 5 3 6\n3 7 4 8\n4 9 5 10\n''') == '6'\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nupper = list(map(int, input().split()))\nmiddle = list(map(int, input().split()))\nlower = list(map(int, input().split()))\ncounter = Counter(upper + middle + lower)\nprint(sum(map(lambda x: (x[1] - 1) * x[0] >= (x[0] - 1) * x[1], counter.items())))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n1 5\n2 4\n3 6''') == '3'\nprint('Test success.')"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5\\n2 4\\n3 6') == '3'\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\nassert solution('B B') == '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A A\") == \"=\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == '<'\nassert solution('D E') == '>'\nassert solution('B B') == '='\nassert solution('A C') == '>'\nassert solution('B D') == '<'\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\") == \"<\"\nassert solution(\"Aa\") == \">\"\nassert solution(\"Bb\") == \"=\"\nassert solution(\"AaBb\") == \"=\"\nassert solution(\"AaaBb\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"A B\") == \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A B') == '<'\nassert solution('A A') == '='\nassert solution('A F') == '>'\n\"\"\"\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"C D\") == \">\"\nassert solution(\"E F\") == \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"C F\") == \">\"\nassert solution(\"A E\") == \"=\"\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B\") == \">\"\n\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'A B'\n) == '<'\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('2 5\\n...#.\\n..##') == '1#2#1'\nassert solution('2 6\\n..#..\\n..##') == '111122'\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import groupby"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n.##.\\n..#.\") == \"1211\\n1#2#1\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nprint(\"\ud1b5\uacfc\")\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n.....\\n.#.#.') == '11211'\nassert solution('3 5\\n.....\\n.#.#.') == '1#2#1'\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n.#\\n...\\n') == '11211'"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"1#2#1\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"1#2#1\"\n\n\"\"\"\nimport sys\nfrom itertools import zip_longest\nfrom typing import List"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_solution\n\n\"\"\"\nfrom typing import List\nfrom functools import reduce"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List\nfrom collections import namedtuple\n\nBook = namedtuple('Book', ['id', 'time'])\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import List\n\n@dataclass\nclass Command:\n    time: int\n    desk: str\n    book: int\n\n    @classmethod\n    def from_str(cls, line: str):\n        args = line.split(' ')\n        return cls(int(args[0]), args[1], int(args[2]))\n\n    def to_str(self):\n        return''.join([str(self.time), self.desk, str(self.book)])\n\n@dataclass\nclass Desk:\n    book_count: int\n    time: int = 0\n    books: List[int] = field(default_factory=list)\n\n    def read_topmost_book(self):\n        if self.books:\n            self.time += self.books.pop(0)\n            self.book_count -= 1\n\n    def add_book(self, book):\n        self.books.append(book)\n        self.book_count += 1"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '3'\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_data)) == str(sample_output_data)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\nimport math"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\nimport sys\n\nA, B, C, X, Y = [int(i) for i in sys.stdin.read().split()]\n\nfirst_total = A * X + B * Y"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(15002000160032) == 7900\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nfrom typing import List\nfrom math import ceil\n\nA, B, C, X, Y = map(int, input().split())\n\nans = X * A + Y * B + ceil((X + Y) / 2) * C\nprint(ans)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nprint(solution(\"1500 2000 1600 3 2\"))\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\nimport sys\n\na, b, c, x, y = map(int, sys.stdin.read().split())"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"5000 5000 2000 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"6\"\nassert solution(\"4\") == \"8\"\nassert solution(\"10\") == \"18\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 2\nassert solution('3') == 4\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 4\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('10\\n') == '12'\n\nimport sys"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"4\"\nassert solution(\"5\\n\") == \"9\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"7\\n\") == \"0\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\nassert solution('5') == '1'\nassert solution('6 10') == '6'\nassert solution('4 5') == '5'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '4\\n'\nassert solution('3\\n') == '4\\n'\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\n---"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('12') == '9'\nassert solution('99') == '99'\nassert solution('100') == '99'\nassert solution('101') == '101'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nprint(solution('10'))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"3\"\nassert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"97\"\nassert solution(\"1000\") == \"1000\"\n\n-------------\nIf x can be expressed as a^b, we can calculate the highest b possible.\nIf x is not a perfect power, we can try to calculate the highest power p possible such that p*b is less than or equal to x."
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('10') == '9'\n\"\"\"\n\n\"\"\"\nWe have to find maximum of number in array of number, \nwhere each number of array is represented as b^p, where b is an integer not less than 1 and p is an integer not less than 2.\n\nLet's consider an example, when input data is given as:\n\n8\n\nThen possible solutions are:\n\n8 = 2^3\n8 = 4^1\n8 = 8^0\n\nAll of them satisfy the conditions. The only case when condition is not met is, when 8 = 8^0.\n\nNow, consider the second example:\n\n10\n\nThen possible solutions are:\n\n10 = 2^5\n10 = 2^3 * 5\n10 = 2^3 * 5 * 2\n10 = 2^5 * 5\n10 = 2^5 * 5 * 2\n10 = 2^5 * 5 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n10 = 2^5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 2 * 2 * 5 * 5 * 5 * 2 * 2 * 2 * 2 * 2"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"9\") == \"9\"\nassert solution(\"8\") == \"8\"\nassert solution(\"7\") == \"7\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"9\"\n) == \"9\"\nassert solution(\n\"8\"\n) == \"9\"\nassert solution(\n\"7\"\n) == \"8\"\nassert solution(\n\"10\"\n) == \"9\"\nassert solution(\n\"1\"\n) == \"1\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n8\\n8\\n6\\n') == '3'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = []\nfor _ in range(N):\n    d.append(int(sys.stdin.readline().rstrip()))"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == 3\n\"\"\"\n\nn = int(input())\nd_li = list(map(int, input().split('\\n')))\n\nd_li.sort(reverse=True)\n\ncount = 0\n\nfor i in range(n):\n    if i == 0:\n        count += 1\n    else:\n        if d_li[i] < d_li[i-1]:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nprint(solution(\"4\\n10\\n8\\n8\\n6\"))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n\"\"\"\n\nn = int(stdin.readline())\nd = [int(stdin.readline()) for _ in range(n)]\nprint(n - max([(i - 1) // d[0] for i in d]))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    4\n    10\n    8\n    8\n    6\n    \"\"\"\n) == 3\nassert solution(\n    \"\"\"\n    5\n    1\n    1\n    1\n    1\n    \"\"\"\n) == 1\nassert solution(\n    \"\"\"\n    4\n    10\n    8\n    8\n    \"\"\"\n) == 3\nassert solution(\n    \"\"\"\n    10\n    8\n    8\n    8\n    \"\"\"\n) == 1\nassert solution(\n    \"\"\"\n    3\n    1\n    1\n    \"\"\"\n) == 1\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == 5\n\"\"\"\n\ns = input()\n\nsubstring = s[s.find('A'):(s.find('Z') + 1)]\n\nprint(len(substring))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 2\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"4\\n2 4 8 16\") == \"2\"\nassert solution(\"4\\n3 6 9 12\") == \"3\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\n------\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"4\\n2 3 6 10\") == \"3\"\nassert solution(\"4\\n8 12 40\") == \"2\"\n\"\"\"\nimport numpy as np\nfrom operator import itemgetter\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 12 40\\n') == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 40\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 12 40\") == '2'\nassert solution(\"3 16 4\") == '1'\nassert solution(\"1 1\") == '0'\nassert solution(\"2 3\") == '0'\nassert solution(\"100 100\") == '0'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n8 12 40\") == 2\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n8 12 40\") == '2'\nassert solution(\"4\\n6 10 20 30\") == '2'\nassert solution(\"8\\n9 10 20 30 40\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 12 40') == '2'\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\nassert solution(\"2\\n\") == \"1\"\n\nassert solution(\"1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('10') == '12'\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '6'\n\nfrom math import log10"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\nimport sys\nimport unittest"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == 6\n\"\"\"\n\n\"\"\"\nThought process:\nThe key is to find Snuke's power at each line.\nThe answer will be Snuke's power ^ N.\nSo it is about how to find Snuke's power.\nWe can use binary search to find Snuke's power.\nSince the answer can be extremely large, we modulo the answer by 10 ** 9 + 7.\nFor example, if N is 10 ** 9, then Snuke's power will be 10 ** 9.\nTo find Snuke's power, we can use binary search to find the result of Snuke's power ^ N.\nIf the result is larger than N, the power is less than N.\nIf the result is smaller than N, the power is larger than N.\nWe can binary search from 10 ** 9 + 1 to 0.\nThe number of operations needed to find Snuke's power is log(N) to the base of 2.\nSo the complexity of the solution is O(logN)\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\nimport math\n\nN = int(stdin.readline().strip())\nans = 0\nfor _ in range(N):\n    ans *= 2\n    ans %= 10 ** 9 + 7\nprint(ans)\n\n\"\"\"\nComplexity analysis:\nTime complexity: O(N)\nSpace complexity: O(1)\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\nimport math\n\nN = int(stdin.readline().strip())\nans = 1\nfor _ in range(N):\n    ans *= 2\n    ans %= 10 ** 9 + 7\nprint(ans)\n\n\"\"\"\nComplexity analysis:\nTime complexity: O(N)\nSpace complexity: O(1)\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nimport sys\n\nN = sys.stdin.readline()\n\nmod = 1000000000\n\nans = 1\n\nfor i in range(0, int(N)):\n    ans = ans * (i + 1) % mod\n\nprint(ans)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '6'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3'\n) == 6\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '10'\nassert solution('5') == '15'\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '6'"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 6\nassert solution('7') == 8\n\"\"\"\nimport sys"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"10\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('3\\n1 1 1') == '0'\n\"\"\"\n\nN = int(input())\ncards = list(map(int, input().split()))\n\nalice = 0\nbob = 0\n\nfor c in cards:\n    if c % 2 == 0:\n        alice += c\n    else:\n        bob += c\n\nprint(alice - bob)"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\ncards = [int(s) for s in sys.stdin.readline().split()]"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\nprint(solution(\"2\\n3 1\"))\n'''"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n\nn = int(input())\ncards = list(map(int, input().split()))\n\nAlice = 0\nBob = 0\n\nfor card in cards:\n    Alice += card\n    Bob -= card\n\nprint(Alice - Bob)"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == result"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"input_7.txt\", 'r').read()) == \"AC 2 WA\"\nprint(\"assert tests passed!\")\n\n\"\"\"\n\nn, m = [int(s) for s in input().split(' ')]\nsubmissions = []\nfor _ in range(m):\n    submissions.append([int(s) for s in input().split(' ')])\n\ntakahashi_correct_answers = 0\ntakahashi_penalties = 0\n\nfor i in range(len(submissions)):\n    for j in range(len(submissions[i])):\n        if submissions[i][j] == 1:\n            takahashi_correct_answers += 1\n        elif submissions[i][j] == -1:\n            takahashi_penalties += 1\n        else:\n            if j == 0:\n                takahashi_correct_answers -= 1\n                takahashi_penalties -= 1\n                \nprint(takahashi_correct_answers, takahashi_penalties)"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"2 4\\n1 WA\\n1 AC\\n2 WA\\n2 WA\") == \"0 2\"\nassert solution(\"4 4\\n1 AC\\n1 WA\\n2 AC\\n1 AC\") == \"2 2\"\nassert solution(\"2 2\\n1 AC\\n1 AC\") == \"0 0\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 WA\\n2 AC\\n3 WA\") == \"2 3\"\nassert solution(\"4 3\\n1 AC\\n2 WA\\n3 AC\\n4 WA\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(\"Passed.\")\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nn, m = map(int, input().split())\ns = {0: 0, 1: 0}\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    s[y] += 1\n\nfor i in range(1, n + 1):\n    if s[i] == 0:\n        s[i] = s[i - 1] + 1\n\nprint(s[n], s[n - 1])\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n4 1 5\") == 5\n\"\"\"\n\n\"\"\"\nBFS\nFind the shortest path.\n\"\"\"\nfrom collections import deque\n\nN, K = map(int, stdin.readline().strip().split())\nhealth = list(map(int, stdin.readline().strip().split()))\n\nq = deque()\nq.append((0, 0))  # path, health\n\nret = float('inf')\n\nwhile q:\n    path, health = q.popleft()\n    if path >= ret:\n        continue\n    if health == 0:\n        ret = min(ret, path)\n    else:\n        for i in range(N):\n            if health[i] > 0:\n                health[i] -= 1\n                q.append((path + 1, health))\n                health[i] += 1\n\nprint(ret)\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"\n\nfrom math import ceil\n\nN, K = map(int, stdin.readline().strip().split())\nH = [int(x) for x in stdin.readline().strip().split()]"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1\n4 1 5''') == 5\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == '4'\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"input.txt\").read()) == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 2\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n10\n2\n1 3\n2 6\n4 1''') == '4'\n\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\nassert solution('2\\n10\\n2\\n') == '16'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\\n1 2\\n2\") == 4\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"\n\n\nfrom collections import Counter\nfrom fractions import gcd\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10\\n2\\n') == '4'\n\n\"\"\"\n\nN, K = map(int, input().split())\n\nballs = [tuple(map(int, input().split())) for _ in range(N)]\n\ndists = [(0, 0)]\nfor i in range(N):\n    y, x = balls[i]\n    dists.append((x, y, abs(x - 0) + abs(y - i)))\n    dists.append((K, y, abs(K - x) + abs(y - i)))\n\ndists.sort(key=lambda x: x[2])\n\nx, y, d = 0, 0, 0\nfor a, b, d2 in dists:\n    if a == x:\n        x, y = b, y + 1\n        d += d2\n    else:\n        x, y = a, y + 1\n        d += d2 + abs(a - K)\n        d += d2\n\nprint(d)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 10 2') == 4\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 10 2\\n') == '4'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n2\\n\") == \"4\"\n\"\"\"\n\nN, K = list(map(int, stdin.readline().split()))\n\nballs = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\ndistance = 0\nfor ball in balls:\n    distance += max(ball)\n\nprint(distance + K)\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\n\"\"\"\nREAD THE PROBLEM FIRST, THEN READ THIS CODE.\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('600 300 220 420') == '520'\nprint('Test pass.')\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nA, B, C, D = [int(x) for x in input().split()]\nprint(min(A+B, C+D, A+C, A+D, B+C, B+D))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''600\n300\n220\n420''') == '520'\nprint('Test pass.')\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"800 300 220 420\") == \"520\"\nassert solution(\"800 300 220 400\") == \"520\"\nassert solution(\"800 300 220 400 500\") == \"520\"\nassert solution(\"800 300 220 420 500 600\") == \"520\"\n\"\"\"\n\n\"\"\"\n4.53.\n\n2.1.\n\nFind the minimum number of squares we have to cover.\n\n-----Constraints-----\n - 1 \\leq n \\leq 2 * 104\n - n is odd.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the minimum number of squares we have to cover.\n\n-----Sample Input-----\n7\n\n-----Sample Output-----\n1\n\nn = 7, so the minimum number of squares we have to cover is 1.\n\"\"\"\n\n\"\"\"\n2.3.\n\nThe first two consecutive numbers to have two distinct prime factors are:\n\n14 = 2 \u00d7 7\n15 = 3 \u00d7 5\n\nThe first three consecutive numbers to have three distinct prime factors are:\n\n644 = 2\u00b2 \u00d7 7 \u00d7 23\n645 = 3 \u00d7 5 \u00d7 43\n646 = 2 \u00d7 17 \u00d7 19.\n\nFind the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?\n\n-----Constraints-----\n - 2 \\leq n \\leq 1 000 000\n - n is odd.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n\nn\n\n-----Output-----\nPrint the first four consecutive integers to have four distinct prime factors each.\n\n-----Sample Input-----\n11\n\n-----Sample Output-----\n644\n\nThe first number 644 has four distinct prime factors: 2, 7, 23 and 41.\n\nThe next number 645 has four distinct prime factors: 3, 5, 43 and 101.\n\nThe next number 646 has four distinct prime factors: 2, 17, 19, and 37.\n\nThe next number 647 has four distinct prime factors: 13, 17, 19, and 37.\n\nSo the first four consecutive integers to have four distinct prime factors each are 644, 645, 646, and 647.\n\n\"\"\"\n\n\"\"\"\n4.54.\n\nGiven n, the number of students who have subscribed to the English newspaper, and k, the number of students who have subscribed to the French newspaper, find the number of students who have subscribed to both newspapers.\n\n-----Constraints-----\n - 1 \\leq n, k \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nk\n\n-----Output-----\nPrint the number of students who have subscribed to both newspapers.\n\n-----Sample Input-----\n9\n3\n\n-----Sample Output-----\n3\n\nThere are 3 students who have both subscriptions.\n\n\"\"\"\n\n\"\"\"\n4.55.\n\nGiven the price per kilo of apples, the price per kilo of oranges, and the number of kilograms of apples and oranges, calculate and print the total amount of money we have to pay if we buy apples and oranges in the following manner: we buy apples and oranges in quantities proportionate to their price per kilo (we pay apple_price_per_kilo * apple_kilos and orange_price_per_kilo * orange_kilos).\n\n-----Constraints-----\n - 0 \\leq apple_kilos, orange_kilos \\leq 10^9\n - 0 \\leq apple_price_per_kilo, orange_price_per_kilo \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\napple_price_per_kilo\norange_price_per_kilo\napple_kilos\norange_kilos\n\n-----Output-----\nPrint the total amount of money we have to pay if we buy apples and oranges in the manner described above.\n\n-----Sample Input-----\n1\n1\n2\n2\n\n-----Sample Output-----\n5\n\nThe price of 2 kilograms of apples is 1, the price of 2 kilograms of oranges is 1, and the total amount of money we have to pay if we buy apples and oranges in quantities proportionate to their price per kilo is 1 + 1 = 2.\n\nThe price of 2 kilograms of apples is 1, the price of 2 kilograms of oranges is 1, and the total amount of money we have to pay if we buy apples and oranges in quantities proportionate to their price per kilo is 2 + 2 = 4.\n\n\"\"\"\n\n\"\"\"\n4.56.\n\nGiven n, the number of squares we want to cover, and k, the number of obstacles that we are not allowed to remove from the board, find and print the minimum number of squares we have to remove in order to achieve this goal.\n\n-----Constraints-----\n - n \\leq 10^5\n - k \\leq n\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nk\n\n-----Output-----\nPrint the minimum number of squares we have to remove in order to achieve this goal.\n\n-----Sample Input-----\n6\n1\n\n-----Sample Output-----\n3\n\nThere are 6 squares (numbered 1 through 6) on the board.\nIf we remove square number 3, the board will have only 5 squares; square number 2 and 4 will still be on the board.\nIf we remove square number 2, the board will have only 4 squares; square number 1, 3, and 5 will still be on the board.\nIf we remove square number 1, the board will have only 3 squares; square number 2, 4, and 6 will still be on the board.\nIf we remove square number 6, the board will have only 2 squares; square number 4 and 5 will still be on the board.\nIf we remove square number 4, the board will have only 1 square (number 5); square number 2 will still be on the board.\nTherefore, the minimum number of squares we have to remove is 3.\n\"\"\"\n\n\"\"\"\n4.57.\n\nGiven n, the number of people who are planning to interview in total, and m, the number of people who are busy preparing for interviews, find the maximum number of interviews that can be held.\n\n-----Constraints-----\n - 1 \\leq n, m \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nm\n\n-----Output-----\nPrint the maximum number of interviews that can be held.\n\n-----Sample Input-----\n4\n3\n\n-----Sample Output-----\n4\n\nThere are 4 people who are planning to interview in total, and 3 of them are busy preparing.\n\nIf we try to hold two interviews at once, there will be 2 interviews left for the people who are not busy preparing.\nSo, the maximum number of interviews we can hold is 4.\n\"\"\"\n\n\"\"\"\n4.58.\n\nGiven the price per kilo of apples, the price per kilo of oranges, and the number of kilograms of apples and oranges, find and print the total amount of money we have to pay if we buy apples and oranges in the following manner: we buy apples and oranges in quantities proportionate to their price per kilo (we pay apple_price_per_kilo * apple_kilos and orange_price_per_kilo * orange_kilos).\n\n-----Constraints-----\n - 0 \\leq apple_kilos, orange_kilos \\leq 10^9\n - 0 \\leq apple_price_per_kilo, orange_price_per_kilo \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\napple_price_per_kilo\norange_price_per_kilo\napple_kilos\norange_kilos\n\n-----Output-----"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('1 2 3 4') == '0'\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 0 2\") == \"4\"\nassert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"5\\n2 3 4 0 2\") == \"0\"\nassert solution(\"5\\n2 4 2 0 2\") == \"2\"\nassert solution(\"5\\n2 4 2 1 2\") == \"2\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4\\n'\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2') == 4\nassert solution('6\\n2 2 3 1 2 0 2') == 0\nassert solution('3\\n0 0 0') == 0\nassert solution('3\\n0 1 0') == 1\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('3 3 4 1 2') == 1\nassert solution('3 1 4 2 5') == 0\nassert solution('5 1 2 4 0 3') == 1\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\"\n\n\"\"\"\npublic class Solution {\n    public int solution(String[] stdin) {\n        int n = stdin.length;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(stdin[i]);\n        }\n        int[] d = new int[n];\n        for (int i = 0; i < n; i++) {\n            d[i] = i + 1;\n        }\n        // d[i] = A[i]\n        int[][] memo = new int[n][n];\n        Arrays.fill(memo, Integer.MIN_VALUE);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (a[i]!= a[j]) {\n                    memo[i][j] = Math.abs(j - i);\n                } else {\n                    memo[i][j] = Integer.MIN_VALUE;\n                }\n            }\n        }\n        // Memo[i][j] = min(Memo[i][j], abs(j-i))\n        int[] res = new int[n];\n        boolean found = false;\n        for (int i = 0; i < n; i++) {\n            res[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            if (memo[i][i] > 0) {\n                res[i] = 1;\n                found = true;\n            }\n        }\n        if (found) {\n            for (int i = 0; i < n; i++) {\n                int min = Integer.MAX_VALUE;\n                int min_index = -1;\n                for (int j = 0; j < n; j++) {\n                    if (i!= j && min > memo[j][i]) {\n                        min = memo[j][i];\n                        min_index = j;\n                    }\n                }\n                if (min_index!= -1) {\n                    res[min_index] = res[min_index] + res[i];\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum = sum + res[i];\n        }\n        return sum % 1000000007;\n    }\n}\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n') == ''\nassert solution('2\\n1\\n') == ''\nassert solution('2\\n2\\n') == ''\nassert solution('3\\n2\\n') == ''\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"4\\n2 4 4 0 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\\n\") == \"84\"\nassert solution(\"20 2 5\\n\")!= \"19\"\nassert solution(\"20 2 5\\n\") == \"84\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nfrom math import log10\nfrom sys import stdin\n\nN, A, B = map(int, stdin.readline().strip().split())\n\nans = 0\nfor i in range(1, N + 1):\n    val = 0\n    for d in str(i):\n        val += int(d)\n    if A <= val <= B:\n        ans += i\nprint(ans)"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 2 5\\n\") == \"84\"\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\n-------\nimport sys"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('1') == '1'\nassert solution('a1') == 'a1'\nassert solution('a1b') == 'ab'\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(solution(\"20 2 5\"))\n\nSolution 2\n\nimport math\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2 5\") == 84\n\"\"\"\n\n\n\"\"\"\nsum_digit = lambda x, n: sum([int(i) for i in list(str(x))])\nis_in_range = lambda x, n: n[0] <= sum_digit(x, n) <= n[1]"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('N A B') == '84'\nassert solution('1 2 3') == '6'\nassert solution('2 5') == '14'\nassert solution('3 5') == '15'\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 2 5\\n') == '84'\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == 'ABC100'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline().strip()\n\nn = int(stdin)\n\nprint(f\"ABC{n}\")\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\") == \"ABC100\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\"\nprint(solution(\"100\"))\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5') == '5'\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5') == 5\n\n\"\"\"\n\na, b = map(int, stdin.split(' '))\n\ndays = (b - 1) * 30 + (12 - a) * 365\n\nprint(days)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\"\n\na,b = map(int,stdin.split())\n\nprint(b-a+1)"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5') == '5'\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    \n    def test_1(self):\n        a = '5 5'\n        self.assertEqual(solution(a), '5')\n\n    def test_2(self):\n        a = '5 13'\n        self.assertEqual(solution(a), '4')\n\n    def test_3(self):\n        a = '5 1'\n        self.assertEqual(solution(a), '5')\n\n    def test_4(self):\n        a = '5 1'\n        self.assertEqual(solution(a), '5')\n        \n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"1 4\") == \"6\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"5 15\") == \"0\"\nassert solution(\"5 15 22\") == \"1\"\nassert solution(\"5 15 22 23\") == \"2\"\nassert solution(\"5 15 22 23 26\") == \"3\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5') == '5'\nassert solution('1 2') == '0'\nassert solution('12 12') == '1'\nassert solution('11 1') == '0'\n\"\"\"\n\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(solution('5 5'), '5')\n    def test_case_2(self):\n        self."
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5') == '5'\nprint('Test success.')\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n2\\n1\") == \"2\"\nassert solution(\"3\\n3\\n2\") == \"-1\"\n\"\"\"\nimport sys\nfrom collections import deque\n\nN = int(sys.stdin.readline())\nnums = [0] + list(map(int, sys.stdin.readline().split()))\n\nqueue = deque([1])\npress = 0\n\nfor num in nums[2:]:\n    if num == queue[0]:\n        queue.popleft()\n    else:\n        queue.append(num)"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1\\n2\\n\") == \"2\"\nassert solution(\"5\\n3\\n1\\n2\\n3\") == \"1\"\nassert solution(\"5\\n4\\n1\\n2\\n3\") == \"1\"\n\n-----\n1. Initialize the maximum number of times to press buttons to 0.\n2. For each iteration of the input:\n3. If the current button is 1,\n4. Find the number of times it can be pressed until Button 2 is pressed, and update the maximum number of times to press buttons to the maximum between the current maximum and the number of times to press buttons.\n5. If the current button is not 1,\n6. Find the number of times it can be pressed until Button 2 is pressed, and update the maximum number of times to press buttons to the maximum between the current maximum and the number of times to press buttons.\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3\\n1\\n2\\n') == '2'\nassert solution('1\\n') == '-1'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n2\\n3\") == \"2\"\nassert solution(\"2\\n1\\n2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n3\n1\n2''') == '2'\nassert solution('''4\n3\n1\n2''') == '-1'\nassert solution('''4\n4\n1\n2''') == '1'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n3\\n3\\n\") == \"-1\"\n\n\"\"\"\nfrom collections import deque\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\nassert solution(\"6\\n5\\n5\\n3\\n3\\n4\\n2\") == \"5\"\nassert solution(\"7\\n6\\n5\\n4\\n4\\n5\\n3\\n3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n3\\n1\\n2\\n') == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == '2'\nassert solution(\"2\\n2\\n\") == '-1'\nassert solution(\"3\\n3\\n2\\n2\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"4\\n6\\n2\\n6\") == \"0\"\nassert solution(\"2\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\nprint(\"Teste unit\u00e1rio 1 conclu\u00eddo.\")\nassert solution('4\\n3\\n8\\n6\\n') == '0'\nprint(\"Teste unit\u00e1rio 2 conclu\u00eddo.\")\nassert solution('4\\n3\\n8\\n6\\n') == '0'\nprint(\"Teste unit\u00e1rio 3 conclu\u00eddo.\")\nassert solution('4\\n3\\n8\\n6\\n') == '0'\nprint(\"Teste unit\u00e1rio 4 conclu\u00eddo.\")\nassert solution('4\\n3\\n8\\n6\\n') == '0'\nprint(\"Teste unit\u00e1rio 5 conclu\u00eddo.\")\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\nassert solution('4\\n8\\n1\\n8\\n') == '0'\nassert solution('7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\n7\\n5\\n7\\n4\\"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\\n\") == '1'\nassert solution(\"5 4\\n1 1 2 2 5\\n\") == '0'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2\n1 1 2 2 5''') == 1\n\n-------"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2 5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\n\nfrom sys import stdin\n\nN, K = [int(i) for i in stdin.readline().split()]\nA = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2 5\\n\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, inp: List[str]) -> int:\n        n, k = [int(num) for num in inp[0].split()]\n        arr = [int(num) for num in inp[1].split()]\n        arr.sort()\n        ans = 0\n        for i in range(n):\n            if k <= 1:\n                break\n            if arr[i]!= arr[i - 1]:\n                arr[i] = arr[i - 1]\n                k -= 1\n        return len(set(arr))\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\nWe can simply count the number of different integers that appear in a set of N balls.\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 3, 1, 2) == 'Yes'\nassert solution(6, 1, 1, 1) == 'Yes'\nassert solution(10, 10, 1, 10) == 'No'\nassert solution(1, 1, 1, 1) == 'No'\nassert solution(1, 1, 1, 2) == 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\": 3 1 2\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(': 3 1 2\\n6 1 1\\n:') == 'Yes'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 5\\n2 3 4\\n:') == 'Yes'\n\nimport numpy as np"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 2\\n2 3 4') == 'Yes'\nassert solution('5\\n1 1 2\\n2 3 4\\n5 6 7') == 'No'\nassert solution('5\\n1 1 2\\n2 3 4\\n5 6 7\\n8 9 10') == 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 2\\n6 1 1') == 'Yes'\nassert solution('5 2 1\\n1 2 1\\n4 2 4\\n2 3 1\\n3 3 1') == 'Yes'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 1 2\\n6 1 1\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\ntxy = [sys.stdin.readline().rstrip() for _ in range(N)]\n\ntxy = [(int(x), int(y)) for x, y in txy]\ntxy = sorted(txy)\n\nflag = True\nfor i in range(1, N):\n    if txy[i][0] <= txy[i - 1][1]:\n        if txy[i][1] >= txy[i - 1][1] + 1:\n            continue\n        else:\n            flag = False\n            break"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == 2\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n\nprint(math.ceil(sum([a, b]) / 2))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '2'\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 4\\n\") == \"0\"\nassert solution(\"4 7\\n1 3\\n2 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7''') == '4'\nassert solution('''8 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9''') == '6'\nassert solution('''8 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9''') == '6'\nassert solution('''8 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n9 10''') == '10'\nassert solution('''6 2\n1 2\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7''') == '6'\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"4\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 3\\n2 7') == '4'\n\"\"\"\n\nfrom typing import NamedTuple, List, Dict\n\n\nclass Edge(NamedTuple):\n    from_: int\n    to: int\n\n\nclass Graph(NamedTuple):\n    edges: List[Edge]\n    vertices: int\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == '4'\n\n\"\"\"\n\nfrom queue import Queue\n\nclass Edge:\n    def __init__(self, from_vertex, to_vertex, weight=1):\n        self.from_vertex = from_vertex\n        self.to_vertex = to_vertex\n        self.weight = weight\n\nclass Graph:\n    def __init__(self, vertex_count: int):\n        self.vertex_count = vertex_count\n        self.adjacency_list = [None] * vertex_count\n\n    def add_edge(self, from_vertex, to_vertex):\n        edge = Edge(from_vertex, to_vertex)\n\n        if self.adjacency_list[from_vertex] == None:\n            self.adjacency_list[from_vertex] = [edge]\n        else:\n            self.adjacency_list[from_vertex].append(edge)\n\n        if self.adjacency_list[to_vertex] == None:\n            self.adjacency_list[to_vertex] = [edge]\n        else:\n            self.adjacency_list[to_vertex].append(edge)\n\n    def get_bridges(self):\n        bridges = 0\n        visited = set()\n        for vertex in range(self.vertex_count):\n            if vertex not in visited:\n                bridges += self.get_bridges_helper(vertex, visited)\n        return bridges\n\n    def get_bridges_helper(self, vertex, visited):\n        q = Queue()\n        q.put(vertex)\n        bridges = 0\n        visited.add(vertex)\n\n        while not q.empty():\n            current_vertex = q.get()\n            current_edge = self.adjacency_list[current_vertex][0]\n            for edge in self.adjacency_list[current_vertex]:\n                if edge.from_vertex == current_edge.to_vertex and edge.to_vertex not in visited:\n                    q.put(edge.to_vertex)\n                    bridges += 1\n                    visited.add(edge.to_vertex)\n\n        return bridges\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == '4'\n\n---"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 3\\n2 3\\n1 2\\n2 1') == '4', 'wrong result'\n\"\"\"\n\n\"\"\"\nWrite 5 lines of code to test the correctness of solution:\n\n---SOLUTION---\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 3, 4) == 3\nassert solution(3, 4, 3) == 4\nassert solution(5, 7, 5) == 7\nassert solution(7, 7, 7) == 7\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 1 1') == '1'\nassert solution('5 5 5') == '5'\n\n'''\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5\\n') == '7'\nassert solution('4 4 4\\n') == '4'\nassert solution('2 3 4\\n') == '2'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 5') == '7'\n\nYou can assume that input is given in the correct format.\n\nA B C is given in the following format:  \nA B C\n\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 7, 5) == 7\n\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"4 2 3\") == \"4\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"0 0 1\") == \"1\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10 20 15 200\") == '110 10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nfrom collections import deque\nfrom fractions import Fraction\n\nMAX_SUGAR = 3e3\nMAX_SUBSTANCES = 3e4\nMAX_GRAINS = MAX_SUBSTANCES // 2\nMAX_MASS = 3e4\n\nsugars = {}\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 10 20 15 200''') == '110 10'\n\"\"\"\n\nA, B, C, D, E, F = (int(n) for n in stdin.split())\n\nwater_grams = (F - E) * (A + B)\nsugar_grams = 100 * (C + D)"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 1'\nassert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('abbreviation') == 'abbr'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nprint(solution(\"internationalization\"))\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"internationalization\") == \"i18n\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\n\"\"\"\n\nimport unittest\nfrom typing import List, Set\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    C_11 C_12 C_13\n    C_21 C_22 C_23\n    \"\"\") == \"YES\"\nassert solution(\n    \"\"\"\n    C_11 C_12 C_13\n    C_21 C_22 C_23\n    \"\"\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == 'YES'\nassert solution('a b c\\nd e f\\ng h i') == 'NO'\nassert solution('pot top') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\n------Test Case 2------\nThis problem asks for a test case.\n\n-----Sample Input-----\npot\ntop\n\n-----Sample Output-----\nNO\n\n------Test Case 3------\nThis problem asks for a test case.\n\n-----Sample Input-----\nd\na\n\n-----Sample Output-----\nYES\n\n------Test Case 4------\nThis problem asks for a test case.\n\n-----Sample Input-----\nd\nd\n\n-----Sample Output-----\nNO\n\n----My solution----\n\nimport sys\n\nmatrix = []\nfor line in sys.stdin:\n    matrix.append(line.split())"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\npot\ntop\n''') == 'YES'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\n\"\"\"\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('abcdef') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\nassert solution('abc') == 'a'\nassert solution('abb') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abcb\") == \"ab\"\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'ab'\nassert solution('abcd') == 'abcd'\nassert solution('abcdef') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba') == 'b'\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\nassert solution('abac') == 'bac'\nassert solution('aab') == 'a'\n\"\"\"\n\ns, k = input().strip().split(' ')\nk = int(k)\nsubstring = ''\nfor i in range(len(s)):\n    if i == 0:\n        substring += s[i]\n    else:\n        if s[i] <= substring[-1]:\n            substring += s[i]\n        else:\n            substring = s[i]\n\nprint(substring)"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ababc') == 'b'\nassert solution('zab') == 'z'\nassert solution('ababbc') == 'c'\nassert solution('abc') == 'a'\nassert solution('aaa') == 'a'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"b\"\n\"\"\"\n\ns = input()\nk = int(input())\n\nanswer = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        if len(set(list(s[i:j]))) == k:\n            answer.append(s[i:j])\nanswer.sort()\nprint(answer[k - 1])\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_inputs[0])) == str(sample_outputs[0])\nassert solution(str(sample_inputs[1])) == str(sample_outputs[1])\nassert solution(str(sample_inputs[2])) == str(sample_outputs[2])\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 4 2') == '9'\n'''"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\n\"\"\"\n### Need to find the sum of areas of all the rectangles, painted by a_i.\n### Can do this with the following methods:\n### 1. Iterate over all the lines, which are (x, y, a)\n### 2. Iterate over all the points, which are (x_i, y_i, a_i)\n### 3. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the lines, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. Iterate over all the points, which are (x, y, a)\n### 3. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the lines, which are (x, y, a)\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points, which are (x_i, y_i, a_i)\n### 2. If we want to find the sum of all areas of painted rectangles, then we need to iterate over all the points, which are (x, y, a)\n### 3. Sum up the areas of all the painted rectangles by a_i\n### 4. Sum up the areas of all the painted rectangles by a_i\n###\n### 1. Iterate over all the points,"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n\n-------------\nSample Input 2:\n5 5 5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n3 2 1\n4 3 1\n2 3 4\n3 1 2\n\nSample Output 2:\n6\n\n-------------\nSample Input 3:\n4 5 5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n1 3 1\n2 2 3\n2 2 3\n\nSample Output 3:\n6\n\n-------------\nSample Input 4:\n4 4 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n1 4 2\n\nSample Output 4:\n0\n\n-------------\nSample Input 5:\n5 5 5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n1 1 1\n2 3 2\n2 2 3\n3 3 3\n\nSample Output 5:\n5\n\n-------------\nSample Input 6:\n3 4 2\n1 1 1\n2 2 2\n1 2 1\n\nSample Output 6:\n1\n\n-------------\nSample Input 7:\n8 9 10\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n\nSample Output 7:\n93\n\n-------------\nSample Input 8:\n7 7 7\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n1 1 1\n2 3 2\n2 2 3\n3 3 3\n\nSample Output 8:\n63\n\n-------------\nSample Input 9:\n1 0 1\n0 1 1\n1 1 1\n\nSample Output 9:\n1\n\n-------------\nSample Input 10:\n10 10 1\n0 0 1\n1 0 1\n0 1 1\n1 0 1\n0 0 1\n0 0 1\n1 0 1\n1 1 1\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n\nSample Output 10:\n10\n\n-------------\nSample Input 11:\n3 5 6\n2 1 1\n2 3 1\n2 4 1\n2 2 1\n\nSample Output 11:\n9\n\n-------------\nSample Input 12:\n3 5 6\n2 1 1\n3 2 1\n2 3 1\n3 2 1\n\nSample Output 12:\n0\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 10 1\\n') == '12\\n11\\n0'\n\"\"\"\n\n\"\"\"\n\n-----SOLUTION-----\n\n\u5909\u6570\u306e\u4f7f\u3044\u65b9\na: int = 1\na: int = 1 + 2\na = 1 + 2\na += 1\na *= 2\n\n\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\na = 2\na = 2 + 3\na *= 2\n\n\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\na = 2\nprint(a)\nprint(a + a)\n\n\u5909\u6570\u3092\u4f7f\u3044\u305a\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\nclass Example:\n    def __init__(self, a):\n        self.a = a\n    def print_a(self):\n        print(self.a)\n\nex = Example(1)\nex.print_a()\n\n\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u4f7f\u7528\u3059\u308b\na = 2\nb = 3\nprint(a + b)\n\"\"\"\n\n\"\"\"\n\u4e09\u92ad\u7389\u3068\u6b63\u4e09\u92ad\u7389\n\n\u5165\u529b\u4f8b\n2\n3 1\n\n\u51fa\u529b\u4f8b\n3\n\"\"\"\n\n\"\"\"\na = []\nb = []\nfor i in range(int(input())):\n    a.append(int(input()))\nfor j in range(int(input())):\n    b.append(int(input()))\nprint(min(sum(a), sum(b)))\n\"\"\"\n\n\"\"\"\n\u89e3\u7b54\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5 1\\n10 1') == '12\\n11\\n0'\nassert solution('2\\n5 1\\n10 1') == '7\\n6\\n0'\n\"\"\"\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\nassert solution(\"3 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\nfrom typing import Tuple\n\nN, *args = [int(s) for s in open(0).read().splitlines()]\nC, S, F = [0] + [int(s) for s in args]\ntime = 0\ndone = False\nfor i in range(1, N):\n    if done:\n        break\n    while C[i] < S[i] and time % F[i] == 0:\n        if i == N - 1:\n            done = True\n            break\n        time += S[i]\n        i += 1\n    if done:\n        break\n    time += C[i]\nprint(time)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom collections import deque"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n6 5 1\\n1 10 1\\n') == '12\\n11\\n0\\n'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.\\n..') == '..'\nassert solution('.*\\n..') == '..\\n..'\nassert solution('*.*\\n.*') == '*.*\\n.*'\nassert solution('*.*\\n.*\\n.*') == '*.*\\n.*\\n.*'"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n*\\n.*') == '*.\\n.*'\nassert solution('2 2\\n.\\n.*') == '.\\n.*'\nassert solution('2 2\\n.\\n.\\n') == '..\\n..'\nassert solution('2 2\\n.\\n.\\n') == '..\\n..'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n.*\n.*''') == '.*\\n.*'\n\nassert solution('''3 2\n.*\n.*\n.*''') == '.*\\n.*\\n.*'\n\nassert solution('''4 2\n.*\n.*\n.*\n.*''') == '.*\\n.*\\n.*\\n.*'\n\nassert solution('''4 3\n.*\n.*\n.*\n.*''') == '.*\\n.*\\n.*\\n.*'\n\nassert solution('''5 2\n.*\n.*\n.*\n.*\n.*''') == '.*\\n.*\\n.*\\n.*\\n.*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n.*\\n.:\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"2 2\\n.*\\n.*\\n\") == \".*.*\\n.*.*\\n.*.*\"\nassert solution(\"2 2\\n.\\n.:\") == \".\\n..\\n..\"\nassert solution(\"2 2\\n..\\n.:\") == \"..\\n..\\n..\"\nassert solution(\"2 2\\n.\\n.\\n\") == \"..\\n..\\n..\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\nassert solution(\"1 1\\n.*\") == \".*\"\nassert solution(\"2 2\\n*.\\n:\") == \"*.\\n*\"\nassert solution(\"1 2\\n*.\") == \"*.\"\nassert solution(\"5 5\\n.*.*.*.*.*\") == \".*.*.*.*.*.*.*.*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n..\\n..\\n..') == '......\\n......\\n......'\nassert solution('3 3\\n.\\n..\\n..') == '....\\n....\\n....'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('.') == '.'\nassert solution('***') == '***'\nassert solution('*.*') == '*.*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n*\\n.*') == '.*\\n.*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n*\\n.\") == \"*.\\n*.\"\n\"\"\"\n\nimport sys\n\nrows, cols = map(int, input().split())\n\nimage = list()\n\nfor i in range(rows):\n    image.append(input())\n\nfor row in range(rows):\n    for col in range(cols):\n        if image[row][col] == '*':\n            image[row] = image[row][:col] + '.' + image[row][col + 1:]\n\nfor row in range(rows):\n    print(image[row])\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n4 4 2 1') == 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('2 6 1 4 5') == 'YES'\nassert solution('2 6 1 4 5 7') == 'NO'\nassert solution('2 6 1 7 4 5') == 'YES'\n\"\"\"\n\n\"\"\"\nGiven a sequence of integers A_1, A_2,..., A_N. \nIf its elements are pairwise distinct, print YES; otherwise, print NO.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 200000\n - 1 \u2264 A_i \u2264 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1... A_N\n\n-----Output-----\nIf the elements of the sequence are pairwise distinct, print YES; otherwise, print NO.\n\n-----Sample Input-----\n5\n2 6 1 4 5\n\n-----Sample Output-----\nYES\n\nThe elements are pairwise distinct.\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''5\n2 1 4 3 5''') == 'NO'\nassert solution('''5\n2 1 2 3 5''') == 'YES'\nassert solution('''5\n2 1 2 3 5''') == 'YES'\nassert solution('''5\n1 2 3 4 5''') == 'NO'"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''1\n2''') == 'YES'\nassert solution('''5\n2 3 1 5 7''') == 'NO'\nassert solution('''5\n2 3 1 5 4''') == 'NO'\nassert solution('''6\n1 3 5 7 9 11''') == 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''6\n1 2 3 4 5 6''') == 'YES'\nassert solution('''1\n2 3 4 5 6''') == 'NO'\nassert solution('''6\n4 2 1 3 5''') == 'NO'\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '3'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '4'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '1'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\n\n\"\"\"\n\n\"\"\"\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: O(n^2)\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = w[0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + w[i]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + w[i]\n\n    s = dp[n - 1][n - 1]\n\n    print(s)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_example(self):\n        assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\n    def test_example_1(self):\n        "
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'\nassert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '3'\nassert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '4'\nassert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '1'\nassert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"3\"\nassert solution(\"8\\n6 6 6 6 6 6 8 8\") == \"1\"\nassert solution(\"8\\n1 2 2 1 2 1 1 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '3'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '4'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\n\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\n\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\n\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\n\nassert solution('''\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\n\nassert solution('''\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\n\nassert solution('''\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '1'\n\nassert solution('''\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('8 6 6 6 6 6 8 8\\n') == '4'\nassert solution('8 6 6 6 6 6 8 8\\n') == '4'\nassert solution('8 6 6 6 6 6 8 8\\n') == '4'\nassert solution('8 6 6 6 6 6 8 8\\n') == '4'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    ''') == '2'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    ''') == '3'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    ''') == '4'\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    ''') == '1'\n\n-----------------------------------------\n\n\u041e\u0442\u0432\u0435\u0442\u044b:\n\n2\n3\n4\n1\n2\n\n----------------------------------------\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\nt\n    - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432\nn\n    - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432\nw\n    - \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0432\u0435\u0441\u0430\u043c\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\nk\n    - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u044b:\n\n\u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e $t$ ($1 \\le t \\le 1000$) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432. \u0414\u0430\u043b\u0435\u0435 $t$ \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u0449\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $k$ ($1 \\le k \\le n$), \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b:\n\nn \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432\nk \u2013 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435\ns \u2013 \u043e\u0431\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e "
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"7 3\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\n\"\"\"\n\nfrom itertools import chain, combinations\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 5\") == \"3\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13''') == '3'\nassert solution('''4\n1\n1''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3\\n1\\n5\\n77'\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"5 5\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"5 5\\n1 5\\n22 5\\n987 13\") == \"1\"\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '3'\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '1'\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '5'\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '77'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13''') == '3'\nassert solution('''8\n15 2\n1 26\n100 3\n1 10\n1 20\n1 50\n1 100\n1 1000\n1 10000\n''') == '15'\n'''"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"22\"\nassert solution(\"987 13\") == \"77\"\n\nprint(\"Success\")"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"2 2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 5\\n22 5\\n987 13') == '77'\nassert solution('1 2\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == '9 4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == '26 10 1 2 3 5 10 5 9 4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n-----Solution-----"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 3, 1, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"abc\") == \"4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n\"\"\"\nimport itertools\nfrom collections import Counter\n\nimport sys\n\nclass Solution:\n    def __init__(self, s: str, m: int, p: list):\n        self.s = s\n        self.m = m\n        self.p = p\n        self.n = len(s)\n\n    def solution(self) -> str:\n        count = Counter(self.s)\n        p = Counter(self.p)\n        result = [count[c] - p[c] for c in self.s]\n        return''.join(map(str, result))\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\nassert solution(\"abracadabra\") == \"9 6 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution(\"codeforces\") == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\nassert solution(\"20 10 1 2 3 5 10 5 9 4\") == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n\nassert solution(\"abca\", 2) == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"codef\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 2, 0, 0, 0, 0, 0, 0, 9, 0, 3, 1, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('codeforces') == '9 4 2 1 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('qwertyuioplkjhgfdsazxcvbnm') == '26 10 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 5\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n''') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\nprint(solution(stdin))\n\n-----Problem-----\n\nSolution\nPython 3.6.0\nPython 3.6.0\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4 3\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 999999999\\n3 2 5\\n3 2 6') == '1999999994\\n2\\n4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5\") == \"0\"\nassert solution(\"1 2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\nassert solution('2 4 3') == '0'\nassert solution('1 1000000000 1000000000') == '1999999994'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('1\\n1 1 1\\n1 1 1') == '0\\n0'\nassert solution('2\\n3 5 6\\n4 9 8\\n1 1 1') == '8\\n29'\nassert solution('1\\n100001 100001\\n100010 100010') == '100001\\n100001'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\\n') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nprint(solution('8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\\n'))\n\"\"\"\nfrom tools import test\nfrom itertools import permutations"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'NO'\nassert solution('7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1') == 'YES'\nassert solution('7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1') == 'YES'\nassert solution('7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 4 5\n6\n1 1 1 1\n2\n1 2\n2\n2 2\n5\n1 2 3 4 5''') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\nassert solution('''9\n1 2 3 4 5 6 7 8 9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 14 16 12') == 'YES'\nassert solution('2') == 'NO'\nassert solution('1 8') == 'YES'\nassert solution('4') == 'YES'\nassert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11 14 16 12\") == \"YES\"\nassert solution(\"2\\n1 8\") == \"NO\"\nassert solution(\"4\\n1 1 1 1\") == \"YES\"\nassert solution(\"6\\n1 6 3 10 5 8\") == \"YES\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\nassert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES'\nassert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES'\nassert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES'\nassert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\n\"\"\"\n\nfrom typing import List, Dict\n\nclass Solution:\n    def solution(self, a: List[int]) -> str:\n        \n        # 1. create hashmap \n        # key: the number of each value, value: the number of each value\n        hashmap: Dict[int, int] = {}\n        \n        # 2. check length of array\n        if len(a) % 2!= 0:\n            return 'NO'\n        \n        # 3. assign number to each value\n        for value in a:\n            if value not in hashmap:\n                hashmap[value] = 1\n            else:\n                hashmap[value] += 1\n        \n        # 4. check if there is a similar pair\n        for value in hashmap:\n            if hashmap[value] > 1:\n                if value % 2 == hashmap[value] % 2:\n                    return 'YES'\n                else:\n                    return 'NO'\n        \n        return 'YES'\n    \nsolution = Solution()\nprint(solution.solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8'))\nprint(solution.solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8'))\nprint(solution.solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8'))\nprint(solution.solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8'))\nprint(solution.solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8'))\nprint(solution.solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8'))\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"4\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"NO\\nYES\\nNO\\nYES\\nYES\\nNO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"YES\"\nassert solution(\"3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('7\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom typing import Dict, List, Tuple, Union\n\n\nclass Solution:\n    def solve(self, stdin: str) -> int:\n        n, m, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n        districts = self.read_districts(stdin)\n        self.read_road(n, m, districts, stdin)\n        return self.dijkstra(k, districts)\n\n    def read_districts(self, stdin: str) -> Dict[int, int]:\n        districts = defaultdict(list)\n        for district in stdin.split('\\n')[1:]:\n            a, b, cost = list(map(int, district.split(' ')))\n            districts[a].append((b, cost))\n            districts[b].append((a, cost))\n        return districts\n\n    def read_road(self, n: int, m: int, districts: Dict[int, List[Tuple[int, int]]], stdin: str):\n        for i in range(m):\n            a, b, cost = list(map(int, stdin.split('\\n')[i + 1].split(' ')))\n            districts[a].append((b, cost))\n            districts[b].append((a, cost))\n\n    def dijkstra(self, k: int, districts: Dict[int, List[Tuple[int, int]]]) -> int:\n        def dfs(start: int, parent: int = None, cost: int = 0) -> int:\n            for neighbour, ncost in districts[start]:\n                if neighbour == parent:\n                    continue\n                dist[neighbour] = min(dist[neighbour], cost + ncost)\n                dfs(neighbour, start, cost + ncost)\n\n        dist = [float('inf')] * (n + 1)\n        dfs(1)\n        return sum([cost for neighbour, cost in districts[k] if dist[neighbour]!= float('inf')])\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\n\"\"\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 5\\n1 2 3\\n2 3 4\\n1 4 5\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n4 5 6') == '3'\nassert solution('1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\nassert solution('1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"5\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\\n6\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\\n6\") == \"1\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"5\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('2\\n2\\n') == '3'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"3\\n1\") == \"1\"\nassert solution(\"3\\n2\") == \"1\"\n\"\"\"\n\nfrom collections import deque\nfrom math import log\nfrom typing import Deque"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"1\\n2\\n6\") == \"9\"\nassert solution(\"1\\n2\\n6\\n13\") == \"9\"\nassert solution(\"1\\n2\\n6\\n13\\n14\") == \"27\"\nassert solution(\"1\\n2\\n6\\n13\\n14\\n3620\") == \"6561\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\") == \"1\"\nassert solution(\"3\\n4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\\n\") == \"3\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n\") == \"5\"\nassert solution(\"5\\n2\\n3\\n5\\n6\\n\") == \"9\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\\n\") == \"1\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n6\") == \"5\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"7\"\n\nassert solution(\"1\\n0\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n0\\n0\\n0\\n0\\n0\\n1\") == \"1\"\n\nassert solution(\"1\\n3\\n5\") == \"4\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == '4\\n3'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nLet us solve the problem by brute force. We need to check numbers from 1 to n.\n\nSince the maximum value of n is 10^4, we can go through all numbers from 1 to 10^4\n\nLet's consider the number n = 100.\n\nn = 100\n3^0 = 0\n3^1 = 3\n3^2 = 9\n3^3 = 27\n3^4 = 81\n3^5 = 243\n3^6 = 729\n3^7 = 2187\n3^8 = 6561\n3^9 = 19683\n3^10 = 47913\n3^11 = 164037\n3^12 = 2902953\n3^13 = 23678401\n3^14 = 488090645\n3^15 = 688371009\n3^16 = 1686281951\n3^17 = 1835493891\n3^18 = 4109310171\n3^19 = 2700990877\n3^20 = 85869706849\n3^21 = 160560232271\n3^22 = 2226818762321\n3^23 = 368690897206541\n3^24 = 65397927881723555\n3^25 = 124740591037889511\n3^26 = 23229348527511805741\n3^27 = 37067416235675992838\n3^28 = 65927651822985777818\n3^29 = 1254984868956520654070\n3^30 = 23274793535284619126477\n3^31 = 3710925985909602416443889\n3^32 = 65720388548439581255189635\n3^33 = 12508128415963828993741251\n3^34 = 24550406630293890803092535\n3^35 = 3780784759927263555532996895\n3^36 = 7078276747508065001379823041\n3^37 = 1409646817127672517115617643247\n3^38 = 277108473423087322559065083\n3^39 = 44787679867853945647925984799\n3^40 = 87597399641845707874218721\n3^41 = 1724117568324762862193667009\n3^42 = 31780249593992747172827866\n3^43 = 6384002374238239928209965841\n3^44 = 126896256000849771613126801\n3^45 = 2615686849502648257698280\n3^46 = 489730624122218154627532898\n3^47 = 97746779875099083224794847\n3^48 = 1778486320442951312\n3^49 = 351447052071\n3^50 = 67908236690899926356959829\n3^51 = 13962849846437\n3^52 = 27984\n3^53 = 60906222589481757429\n3^54 = 125970\n3^55 = 274491\n3^56 = 544426\n3^57 = 107387\n3^58 = 210201\n3^59 = 342351\n3^60 = 664120\n3^61 = 132852\n3^62 = 272852\n3^63 = 553452\n3^64 = 119865\n3^65 = 271296\n3^66 = 550824\n3^67 = 112337\n3^68 = 288675\n3^69 = 584176\n3^70 = 1182024\n3^71 = 290958\n3^72 = 568391\n3^73 = 131518\n3^74 = 291361\n3^75 = 596615\n3^76 = 143069\n3^77 = 295685\n3^78 = 607138\n3^79 = 130948\n3^80 = 292950\n3^81 = 581153\n3^82 = 157541\n3^83 = 30841\n3^84 = 67907\n3^85 = 128868\n3^86 = 318922\n3^87 = 668448\n3^88 = 150854\n3^89 = 324131\n3^90 = 63581\n3^91 = 163680\n3^92 = 385081\n3^93 = 689564\n3^94 = 181868\n3^95 = 430339\n3^96 = 93651\n3^97 = 180629\n3^98 = 427163\n3^99 = 98699\n3^100 = 262696\n3^101 = 593551\n3^102 = 151825\n3^103 = 318595\n3^104 = 624139\n3^105 = 140521\n3^106 = 321572\n3^107 = 644341\n3^108 = 169922\n3^109 = 366179\n3^110 = 696979\n3^111 = 2047\n3^112 = 363785\n3^113 = 662141\n3^114 = 182901\n3^115 = 402778\n3^116 = 695459\n3^117 = 207748\n3^118 = 448567\n3^119 = 837739\n3^120 = 207\n3^121 = 355\n3^122 = 927\n3^123 = 37\n3^124 = 27\n3^125 = 43\n3^126 = 1\n3^127 = 39\n3^128 = 767\n3^129 = 1075\n3^130 = 2747\n3^131 = 5906\n3^132 = 1679\n3^133 = 372\n3^134 = 8532\n3^135 = 1724\n3^136 = 38\n3^137 = 69\n3^138 = 1266\n3^139 = 277\n3^140 = 5813\n3^141 = 1574\n3^142 = 3067\n3^143 = 6249\n3^144 = 1254\n3^145 = 3011\n3^146 = 644\n3^147 = 1653\n3^148 = 3812\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1\") == \"1\"\nassert solution(\"5\\n1\") == \"1\"\nassert solution(\"6\\n2\") == \"3\"\nassert solution(\"6\\n3\") == \"5\"\nassert solution(\"6\\n4\") == \"4\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"5\", \"1 2 3 4 5\", \"3\", \"2 3 1\", \"6\", \"4 6 2 1 5 3\", \"1\", \"1\", \"4\", \"3 4 1 2\"]) == \"1 1 1 1 1\"\nassert solution([\"6\", \"4 6 2 1 5 3\", \"1\", \"1\", \"4\", \"3 4 1 2\"]) == \"3 3 3\"\nassert solution([\"6\", \"4 6 2 1 5 3\", \"1\", \"1\", \"4\", \"3 4 1 2\"]) == \"2 3 3 2 1 3\"\nassert solution([\"6\", \"4 6 2 1 5 3\", \"1\", \"1\", \"4\", \"3 4 1 2\"]) == \"1 2 2 2 2\"\nassert solution([\"6\", \"4 6 2 1 5 3\", \"1\", \"1\", \"4\", \"3 4 1 2\"]) == \"1 2 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 4 5 6 7\\n1 2 3 5 4 6 7\") == \"1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1 2 3\") == \"3 3 3 2 2 3\"\nassert solution(\"6 5 1 2 3 4\") == \"3 3 3 2 2 3\"\nassert solution(\"7 5 1 2 3 4 6\") == \"3 3 3 2 2 3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2 3 1\\n4\\n1 2 3 4\") == \"1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3\\n2 3 1') == '1 1 1 1'\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 5 4 5 5 5 5 1 2 3 1 2 2 1\") == \"1 1 1 1 1\"\nassert solution(\"3 5 1 2 4 4 2 4 1\") == \"3 3 3\"\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n4\\n1 2 3 4') == '1 1 1 1'\nassert solution('4\\n4\\n5 1 2 3') == '3 3 3'\nassert solution('6\\n1 2 3 4 5\\n3\\n2 3 1') == '3 3 3'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2') == '2 3 3 2 1 3'\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \\\n    \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == '8'\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n0 1') == '0'\nassert solution('1 2\\n3 1') == '4'\nassert solution('1 2\\n3 4') == '6'\nassert solution('1 2\\n3 5') == '8'\nassert solution('1 2\\n3 6') == '10'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n0 3 1') == '7'\n\"\"\"\n\nfrom math import inf\n\nn, m = list(map(int, input().split()))\nx = list(map(int, input().split()))"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n4 5\\n1 2\") == \"8\"\n\"\"\"\n\nn, m = map(int, input().split())\ntrees = sorted(list(map(int, input().split())))\nhumans = sorted(list(map(int, input().split())))\n\ndistances = []\nfor i in range(m):\n    j = 0\n    while j < n and humans[i] > trees[j]:\n        j += 1\n    if j == n:\n        distances.append(-1)\n    else:\n        distances.append(humans[i] - trees[j])\n\nprint(min(distances))\nprint(\" \".join(map(str, humans)))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\nassert solution(\"3 5\\n0 3 1\") == \"7\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n0 1\\n1 2\") == '1 2 0'\n\"\"\"\n\n\"\"\"\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \ud835\udc5a \u0438 \ud835\udc5b (1\u2264\ud835\udc5a, \ud835\udc5b\u22642\u22c510^5) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043c\u043d\u0435\u0439 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0432 \u0437\u0430\u0434\u0430\u0447\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \ud835\udc5a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \ud835\udc5b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u2014 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043b\u0438\u0441\u0442 \u0441 \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\u043c\u0438. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043b\u0435\u0436\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043e\u0442 -10^9 \u0434\u043e 10^9.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0432\u0435\u0441\u043b\u0438 \u043d\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u0445, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u0440\u0430\u0432\u0435\u043d \u0441\u0443\u043c\u043c\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u0432\u0441\u0435\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \ud835\udc5b \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0431\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u0445. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043b\u0435\u0436\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043e\u0442 -2\u22c510^9 \u0434\u043e 2\u22c510^9.\n\n\u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 solve(a), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n\u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435\n\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043a\u0440\u0430\u0442\u043a\u043e \u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> solve(\n...     [1, 2],\n...     [-1, 0, 1, 2]\n... )\n4\n>>> solve(\n...     [3, 5],\n...     [0, 0, 0, 0]\n... )\n2\n\u0422\u0435\u0441\u0442 2\n>>> solve(\n...     [2, 3],\n...     [-1, 1, 0, 1]\n... )\n1\n\u0422\u0435\u0441\u0442 3\n>>> solve(\n...     [5, 2],\n...     [0, -1, 0, 0, -2]\n... )\n0\n\u0422\u0435\u0441\u0442 4\n>>> solve(\n...     [2, 4],\n...     [-1, 1, 0, 1, 1]\n... )\n0\n\u0422\u0435\u0441\u0442 5\n>>> solve(\n...     [5, 5],\n...     [-1, -1, 0, 0, -1]\n... )\n2\n\u0422\u0435\u0441\u0442 6\n>>>"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == '8'\nassert solution(\"3 5\\n0 3 1\\n\") == '7'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Union\nfrom copy import deepcopy"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7'\nassert solution('4 2\\n1 1') == '4'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def minDistSum(self, n: int, m: int, x: List[int], y: List[int]) -> int:\n        # \u5c0d\u9f4a\n        x.sort()\n        y.sort()\n        # \u8f38\u51fa\u9577\u5ea6\n        n, m = len(x), len(y)\n        # \u8a08\u7b97\u8ddd\u96e2\n        ans = 0\n        for i in range(m):\n            ans += min(abs(x[i] - y[i]), abs(x[n - 1] - y[i]))\n        return ans"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 3 1\") == \"7\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == 'YES\\nRUUURRRRUU'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"3\\n5\\n4 3\\n2\") == \"YES\\nRRRRUUU\"\nassert solution(\"3\\n5\\n1 2\\n0 1\\n1\") == \"YES\\nRRRRUUU\"\n\n-----Time Complexity-----\n\nO(n*n!)\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\nsolution('2\\n1 0\\n0 1') == 'YES\\nRRRRUUU'\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"RUUURRRRUU\\n\"\nassert solution(\"5\\n4 3\\n2\\n1 0\\n0 1\\n1\") == \"YES\\nRRRRUUU\\n\"\nassert solution(\"5\\n4 3\\n2\\n1 0\\n0 1\") == \"NO\\nYES\\n\"\nassert solution(\"5\\n4 3\\n2\\n1 0\\n0 1\\n1\") == \"NO\\nRRRRUUU\\n\"\nassert solution(\"5\\n5 5\") == \"YES\\nRRRRUUU\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'RUUURRRRUU'\nassert solution(\"2\\n1 0\\n0 1\") == 'YES'\nassert solution(\"2\\n1 0\\n0 1\") == 'YES'\nassert solution(\"1\\n1\") == 'YES'\nassert solution(\"2\\n1 0\\n0 1\") == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\"\"\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"\"\"3\n1 2\n1 3\n2 3\n2\n1 0\n0 1\n1\n2\"\"\") == \"NO\"\nassert solution(\"\"\"4\n1 1\n1 2\n2 2\n3 3\n3\n1 0\n0 1\n1\n2\n\"\"\") == \"YES\\nRRRUUU\"\n\"\"\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"NO\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"NO\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\") == \"8\"\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"5 1\") == \"8\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"2 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n,s = map(int, input().split())\n    print(sum(int(i) for i in str(n))-s)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"\n\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, s = [int(x) for x in input().split()]\n    print(n - s)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'\n\nprint(solution('2 1'))\nprint(solution('1 1'))\nprint(solution('500 4'))\nprint(solution('217871987498122 10'))\nprint(solution('100000000000000001 1'))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == \"8\"\nassert solution('1 1') == \"0\"\nassert solution('500 4') == \"8\"\nassert solution('217871987498122 10') == \"899999999999999999\"\nassert solution('100000000000000001 1') == \"899999999999999999\"\n\"\"\"\n\nt = int(input().strip())\nfor a0 in range(t):\n    n, s = input().strip().split(' ')\n    n, s = [int(n), int(s)]\n    sum_dig = 0\n    while n:\n        sum_dig += n % 10\n        n //= 10\n    print(sum_dig - s)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"9\"\nassert solution(\"100000000000000001 1\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1''') == '8'\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 0 1 1\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"5\\n1 1 0 1 1\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\\n0\\n2\\n4\\n1\"\nassert solution(\"1\\n7\\n0 0 1 0 1 0 1\\n1\\n0 0 0\\n3\\n1 0 0\\n1\\n0 0 0\") == \"2\\n0\"\nassert solution(\"5\\n1 1 0 1 1\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\\n0\\n2\\n4\\n1\"\nassert solution(\"5\\n1 1 0 1 1\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\\n0\\n2\\n4\\n1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n5\n0 1 1\n4\n0 0 0\n5\n1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4\n5\n1 1 1 0 0\n4\n0 0 0 0 0\n5\n1 1 0 1 1\n6\n1 0 0 0 0 1\n5\n1 1 1 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n5\n1 0 1\n3\n0 0 0\n5\n1 1 1\n6\n1 0 0 0\n5\n1 1 1 1\n\"\"\") == \"0\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\"\n    ) == \"2\"\n\nassert solution(\n\"\"\"\n1\n5\n1 1 0 1 1\n5\n1 1 0 1 1\n\"\"\"\n    ) == \"0\"\n\nassert solution(\n\"\"\"\n1\n3\n1 0 0\n2\n0 1 0\n\"\"\"\n    ) == \"0\"\n\nassert solution(\n\"\"\"\n2\n5\n0 0 0 0 0\n5\n0 1 1 0 0\n5\n0 1 1 0 0\n\"\"\"\n    ) == \"1\"\n\nassert solution(\n\"\"\"\n2\n5\n0 0 0 1 0\n5\n0 1 1 1 0\n5\n0 1 1 1 0\n\"\"\"\n    ) == \"2\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"1\\n5\\n1 1 0 1 1\") == \"0\"\nassert solution(\"5\\n1 1 0 1 1\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import inf\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 0 0 1\\n7\\n1 0 0 1 0 1 0 1') == '2'\nassert solution('5\\n1 1 0 1 1\\n7\\n1 0 0') == '0'\nassert solution('5\\n1 1 0 1 1\\n7\\n1 0 0') == '0'\nassert solution('5\\n1 1 0 1 1\\n7\\n1 0 0') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n\n'''\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 0 1\\n3\\n0 0 1\") == \"2\"\nassert solution(\"4\\n1 0 1\\n3\\n1 1 1\\n1 1 1\") == \"2\"\nassert solution(\"4\\n1 0 1\\n3\\n1 1 1\\n1 1 1\") == \"0\"\nassert solution(\"4\\n1 0 1\\n3\\n0 1 1\\n1 1 1\") == \"2\"\nassert solution(\"4\\n1 0 1\\n3\\n0 1 1\\n1 1 1\") == \"1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\") == \"2\"\n\nassert solution(\"2\\n3\\n1 1 0\\n2\\n1 1 1\") == \"0\"\n\nassert solution(\"2\\n5\\n1 1 0 1 1\\n5\\n1 1 1 1 1\") == \"0\"\n\nassert solution(\"2\\n5\\n1 1 0 1 1\\n5\\n1 1 1 1 1\") == \"1\"\n\nassert solution(\"2\\n5\\n1 1 0 1 1\\n5\\n1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '0'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n2 4\\n3 4') == 'cba'\nassert solution('2 1\\n1 2\\n2 1') == 'ab'\nassert solution('7 3\\n4 4\\n6 2') == 'abcd'\n\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 1\\n2 2\") == \"bb\\nab\"\nassert solution(\"2 3\\n1 2\\n2 1\") == \"cb\\nac\"\n\nassert solution(\"2 3\\n1 1\\n2 2\") == \"bb\\nab\"\nassert solution(\"2 3\\n1 2\\n2 1\") == \"cb\\nac\"\n\nassert solution(\"2 3\\n1 2\\n2 2\") == \"cbc\\ncc\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\n\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\\n\") == \"cbcacab\"\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n') == 'abcd'\nassert solution('1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n') == 'cbcacab'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n') == 'abcd'\nassert solution('3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n') == 'baabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\")!= \"cbcabba\"\nassert solution(\"7 3\\n4 4\\n6 2\")!= \"ccbbaaa\"\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '6 23 21'\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '1 1000 0'\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '2 1 2'\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '3 4 2'\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '4 4 3'\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"1 1000 0\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"2 1 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"3 4 2\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(i) for i in input().strip().split()]\n    a = b = 0\n    count = 0\n    while True:\n        if nums[0] > nums[-1]:\n            count += 1\n            a += nums[0]\n            nums = nums[1:]\n        else:\n            count += 1\n            b += nums[-1]\n            nums = nums[:-1]\n        if not nums:\n            break\n    print(count, a, b)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n\") == \"6 23 21\"\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11\\n1 1 4 1 5 9 2 6 5 3 5\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13') == '6 23 21'\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n1\\n2\\n4') == '1\\n1\\n2\\n4'\nassert solution('1\\n3\\n5\\n4\\n3') == '1\\n2\\n4\\n4\\n3'\nassert solution('1\\n3\\n1\\n2\\n4') == '1\\n1\\n2\\n4'\nassert solution('1\\n3\\n5\\n4\\n3\\n3') == '1\\n2\\n3\\n3\\n3\\n3'\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\nassert solution(\"1\\n1000\") == \"1 1000 0\"\nassert solution(\"2\\n2 1\") == \"2 1 2\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"2 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 1 1 2 5 3') == '1 2 5 2 5 3'\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\nassert solution(\"6\\n1 1 1 1 1 1\\n7\\n1 2 3 4 5 6\") == \"2 1 2\"\nassert solution(\"6\\n1 1 1 1 1 1\\n7\\n1 2 3 4 5 6\") == \"2 1 2\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\n\n\"\"\"\n\n\nimport sys\nimport bisect"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\nassert solution(\"4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\n\nassert solution(\"5 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0\\n2 2 4 3\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 1\\n1 2\\n2 4\\n4 4\\n1 2 5 4 3\") == \"27\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\") == \"39\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\") == \"11\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '0'\nassert solution('2 1') == '0'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '6'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 2 3\\n2 3 4') == '8'\nassert solution('2 1\\n1 2\\n2 2') == '4'\nassert solution('5 3\\n1 2 3 4 5\\n5 4 5 4 5') == '19'\nassert solution('2 3\\n1 2\\n2 2') == '9'\nassert solution('2 3\\n1 2\\n2 2') == '9'\n\"\"\"\nimport sys\nfrom io import StringIO\nfrom collections import deque\nfrom unittest import mock\nimport unittest\n\nclass TestCase(unittest.TestCase):\n    def test_solution_1(self):\n        self."
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 4\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 4\\n') == '6'\nassert solution('1 2\\n3 4\\n1 2 5 4\\n') == '27'\nassert solution('1 2\\n3 4\\n5 5\\n1 2 5 4 3\\n') == '39'\nassert solution('1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n') == '17'\nassert solution('1 2\\n3 4\\n5 5\\n4 0\\n') == '11'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\") == \"6\"\nassert solution(\"3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"5 3\\n1 2 2 1\\n4 4 5 4\") == \"17\"\nassert solution(\"5 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n\n\"\"\"\n\nfrom itertools import permutations\nfrom random import randint\nimport sys\nimport time\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3') == '6\\n27\\n39\\n11\\n17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1') == '0 1 2 3'\nassert solution('10 3') == '0 0 1 2 3 5 6 7 8 10'\nassert solution('10 3') == '0 0 1 2 3 5 6 7 8 10'\nassert solution('3 1') == '0 1 2'\nassert solution('3 2') == '0 1 1'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 4 4 4') == '0 1 2 4 4 8 12 16 20'\nassert solution('4 2\\n1 2 3 4\\n2 4 4 4') == '0 1 2 4 4 8 12 16 20'\nassert solution('4 2\\n1 2 3 4\\n2 4 4 4') == '0 1 2 4 4 8 12 16 20'\nassert solution('4 2\\n1 2 3 4\\n2 4 4 4') == '0 1 2 4 4 8 12 16 20'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([\n    10, 2,\n    [7, 6, 18, 6, 16, 18, 1, 17, 17],\n    [6, 9, 3, 10, 9, 1, 10, 1, 5]\n])) == [0, 7, 13, 18, 24, 35, 36, 37, 40, 45]\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 1 3 3 1 4 1\") == \"0 7 13\"\n\"\"\"\n\nn, c = map(int, stdin.readline().split())\n\nstairs = [int(x) for x in stdin.readline().split()]\nelevator = [int(x) for x in stdin.readline().split()]\n\nstairs.insert(0, 0)\nelevator.insert(0, 0)\n\nstairs_cost = [0]\nelevator_cost = [0]\n\nfor i in range(1, n + 1):\n    stairs_cost.append(stairs_cost[i - 1] + stairs[i])\n    elevator_cost.append(elevator_cost[i - 1] + elevator[i])\n\ncost = [x + y for x, y in zip(stairs_cost, elevator_cost)]\n\ns = set()\n\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i == j:\n            continue\n\n        if (cost[i] - cost[j]) % 2 == 0:\n            s.add(cost[i] - cost[j])\n\nprint(*sorted(s))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == \"0 2 4 7 8 11 13 14 16 17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nimport sys\nfrom itertools import accumulate"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nnum_floors, time_overhead = [int(n) for n in stdin.split('\\n')[:2]]\nstair_times = [int(n) for n in stdin.split('\\n')[2:][::2]]\nelevator_times = [int(n) for n in stdin.split('\\n')[2:][1::2]]\nassert len(stair_times) == num_floors - 1 and len(elevator_times) == num_floors - 1"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ab') == 'aba'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aa'\nassert solution('aaaa') == 'aa'\nassert solution('aab') == 'aba'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 1\") == \"aaabb\"\nassert solution(\"7\\n5 2\") == \"aabab\"\nassert solution(\"7\\n5 8\") == \"baaba\"\nassert solution(\"7\\n5 10\") == \"bbaaa\"\nassert solution(\"7\\n3 1\") == \"abb\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_str) == correct_str"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1') == 'b'\nassert solution('4 2') == 'ab'\nassert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'a'\nassert solution('2\\n') == 'ab'\nassert solution('3\\n') == 'aba'\nassert solution('4\\n') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('2 3') == 'aa'\nassert solution('3 4') == 'aba'\nassert solution('4 5') == 'abab'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100') == 'aaabb\\naabab\\nbbaaa\\nabb\\nbab'\n\"\"\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"abb\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == 'aaabb'\n\"\"\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(\"5 2\") == \"baaba\"\nassert solution(\"5 8\") == \"babaa\"\nassert solution(\"5 10\") == \"bbaaa\"\n\"\"\"\nfrom itertools import combinations\n\nfrom int_tools import get_ints"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 1\") == \"1\"\nassert solution(\"5 1\\n1 5 2 3 1 5 4\") == \"1\"\nassert solution(\"5 10\\n10 7 5 15 8\") == \"5\"\nassert solution(\"5 10\\n15 19 8 17 20 10 9 2 10 19\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == \"6\\n1\\n5\\n10\"\nassert solution(\"1\\n1 2\\n3 4\") == \"1\"\nassert solution(\"1\\n0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == '6'\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\") == '1'\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n10000000\\n10000000\") == '5'\n\"\"\""
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904''') == '6'\nassert solution('''2\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904''') == '1'\n\n'''\n\n\nimport sys\nimport math\nfrom typing import List\n\nfrom collections import Counter\nfrom collections import defaultdict"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == \"6\\n1\\n5\\n10\"\n\n------"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 5 2 3 1 5 4') == '6'\nassert solution('7 1\\n1 5 2 3 1 5 4') == '1'\nassert solution('7 10\\n10 7 5 15 8') == '5'\n\n\"\"\"\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == '6\\n1\\n5\\n10'\n\n\n\n'''\n\n\nfrom itertools import permutations\nfrom functools import lru_cache"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n0\\n3\\n1\\n1\\n0') == '0'\nassert solution('7 3\\n1\\n2\\n1\\n2\\n0') == '0'\nassert solution('7 3\\n0\\n2\\n0\\n0\\n0') == '0'\nassert solution('7 3\\n0\\n2\\n0\\n0\\n0') == '0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"4 3\\n1\\n1\\n2\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"4 3\\n1\\n1\\n2\\n2\\n1\\n1\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"4 3\\n1\\n1\\n1\\n1\\n1\\n2\\n2\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\nprint(solution(\"4 3\\n1\\n2\\n1\\n2\"))\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\n\"\"\"\n\nfrom collections import deque\nimport heapq\nfrom typing import List\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"4 3\\n0\\n1\\n0\\n1\") == \"0\\n0\\n0\\n0\"\nassert solution(\"4 3\\n0\\n1\\n0\\n1\") == \"0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n1\\n0\\n1\\n2\\n2\\n0\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"7 3\\n1\\n2\\n1\\n2\\n0\\n0\\n0\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\"\n\n\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == k\n\n\"\"\"\nfrom itertools import islice, combinations"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2') == \"1\"\nassert solution('1\\n2') == \"0\"\nassert solution('1\\n1\\n1\\n1\\n1') == \"0\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\nprint(solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22'))"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22''') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\nprint(solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\"))\n\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\\n'\nprint('Test finished')\n\n-----Test cases-----\n\nInput\n1\n4 7 20\n4 6 3\n3 3 5\n5 1 5\n\nOutput\n4 7 20\n4 6 3\n3 3 5\n5 1 5\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, x, y = list(map(int, input().split()))\n    a = [x, y]\n    while True:\n        a.append(x - (a[-2] + a[-1]) // 2)\n        if x > y:\n            break\n    print(*a[:n + 1])\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n\nt = int(input())\nwhile t > 0:\n    n, x, y = map(int, input().split())\n    if x == 1 and y == 2:\n        print(1, 2)\n    elif x == 1 and y == 1:\n        print(1, 1)\n    elif x == 2 and y == 1:\n        print(2, 1)\n    else:\n        if x - y < 2:\n            print(x - 1, x)\n        else:\n            print(x - 1, x - 1)\n    t -= 1\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected)\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n, x, y = map(int, input().split())\n    if x == y:\n        print(x)\n    elif x < y:\n        print(y)\n    else:\n        print(x)\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nprint('Test: OK\\n')\n\n-----\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n\"\"\"\n\nimport sys\n\nn = list(map(int, input().strip().split()))[0]\nnumbers = list(map(int, input().strip().split()))\nnumbers.sort()\nnumbers.reverse()\nprint(*numbers)\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 1\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('4 5 9 7') == '9 7 5'\n\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nprint(solution('3 3 1 2'))\n\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 1 2') == '1 2 3 5'\nassert solution('4 3 4 1 2') == '1 2 4 3'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('0 0') == '0 0'\nassert solution('0 0 2') == '0 0 2'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '1 2 3', 'wrong result'\nassert solution('2 4 3') == '4 3 2', 'wrong result'\nassert solution('2 2') == '2 2', 'wrong result'\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3\\n3\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input_data) == expected_result\n\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\nassert solution('1\\n1 1 1 1\\n1') == 'YES'\nassert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\nassert solution('1\\n1 1 1 1\\n1') == 'YES'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\nassert solution(\"3\\n3 3 3\") == \"NO\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\") == \"YES\"\nassert solution(\"7\\n5 5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3\\n4\") == \"YES\"\nassert solution(\"1 2\\n3\\n4\") == \"YES\"\nassert solution(\"1 2\\n3\\n4\") == \"YES\"\n\"\"\"\n\nt = int(stdin.readline().strip())\nfor i in range(t):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for j in range(0, n * 2, 2):\n        a[j] = a[j] + a[j + 1]\n    if sum(a) % 2 == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1\\n1\\n1\") == \"YES\"\nassert solution(\"1\\n2\\n3\\n4\") == \"YES\"\nassert solution(\"2\\n2\\n1 1\") == \"YES\"\nassert solution(\"1\\n2\\n2\\n2\\n2\") == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 2 8 8\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    if n % 2 == 1:\n        if sum(A) % 2 == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        even = []\n        odd = []\n        even_sum = 0\n        odd_sum = 0\n        for a in A:\n            if a % 2 == 0:\n                even.append(a)\n                even_sum += a\n            else:\n                odd.append(a)\n                odd_sum += a\n\n        if sum(odd) % 2 == 0:\n            print(\"YES\")\n        else:\n            if sum(even) % 2 == 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2\n2 3\n4\n2 2 8 8''') == 'YES\\nNO\\nYES\\nNO\\nNO'\n\nassert solution('''1\n1\n1\n4\n1 1 1 1''') == 'NO\\nNO\\nNO\\nYES'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2') == '2 1'\nassert solution('5\\n4') == '4 3 5 2 1'\nassert solution('8\\n13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('6\\n7') == '7 5 4 3 6 2 1'\nassert solution('4\\n6') == '6 5 4 3 1 2'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n7') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('7\\n13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('6\\n2') == '-1'\nassert solution('7\\n4') == '5 1 3 6 2 4'\n\nassert solution('10\\n2') == '-1'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('3 4 5 2 1') == '1 2 3 4 5'\nassert solution('2 3 1 4 5') == '2 1 4 3 5'\nassert solution('4 1 3 5 2') == '1 4 2 3 5'\nassert solution('3 2 4 1 5') == '1 4 2 3 5'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4 6 7 13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2 4\") == -1\nassert solution(\"4\") == \"1 2 3 4\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4') == '3 1 4 2'\nassert solution('4\\n6') == '5 1 3 6 2 4'\nassert solution('7\\n13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\n\n------\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"3 1 4 2\"\nassert solution(\"6\") == \"5 3 6 2 4 1\"\nassert solution(\"7\") == \"5 1 3 6 2 4 7\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n2\\n2') == '1 2 3\\n2 3 1\\n'\nassert solution('5\\n4\\n2\\n2') == '1 2 3 4\\n2 3 4 1\\n'\nassert solution('3\\n2\\n2') == '1 2 3\\n2 3 1\\n'\nassert solution('4\\n5\\n2\\n3') == '1 2 3 4 5\\n2 4 3 1 5\\n'\nassert solution('4\\n6\\n2\\n3') == '1 2 3 4 5 6\\n2 4 5 3 6 1\\n'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n7\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"1\\n10\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n\nn = int(stdin.readline())\nwhile n!= 0:\n    p = stdin.readline()\n    s = set(range(1, n + 1))\n    for i in p.split():\n        if i not in s:\n            print(-1)\n            break\n        s.remove(int(i))\n    else:\n        print(*s, sep=\" \")\n    n = int(stdin.readline())\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n2\\n7\\n6\") == \"2\"\nassert solution(\"4\\n3\\n2\\n7\") == \"1\"\nassert solution(\"7\\n7\") == \"0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == '2'\nassert solution(\"4\\n3 2 7 6\\n3\\n1\") == '-1'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"7\"\nassert solution(\"7\\n7\") == \"0\"\nassert solution(\"4\\n9 2 1 18 3 0\") == \"0\"\n\n\n\n------Solution------"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == '2'\nassert solution(\"4\\n3 2 7 6\\n3\\n1\") == '-1'\nassert solution(\"4\\n3 2 7 6\\n3\\n7\\n7\\n4 9 2 1 18 3 0\") == '0'\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a_len = len(a)\n    swap = 0\n    for i in range(n):\n        if i % 2 == a[i] % 2:\n            continue\n        else:\n            for j in range(a_len):\n                if i == j:\n                    continue\n                elif i < j:\n                    a[i], a[j] = a[j], a[i]\n                    swap += 1\n                    break\n    if swap == 0:\n        print(-1)\n    else:\n        print(swap)\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2 7 6\") == \"2\"\n\nassert solution(\"4\\n3\\n2 6\") == \"-1\"\n\nassert solution(\"4\\n3\\n2 6\\n4 9 2 1 18 3 0\") == \"0\"\n\"\"\"\n\nimport collections\nimport unittest\n\nimport sys\n\nclass Solution:\n    def _preprocess(self, a):\n        counts = collections.Counter(a)\n        res = []\n        for k, v in counts.items():\n            res += [k] * (v // 2)\n            res += [k + 1] * (v - v // 2)\n        return res\n\n    def _swap(self, a, i, j):\n        a[i], a[j] = a[j], a[i]\n\n    def minMoves(self, a):\n        a = self._preprocess(a)\n        count = 0\n        for i, e in enumerate(a):\n            if i % 2 == e % 2:\n                count += i\n                self._swap(a, i, i + 1)\n        return count\n\nclass TestSolution(unittest.TestCase):\n    def test_preprocess(self):\n        assert Solution()._preprocess([1, 3, 5, 4, 2, 1, 3]) == [1, 3, 5, 4, 1, 2, 3]\n    def test_swap(self):\n        assert Solution()._swap([1, 3, 5, 4, 2, 1, 3], 2, 3) == [1, 3, 4, 5, 2, 1, 3]\n    def test_minMoves(self):\n        "
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == -1\n\"\"\"\nimport sys\nimport bisect\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\nassert solution(\"4\\n3 2 7 6\\n4\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == '2\\n1\\n-1\\n0'\nassert solution(\"4\\n4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == '-1\\n-1\\n0'\nassert solution(\"4\\n4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == '-1\\n-1\\n0'\n\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 7 6\") == \"2\"\nassert solution(\"3 2 6\") == \"1\"\nassert solution(\"1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 3') == '1 -1 1 -1'\n\"\"\"\n\n\nclass Node:\n    def __init__(self, n, p=None, cnt_w=0, cnt_b=0, edges=[]):\n        self.n = n\n        self.p = p\n        self.cnt_w = cnt_w\n        self.cnt_b = cnt_b\n        self.edges = edges\n    \n    def get_color(self):\n        if self.p == None:\n            return 'white'\n        \n        return 'white' if self.p.cnt_w > self.p.cnt_b else 'black'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\") == \"2 2 2 2 2 1 1 0 2\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\nassert solution('4\\n0 0 1 0') == '0 -1 1 -1'\n\n\"\"\"\n\nfrom typing import List\n\nclass Node:\n    def __init__(self, data: int):\n        self.data = data\n        self.children: List[Node] = []"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\nassert solution(\"7\\n0 1 1 1 0 0 0\") == \"2 2 2 2 2 1 1 0\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"0 -1 1 -1\"\n\nprint(\"Success\")"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n') == '2 2 2 2 2 1 1 0 2'\n\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n3 4\") == \"2 2 2 2 2 1 1 0 2\"\n\"\"\"\n\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ncolor = sys.stdin.readline()\n\ncolor_dict = {}\nfor i in range(N):\n    color_dict[str(i + 1)] = int(color[i])\n\nedges = [list(map(int, sys.stdin.readline().split())) for _ in range(N - 1)]\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == 3\nassert solution(\"1234\") == 3\nassert solution(\"12345\") == 5\nassert solution(\"1234567\") == 6\nassert solution(\"12345678\") == 7\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('12') == '2'\nassert solution('123') == '-1'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('7') == '2'\nassert solution('15116544') == '12'\nassert solution('12345') == '-1'\nassert solution('1') == '0'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15116544\") == \"12\"\nassert solution(\"387420489\") == \"-1\"\nassert solution(\"1\") == \"0\"\n\"\"\"\nfrom math import gcd, floor, log\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"2\\n2\") == \"-1\"\nassert solution(\"3\\n6\") == \"2\"\nassert solution(\"12\\n6\") == \"12\"\nassert solution(\"12345\\n6\") == \"36\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"12\") == \"2\"\nassert solution(\"12345\") == \"5\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15116544') == '36'"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('8') == '3'\nassert solution('27') == '3'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == '1'\nassert solution(\"3\") == '1'\nassert solution(\"4\") == '1'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '2'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BGGGG', 5, 2) == 1\nassert solution('RBRGR', 5, 3) == 0\nassert solution('BBBRR', 5, 5) == 3\n\"\"\"\n\nfrom sys import stdin\n\nq = int(stdin.readline())\n\nfor _ in range(q):\n    s, k = map(int, stdin.readline().strip().split())\n    for i in range(k - 1, len(s)):\n        if s[i]!= 'B' and s[i - k + 1 : i + 1] == 'R' * k:\n            break\n    else:\n        i = -1\n    print(k - 1 - i)\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BGGGG', 2) == 1\nassert solution('RBRGR', 5) == 3\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"RBRGR\", 5, 3) == 0\nassert solution(\"BBBRR\", 5, 5) == 3"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RBRGRG\") == \"3\"\nassert solution(\"BGGGGGG\") == \"0\"\nassert solution(\"BGGGGR\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"BBBRR\", 5, 3) == 0\nassert solution(\"RRRRR\", 5, 5) == 3\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"BGGGG\", 5, 3) == 0\nassert solution(\"RBRGR\", 5, 5) == 3\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RBRGR') == '3'\nassert solution('BBBB') == '2'\n\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"GBRG\") == \"1\"\nassert solution(\"B\") == \"0\"\nassert solution(\"RRR\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGR\") == \"RGB\"\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBRGBRGB\") == \"4\"\nassert solution(\"BBBBB\") == \"0\"\nassert solution(\"RRRRR\") == \"3\"\nassert solution(\"BBBB\") == \"0\"\nassert solution(\"BBBBG\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n4'\n) == '2'\n\nassert solution(\n    '2\\n5'\n) == '3'\n\nassert solution(\n    '3\\n6'\n) == '3'\n\nassert solution(\n    '3\\n7'\n) == '4'\n\nassert solution(\n    '3\\n8'\n) == '3'"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n1 1 2 3\\n2\\n1 1 2 3') == '3\\n3'\nassert solution('4\\n2\\n4 3 6 7\\n2\\n2 4 5') == '2\\n1'\nassert solution('4\\n2\\n7 2 9 1\\n2\\n2 3 4') == '0'\nassert solution('4\\n2\\n1 2 1 2\\n2\\n1 1 2 3') == '2\\n1'\nassert solution('4\\n1\\n1 2 3 4\\n1\\n1 2 3 4') == '0'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\"\nassert solution(\"3\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n3\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n1 1 1 1 1 2 2\\n3\\n1 1 1 1 1 2 2\") == \"3\"\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import Counter\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == 3\nassert solution('2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n') == 3\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3\\n3'\n\nassert solution('''\n3\n5\n2 3 1 5\n6\n2 3 1 5 1\n7\n1 1 1 1 1 2 2\n''') == '2\\n3'\n\nassert solution('''\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '3\\n3'\n\nassert solution('''\n2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2\n''') == '2\\n3'\n\nassert solution('''\n2\n5\n1 1 2 2 3\n7\n2 3 1 5 1\n''') == '3\\n3'"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n3\\n1') == 3\nassert solution('3\\n5\\n1 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == 3\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3\"\nassert solution(\"5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 2 3 4 5\"\nassert solution(\"5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 2 3 4 5\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nimport functools\n\n\n@functools.total_ordering\nclass MinPerm:\n    def __init__(self, perm: list[int]) -> None:\n        self.perm = perm\n        self.size = len(perm)\n\n    def __repr__(self) -> str:\n        return f\"{type(self).__name__}({self.perm})\"\n\n    def __eq__(self, other: MinPerm) -> bool:\n        return self.perm == other.perm\n\n    def __lt__(self, other: MinPerm) -> bool:\n        return (\n            self.size < other.size\n            or self.size == other.size\n            and self.perm < other.perm\n        )\n\n\n@functools.total_ordering\nclass MinPermSub:\n    def __init__(self, perm: list[int], i: int, j: int) -> None:\n        self.perm = perm\n        self.size = len(perm)\n        self.i = i\n        self.j = j\n\n    def __repr__(self) -> str:\n        return f\"{type(self).__name__}({self.perm}, {self.i}, {self.j})\"\n\n    def __eq__(self, other: MinPermSub) -> bool:\n        return self.perm == other.perm\n\n    def __lt__(self, other: MinPermSub) -> bool:\n        if self.size!= other.size:\n            return self.size < other.size\n        elif self.perm!= other.perm:\n            return self.perm < other.perm\n        else:\n            return self.i < other.i\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"4\\n1\\n1\") == \"1\"\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"3\\n1\\n1\") == \"1 \"\nassert solution(\"1\\n4\\n4 3 2 1\") == \"1 4 3 2 \"\nassert solution(\"1\\n2\") == \"1 2 \"\nassert solution(\"1\\n2\\n2\") == \"1 2 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1\\n1\") == \"1 \"\nassert solution(\"4\\n4\\n4 3 2 1\") == \"1 2 3 4 \"\nassert solution(\"4\\n4\\n4 2 1 3\") == \"1 2 3 4 \"\nassert solution(\"4\\n4\\n3 2 1 4\") == \"1 2 3 4 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4\\n5 1 3 2') == '1 5 2 4 3'\nassert solution('4\\n1 2 4 3') == '1 2 3 4'\nassert solution('1\\n1') == '1'\n\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n4 3 2 1\") == '1 5 2 4 3'\nassert solution(\"4\\n1 2 4 3\") == '1 2 3 4'\nassert solution(\"4\\n1\\n1\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"3\\n1 2 4\") == \"1 2 4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\" * 5\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'YES'\nassert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2') == 'YES\\n'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n1 3 2\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n1 3 2\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\\nYES\\nNO\\nYES\\n\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nprint(\"Test 1 OK.\")\n\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nprint(\"Test 2 OK.\")\n\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    if n > k:\n        print(n)\n    else:\n        print(n - 1)\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5 2\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '18\\n18\\n10\\n6\\n75015'\nassert solution('5 2\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '18\\n18\\n10\\n6\\n75015'\n\"\"\"\n\n\nimport io\nimport sys\nimport itertools"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 2\") == \"5\"\nassert solution(\"19 4\\n12 7\") == \"18\"\nassert solution(\"12 7\\n6 2\") == \"10\"\nassert solution(\"6 2\\n100000 50010\") == \"75015\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '18'\n\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    if k == 1:\n        print(n)\n    elif k > n:\n        print(0)\n    else:\n        print(n * (k - 1) + n - 1)\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('1 1\\n2 2\\n3 3') == '3'\nassert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('1 1\\n2 2\\n3 3') == '3'\nassert solution('1 1\\n2 2\\n3 3') == '3'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n') == '5\\n18\\n10\\n6\\n75015'\n\"\"\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 2') == '5'\nassert solution('19 4\\n12 7') == '18'\nassert solution('12 7\\n6 2') == '10'\nassert solution('6 2\\n100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 2') == '18'\nassert solution('19 4\\n12 7') == '10'\nassert solution('12 7\\n6 2') == '6'\nassert solution('100000 50010\\n') == '75015'\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'NO'\nassert solution('10 3') == 'NO'\nassert solution('100 4') == 'YES 4 2 4'\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    m = 1\n    while m*m < n:\n        m += 1\n    if m*m == n:\n        print('YES')\n        for _ in range(k):\n            print(m, end=' ')\n        print()\n    else:\n        print('NO')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n3\\n1\\n100\\n8\\n97\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n1\\n100\\n8\\n8\") == \"YES\\n55 5 5 35\"\nassert solution(\"8\\n3\\n1\\n100\\n8\\n3\") == \"NO\"\nassert solution(\"8\\n3\\n1\\n100\\n8\\n1\") == \"YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120\"\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n''') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'''\n\n'''\nfor line in stdin.split('\\n'):\n    n, k = map(int, line.split())\n    print('YES' if is_possible(n, k) else 'NO')\n'''\n\n'''\nn, k = map(int, stdin.split())\nn = str(n)\na = [1]\nfor i in n:\n    a.append(a[-1] * int(i))\na.pop(0)\nprint('YES' if any(a[i] % 2 == a[i - 1] % 2 for i in range(1, k + 1)) or not any(a[i] % 2 for i in range(k + 1)) else 'NO')\n'''\n\n'''\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3\\n10\\n3\\n1\\n1') == 'YES\\n4 2 4'\nassert solution('8\\n3\\n9\\n5\\n1\\n1') == 'NO\\nNO'\nassert solution('97\\n2\\n9\\n5\\n1\\n1') == 'YES\\n55 5 5 35'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == 'YES\\n1 1 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3\\n4') == 'YES\\n4 2 4'\nassert solution('100\\n4\\n8') == 'YES\\n4 2 4'\nassert solution('8\\n7') == 'NO'\nassert solution('97\\n2\\n8') == 'YES\\n5 5 5 35'\nassert solution('8\\n8') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 2\") == \"YES 4 2 4\"\nassert solution(\"8 7\") == \"YES 55 5 5 35\"\nassert solution(\"10 3\") == \"YES 1 1 1 1 1 1 1 1\"\nassert solution(\"100 4\") == \"YES 3 1 1\"\nassert solution(\"8 8\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\") == \"YES 4 2 4\"\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'YES\\n4 2 4'\nassert solution('8\\n1 1\\n3 5\\n1\\n3\\n4\\n2\\n5') == 'YES\\n4 4 2 5'\nassert solution('8\\n7 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8') == 'YES\\n1 1 1 1 1 1 1 1 1'\nassert solution('8\\n10 1\\n11 2\\n12 3\\n13 4\\n14 5\\n15 6\\n16 7\\n17 8\\n18 9') == 'NO'\nassert solution('8\\n100 1\\n101 2\\n102 3\\n103 4\\n104 5\\n105 6\\n106 7\\n107 8\\n108 9\\n109 10') == 'NO'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '''4\n55\n15000000000000000\n51'''\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '''\n4\n55\n15000000000000000\n51\n'''\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 10 100\") == \"55\"\nassert solution(\"10000000000000000 10000000000000000 10000000000000000\") == \"15000000000000000\"\nassert solution(\"23 34 45\") == \"51\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\""
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"6\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"3\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"5\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"4\\n\"\nassert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == \"15\\n\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcbac\") == 3\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 4\nassert solution(\"ababa\") == 4\nassert solution(\"ecbedececacbcbccbdec\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec''') == '''6\n3\n5\n4\n15\n10'''\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\nabcbac') == 6\nassert solution('3 6\\naaa') == 3\nassert solution('7 1000\\nabczgyo') == 10\nassert solution('5 4\\nababa') == 4\nassert solution('20 10\\naaebdbabdbbddaadaadc') == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\nabcbac\") == 6\nassert solution(\"3 6\\naa\") == 3\nassert solution(\"7 1000\\nabczgyo\") == 5\nassert solution(\"5 4\\nababa\") == 4\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == 10\n\n\"\"\"\n\nimport sys\nimport itertools\nfrom collections import Counter\n\n\nclass Solution:\n    def find_length_of_k_beautiful_necklaces(self, n: int, k: int, s: str):\n        # return self.find_length_of_k_beautiful_necklaces_without_using_Counter(n, k, s)\n        return self.find_length_of_k_beautiful_necklaces_using_Counter(n, k, s)\n\n    def find_length_of_k_beautiful_necklaces_using_Counter(self, n: int, k: int, s: str):\n        # return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1(n, k, s)\n        return self.find_length_of_k_beautiful_necklaces_using_Counter_method_2(n, k, s)\n\n    def find_length_of_k_beautiful_necklaces_using_Counter_method_1(self, n: int, k: int, s: str):\n        # \u8d85\u65f6\n        # return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion(n, k, s)\n        return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_2(n, k, s)\n\n    def find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion(self, n: int, k: int, s: str):\n        # \u8d85\u65f6\n        # return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n, k, s, dict())\n        return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1_2(n, k, s, dict(), 0, 0, 0)\n\n    def find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(self, n: int, k: int, s: str, dic: dict):\n        # \u8d85\u65f6\n        # if n == 0 and k == 0:\n        #     return 0\n        # return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n - 1, k, s, dic) + self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n, k - 1, s, dic)\n\n        # if k == 1:\n        #     if Counter(s) - dic >= Counter(s):\n        #         return len(s)\n        #     else:\n        #         return 0\n        # if n == 1:\n        #     for key, value in dic.items():\n        #         if value >= 1:\n        #             return 1\n        #     return 0\n        # return self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n - 1, k, s, dic) + self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n, k - 1, s, dic)\n\n        # if k == 1:\n        #     return len(s)\n\n        # if n == 1:\n        #     for key, value in dic.items():\n        #         if value >= 1:\n        #             return 1\n        #     return 0\n        # # if dic[s[0]] == 1:\n        # #     dic[s[0]] -= 1\n        # # else:\n        # #     return 0\n        # # dic[s[0]] -= 1\n        # # # dic[s[0]] -= 1\n        # # # dic[s[0]] += 1\n        # # if dic[s[0]] >= 1:\n        # #     return 1 + self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n - 1, k, s[1:], dic)\n        # # else:\n        # #     return 0 + self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n - 1, k, s[1:], dic)\n\n        # # if dic[s[0]] >= 1:\n        # #     return 1 + self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n - 1, k, s[1:], dic)\n        # # else:\n        # #     return 0 + self.find_length_of_k_beautiful_necklaces_using_Counter_method_1_recursion_1(n - 1, k, s[1:], dic)\n\n        # if k == 1:\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6 abc') == '3'\nassert solution('3 6 abbc') == '1'\nassert solution('3 6 abcc') == '1'\nassert solution('3 6 a') == '3'\nassert solution('3 6 ab') == '3'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcbac') == 3\nassert solution('aaa') == 3\nassert solution('abczgyo') == 5\nassert solution('ababa') == 4\nassert solution('ecbedececacbcbccbdec') == 10"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 abc') == '3'\nassert solution('2 1 abc') == '1'\nassert solution('3 3 abcd') == '5'\nassert solution('5 4 abac') == '4'\nassert solution('5 5 ababc') == '6'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6 abc') == 3\nassert solution('3 6 abcbac') == 3\nassert solution('3 6 abcbac') == 3\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 5 6') == 'NO'\nassert solution('3 2 1') == 'YES'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\") == \"NO\"\nassert solution(\"1 1\\n1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n\") == \"YES\\n1 3 5\\nNO\\nNO\"\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\") == 'YES\\n1 3 5'\nassert solution(\"4 4\\n1 2 3 4 5\") == 'NO'\nassert solution(\"5 2\\n1 2 3 4 5\") == 'NO'\nassert solution(\"5 4\\n1 2 3 4 5\") == 'YES\\n1 3 5'\nassert solution(\"5 3\\n1 2 3 4 5\") == 'NO'\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'YES\\n1 3 5'\nassert solution('5\\n3 3\\n7 18 3 14 1\\n5 4\\n1 2 8 4 10 2') == 'NO\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'YES\\n1 3 5'\nassert solution('3\\n5 2\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'NO\\nNO'\n\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n\") == \"YES\\n1 3 5\\nNO\\nNO\"\nprint(\"Check the solution: \", solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n\"))\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == expected_result\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == 'NO'\n\"\"\"\nfrom typing import List\nimport math\n\nfrom collections import Counter\n\nclass Segment:\n    def __init__(self, left, right):\n        self.left = left\n        self.right = right\n\n    def add(self, element):\n        self.right += element\n        self.right %= 2\n        return self\n\n    def subtract(self, element):\n        self.left -= element\n        self.left %= 2\n        return self\n\n    def __eq__(self, other):\n        return self.left == other.left and self.right == other.right"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 18 3 14 1\") == \"YES\\n1 3 5\"\nassert solution(\"5 4\") == \"NO\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('110110110110010111011110110011101111011110111100101111011110111101111011110111111111111111') == '10111111011111111111111111111111111'\nassert solution('1100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011') == '101111111111111111111111111111111111'\nassert solution('10111011011011101101101101101101111011011011011110110110110110110110111101111011011110111') == '10111111011111111111111111111111111'\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('110111111000111101111111101101110') == '1322171932261596'\nassert solution('101011111111111111111111111101') == '3221225471'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000010') == '101111111'\nassert solution('11111111111111111111111111111110111111111111111111111111111111') == '10111111111111111111111111111111'\nassert solution('10000000') == '111111111111111111111111111111111'\nassert solution('111111111111111111111111111111111110111111111111111111111111111111') == '10111111111111111111111111111111'\nassert solution('111111111111111111111111111111111110111111111111111111111111111111') == '10111111111111111111111111111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111011011110000010100101110011100') == 964176192\nassert solution('10111111111111111111111111111101') == 3221225471\nassert solution('111111111111111111111111111111101') == 3221225471\nassert solution('111111111111111111111111111111101') == 3221225471\nassert solution('111111111111111111111111111111101') == 3221225471\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1110110110010111101100101111011\") == \"3221225471\"\nassert solution(\"1011110110010111101100101111011\") == \"3221225471\"\nassert solution(\"10111101100101111011001011110111\") == \"3221225471\"\nassert solution(\"101111011001011110110010111101111\") == \"3221225471\"\nassert solution(\"1110110110010111101100101111011111\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11101011011000110110111101011011100110111101110111101110111101111011110111101111011110111111111111111111111111111101') == '101111111111111111111111111111111111'\nassert solution('1011111111111111111111111111111111111111111111111111111111111111111111111101') == '3221225471'\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") ==\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1],\n    [1,4,6,4,1]\n]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1]\n]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\\n1 1\"\nassert solution(\"3\") == \"1\\n1 2\\n1 1 3\"\n\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n\n        res = [[1], [1, 1]]\n        for i in range(3, numRows + 1):\n            cur = [1]\n            for j in range(1, i):\n                cur.append(res[i - 2][j - 1] + res[i - 2][j])\n            cur.append(1)\n            res.append(cur)\n        return res"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == [\n   [1],\n   [1,1],\n   [1,2,1],\n   [1,3,3,1],\n   [1,4,6,4,1]\n]\nassert solution('1') == [\n   [1],\n]\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nprint('Success')\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution('4') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\nassert solution('7') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1]]\nassert solution('7') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1]]\nassert solution('9') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1]]\n\"\"\"\nfrom typing import List\n\nfrom run_tests import run_tests\n\n\nclass PascalTriangle:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n\n    def get_pascal_triangle(self, n: int) -> List[List[int]]:\n        if n == 0:\n            return []\n        triangle = []\n        triangle.append([1])\n        triangle.append([1, 1])\n        for row_index in range(2, n):\n            row = []\n            row.append(1)\n            for i in range(1, row_index):\n                row.append(triangle[-1][i] + triangle[-1][i - 1])\n            row.append(1)\n            triangle.append(row)\n        return triangle\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\nabc@def.com\nxyz@abc.com\\n\\\naaa@bbb.com\\n\\\nccc@ddd.com\\n\\\n\") == [\"abc@def.com\", \"xyz@abc.com\", \"aaa@bbb.com\", \"ccc@ddd.com\"]\n\nassert solution(\"1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '''3\n    lara@hackerrank.com\n    brian-23@hackerrank.com\n    britts_54@hackerrank.com\n    '''\n) == [\n    'brian-23@hackerrank.com',\n    'britts_54@hackerrank.com',\n    'lara@hackerrank.com'\n]"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n\"ajeet@yahoo.com\"\\n\"akash_44@rediffmail.com\"') == ['ajeet@yahoo.com', 'akash_44@rediffmail.com']\nassert solution('1\\n\"me@myself.com\"') == ['me@myself.com']\n\n=====Sample Output=====\n['ajeet@yahoo.com', 'akash_44@rediffmail.com']\n['me@myself.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\nannay@gmail.com\\nnini@gmail.com') == ['annay@gmail.com', 'nini@gmail.com']\n\n=====Sample Input=====\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\n=====Sample Output=====\n['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\n\nSolution:\n=====Solution====="
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == []\nassert solution('asd') == ['asd']\nassert solution('aa@asd.sad') == ['aa@asd.sad']\nassert solution('asd@asd.sad') == ['asd@asd.sad']\nassert solution('asd.asd@asd.sad') == ['asd.asd@asd.sad']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nrich@gmail.com\\njulia@julia') == ['julia@julia', 'rich@gmail.com']\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 qwerty@asd.com qwerty1@asd.com qwerty2@asd.com qwerty3@asd.com qwerty4@asd.com qwerty5@asd.com\") == \n[\n    \"qwerty@asd.com\",\n    \"qwerty1@asd.com\",\n    \"qwerty2@asd.com\",\n    \"qwerty3@asd.com\",\n    \"qwerty4@asd.com\",\n]\n\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(input())\nl = list(map(lambda x: x[:len(x)-10].split('@')[0], l))\nl = list(set(l))\nl = sorted(l)\nfor i in l:\n    print(i)\n\n\"\"\"\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\naaa@aaa.com\\nbbb@bbb.com\\nccc@ccc.com\\nddd@ddd.com\") == \\\n        [\"aaa@aaa.com\", \"bbb@bbb.com\", \"ccc@ccc.com\", \"ddd@ddd.com\"]\nassert solution(\"1\\naaa@aaa.com\") == [\"aaa@aaa.com\"]\n=====Test Case 1=====\nInput\n4\naaa@aaa.com\nbbb@bbb.com\nccc@ccc.com\nddd@ddd.com\n\nOutput\n[\"aaa@aaa.com\", \"bbb@bbb.com\", \"ccc@ccc.com\", \"ddd@ddd.com\"]\n=====Test Case 2=====\nInput\n1\naaa@aaa.com\n\nOutput\n[\"aaa@aaa.com\"]\n'''\n\nn = int(input())\nl = []\n\nfor i in range(n):\n    l.append(input())"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nrich-d@gamil.com\\ngmails@gamil.com\") == ['gmails@gamil.com']\nassert solution(\"1\\nhdjsr7@gamil.com\") == ['hdjsr7@gamil.com']\nassert solution(\"0\\najsdkfjsjk@gamil.com\\ngmails@gamil.com\") == []\n\n=====Test 2====="
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\nlara@hackerrank.com\nbrian-23@hackerrank.com''') == ['brian-23@hackerrank.com', 'lara@hackerrank.com']\nassert solution('''5\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\njulia0@hackerrank.com\njulia1@hackerrank.com''') == ['britts_54@hackerrank.com', 'julia0@hackerrank.com', 'julia1@hackerrank.com']\nassert solution('''3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\nassert solution('''5\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\njulia0@hackerrank.com\njulia1@hackerrank.com\n''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'julia0@hackerrank.com', 'julia1@hackerrank.com']\nassert solution('''5\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\njulia0@hackerrank.com\njulia1@hackerrank.com\n''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'julia0@hackerrank.com', 'julia1@hackerrank.com']\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\nprint(solution('10'))\n\nProblem\n\nWrite a function:"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == [1, 8, 27, 64]\n\n=====Constraints=====\n0 <= N <= 30\n\n=====Test Case Explanation=====\nTest Case 1\n\nThe first 4 lines contains the string N\n\n3\n\nThe next line contains the string 4 which is to be converted to an integer and stored in N\n\n4\n\nThe next 3 lines contains the string 1\n\n2\n\nThe next line contains the string 2\n\n3\n\nThe next line contains the string 3\n\n5\n\nThe next 3 lines contains the string 5\n\n6\n\nThe next 3 lines contains the string 6\n\n7\n\nThe next 3 lines contains the string 7\n\n8\n\nThe next 3 lines contains the string 8\n\n>>> solution('4')\n[1, 8, 27, 64]\n>>> solution('3')\n[1, 8, 27]\n>>> solution('5')\n[1, 8, 27, 64, 125]\n>>> solution('7')\n[1, 8, 27, 64, 125, 216, 343]\n>>> solution('8')\n[1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> solution('7')\n[1, 8, 27, 64, 125, 216, 343]\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('15') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331,\n2162, 3125, 4176, 5648, 8000]\n\nHint:\n\nLet's learn some new Python concepts! You have to generate a list of the first N fibonacci numbers, 0 being the first number. Let's have a look at the two different ways of solving this problem.\n\n>>>> import math\n>>>> import functools\n>>>> def solution1(n):\n    fibs = []\n    for i in range(n):\n        if i < 2:\n            fibs.append(i)\n        else:\n            fibs.append(fibs[-1] + fibs[-2])\n    return list(map(lambda x: x ** 3, fibs))\n\n>>>> def solution(n):\n    fibs = [0, 1]\n    for i in range(n - 2):\n        fibs.append(fibs[-1] + fibs[-2])\n    return list(map(lambda x: x ** 3, fibs))\n\n>>>> if __name__ == '__main__':\n    n = int(input())\n    print(solution(n))"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1764, 2500]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"5\") == [0, 1, 1, 8, 27]\n\n====== Sample Solution ======"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\n\n======Solution=======\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == [1, 8, 27, 64, 125, 216]\nassert solution('4') == [1, 8, 27, 64]\n=====Tests=====\nYour solution is called:\nprint(solution(int(input())))\n\n>> [1, 8, 27, 64, 125, 216]\n\nprint(solution('4'))\n\n>> [1, 8, 27, 64]\n\nprint(solution('6'))\n\n>> [1, 8, 27, 64, 125, 216]\n\nprint(solution('-2'))\n\n>> [1, 1, 1]\n\nprint(solution('0'))\n\n>> [1, 1, 1]\n\nprint(solution('-5'))\n\n>> []\n\nprint(solution('-1'))\n\n>> []\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('5'))\n\n>> [1, 1, 2, 8, 27, 64]\n\nprint(solution('9'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('-5'))\n\n>> []\n\nprint(solution('-1'))\n\n>> []\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('5'))\n\n>> [1, 1, 2, 8, 27, 64]\n\nprint(solution('9'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('-6'))\n\n>> []\n\nprint(solution('-1'))\n\n>> []\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('6'))\n\n>> [1, 8, 27, 64, 125, 216]\n\nprint(solution('-3'))\n\n>> [1, 1, 1]\n\nprint(solution('0'))\n\n>> [1, 1, 1]\n\nprint(solution('-2'))\n\n>> [1, 1, 1]\n\nprint(solution('3'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('2'))\n\n>> [1, 2]\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('0'))\n\n>> [1]\n\nprint(solution('4'))\n\n>> [1, 8, 27, 64]\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('0'))\n\n>> [1]\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('2'))\n\n>> [1, 2]\n\nprint(solution('9'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('-8'))\n\n>> []\n\nprint(solution('-3'))\n\n>> [1, 1, 1]\n\nprint(solution('-1'))\n\n>> [1, 1, 1]\n\nprint(solution('0'))\n\n>> [1, 1, 1]\n\nprint(solution('-2'))\n\n>> [1, 1, 1]\n\nprint(solution('3'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('8'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('9'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('0'))\n\n>> [1, 1, 1]\n\nprint(solution('-1'))\n\n>> [1, 1, 1]\n\nprint(solution('-5'))\n\n>> []\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('2'))\n\n>> [1, 2]\n\nprint(solution('3'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('4'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('5'))\n\n>> [1, 1, 2, 8, 27, 64]\n\nprint(solution('6'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216]\n\nprint(solution('7'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('-7'))\n\n>> []\n\nprint(solution('-8'))\n\n>> []\n\nprint(solution('-5'))\n\n>> []\n\nprint(solution('-3'))\n\n>> [1, 1, 1]\n\nprint(solution('-1'))\n\n>> [1, 1, 1]\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('2'))\n\n>> [1, 2]\n\nprint(solution('3'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('4'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('5'))\n\n>> [1, 1, 2, 8, 27, 64]\n\nprint(solution('6'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216]\n\nprint(solution('7'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('-7'))\n\n>> []\n\nprint(solution('-8'))\n\n>> []\n\nprint(solution('-3'))\n\n>> [1, 1, 1]\n\nprint(solution('-1'))\n\n>> [1, 1, 1]\n\nprint(solution('0'))\n\n>> [1, 1, 1]\n\nprint(solution('1'))\n\n>> [1]\n\nprint(solution('2'))\n\n>> [1, 2]\n\nprint(solution('3'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('4'))\n\n>> [1, 1, 2, 8]\n\nprint(solution('5'))\n\n>> [1, 1, 2, 8, 27, 64]\n\nprint(solution('6'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216]\n\nprint(solution('7'))\n\n>> [1, 1, 2, 8, 27, 64, 125, 216, 343, 512]\n\nprint(solution('-7'))\n\n>> []\n\nprint(solution('-8'))\n\n>> []\n\nprint(solution('-3'))\n\n>> [1, 1, 1]\n\nprint(solution('"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(4) == [0, 1, 1, 8]\n>>>>>>> ed4de1c0ff24ef09814b1a1b8ccb073b3d09e376\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == [1, 8, 27, 64]\nassert solution(\"10\") == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nstdin = input().strip()\n\n=====Test Case=====\nYou will be given a number N. On the next N lines, you will receive integers. You have to print the list of cubes of these numbers in order.\n\nExample\n\nPrint the list in the following order:\n\n[1, 8, 27, 64]\n\nInput Format\n\nThe first line contains the number N.\n\nConstraints\n\n1<=N<=100\n\nOutput Format\n\nPrint the list of cubes of numbers in the order received.\n\n=====Sample Test Cases=====\nSample Test Case 1\n\nInput\n\n2\n\nOutput\n\n[1, 8, 27]\n\n=====Sample Test Case 2\n\nInput\n\n3\n\nOutput\n\n[1, 8, 27]\n\n=====Sample Test Case 3\n\nInput\n\n4\n\nOutput\n\n[1, 8, 27]\n\n=====Sample Test Case 4\n\nInput\n\n5\n\nOutput\n\n[1, 8, 27]\n\nn = int(input())\na = [i ** 3 for i in range(1, n + 1)]\nprint(a)"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\"\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author>Anonymous</author>\n        <question type='hard'/>\n        <question type='hard'/>\n    </entry>\n</feed>\n\"\"\") == 2\n\"\"\")"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<data>'\n       '   <country name=\"Liechtenstein\">'\n       '       <rank>1</rank>'\n       '       <year>2008</year>'\n       '       <gdppc>141100</gdppc>'\n       '       <neighbor name=\"Austria\" direction=\"E\"/>'\n       '       <neighbor name=\"Switzerland\" direction=\"W\"/>'\n       '   </country>'\n       '   <country name=\"Singapore\">'\n       '       <rank>4</rank>'\n       '       <year>2011</year>'\n       '       <gdppc>59900</gdppc>'\n       '       <neighbor name=\"Malaysia\" direction=\"N\"/>'\n       '   </country>'\n       '   <country name=\"Panama\">'\n       '       <rank>68</rank>'\n       '       <year>2011</year>'\n       '       <gdppc>13600</gdppc>'\n       '       <neighbor name=\"Costa Rica\" direction=\"W\"/>'\n       '       <neighbor name=\"Colombia\" direction=\"E\"/>'\n       '   </country>'\n        '</data>') == 3\nassert solution('<data>'\n       '   <competitions>'\n       '       <competition>'\n       '           <season>Men\\'s</season>'\n       '           <games>'\n       '               <game>'\n       '                   <season>2008</season>'\n       '                   <city>Beijing</city>'\n       '                   <sport>Football</sport>'\n       '                   <event>Friendly</event>'\n       '                   <round>Group A</round>'\n       '                   <team1>US</team1>'\n       '                   <team2>China</team2>'\n       '                   <score1>2</score1>'\n       '                   <score2>0</score2>'\n       '                   <time1>08:00</time1>'\n       '                   <time2>08:00</time2>'\n       '               </game>'\n       '           </games>'\n       '       </competition>'\n       '   </competitions>'\n        '</data>') == 2\nassert solution('<data>'\n       '   <competitions>'\n       '       <competition>'\n       '           <season>Men\\'s</season>'\n       '           <games>'\n       '               <game>'\n       '                   <season>2008</season>'\n       '                   <city>Beijing</city>'\n       '                   <sport>Football</sport>'\n       '                   <event>Friendly</event>'\n       '                   <round>Group A</round>'\n       '                   <team1>US</team1>'\n       '                   <team2>China</team2>'\n       '                   <score1>2</score1>'\n       '                   <score2>0</score2>'\n       '                   <time1>08:00</time1>'\n       '                   <time2>08:00</time2>'\n       '               </game>'\n       '               <game>'\n       '                   <season>2008</season>'\n       '                   <city>London</city>'\n       '                   <sport>Football</sport>'\n       '                   <event>Friendly</event>'\n       '                   <round>Group A</round>'\n       '                   <team1>Italy</team1>'\n       '                   <team2>South Korea</team2>'\n       '                   <score1>2</score1>'\n       '                   <score2>0</score2>'\n       '                   <time1>09:00</time1>'\n       '                   <time2>09:00</time2>'\n       '               </game>'\n       '           </games>'\n       '       </competition>'\n       '   </competitions>'\n        '</data>') == 1\nprint(solution(stdin))\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\nInput Format\n\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nConstraints\n\n1 <= N <= 100\n\nOutput Format\n\nOutput a single line, the integer value of the maximum level of nesting in the XML document.\nSample Input\n\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output\n\n1\nExplanation\n\nHere, the root is a feed tag, which has depth of 0.\nThe tags title, subtitle, link and updated all have a depth of 1.\n\nFor the tag &quot;title&quot;, the depth is 2 (because it has one child).\n\nFor the tag &quot;subtitle&quot;, the depth is 3 (because it has one child).\n\nHence, the maximum depth is 3.\n\n\"\"\"\n\nimport xml.etree.ElementTree as etree\nimport sys\nimport re\nimport os\n\nclass reD:\n    def __init__(self, xml):\n        tree = etree.parse(xml)\n        root = tree.getroot()\n        self.root = root\n\n    def getMaxDepth(self):\n        if self.root == None:\n            return 0\n        self.maxDepth = 0\n        self.recursive(self.root, 1)\n        return self.maxDepth\n\n    def recursive(self, root, depth):\n        self.maxDepth = max(self.maxDepth, depth)\n        for child in root:\n            self.recursive(child, depth+1)"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(xml) == 3\nassert solution(xml2) == 1\nassert solution(xml3) == 0\nassert solution(xml4) == 0"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n=====Test Input=====\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en'>\n    <title type='text'>HackerRank</title>\n    <subtitle type='html'>This is the HackerRank</subtitle>\n    <link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\n    <updated>2015-12-25T12:00:00</updated>\n</feed>\"\"\") == \"1\"\nassert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom'>\n    <link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\n    <updated>2015-12-25T12:00:00</updated>\n</feed>\"\"\") == \"0\"\n\"\"\""
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"<feed xml:lang='en'>\\n\"\n\"    <title>HackerRank</title>\\n\"\n\"    <subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"    <updated>2013-12-25T12:00:00</updated>\\n\"\n\"</feed>\") == 1\n\nassert solution(\n\"<feed xml:lang='en'>\\n\"\n\"    <title>HackerRank</title>\\n\"\n\"    <subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"    <updated>2013-12-25T12:00:00</updated>\\n\"\n\"<entry>\\n\"\n\"<question type='hard'>XML 1</question>\\n\"\n\"</entry>\\n\"\n\"</feed>\") == 2\n\nassert solution(\n\"<feed xml:lang='en'>\\n\"\n\"    <title>HackerRank</title>\\n\"\n\"    <subtitle lang='en'>Programming challenges</subtitle>\\n\"\n\"    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n\"\n\"    <updated>2013-12-25T12:00:00</updated>\\n\"\n\"<entry>\\n\"\n\"<question type='hard'>XML 1</question>\\n\"\n\"</entry>\\n\"\n\"<entry>\\n\"\n\"<question type='hard'>XML 2</question>\\n\"\n\"</entry>\\n\"\n\"</feed>\") == 2\n\n\"\"\"\nSample Input\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output\n1\n\nExplanation\nHere, the root tag has depth 0.\nThe depth of the <feed> tag is 1 (the depth of the <feed> tag itself doesn't count).\nThe depth of the <title> tag is 1.\nThe depth of the <subtitle> tag is 2.\nHence, the maximum depth is 1.\n\"\"\"\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n<tag>text</tag>\\n<tag />\\n</tag>\\n') == 1\nassert solution('4\\n<tag>text<child/></tag>\\n<tag />\\n</tag>\\n') == 2\nassert solution('4\\n<tag>text<child/></tag>\\n<tag /><child/>\\n</tag>\\n') == 2\nassert solution('4\\n<tag>text<child/></tag>\\n<tag /><child/><child/></tag>\\n<tag />\\n</tag>\\n') == 3\nassert solution('4\\n<doc>\\n<parent>\\n<child><grandparent/><parent>text<child/></parent></child>\\n</parent>\\n</doc>\\n') == 4\n\n=====Test 1=====\nInput\n\n4\n<tag>text</tag>\n<tag />\n</tag>\n\nOutput\n\n1\n\nExpected\n\n1\n\n=====Test 2=====\nInput\n\n4\n<doc>\n<parent>\n<child><grandparent/><parent>text<child/></parent></child>\n</parent>\n</doc>\n\nOutput\n\n4\n\nExpected\n\n4\n\n=====Test 3=====\nInput\n\n4\n<doc>\n<parent>\n<child><grandparent/><parent>text<child/></parent></child>\n</parent>\n</doc>\n\nOutput\n\n2\n\nExpected\n\n2\n\"\"\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('97798553323') == 'YES'\nassert solution('97798553432') == 'NO'\nassert solution('9877894533') == 'YES'\nassert solution('9877894533') == 'NO'\nassert solution('98.78945.333') == 'YES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"788654321\") == \"YES\"\nassert solution(\"7876\") == \"NO\"\nassert solution(\"876\") == \"NO\"\nassert solution(\"9538476\") == \"YES\"\nassert solution(\"7992739871\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('97798221366') == 'YES'\nassert solution('97792213366') == 'NO'\n=====Test Case 0=====\nTest 1 Passed: 97798221366\nTest 2 Failed: 97792213366\nTest 3 Passed: 97798221366\nTest 4 Passed: 97792213366\nTest 5 Passed: 97798221366\nTest 6 Passed: 97798221366\nTest 7 Passed: 97798221366\nTest 8 Passed: 97798221366\nTest 9 Passed: 97798221366\nTest 10 Passed: 97798221366\nTest 11 Passed: 97798221366\nTest 12 Passed: 97798221366\nTest 13 Passed: 97798221366\nTest 14 Passed: 97798221366\nTest 15 Passed: 97798221366\nTest 16 Passed: 97798221366\nTest 17 Passed: 97798221366\nTest 18 Passed: 97798221366\nTest 19 Passed: 97798221366\nTest 20 Passed: 97798221366\nTest 21 Passed: 97798221366\nTest 22 Passed: 97798221366\nTest 23 Passed: 97798221366\nTest 24 Passed: 97798221366\nTest 25 Passed: 97798221366\nTest 26 Passed: 97798221366\nTest 27 Passed: 97798221366\nTest 28 Passed: 97798221366\nTest 29 Passed: 97798221366\nTest 30 Passed: 97798221366\nTest 31 Passed: 97798221366\nTest 32 Passed: 97798221366\nTest 33 Passed: 97798221366\nTest 34 Passed: 97798221366\nTest 35 Passed: 97798221366\nTest 36 Passed: 97798221366\nTest 37 Passed: 97798221366\nTest 38 Passed: 97798221366\nTest 39 Passed: 97798221366\nTest 40 Passed: 97798221366\nTest 41 Passed: 97798221366\nTest 42 Passed: 97798221366\nTest 43 Passed: 97798221366\nTest 44 Passed: 97798221366\nTest 45 Passed: 97798221366\nTest 46 Passed: 97798221366\nTest 47 Passed: 97798221366\nTest 48 Passed: 97798221366\nTest 49 Passed: 97798221366\nTest 50 Passed: 97798221366\nTest 51 Passed: 97798221366\nTest 52 Passed: 97798221366\nTest 53 Passed: 97798221366\nTest 54 Passed: 97798221366\nTest 55 Passed: 97798221366\nTest 56 Passed: 97798221366\nTest 57 Passed: 97798221366\nTest 58 Passed: 97798221366\nTest 59 Passed: 97798221366\nTest 60 Passed: 97798221366\nTest 61 Passed: 97798221366\nTest 62 Passed: 97798221366\nTest 63 Passed: 97798221366\nTest 64 Passed: 97798221366\nTest 65 Passed: 97798221366\nTest 66 Passed: 97798221366\nTest 67 Passed: 97798221366\nTest 68 Passed: 97798221366\nTest 69 Passed: 97798221366\nTest 70 Passed: 97798221366\nTest 71 Passed: 97798221366\nTest 72 Passed: 97798221366\nTest 73 Passed: 97798221366\nTest 74 Passed: 97798221366\nTest 75 Passed: 97798221366\nTest 76 Passed: 97798221366\nTest 77 Passed: 97798221366\nTest 78 Passed: 97798221366\nTest 79 Passed: 97798221366\nTest 80 Passed: 97798221366\nTest 81 Passed: 97798221366\nTest 82 Passed: 97798221366\nTest 83 Passed: 97798221366\nTest 84 Passed: 97798221366\nTest 85 Passed: 97798221366\nTest 86 Passed: 97798221366\nTest 87 Passed: 97798221366\nTest 88 Passed: 97798221366\nTest 89 Passed: 97798221366\nTest 90 Passed: 97798221366\nTest 91 Passed: 97798221366\nTest 92 Passed: 97798221366\nTest 93 Passed: 97798221366\nTest 94 Passed: 97798221366\nTest 95 Passed: 97798221366\nTest 96 Passed: 97798221366\nTest 97 Passed: 97798221366\nTest 98 Passed: 97798221366\nTest 99 Passed: 97798221366\nTest 100 Passed: 97798221366\nTest 101 Passed: 97798221366\nTest 102 Passed: 97798221366\nTest 103 Passed: 97798221366\nTest 104 Passed: 97798221366\nTest 105 Passed: 97798221366\nTest 106 Passed: 97798221366\nTest 107 Passed: 97798221366\nTest 108 Passed: 97798221366\nTest 109 Passed: 97798221366\nTest 110 Passed: 97798221366\nTest 111 Passed: 97798221366\nTest 112 Passed: 97798221366\nTest 113 Passed: 97798221366\nTest 114 Passed: 97798221366\nTest 115 Passed: 97798221366\nTest 116 Passed: 97798221366\nTest 117 Passed: 97798221366\nTest 118 Passed: 97798221366\nTest 119 Passed: 97798221366\nTest 120 Passed: 97798221366\nTest 121 Passed: 97798221366\nTest 122 Passed: 97798221366\nTest 123 Passed: 97798221366\nTest 124 Passed: 97798221366\nTest 125 Passed: 97798221366\nTest 126 Passed: 97798221366\nTest 127 Passed: 97798221366\nTest 128 Passed: 97798221366\nTest 129 Passed: 97798221366\nTest 130 Passed: 97798221366\nTest 131 Passed: 97798221366\nTest 132 Passed: 97798221366\nTest 133 Passed: 97798221366\nTest 134 Passed: 97798221366\nTest 135 Passed: 97798221366\nTest 136 Passed: 97798221366\nTest 137 Passed: 97798221366\nTest 138 Passed: 97798221366\nTest 139 Passed: 97798221366\nTest 140 Passed: 97798221366\nTest 141 Passed: 97798221366\nTest 142 Passed: 97798221366\nTest 143 Passed: 97798221366\nTest 144 Passed: 97798221366\nTest 145 Passed: 97798221366\nTest 146 Passed: 97798221366\nTest 147 Passed: 97798221366\nTest 148 Passed: 97798221366\nTest 149 Passed: 97798221366\nTest 150 Passed: 97798221366\nTest 151 Passed: 97798221366\nTest 152 Passed: 97798221366\nTest 153 Passed: 97798221366\nTest 154 Passed: 97798221366\nTest 155 Passed: 97798221366\nTest 156 Passed: 97798221366\nTest 157 Passed: 97798221366\nTest 158 Passed: 97798221366\nTest 159 Passed: 97798221366\nTest 160 Passed: 97798221366\nTest 161 Passed: 97798221366\nTest 162 Passed: 97798221366\nTest 163 Passed: 97798221366\nTest 164 Passed: 97798221366\nTest 165 Passed: 97798221366\nTest 166 Passed:"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('07895462130') == 'YES'\nassert solution('93437416439') == 'YES'\nassert solution('434231456789') == 'NO'\nassert solution('434231456A789') == 'NO'\nassert solution('123456789') == 'NO'\n\nprint('Success')\n\n=====How to Submit=====\nSubmission Format\n> python solution.py\n> [[input1,input2,input3,...],[input1,input2,input3,...],[input1,input2,input3,...]]\n> In case of error on the first test case, please send a link to your code.\n> For example:\n> https://www.coursera.org/learn/algorithms-part1/supplement/mQFTX\n> If you've been given some queries, it is possible that you've already used regular expressions and they have not worked for you. If so, then you can use our slightly more restricted regular expression module, regex.py.\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7227656043\") == \"YES\"\nassert solution(\"1252478965\") == \"NO\"\nassert solution(\"9382731234\") == \"YES\"\nassert solution(\"2932654321\") == \"NO\"\nassert solution(\"6534298321\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234567890') == 'YES'\nassert solution('987654321') == 'NO'\nassert solution('93838383839') == 'YES'\n\nassert solution('8383838383') == 'YES'\nassert solution('8838383838') == 'YES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('738-938-4938') == 'YES'\nassert solution('123-4567') == 'NO'\nassert solution('1238-49385') == 'YES'\nassert solution('7334838293') == 'NO'\n\ninput\n4\n738-938-4938\n123-4567\n1238-49385\n7334838293\noutput\nYES\nNO\nYES\nNO\n\n'''\n\nimport re\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7883412345') == \"YES\"\nassert solution('782345678') == \"NO\"\nassert solution('7891234567') == \"YES\"\n\nSolution:\n>>> import re\n>>> n = int(input())\n>>> for i in range(n):\n...     phone_number = input()\n...     if re.match(r\"^[789]\\d{9}$\", phone_number):\n...         print('YES')\n...     else:\n...         print('NO')\n\n>>> if re.match(r\"^[789]\\d{9}$\", '7883412345'):\n...     print('YES')\n... else:\n...     print('NO')\nYES\n>>> if re.match(r\"^[789]\\d{9}$\", '782345678'):\n...     print('NO')\n... else:\n...     print('YES')\nNO\n>>> if re.match(r\"^[789]\\d{9}$\", '7891234567'):\n...     print('YES')\n... else:\n...     print('NO')\nYES\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7123456789') == 'YES'\nassert solution('7182345678') == 'YES'\nassert solution('71234567890') == 'NO'\nassert solution('79123456789') == 'YES'\nassert solution('791234567890') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7123456789\") == 'YES'\nassert solution(\"712345678\") == 'NO'\nassert solution(\"9123456789\") == 'YES'\nassert solution(\"912345678\") == 'NO'\nassert solution(\"91234567\") == 'NO'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\nassert solution('3\\n2 4 6\\n4\\n2 4 11') == '6\\n8\\n11'\n\"\"\"\n\nm, m_set = input(), set(map(int, input().split()))\nn, n_set = input(), set(map(int, input().split()))\n\nprint(*sorted(list(m_set.symmetric_difference(n_set))), sep='\\n')\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n'\n'2 4 5 9\\n'\n'4\\n'\n'2 4 11 12') == '5\\n12 9'\nassert solution('5\\n'\n'2 4 11 12\\n'\n'4\\n'\n'2 4 5 9') == '12 9 5'\n\n=====Solution====="
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\nassert solution('''4\n2 4 11 12\n4\n2 4 5 9''') == '''5\n9\n11\n12'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 5 9\\n3\\n4 5') == '5 9', 'Test 1'\nassert solution('5\\n1 5 3 4 2\\n4\\n2 3 5') == '4 5 2', 'Test 2'\n\n=====Test Data=====\nSample input:\n5\n2 4 5 9\n4\n2 4 11 12\n\nSample output:\n5 9\n4 5\n2 4 11 12\n\nExplanation:\nM = {2, 4, 5, 9}\nN = {2, 4, 11, 12}\n\nSample input:\n4\n2 4 11 12\n3\n2 4 9\n\nSample output:\n3\n2 11 9 12\n\nExplanation:\nM = {2, 4, 11, 12}\nN = {2, 4, 9}\n\n=====Constraints=====\n1 <= M <= 10^5\n1 <= N <= 10^5\n\n\"\"\"\n\nm, *m = map(int, input().split())\nn, *n = map(int, input().split())\n\na = set(m)\nb = set(n)\n\nc = a.symmetric_difference(b)\n\nc = sorted(list(c))\n\nfor i in c:\n    print(i)\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 6 8\\n4\\n2 3 6 7\") == \"2\\n6\\n8\"\n=====END OF FILE=====\n'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 6 5\\n3\\n2 3 5') == '5\\n6'\nassert solution('2\\n1 2\\n2\\n3') == '1\\n3'\nassert solution('5\\n2 3 6 5\\n4\\n2 3 5') == '6'\nassert solution('4\\n2 3 6 5\\n3\\n2 3 5') == '5\\n6'\nassert solution('4\\n2 3 6 5\\n3\\n2 5') == '6'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n2 4 6') == '1 5 6'\nassert solution('1\\n9\\n7') == '8'\nassert solution('5\\n2 4 6 8\\n4\\n2 4 6 8') == '3 5 7 9'\nassert solution('5\\n1 2 3 4 5\\n5\\n2 3 4 6 8') == '1 2 6 7 9'\nassert solution('5\\n3 6 5 4 2\\n9\\n2 4 6 8') == '1 3 5 7 9'\n\n=====Test Data=====\nYou do not need to submit your solution.\nThe input is handled for you.\nNo need to save your solution to file.\nYou must finish the problem within 5 minutes.\nDo not use the interpreter to try to solve it.\n\n=====Sample Tests=====\nInput\n4\n1 2 3 4\n3\n2 4 6\nOutput\n1 5 6\nInput\n5\n5 4 3 2 1\n5\n2 4 6 8\nOutput\n1 3 5 7 9\n\n'''"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 6 5\\n3\\n2 3 11 21') == '11 21'\n\nassert solution('4\\n2 3 6 5\\n3\\n2 3 11 21') == '11 21'\n\nassert solution('2\\n1\\n9\\n1') == '9'\n\nassert solution('1\\n9\\n1') == '9'\n\nassert solution('1\\n9\\n1') == '9'"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5\n5\n9 8 5 6 3''') == '8 9 6'\n\na = int(input())\nprint(*sorted(set(map(int, input().split())) ^ set(map(int, input().split()))), sep='\\n')\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 6 8\\n3\\n2 4 11 12\") == \"6\\n8\\n11\"\n=====END OF CONTEXT=====\n\"\"\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1,2,3\\n4,5,6\\n7,8,9\") == \"5.33\"\nassert solution(\"1,2,3\\n4,5,6\\n7,8,9,10\") == \"5.67\"\n\"\"\"\n\nfrom collections import namedtuple\n\nstdin = input()\nstdin = stdin.split(\"\\n\")\nstdin = [x.split(\",\") for x in stdin]\n\nmylist = []\nfor x in range(len(stdin)):\n    for y in range(len(stdin[x])):\n        mylist.append(stdin[x][y])\n\nmylist = [int(x) for x in mylist]"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"75.00\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")\n\n=====Sample Input=====\n6\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n\n=====Sample Output=====\n76.00\n\n\"\"\"\nfrom collections import namedtuple\nimport re\n\nn = int(input())\nfields = input().split()\nStudent = namedtuple('Student', fields)\n\nstudents = []\nfor i in range(n):\n    student = input().split()\n    students.append(Student(*student))\n\nprint('%.2f' %(sum([float(i.MARKS) for i in students])/len(students)))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n=====Sample Input=====\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\n=====Sample Output=====\n78.00\n\n\"\"\"\n\n\nfrom collections import namedtuple\nfrom collections import namedtuple\n\n\nN = int(input())\nfields = input().split()\n\nStudent = namedtuple(\"Student\", fields)\n\ntotal = 0\nfor i in range(N):\n    students = input().split()\n    student = Student(*students)\n    total += int(student.MARKS)\n\nprint(\"{:.2f}\".format(total/N))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_string) == expected_output\nprint('Test Successful!')\n\n=====Test Case 1=====\nInput\n3\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n\nOutput\nAverage: 81.00\n\nExplanation\n\n=====Test Case 2=====\nInput\n5\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1         \n82         5          Scott      2         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5         \n\nOutput\nAverage: 81.00\n\nExplanation\n\n=====Test Case 3=====\nInput\n4\nID         MARKS      NAME       CLASS     \n1          87         Raymond    7         \n2          45         Steven     4         \n3          92         Adrian     9         \n4          72         Stewart    5         \n\nOutput\nAverage: 81.00\n\nExplanation\n\n=====Test Case 4=====\nInput\n5\nCLASS      MARKS      NAME       ID        \n9          2          Raymond    1         \n8          7          Steven     2         \n9          2          Adrian     3         \n7          2          Stewart    4         \n9          2          Jason      5         \n\nOutput\nAverage: 81.00\n\nExplanation\n\n=====Test Case 5=====\nInput\n5\nMARKS      CLASS      NAME       ID        \n2          2          Raymond    1         \n2          2          Steven     2         \n3          2          Adrian     3         \n3          2          Stewart    4         \n2          2          Jason      5         \n\nOutput\nAverage: 81.00\n\nExplanation\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('3\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\n\n=====Sample Test Cases=====\nTest Case 01\n>>> actual output\n78.00\n\nTest Case 02\n>>> actual output\n67.50\n'''\nfrom collections import namedtuple\n\nn = int(input())\n\nstudent = namedtuple('student', input().split())\ntotal = 0\nfor _ in range(n):\n    total += int(student(*input().split()).MARKS)\nprint(f\"{total/n:.2f}\")"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == '0.00'\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == '0.00'\nassert solution(\"3\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == '0.00'\nassert solution(\"4\\nCLASS\\nMARKS\\nNAME\\nID\\n\") == '0.00'\nassert solution(\"5\\nID\\nCLASS\\nNAME\\nMARKS\\n\") == '0.00'\n\n====== Test Case 2 =======\nInput\n3\nID\nMARKS\nCLASS\n26\n46\n10\n26\n45\n3\n1\n2\n3\n2\n34\nOutput\n26.67\n\"\"\"\nfrom collections import namedtuple\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '75.00'\n\n=====Sample Test Cases=====\nTest Case 1\nInput\n\n5\nID\nMARKS\nCLASS\nNAME\n1\n67\nA\n90\nB\n90\n\nOutput\n\n90.00\n\nTest Case 2\nInput\n\n4\nMARKS\n87\nCLASS\nF\n87\nNAME\nA\n\nOutput\n\n85.00\n'''\n\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == '78.00'\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == '67.50'\nassert solution(\"3\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == '67.50'\n\n=====Sample Input=====\n6\nID\nMARKS\nCLASS\nNAME\nLUNCH\nANGLE\n45\n92.0\nSTAR\n53\n62.0\n55\n13.0\npear\n89\n42\n21\n67\n0\n37\n1\n41\nA\n71\n55\n69\n6\n98\n12\n76\n38\n45\nC\nAverage:\n90.00\n\n=====Sample Output=====\n78.00\n67.50\n78.00\n\n>>>>>>> bb4dee66467683fa560f5f29381f6d18d8ddc4c48\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == 'The average marks of the list are: 0.00'\n\n'''\n\nfrom collections import namedtuple\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Weird'\nassert solution('5') == 'Not Weird'\nassert solution('6') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(14) == \"Weird\"\nassert solution(21) == \"Weird\"\nassert solution(19) == \"Not Weird\"\nassert solution(23) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"5\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 'Not Weird'\nassert solution('4') == 'Not Weird'\nassert solution('20') == 'Weird'\nassert solution('21') == 'Weird'\nassert solution('22') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == \"Not Weird\"\nassert solution('3') == \"Weird\"\nassert solution('4') == \"Not Weird\"\nassert solution('5') == \"Weird\"\nassert solution('6') == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(14) == \"Weird\"\nassert solution(20) == \"Not Weird\"\nassert solution(22) == \"Not Weird\"\nassert solution(24) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 'Not Weird'\nassert solution(14) == 'Weird'\nassert solution(20) == 'Not Weird'\nassert solution(101) == 'Not Weird'\n\n==========Task 6:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\nInput Format\nA single line containing a positive integer,.\n\nConstraints\nOutput Format\nPrint Weird if the number is weird. Otherwise, print Not Weird.\n\n==========Task 7:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 8:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\nInput Format\nA single line containing a positive integer,.\n\nConstraints\nOutput Format\nPrint Weird if the number is weird. Otherwise, print Not Weird.\n\n==========Task 9:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 10:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\nInput Format\nA single line containing a positive integer,.\n\nConstraints\nOutput Format\nPrint Weird if the number is weird. Otherwise, print Not Weird.\n\n==========Task 11:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 12:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 13:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 14:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 15:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 16:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 17:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 18:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 19:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 20:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 21:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 22:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 23:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 24:==\nIn this challenge, we will use loops to do some math.\n\nTask\nGiven an integer,, perform the following conditional actions:\nIf  is odd, print Weird\nIf  is even and in the inclusive range of  to, print Not Weird\nIf  is even and in the inclusive range of  to, print Weird\nIf  is even and greater than, print Not Weird\n\n==========Task 25:==\nIn this challenge, we will use loops to do some"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Weird\"\nassert solution(\"24\") == \"Not Weird\"\nassert solution(\"1\") == \"Weird\"\nassert solution(\"20\") == \"Weird\"\nassert solution(\"7\") == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 'Not Weird'\nassert solution('4') == 'Not Weird'\nassert solution('20') == 'Weird'\nassert solution('21') == 'Weird'\nassert solution('22') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == \"Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(15) == \"Weird\"\nassert solution(14) == \"Not Weird\"\nassert solution(20) == \"Weird\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('<elem>value</elem>') == 6\nassert solution('<elem attr=\"bar\" />') == 1\nassert solution('<root><elem>text</elem><elem>text2</elem></root>') == 6\nassert solution('<root><elem/></root>') == 0\nassert solution('<root><elem attr=\"foo\"/></root>') == 1\n=======\n7\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n6\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n6\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n5\n\n<feed xml:"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('<x>w3resourceabc123@gmail.com</x><x>w3resourceabc@gmail.com</x>') == 6\nassert solution('<x>this is a text</x><x>this is a text</x>') == 7\nassert solution('<x a=\"w3resourceabc@gmail.com\" b=\"w3resourceabc123@gmail.com\" c=\"w3resourceabc@gmail.com\" d=\"w3resourceabc123@gmail.com\" e=\"w3resourceabc123@gmail.com\" f=\"w3resourceabc@gmail.com\">w3resourceabc@gmail.com</x>') == 7\nassert solution('<data>\\\n    <country name=\"Liechtenstein\">\\\n        <rank updated=\"yes\">2</rank>\\\n        <year>2008</year>\\\n        <gdppc>141100</gdppc>\\\n        <neighbor name=\"Austria\" direction=\"E\"/>\\\n        <neighbor name=\"Switzerland\" direction=\"W\"/>\\\n    </country>\\\n    <country name=\"Singapore\">\\\n        <rank updated=\"yes\">5</rank>\\\n        <year>2011</year>\\\n        <gdppc>59900</gdppc>\\\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\\\n    </country>\\\n    <country name=\"Panama\">\\\n        <rank updated=\"yes\">68</rank>\\\n        <year>2011</year>\\\n        <gdppc>13600</gdppc>\\\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\\\n        <neighbor name=\"Colombia\" direction=\"E\"/>\\\n    </country>\\\n</data>') == 3\n\n=====Test Case=====\nInput Format\n\nThe first line contains N, the number of test cases.\n\nThe next N lines each contain an XML document.\n\nOutput Format\n\nFor each test case, print the score of the given XML document.\n\nSample Test Case\n\nInput\n\n2\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">2</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n        <neighbor name=\"Switzerland\" direction=\"W\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">5</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\nOutput\n\n4\n7\n3\nExplanation\n\nThere are 3 attributes, and each attribute has a score of 1.\n\nThe order of the elements does not matter, so there is only one valid top-level element and all other elements have the same parent.\n\nThe order of the neighbors does not matter, so in the XML above the neighbor at country level (Austria/Switzerland) is the same as the neighbor at country level (Switzerland/Austria).\n\nThe order of the attributes does not matter, so in the XML above rank has the same score as rank.\n=====Sample Input 0=====\n1\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\n=====Sample Output 0=====\n1\n\n=====Sample Input 1=====\n1\n<stuff>\n    <users>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\n=====Sample Output 1=====\n9\n\n=====Sample Input 2=====\n1\n<stuff>\n    <data>\n        <country name=\"Liechtenstein\">\n            <rank updated=\"yes\">2</rank>\n            <year>2008</year>\n            <gdppc>141100</gdppc>\n            <neighbor name=\"Austria\" direction=\"E\"/>\n            <neighbor name=\"Switzerland\" direction=\"W\"/>\n        </country>\n        <country name=\"Singapore\">\n            <rank updated=\"yes\">5</rank>\n            <year>2011</year>\n            <gdppc>59900</gdppc>\n            <neighbor name=\"Malaysia\" direction=\"N\"/>\n        </country>\n        <country name=\"Panama\">\n            <rank updated=\"yes\">68</rank>\n            <year>2011</year>\n            <gdppc>13600</gdppc>\n            <neighbor name=\"Costa Rica\" direction=\"W\"/>\n            <neighbor name=\"Colombia\" direction=\"E\"/>\n        </country>\n    </data>\n</stuff>\n\n=====Sample Output 2=====\n3\n\n=====Sample Input 3=====\n3\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\n=====Sample Output 3=====\n9\n9\n9\n\n=====Challenge=====\nYou are given an XML document, and you have to print its score. The score is calculated by the sum of the score of each element. For any element, the score is equal to the number of attributes it has.\n\nNote that the elements do not need to have the same tag.\n\nYou may assume that the input follows the format outlined in the sample section.\n\nSample Input\n\n2\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\n<stuff>\n    <data>\n        <country name=\"Liechtenstein\">\n            <rank updated=\"yes\">2</rank>\n            <year>2008</year>\n            <gdppc>141100</gdppc>\n            <neighbor name=\"Austria\" direction=\"E\"/>\n            <neighbor name=\"Switzerland\" direction=\"W\"/>\n        </country>\n        <country name=\"Singapore\">\n            <rank updated=\"yes\">5</rank>\n            <year>2011</year>\n            <gdppc>59900</gdppc>\n            <neighbor name=\"Malaysia\" direction=\"N\"/>\n        </country>\n        <country name=\"Panama\">\n            <rank updated=\"yes\">68</rank>"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 5\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 10\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 8\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 10\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author>GeeksForGeeks</author>\n        <title>HTML5 Tag Attributes</title>\n        <link rel=\"alternate\" type=\"text/html\" href=\"http://en.wikipedia.org/wiki/HTML5\" />\n        <updated>2013-12-25T12:00:00</updated>\n        <published>2013-12-25T12:00:00</published>\n    </entry>\n    <entry>\n        <author>GeeksForGeeks</author>\n        <title>CSS3 module</title>\n        <link rel=\"alternate\" type=\"text/html\" href=\"http://en.wikipedia.org/wiki/CSS3\" />\n        <updated>2013-12-25T12:00:00</updated>\n        <published>2013-12-25T12:00:00</published>\n    </entry>\n</feed>\n''') == 10"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<doc>'+\\\n                '<item priority=\"high\">'+\\\n                '<sub>One</sub>'+\\\n                '</item>'+\\\n                '<item priority=\"low\">'+\\\n                '<sub>Two</sub>'+\\\n                '</item>'+\\\n                '</doc>') == 5\nassert solution('<doc>'+\\\n                '<item>'+\\\n                '<sub>One</sub>'+\\\n                '<sub>Two</sub>'+\\\n                '</item>'+\\\n                '</doc>') == 3\nassert solution('<doc>'+\\\n                '<item>'+\\\n                '<sub>One</sub>'+\\\n                '</item>'+\\\n                '</doc>') == 1\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<feed xml:lang=\\\"en\\\">\\n <title>HackerRank</title>\\n</feed>') == 5\nassert solution('<feed xml:lang=\\\"en\\\">\\n  <title>HackerRank</title>\\n</feed>') == 0\nassert solution('<feed xml:lang=\\\"en\\\"><title>HackerRank</title></feed>') == 1"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 6\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 0"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '5'\n=====\nIn python, a string can be split on a delimiter.\n\nExample:\n\n>>> a = \"this is a string\"\n>>> a = a.split(\" \") # a is converted to a list of strings. \n>>> print a\n['this', 'is', 'a','string']\nJoining a string is simple:\n\n>>> a = \"-\".join(a)\n>>> print a\nthis-is-a-string \nTask\nYou are given a string. Split the string on a \" \" (space) delimiter and join using a - hyphen.\n\nInput Format\nThe first line contains a string consisting of space separated words.\n\nOutput Format\nPrint the formatted string as explained above.\n\nSample Input\n\nthis is a string   \nSample Output\n\nthis-is-a-string\n\n=========\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 15\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == '5'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == '0'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == '6'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == '6'\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\") == '6'\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 30\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 70\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 70\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='easy'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 70\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == 45\nassert solution('1 1 1 1') == 0\n\"\"\"\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == 0.0\nassert solution('1 1 -1 1') == 90.0\nassert solution('1 -1 1 -1') == 180.0\nassert solution('-1 1 1 -1') == -90.0\nassert solution('1 -1 1 1') == -360.0\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '45.00'\nassert solution('1 1 1 1') == '0.00'\nassert solution('-1 -1 -1 -1') == '-90.00'\nassert solution('0 0 1 0') == '0.00'\nassert solution('1 1 1 1') == '360.00'"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == '180.00'\nassert solution('1 2 3 4') == '90.00'\nassert solution('1 4 5 10') == '45.00'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"45.0\"\nassert solution(\"100 200 300 400\") == \"180.0\"\nassert solution(\"0 0 0 0\") == \"0.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '60.00'\nassert solution('1 2 3 4') == '90.00'\nassert solution('1 2 -3 4') == '60.00'\nassert solution('-1 2 -3 4') == '60.00'\nassert solution('1 -1 1 1') == '60.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '45.00'\nassert solution('1 1 1 1') == '0.00'\nassert solution('-1 -4 3 -2') == '-45.00'\n\n=====Test Case Explanations=====\nInput contains two lines.\nFirst line contains the space separated floating numbers of the X, Y, Z coordinates of point A.\nSecond line contains the space separated floating numbers of the X, Y, Z coordinates of point B.\nOutput contains one line.\n\n======Sample Test Case 1======\nTest Case 1:\nInput:\n1 2 3 4\n1 1 1 1\n\nOutput:\n45.00\n\nExplanation:\nThe angle between the plane made by points A and B, B and C, C and D is 45.00.\n\n======Sample Test Case 2======\nTest Case 2:\nInput:\n-1 -4 3 -2\n-1 -4 3 -2\n\nOutput:\n-45.00\n\nExplanation:\nThe angle between the plane made by points A and B, B and C, C and D is -45.00.\n\"\"\"\n\nfrom math import *\n\na, b, c, d = map(float, input().split())\nab = a - b\nbc = c - b\ncd = d - b\n\ndot_product = (ab[0]*bc[0] + ab[1]*bc[1] + ab[2]*bc[2])\ncross_product = (ab[0]*bc[1]*cd[2] - ab[0]*bc[2]*cd[1] - ab[1]*bc[0]*cd[2] + ab[1]*bc[2]*cd[0] + ab[2]*bc[0]*cd[1] - ab[2]*bc[1]*cd[0])"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == '90.0'\nassert solution('2 2 4 4') == '75.0'\n=======\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '60.0'\nassert solution('1 2 3 4') == '180.0'\nassert solution('1 1 1 3') == '60.0'\nassert solution('1 1 1 1') == '0.0'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5 2 6') == '60.00'\nassert solution('1 4 5 6') == '60.00'\nassert solution('2 5 6 3') == '60.00'\nassert solution('0 5 5 6') == '60.00'\nassert solution('5 6 5 6') == '60.00'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"four five six\") == 8\nassert solution(\"Hello\") == 2\nassert solution(\"aeiou\") == 0\nassert solution(\"why\") == 1\n\nprint(\"Success\")\n\n=====OUTPUT=====\nSuccess\n\n>>>>>>> d80c0cfd6fe5f3e9da56b34085e38df0f8eceb8d\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nhello\\nbee') == 2"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"one two\") == 2\nassert solution(\"one two three\") == 3\nassert solution(\"two two\") == 3\nassert solution(\"three three three\") == 6\nassert solution(\"four four four four\") == 12\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"funny lol\") == \"1\"\nassert solution(\"hello world\") == \"0\"\nassert solution(\"one two\") == \"2\"\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\nhello\\nbee\\n') == 6\nassert solution('2\\nhihi\\nhihi') == 0\nassert solution('2\\nbee\\ncodewars\\n') == 1\n\n=====Test Case=====\nSample Input 0\n3\nhacker book\n\nSample Output 0\n2\n\nExplanation 0\nThe list of words is hacker, book.\nThe first word is hacker so the score is 2.\nThe second word is book so the score is 2.\nThe third word is codewars so the score is 1.\nThe overall score is 2 + 2 + 1 = 5.\nSample Input 1\n2\n\nSample Output 1\n0\n\nExplanation 1\nThe list of words is hacker, codewars.\nThe first word is hacker so the score is 2.\nThe second word is codewars so the score is 1.\nThe overall score is 2 + 1 = 3.\n'''\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a aa a a a a a a\n=======\nSample Input 0\n\n5\nhappy\nnew\nyear\nbeach\n9\nSample Output 0\n\n4\n\n=======\nIncorrect Solution - Notice output format"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\nfly\npony\nton\n''') == 6\nassert solution('''4\ntuna\ncat\nton\n''') == 6\nassert solution('''4\ngreen\ncat\nza\n''') == 0\nassert solution('''5\ngreen\ntuna\nza\ntang\n''') == 5\nassert solution('''7\ncat\ngreen\nza\ntang\n''') == 5\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('qeueeu') == 3\nassert solution('qeueeua') == 2\nassert solution('qwueeua') == 1\nassert solution('qeueeuw') == 0\nassert solution('qeueeuwx') == 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 abc ijk') == 2\nassert solution('2 abc aa ijk') == 1\nassert solution('2 abc aa ijk a') == 1\nassert solution('2 abc aa ijk b') == 0\nassert solution('2 abc aa ijk c') == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aretheyhere\") == 2\nassert solution(\"hello\") == 1\nassert solution(\"bee\") == 0\nassert solution(\"yummy\") == 5\n'''\n\nn = int(input())\nwords = input().split()\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('III') == True\nassert solution('IX') == True\nassert solution('LVIII') == True\nassert solution('MCMXCIV') == True\nassert solution('DLII') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('X') == True\nassert solution('XX') == False\nassert solution('C') == True\nassert solution('CC') == False\nassert solution('IV') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('X') == True\nassert solution('XX') == True\nassert solution('XXX') == True\nassert solution('CDXXI') == True\nassert solution('CDXXXII') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('X') == True\nassert solution('XX') == False\nassert solution('CDXXIV') == True\nassert solution('MMMCMXCIX') == True\nassert solution('DCL') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('XXI') == True, 'XXI is not a valid Roman numeral'\nassert solution('MMXXI') == True, 'MMXXI is not a valid Roman numeral'\nassert solution('I') == True, 'I is not a valid Roman numeral'\nassert solution('IIII') == False, 'IIII is not a valid Roman numeral'\nassert solution('XXXX') == False, 'XXXX is not a valid Roman numeral'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"X\") == False, \"Oops!  Your solution did not work with 'X'\"\nassert solution(\"XX\") == False, \"Oops!  Your solution did not work with 'XX'\"\nassert solution(\"IX\") == True, \"Oops!  Your solution did not work with 'IX'\"\nassert solution(\"IV\") == True, \"Oops!  Your solution did not work with 'IV'\"\nassert solution(\"XL\") == True, \"Oops!  Your solution did not work with 'XL'\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXC\") == True\nassert solution(\"XLIX\") == True\nassert solution(\"XIV\") == False\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('I') == True\nassert solution('V') == True\nassert solution('X') == True\nassert solution('L') == True\nassert solution('C') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXXI\") == False\nassert solution(\"CDXX\") == False\nassert solution(\"XC\") == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"X\") == True\nassert solution(\"XX\") == False\nassert solution(\"CDXLIII\") == True\nassert solution(\"MMMCMXCIX\") == True\nassert solution(\"I\") == True\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('91283472391') == '9128437239'\nassert solution('91283472391\\n9128437239') == '9128437239\\n9128437239'\nassert solution('9128437239\\n91283472391') == '9128437239\\n9128437239'"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 0 781 454 728\") == \"\"\"+9771546854728\n9771546854728\n+9771546854728\n\"\"\"\n=====Test Case=====\nTest Case 0\nInput:\n9\n9771546854728\n9 0 781 454 728\n9 0 781 554 728\n9 0 781 444 728\n9 0 781 547 728\n9 0 781 534 728\n9 0 781 537 728\n9 0 781 538 728\n9 0 781 333 528\n9 0 781 548 728\n9 0 781 535 728\n9 0 781 456 728\n9 0 781 528 728\n9 0 781 791 528\n9 0 781 721 528\n9 0 781 671 528\n9 0 781 781 528\n9 0 781 844 528\n9 0 781 854 528\n9 0 781 731 528\n9 0 781 647 528\n9 0 781 694 528\n9 0 781 673 528\n9 0 781 924 528\n9 0 781 946 528\n9 0 781 987 528\n9 0 781 954 528\n9 0 781 938 528\n9 0 781 986 528\n9 0 781 948 528\n9 0 781 984 528\n9 0 781 979 528\n9 0 781 953 528\n9 0 781 915 528\n9 0 781 977 528\n9 0 781 947 528\n9 0 781 997 528\n9 0 781 956 528\n9 0 781 923 528\n9 0 781 965 528\n9 0 781 991 528\n9 0 781 991 528\n9 0 781 972 528\n9 0 781 976 528\n9 0 781 995 528\n9 0 781 975 528\n9 0 781 966 528\n9 0 781 987 528\n9 0 781 991 528\n9 0 781 993 528\n9 0 781 997 528\n9 0 781 991 528\n9 0 781 985 528\n9 0 781 982 528\n9 0 781 988 528\n9 0 781 981 528\n9 0 781 979 528\n9 0 781 981 528\n9 0 781 985 528\n9 0 781 984 528\n9 0 781 985 528\n9 0 781 987 528\n9 0 781 986 528\n9 0 781 976 528\n9 0 781 974 528\n9 0 781 963 528\n9 0 781 971 528\n9 0 781 955 528\n9 0 781 987 528\n9 0 781 961 528\n9 0 781 964 528\n9 0 781 991 528\n9 0 781 961 528\n9 0 781 988 528\n9 0 781 988 528\n9 0 781 968 528\n9 0 781 991 528\n9 0 781 976 528\n9 0 781 967 528\n9 0 781 949 528\n9 0 781 939 528\n9 0 781 993 528\n9 0 781 984 528\n9 0 781 969 528\n9 0 781 996 528\n9 0 781 987 528\n9 0 781 967 528\n9 0 781 994 528\n9 0 781 975 528\n9 0 781 976 528\n9 0 781 944 528\n9 0 781 985 528\n9 0 781 993 528\n9 0 781 964 528\n9 0 781 993 528\n9 0 781 993 528\n9 0 781 974 528\n9 0 781 971 528\n9 0 781 973 528\n9 0 781 966 528\n9 0 781 945 528\n9 0 781 955 528\n9 0 781 966 528\n9 0 781 984 528\n9 0 781 986 528\n9 0 781 975 528\n9 0 781 957 528\n9 0 781 948 528\n9 0 781 935 528\n9 0 781 979 528\n9 0 781 979 528\n9 0 781 957 528\n9 0 781 987 528\n9 0 781 979 528\n9 0 781 976 528\n9 0 781 971 528\n9 0 781 994 528\n9 0 781 949 528\n9 0 781 981 528\n9 0 781 992 528\n9 0 781 959 528\n9 0 781 965 528\n9 0 781 969 528\n9 0 781 952 528\n9 0 781 967 528\n9 0 781 993 528\n9 0 781 946 528\n9 0 781 991 528\n9 0 781 987 528\n9 0 781 986 528\n9 0 781 952 528\n9 0 781 988 528\n9 0 781 984 528\n9 0 781 989 528\n9 0 781 988 528\n9 0 781 987 528\n9 0 781 946 528\n9 0 781 991 528\n9 0 781 972 528\n9 0 781 990 528\n9 0 781 977 528\n9 0 781 952 528\n9 0 781 987 528\n9 0 781 991 528\n9 0 781 957 528\n9 0 781 939 528\n9 0 781 952 528\n9 0 781 969 528\n9 0 781 962 528\n9 0 781 939 528\n9 0 781 970 528\n9 0 781 996 528\n9 0 781 957 528\n9 0 781 952 528\n9 0 781 984 528\n9 0 781 998 528\n9 0 781 997 528\n9 0 781 995 528\n9 0 781 972 528\n9 0 781 965 528\n9 0 781 985 528\n9 0 781 969 528\n9 0 781 966 528\n9 0 781 988 528\n9 0 781 984 528\n9 0 781 989 528\n9 0 781 967 528\n9 0 781 976 528\n9 0 781 965 528\n9 0 781 972 528\n9 0 781 972 528\n9 0 781 961 528\n9 0 781 974 528\n9 0 781 958 528\n9 0 781 965 528\n9 0 781 961 528\n9 0 781 986 528\n9 0 781 948 528\n9 0 781 962 528\n9 0 781 985 528\n9 0 781 979 528\n9 0 781 988 528\n9 0 781 976 528\n9 0 781 972 528\n9 0 781 961 528\n9 0 781 970 528\n9 0 781 967 528\n9 0 781 972 528\n9 0 781 988 528\n9 0 781 985 528\n9 0 781 971 528\n9 0 781 985 528\n9 0 781 965 528\n9 0 781 974 528\n9 0 781 972 528\n9 0 781 975 528\n9 0 781 974 528\n9 0 781 961 528\n9 0 781 987 528\n9 0 781 961 528\n9 0 781 964 528\n9 0 781 967 528\n9 0 781 957"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('927366783') == '+91 763 678 383'\nassert solution('955481897') == '+91 955 548 189 7'\nassert solution('845012345') == '+91 845 0 123 45'\n\n\"\"\"\n\n\nimport re\nimport os\nimport sys\nimport itertools\nimport collections\nimport functools"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+91 77877 1234\\n91 77877 1234\\n0 77877 1234\\n91 77877 1234\\n+91 77877 1234') == '+91 77877 1234\\n91 77877 1234\\n0 77877 1234\\n'\n\n=============================\n\n\n\n\n\n\n\nWrite a program to print Fibonacci series upto n terms\n\nnterms = int(input(\"How many terms? \"))\nn1, n2 = 0, 1\ncount = 0"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('07895462130') == '+91 78954 62130'\nassert solution('919875641230') == '+91 9198 751 1230'\nassert solution('9393973941230') == '+91 939 3 9739 1230'\nassert solution('9393973941230') == '+91 939 3 9739 1230'\nassert solution('0') == '+91 0'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''9\n        1\n        9\n        9\n        9\n        9\n        9\n        9\n        9\n        9''') == '''+91 1\n        +91 9\n        +91 9\n        +91 9\n        +91 9\n        +91 9\n        +91 9\n        +91 9\n        +91 9'''\nprint(solution('''9\n        1\n        9\n        9\n        9\n        9\n        9\n        9\n        9\n        9'''))"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 8 5 4 7 3 6 2 1') == \"\"\"+91 749872364\n+91 749872365\n+91 749872366\n+91 749872367\n+91 749872368\n+91 749872369\n+91 749872370\n+91 749872371\n+91 749872372\n+91 749872373\n+91 749872374\n+91 749872375\n+91 749872376\n+91 749872377\n+91 749872378\n+91 749872379\n+91 749872380\n+91 749872381\n+91 749872382\n+91 749872383\n+91 749872384\n+91 749872385\n+91 749872386\n+91 749872387\n+91 749872388\n+91 749872389\n+91 749872390\"\"\"\nprint(solution('9 8 5 4 7 3 6 2 1'))"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('91') == '91'\nassert solution('9141516415') == '91 4152 16415'\nassert solution('9198756412154635284') == '9198 7564 1215 4635 2842'\n\n=====Test Time Limit=====\n1\n2\n2\n2\n2\n\n=====Test Memory Limit=====\n256\n1024\n1024\n1024\n1024\n\n=====Test Cases Passed=====\n1\n1\n2\n2\n2\n2\n\n=====Test Cases Failed=====\n0\n1\n2\n0\n0\n1\n\n=====Test Cases Tried=====\n1\n2\n2\n2\n2\n2\n\n=====Test Cases Passed=====\n1\n1\n2\n2\n2\n2\n\n=========================\n\nclass Solution:\n    def __init__(self, mobile_numbers):\n        self.mobile_numbers = mobile_numbers\n        self.sorted_list = sorted(self.mobile_numbers)\n\n    def solution(self):\n        for i in self.sorted_list:\n            if i[0] == \"0\" or i[0] == \"1\" or i[0] == \"6\":\n                if len(i) == 10:\n                    print(\"+91 \" + i[0:5] + \" \" + i[5:])\n                elif len(i) == 12:\n                    print(\"+91 \" + i[0:3] + \" \" + i[3:7] + \" \" + i[7:])\n            elif i[0] == \"8\" or i[0] == \"9\":\n                if len(i) == 10:\n                    print(\"+91 \" + i[:3] + \" \" + i[3:])\n                elif len(i) == 12:\n                    print(\"+91 \" + i[:4] + \" \" + i[4:])\n            else:\n                if len(i) == 10:\n                    print(\"+91 \" + i[0:3] + \" \" + i[3:])\n                elif len(i) == 12:\n                    print(\"+91 \" + i[0:4] + \" \" + i[4:])\n        return self.mobile_numbers"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+91801234567\") == \"\"\"+91 801234567\"\"\"\nassert solution(\"9012345678\") == \"\"\"+91 9012345678\"\"\"\nassert solution(\"9123456780\") == \"\"\"+91 9123456780\"\"\"\nassert solution(\"923456780\") == \"\"\"+91 923456780\"\"\"\nassert solution(\"92345678\") == \"\"\"+91 92345678\"\"\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('+91 99999 999999') == '+91 99999 999999'\nassert solution('9198756741') == '+91 9198756741'\nassert solution('91 99999 999999') == '+91 99999 999999'\nassert solution('9198756741') == '+91 9198756741'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(dict_student) == \"50.00\"\n\n----\n\nWrite a function to delete a key:value pair from a dictionary\n=====Problem Statement=====\nWrite a function to delete a key:value pair from a dictionary\n\n=====Example=====\nInput: Dictionary = {'a':2, 'b':4, 'c':6}, key = 'b'\nOutput: {'a':2, 'c':6}\n\n=====Input Format=====\nThe first line contains the integer n, the number of key:value pairs in dictionary.\nThe next n lines contains key and value separated by a space.\nThe last line contains key to delete.\n\n=====Constraints=====\n2\u2264n\u2264100\n\n=====Output Format=====\nPrint the dictionary after deleting the particular key:value pair."
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarsh\n27 19\\nAnurag 26 23\\nHarsh\n25 20\\nAnurag ') == '26.50'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10', '1 2 3 4 5 6 7 8 9 10') == '8.00'\nassert solution('2', '1 2 3') == '2.00'\n\n=====Test Case=====\nSample input:\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nSample output:\n56.00\n\n=====Solution=====\n'''\n\nn = int(input())\nmarks = [input().split(' ') for i in range(n)]\nquery_name = input()\n\nsum = 0\nfor i in range(n):\n    if marks[i][0] == query_name:\n        for j in range(1, 4):\n            sum += float(marks[i][j])\n        print(round(sum/3, 2))\n        break\n    else:\n        continue\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26\\nHarsh 25\\nAnurag\") == '26.50'\n=========================================\n\n\nWrite a function func_name(a, b, c) that takes three numbers and prints the sum of squares of the first two numbers.\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n2 3 4\\n3 3 3\\nquery_name\") == '2.00'\nassert solution(\"2\\n10 20 30\\n20 30 40\\nquery_name\") == '20.00'\n\n=====Test Case=====\nTest.assert_equals(solution(\"3\\n1 2 3\\n2 3 4\\n3 3 3\\nquery_name\"), \"2.00\")\nTest.assert_equals(solution(\"2\\n10 20 30\\n20 30 40\\nquery_name\"), \"20.00\")\nTest.assert_equals(solution(\"4\\n1 2 3 4\\n2 3 4 5\\n3 3 3 6\\n4 3 3 3\\nquery_name\"), \"3.00\")\n'''\n\nfrom collections import OrderedDict\n\nn = int(input())\nd = OrderedDict()\nfor i in range(n):\n    student_name, *marks = input().split()\n    marks = list(map(float, marks))\n    d[student_name] = marks\nquery_name = input()\nprint('%.2f' %(sum(d[query_name])/3))\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshal 26 26.5 28\\nAnurag 26 28 30\\nHarsh 25 26.5 28\\n') == '26.50'\n\"\"\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"Mike\", \"John\", \"Peter\", \"Peter\"]) == \"50\"\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('alpha bravo charlie delta') == 2.67\nassert solution('alpha bravo charlie delta alpha bravo charlie delta') == 2.67\nassert solution('alpha bravo charlie delta alpha bravo charlie charlie delta') == 3.0\nassert solution('alpha bravo charlie delta alpha bravo charlie charlie delta alpha') == 2.67\nassert solution('alpha bravo charlie charlie delta alpha bravo charlie charlie delta alpha') == 2.5\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n0') == \"0.00\"\nassert solution('1\\n1\\n1\\n0\\n1') == \"0.67\"\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('alpha mark: 20, 30, 40') == 'The average of the marks obtained by the particular student is: 40.00'\nassert solution('alpha mark: 20, 30, 40 beta mark: 30, 50, 70') == 'The average of the marks obtained by the particular student is: 50.00'\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('George Michael 119 M\\nPrayer in C Major 123 F\\nSleep  120 M\\nDancing Queen 158 F\\nBirds Of Prey 141 M\\nFor Whom The Bell Tolls 159 M\\nConcerto For 1 Violin And 1 Viola 159 M\\nConcerto For 1 Violin And 1 Viola 159 M\\nConcerto For 1 Violin And 1 Viola 159 M') == 'Mr. George Michael\\nMr. Bill Berry\\nMs. Mary George\\nMr. John Coltrane\\nMr. John Coltrane\\nMs. Olivia Newton-John\\nFor Whom The Bell Tolls\\nConcerto For 1 Violin And 1 Viola\\nConcerto For 1 Violin And 1 Viola\\nConcerto For 1 Violin And 1 Viola'\n=====\n>>>>>>> 67e70cb69e7c0a922c7b94444ccc38f602897f74\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MARY\\tPATRICIA\\t47\\tF\\na\\tLINDA\\t29\\tF\\no\\tROSE\\t44\\tM\") == \"Mr. Patricia\\nMs. Linda\\nMr. Rose\\nMs. Rose\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"M 10 F 3\") == \"Ms. Mary George\\nMr. John Snow\\nMs. Philippa Cotterell\"\n\nassert solution(\"M 9 F 2\") == \"Ms. Mary George\\nMr. John Snow\\nMs. Philippa Cotterell\\nMr. Aiden Bannister\"\n\nassert solution(\"M 3 F 2\") == \"Ms. Mary George\\nMr. Aiden Bannister\\nMs. Philippa Cotterell\"\n\nassert solution(\"M 2 F 3\") == \"Ms. Mary George\\nMr. Aiden Bannister\\nMs. Philippa Cotterell\\nMr. John Snow\"\n\nassert solution(\"M 2 M 2\") == \"Ms. Mary George\\nMr. Philippa Cotterell\\nMs. Mary George\\nMr. Aiden Bannister\"\n=====\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"Davy   Davies    22    M\"\n\"Davina  Davies    24    F\"\n\"Davinc  Davies    21    M\"\n) == \"\"\"Mr. Davinc Davies\nMs. Davina Davies\nMr. Davy Davies\nMs. Davina Davies\n\"\"\"\n\nprint(\"Successfully passed all test cases!\")"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Rajesh sravya sravya\nrahul rajesh rahul\n7\nRahul sravya rajesh sravya \nRahul sravya rahul\nRajesh sravya rajesh sravya\nRajesh sravya rahul\nRahul rajesh sravya sravya\nRahul rajesh rahul\") == 'Mr. Rahul\\nMs. Rahul\\nMr. Rajesh\\nMs. Rajesh\\nMr. Sravya\\nMs. Sravya\\nMr. Rahul\\nMr. Rajesh\\nMs. Rahul\\nMr. Sravya\\nMr. Sravya\\nMs. Rajesh\\nMs. Rahul'\nprint('Test pass.')\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''George\nGeorge\n26\nM\nDavids\nDavids\n21\nM\nTiffany\nTiffany\n26\nF\nKris\nKris\n19\nM\nAnthony\nAnthony\n20\nM''') == '''George\nGeorge\nAnthony\nDavids\nDavids\nKris\nKris'''\nprint('OK!')"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Mike Thomson 20 M') == 'Mr. Mike Thomson'\nassert solution('Robert Bustle 32 M') == 'Mr. Robert Bustle'\nassert solution('Andria Bustle 30 F') == 'Ms. Andria Bustle'\nassert solution('John Smith 60 M') == 'Mr. John Smith'\nassert solution('Maria Ionescu 35 F') == 'Ms. Maria Ionescu'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''George Martin\n19\nWillie Wonka\n83\nDonatello\n200\nMichael Bay\n''') == '''Mr. George Martin\nMs. Willie Wonka\nMr. Michael Bay\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"Mary\") == \"Ms. Mary\"\nassert solution(\"John Doe\") == \"Mr. John Doe\"\nassert solution(\"John Doe 25 M\") == \"Mr. John Doe\"\nassert solution(\"John Doe 25 M Mary\") == \"Mr. John Doe Ms. Mary\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\") == \"Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Robert Bustle\"\n\nprint(solution(\"1\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\"))\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n2\\n3\\n\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\"\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]', 'First'\nassert solution('1 1 1 1') == '[[0, 0, 0]]', 'Second'\nassert solution('2 2 2 2') == '[[0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [2, 2, 0], [2, 2, 1], [2, 2, 2]]', 'Third'\nassert solution('3 5 4 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]', 'Fourth'\nassert solution('2 2 2 5') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]', 'Fifth'\n\n=====Output=====\nPrint the list in lexicographical order\nFirst\nSecond\nThird\nFourth\nFifth\nExplanation\nThe code below prints the list [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n=============OR======================="
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 2, 0], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]'\nprint(solution('1 2 3 4'))\nprint(solution('1 2 3 4'))\n\n>>>>>>> bb4dee632f7ba40081fd47f4c1f72734e7f488b4\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(x=1,y=1,z=2,n=3) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order.\n\n=====Sample Test Case=====\nInput\n1\n1\n2\n3\n\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n\n=====Sample Test Case=====\nInput\n1\n1\n2\n3\n\nOutput\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n\nSample Input 0\n\n1\n1\n2\n2\n\nSample Output 0\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\nSample Input 1\n\n2\n2\n2\n2\n\nSample Output 1\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1, 1, 1) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n>>>>>>> bb4dee632f6f50aba193b998c85ffa47e6d368f4\nprint(solution(1, 1, 1, 1))"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\nassert solution(\"1 2 3 5\") == \"\"\"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3]]\nassert solution(\"1 1 1 1\") == \"\"\"[[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 1]]\"\"\"\n\"\"\"\n\n=====Test Case 1=====\nInput:\n1\n2\n3\n4\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n=====Test Case 2=====\nInput:\n1\n2\n3\n5\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3]]\n\n=====Test Case 3=====\nInput:\n2\n2\n3\n6\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n\n=====Test Case 4=====\nInput:\n2\n1\n2\n4\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n=====Test Case 5=====\nInput:\n2\n1\n1\n3\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n=====Test Case 6=====\nInput:\n2\n1\n2\n3\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]\n\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\nassert solution('1 1 1 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n=====Output Format=====\nPrint the list in lexicographical order\nexample:\nx = 1\ny = 1\nz = 2\nn = 3\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\nPrint an array of the elements that do not sum to n = 3\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n\n\"\"\"\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\nprint([[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if ((i + j + k)!= n)])\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order.\n\nInput Format\n\nFour integers x, y, z and n, each on a separate line.\n\nSample Input\n\n1\n1\n1\n2\n\nSample Output\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nExplanation\n\nEach variable x, y, and z will have values of 0 or 1. All permutations of lists that do not sum to n = 2 are:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nSolution:"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3,2,1,5) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\nassert solution(2,2,2,1) == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\n\"\"\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1\") == \"0 0 0\"\nassert solution(\"1 1 1 2\") == \"0 0 0\"\nassert solution(\"1 1 2 1\") == \"0 0 0\"\nassert solution(\"1 2 1 1\") == \"0 0 1\"\nassert solution(\"2 1 1 1\") == \"0 1 0 0\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3.00+5.00i'\nassert solution('1+2i') == '3.00+5.00i'\nassert solution('-1 2') == '-3.00+5.00i'\nassert solution('-1+2i') == '-3.00+5.00i'\nassert solution('1 0') == '1.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"3.00+4.00i\"\nassert solution(\"0 2\") == \"2.00+0.00i\"\nassert solution(\"1 0\") == \"1.00+0.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\"\nassert solution(\"1 0 1\") == \"1.00+0.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1+1i'\nassert solution('0 5') == '5+0i'\nassert solution('4 2') == '4+2i'\nassert solution('4 2') == '4-2i'\nassert solution('4 2') == '4*2i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 -5') == '3 +5i'\nassert solution('0.5 + 0.866i') == '0.5 + 0.866i'\nassert solution('0.5 0.866i') == '0.5 -0.866i'\nassert solution('3 0') == '3 +0i'\nassert solution('0 0.8660254037844386 i') == '0.8660254037844386 -0.8660254037844386 i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1 -1'\nassert solution('0 1') == '0 -1'\nassert solution('1 0') == '1 0.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('0 0.00+0.00i') == '0.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 2.0\") == \"3.0 4.0\"\nassert solution(\"5.0 -2.0\") == \"3.0 -2.0\"\nassert solution(\"0.5 -0.5i\") == \"0.00+-0.00i\"\nassert solution(\"1 + 2i\") == \"3.00+2.00i\"\nassert solution(\"0 + 1i\") == \"0.00+1.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0.00+1.00i\"\nassert solution(\"1 -1\") == \"-1.00-1.00i\"\nassert solution(\"3 4\") == \"2.00+0.00i\"\nassert solution(\"0 5\") == \"0.00+5.00i\"\nassert solution(\"1 1\") == \"0.00+1.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3.00+4.00i'\nassert solution('0 5') == '5.00+0.00i'\nassert solution('1 0') == '1.00+0.00i'\nassert solution('0 1') == '0.00+1.00i'\nassert solution('0 0') == '0.00+0.00i'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1 -2') == '-1 -4'\nassert solution('4 6') == '8 10'\nassert solution('0 5') == '5.00+5.00i'\nassert solution('-1 -1') == '-2.00-2.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 1i\") == \"1 + 1i\\n1 - 1i\\n1 + 1i\\n1 - 1i\\n1.00\\n0.00\\n1.00\\n0.00\\n1.00\\n0.00\"\nassert solution(\"1 + 1i + 2 + 2i\") == \"3 + 5i\\n3 - 5i\\n6 + 8i\\n6 - 8i\\n6.00\\n0.00\\n12.00\\n0.00\\n18.00\\n0.00\"\nassert solution(\"2 + 2i\") == \"2 + 2i\\n0 - 4i\\n2 + 2i\\n0 - 4i\\n2.00\\n0.00\\n4.00\\n0.00\\n4.00\\n0.00\"\nassert solution(\"3 + 3i\") == \"3 + 3i\\n0 - 6i\\n3 + 3i\\n0 - 6i\\n3.00\\n0.00\\n9.00\\n0.00\\n9.00\\n0.00\"\nassert solution(\"3 + 3i + 4 + 4i\") == \"7 + 10i\\n7 - 10i\\n11 + 14i\\n11 - 14i\\n7.00\\n0.00\\n20.00\\n0.00\\n22.00\\n0.00\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abcd') == 'abcd'\nassert solution('abcde') == 'abcdec'\nassert solution('abcdef') == 'abcdeabcdec'\n\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcdefg') == 'abcdefg'\nassert solution('abcd') == 'abcd'\nassert solution('abcde') == 'abcde'\nassert solution('abcdef') == 'abcde'\n\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\nassert solution(\"abc\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''xyz\nabc''') == 'xaybzc'\nassert solution('''qwerty\nabc''') == 'qwertabc'\nassert solution('''qwerty\nqwerty''') == 'qwertyqwerty'\nassert solution('''qwerty\nqwerty''') == 'qwertyqwerty'\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01B0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01B0') == '00'\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"0\"\nassert solution(\"101\") == \"1\"\nassert solution(\"00B0\") == \"0\"\nassert solution(\"1B1B1B0\") == \"00\"\nassert solution(\"1B010B010\") == \"010\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"01B0\"\n) == \"00\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('01B0') == '00'"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01B0') == '00'\nassert solution('11B1') == '01'\nassert solution('11B2') == '11'\nassert solution('11B3') == '11'\nassert solution('11B4') == '11'\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"0\") == \"\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('1 2') == '2'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\n\narr = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\nassert solution(\"6\\n1 2 3 4 5 6\") == '6'\nassert solution(\"6\\n2 1 5 4 3 6\") == '5'\nassert solution(\"5\\n2 1 5 4 3\") == '4'\nassert solution(\"5\\n1 2 3 4 5\") == '0'\n\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\n\n---\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\n\nmax_height = [0]*(N+1)\nfor i in range(N):\n    if i == 0:\n        max_height[i] = A[i]\n    else:\n        max_height[i] = max(A[i], max_height[i-1])\n\nheights = []\nfor i in range(N):\n    heights.append(max_height[i] + i)\n\nprint(max(heights))\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 1 5 4 3') == '4'\nassert solution('5\\n2 1 5 4 3') == '4'\nassert solution('7\\n2 1 5 4 3 6 2') == '7'\nassert solution('10\\n2 1 5 4 3 6 2 9 7 8 10') == '12'\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\nfrom math import inf\n\nfrom collections import deque\nfrom typing import Deque\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"2 5 4 3\") == \"1\"\nassert solution(\"2 5 6 4 3\") == \"1\"\nassert solution(\"2 5 6 6 4 3\") == \"3\"\nassert solution
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nN = int(stdin.readline())\n\na = [int(i) for i in stdin.readline().split()]\na.reverse()\nans = [0]\nans[0] = a[0]\nfor i in range(1, len(a)):\n    if a[i] >= ans[-1]:\n        ans.append(a[i])\n    else:\n        p = len(ans) - 1\n        while ans[p] <= a[i] and p >= 0:\n            p -= 1\n        ans[p] = a[i]\nans.reverse()\nprint(len(ans) - 1)\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\\ncacc\") == \"A\"\nassert solution(\"ca\\ncaa\") == \"C\"\nassert solution(\"a\\na\") == \"A\"\n\n\"\"\"\n\nimport unittest\nfrom collections import deque\n\nfrom typing import List, Dict\n\nfrom pydantic import BaseModel\n\nfrom super_algos.classic.card_game.solution import Solution\n\n\nclass Player(BaseModel):\n    name: str\n    deck: List[str]\n\n\nclass Game:\n    def __init__(self, players: List[Player]):\n        self.players = deque(players)\n        self.history: Dict[str, str] = {}\n\n    def __str__(self) -> str:\n        return f\"{self.players[0]} => {self.players[1]}\"\n\n    def __repr__(self) -> str:\n        return f\"{self.players[0]} => {self.players[1]}\"\n\n    def play_round(self) -> str:\n        player = self.players[0]\n        if len(player.deck) > 0:\n            discard = player.deck.popleft()\n            self.history[player.name] = discard\n        else:\n            self.players.rotate()\n            self.history[player.name] = \"None\"\n        return self.__str__()\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'B'\n\nprint('Success')\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom io import BytesIO\nimport unittest\nfrom unittest.mock import patch\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aca\\ncacc\") == \"A\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"aca\\naccc\\nca\"\n) == \"A\"\n\nassert solution(\n\"abc\\nacb\\nbac\\n\"\n) == \"B\"\n\nassert solution(\n\"abc\\nabd\\naba\\n\"\n) == \"C\"\n\nprint('Success')"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\nassert solution(\"aca\\naccc\\naccc\\nca\") == \"B\"\nassert solution(\"aca\\naccc\\naccc\\nca\") == \"C\"\n\"\"\"\n\nimport ast\nimport collections\nimport sys\n\n\"\"\"\n    Use a queue to store the cards in the player's deck.\n    If the player's deck has no cards, then the player wins.\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\ncacc\\ncca\") == \"A\"\n\"\"\"\n\nimport collections\n\ndeck_a = collections.deque(input())\ndeck_b = collections.deque(input())\ndeck_c = collections.deque(input())\n\nwhile len(deck_a) > 0 and len(deck_b) > 0 and len(deck_c) > 0:\n    if deck_a[0] > deck_b[0] and deck_a[0] > deck_c[0]:\n        if deck_b[0] > deck_c[0]:\n            deck_b.appendleft(deck_b.popleft())\n        else:\n            deck_c.appendleft(deck_c.popleft())\n    elif deck_b[0] > deck_c[0]:\n        if deck_a[0] > deck_c[0]:\n            deck_a.appendleft(deck_a.popleft())\n        else:\n            deck_c.appendleft(deck_c.popleft())\n    else:\n        if deck_a[0] > deck_b[0]:\n            deck_a.appendleft(deck_a.popleft())\n        else:\n            deck_b.appendleft(deck_b.popleft())"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aca\\naccc\\nca') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"aca\\n\"\n    \"accc\\n\"\n    \"ca\"\n) == \"A\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\nfrom collections import Counter\n\nfor _ in range(3):\n    _, _, _ = input().split()\n    _, _, _ = input().split()\n    _, _, _ = input().split()\n    if len(set(Counter(_.split(' ')).values())) == 1:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('5 5 7') == 'YES'\n\"\"\"\n\nA = int(input())\nB = int(input())\nC = int(input())"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 6 7\") == \"NO\"\nassert solution(\"7 6 5\") == \"YES\"\nassert solution(\"4 3 2\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"7 5 5\") == \"NO\"\nassert solution(\"5 7 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"YES\"\nassert solution(\"7 5 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('5 7 5') == 'YES'\nassert solution('7 5 5') == 'NO'\nassert solution('5 7 4') == 'NO'\nassert solution('5 6 7') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"7 5 5\") == \"NO\"\nassert solution(\"5 7 5\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5 7\n''') == 'YES'\nassert solution('''1 2 3\n''') == 'NO'\nassert solution('''1 2 7\n''') == 'YES'\nassert solution('''5 7 1\n''') == 'NO'\nassert solution('''1 2 5\n''') == 'YES'\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"3\\n\"\nassert solution(\"5\\n\") == \"11\\n\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport os"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"7\"\n\nassert solution(\"3\") == \"4\"\n\nassert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"11\"\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\"\"\"\nL_0=2\nL_1=1\nL_2=L_0+L_1=3\nL_3=L_1+L_2=4\nL_4=L_2+L_3=7\nL_5=L_3+L_4=11\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '11'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nlucas = [2, 1]\nfor i in range(n - 2):\n    lucas.append(lucas[-1] + lucas[-2])\nprint(lucas[-1])\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n2\") == \"7\"\nassert solution(\"5\\n3\\n2\") == \"11\"\n\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4\\n2\\n') == '7'\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 1 3\") == \"4\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"3 5 2\") == \"10\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nThe area of a trapezoid is\n    1/2 (a + b) h\n    \nIf h is even, then\n    a + b = 2(a + b) / 2\nSo the area is\n    1/2 (a + b) h\n\nIf h is even, then\n    a + b = 2(a + b) / 2\nso\n    a = 2(a + b) / 2\n    b = 2(a + b) / 2\n\nWrite a program to test the above equation.\n\n-----Constraints-----\n - 1\u2266a\u2266100\n - 1\u2266b\u2266100\n - 1\u2266h\u2266100\n - All input values are integers.\n - h is even.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\na\nb\nh\n\n-----Output-----\nPrint the area of the given trapezoid. It is guaranteed that the area is an integer.\n\n-----Sample Input-----\n3\n4\n2\n\n-----Sample Output-----\n7\n\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n\na, b, h = map(int, stdin.split())\nprint(a*b*h//2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'a'\nassert solution('a b h') == 'a'\nassert solution('a b h') == 'a'\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"3 4 5\") == \"10\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"100 100 1\") == \"10000\"\n\"\"\"\nfrom collections import namedtuple\n\nTrapezoid = namedtuple(\"Trapezoid\", [\"a\", \"b\", \"h\"])\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom math import floor\n\nn = int(stdin.readline().rstrip())\na = [int(x) for x in stdin.readline().rstrip().split()]\n\ns = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        s += (a[i] * a[j])\n\nprint(s % (10 ** 9 + 7))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '20'\n\"\"\"\nfrom operator import mul\nfrom functools import reduce\nfrom math import ceil\nfrom typing import List\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3 4 5 6\") == \"34\"\nprint(solution(\"6\\n1 2 3 4 5 6\"))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"5\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin_lines) == expected_print\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == 11\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\nprint(solution(\"3\\n1 2 3\"))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"21\"\nassert solution(\"2\\n1 2\") == \"3\"\nassert solution(\"3\\n1 2 3\") == \"9\"\nassert solution(\"5\\n1 2 3 4 5\") == \"25\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"64\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == 11\n\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3''') == '11'\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2') == 'YES'\n\n-------\n    pass\n\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.strip())\n\nr, g, b = lines[0].split()\n\nr = int(r)\ng = int(g)\nb = int(b)"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"YES\"\nassert solution(\"273\") == \"NO\"\nassert solution(\"834\") == \"YES\"\nassert solution(\"543\") == \"NO\"\nassert solution(\"832\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\nimport stdin"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"2 1 1\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"6 8 4\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(4, 3, 2) == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2') == 'YES'\nassert solution('1 1 1') == 'NO'\nassert solution('2 2 2') == 'NO'\nassert solution('4 3 2') == 'YES'\nassert solution('1 1 1') == 'NO'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(4, 3, 2) == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == 'YES'\nassert solution(\"1 1 1\") == 'NO'\nassert solution(\"6 1 1\") == 'YES'\nassert solution(\"3 6 6\") == 'NO'\nassert solution(\"9 9 9\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 11\") == \"30\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 11\\n1') == '30'\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 11\\n1') == '30'\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"1\\n1\") == \"2\"\nassert solution(\"5 3 11\\n2\") == \"15\"\nassert solution(\"5 3 11\\n3\") == \"14\"\nassert solution(\"5 3 11\\n4\") == \"13\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('5 3 11') == 30\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabccaba\") == \"Yes\"\nassert solution(\"aaaa\") == \"No\"\nassert solution(\"aabbccab\") == \"No\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\"\"\"\n\nimport collections\nimport string"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abcccab') == 'No'\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abaccab') == 'No'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abc') == 'No'\n\n----------------------"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abaccada') == 'No'\nassert solution('aaaabbbb') == 'Yes'\nassert solution('aaaabb') == 'Yes'\nassert solution('aaaabbcc') == 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaaaa') == 'Yes'\nassert solution('abbbccc') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbcccaa\") == \"No\"\nassert solution(\"aaaa\") == \"Yes\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"bcc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccbaba\") == \"No\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == '3'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\n-----\n-----\n'''\nfrom typing import List, Dict\nimport collections"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n2 2\\n3 3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\nassert solution('''1 1\n2 2\n3 3''') == '1'\n\n'''\n3 4\n1 1\n2 2\n3 3\n'''\n\n'''\n2 3\n1 1\n2 2\n3 3\n'''\n\n'''\n3 4\n1 1\n2 2\n3 3\n'''\n\n'''\n2 3\n2 2\n3 3\n'''\n\n'''\n3 4\n1 1\n2 2\n3 3\n'''\n\n'''\n2 2\n2 2\n'''\n\n'''\n3 3\n1 1\n2 2\n3 3\n'''\n\n'''\n1 1\n2 2\n'''\n\n'''\n2 2\n1 1\n2 2\n'''\n\n'''\n3 2\n1 1\n1 1\n'''\n\n'''\n3 1\n1 1\n2 2\n'''\n\n'''\n1 1\n2 2\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n6 6\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n7 6\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n7 7\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n2 2\n'''\n\n'''\n5 5\n2 2\n1 1\n1 1\n1 1\n2 2\n'''\n\n'''\n3 3\n1 1\n1 1\n'''\n\n'''\n1 1\n2 2\n'''\n\n'''\n1 1\n1 1\n'''\n\n'''\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n2 2\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n3 3\n1 1\n1 1\n'''\n\n'''\n1 1\n2 2\n'''\n\n'''\n1 1\n2 2\n'''\n\n'''\n1 1\n2 2\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n'''\n5 5\n1 1\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\n\nprint(solution(\"1 1\\n2 2\\n3 3\\n\"))\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '3'\n\nassert solution('1 1\\n2 2') == '2'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '2'\n\"\"\"\n\nn, k = [int(x) for x in stdin.strip().split(' ')]"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"3 4\") == \"12\"\nassert solution(\"3 5\") == \"42\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('2 1') == '2'\nassert solution('2 3') == '2'\nassert solution('1 1') == '1'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('1 2\\n') == '1'\nassert solution('3 2\\n') == '0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == 2\n\"\"\"\n\nimport sys\n\nN, K = sys.stdin.readline().split()\nN = int(N)\nK = int(K)\n\nres = 2 ** K\n\nfor i in range(1, N):\n    res *= (K - i)\n    res += 2 ** i\n\nprint(res)\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 3\\n5 10 15') == '10'"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3\\n5 10 15\") == 10\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 15\\n1 2 3 4 5\") == \"10\"\n\"\"\"\n\nimport sys\n\nK, N = map(int, sys.stdin.readline().split())\nA = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n10 15') == '10'\n\"\"\"\n\n\nimport sys\n\nK, N = map(int, sys.stdin.readline().split())\n\nhouses = list(map(int, sys.stdin.readline().split()))\n\nhouses = sorted(houses)\nhouses = [K - house for house in houses]\n\nhouses = sorted(houses, reverse=True)\n\nprint(min(houses[0], houses[1] + houses[0]))\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '3'\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n'''"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''20 3\n5 10 15''') == '10'\nassert solution('''10 1\n10 5''') == '5'\nassert solution('''20 10\n1 1 2 2 4''') == '6'\nassert solution('''10 10\n2 3 4 5 6 8 9 10''') == '2'\nassert solution('''10 3\n5 10 15''') == '10'\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"20 3\\n5 10 15\"\n) == \"10\"\n\"\"\"\nfrom collections import deque\nfrom sys import stdin"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 3 4 5\\n') == '10'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('1 2 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('10 9 5 2') == '50'\nassert solution('10 9 6 2') == '60'\nassert solution('10 11 6 2') == '60'\nassert solution('10 11 6 3') == '90'\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 7\") == \"15\"\n\n\"\"\"\n\nfrom functools import reduce\n\na, b, c, d = map(int, stdin.split())\n\nprint(max((a*d, b*c)))"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 2 7') == '15', 'Test 1'\nassert solution('2 4 3 3') == '13', 'Test 2'\nassert solution('3 3 3 2') == '0', 'Test 3'\nassert solution('3 2 7 2') == '14', 'Test 4'\nassert solution('3 4 2 2') == '6', 'Test 5'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 2 7\") == \"15\"\nassert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 1 1 2\") == \"1\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"4 5 6 7\") == \"16\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 5, 2, 7) == 15\nassert solution(3, 5, 2, 2) == 14\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"4 4 4 4\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 7\\nWA x 2\\nTLE x 4\\nRE x 0'\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\\nWA\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC') == 'AC x 3'\nassert solution('WA') == 'WA x 1'\nassert solution('TLE') == 'TLE x 2'\nassert solution('RE') == 'RE x 0'\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nWA\\nTLE') == 'AC x 2\\nWA x 1\\nTLE x 1\\nRE x 0'\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n'''\nWhen the input is AC, WA, TLE, and RE, the verdicts are AC, WA, TLE, and RE, respectively.\nWhen the input is AC, WA, TLE, and RE, the verdicts are AC, WA, TLE, and RE, respectively.\nWhen the input is AC, WA, TLE, and RE, the verdicts are AC, WA, TLE, and RE, respectively.\nWhen the input is AC, WA, TLE, and RE, the verdicts are AC, WA, TLE, and RE, respectively.\nWhen the input is AC, WA, TLE, and RE, the verdicts are AC, WA, TLE, and RE, respectively.\n\n- AC x 3\n- WA x 1\n- TLE x 2\n- RE x 0\n'''\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nM = int(input())\nx = (24 + M - 12) % 24\nprint(x)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nimport sys\n\nM = int(sys.stdin.readline())\nprint(M-1 if M < 12 else M-2)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\nprint(\"Test success.\")\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"8\"\nassert solution(\"6 3\") == \"error\"\nassert solution(\"2 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3') == '9'\nassert solution('0 9') == 'error'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3\\n') == '9'\nassert solution('6 10\\n') == 'error'\nassert solution('5 5\\n') == '10'\nassert solution('0 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3') == '9'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == '9'\nassert solution('3 9') == 'error'\n\n'''"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3\\n') == '9'"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3') == '9'\n\"\"\"\n\nimport sys\nfrom typing import Optional"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\") == \"error\"\nassert solution(\"10 2\") == \"error\"\nassert solution(\"7 7\") == \"14\"\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3 7 9\") == 7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 7 9') == 7\nassert solution('2 3 4 6') == 4\nassert solution('3 3 3') == 0\nassert solution('1 1') == 0\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 7 9\\n') == '7'\nassert solution('3 4 0\\n') == '2'\nassert solution('2 3 7 9\\n') == '7'\nassert solution('0 1 0\\n') == '2'\nassert solution('5 1 0 4 0\\n') == '4'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 7 9\\n') == 7"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(4, 2, 3, 7, 9) == 7\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 9 11') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nprint('Hooray!')\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('1 3 2') == 'No'\n\"\"\"\n\n\"\"\"\nOne solution:\n\nimport sys"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 4\") == \"No\"\n\"\"\"\n\nx, y = [int(n) for n in stdin.split(' ')]"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == 'No'\nassert solution('1 3\\n') == 'Yes'\nassert solution('2 3\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3\\n') == 'Yes'\nassert solution('5 6\\n') == 'No'\nassert solution('9 10\\n') == 'Yes'\n\n\"\"\"\n\n\"\"\"\nREFLECTIONS:\n\n- I'm not sure of the structure of the solution, but I think it could probably be done with an array of arrays\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\n\nx = int(sys.argv[1])\ny = int(sys.argv[2])\n\nassert 1 <= x <= 12\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 3') == 'Yes'\nassert solution('1 4\\n1 3') == 'No'\nassert solution('4 7\\n1 3') == 'No'\nassert solution('2 1\\n2 3') == 'No'\nassert solution('1 10\\n3 9') == 'No'\n\n\"\"\"\n\nx, y = map(int, stdin.split())"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == 'Yes'\n\"\"\"\n\nstdin = input()\n\nassert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"2 4\") == \"No\"\nassert solution(\"3 5\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\nassert solution(\"4 5\") == \"Yes\"\nassert solution(\"10 15\") == \"No\"\nassert solution(\"11 12\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('1 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('8 7') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n') == \"Even\"\n\"\"\"\n\nimport math\n\nA, B = map(int, input().split())\nprint(\"Even\" if math.prod(A, B) % 2 == 0 else \"Odd\")\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('1 3') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\n''') == 'Even'\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"Even\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == s\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_contents) == stdout_contents\nSolution.assert_equals(solution(stdin_contents), stdout_contents)\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == 'Even'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 4\"\n) == \"Even\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\nassert solution(\"2 5\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"7 8\") == \"4\"\nassert solution(\"7 9\") == \"3\"\nassert solution(\"3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == \"2\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"10 2\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\"\n\nN, M = [int(x) for x in stdin.readline().split()]\n\nprint((M*(M-1))//2)\n\n\"\"\"\n1 6\n\n1 6\n2\n\n1 6\n2\n3\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\n-----\n3 3\n\n-----Sample Output-----\n3\n\n-----\n4 4\n\n-----Sample Output-----\n5\n\n-----\n5 5\n\n-----Sample Output-----\n6\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n4') == '2'\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nn = int(input())\ntimes = list(map(int, input().split()))\nm = int(input())\n\nd = dict()\nfor i in range(m):\n    x, y = map(int, input().split())\n    d[x] = y\n\nprint(sum(d[i] * times[i - 1] for i in range(1, n + 1)))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n2 1 4\n2\n1 1\n2 3\"\"\") == \"6\\n9\"\nassert solution(\"\"\"3\n2 1 4\n2\n1 1\n2 3\"\"\") == \"6\\n9\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n2 1 4\\n2\\n1 1\\n2 3\"\n) == \"6\\n9\"\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2\\n') == '2'\nassert solution('5\\n5 5\\n') == '0'\nassert solution('5\\n2 2\\n') == '4'\nassert solution('5\\n1 1\\n') == '0'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\":\\n3\\n1 4 1\\n2\\n1 1\\n2 3\") == '6\\n9'\nassert solution(\":\\n3\\n1 2 3\\n4\\n1 1\\n2 3\") == '6\\n9'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"9\\n6\"\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1\\n2 3\\n') == '6\\n9\\n'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\n\nfrom __future__ import annotations\n\nfrom functools import reduce\nfrom operator import add\nfrom sys import stdin\nfrom typing import List\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"6\\n9\"\n\"\"\"\n\nstdin = input()\n\nN, T = stdin.split()\nT = list(map(int, T.split()))\n\nM = int(input())\nP = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\ntotal_time = sum([T[i-1] for i in P])\n\nfor i in range(M):\n    total_time += X[i]\n\nprint(total_time)\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_str) == output_str\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 0') == '2000'\nassert solution('1 3 4 5 6 7 8 9 0') == '200'\nassert solution('1 2 2 3 4 5 6 7 8 9 0') == '200'\nassert solution('1 2 3 4 5 6 7 8 9 0 10') == '200'\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\n---"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == \"2000\"\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\n\"\"\"\n\nimport math\n\nn, k = map(int, stdin.readline().split())\nd = list(map(int, stdin.readline().split()))\n\ns = set(d)\ns.discard(0)\ns.discard(1)\ns.discard(2)\ns.discard(3)\ns.discard(4)\ns.discard(5)\ns.discard(6)\ns.discard(7)\ns.discard(8)\ns.discard(9)\n\nprint(math.floor(n / 10 ** k) * (10 ** k))"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\nobs_h = [int(i) for i in stdin.readline().split()]\nroad = [[int(j) for j in stdin.readline().split()] for i in range(M)]\n\ngood_obs = 0\nfor i in range(N):\n    good_obs += 1 if max(obs_h[j] for j in road[i]) <= obs_h[i] else 0\n\nprint(good_obs)\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\") == '2'\n\n\"\"\"\n\nIn the following equation a, b, c, d and e are some integers. x1, x2, x3, x4, x5 are integers.\na + x1(b + x2)c + x3d + x4e\n\n-----Constraints-----\n - 2 \\leq a \\leq 10^5\n - 2 \\leq b \\leq 10^5\n - 2 \\leq c \\leq 10^5\n - 2 \\leq d \\leq 10^5\n - 2 \\leq e \\leq 10^5\n - 1 \\leq x1,x2,x3,x4,x5 \\leq 10^9\n\n-----Input-----\nThe first line contains an integer, the number of test cases.\nThe first line of each test case contains four integers, a, b, c, and d.\nThe second line of each test case contains five integers, x1, x2, x3, x4, and x5.\n\n-----Output-----\nPrint the answer to each test case in a separate line.\n\n-----Sample Input-----\n4\n1 1 1 1 1\n2 2 4 1 1\n3 1 1 2 2\n4 3 5 2 1\n2 2 2 2 3\n1 1 1 1 1\n1 1 1 1 1\n\n-----Sample Output-----\n3\n5\n-1\n7\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nnums = [0 for _ in range(n)]\nfor i in range(n):\n    nums[i] = int(input())\n\ngraph = [[] for _ in range(n)]\nfor i in range(m):\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n-----\nhttps://www.pramp.com/challenge/2GUu4JzH9XQd8jQE7v1N3A\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\nprint(solution(\"4 3\"))\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n\"\"\"\nimport math\n\nclass Solution:\n    def __init__(self, n: int, k: int):\n        self.n = n\n        self.k = k\n\n    def solution(self, stdin: str) -> str:\n        return self.solve(int(stdin))\n\n    def solve(self, n) -> int:\n        a = 1\n        b = 1\n\n        while n!= 0:\n            if n % 2 == 1:\n                a = math.floor(a * 2)\n            else:\n                b += self.k\n            n = math.floor(n / 2)\n\n        return a * b"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '10'\nassert solution('2 5') == '2'\nassert solution('1 9') == '9'\nassert solution('4 6') == '4'\nassert solution('4 7') == '14'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('1') == '2'\nassert solution('3') == '7'\nassert solution('4') == '10'\n\nassert solution('') == '1'\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n3''') == '10'\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '10'\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0.1\") == \"0\"\nassert solution(\"0.01\") == \"0\"\nassert solution(\"0.001\") == \"0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n\n'''"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0.000000001\") == \"0\"\nassert solution(\"0.00001\") == \"0\"\nassert solution(\"0.0001\") == \"0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('125') == '176'\nassert solution('1') == '1'\nassert solution('9') == '36'\nassert solution('12') == '30'\nassert solution('123') == '372'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+2+3') == '7'\nassert solution('12+34') == '76'\nassert solution('123+45') == '165'\n\"\"\"\n\ns = input()\n\ntotal = 0\nfor i, e in enumerate(s):\n    # It is impossible to add two consecutive +s.\n    if i > 0 and s[i] == '+':\n        continue\n    # When there is no + in this number, then the total must be added directly.\n    if not e.isdigit():\n        total += int(e)\n        continue\n    # When the number is a single digit, the total must be added directly.\n    if e.isdigit():\n        total += int(e)\n        continue\n    # When the number is a +, the total must be calculated.\n    if e == '+':\n        first = int(s[i - 1])\n        second = int(s[i - 2])\n        total += first + second\n\nprint(total)\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"26\"\nassert solution(\"1125\") == \"176\"\nassert solution(\"11255\") == \"176\"\nassert solution(\"12345\") == \"175\"\nassert solution(\"111456\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12345') == 12345\nassert solution('1234+5') == 1234+5\nassert solution('12+5') == 12+5\nassert solution('125') == 125\nassert solution('12+5+7') == 12+5+7\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('125') == '176'\n\n---"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"125\") == \"176\"\nprint(solution(\"125\"))"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1234\") == \"7\"\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234') == 4\nassert solution('12') == 3\nassert solution('123') == 6\nassert solution('12+2') == 9\nassert solution('1234+5') == 9\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234') == '16', 'error'\n\"\"\"\nimport re\nfrom itertools import permutations"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+25\") == \"26\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\na\\n1 2') == '1'\nassert solution('2\\na\\n1 2\\nb\\n2 3') == '1'\n\n-----Test 1-----\nimport sys\nimport unittest\n\nclass Test05(unittest.TestCase):\n    def test_01(self):\n        self.assertEqual(solution('2\\na\\n1 2'), '1')\n\n    def test_02(self):\n        self.assertEqual(solution('2\\na\\n1 2\\nb\\n2 3'), '1')"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\n\nprint(sum(arr[0::2]) - sum(arr[1::2]))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"15800\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '1000'\nassert solution('20') == '15800'\n\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\\n\") == \"15800\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"15800\"\n\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20\") == \"15800\"\nprint(solution(\"20\"))\n\"\"\"\nimport math"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n300\\n800\\n200\\n500\\n900\\n400\\n700\\n1200\\n900\\n600') == '97600'\nassert solution('4\\n200\\n700\\n900\\n500\\n600\\n1200\\n800\\n300') == '16800'\nassert solution('5\\n1200\\n900\\n500\\n600\\n700\\n300\\n800\\n200') == '11600'\nassert solution('3\\n300\\n500\\n600') == '2700'\n\nprint('PASSED')\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('abcd') == 'abcd'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\nprint(\"All test cases passed.\")\n\n----------"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('ant') == 'abc'\nassert solution('obe') == 'bob'\nassert solution('rec') == 'cbr'\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"hil\") == \"hil\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('pqr') == 'pqr'\nassert solution('afs') == 'afs'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n\nfrom unittest import TestCase\n\nclass SolutionTester(TestCase):\n    def testSolution1(self):\n        pass"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '2'\nassert solution('111') == '0'\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"2\"\n\nassert solution(\"101101101\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"2\"\nassert solution(\"10101\") == \"0\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == 2\nassert solution('010') == 0\nassert solution('111') == 1\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(101) == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n-----\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(101) == \"2\"\nassert solution(110) == \"3\"\nassert solution(111) == \"1\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '2'\n\"\"\"\n\ns_1 = input()\ns_2 = input()\ns_3 = input()\n\nprint(s_1.count('1') + s_2.count('1') + s_3.count('1'))\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 10000 9000') == '48000'\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n3\n10000\n9000''') == '48000'"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 10000 9000\") == \"48000\"\n\"\"\"\n\nN, K, X, Y = [int(i) for i in input().split()]\n\ntotal = 0\n\nfor i in range(N):\n    if i < K:\n        total += X\n    else:\n        total += Y\n\nprint(total)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nN, K, X, Y = [int(x) for x in input().split()]\n\nfor i in range(K):\n    Y = Y + X\n\nprint(Y * N)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 10000 9000\\n\") == '48000'\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\nprint(\"Test 1 is OK!\")\n\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 10000 9000\\n\") == \"48000\"\n\"\"\"\n\n\"\"\"\n7.2.3 \u30d3\u30c3\u30c8\u5168\u63a2\u7d22\n\n- \u5b9f\u884c\u6642\u9593\u5236\u9650: 1\u79d2\n- \u95a2\u6570\u5185\u3067\u5165\u529b\u3092\u8907\u6570\u56de\u53d6\u5f97\u3057\u3066\u3001\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6e21\u3059\n\n-----Constraints-----\n - 1 \\leq N \\leq 1,000,000\n - 1 \\leq K \\leq N\n - 1 \\leq X, Y < 100,000\n - N,\\,K,\\,X,\\,Y are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nK\nX\nY\n\n-----Output-----\nPrint Tak's total accommodation fee.\n\n-----Sample Input-----\n5\n3\n10000\n9000\n\n-----Sample Output-----\n48000\n\nThe accommodation fee is as follows:\n - 10000 yen for the 1-st night\n - 10000 yen for the 2-nd night\n - 10000 yen for the 3-rd night\n - 9000 yen for the 4-th night\n - 9000 yen for the 5-th night\nThus, the total is 48000 yen.\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n10000\\n9000\") == \"48000\"\nassert solution(\"10\\n5\\n10000\\n9000\") == \"80000\"\n\"\"\"\n\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nc = 0\nfor i in range(n):\n    if i < k:\n        c += x\n    else:\n        c += y\nprint(c)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n10000\\n9000\\n\") == \"48000\"\n\n\"\"\"\n\nN, K, X, Y = list(map(int, input().split()))\n\nprint(X*K + Y*(N-K))\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == 3\nassert solution(\"1 - 2\") == -1\nassert solution(\"1 * 2\") == 2\nassert solution(\"1 + 2 - 3\") == 0\nassert solution(\"1 + 2 * 3\") == 7\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == 3\n\n-----\nYou've got a simple task to perform, but you've got a weak in the fundamentals of algorithms and data structures.\n\nYou want to perform a simple integer arithmetic with the help of some basic commands of Python.\n\nYou've got n integers named 1, 2, 3,..., n.\nYou should perform the following operations until all numbers equal zero.\nAt the end you will have the number n, which may be non-zero.\n\nThere are three possible operations:\n\n1) if you get the number equal to zero, print its number;\n2) if you get the number equal to zero, print its number and exit;\n3) otherwise, multiply the number on the left by 2 and subtract the number on the right.\n\nIf the end result is negative, then it should be made positive.\n\nPrint only the final result.\n\nInput:\nInput consists of integers separated by whitespace, e.g.\n\n1 2 3 4 5\n\nOutput:\nPrint a single integer \u2014 the final result of the operation.\n\nExample:\n\nInput:\n1 2 3 4 5\n\nOutput:\n15\n\nExplanation:\n1 * 2 = 2\n2 * 3 = 6\n6 - 4 = 2\n2 + 5 = 7\n7 * 2 = 14\n14 - 3 = 11\n11 * 2 = 22\n22 - 4 = 16\n16 + 5 = 21\n21 * 2 = 42\n42 - 5 = 37\n37 * 2 = 74\n74 - 5 = 69\n69 + 5 = 84\n84 * 2 = 168\n168 - 5 = 153\n153 * 2 = 306\n306 - 5 = 301\n301 * 2 = 602\n602 - 5 = 597\n597 * 2 = 1194\n1194 - 5 = 1089\n1089 * 2 = 2184\n2184 - 5 = 1779\n1779 * 2 = 3368\n3368 - 5 = 3363\n3363 * 2 = 6754\n6754 - 5 = 6649\n6499 * 2 = 13442\n13442 - 5 = 13137\n13137 * 2 = 26226\n26226 - 5 = 25011\n25011 * 2 = 5094\n5094 - 5 = 4965\n4965 * 2 = 9880\n9880 - 5 = 9755\n9751 * 2 = 19638\n19638 - 5 = 19401\n19401 * 2 = 38362\n38362 - 5 = 3735\n3735 * 2 = 7414\n7414 - 5 = 7399\n7399 * 2 = 15984\n15984 - 5 = 15773\n15773 * 2 = 30438\n30438 - 5 = 30139\n30139 * 2 = 61874\n61874 - 5 = 60519\n60519 * 2 = 120422\n120422 - 5 = 119125\n119125 * 2 = 240144\n240144 - 5 = 238941\n238941 * 2 = 47522\n47522 - 5 = 46959\n46959 * 2 = 94930\n94930 - 5 = 93675\n93675 * 2 = 184952\n184952 - 5 = 184319\n184319 * 2 = 37162\n37162 - 5 = 37043\n37043 * 2 = 72406\n72406 - 5 = 69933\n69933 * 2 = 146976\n146976 - 5 = 146531\n146531 * 2 = 3012\n3012 - 5 = 3001\n3001 * 2 = 6002\n6002 - 5 = 5993\n5993 * 2 = 11854\n11854 - 5 = 11794\n11794 * 2 = 24832\n24832 - 5 = 24671\n24671 * 2 = 47104\n47104 - 5 = 46639\n46639 * 2 = 95228\n95228 - 5 = 93629\n93629 * 2 = 181202\n181202 - 5 = 179841\n179841 * 2 = 34038\n34038 - 5 = 33925\n33925 * 2 = 67314\n67314 - 5 = 66839\n66809 * 2 = 132866\n132866 - 5 = 128853\n128853 * 2 = 259974\n259974 - 5 = 252689\n252689 * 2 = 48322\n48322 - 5 = 47865\n47863 * 2 = 94770\n94770 - 5 = 93245\n93245 * 2 = 188402\n188402 - 5 = 177939\n177939 * 2 = 35186\n35186 - 5 = 35455\n35455 * 2 = 70978\n70978 - 5 = 70555\n70555 * 2 = 140766\n140766 - 5 = 138639\n138639 * 2 = 258744\n258744 - 5 = 261789\n261789 * 2 = 45982\n45982 - 5 = 46027\n46027 * 2 = 96266\n96266 - 5 = 96491\n96491 * 2 = 184970\n184970 - 5 = 184379\n184379 * 2 = 38119\n38119 - 5 = 37441\n37441 * 2 = 73892\n73892 - 5 = 73735\n73735 * 2 = 154318\n154318 - 5 = 152547\n152547 * 2 = 30232\n30232 - 5 = 29915\n29915 * 2 = 61924\n61924 - 5 = 61705\n61705 * 2 = 122598\n122598 - 5 = 122421\n122421 * 2 = 25094\n25094 - 5 = 24869\n24869 * 2 = 47650\n47650 - 5 = 47589\n47589 * 2 = 94862\n94862 - 5 = 93279\n93279 * 2 = 184986\n184986 - 5 = 184829\n184829 * 2 = 36958\n36958 - 5 = 36885\n36885 * 2 = 73526\n73526 - 5 = 73445\n73445 * 2 = 152342\n152342 - 5 = 152079\n152079 * 2 = 30626\n30626 - 5 = 29407\n29407 * 2 = 59988\n59988 - 5 = 59783\n59783 * 2 = 119156\n119156 - 5 = 118811\n118811 * 2 = 247024\n247024 - 5 = 246905\n246905 * 2 = 47694\n47694 - 5 = 47587\n47587 * 2 = 95910\n95910 - 5 = 95545\n95645 * 2 = 191984\n191984 - 5 = 191313\n191313 * 2 = 38132\n38132 - 5 = 37187\n37187 * 2 = 72658\n72658 - 5 = 72649\n72649 * 2 = 152402\n152402 - 5 = 151645\n151645 * 2 = 30444\n30444 - 5 = 29979\n29979 * 2 = 60146\n60146 - 5 = 59749\n59751 * 2 = 118370\n118370 - 5 = 118365\n118365 * 2 = 24846\n24846 - 5 = 24709\n24709 * 2 = 47790\n47790 - 5 = 47557\n47557 * 2 = 95482\n95482 - 5 = 93117\n93117 * 2 = 189900\n189900 - 5 = 188923\n188923 * 2 = 37596\n37596 - 5 = 37299\n37299 * 2 = 73058\n73058 - 5 = 72953\n72953 * 2 = 152578\n152578 - 5 = 151851\n151851 * 2 = 30266\n30266 - 5 = 29783\n29783 * 2 = 61266\n61266 - 5 = 61461\n61461 * 2 = 121438\n121438 - 5 = 121237\n121237 * 2 = 253056\n253056 - 5 = 250923\n250923 * 2 = 48534\n48534 - 5 = 47579\n47579 * 2 = 95954\n95954 - 5 = 95881\n95881 * 2 = 193508\n193508 - 5 = 192921\n192921 * 2 = 37466\n37466 - 5 = 37235\n37235 * 2"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(1 + 2)) == '3'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('10500') == 'ARC'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1234) == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1000) == 'ABC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\n\nprint(solution(stdin.readline().strip()))\n\n---\n\nSmeke has decided to participate in AtCoder Beginner Contest (ABC) if his current rating is less than 1200, and participate in AtCoder Regular Contest (ARC) otherwise.\nYou are given Smeke's current rating, x. Print ABC if Smeke will participate in ABC, and print ARC otherwise.\n\nimport sys\n\nx = int(sys.stdin.readline())\n\nprint('ABC' if x < 1200 else 'ARC')"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000') == 'ABC'\n\n-----Explanation-----\n- 1000 <= x <= 3000, thus, the output is ABC.\n\"\"\"\n\nx = int(stdin.readline())\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = map(int, stdin.split())\nprint(a*min(c, b) + b*min(c, a))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test1) == \"1300\"\nassert solution(test2) == \"1280\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = [int(n) for n in input().split(' ')]\n\nprint(min(a + b, a + c, b + c))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\na, b, c = map(int, stdin.split())\nprice = a + b + c\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\naa\\nii\\narc') == '###\\n#a#\\n#i#\\n###\\n'\nassert solution('3 3\\naa\\narc\\nii') == '###\\n#a#\\n#i#\\n###\\n'\nassert solution('2 4\\naa\\nii') == '#a#\\n#i#\\n'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3\nabc\narc''') == '#####\\n#abc#\\n#arc#\\n#####\\n'\n\nassert solution('''3 3\ncba\narc\neif''') == '###\\n#cba#\\n#arc#\\n#eif#\\n###\\n'\n\nassert solution('''2 3\nhij\nklm''') == '####\\n#hij#\\n#klm#\\n####\\n'\n\nassert solution('''1 2\na''') == '#a#\\n'\n\nassert solution('''3 5\nabc\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nabc\\narc\\n\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"3 4\\na\\nb\\nc\\nd\\n\") == \"######\\na\\n#b#\\n#c#\\n#d#\\n######\"\nassert solution(\"4 3\\n#####\\n#a#a\\n#aa#\\n#aaa#\\n#aaaa#\\n\") == \"######\\n#a#a#\\n#aa#a#\\n#aaa#a#\\n#aaaa#a#\\n######\"\nassert solution(\"1 1\\n#\") == \"##\"\nassert solution(\"2 2\\n#\\n#\") == \"##\\n##\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#abc#\\n#arc#\\n#abc#\"\n\nassert solution(\"2 4\\nasd\\nfgh\") == \"#asd#\\n#fgh#\\n#asd#\\n#fgh#\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\nab\\ncd\\n\") == \"\"\"#####\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == \"2\"\n\nassert solution(\"IDDID\") == \"2\"\n\nassert solution(\"IIDIID\") == \"3\"\n\nassert solution(\"IDDIDID\") == \"3\"\n\nassert solution(\"IIDIIDID\") == \"4\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('I') == 1\nassert solution('ID') == 1\nassert solution('IDDI') == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('IIDID') == 2\nassert solution('IDIDI') == 2\nassert solution('IIIDID') == 2\nassert solution('IDIDID') == 2\nassert solution('DDIDI') == 1\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"IDIDI\") == 3\nassert solution(\"III\") == 0\nassert solution(\"DID\") == 1\nassert solution(\"DDDDD\") == 0\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IIDID\") == 2"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IIDID\") == \"2\"\nassert solution(\"DDIIDIDID\") == \"2\"\nassert solution(\"IDIDDDDIID\") == \"4\"\nassert solution(\"IIIIIDDDDDDDDIDID\") == \"5\"\nassert solution(\"DDIDDIIDDDDDDDDDDDDDDDDDDDDIDDDDDDDDIDID\") == \"7\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5IIDID') == '2'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1I') == 1\nassert solution('3D') == 0\nassert solution('11D2I') == 1\nassert solution('3IID') == 2\nassert solution('100IID') == 100\n\nfrom collections import Counter\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 IIDID') == 2\nassert solution('4 IDIDID') == 3\nassert solution('1 IDIDID') == 3\nassert solution('2 IDIDID') == 4\nassert solution('3 IDIDID') == 5\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == 4\n\n---\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(11009 11332) == 4\n\"\"\"\n\nA, B = [int(a) for a in stdin.split()]"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11009 11332\") == 4"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == expected\n\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11009 11332') == 4\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == 4\nprint(solution(\"11009 11332\"))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n\na, b = map(int, stdin.split())\n\ncount = 0\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == 3\nassert solution(\"1 2 3 4\") == 4\nassert solution(\"1 2 1\") == 1\nassert solution(\"1 2 3 4\") == 4\nassert solution(\"1 2 3 2\") == 2\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1 4''') == 3\nassert solution('''1 2 3''') == 1\nassert solution('''3 1 1''') == 3\n\n'''\n\n--- Part Two ---\n\nNow, suppose you have a special string called a_input (represented as a_str) which is a string of the form \"aabbbbccccaaaaddf\", where the character a has some number between 1 and 9 inclusive, and the rest of the characters have the same constraints. For example, \"aaabbbbccccaaaaddf\" is a valid string.\n\nYour task is to determine the minimum number of characters you have to insert into the a_input string to make it a valid string, and to determine the number of ways you can do that.\n\nFor example, for the input a_str=\u201daaabbbbccccaaaaddf\u201d, the minimum number of characters you need to insert is 8 (for example, you can insert the characters \"af\", \"bf\", \"cf\", \"ad\", \"dd\", \"ef\", \"ff\", and \"ff\" to make the string a valid string) and the number of ways to do that is 16 (the combinations of lengths of the characters you need to insert).\n\nHere is a table of valid strings that you can make with the string a_str, along with the minimum number of insertions required to make them valid.\n\nString    Insertions    Number of valid strings\na_str    1    4\na_str    2    7\na_str    3    10\na_str    4    13\na_str    5    16\na_str    6    19\na_str    7    22\na_str    8    25\na_str    9    28\na_str    10    31\na_str    11    34\na_str    12    37\na_str    13    40\na_str    14    43\na_str    15    46\na_str    16    49\na_str    17    52\na_str    18    55\na_str    19    58\na_str    20    61\na_str    21    64\na_str    22    67\na_str    23    70\na_str    24    73\na_str    25    76\na_str    26    79\na_str    27    82\na_str    28    85\na_str    29    88\na_str    30    91\na_str    31    94\na_str    32    97\na_str    33    100\n\nIn this example, you have to test 26 strings, for each string you have to test 26 possible valid strings that you can make.\n\nGiven a_input, the number of combinations you have to test is 25!=120448464.\n\nSince this number is larger than the limit given in the udacity quiz, you have to come up with an efficient solution.\n\n(HINT: This problem is exactly the same as the first problem, just on a larger input string. You can copy the code for the first problem, and then try to solve this problem.)\n\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4\\n') == '3'\nassert solution('3 1 4\\n') == '3'\nassert solution('3 3 4\\n') == '1'\nassert solution('4 3 3\\n') == '0'\n\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 2 2') == '2'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('3 1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\n-----\n    \n-----\n        \n-----\n'''"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('5 3\\n1 2 3 4 5\\n') == 12\nassert solution('5 5\\n1 2 3 4 5\\n') == 15\nassert solution('4 4\\n1 2 3 4\\n') == 10\nassert solution('3 3\\n1 2 3\\n') == 6\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5\\n') == '12', 'wrong solution'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(solution.__annotations__)) == solution.__annotations__\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12\"\nassert solution(\"2 2 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == 12\n\n---Problem---\nThe last problem from the warmup challenges asks for you to write a function that takes in a single number, and returns the square root of that number. In order to do this, you will need to find the nth root of a number.\n\nNote that you do not need to call your function square_root; however, you are allowed to do so.\n\nA reminder of how to find the nth root of a number can be found here.\n\nFor this problem, we will round all our answers to three decimal places.\n\n---Sample Input---\n4.0\n\n---Sample Output---\n2.0\n\nYou can find the square root of 4 by calling\nsquare_root(4.0)"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"3\"\nassert solution(\"3 2 3\") == \"5\"\nassert solution(\"3 2 5\") == \"12\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == '12'\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n\n\"\"\"\nThe problem is a variation of the Knapsack problem.\n\nExample:\n3 1\n2 5 4\n\nExample:\n5 1\n5 2 4 3 1\n\nExample:\n5 3\n5 5 4 3 2\n\nExample:\n4 1\n1 1 1 1\n\nThe solution is given in the description.\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\nimport re\nx, a, b = re.split(\"\\s+\", stdin)\nprint(solution(x+\" \"+a+\" \"+b))"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"2 4 6\") == \"B\"\nassert solution(\"1 2 4\") == \"A\"\nassert solution(\"9 4 2\") == \"A\"\n\"\"\"\nimport math\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3,2,7) == 'B'\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 2, 7) == \"B\"\nassert solution(7, 2, 5) == \"B\"\nassert solution(2, 5, 7) == \"A\"\nassert solution(7, 5, 2) == \"A\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n1. Take input in list\n2. Iterate over list to calculate absolute difference for each pair\n3. Find minimum absolute difference from list\n4. Output the store name which has the minimum absolute difference \n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 7') == 'B'\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == 'B'\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nprint(solution('2017/01/07'))"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\nprint(S[:4] + \"2018\" + S[5:])\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aac\") == \"aac\"\nassert solution(\"a\") == \"\"\nassert solution(\"cbaa\") == \"aac\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\nassert solution('2\\ndd\\na') == ''\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\n\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\nassert solution('1\\nac') == 'ac'\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('b') == 'b'\nassert solution('c') == 'c'\nassert solution('ab') == 'ab'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a ') == 'a'\nassert solution('a c') == 'a'\nassert solution('a b') == 'ab'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == 'aac'\n\"\"\"\n\nfrom collections import Counter\nfrom math import inf\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cbaa') == 'aac'\nassert solution('daacc') == 'aca'\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"aca\"\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n24 30\\n\") == \"7\"\nprint(\"Test 1 passed\")\n\n---"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 24 30\") == 7\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3\\n1 4 5\\n3 6 7\\n3 8 9\\n2 10 11') == '3'\nassert solution('1\\n2 3\\n4 5\\n6 7') == '0'\nassert solution('1\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30') == '28'\nassert solution('1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == '30'\nassert solution('1\\n5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\\n21\\n23\\n25\\n27\\n29\\n31\\n33\\n35\\n37\\n39\\n41\\n43\\n45\\n47\\n49\\n51\\n53\\n55\\n57\\n59\\n61\\n63\\n65\\n67\\n69\\n71\\n73\\n75\\n77\\n79\\n81\\n83\\n85\\n87\\n89\\n91\\n93\\n95\\n97\\n99\\n101\\n103\\n105\\n107\\n109\\n111\\n113\\n115\\n117\\n119\\n121\\n123\\n125\\n127\\n129\\n131\\n133\\n135\\n137\\n139\\n141\\n143\\n145\\n147\\n149\\n151\\n153\\n155\\n157\\n159\\n161\\n163\\n165\\n167\\n169\\n171\\n173\\n175\\n177\\n179\\n181\\n183\\n185\\n187\\n189\\n191\\n193\\n195\\n197\\n199\\n201\\n203\\n205\\n207\\n209\\n211\\n213\\n215\\n217\\n219\\n221\\n223\\n225\\n227\\n229\\n231\\n233\\n235\\n237\\n239\\n241\\n243\\n245\\n247\\n249\\n251\\n253\\n255\\n257\\n259\\n261\\n263\\n265\\n267\\n269\\n271\\n273\\n275\\n277\\n279\\n281\\n283\\n285\\n287\\n289\\n291\\n293\\n295\\n297\\n299') == '37'\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n3 4') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\"\"\"\n\nn = int(stdin.readline())\nseats = []\nfor i in range(n):\n    seats.append(list(map(int, stdin.readline().split())))\n\ntotal = 0\nfor i in range(n):\n    l = seats[i][0]\n    r = seats[i][1]\n    total += r - l + 1\n\nprint(total)"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2\n1 2\n3 4''') == '7'\n\nassert solution('''1\n1 2''') == '2'\n\nassert solution('''3\n1 2\n3 4\n5 6''') == '8'\n\"\"\"\n\nN = int(stdin.readline().strip())\noccupied_seats = [list(map(int, stdin.readline().split())) for _ in range(N)]\nprint(sum(range(occupied_seats[i][0], occupied_seats[i][1] + 1) for i in range(N)))\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n3 4\\n6 7\\n8 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\n1 4\n3 4\n3 6\n7 10\n3 7\n2 6\n7 11\n3 8\n1 8\n2 10\n6 13\n1 10\n1 10\n2 12\n3 14\n1 13\n2 13\n6 14\n1 15\n1 16\n2 15\n1 16\n1 16\n5 16\n3 17\n2 17\n5 18\n3 18\n1 18\n5 19\n3 19\n1 19\n1 20\n5 20\n3 20\n3 20\n5 21\n3 21\n1 21\n1 22\n1 23\n3 23\n3 24\n4 24\n3 24\n4 25\n1 26\n2 26\n2 27\n3 27\n3 28\n1 29\n2 29\n2 29\n5 30\n1 30\n1 30\n2 31\n1 32\n1 32\n1 32\n1 33\n3 34\n1 34\n1 35\n3 36\n1 36\n1 36\n5 37\n1 37\n3 38\n1 38\n1 38\n1 39\n2 39\n1 40\n1 41\n2 41\n1 42\n3 42\n1 43\n2 43\n1 43\n1 44\n3 44\n2 44\n1 45\n1 46\n3 47\n1 47\n1 48\n1 49\n3 49\n1 50\n1 50\n2 51\n1 52\n1 52\n3 53\n1 53\n1 54\n3 55\n1 55\n3 56\n1 56\n1 57\n3 57\n1 58\n1 59\n1 60\n3 61\n1 61\n2 62\n1 62\n1 63\n2 63\n2 64\n3 65\n1 65\n1 65\n1 66\n3 66\n1 66\n1 67\n1 68\n2 69\n1 70\n1 71\n2 71\n1 72\n1 72\n1 73\n1 74\n3 75\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n3 81\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n2 99\n2 100\n3 100\n4 100\n1 101\n3 101\n2 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n1 438\n1 439\n1 440\n1 441\n1 442\n1 443\n1 444\n1 445\n1 446\n1 447\n1 448\n1 449\n1 450\n1 451\n1 452\n1 453\n1 454\n1 455\n1 456\n1 457\n1 458\n1 459\n1 460\n1 461\n1 462\n1 463\n1 464\n1 465\n1 466\n1 467\n1 468\n1 469\n1 470\n1 471\n1 472\n1 473\n1 474\n1 475\n1 476\n1 477\n1 478\n1 479\n1 480\n1 481\n1 482\n1 483\n1 484\n1 485\n1 486\n1 487\n1 488\n1 489\n1 490\n1 491\n1 492\n1 493\n1 494\n1 495\n1 496\n1 497\n1 498\n1 499\n1 500\n1 501\n1 502\n1 503\n1 504\n1 505\n1 506\n1 507\n1 508\n1 509\n1 510\n1"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n3 4') == '6'\nprint(solution('3 4\\n3 4'), '6')\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\nprint(solution(stdin.strip()))\n'''\n\nn,m = [int(i) for i in input().split()]"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n') == '6'\n\"\"\"\n\nfrom io import StringIO"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2 2\\n') == '0'\nassert solution('3 2\\n') == '2'\n'''\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n3 2\\n2 3\\n2 2') == '6'\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 4') == '6'\nassert solution('2 2') == '1'\nassert solution('10 10') == '36'\n'''\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n') == 6\n\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n') == 'Possible'\n\"\"\"\n\nimport numpy as np\n\ninput_stdin = input().split()\nnumber_of_cookies_min, number_of_cookies_max = int(input_stdin[0]), int(input_stdin[1])\n\ncookies = np.arange(number_of_cookies_min, number_of_cookies_max + 1)"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n9 9 9') == \"Possible\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7') == 'Impossible'\nassert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1 2') == 'Impossible'\nassert solution('1 1') == 'Impossible'\nassert solution('3 4') == 'Impossible'\nassert solution('3 3') == 'Impossible'\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n9 9 9') == 'Possible'\nassert solution('4 5\\n8 8 8') == 'Impossible'\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"1 1\") == \"Possible\"\nassert solution(\"3 3\") == \"Impossible\"\nassert solution(\"3 2\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"tc????\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('coder') == 'atcoder'\nassert solution('?c??er') == 'atcoder'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'\n    'cbcttq??t??sss??sss??sss??sss??sss??sss??sss??sss??tq??t??t'"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?tc???\") == \"atcoder\"\n\"\"\"\n\nS = input()\nT = input()"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('cccc') == 'unrestorable'\n\nsolution()\n'''\nfrom typing import List"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"coder\") == \"atcoder\"\n\"\"\"\nimport string"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ctcoder') == 'atcoder'\n\"\"\"\n\nfrom typing import List, Optional, Tuple\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ctcoder\") == \"atcoder\"\nassert solution(\"coder\") == \"UNRESTORABLE\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 S \u0438 T, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u0438 \n\u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043e\u0434\u043d\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a S \u0438 T, \u043f\u0440\u0438\u0447\u0451\u043c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 T, \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 S.  \n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u0436\u0435 \u0441 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 S \u0438 T, \u043a\u0430\u0436\u0434\u0430\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a S \u0438 T, \u043f\u0440\u0438\u0447\u0451\u043c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 T, \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 S.\n\nSample Input 1:\nacbcf\nabcd\n\nSample Output 1:\nacbcf\n\nSample Input 2:\nacbc\nabdc\n\nSample Output 2:\nUNRESTORABLE\n\"\"\"\n\ns = input()\nt = input()\n\nfor char in t:\n    if char not in s:\n        print('UNRESTORABLE')\n        break\nelse:\n    print(s)\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nstdin = input().split(\"\\n\")\nr, g = stdin[0], stdin[1]\nwhile int(r) < 4500 or int(g) < 4500:\n    r = int(r) + int(g)\n    g = int(r) / 2\n    r = r / 2\nprint(r)\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2002\\n2017') == '2032'\nprint(solution(stdin))\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"200 200\") == \"200\"\nassert solution(\"1 2\") == \"1.5\"\nassert solution(\"1 100\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\"\n\nimport math\n\nr, g = map(int, input().split())\n\nprint(r * math.floor((g / r) + 1) - g)\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\nassert solution(\"assesses\") == 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\n\"\"\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\nassert solution(\"assesses\") == 1\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 1\nassert solution('aa') == 2\nassert solution('aaba') == 2\nassert solution('aabba') == 2\nassert solution('aaabbb') == 3\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100000000 10001 5') == 'AC'\nassert solution('100000000 500 3') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"100000000 500 3\"\n    ) == \"TLE\"\nassert solution(\n    \"100000000 50 3\"\n    ) == \"AC\"\nassert solution(\n    \"100000000 10001 5\"\n    ) == \"TLE\"\nassert solution(\n    \"19931568 1000000 6\"\n    ) == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 50 3''') == 'AC'\nassert solution('''100000000 10001 5''') == 'TLE'\nassert solution('''19931568 1000000 6''') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('100000000 10000 5\\n') == 'AC'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\n-------Solution--------\n\nm,n,t = map(int,stdin.split())"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 50 3''') == 'AC'\nassert solution('''100000000 10001 5''') == 'TLE'\nassert solution('''100000000 10000 5''') == 'AC'\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\"\n\na, b, c, d = [int(i) for i in input().split()]\ne, f, g, h = [int(i) for i in input().split()]\ni, j, k, l = [int(i) for i in input().split()]\nm, n, o, p = [int(i) for i in input().split()]\nq, r, s, t = [int(i) for i in input().split()]\n\nprint(a, b, c, d)\nprint(e, f, g, h)\nprint(i, j, k, l)\nprint(m, n, o, p)\nprint(q, r, s, t)"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\n\n\"\"\"\n\nimport unittest\nfrom numpy import array\nfrom typing import List\n\nfrom day19_2 import solution\n\nSAMPLE_INPUT_1 = array([2, 0, 0, 2, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\nSAMPLE_OUTPUT_1 = array([4, 0, 0, 0, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\n\nSAMPLE_INPUT_2 = array([2, 0, 0, 2, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\nSAMPLE_OUTPUT_2 = array([0, 0, 0, 4, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\n\nSAMPLE_INPUT_3 = array([2, 0, 0, 2, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\nSAMPLE_OUTPUT_3 = array([0, 0, 0, 0, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\n\nSAMPLE_INPUT_4 = array([2, 0, 0, 2, 4, 8, 2, 64, 32, 4, 2, 0, 0, 0, 0, 0])\nSAMPLE_OUTPUT_4 = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\nSAMPLE_INPUT_5 = array([2, 2, 4, 8, 4, 2, 16, 16, 16, 32, 32, 64, 32, 64, 64, 32])\nSAMPLE_OUTPUT_5 = array([2, 4, 8, 16, 16, 16, 32, 32, 32, 64, 64, 0, 0, 0, 0])\n\n\nclass TestDay19_2(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(solution(SAMPLE_INPUT_1.tostring().decode('ascii')), SAMPLE_OUTPUT_1.tostring().decode('ascii'))\n\n    def test_case_2(self):\n        self.assertEqual(solution(SAMPLE_INPUT_2.tostring().decode('ascii')), SAMPLE_OUTPUT_2.tostring().decode('ascii'))\n\n    def test_case_3(self):\n        self.assertEqual(solution(SAMPLE_INPUT_3.tostring().decode('ascii')), SAMPLE_OUTPUT_3.tostring().decode('ascii'))\n\n    def test_case_4(self):\n        self.assertEqual(solution(SAMPLE_INPUT_4.tostring().decode('ascii')), SAMPLE_OUTPUT_4.tostring().decode('ascii'))\n\n    def test_case_5(self):\n        self."
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4') == '0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 0 0\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\nprint(solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\"))"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '8 4 0 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\n\n-----Problem-----\nYou are given a game state of a 2048 puzzle board. The board is composed of a 2D array of integers. Each element of the array is either 0, 2, 4, 8, 16, 32, or 64. The values are powers of two. A value of 2 means the cell is empty. The rest of the values in the array are the tiles that have been placed on the board. A move can be made by swapping two tiles on the board. There are multiple valid ways to make a move that will maintain the validity of the game state. Please help us find the minimum number of moves that will allow the player to make a valid move.\n\n-----Solution-----\nThe answer to this problem should be a single line of output, a single integer denoting the minimum number of moves that the player will be able to make.\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n\"\"\"\n) == \"\"\"\n4 0 0 0\n8 16 8 2\n2 64 32 4\n0 0 2048 64\n\"\"\"\nassert solution(\n\"\"\"\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n\"\"\"\n) == \"\"\"\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\n\"\"\"\nassert solution(\n\"\"\"\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\n\"\"\"\n) == \"\"\"\n0 0 0 4\n8 16 8 2\n2 64 32 4\n0 0 2048 64\n\"\"\"\n\nprint(\"Solution is correct!\")\n\n\"\"\"\n2048 is a single-player puzzle game created by Gabriele Cirulli1. It is played on a $4 \\times 4$ grid that contains integers $\\geq 2$ that are powers of 2. The player can use a keyboard arrow key (left/up/right/down) to move all the tiles simultaneously. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move. Please observe this merging behavior carefully in all Sample Inputs and Outputs.\n\n-----Input-----\nThe input is always a valid game state of a 2048 puzzle. The first four lines of input, that each contains four integers, describe the 16 integers in the $4 \\times 4$ grid of 2048 puzzle. The $j$-th integer in the $i$-th line denotes the content of the cell located at the $i$-th row and the $j$-th cell. For this problem, all integers in the input will be either {0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024}. Integer 0 means an empty cell.\n\nThe fifth line of input contains an integer 0, 1, 2, or 3 that denotes a left, up, right, or down move executed by the player, respectively.\n\n-----Output-----\nOutput four lines with four integers each. Two integers in a line must be separated by a single space. This describes the new state of the $4 \\times 4$ grid of 2048 puzzle. Again, integer 0 means an empty cell. Note that in this problem, you can ignore the part from the 2048 puzzle where it introduces a new random tile with a value of either 2 or 4 in an empty spot of the board at the start of a new turn.\n\n-----Examples-----\nSample Input 1:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\nSample Output 1:\n4 0 0 0\n4 16 8 2\n2 64 32 4\n2048 64 0 0\n\nSample Input 2:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\nSample Output 2:\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 3:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 3:\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 4:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 4:\n0 0 0 4\n4 16 8 2\n0 0 2048 64\n\nSample Input 5:\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 5:\n4 0 0 0\n8 16 8 2\n0 0 2048 64\n\nSample Input 6:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n4\nSample Output 6:\n0 0 0 4\n0 0 2048 64\n\"\"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"CH4 10\") == \"0\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"3\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '0'\nassert solution('C2H6 10') == '6'\nassert solution('C3H8') == '6'\nassert solution('CH3OH 1') == '1'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(H2OC100H) == \"0\"\nassert solution(C2H6 10) == \"6\"\nassert solution(CH3OH 1) == \"1\"\nassert solution(C6H6OCH2O 10) == \"12\"\nassert solution(C6H14 10) == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '0'\nassert solution('C2H6 10') == '6'\nassert solution('C3H8') == '1'\nassert solution('CH3OH 1') == '1'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H2O\") == \"0\"\nassert solution(\"C2H6O3\") == \"6\"\nassert solution(\"CH3OH\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n\nimport re\n\nregex = r'^(?=.*[A-Z]{3})(?=.*[A-Z]{2})(?=.*[A-Z])(?=.*[A-Z]{1})(?=.*[0-9]{3})(?=.*[0-9]{2})(?=.*[0-9])(?=.*[a-z]{3})(?=.*[a-z]{2})(?=.*[a-z])(?=.*[a-z]{1})(?=.*[0-9]{4})(?=.*[0-9]{3})(?=.*[0-9]{2})(?=.*[0-9])(?=.*[a-z]{4})(?=.*[a-z]{3})(?=.*[a-z]{2})(?=.*[a-z]{1})(?=.*[A-Z])(?=.*[a-z])(?=.*[A-Z]{1})(?=.*[0-9])(?=.*[A-Z]{1})(?=.*[a-z]{1})$'"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == 'PASS'\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == 'FAIL'\nassert solution(\"ABC HAPPYBIRTHDAY\") == 'FAIL'\nassert solution(\"SECRET SOMECHORESARETOUGH\") == 'PASS'\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n([] [] ]') == '] 7'\nassert solution('13\\n(([] [[]] ())') == 'ok so far'\nassert solution('21\\n[ { { () () () () } ]') == '] 20'\nassert solution('27\\n[ { [[()]] (({})) } ] () {}') == 'ok so far'\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, Optional\n\n\nclass InvalidDelimiter(Exception):\n    pass\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == expected_output"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[ { { () () () } ]') == ']'\nassert solution('[ { ((())) } ]') == 'ok so far'\nassert solution('[ { ((())) } ] () {}') == '] 20'\nassert solution('[ { ((())) } ] () {}') == '] 20'\nassert solution('[ { ((())) } ] () {}') == '] 20'\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"([] [] ]\") == ']'\nassert solution(\"(()\") == ')'\nassert solution(\"(()[]{}())\") == ')'\nassert solution(\"([]()\") == ']'\nassert solution(\"(()[[]{})\") == ']'\n\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('([] [] ]') == '] 0'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == 'ok so far'\nassert solution('[ { [[()]] (({})) } ] () {}') == '] 20'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\nassert solution('27') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\n\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"([{[{(()]}]}] ({}))\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\n'''"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('[ { { () () () () } ]') == ']'\nassert solution('(() (() ((() ())))') == ')'\nassert solution('(() (() ((() ())))') == ')'\nassert solution('(() (() ((() ())))') == ')'\nassert solution('(() (() ((() ())))') == ')'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Fair Game'\nassert solution('apple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('apple\\nextra\\napple\\n') == 'Player 1 lost'\nassert solution('apple\\nneat\\napple\\n') == 'Player 2 lost'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''2\napple\nneat\n''') == 'Player 2 lost'\nprint('Success')\n\n----------#----------#----------#----------#----------#----------#----------#"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\neat\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\n\nprint('Success')\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5\napple\near\nreal\nletters\nstyle\n\"\"\"\n) == 'Fair Game'\n\nassert solution(\n\"\"\"\n3\napple\nextra\napple\n\"\"\"\n) == 'Player 1 lost'\n\nassert solution(\n\"\"\"\n2\napple\nneat\n\"\"\"\n) == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\napple\near''') == 'Fair Game'\nassert solution('''5\napple\near\nreal\nletters\nstyle''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple''') == 'Player 1 lost'\nassert solution('''2\napple\nneat''') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\napple\\neat\\napple') == 'Player 2 lost'\nassert solution('2\\napple\\neat\\napple') == 'Fair Game'\nassert solution('3\\napple\\neat\\napple') == 'Player 1 lost'"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\nassert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\napple\n\"\"\") == \"Player 2 lost\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\nprint(solution(\"1000\\n*\\n100\"))\nprint(solution(\"10000\\n+\\n10\"))\nprint(solution(\"10\\n+\\n1000\"))\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"1010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000*100') == '1000000'\nassert solution('10000+10') == '1010'\nassert solution('100000000') == '100000000'\nassert solution('1000*1000') == '10000000000'"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000*\", \"*\", \"100\") == \"100000\"\nassert solution(\"10\", \"*\", \"1000\") == \"1010\"\nassert solution(\"10\", \"+\", \"1000\") == \"1010\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000*100') == '100000'\nassert solution('10000+10') == '1010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '1010'\nassert solution('10\\n+\\n1000') == '1010'\n\nimport re\n\na = re.sub('\\n[0-9]\\n\\s*[+*]\\n\\s*[0-9]', '', stdin)"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\"\nfrom collections import deque\nfrom functools import reduce\nfrom operator import add\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 * 100 + 10\") == \"100010\"\nassert solution(\"10000 + 1000\") == \"10100\"\nassert solution(\"100 + 10\") == \"110\"\n\"\"\"\n\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, A, B, C):\n        if C == '+':\n            return str(int(A) + int(B))\n        else:\n            return str(int(A) * int(B))\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 * 10\") == \"10000\"\nassert solution(\"1000 + 10\") == \"1010\"\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\n\nimport sys\nfrom math import ceil\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\nimport math"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(8) == 3\nassert solution(52) == 8\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n-----\n\"\"\"\n\nimport string\nimport itertools\n\nvowels = {'a', 'e', 'i', 'o', 'u'}\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\nprint(\"All tests passed.\")\n\n----"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\nassert solution('anhxoxe xauhkx') == 'anhxoxexauhkx'\n\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint('Passed all tests...')\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nprint(\"Passed all tests\")"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nnums = list(map(int, input().split()))\nk = int(input())"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10\") == \"0\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nprint('all tests passed')\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0\") == \"1\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0\") == \"0\"\n\nprint(\"Success\")\n\n----"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\n\"\"\"\n\nnums = [int(x) for x in stdin.split()]\n\nc = 0\nfor i in range(len(nums)):\n    c += (10 - i) * nums[i]\n\nc = 1\nfor i in range(1, len(nums)):\n    c *= nums[i]\n\nprint(c)"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 0') == '0 0'\nassert solution('7 1') == '2 570'\nassert solution('7 2') == '0 0'"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n7 0\n30 270 995 996 997 998 999\n\"\"\"\n) == \"2 330\"\nprint(solution(\n\"\"\"\n7 1\n30 270 995 996 997 998 999\n\"\"\"\n))\nassert solution(\n\"\"\"\n7 2\n30 270 995 996 997 998 999\n\"\"\"\n) == \"0 0\"\nprint(solution(\n\"\"\"\n7 2\n30 270 995 996 997 998 999\n\"\"\"\n))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n\nimport sys\n\nN, p = [int(x) for x in sys.stdin.readline().split()]\nP = [int(x) for x in sys.stdin.readline().split()]\n\nres = [0] * (N + 1)\nfor i in range(1, N + 1):\n    if i!= p:\n        res[i] = res[i - 1] + P[i - 1]\n    else:\n        res[i] = P[i - 1]\nprint(res[N], res[:N])\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import permutations"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\nprint(solution(stdin))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nassert solution('a') == 1\nassert solution('') == 1\n\nprint('Success')\n\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaabba\") == 2\nassert solution(\"abcdef\") == 6\nassert solution(\"abcd\") == 4\n\nimport sys\n\n_input = sys.stdin.readlines()\n_input = [x.strip() for x in _input]\n_input = _input[0]\n\nprint(solution(_input))"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\nprint('all tests passed')\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaaaaaaa') == 1\nassert solution('abbaabba') == 2\nassert solution('abcdef') == 6\nassert solution('abcdefgh') == 9\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\nprint('Success')\n\n\"\"\"\nimport math"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == '2\\n1 2\\n'\n\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\n\"\"\"\n\nfrom typing import List, Optional, Dict\n\nMIN_PRIORITY = 0\nMAX_PRIORITY = 1000\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\n\"\"\"\n\nimport numpy as np\n\n\"\"\"\nGeneral idea:\n1. Make a dictionary from the given points\n2. Calculate a list of all distances between the points\n3. Calculate the number of \"speed\" possibilities, which is the max number of points that can be skipped\n4. Sort the list of distances by increasing value\n5. Print the result\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\"\n\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\"\n\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\"\n\nprint('Success')"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5551212') == 1\nassert solution('5549876') == 0\nassert solution('55543213') == 0\n\nprint('Hooray!')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(555) == 1\nassert solution(5551212) == 1\nassert solution(5551212) == 1\nassert solution(5551212) == 1\nassert solution(5551212) == 1\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"100/2\") == \"50/1\"\nassert solution(\"0/1\") == \"0/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"10/3\") == \"10/3\"\nassert solution(\"-23/7\") == \"-23/7\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n\nimport unittest\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\nC E G\nD F# A\n''') == 'Transposition'\nassert solution('''\n7\nC C G G A A G\nC C F F D# D# F\n''') == 'Inversion'\nassert solution('''\n7\nA B C D E F G\nG F E D C B A\n''') == 'Retrograde'\n\"\"\"\n\nimport itertools\nimport operator\nfrom collections import deque"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\n\"\"\"\n\nimport sys\nimport logging\nfrom itertools import permutations\n\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\na = sys.stdin.readline().strip()\na = [x for x in a.split(' ')]\nprint(a)\n\ncount_a = Counter(a)\n\nb = sys.stdin.readline().strip()\nb = [x for x in b.split(' ')]\ncount_b = Counter(b)"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\n\nl = int(stdin.readline().strip())\nfirst = list(stdin.readline().strip().split())\nsecond = list(stdin.readline().strip().split())\n\nfirst.sort()\nsecond.sort()"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\nassert solution('2\\nC D E F\\nG A B') == 'Nonsense'\n\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == 'Transposition'\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == 'Inversion'\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == 'Retrograde'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Nonsense\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\n\nfrom itertools import chain\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nassert solution('She is ready for the test') == 'Shisiray laro ve the testuh'\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''I love ba-na-na''') == 'Gah kove bababa'\nassert solution('''Cat-a-pil-lar''') == 'Catacillar'\nassert solution('''Co-ding is the best''') == 'Cociccah gs the bestuh'\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nprint(solution(stdin))\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('I') == 'I'\nassert solution('love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nprint('Passed')\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nassert solution(\"The cake is a lie!\") == \"The ccie is a lghl!\"\n\"\"\"\n\nimport re\n\nimport sys\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nprint('all tests passed')\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nprint('The solution is correct!')\n\n\"\"\"\n\n\n\nimport re\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"I love ba-na-na\"\n) == \"Gah kove bababa\"\nassert solution(\n    \"Cat-a-pil-lar\"\n) == \"Catacillar\"\nassert solution(\n    \"Co-ding is the best\"\n) == \"Cociccah gs the bestuh\"\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nprint(\"All tests passed.\")\n\n----------------------------------------------------------------------\n\n###\n\nGiven a list of positive numbers, the task is to generate the series of numbers where each number is the sum of the two numbers just before it.\n\nInput Format:\nThe first and the only line of input contains the number N, the number of values.\nThe next line contains N space-separated integers.\n\nOutput Format:\nPrint the desired output in a single line.\n\nSample Input 1:\n5\n1 3 4 10 12\nSample Output 1:\n3 10 13 17 24\n\nSample Input 2:\n7\n1 1 1 1 1 1 1\nSample Output 2:\n1 1 2 3 5 8 13\n\n\nimport sys\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == 6\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\nprint('Success')\n\n------"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '1'\n) == '6'\nassert solution(\n    '4'\n) == '16'\nassert solution(\n    '3'\n) == '14'\nprint('All tests passed.')\n\n-----Explanation-----\nSample Test 1\nThe cost of a box with a $1$-by-$1$-by-$1$-by-$1$ surface area is $6$.\n\nSample Test 2\nThe cost of a box with a $4$-by-$4$-by-$4$-by-$4$ surface area is $16$.\n\nSample Test 3\nThe cost of a box with a $3$-by-$3$-by-$3$-by-$3$ surface area is $14$.\n'''\n\nimport math"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nprint('Test pass.')\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\nprint(\"Test complete.\")\n\"\"\"\n\nimport sys\nfrom math import sqrt, ceil\nfrom typing import List\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\nprint(\"Passed all tests...\")\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\n\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\n\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n\nassert solution('''5 10\n1 1 1 1 1\n''') == '0'\n\nprint('Success')"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"2\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"4\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"3\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"2\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\n\n\"\"\"\n\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5 10\\n1 7 1 9 7\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1\\n2\\n0 1 1\\n1 0 0\\n\") == \"impossible\"\nassert solution(\"1\\n2\\n0 1 1\\n1 0 1\\n\") == \"possible\"\nassert solution(\"1\\n2\\n0 1 1\\n1 0 2\\n\") == \"impossible\"\nassert solution(\"1\\n2\\n0 1 1\\n1 0 2\\n\") == \"impossible\"\n\nprint(solution(\"1\\n2\\n0 1 1\\n1 0 2\\n\"))\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 2\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1 2\\n0 1 1\\n1 0 1\\n') == 'impossible'\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"impossible\"\nassert solution(\"1 2\\n1 0 1\\n1 1 1\") == \"impossible\"\nassert solution(\"1 2\\n1 2 1\\n0 1 0\") == \"impossible\"\nassert solution(\"1 2\\n0 0 1\\n0 0 1\") == \"possible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\\n\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"0 1 1\\n1 0 0\\n\") == \"impossible\"\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n0 1 1\\n1 0 0\\n0 1 0') == 'possible'\n\"\"\"\n\n\"\"\"\nInput\n2 1\n0 0 0\n0 0 0\nOutput\nimpossible\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0 1 1\\n0 0 0\\n1 1 1\\n0 2 2\\n2 1 1\\n0 3 2\\n1 2 1\\n0 0 0\\n1 0 1\") == \"possible\"\nassert solution(\"4 2\\n0 1 1\\n0 0 0\\n1 1 1\\n0 2 2\\n2 1 1\\n0 0 0\\n1 0 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\nassert solution(\"20 20\") == \"0.085\"\nassert solution(\"100 100\") == \"0.01\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\nassert solution('1 1000') == '499.5'\nassert solution('5 100') == '95.0'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\nassert solution('1 100\\n') == '1'\nassert solution('2 100\\n') == '1'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.857142857142857'\nassert solution('6 2') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\"\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0\\n') == '0 0'\nassert solution('4 2 7\\n') == '1 4'\nassert solution('3 0 0\\n') == '1 6'\n\"\"\"\n\nH, N, M = list(map(int, input().strip().split()))\n\nH *= 2\nN *= 2\nM *= 4"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == (0, 0)\nassert solution('1 1 0') == (0, 0)\nassert solution('1 1 1') == (1, 0)\nassert solution('4 2 7') == (1, 4)\nassert solution('3 0 0') == (1, 6)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 1, 0) == (0, 0)\nassert solution(4, 2, 7) == (1, 4)\nassert solution(3, 0, 0) == (1, 6)\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nassert solution(\"10 10 9 10 10 10\") == \"1 2\"\nassert solution(\"7 7 7 7 7 7\") == \"0 0\"\n\"\"\"\n\nfrom functools import reduce\n\nfrom _int_solutions import get_input\n\nINPUT_STR = get_input()\nH, N, M = INPUT_STR.split(\" \")\nH, N, M = int(H), int(N), int(M)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 7\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BWBWBWBW\") == 1\nassert solution(\"BWBWBWBW\") == 0\nassert solution(\"BWBWBWBW\") == 0\nassert solution(\"BWBWBWBW\") == 0\nassert solution(\"BWBWBWBW\") == 0\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WWWBBWWBWWWW') == '1'\nassert solution('BWBWBWBW') == '1'\nassert solution('BWBWBWBW') == '0'\nassert solution('WWBWWWWBWW') == '0'\nassert solution('WWWBBWBBW') == '1'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWBBWBWWWBBWBWWBWWBWWBWWBWBBWBWWBWBWWBWBBWBWWBWWBWWBWWBWWBBWBWWBWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWBWWB"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == '1'\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWWWWWWWWWBBWWWWWWWWWWBB\") == 1\nassert solution(\"WBBBBBBBBBBBBBBBBBBBBBBBBB\") == 1\nassert solution(\"WWWWBBBBBBWWWWBBBWWWWWWWW\") == 1\nassert solution(\"WBBBBBBWWWWBBBWWWWWWWWWWW\") == 1\nassert solution(\"WBBBWWWWBBBWWBWWWWWWWWWWW\") == 0\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWWB\\nBWBB\\nWBBW\\nWBWW') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n') == '1'\nassert solution('4\\nBWWB\\nWBWB\\nWBBW\\nWBWW\\n') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB\\n') == '0'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\nassert solution(\"6\\nBWWWWB\\nWBWBWW\\nWBBWWW\\nBBWBWW\\nWBBWWW\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 6 7\") == \"2 5\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 3\") == \"1 3\"\nassert solution(\"1 2 1 3\") == \"2 3\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\") == \"\"\"2 1\n3 4\n3 2\n1 2\n3 7\"\"\"\n\nprint(solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\"), \"\"\"2 1\n3 4\n3 2\n1 2\n3 7\"\"\")\n\nassert solution(\"\"\"2\n1 1\n1 2\"\"\") == \"1 2\"\n\nassert solution(\"\"\"1\n1 1\n1 2\"\"\") == \"1 2\"\n\nprint('Success')"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"3 2\\n3 7\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 2 6 1 5') == '3 4 3 5'\nassert solution('3 2 1 5 4') == '3 2 2 5'\nassert solution('3 4 5 6 8 7 10 9') == '3 4 5 6 8 9'\nassert solution('4 4 10 1 1 5') == '4 4 10 1 1'\nassert solution('4 1 1 4 5') == '4 1 1 4 5'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\nassert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"3 7\\n3 2\\n1 2\\n1 4\\n3 7\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3 2 1\\n6 7 4 3\\n3 4 1 2\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\") == \"\"\"\n2 1\n3 4\n3 2\n1 2\n3 7\n\"\"\"\nprint(solution(\"\"\"\n5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\"))\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[3, 2, 0, -4]\") == True\nassert solution(\"[1, 2]\") == True\nassert solution(\"[1]\") == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\n\"\"\"\nfrom collections import deque\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n        while fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast is None:\n                return False\n            if fast == slow:\n                return True\n\n\nclass Solution2:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        visited = set()\n        while head is not None:\n            if head in visited:\n                return True\n            visited.add(head)\n            head = head.next\n        return False\n\n\nclass Solution3:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        slow = head\n        fast = head\n\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n\nclass Solution4:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        slow = head\n        fast = head\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n\nclass Solution5:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        slow = head\n        fast = head\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n\nclass Solution6:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        visited = set()\n        while head is not None:\n            if head in visited:\n                return True\n            visited.add(head)\n            head = head.next\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == False\nassert solution(\"[1,2,3,4,5,6]\") == False\n\"\"\"\nfrom typing import List\n\n\"\"\"\nDefinition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\"\"\"\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow is fast:\n                return True\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[3,2,0,-4]\") == \"true\"\nassert solution(\"[1,2]\") == \"true\"\nassert solution(\"[1]\") == \"false\"\nassert solution(\"[3,2,0,-4,4]\") == \"true\"\nassert solution(\"[3,2,0,-4,4]\") == \"true\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([1, 2, 3]) == False\nassert solution([1, 2, 3, 4]) == False\nassert solution([1, 2, 3, 1]) == True\nassert solution([1, 2, 1]) == True\nassert solution([1, 2, 1, 3, 4]) == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3,2,0,-4', 1) == True\nassert solution('1,2', 0) == True\nassert solution('1', -1) == False\nassert solution('1', 0) == True\nassert solution('1', 1) == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 0 -4\") == True\nassert solution(\"1 2\") == True\nassert solution(\"1\") == True\nassert solution(\"1 -1\") == False\n\"\"\"\nimport collections\n\n\nclass Node:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1,2') == True\nassert solution('2,0') == True\nassert solution('3,2,0,-4') == True\nassert solution('1,2,0') == True\nassert solution('1') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n0\\n-4\\n1\\n\") == True\nassert solution(\"1\\n2\\n\") == True\nassert solution(\"1\\n\") == True\nassert solution(\"1\") == True\nassert solution(\"1\\n2\") == False\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        nodes = defaultdict(ListNode)\n\n        while head:\n            if nodes[head] is not None:\n                return True\n            else:\n                nodes[head] = ListNode()\n            head = head.next\n\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == True\nassert solution(\"[1,1]\") == False\nassert solution(\"[1,2,2,2]\") == True\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7, 7, 7, 7') == (0, 1)\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            if target - nums[i] in nums:\n                return [i, nums.index(target - nums[i])]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 7 11 15\") == [0, 1]\n\"\"\"\n\nimport pytest\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 7 11 15') == [0, 1]\n'''\n\n'''\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n'''\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        # O(1) space complexity\n        # return sum(set(nums))*2 - sum(nums)\n\n        # O(n) space complexity\n        a = 0\n        for i in nums:\n            a ^= i\n        return a\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd\\nefgh\\nijkl\\n') == 'ijkl', 'Not found'\nassert solution('1\\n1\\n1\\n') == '0 0', 'Not found'\nassert solution('123\\n456\\n789\\n') == '0 1', 'Not found'\nassert solution('1\\n2\\n3\\n4') == '1 3', 'Not found'\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n7\\n11\\n15') == '0 1'\n\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(9) == [0, 1]\nassert solution(2) == [0, 1]\nassert solution(22) == [1, 0]\nassert solution(0) == [0, 1]\nassert solution(100) == []\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 7 11 15\\n9\") == \"0 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2, 7, 11, 15) == [0, 1]\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 7 11 15') == [0, 1]\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '4'\nassert solution('8') == '7'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"3\") == 1\nassert solution(\"4\") == 1\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == '0'\nassert solution(\"4\\n\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '0'\nassert solution('11') == '0'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"6\\n\") == \"5\"\nassert solution(\"7\\n\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('1\\n0') == 'impossible'"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\n\"\"\"\n\nfrom math import log2, ceil\nimport numpy as np"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 1\\n3 7\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('123 123 123\\n') == 'impossible'\nassert solution('1 1 1 1\\n') == 'impossible'\nassert solution('2 2 2 2\\n') == 'impossible'\nassert solution('1 2 1 1\\n') == '4'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == 'impossible'\nassert solution('2\\n1 2 1') == '4'\nassert solution('2\\n1 2 1\\n1 2 1') == '4'\nassert solution('3\\n7 7 7 7\\n7 7 7 7') == 'impossible'\nassert solution('5\\n1 2 1 3 4 2\\n2 1 3 4 2 1\\n3 4 2 1 4 3\\n4 3 2 1 3 4\\n3 2 4 1 3 4') == '7'\n'''"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\n\"\"\"\n\nimport numpy as np\n\nN = int(input())\nA = list(map(int, input().split()))"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 2 2 1\n''') == '4'\nprint('Test pass.')\n\n-----Solution-----\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\n\"\"\"\n\nimport math\n\na, b = list(map(int, stdin.split()))\n\ns = 0\n\nfor i in range(b):\n    s += int(math.pow(10, i))\n\nprint(s - a)"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''184 1''') == '180'\nassert solution('''123450995 1''') == '123451000'\n'''\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    if a % 10 == 0:\n        print(a)\n    else:\n        if a // 10 == b:\n            print(a)\n        else:\n            print(a - b * 10 + a % 10)\n'''\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"184 1\") == \"180\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\nprint(solution(\"184 1\"))\nprint(solution(\"123450995 1\"))\n\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123450995 1\") == \"123450990\"\nassert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 2\") == \"123451000\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\n--- Tests ---\npytest -v test_task2.py\n---\n\"\"\"\n\nfrom math import log10\nfrom typing import List\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n1 2\\n2 3') == '0.0'\nassert solution('3\\n1 1\\n2 2') == '0.0'\nassert solution('3\\n3 1\\n1 1') == '0.0'\n\"\"\"\nimport sys\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"0 1\\n1 0\\n1 1\") == \"0.000000\"\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\nassert solution('2\\n-1 -1\\n1 -1') == '0.000000'\nassert solution('2\\n0 -1\\n1 -1') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\n\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2\\n1 2 2\\n3 2 3 4\\n3 4 2 1\\n') == '1 2 4'\n\n\"\"\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"examples/0.in\").read()) == open(\"examples/0.out\").read()\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n\n'''"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4') == ''\n\"\"\"\n\nimport sys\nimport collections\nfrom typing import List, Tuple, Set\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import Counter\nfrom itertools import combinations\nfrom itertools import chain\nfrom itertools import islice\nimport typing as t"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 3 3\") == \"1\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3 4 5) == 60\nassert solution(2 2 2) == 8"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\nassert solution('2 3 4') == '24'\nassert solution('5 4 3') == '120'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('3 4 5') == 60\nassert solution('1 1 1') == 1\nassert solution('2 2 2') == 8\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4 5''') == '60'\nassert solution('''2 2 2''') == '8'\nassert solution('''1 1 1''') == '1'\nassert solution('''1 1 2''') == '3'\nassert solution('''1 2 1''') == '3'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('7 6 4') == '54'\nassert solution('5 5 5') == '10'\n\nprint('Success')\n\nTest Cases\nInput 1:\n3 4 5\nOutput 1:\n60\n\nInput 2:\n2 2 2\nOutput 2:\n8\n\nInput 3:\n7 6 4\nOutput 3:\n54\n\nInput 4:\n5 5 5\nOutput 4:\n10\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n\n\"\"\"\nfor each in nums:\n    if nums.count(each) == 1:\n        answer += 1\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"4 2 1\") == \"12\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 1 2') == '2.5'\n\nSolution:\nb=list(map(int,stdin.split()))\nd={0:0,1:0,2:0,3:0,4:0,5:0}\nfor i in range(0,b[0]):\n    d[b[i+1]]+=1\nprint(d[0]+d[1]*2+d[2]*3+d[3]*4+d[4]*5)\nprint('%.3f' % (d[0]+d[1]*2+d[2]*3+d[3]*4+d[4]*5)/b[0])\n\n'''\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n3 0 2') == '1.6666667'\nassert solution('3\\n1 -1 4') == '2.5'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().split()\n\ns = [int(i) for i in s]\nprint(sum([i + (0 if i == -1 else 1) for i in s]) / sum(s))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 0 2\\n') == '1.6666666666666667'\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\nassert solution(\"4\\n0 1 2 3 4\") == \"0.5000\"\nassert solution(\"5\\n0 1 1 1 1\") == \"0.8333\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"1.0000\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\nassert solution('3\\n1 -1 4') == '2.5'\nassert solution('3\\n-1 4') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\nprint(solution(input()))"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\nprint('The local tests are done. Click on \"Check\" for more details.')\n\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3 0 2') == 1.6666666666666667\nassert solution('3\\n1 -1 4') == 2.5\nassert solution('2\\n1 0 4') == 2.5\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1 2\\n') == '1.6666666666666667'\n\"\"\"\nimport math\n\nimport math\n\nstdin = input('Input: ')\n\nn = int(stdin.split('\\n')[0])\nbases = list(map(int, stdin.split('\\n')[1].split()))\n\nc = 0\n\nfor i in bases:\n    if i < 0:\n        c += 0\n    elif i == 1:\n        c += 1\n    elif i == 2:\n        c += 2\n    elif i == 3:\n        c += 3\n    elif i == 4:\n        c += 4\n\nc = c / 3\nprint(c)\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\n\"\"\"\n\nN, K = stdin.split(' ')\nN, K = int(N), int(K)"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''15 12''') == '''7'''\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 3''') == '6'\n\"\"\"\n\nn, k = map(int, input().split())\ni = 0\nfor i in range(1, n):\n    if (n % i == 0):\n        i += 1\n        if i == k:\n            print(n // i)\n            break\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n6\\n7\\n7\\n7\\n7\\n7') == '6'\nassert solution('15 12\\n7\\n13\\n17\\n19\\n23\\n29\\n31\\n37\\n41\\n43\\n47\\n53\\n59\\n61\\n67\\n71\\n73\\n79\\n83\\n89\\n97') == '7'\nprint('The local tests are done.')\n\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n2 6 3 9 5 7 1') == '6'\nassert solution('15 12\\n5 7 1 2 9 10 11 17 19 13 14 15 16') == '7'\n\"\"\"\n\nN, K = map(int, input().split())\nP = 2\nwhile K!= 0:\n    K -= 1\n    if K % N == 0:\n        P += N\n    else:\n        P += K % N\nprint(P)\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == '6'\nassert solution(\"15 12\") == '7'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '2'\nassert solution('2\\n1') == '2'\nassert solution('3\\n1') == '3'\nassert solution('4\\n1') == '5'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\n'''\nfrom collections import deque"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"6\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == '1'\nassert solution(\"198765 198769\") == '0'\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123864 123865\") == '1'\nassert solution(\"198765 198769\") == '0'\n\nimport sys"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n''') == '0.5'\n\nprint(solution(stdin))\n\n\"\"\"\n\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0443\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u043d\u0430\u043b\u0438\u0437, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0447\u0430\u0441\u0442\u043e\u0442. \u041f\u043e\u043c\u0438\u043c\u043e \u044d\u0442\u043e\u0433\u043e \u0432 \u0442\u0435\u043e\u0440\u0438\u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043d\u044b\u0445 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432, \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043f\u0440\u0438 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u042d\u0442\u043e\u0442 \u0430\u043d\u0430\u043b\u0438\u0437 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438.\n\n\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n\n\u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0451 \u0432 \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u0433\u043d\u0430\u043b.\n\n\u041f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0438\u043a\u0441\u0435\u043b\u044e. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0435\u043b\u044c\u0442\u044b, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c. \u0414\u0430\u043b\u044c\u0448\u0435 \u043c\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0432 \u044d\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u043d\u0430\u0448\u0435\u043c\u0438 \u0446\u0435\u043b\u0435\u0432\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430\u043c\u0438.\n\n\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u00ab+\u00bb, \u00ab-\u00bb \u0438 \u00ab0\u00bb. \u0414\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0443 \u0447\u0430\u0441\u0442\u043e\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435. \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0435 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u00ab+\u00bb, \u00ab-\u00bb \u0438 \u00ab0\u00bb \u0438 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. \u0414\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n5\n5 -3 0 0 5\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n-1.0\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0412 \u0442\u0430\u043a\u0438\u0445 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043a\u0430\u043f\u043b\u0438\u0432\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u00ab-1\u00bb, \u00ab0\u00bb \u0438 \u00ab+1\u00bb. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0438 assert.\n\nSample Input 2:\n3\n0 0 0\n\nSample Output 2:\n0.0\n\nSample Input 3:\n4\n0 0 0 0\n\nSample Output 3:\n0.0\n\nSample Input 4:\n6\n0 0 0 0 0 0\n\nSample Output 4:\n1.0\n\nSample Input 5:\n7\n0 0 0 0 0 0 0\n\nSample Output 5:\n1.0\n\nSample Input 6:\n7\n1 2 3 4 5 6 7\n\nSample Output 6:\n0.0\n\nSample Input 7:\n8\n1 0 0 0 0 0 1 0\n\nSample Output 7:\n0.5\n\nSample Input 8:\n9\n1 0 0 0 0 0 0 1 0 1\n\nSample Output 8:\n0.9\n\nSample Input 9:\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '0.5'\nassert solution('3') == '0.66666667'\n\"\"\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0.5\"\nassert solution(\"3\") == \"0.66666667\"\nassert solution(\"4\") == \"0.83333333\"\n\nprint('Success')\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2') == '0.5'\nassert solution('3\\n1') == '0.33333333'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n') == '0.500000\\n'\nassert solution('2\\n2\\n3\\n') == '0.66666667\\n'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('123') == 'impossible'\nassert solution('15') == 'impossible'\n\nSample Case:\nSample Input:\n\n15\n\nSample Output:\n\ntriple 15\ndouble 8\ndouble 8\n\nSample Input:\n\n18\n\nSample Output:\n\ntriple 17\ndouble 15\ndouble 15\n\nSample Input:\n\n1\n\nSample Output:\n\nimpossible\n\nSample Input:\n\n19\n\nSample Output:\n\ntriple 18\ndouble 17\nimpossible\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('1') == 'impossible'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nassert solution('2 4 6') == '24'\n\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nassert solution('5 2 3') == '120'\nassert solution('10 5 10') == '360'\n\nSolution:\n\n1. For a given h and v, we can find the length of each side of the cake.\n2. Calculate the largest of the four pieces of cake.\n3. The largest piece is the cake formed by the length of the shortest side and the sum of the two length of the longest sides.\n\nThe algorithm is:\n\n1. For each h and v, find the shortest side of the cake\n2. Calculate the length of the longest side of the cake\n3. The largest piece of cake is the cake formed by the shortest and longest side.\n\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 4 7''') == '168'\nassert solution('''5 2 2''') == '36'\n'''\n\n\n    h, v = map(int, stdin.split())\n\n    # h - \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0440\u0435\u0437\u0430\u043d\u0438\u044f \u043e\u0442 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043a\u0440\u0430\u044f \u0434\u043e \u043b\u0435\u0432\u043e\u0433\u043e \u0443\u0433\u043b\u0430 \u043a\u0440\u044b\u0448\u043a\u0438\n    # v - \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0440\u0435\u0437\u0430\u043d\u0438\u044f \u043e\u0442 \u043b\u0435\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u0434\u043e \u043b\u0435\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u043a\u0440\u044b\u0448\u043a\u0438\n    # \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0443\u0441\u043a\u043e\u0432 \u043a\u043e\u0441\u0442\u0438 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043a\u0440\u044b\u0448\u043a\u0443 \u043f\u043e \u0448\u0438\u0440\u0438\u043d\u0435 \u0438 \u0432\u044b\u0441\u043e\u0442\u0435\n    # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u044b\u0448\u043a\u0438\n    return h * v\n\n'''\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 7\") == \"168\"\nassert solution(\"10 4 7\") == \"144\"\nassert solution(\"5 2 2\") == \"36\"\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nprint(\"The solution is correct!\")"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\") == \"18\"\nassert solution(\"5 6 5\") == \"40\"\n\"\"\"\n\nn, h, v = map(int, stdin.split())"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\nassert solution(\"5 2 2\") == \"36\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 7\") == '168'\nprint(solution(\"10 4 7\"))\nassert solution(\"5 2 2\") == '36'\nprint(solution(\"5 2 2\"))"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == 7\n\"\"\"\n\nimport sys\n\n\"\"\"\nThe idea is to first sort the array according to the second column and then compare each element to its right neighbour. \nIf the current element is bigger than the next one, we update the maximum difference.\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n2 3\\n4 2\") == \"1\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == '1'\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 9\\n6 1\") == '6'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).read().splitlines()\n\nn = int(lines[0])\ns, b = [int(x) for x in lines[1].split()]"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10') == '7'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 10\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\n3 10\n5 8\n8 7\n3 10''') == '1'\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3''') == '1'\nassert solution('''1\n2\n3''') == '1'\n\n-----Explanation-----\nThe best possible difference between sourness and bitterness is calculated for each ingredient individually. The answer is the minimum difference for all ingredients.\n\nSample Input 1:\n\nIn this example, the difference is calculated for each ingredient individually and the minimum is the minimum difference for all ingredients.\n\nSample Output 2:\n\nIn this example, the difference is calculated for each ingredient individually and the minimum is the minimum difference for all ingredients.\n\n'''\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 8\\n5 8\") == 1\n\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"\n\"\"\"\n\n\"\"\"\nWe'll define a *saying* to be a string of length 1 or more consisting of non-whitespace characters, beginning and ending with whitespace.\n\nYour task is to write a program which takes an integer N as input and writes N saying sentences to standard output. For example, if the input is\n\n3\n\nthen you should output\n\nSimon says raise your right hand\n\nLower your right hand\n\nSimon says raise your left hand\n\nBecause the input is given in lines, you should not add any extra newlines to the output.\n\n----"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') =='raise your right hand.\\nraise your left hand.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.\\nraise your left hand.\\n'\n\nprint('Success')"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your left hand.\\n'\nprint('Success')\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.') =='smile.\\nsmile.\\nsmile.\\nsmile.'\n\nprint(solution('4\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.'))\n\n---"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\"smile.\n\"\"\"\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"raise your right hand.\nlower your right hand.\nraise your left hand.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1\nSimon says smile.\n''') == '''\nSimon says smile.\n'''\n\nassert solution('''\n1\nSimon says smile.\n''') == '''\nSimon says smile.\n'''\n\nassert solution('''\n1\nSimon says smile.\n''') == '''\nSimon says smile.\n'''\n\nassert solution('''\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == '''\nSimon says raise your right hand.\nSimon says raise your left hand.\n'''\n\nassert solution('''\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == '''\nSimon says raise your right hand.\n'''"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nSimon says raise your right hand.\\nLower your right hand.\") == \"raise your right hand.\\nraise your left hand.\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\\n\"\nassert solution(\"1\\nSimon says raise your right hand.\\n\") == \" raise your right hand.\\n\"\nassert solution(\"1\\nSimon says lower your right hand.\\n\") == \" \"\nassert solution(\"1\\nSimon says smile.\\n\") == \" smile.\\n\"\nassert solution(\"3\\nSimon says raise your right hand.\\n\") == \" raise your right hand.\\n\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"\nassert solution(\"3\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says smile.\\n\") == \"smile.\"\n\nimport sys; readline = sys.stdin.readline\nN = int(readline())\nfor _ in range(N):\n    command = readline().strip()\n    if command.startswith('Simon says'):\n        print(command[8:])"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"2\\nSimon says raise your right hand.\\n\") == \"raise your right hand.\"\nassert solution(\"3\\nSimon says lower your right hand.\\n\") == \"lower your right hand.\"\nassert solution(\"4\\nSimon says raise your left hand.\\n\") == \"raise your left hand.\"\n\"\"\"\nimport sys\nfrom collections import Counter\nfrom itertools import chain"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nfrom typing import Tuple\n\nINPUT_REGISTERS: Tuple[int] = (0, 0, 4, 6, 10, 12, 16, 18)\nMAX_REGISTER_VALUE: int = 19\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nprint(solution(\"0 0 4 6 10 12 16 18\"))\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0 0 4 6 10 12 16 18''') == '5'\nassert solution('''1 2 4 6 10 12 16 18''') == '0'\nassert solution('''4 6 6 8 10 10 12 18 19''') == '2'\n'''\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('1 1 1 1 1 1 1 1 1') == '0'\nassert solution('9 9 9 9 9 9 9 9 9') == '0'\nassert solution('1 2 1 2 2 1 2 1 2') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 4 6 10 12 16 18\") == \"5\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"5\"\nassert solution(\"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"0\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == 3\nassert solution('4 1\\nA\\nA\\nG\\nT') == 2\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n0 3'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ndnas = [stdin.readline().rstrip() for _ in range(n)]\n\nd = {'A': [1, 0], 'T': [0, 1], 'C': [0, 2], 'G': [2, 0]}\n\nun = float('inf')\nt = [0 for _ in range(n)]\n\nfor i in range(n):\n    u = [0 for _ in range(n)]\n    for j in range(i, n):\n        u[j] = d[dnas[i][j % k]][0] + d[dnas[i][j % k]][1] + \\\n               d[dnas[j][j % k]][0] + d[dnas[j][j % k]][1]\n    if u[-1] < un:\n        un = u[-1]\n        t = u\nprint(un)\n\nfor i in range(n):\n    print(t[i], i + 1)\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\nAA\\nAT') == '3'\nassert solution('4 2\\nAC\\nAA\\nAC\\nAG') == '2'\nassert solution('4 2\\nAT\\nAA\\nAC\\nAG') == '2'\nassert solution('2 2\\nAG\\nAC') == '1'\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(['AA', 'AT', 'TT', 'TC']) == 3\nassert solution(['A', 'A', 'G', 'T']) == 2\nassert solution(['CAGT', 'AA', 'GAT', 'AT', 'G', 'T', 'C', 'GAGGT']) == 6\nassert solution(['AGC', 'CT', 'CGT', 'GAA', 'GAT', 'G', 'GG', 'GGG', 'GTT', 'AACG', 'TCT', 'ATC', 'GAG', 'GTG', 'GTT', 'TTC', 'CACG', 'ATGG', 'AGT', 'CTG', 'GAGT', 'TTAG']) == 8\n\n\"\"\"\nimport sys\n\n\"\"\"\n    - Inputs\n        1. Number of DNA sequences to be analysed.\n        2. Number of characters of DNA sequence.\n        3. DNA sequences.\n    - Outputs:\n        1. Minimum likeliness of an evolutionary tree.\n        2. Edge weights of the evolutionary tree.\n\"\"\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\nassert solution('2 2\\nAA\\nAT') == '1\\n0 1'\nassert solution('2 2\\nAA\\nAA') == '0\\n0 1'\nassert solution('2 2\\nAT\\nAA') == '1\\n0 1'\nassert solution('2 2\\nAT\\nAT') == '0\\n0 1'\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == 3\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nprint(\"Test 1 OK\")\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\nprint(\"Test 2 OK\")\nprint(\"Tests passed\")"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2\nAA\nAT\nTT\nTC''') == '3'\nassert solution('''4 1\nA\nA\nG\nT''') == '2'\nassert solution('''3 2\nAA\nAT\nTT''') == '3'\nassert solution('''4 3\nAA\nAT\nTT\nTC''') == '4'\nassert solution('''3 3\nAA\nAT\nTT\nTC''') == '0'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('b') == '-1'\nassert solution('bbaab') == 'bba'\nassert solution('bbabab') == '-1'\nassert solution('abbbabb') == 'bbb'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == 'abba'\nassert solution('abbba') == 'abba'\nassert solution('bbbbb') == '-1'"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba') == 'abba'\nassert solution('abbab') == 'bab'\nassert solution('abb') == '-1'\nassert solution('bbab') == 'bab'\nassert solution('bba') == 'bba'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('bb') == 'b'\nassert solution('ab') == '-1'\nassert solution('a') == 'a'\nassert solution('ab') == '-1'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('bbbbbbbbbbbbbbbbbbbbbbb') == 'b'\nassert solution('abc') == -1\nassert solution('aabbccdddddd') == 'a'"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('bbbaa') == 'bba'\nassert solution('bbb') == '-1'\nassert solution('bbab') == 'bba'\nassert solution('bbabba') == 'bba'"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"abccc\") == \"ab\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n\nassert solution('abbaba') == 'aba'\nassert solution('abbab') == 'abb'\n\nassert solution('aaaaa') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('a') == 'a'\nassert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abc') == '-1'\n\nprint('Test finished')"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\nSample Case\n20 100\n2 3\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\nassert solution(\"20 10\") == \"Dr. Chaz needs 10 more piece[s] of chicken!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\nprint('Success')\n\n'''\nfrom typing import List"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\"\n\nn, m = list(map(int, input().split(' ')))\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\n\nassert solution(\"2 3\") == \"Dr. Chaz needs 2 more piece of chicken!\"\n\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n\"\"\"\n\nimport sys\n\nclass Box:\n    def __init__(self, l, w, h):\n        self.l, self.w, self.h = int(l), int(w), int(h)\n        self.volume = l * w * h\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\n\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def largeBox(self, boxes: List[List[int]]) -> int:\n        pass\n\nimport sys\nfrom collections import deque\nimport heapq\nimport functools\nimport itertools\nimport math\nfrom queue import Queue\nfrom copy import deepcopy\nfrom typing import Deque, Dict, Set, Tuple\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == -2\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n0 1\\n0 2') == '0\\n0\\n0'\nassert solution('1 1\\n2 2\\n3 3') == '1\\n1\\n1'\nassert solution('2 10\\n2 2 2\\n3 2 1\\n5 2 3') == '1\\n0\\n0'\nassert solution('2 10\\n1 2 2\\n3 2 1\\n5 2 3') == '1\\n0\\n0'\n\n'''\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0\"\nassert solution(\"3 30\") == \"0\"\nassert solution(\"3 10\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\nassert solution(\"3 10\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 10\\n3 2 1\\n2 2 2\") == \"0\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == '0'\nassert solution('''4 10\n1 1 1\n5 2 3\n5 2 1\n9 4 1''') == '3'\nassert solution('''2 10\n1 1 1\n2 2 2''') == '1'\nassert solution('''4 10\n10 10 10\n10 10 10\n10 10 10\n10 10 10''') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nFor each box, compute the difference between the box volume and the box volume required to hold all items. This value will be positive if the box is too small, and negative if the box is too big.\n\nBy using this difference as an index in a list, we can determine the largest box by finding the index of the largest difference.\n\nIn the example above, the boxes [1, 1, 2], [2, 2, 2], and [3, 2, 1] all fit inside a box with volume 10, so the only difference is -2. The box at index -2 is the largest box with a volume of 10.\n\nSo, the output of our program will be the index of the largest box.\n\nComplexity: Time O(n log n), where n is the number of boxes. We first sort the boxes and then use binary search on a sorted list of differences.\n\"\"\"\n\n\"\"\"\nVerdict: Time Limit Exceeded\n\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == 0\n\n\"\"\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    4 4\n    luka\n    o#a#\n    kula\n    i#a#\n    \"\"\"\n) == \"kala\"\nassert solution(\n    \"\"\"\n    4 4\n    luka\n    o#a#\n    kula\n    i#as\n    \"\"\"\n) == \"as\"\n\nprint('Success')\n\n----\n\n5 5\nzmienna\no#a#\no#a#\no#a#\no#a#\no#a#\n\n---\n\n4 4\nluka\no#a#\nkula\ni#a#\n\nzmienna\n\n\n\n\"\"\"\n\nimport re\n\nR, C = map(int, input().split())\n\npuzzle = []\nfor _ in range(R):\n    puzzle.append(input())\n\nlex_small = None\nfor r in range(R):\n    for c in range(C):\n        if puzzle[r][c] == \"#\":\n            continue\n        for n in range(1, min(C - c, R - r) + 1):\n            word = puzzle[r][c: c + n]\n            regex_result = re.match(word, puzzle[r + n][c:])\n            if regex_result is not None:\n                if lex_small is None or word < lex_small:\n                    lex_small = word\n                break\n\nprint(lex_small)\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\n#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\n#a#\\nluka\\n#a#\\nkula\\ni#a#\") == \"as\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\n\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'ala'\n\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'ala'"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == 'kala'\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == 'as'\n\"\"\"\n\nimport sys\n\nr, c = map(int, sys.stdin.readline().strip().split())\n\nmatrix = [list(map(str, sys.stdin.readline().strip())) for _ in range(r)]\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\n\nassert solution('''4 4\no#a#\nkula\ni#a#\n''') == ''\n\nassert solution('''3 4\nkula\ni#a#\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\\n\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\\n\") == \"as\"\nassert solution(\"2 2\\nkir\\nk#r\\n\") == \"kir\"\nassert solution(\"2 2\\nkir\\n#r\\n\") == \"kir\"\nassert solution(\"2 2\\nk#ir\\n#r\\n\") == \"kir\"\n\"\"\"\n\n\"\"\"\nCreate a new list of words that are valid according to the rules of Ivica's sister\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NSEW') == '4'\n\nprint('Success')\n\nend = time.time()\nprint(end - start)\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'WNWWN'\n) == 'WW'\nassert solution(\n    'NNW'\n) == 'N'\nassert solution(\n    'NSSESWNSSNSNWSSNW'\n) == 'SSNSNWWW'\nassert solution(\n    'NEESW'\n) == 'E'\nassert solution(\n    'NENEESENENEEN'\n) == 'ENEENENENEEN'\n\nprint('Success')"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WNWMMMEWE\") == 13\nassert solution(\"WNWMMMEWE\") == 10\n\"\"\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nassert solution(\"WNWNWNWWNWNWNW\") == \"13\"\nassert solution(\"N\") == \"1\"\nassert solution(\"NWSWW\") == \"5\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WNWMMWEWEWEWW\") == \"WNMWMME\"\nassert solution(\"NWWWNNNNWWNNNNWWNN\") == \"NWWNNNNNNNNWWNNNNNN\"\nassert solution(\"NWWNNNNWWNNNNWWWNNNWWWW\") == \"NWWNNNNNNNNWWNNNNWWNN\"\n\"\"\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n\"\"\"\n\n\"\"\"\nMY SOLUTION\n\"\"\"\n\nroute = input()"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('NSEW') == 4\nassert solution('NS') == 2\nassert solution('EN') == 3\nassert solution('NEN') == 3\nassert solution('NE') == 2\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNWESEENWSEWNWWWNW\") == 'WEEWWNWE'\nassert solution(\"NNENWWWNWSEENENENWSW\") == 'WWWWWWWNWNWNENENEN'\nassert solution(\"NWSWENENWNWNNWNENWNWENW\") == 'NWENENEWNWNWNWENWWWWWNW'\nassert solution(\"NWENNWSWWENENWWEWNNWNWENW\") == 'WWWWWWWNENWWENWWWWWWWWW'\nassert solution(\"WNWNWSEENENENWNENWWWNWENWWWWWWWWW\") == 'WNWENWWNWWWNWENWWNWWWWWWWWWWWWWWWWW'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\nassert solution('1 2 3 5') == 'problems ahead\\n'\nassert solution('1 2 2 2') == 'problems ahead\\n'\n\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\"\"\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"0 2 0 0\") == \"0 * 4 = 2 - 2\"\nassert solution(\"1 1 1 1\") == \"1 + 1 = 2 - 1\"\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"\n\nassert solution(\"0 -2 0 0\") == \"0 + -2 = 0 - 0\\n0 - 2 = 0 * 0\\n0 + -2 = 0 + 0\\n0 / 2 = 0 - 0\\nproblems ahead\\n\"\nassert solution(\"1 -1 -2 2\") == \"1 + -1 = 0 - 2\\n1 - 1 = 0 * -2\\n1 - 1 = 0 + 2\\n1 / -1 = 0 + 0\\nproblems ahead\\n\"\nassert solution(\"1 2 2 4\") == \"1 * 2 = 2 - 2\\n1 + 2 = 2 * 2\\n1 + 2 = 2 + 2\\n1 / 2 = 2 - 2\\nproblems ahead\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\nassert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"1 1 1 1\") == \"problems ahead\"\nassert solution(\"1 2 3 4 5\") == \"problems ahead\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\n\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\"\"\"\n\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BANANA PIDZAMA') == 'P.I.D.Z.A.\\n.M.A.\\n.N.A.'\nassert solution('MAMA TATA') == 'T.\\nM.\\n.T.\\n.A.'\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(r'BANANA PIDZAMA') == r'.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution(r'MAMA TATA') == r'.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"\"\"\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\".lstrip()\nassert solution(\"MAMA TATA\") == \"\"\"\n.T..\nMAMA\n.T..\n.A..\n\"\"\".lstrip()\nprint('Test pass.')\n\n-------"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"\"\"\\\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.P....') == '.P....'\nassert solution('MAMA TATA') == 'MAMA TATA'\n\n\"\"\"\n\nimport itertools\nimport math\nfrom typing import Generator, List, Tuple\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        word1, word2 = stdin.split(' ')\n        grid = []\n        letters = []\n        for char in word1:\n            if char not in letters:\n                letters.append(char)\n        for char in word2:\n            if char not in letters:\n                letters.append(char)\n        letters.sort()\n        grid = [''.join(x) for x in itertools.product(letters, repeat=math.ceil(len(letters) / 2))]\n        grid = grid[1:]\n        grid.sort(key=lambda x: len(x))\n        return '\\n'.join(grid)\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\\n\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\\n\"\n\n---- Problem ----\nAfter a long time offline, Slavko has solved at least one crossword. Since ACTA has entered into force, he wants to make a few more. For this, he asks you to help him generate the crosswords.\n\nYou are given two words, $A$ and $B$, which may have different lengths. The word $A$ must be output horizontally, and the word $B$ vertically, so that the two words cross (i.e., share exactly one letter). The shared letter must be the first letter in $A$ that is also contained in $B$, more specifically the first occurrence of that letter in each word.\n\nFor example, given the words $A = \\texttt{ABBA}$ and $B = \\texttt{CCBB}$, you need to output $4$ lines as shown below:\n\n.C..\n.C..\nABBA\n.B..\n\n\n-----Input-----\nThe first and only line of input contains two words, $A$ and $B$, not more than $30$ characters long, separated by a single space. Both words will contain only uppercase English letters. There will be at least one letter contained in both words.\n\n-----Output-----\nLet $N$ be the length of word $A$, and $M$ the length of word $B$. The output must contain $M$ lines, each containing $N$ characters. The character grid must contain the two words crossed as described above. All other characters in the grid must be periods (the character \u201c.\u201d, without quotes), thus padding all lines to the length of $N$ characters.\n\n-----Examples-----\nSample Input 1:\nBANANA PIDZAMA\nSample Output 1:\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\nSample Input 2:\nMAMA TATA\nSample Output 2:\n.T..\nMAMA\n.T..\n.A..\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n'.join((''.join(c * 4 for c in a.split(' ')) for a in ['BANANA', 'PIDZAMA']))"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == '10'\nassert solution('''2\n1 365\n20 28''') == '365'"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == 10\nassert solution(\"1 365\\n20 28\") == 365\n\"\"\"\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n10 14\n13 17\n25 26\"\"\") == \"10\"\nassert solution(\"\"\"2\n1 365\n20 28\"\"\") == \"365\"\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n10 14\n13 17\n25 26\n\"\"\") == 10\nassert solution(\"\"\"2\n1 365\n20 28\n\"\"\") == 365\nassert solution(\"\"\"4\n10 10\n10 10\n10 10\n10 10\n\"\"\") == 10\n\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == 10\n\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"1 365\\n20 28\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '0 1'\nassert solution(\"2\") == '1 2'\nassert solution(\"3\") == '2 3'\nassert solution(\"4\") == '2 5'\nassert solution(\"5\") == '3 6'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == ('0', '1')\nassert solution('4') == ('2', '3')\nprint('Test pass.')\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0 1\"\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"5\") == \"3 4\"\nassert solution(\"6\") == \"4 5\"\nassert solution(\"7\") == \"5 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ('0 1', '')\nassert solution('2\\n') == ('0 1', '2')\nassert solution('4\\n') == ('0 1', '2')\nassert solution('6\\n') == ('0 1', '3')\nassert solution('8\\n') == ('0 2', '4')\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n\"\"\"\n\nfrom typing import List\n\nK = int(input())\nlist = []\nfor i in range(K):\n    list.append(K - i)\nprint(min(list), max(list))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == (0, 0)\nassert solution('1') == (0, 1)\nassert solution('2') == (1, 0)\nassert solution('3') == (0, 0)\nassert solution('4') == (0, 1)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2 3\"\nprint(solution(\"4\"))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '1 2'\nassert solution('4') == '2 3'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '0 1'\n\nassert solution('2\\n') == '1 0'\n\nassert solution('3\\n') == '0 1'\n\nassert solution('4\\n') == '0 2'\n\nassert solution('5\\n') == '1 1'"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\nprint(solution(\"1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\"))"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\nassert solution('2 10\\n1 10 1\\n3 10 3') == 'B 0 3\\nA 1 10'"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98''') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('''5 3\n3 100 99\n1 100 99\n4 100 99\n4 100 99\n3 100 99''') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys\n\nP, D = map(int, sys.stdin.readline().strip().split())\n\ndistricts = [[0 for _ in range(3)] for _ in range(P)]\n\nfor i in range(P):\n    p = list(map(int, sys.stdin.readline().strip().split()))\n    for j in range(3):\n        districts[i][j] = p[j]\n\nwinners = []\n\nfor d in range(1, D + 1):\n    count_a, count_b = 0, 0\n    for p in range(P):\n        if d == districts[p][0] and count_a < districts[p][1]:\n            count_a = districts[p][1]\n        if d == districts[p][0] and count_b < districts[p][2]:\n            count_b = districts[p][2]\n    winners.append(('A' if count_a > count_b else 'B') +'' + str(count_a - count_b))\n\nprint(' '.join(winners))\n\nwasted_votes_a, wasted_votes_b = 0, 0\n\nfor d in range(1, D + 1):\n    count_a, count_b = 0, 0\n    for p in range(P):\n        if districts[p][0] == d and count_a < districts[p][1]:\n            count_a = districts[p][1]\n        if districts[p][0] == d and count_b < districts[p][2]:\n            count_b = districts[p][2]\n    wasted_votes_a += (count_a - (count_a // 2 + 1))\n    wasted_votes_b += (count_b - (count_b // 2 + 1))\n\nprint(str(wasted_votes_a) +'' + str(wasted_votes_b))\n\nefficiency_gap = wasted_votes_a - wasted_votes_b / (D * P)\n\nprint(f'{efficiency_gap:.6f}')\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        # read the input and split it by the '\\n' character\n        split_stdin = stdin.split('\\n')\n        # Get the number of votes for party A and B, respectively\n        votes_a = int(split_stdin[0].split()[0])\n        votes_b = int(split_stdin[0].split()[1])\n        # Get the number of districts\n        districts = int(split_stdin[0].split()[1])\n        # Create a list to store the results of each district\n        results = []\n        # Create a dictionary to store the number of wasted votes\n        wasted = {'a': 0, 'b': 0}\n        # Create a list to store the vote totals of each party\n        vote_totals = [0, 0]\n        # Iterate over each line\n        for line in split_stdin[1:]:\n            # Split the line by the'' character\n            split_line = line.split(' ')\n            # Get the district and the respective party's vote\n            district = int(split_line[0])\n            vote = int(split_line[1])\n            # Add the vote to the list of vote totals for the respective party\n            vote_totals[vote] += 1\n            # Get the result of the district by determining the party with the most votes\n            if vote_totals[0] > vote_totals[1]:\n                results.append('A')\n                wasted['a'] += district - 1\n            else:\n                results.append('B')\n                wasted['b'] += district - 1\n        # Get the wasted votes from party A and party B\n        wasted_a = wasted['a']\n        wasted_b = wasted['b']\n        # Get the efficiency gap by taking the absolute difference of the two parties' wasted votes and dividing it by the sum of all the votes\n        efficiency_gap = abs(wasted_a - wasted_b) / (votes_a + votes_b)\n        # Format the efficiency gap so that it is rounded to 6 decimal places\n        efficiency_gap = round(efficiency_gap, 6)\n        # Print the results of each district\n        for result in results:\n            print(result, wasted_a, wasted_b)\n        # Print the efficiency gap\n        print(efficiency_gap)\n\n    def solution_two(self, stdin: str):\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def test_example_1(self):\n        stdin = \"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\"\n        solution = Solution()\n        solution.solution(stdin)\n\n    def test_example_2(self):\n        stdin = \"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\"\n        solution = Solution()\n        solution.solution(stdin)"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\nassert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint('Success')\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import Counter"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n1\\n4\\n3\") == \"168\"\nprint(solution(\"4\\n2\\n1\\n4\\n3\"))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n1\\n1') == '3'\nassert solution('1\\n2\\n1') == '3'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"168\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2\n1\n4\n3\n5''') == 168\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == 168\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 4 3 5') == '168'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\") == \"6\"\nprint('All tests passed.')\n\"\"\"\n\n\"\"\"\nSolution 3\n\n###"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 4 3 5\\n1 1') == '168'\nassert solution('2\\n1 1') == '1'\n\n\"\"\"\nimport sys\nimport functools"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(    '5\\n2\\n1\\n4\\n3\\n5') == '168'\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\nassert solution('2 2\\nAB\\nBA\\n0\\n') == 'ABBA'\n\"\"\"\n\nfrom collections import defaultdict\n\nN1, N2 = map(int, input().split())\n\nfirst_row, second_row = list(map(lambda row: list(row), input().split('\\n')[:-1]))\nT = int(input())\n\ntable = defaultdict(list)\n\nfor i in range(N1):\n    for j in range(N2):\n        table[first_row[i]].append((i, j))\n        table[second_row[j]].append((i, j))"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\n\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0') == 'CDBEAF'\nprint('OK!')\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CBAEDF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\nCAB\\nDEF\\n1\\nAB') == 'ACBD'\nassert solution('4 3\\nCAB\\nDEF\\n2\\nAB') == 'ACBED'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\nassert solution(\"3 3\\nABC\\nDEF\\n3\\n\") == \"ABCDEF\"\nassert solution(\"3 3\\nABC\\nDEF\\n0\\n\") == \"ABCDEF\"\nassert solution(\"4 4\\nGHI\\nJKL\\nMNO\\n4\\n\") == \"GHIJKLMNO\"\nassert solution(\"4 4\\nGHI\\nJKL\\nMNO\\n2\\n\") == \"GHIJKLMNO\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin_1) == test_stdin_2\nassert solution(test_stdin_3) == test_stdin_4\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\nassert solution('3 3\\nABC\\nDEF\\n0\\n') == 'CBADEF'\nassert solution('3 3\\nBCA\\nDEF\\n0\\n') == 'CBAEDF'\nassert solution('3 3\\nABC\\nCDE\\n0\\n') == 'CBADEF'\nassert solution('3 3\\nABD\\nCDE\\n0\\n') == 'BCDAED'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"4\"\nassert solution(\"1\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"1\"\nassert solution(\"1\\n5\\n50 T\\n50 T\\n50 T\\n50 T\") == \"2\"\nassert solution(\"1\\n5\\n20 T\\n20 T\\n20 T\\n20 T\") == \"3\"\nassert solution(\"1\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"3\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\nT 20 N\\n50 T\\nP\\nP\\nP\\nP\\nP\\nT 30 N\\nT 50 N\\nT 80 N\\n') == '3'"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\n\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"ex1.txt\", \"r\").read()) == \"5\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n5\n20 T\n50 T\n80 T\n50 T\n30 T''') == '1'\nassert solution('''3\n5\n100 T\n100 N\n100 T\n100 T\n100 N''') == '4'\n\n\"\"\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n1\\n1\\n0\\n0\\nT\\nT\\nN\\nT\\nT\\nT\\nP\\nT\\nT\\nN\\nT\\nT\\nP\\nT\\nT\\nT\\nP\\nT\\nN\\nT\\nT\\nT\\nP\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nN\\nP\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nN\\nP\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nN\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nN\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nP\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\nT\\nT\\nT\\nT\\nT') == '2'\nassert solution('1\\n5\\n30 N\\n50 N\\n100 N\\n100 T\\n100 T\\n100 T\\n100 T\\n100 N') == '5'\n\"\"\"\n\nnum = int(input().strip())\n\nanswers = []\nfor _ in range(int(input().strip())):\n    t, z = map(str, input().strip().split())\n    answers.append((int(t), z))"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '0'\nassert solution('1 0') == '0'\nassert solution('1 1') == '1'\nassert solution('2 3') == '6'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"4\"\nassert solution(\"6 8\\n1 2\\n2 3\\n4 5\\n1 6\\n1 7\\n1 8\") == \"22\"\n\"\"\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n4 5') == '6'\nassert solution('6 8\\n3 6\\n2 4\\n5 2\\n4 1\\n6 5') == '22'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n') == '6'\nassert solution('6 8\\n') == '22'\n\"\"\"\n\nn, m = map(int, input().split())\narr = [[i for i in range(n)]]\nfor _ in range(m):\n    arr.append(list(map(int, input().split())))\ncost = 0\nfor i in range(1, n+1):\n    for j in range(n+1):\n        if j == i:\n            continue\n        for k in range(n+1):\n            if k == i:\n                continue\n            if arr[i][j] == arr[j][k]:\n                cost += arr[i][j]\nprint(cost)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n') == 6\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '6'\nassert solution('6 8') == '22'\n\"\"\"\n\nn, m = input().split()\nn = int(n)\nm = int(m)"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 4\\n') == '5'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n2 3 2 4\") == \"6\"\nassert solution(\"6 8\\n1 2 1 3 3 4 5 5\\n3 4 5 5 4 1 2\\n4 5 5 3 3 2 1\") == \"22\"\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 4 5 6 7 8') == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 8\") == \"22\"\n\nprint(solution(\"4 3\"))\nprint(solution(\"6 8\"))\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 7\n2 1 1 2 1\n1 2 1 2 2\n2 1 2 1 1\n2 1 2 1 2\n2 1 2 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n6 5 4\n7 8 9\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n5 4 1\n7 8 9\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2\n2 2\n\"\"\") == \"1\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nprint(solution('abcd\\nefgh\\nijkl\\n'))"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9\\n') == 1\n\"\"\"\n\n\"\"\"\nIn the first example the shortest ladder is of length 1, because there is a single coin in the vault, which is as high as possible. In the second example the shortest ladder is of length 0 because there are no coins in the vault.\n\nIn both cases the ladder is required to contain 1 + the minimum length of the vertical paths from the entrance to the special coin.\n\nTo determine the shortest ladder, we will iterate through the vertical paths that are available. We will move from the entrance to the stack with the lowest height, and find the vertical path of the longest length. This is the shortest ladder.\n\nThe solution is the sum of the longest vertical paths.\n\nNote:\nSince we have to move from the entrance to the stack with the lowest height, we can use a stack. The last element in the stack will always be the shortest vertical path, as the entrance is the first element in the stack.\n\nFor the second example, our stack will contain only the entrance to the vault.\n\nTime: O(NlogM)\nSpace: O(N)\n\"\"\"\nfrom typing import List\nimport sys"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1\\n') == 0\nassert solution('1\\n1\\n') == 0\nassert solution('2\\n1\\n') == 0\nassert solution('2\\n1\\n1\\n') == 0\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\"\"\"\n\nlength, width = list(map(int, stdin.readline().split()))\nvault = [list(map(int, stdin.readline().split())) for i in range(length)]\ndp = [[0 for j in range(width)] for i in range(length)]\ndp[0][0] = vault[0][0]\nfor i in range(1, length):\n    dp[i][0] = dp[i-1][0] + vault[i][0]\nfor j in range(1, width):\n    dp[0][j] = dp[0][j-1] + vault[0][j]\nfor i in range(1, length):\n    for j in range(1, width):\n        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + vault[i][j]\nprint(min(dp[length-1][width-1], dp[length-1][width-2]))\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nprint(solution(\"10\\n3\\n10\\n2\\n12\"))\n\"\"\"\nfrom collections import deque\nfrom itertools import islice"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('100\\n3\\n10\\n2\\n12') == '28'\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == 16\nprint(solution('10\\n3\\n10\\n2\\n12'))"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\"\n\nfrom __future__ import annotations"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import islice"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\nassert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nprint(solution(\"10\\n3\\n4\\n6\\n2\"))\nprint(solution(\"10\\n3\\n10\\n2\\n12\"))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12\\n') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n4\\n5\\n2\") == \"28\"\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nfrom typing import List\n\nX = int(input())\nN = int(input())\n\np = []\nfor i in range(N):\n    p.append(int(input()))\n\navailable = X\n\nfor i in range(N-1, -1, -1):\n    available += p[i] - p[i]//2\n\nprint(available)\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    \"\"\"\n    Runtime: 36 ms, faster than 53.49% of Python3 online submissions for Hiss.\n    Memory Usage: 12.7 MB, less than 100.00% of Python3 online submissions for Hiss.\n    \"\"\"\n    def solution(self, stdin):\n        return 'hiss' if'ss' in stdin else 'no hiss'\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solution('amiss'), 'hiss')\n        self.assertEqual(Solution().solution('octopuses'), 'no hiss')"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('a') == 'no hiss'\nassert solution('o') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\nimport re\n\nstdin = input()"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('mississippi') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('octopuses') == 'no hiss'\nassert solution('amiss') == 'hiss'\nassert solution('decode') == 'no hiss'\nassert solution('xxx') == 'no hiss'\nassert solution('octopi') == 'hiss'\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('accc') == 'hiss'\nassert solution('acc') == 'no hiss'\nassert solution('accs') == 'hiss'\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('hiss') == 'hiss'\nassert solution('a') == 'no hiss'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nc++\\nC++\\n c\\n c#') == '3'\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\nassert solution('4\\nC++\\nC++\\nc\\nc#') == '3'\nassert solution('4\\nC++\\nC++\\nC\\nc#') == '4'\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nc\\nc\\n\\n\\n') == 3\n\"\"\"\n\nn = int(input())\nk = 0\n\nkeys = []\n\nfor i in range(n):\n    k = input()\n    keys.append(k)\n\nk = set(keys)\nk_len = len(k)\n\nprint(k_len)"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nC#\") == \"3\"\n\nassert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nC#\") == 3\n\"\"\"\n\n\"\"\"\nimport math\nimport numpy as np"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#\\n') == 3\nassert solution('5\\nc++\\nC++\\nc\\nc#\\n') == 5\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nC++\\nC++\\nC\\nC#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\nassert solution('1\\nC++') == '0'\nassert solution('3\\nC#\\nC#') == '2'\nassert solution('3\\nArtificial intelligence\\nMachine-Learning') == '0'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()\n\nn = int(input)\n\nwords = dict()\n\nfor i in range(n):\n    word = input.split('\\n')[i]\n    word = word.replace(\"-\", \" \")\n    word = word.lower()\n    words[word] = words.get(word, 0) + 1\n\nprint(n - len(words))\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('machine learning') == 0\nassert solution('Big Data') == 0\nassert solution('C++') == 0\nassert solution('C#') == 0\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\nc++\\nC++\\nc\\nc#') == '5'\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('TCCGCCGCCG') == '25'\nassert solution('CGGGCCGTTC') == '9'\nassert solution('TTCCGCTCGG') == '9'\nassert solution('GCCCTTTGTC') == '9'\nassert solution('CCGCCCGG') == '25'\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TTC\") == 9\nassert solution(\"CCGTTGG\") == 49\nassert solution(\"TCCGCGGT\") == 49\nassert solution(\"TCTCGGCGTTG\") == 49\nassert solution(\"TCC\") == 7\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('TCCG') == 9\nassert solution('CGGG') == 25\nassert solution('TCCGTCGTCGTC') == 65\nassert solution('CGCGC') == 25\nassert solution('CCGCCGCCGCC') == 75"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCCCTCT\") == 21\nassert solution(\"CCCTCTG\") == 9\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint('All tests passed.')\n\n----Solution----\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"TCCG\") == 9\nassert solution(\"CGGTTC\") == 21\n\"\"\"\n\nimport re"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''315\n45''') == '90'\n\nassert solution('''0\n45''') == '180'\n\nassert solution('''180\n270''') == '90'\n\nassert solution('''0\n360''') == '0'\n\nassert solution('''180\n270''') == '90'"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('315', '45') == '90'\nassert solution('180', '270') == '90'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nprint(\"Test 1 OK\")\n\nassert solution(\"180\\n270\") == \"90\"\nprint(\"Test 2 OK\")\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('315','45') == '90'\nassert solution('180','270') == '90'\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('315', '45') == '90'\nassert solution('180', '270') == '90'\nassert solution('270', '315') == '-90'\nassert solution('270', '180') == '-90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"315 45\") == \"90\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"180\\n0\") == \"180\"\nassert solution(\"180\\n-90\") == \"-90\"\nassert solution(\"180\\n-180\") == \"180\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nassert solution('0\\n360') == '0'\nassert solution('180\\n45') == '90'\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nassert solution('315\\n-45') == '-90'\nassert solution('-315\\n45') == '90'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\nsolution([\n    '315',\n    '45'\n])\n\n'''\n\nimport math\nfrom math import atan2, degrees"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1\n23\n18\n13\n99\n''') == '3'\nassert solution('''\n5\n11\n20\n33\n40\n55\n''') == '1'\nassert solution('''\n2\n1\n1\n''') == '0'\n\n
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\nassert solution('5\\n23\\n18\\n13\\n99') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3\\n4') == '3'\nassert solution('1\\n2\\n3\\n4\\n5') == '2'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\nprint('Passed!')\n\n---------------------\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\nThe business permit can be obtained in City Hall by the following steps:\n\nMake a $K$-sized list of the line numbers that are taken by clerks, in the order in which the clerks take the trip to City Hall.\nAssume that the clerk whose line number is $i$ has already signed the permit.\nAt the end of the trip to City Hall, $K$-sized list of the line numbers of the clerks who have not yet taken the trip to City Hall.\nIf there are still $K$-sized list of the line numbers of the clerks who have not yet taken the trip to City Hall, then the clerk whose line number is $i$ must go first.\nIf all $K$-sized lists are empty, then you have the permit for the business.\nOtherwise you must pass the line and make the trip again.\nYou have to repeat this process until you have the permit for the business.\nThe only case when the permit for the business cannot be obtained is when all $K$-sized lists are empty. In this case, you have to make the trip again, but not to City Hall this time.\nAt the end, print the number of times that you have to make the trip to City Hall.\n\nFor example, if the input is\n\n5\n1\n23\n18\n13\n99\n\nthe output should be\n\n3\n\nbecause it is the first time you pass the line, then the clerk whose line number is 1 must go first, and so on.\n\nThe clerk whose line number is 99 must be the last one to go to City Hall, and the clerk whose line number is 13 must be the last one to go to City Hall, so you must make three trips to City Hall.\n\nSample Input 1:\n5\n1\n23\n18\n13\n99\nSample Output 1:\n3\n\nSample Input 2:\n5\n11\n20\n33\n40\n55\nSample Output 2:\n1\n\"\"\"\n\nimport sys\n\nsys.stdin = open('test_files/Y11R5P1/A.in')\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n23\\n18\\n13\\n99\") == \"1\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3\n\n\"\"\"\n\nK = int(input())\nclerk_numbers = list(map(int, input().split()))\n\ncurrent_clerk = 1\npass_count = 0\n\nwhile current_clerk < K + 1:\n    if clerk_numbers[current_clerk - 1] == current_clerk:\n        current_clerk += 1\n    else:\n        pass_count += 1\n        current_clerk += 1\n\nprint(pass_count)\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n23\\n18\\n13\\n99\") == \"1\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n99\") == \"5\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n99\") == \"0\"\nassert solution(\"5\\n99\\n99\\n99\\n99\\n99\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBWBWB\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBWWW\") == 1\nassert solution(\"WWBBBBW\") == 0\nassert solution(\"WWBBWWBW\") == 1\nassert solution(\"WWBBWWBWBWBWW\") == 1\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBBWWW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBB\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBBW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWWW\") == \"1\"\nassert solution(\"WWBBBWW\") == \"0\"\nassert solution(\"WWBBBW\") == \"1\"\nassert solution(\"WWBBBB\") == \"0\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWBBWWBWWWW\") == \"1\"\nassert solution(\"WWWBWWWWBW\") == \"0\"\nassert solution(\"WWWBBBWWWWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\nassert solution(\"2 3 4 5\") == \"17.624083479003906\"\nassert solution(\"1000 1000 1000 1000\") == \"400000\"\nassert solution(\"9 98 100 1000\") == \"98009.0\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\"\n\nimport math\n\na, b, c, d = [int(x) for x in stdin.split()]\nsides = [a, b, c, d]\nsides.sort(reverse=True)\nprint(sides[0] * sides[1])\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 3 3''') == '9'\nassert solution('''1 2 1 1''') == '1.299038105676658'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3 3 3''') == 9\nassert solution('''1 2 1 1''') == 1.299038105676658\n'''\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rroobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rrrroobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('aabbaa') == 'aaa'\nassert solution('aaaaaaaaaaaaaaaaaaaaa') == 'aaaaaaaaaaaaaaaaaaaaa'\nassert solution('aaabbbaaa') == 'aaa'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rroobert') == 'robert'\nassert solution('rrroobert') == 'robert'\nassert solution('rroooobert') == 'robert'\nassert solution('rrrrroobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"roobobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('hgjhghhghgjhgjhgghjhgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgghgjhgjhgjhgghgjhgjhgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhgjhgjhgghgjhg"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rooooberta') == 'robert'\nassert solution('rooooberto') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'robert'\n) == 'robert'\nassert solution(\n    'rrrooobbbert'\n) == 'robert'\nassert solution(\n    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('roobert') == 'robert'\nassert solution('roobaobert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rooooobert') == 'robert'\nassert solution('roobaobroobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rroobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rroooobert') == 'robert'\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\nassert solution(\"100 100 100\") == \"Impossible\"\nassert solution(\"1000 9 10\") == \"108 3\"\nassert solution(\"1000 9 11\") == \"108 2\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport math\n\nv1, v2, v = input().split()\nv1, v2, v = int(v1), int(v2), int(v)"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nlines = stdin.readlines()\n\nnum_of_containers = list(map(int, lines[0].split(' ')))\ncontainer_1_volume = num_of_containers[0]\ncontainer_2_volume = num_of_containers[1]\ncontainer_3_volume = num_of_containers[2]\n\nnum_of_bottles = 1\nwhile num_of_bottles * container_1_volume < container_2_volume:\n    num_of_bottles += 1\n\nnum_of_bottles_1 = 0\nwhile num_of_bottles_1 * container_1_volume < container_3_volume:\n    num_of_bottles_1 += 1\n\nnum_of_bottles_2 = 0\nwhile num_of_bottles_2 * container_2_volume < container_3_volume:\n    num_of_bottles_2 += 1"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\nprint('Success')\n\nSample Input 1:\n100 400 6\nSample Output 1:\n36 1\n\nSample Input 2:\n100 400 0\nSample Output 2:\nImpossible\n'''\nimport math\nimport sys"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\nassert solution('1000 9 7\\n') == '108 4'\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\ns, v1, v2 = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n..#\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"1\\n1\\n2\\n1\\n0\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == ['1\\n', '1\\n', '2\\n', '1\\n', '0\\n']\nassert solution('4 4\\n.##\\n..X\\n.##\\n##X') == ['9\\n', '0\\n', '0\\n', '0\\n', '0\\n']\nassert solution('4 4\\n#X.\\n#X.\\n#X.\\n#X.') == ['9\\n', '0\\n', '0\\n', '0\\n', '0\\n']\nassert solution('4 4\\n#.#\\n#.#\\n#.#\\n#.#') == ['9\\n', '0\\n', '0\\n', '0\\n', '0\\n']\nassert solution('4 4\\n...\\n...\\n...\\n...') == ['9\\n', '0\\n', '0\\n', '0\\n', '0\\n']\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".X..X\") == \"0,1,0,0,0\"\nassert solution(\"..X..\") == \"0,1,0,0,0\"\nassert solution(\"..X.X\") == \"0,0,1,0,0\"\nassert solution(\"#.X..\") == \"0,0,0,1,0\"\nassert solution(\"..X..\") == \"0,1,0,0,0\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n...\\n...\\n...\\n...') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == {1:1, 2:1, 3:2, 4:1, 0:0}\nassert solution(\"4 4\\n...\\n...\\n...\\n...\\n\") == {0:9, 1:0, 2:0, 3:0, 4:0}\n\nprint(\"Successfully tested\")"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n..#\\n..X\\n..X\\n#XX\\n\") == \"1 1 2 1 0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"9 0 0 0 0\"\nassert solution(\"2 2\\n.#\\nX\\n#\\n\") == \"1 1 0 0\"\nassert solution(\"1 1\\n#\\n\") == \"1 0\"\nassert solution(\"4 4\\n#X#\\n#XX\\n#X.\\n#X.\\n\") == \"0 0 1 1 1\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(\"Test 1 OK\")\nassert solution(\"23\\n17\\n43\\n52\\n22\") == \"102\"\nprint(\"Test 2 OK\")\nprint(\"===========================\")\nprint(\"End of tests\")\n\n----\n\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n2\") == \"3\"\nassert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"1\\n2\\n3\\n4\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"15\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('123') == '123'\nassert solution('10') == '10'\nassert solution('1 1') == '11'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nThe value of $N$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_1$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_2$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_3$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_4$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_5$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_6$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_7$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_8$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_9$ in the first line of input.\n\n[input] string stdin\n\nThe value of $P_10$ in the first line of input.\n\n[output] string\n\nThe value of $X$ from the original task.\n\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\"\n\nN = int(input())\nnums = []\nfor _ in range(N):\n    nums.append(int(input()))\n\nx = 0\nfor n in nums:\n    x += n ** N\n\nprint(x)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\nassert solution(\"100 100 100\\n3 2 1\") == \"0.0 0.0 0.0\"\nassert solution(\"50 50 50\\n1 1 1\") == \"0.0 0.0 0.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 10 10''') == '0.0 0.0 0.0'\nassert solution('''9 9 9''') == '0.0 3.0 6.0'\n'''\na, b, c = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 10 10''') == '''0.0 0.0 0.0'''\nassert solution('''9 9 9''') == '''0.0 3.0 6.0'''\n'''"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n\"\"\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\") == \"0.0 3.0 6.0\"\nassert solution(\"0 0 0\") == \"0.0 0.0 0.0\"\nassert solution(\"3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"6 6 6\") == \"0.0 0.0 0.0\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nassert solution(\"8 8 8\\n3 2 1\") == \"0.0 4.0 8.0\"\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '10 10 10'\n) == '0.000000 0.000000 0.000000'\nassert solution(\n    '9 9 9'\n) == '0.000000 3.000000 6.000000'\n\"\"\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\no, a, p = [int(i) for i in input().split()]\n\no_ = max(o * a, o * b, o * c)\np_ = max(p * a, p * b, p * c)\no_ -= o\np_ -= p\n\nprint(\"%.6f\" % o_, \"%.6f\" % p_, sep=\" \")"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abc<') == ''\nassert solution('abc>') == ''\nassert solution('abc>abc') == ''\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a<bc<) == b\nassert solution(foss<<rritun) == forritun\n\nimport re\n\nfor s in stdin.splitlines():\n    print(re.sub(r'(?<=.)<', '', s))\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nimport fileinput\nimport re\n\nfor line in fileinput.input():\n    line = line.rstrip()\n    print(re.sub('<', '', line))"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nSample Input 3:\na<b<c<\nSample Output 3:\n'''"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nprint(solution(stdin))\n\n----\n\nimport re"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"abc<def<ghi<jkl<mnop<\") == \"abcdefghijklmnop\"\nassert solution(\"a<<b<<c\") == \"abc\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('MS') == 'MS'"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"MS\") == \"MS\"\n\nprint(\"Tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"KM-P\") == \"KMP\"\n\nprint(solution(\"Knuth-Morris-Pratt\"))\nprint(solution(\"Mirko-Slavko\"))\nprint(solution(\"KM-P\"))\n\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 0') == 'Estate or Copper'\nassert solution('0 0 1') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(Sample Input 1)) == \"Estate or Copper\"\nassert solution(str(Sample Input 2)) == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"Province or Gold\"\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 1\") == \"Province or Gold\"\nassert solution(\"1 0 0\") == \"Estate or Copper\"\nassert solution(\"0 0 0\") == \"Gold or Silver\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 0 0\") == \"Copper\"\nassert solution(\"1 0 1\") == \"Province or Gold\"\nassert solution(\"0 2 2\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 1\") == \"Province or Gold\"\nassert solution(\"0 0 1\") == \"Province or Silver\"\nassert solution(\"0 2 1\") == \"Province or Silver\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('10 10\\n70 50') == '75.714286'\nassert solution('2 1\\n70 50') == '90.00'\n'''\n\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nd, s = map(int, stdin.readline().split())"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1 1\\n') == ''\nassert solution('2 1\\n') == ''\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\nprint('The local tests are done. Try Solution Online.')\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\nimport math\nimport decimal\nimport typing"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2 1 5 4 7 6') == '4'\nassert solution('5 1 2 3 4') == '5'\nassert solution('1 2 3 4 5') == '5'\nassert solution('1 1 1 1') == '1'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n\"\"\"\nimport sys\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\n\nclass Solution:\n    def greedily_decreasing_subsequence(self, N: int, A: List[int]) -> List[int]:\n        decreasing_subsequence = []\n        seen = defaultdict(int)\n\n        for i in range(len(A)):\n            if seen[A[i]] < i:\n                decreasing_subsequence.append(A[i])\n            else:\n                decreasing_subsequence.append(A[i])\n            seen[A[i]] = i\n\n        decreasing_subsequence.reverse()\n        return decreasing_subsequence\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == '4\\n2 3 5 7'\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 3 1 5 4 7 6\") == \"4 2 3 5 7\"\nassert solution(\"7 1 2 3 4 5 6\") == \"5 1 2 3 4 6\"\n\"\"\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n2 3 1 5 4 7 6''') == '''4\n2 3 5 7'''\nassert solution('''5\n1 2 3 4 5''') == '''5\n1 2 3 4 5'''\nprint(solution(input()))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '7\\n2 3 1 5 4 7 6'\n) == '4\\n2 3 5 7'\nassert solution(\n    '5\\n1 2 3 4 5'\n) == '5\\n1 2 3 4 5'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n7\n2 3 1 5 4 7 6\n\"\"\"\n) == \"\"\"\n4\n2 3 5 7\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\"\n) == \"\"\"\n5\n1 2 3 4 5\n\"\"\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2,3,1,5,4,7,6\") == \"4\\n2 3 5 7\"\n\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nprint(\"Test 1 OK\")\nassert solution(\"0 30\") == \"23 45\"\nprint(\"Test 2 OK\")\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1:\n14 15\nSample Output 1:\n13 25\nSample Input 2:\n23 59\nSample Output 2:\n22 45\n\nSample Input 1"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\n\"\"\"\n\nimport math\n\nH, M = map(int, input().split())\n\nwhile H!= 0 or M!= 0:\n    M = M + 45\n    if M >= 60:\n        H = H + 1\n        M = M - 60\n    if H == 23:\n        H = 0\n    if M == 60:\n        M = 0\n    print(H, M)"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 10\") == \"9 25\"\nassert solution(\"12 45\") == \"15 30\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"6 15\") == \"3 45\"\nassert solution(\"8 50\") == \"7 45\"\nassert solution(\"0 10\") == \"0 25\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\") == \"23 45\"\nassert solution(\"6 10\") == \"9 25\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint(solution(\"10 10\"))\nprint(solution(\"0 30\"))\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n\nh, m = input().split()\nh = int(h)\nm = int(m)\nh = h - 45 if h >= 45 else h + 24 - 45\nm = m - 45 if m >= 45 else m + 60 - 45\nprint(h, m)\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('23 45') == '23 45'\n\nprint(solution('23 45'))\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '0.5'\nassert solution('0.01784') == '0.01768'\nassert solution('0.00001') == '0.00001'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('1.999999') == '1.999999'\nassert solution('0.00000000') == '0.00000000'\nassert solution('0.000009') == '0.000009'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.000000') == '1.414214'\n\n----Problem----\nYou are given a sequence of real numbers $a_1, a_2, \\dots, a_n$.\n\nYou have to answer whether it is possible to obtain the same sequence of numbers by replacing $i$th element with $i$th element of the sequence $a_i$,\n\n$i$th element of the sequence $a_j$, and $j$th element of the sequence $a_k$.\n\nA sequence $a_1, a_2, \\dots, a_n$ is said to be monotonic if $a_i \\leq a_j \\leq a_k \\forall i, j, k \\in [1, n]$.\n\nOtherwise, it is said to be non-monotonic.\n\nFor example, $a_1, a_2, a_3, a_4, a_5$ is non-monotonic.\n\nWrite a program to test whether it is possible to obtain the same sequence by replacing $i$th element with $i$th element of the sequence $a_i$,\n\n$i$th element of the sequence $a_j$, and $j$th element of the sequence $a_k$.\n\n----Problem solving----\nYou are given a sequence of real numbers $a_1, a_2, \\dots, a_n$.\n\nYou have to answer whether it is possible to obtain the same sequence of numbers by replacing $i$th element with $i$th element of the sequence $a_i$,\n\n$i$th element of the sequence $a_j$, and $j$th element of the sequence $a_k$.\n\nA sequence $a_1, a_2, \\dots, a_n$ is said to be monotonic if $a_i \\leq a_j \\leq a_k \\forall i, j, k \\in [1, n]$.\n\nOtherwise, it is said to be non-monotonic.\n\nFor example, $a_1, a_2, a_3, a_4, a_5$ is non-monotonic.\n\nWrite a program to test whether it is possible to obtain the same sequence by replacing $i$th element with $i$th element of the sequence $a_i$,\n\n$i$th element of the sequence $a_j$, and $j$th element of the sequence $a_k$.\n\n----Sample tests----\nSample Test 1:\nSample Input 1:\n2.000000\nSample Output 1:\n1.414214\nSample Test 2:\nSample Input 2:\n1.000000\nSample Output 2:\n1.000000\nSample Test 3:\nSample Input 3:\n2.000001\nSample Output 3:\n0.999999\n\nSample Test 4:\nSample Input 4:\n2.000002\nSample Output 4:\n0.999999\n\nSample Test 5:\nSample Input 5:\n1.999999\nSample Output 5:\n1.999999\n\n----Hints----\nA number is said to be a rational number if it is a ratio of two integers.\n\nIf we have a sequence $a_1, a_2, \\dots, a_n$, then the sum of all the elements $a_i$ is called the summation of the sequence $a_1, a_2, \\dots, a_n$.\n\nWrite a function to test whether it is possible to obtain the same sequence by replacing $i$th element with $i$th element of the sequence $a_i$,\n\n$i$th element of the sequence $a_j$, and $j$th element of the sequence $a_k$.\n\nThe function will have three parameters: a number of elements $n$, a number $i$, and a number $j$.\n\nThe function will return True if it is possible to obtain the same sequence by replacing $i$th element with $i$th element of the sequence $a_i$,\n\n$i$th element of the sequence $a_j$, and $j$th element of the sequence $a_k$.\n\nOtherwise, the function will return False.\n\n----Examples----\nSample Input 1:\n2.000000\nSample Output 1:\n1.414214\nSample Input 2:\n1.000000\nSample Output 2:\n1.000000\nSample Input 3:\n2.000001\nSample Output 3:\n0.999999\nSample Input 4:\n2.000002\nSample Output 4:\n0.999999\nSample Input 5:\n1.999999\nSample Output 5:\n1.999999\n\n----Solution----\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2.0\") == '1.414214'\nassert solution(\"1.0\") == '1.0'\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2.000000') == '1.414214'\nprint(solution('1.000000'))\n\n-----Problem-----\nA number $n$ is said to be a pythagorean number if it is a positive integer and it is the sum of its own square, i.e. $n=\\underbrace{1^2+2^2+\\cdots +n^2}_ n$.\n\nWrite a program to find the first four pythagorean numbers in the range [1, $10000$].\n\n-----Solution-----\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\n\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"50\") == \"50:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3:\\\\n2,1'\nassert solution('50') == '50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25'\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3: 2,1'\nassert solution('50') == '50: 2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3:\", \"case 1\"\nassert solution(\"50\") == \"50:\", \"case 2\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3:1\\n2,1\"\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3:\\\\n2,1'\nassert solution('50') == '50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25'\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3\\n2,1\\n\"\nassert solution(\"50\") == \"50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3:\", \"WA for 3 stars\"\nassert solution(\"5\") == \"5:\", \"WA for 5 stars\"\nassert solution(\"50\") == \"50:\", \"WA for 50 stars\"\nassert solution(\"1\") == \"1:\", \"WA for 1 stars\"\n\n\"\"\"\nimport itertools\n\nS = int(input())"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\\n2,1\"\nassert solution(\"50\") == \"50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\\n2,1\"\nassert solution(\"50\") == \"50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THERE IS NO ANSWER\") == \"no\"\nassert solution(\"THE ANSWER IS\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THERES SOME INTRO HERE\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"BRAVO BUEY\") == \"no\"\nassert solution(\"THE LAMBCHOP\") == \"yes\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\nimport os\nimport io\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        input_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),'sample_input_1')\n        with io.open(input_file, encoding='utf-8') as fd:\n            stdin = fd.read()\n        self.assertEqual(solution(stdin), \"yes\")\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'no'\nassert solution('TEST TEST TEST TEST TEST') == 'yes'\nassert solution('TEST TEST TEST TEST TEST TEST TEST') == 'no'\nassert solution('TEST TEST TEST TEST TEST TEST TEST TEST TEST') == 'no'"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"LLRLLRRRR\") == \"SSKKKHHS\"\nassert solution(\"BBBLLRRRR\") == \"CHCS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nSample Input 2:\nXBRLRBRL\nSample Output 2:\nKSCCS\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint('Successfully solved')\n\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRRRRRRRR\") == \"SSSSSSSSS\"\nassert solution(\"RRRBBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"RBRRBRRRR\") == \"SSSSSSSSS\"\n\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('RRRRR') == 'S'\nassert solution('RBR') == 'C'\nassert solution('RRLRR') == 'R'\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nprint(\"All tests passed.\")\n\n----\n3.\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n-----Input-----\nA single line of one integer, $N$, less than or equal to 1000.\n\n-----Output-----\nPrint a single number: the sum of all the multiples of 3 or 5 below $N$.\n\n-----Examples-----\nSample Input 1:\n5\nSample Output 1:\n23\n\nSample Input 2:\n10\nSample Output 2:\n23\n\nSample Input 3:\n1000\nSample Output 3:\n55000\n\n----\n4.\n\nWrite a program that will calculate and display the total of the numbers from 1 to 100. The program should not use the sum() function.\n\n-----Input-----\nA single integer representing the upper limit of the range 1 to $N$.\n\n-----Output-----\nThe program should display the total of the numbers from 1 to 100.\n\n-----Examples-----\nSample Input 1:\n100\nSample Output 1:\n5050\n\nSample Input 2:\n1000\nSample Output 2:\n500500\n\nSample Input 3:\n200\nSample Output 3:\n102500\n\n----\n5.\n\nA linear algebra professor gives five vectors a1, a2, a3, a4, and a5 to students as follows:\n\na1 = (1,0,0)\na2 = (1,1,0)\na3 = (1,1,1)\na4 = (0,1,0)\na5 = (0,1,1)\nThese vectors are stored in the files a1.txt, a2.txt, a3.txt, a4.txt and a5.txt respectively. The vectors are saved in the vector_database folder.\n\nWrite a program that calculates the similarity between vectors given as input by students and vector of the professor. The program should calculate the similarity between each student\u2019s vectors and the vector of the professor by computing the sum of the products of corresponding components of the vectors and dividing that sum by the product of the vector norms (as described in the previous question).\n\n-----Input-----\nA single line of four integers, each of them from 1 to 100, separated by a single space. The numbers are the components of the vectors of the students and the vector of the professor, respectively.\n\n-----Output-----\nThe program should display the similarity between the vectors of the students and the vector of the professor.\n\n-----Examples-----\nSample Input 1:\n1 1 1 0\nSample Output 1:\n0.6\n\nSample Input 2:\n1 1 1 1\nSample Output 2:\n0.0\n\nSample Input 3:\n0 1 1 0\nSample Output 3:\n1.0\n\n----\n6.\n\nCreate a new folder named vector_database and put all the vector files in this folder.\n\n-----Input-----\nNo input is required.\n\n-----Output-----\nAll the vectors from the database folder should be copied into the current directory. The vectors are numbered from 1 to 100.\n\n-----Examples-----\nSample Input:\nThe program should not require any input.\n\nSample Output 1:\nThe vectors from the database folder are copied into the current directory.\n\nSample Input 2:\nThe program should not require any input.\n\nSample Output 2:\nThe vectors from the database folder are copied into the current directory.\n\nSample Input 3:\nThe program should not require any input.\n\nSample Output 3:\nThe vectors from the database folder are copied into the current directory.\n\n----\n7.\n\nThe professor gives you the following matrix:\n\n1 2 3\n4 5 6\n7 8 9\nWrite a program that will compute the determinant of the matrix.\n\n-----Input-----\nA single line of six numbers, separated by spaces, that represent the matrix. Each number is from 1 to 100.\n\n-----Output-----\nThe program should display the determinant of the matrix.\n\n-----Examples-----\nSample Input 1:\n1 2 3 4 5 6\nSample Output 1:\n120\n\nSample Input 2:\n2 3 4 5 6 7\nSample Output 2:\n56\n\nSample Input 3:\n3 4 5 6 7 8\nSample Output 3:\n56\n\n----\n8.\n\nWrite a program that will compute the inverse of the following matrix:\n\n2 1 2\n1 1 2\n1 1 2\nWrite a program that will display the matrix in its original form and its inverse.\n\n-----Input-----\nA single line of six numbers, separated by spaces, that represent the matrix. Each number is from 1 to 100.\n\n-----Output-----\nThe program should display the determinant of the matrix.\n\n-----Examples-----\nSample Input 1:\n1 2 3 4 5 6\nSample Output 1:\n1 2 3\n1 1 2\n1 1 2\nSample Input 2:\n2 1 2\n1 1 2\n1 1 2\nSample Output 2:\n2 1\n1 1 2\n1 1 2\n\n----\n9.\n\nThe teacher gives you the following sequence:\n\n1 2 3\n4 5 6\n7 8 9\nWrite a program that will calculate and display the sum of the numbers from 1 to 1000, inclusive.\n\n-----Input-----\nA single line of six numbers, each of them from 1 to 100, separated by a single space.\n\n-----Output-----\nThe program should display the sum of the numbers from 1 to 1000, inclusive.\n\n-----Examples-----\nSample Input 1:\n1 2 3 4 5 6\nSample Output 1:\n3635\n\nSample Input 2:\n2 1 2\n1 1 2\n1 1 2\nSample Output 2:\n8\n\nSample Input 3:\n1 1 1 1 1 1\nSample Output 3:\n6\n\n----\n10.\n\nA theater has n rows of seats. The seats are numbered from 1 to n from top to bottom.\n\nThe students enter the theater in a zigzag fashion where students in the i-th row sit down on seats in the sequence 1, 2, 3...2, 1, 2, 3...\n\nOne student has lost connection to the cinema after a row and had to sit in his"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\\n\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\n\"\"\"\nassert solution(\"2 4 7\\n\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\n\"\"\"\n\nprint('Success')"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\nassert solution('1 1 1\\n') == '1\\n'\nassert solution('5 5 1\\n') == '1\\n2\\nFizz\\n4\\nBuzz\\nFizz\\n7\\n'\n\nassert solution('4 1 2\\n') == '1\\n2\\nFizz\\n4\\n'"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\nprint('All tests are passed.')\n\n-----"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\\n\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nprint(solution(\"2 4 7\\n\"))"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(print(\"\"))"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('\\n\\n\\n') == ''\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 3 3 2') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10\\n0 100') == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2\n3 3 3 2''') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('''2 10\n0 100''') == 'It hadn\\'t snowed this early in 0 years!'\n\nimport re\nfrom typing import List, Tuple"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(10, 2) == 2\nassert solution(10, 10) == 7\nassert solution(1, 2) == 1\nassert solution(1, 3) == 1\nassert solution(100, 2) == 1\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2') == 2\nassert solution('10 10') == 7\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 2\\n') == '2'\nassert solution('10 10\\n') == '7'\n\"\"\"\n\ns, n = input().split(' ')\ns = int(s)\nn = int(n)\n\ncount = 0\n\nfor _ in range(n):\n    if s % 2 == 0:\n        count += 1\n        s //= 2\n    else:\n        count = 0\n        break\n\nprint(count + 1)\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 10\") == 7\nassert solution(\"1 1\") == 1\nassert solution(\"10 20\") == 6\nassert solution(\"10 100\") == 10\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2') == 2\n\"\"\"\n\nimport sys\n\nlines = list(map(str.strip, sys.stdin.readlines()))\ns = int(lines[0].split(' ')[0])\nn = int(lines[0].split(' ')[1])\n\nscore = 0\n\nfor i in range(s):\n    if (i+1) % (n//2) == 0:\n        score += 1\n\nprint(score)\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\nassert solution(\"22 10\") == \"3\"\nassert solution(\"22 22\") == \"1\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n') == 2\nassert solution('10 10\\n') == 7\n\"\"\"\n\ns = stdin.readline().split()\nN = int(s[0])\nS = int(s[1])\ni = 0\nfor _ in range(N):\n    i = (i + S) % N\nprint(i + 1)\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"zmvnzmvnzmvnzmvnzm\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"fsdvzxcvzxcv\") == \"fsdvzxcvzxcv\"\n\nSolution:\nimport string"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('sukcufku') == 'dokdsuki'\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\nprint(solution(\"bok\"))\nprint(solution(\"koaski\"))"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\nSample Input 3:\ndwgjhgynjrfqhjnkjdghj\nSample Output 3:\ndwgjhgynjrfqhjnkjdghj\n\nSample Input 4:\nzaqwsxzc\nSample Output 4:\nzaqwsxzc\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('mam') =='mam'\nassert solution('ujev') == 'ujev'\nassert solution('mam') =='mam'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaska') == 'kakosi'\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bok') == 'bok'\nassert solution('bokbok') == 'bokbok'\nassert solution('bokbokbok') == 'bokbokbok'\nassert solution('bokbokbokbok') == 'bokbokbokbok'\nassert solution('bokbokbokbokbok') == 'bokbokbokbokbok'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\nassert solution(\"uuladidabile\") == \"bombonisuuladici\"\nassert solution(\"agkvjctnjzrjkdibfjdlgfbjb\") == \"anulacitlpdj\"\n\n\"\"\"\n\nimport numpy as np\n\nstring = input()\n\nstring = string[::-1]\n\nstring = list(string)\n\nmatrix = []\ncolumn = []\nfor i in range(1, len(string) + 1):\n    column.append(i)\nmatrix.append(column)\n\nfor i in range(1, len(string)):\n    column = []\n    column.append(i)\n    for j in range(0, len(string)):\n        if (j + 1) % i == 0:\n            column.append(string[j])\n    matrix.append(column)\n\nfor i in range(0, len(string)):\n    column = []\n    column.append(i)\n    for j in range(0, len(string)):\n        if j % len(string) == i:\n            column.append(string[j])\n    matrix.append(column)\n\nmatrix = np.array(matrix)\n\nprint(matrix.transpose())\n\nprint(string)\n\ncount = 0\nfor i in range(0, len(matrix)):\n    for j in range(0, len(matrix)):\n        if matrix[i][j] == string[count]:\n            print(matrix[i][j], end='')\n            count += 1\n            if count == len(string):\n                break\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n3 2') == '8 2'\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n8 2') == '8 2'\nassert solution('7\\n8 3') == '8 3'\n\n\"\"\"\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\nprint(solution(input()))"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"8 2\"\nprint(solution(\"7\"))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n2\\n') == '4 1'\nassert solution('8\\n7\\n6\\n') == '4 2'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '3 1'\nassert solution('1') == '2 1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1'\nassert solution('4') == '2 2'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''stairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat''') == '''YES\nNO\n'''\n\nassert solution('''drought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and charred\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO\n'''\n\nassert solution('''stairs\n3\nothers ought air earn\nous hear never\nou oud augh\n4\ndeteriorate further\nfare towards an\nunpleasant consequence\napples and pears\n''') == '''NO\nNO\nNO\nNO\n'''\n\n\"\"\"\nimport sys\nfrom typing import List\nimport os\nimport itertools"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n\\n2\\ntasty sprout\\ndifficult route\\nworried and char\\nforever in doubt\\napples and pears\\n\") == \"\"\"YES\nNO\nYES\nNO\nYES\nNO\n\"\"\", \"First Test Case\"\nassert solution(\"drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and char\\nforever in doubt\\napples and pears\\n\") == \"\"\"YES\nYES\nYES\nYES\nNO\nNO\n\"\"\", \"Second Test Case\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''drought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frequent\nforever in doubt\napples and pears''') == '''YES\nYES\nYES\nYES\nNO'''\n\nassert solution('''abacus\n2\none never thousand\ntwo million\n3\ni went to the market to buy some bread\nten thousand\nten thousands\n11\ni want to buy a car\ni want to buy a car\ni want to buy a car\ni want to buy a car\ni want to buy a car\ni want to buy a car\ni want to buy a car\ni want to buy a car\ni want to buy a car''') == '''YES\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO'''\n\nassert solution('''drum\n2\no two and\nthree\n4\nfour that\nfive they\n6\nsix they\nseven a you\neight i will\n9\nten i will\n11\ntwelve i will\n13\nfourteen i will\n15\nsixteen i will\n17\neighteen i will\n19\ntwenty i will\n21\ntwenty one i will\n23\ntwenty three i will\n25\ntwenty five i will\n27\ntwenty seven i will\n29\ntwenty nine i will\n31\nthirty one i will\n33\nthirty three i will\n35\nthirty five i will\n37\nthirty seven i will\n39\nthirty nine i will\n41\nfourty one i will\n43\nfourty three i will\n45\nfourty five i will\n47\nfourty seven i will\n49\nfourty nine i will\n51\nfifty one i will\n53\nfifty three i will\n55\nfifty five i will\n57\nfifty seven i will\n59\nfifty nine i will\n61\nsixty one i will\n63\nsixty three i will\n65\nsixty five i will\n67\nsixty seven i will\n69\nsixty nine i will\n71\nseventy one i will\n73\nseventy three i will\n75\nseventy five i will\n77\nseventy seven i will\n79\nseventy nine i will\n81\neighty one i will\n83\neighty three i will\n85\neighty five i will\n87\neighty seven i will\n89\neighty nine i will\n91\nninety one i will\n93\nninety three i will\n95\nninety five i will\n97\nninety seven i will\n99\nninety nine i will\n''') == '''YES\nNO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nYES\nNO\nYES\nNO\nNO\nYES\nYES\nNO\nYES\nNO\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nYES\nNO\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n                    stairs\n                    2\n                    erres airs ears ares aires\n                    eet eat\n                    2\n                    apples and pears\n                    plates of meat\n                    ''') == '''\n                    YES\n                    NO\n                    YES\n                    YES\n                    NO\n                    '''\n\nassert solution('''\n                    drought\n                    2\n                    aught ought aut acht\n                    ought oubt outte out oute\n                    5\n                    tasty sprout\n                    difficult route\n                    worried and feared\n                    forever in doubt\n                    apples and pears\n                    ''') == '''\n                    YES\n                    YES\n                    YES\n                    YES\n                    NO\n                    '''\nprint(solution(stdin))\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('steee') == 'NO'\nassert solution('fresenius') == 'YES'\nassert solution('drought') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('stairs') == 'YES\\nNO'\nassert solution('drought') == 'YES\\nNO\\nYES\\nNO\\nYES'\n\"\"\"\n\nword = input()\nn_ending_lists = int(input())\nfor _ in range(n_ending_lists):\n    ending_list = input()\nn_phrases = int(input())\nfor _ in range(n_phrases):\n    phrase = input()\n    if phrase.split()[-1].lower() in set(word.lower() for word in ending_list.split()):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('foo bar') == 'foo bar'\nassert solution('foo bar ') == 'foo bar'\nassert solution(' foo bar') == 'foo bar'\nassert solution('foo bar ') == 'foo bar'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('stairs') == 'YES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''stairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n''') == '''YES\nNO\n'''\nassert solution('''drought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frest\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO\n'''\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\n\"\"\"\n\n\"\"\"\nThe Hangman Problem\n\nAccording to the rules of the game, the player who picks the word, or the player who guesses the word at the right time, wins.\n\nLet\u2019s look at a few examples:\n\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANAN\u201d, then \u201cBANAN\u201d is neither the word nor a prefix of the word, so he loses.\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANAN\u201d, then \u201cBANAN\u201d is not the word, so he loses.\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANANABANANA\u201d, then he loses.\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANANANAN\u201d, then he wins.\n\nImplement a function which, given an input word and the player\u2019s guess, returns:\n\n\u201cWIN\u201d if the player wins the game,\n\u201cLOSE\u201d if the player loses the game,\n\u201cPENDING\u201d if the player needs to make another guess.\n\nThe game ends when the player either wins or loses.\n\nThere are three possible outcomes: the player wins, loses or makes another guess.\n\nNote that, when a player makes more than one guess, the game ends, no matter whether the player wins or loses.\n\nExamples:\n\nInput    Output\nBANANA    PENDING\nPANAN    LOSE\nBANAN    WIN\nBANANE    PENDING\nBANANAN    WIN\nBANANANAN    PENDING\nBANANANANAN    PENDING\nBANANANANANAN    PENDING\nBANANANANANANAN    PENDING\n\"\"\"\n\"\"\"\nThe Hangman Problem\n\nAccording to the rules of the game, the player who picks the word, or the player who guesses the word at the right time, wins.\n\nLet\u2019s look at a few examples:\n\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANAN\u201d, then \u201cBANAN\u201d is neither the word nor a prefix of the word, so he loses.\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANAN\u201d, then \u201cBANAN\u201d is not the word, so he loses.\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANANANAN\u201d, then he loses.\nIf the word is \u201cBANANA\u201d, and the player picks \u201cBANANANAN\u201d, then he wins.\n\nImplement a function which, given an input word and the player\u2019s guess, returns:\n\n\u201cWIN\u201d if the player wins the game,\n\u201cLOSE\u201d if the player loses the game,\n\u201cPENDING\u201d if the player needs to make another guess.\n\nThe game ends when the player either wins or loses.\n\nThere are three possible outcomes: the player wins, loses or makes another guess.\n\nNote that, when a player makes more than one guess, the game ends, no matter whether the player wins or loses.\n\nExamples:\n\nInput    Output\nBANANA    PENDING\nPANAN    LOSE\nBANAN    WIN\nBANANE    PENDING\nBANANAN    LOSE\nBANANANAN    LOSE\nBANANANANAN    PENDING\nBANANANANANAN    PENDING\nBANANANANANANAN    PENDING\nBANANANANANANAN    PENDING\nBANANANANANANANAN    PENDING\n\"\"\"\n\"\"\"\nHangman Problem\n\nGiven a secret word and a player\u2019s guess of the word, the game is over after one of the following conditions are met:\n\nThe player guessed the word correctly.\nThe player guesses the word incorrectly and loses.\nThe player guesses the word incorrectly three times and loses.\n\nImplement a function called hangman which takes in two inputs, a secret word and the player\u2019s guess, and returns one of the following strings depending on the outcome of the game:\n\nWIN if the player guessed the word correctly.\nLOSE if the player guessed the word incorrectly three times.\nPENDING if the player has made more than 3 guesses.\nIf the player has guessed the word correctly, the function should return WIN.\nIf the player has guessed the word incorrectly three times, the function should return LOSE.\nIf the player has guessed the word incorrectly fewer than three times, the function should return PENDING.\n\nThe game ends if the player guesses the word correctly, or if the player has guessed incorrectly three times.\n\nExamples:\n\nhangman(\"banana\",\"b\") == \"WIN\"\nhangman(\"banana\",\"ba\") == \"LOSE\"\nhangman(\"banana\",\"banana\") == \"PENDING\"\nhangman(\"banana\",\"banan\") == \"LOSE\"\nhangman(\"banana\",\"bana\") == \"WIN\"\nhangman(\"banana\",\"nana\") == \"LOSE\"\nhangman(\"banana\",\"nani\") == \"PENDING\"\n\"\"\"\n\"\"\"\nHangman Problem\n\nGiven a secret word and a player\u2019s guess of the word, the game is over after one of the following conditions are met:\n\nThe player guessed the word correctly.\nThe player guesses the word incorrectly and loses.\nThe player guesses the word incorrectly three times and loses.\n\nImplement a function called hangman which takes in two inputs, a secret word and the player\u2019s guess, and returns one of the following strings depending on the outcome of the game:\n\nWIN if the player guessed the word correctly.\nLOSE if the player guessed the word incorrectly three times.\nPENDING if the player has made more than 3 guesses.\nIf the player has guessed the word correctly, the function should return WIN.\nIf the player has guessed the word incorrectly three times, the function should return LOSE.\nIf the player has guessed the word incorrectly fewer than three times, the function should return PENDING.\n\nThe game ends if the player guesses the word correctly, or if the player has guessed"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\nprint(solution('HANGMAN'))\nprint(solution('BANANA'))\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'HANGMAN'\n) == 'WIN'\nassert solution(\n    'BANANA'\n) == 'LOSE'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'WIN'\nassert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('HANGMAN') == 'LOSE'\nassert solution('BANANA') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\nprint(solution(\"HANGMAN\"))\nprint(solution(\"BANANA\"))\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"LOSE\"\nassert solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\nassert solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"LOSE\"\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"HANGMAN\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\nprint(solution(\"BANANA\\nABBCDEFGHIJKLMNOPQRSTUVWXYZ\\n\"))\n\nprint(solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQR"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == 'DECREASING'\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == 'NEITHER'\nprint('Success')\n\nYou are given a string. It contains alphanumeric characters, spaces and symbols(+,-).\nYour task is to find all the substrings of that contains  or more vowels.\nAlso, these substrings must lie in between  consonants and should contain vowels only.\n\nNote:\nVowels are defined as: AEIOU and aeiou.\nConsonants are defined as: QWRTYPSDFGHJKLZXCVBNM and qwrtypsdfghjklzxcvbnm.\n\nInput Format\nA single line of input containing string.\n\nConstraints\n\nOutput Format\nPrint the matched substrings in their order of occurrence on separate lines.\nIf no match is found, print -1.\n\nSample Input\n\nrabcdeefgyYhFjkIoomnpOeorteeeeet\nSample Output\n\nee\nIoo\nOeo\neeeee\nExplanation\n\nee is located between consonant  and.\nIoo is located between consonant  and.\nOeo is located between consonant  and.\neeeee is located between consonant  and.\n\"\"\"\n\n\n\nfrom re import findall\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nl = []\nfor i in range(0, N):\n    l.append(sys.stdin.readline())"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\nJOE\nBOB\nANDY\nAL\nADAM\"\"\") == \"DECREASING\"\nassert solution(\"\"\"11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\"\"\") == \"NEITHER\"\n\"\"\")\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('1\\nAX') == 'INCREASING'\nassert solution('1\\nAD') == 'DECREASING'\nassert solution('1\\nAX') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('123') == 'INCREASING'\nassert solution('a b c d') == 'DECREASING'\nassert solution('a b c d e') == 'NEITHER'\nassert solution('a b b c d e') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\nJOE\nBOB\nANDY\nAL\nADAM\n\"\"\") == \"DECREASING\"\nassert solution(\"\"\"11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\n\"\"\") == \"NEITHER\"\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nprint(solution(stdin))\n'''\n\nN = int(stdin.readline())\nA = set(stdin.readline().strip() for i in range(N))"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\n\nimport sys\n\nstdin = open(sys.argv[1], 'r')\n\nN = int(stdin.readline())\nli = []\nfor i in range(0, N):\n    li.append(stdin.readline().rstrip())\n\nprint(li)"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'No winner!'\nassert solution('1\\n1') == 'No winner!'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nNina wins!\\nJess wins!'\n\nassert solution('3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\nNo winner!'\n\nprint(solution(stdin), end='')"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 10 13''') == \"\"\"George wins!\nJess wins!\nNo winner!\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\n\"\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nprint(\"Test passed\\n\")\n\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\nprint(\"Test passed\\n\")\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3 10 13\\n'\n    'John\\n'\n    'Kelly\\n'\n    'George\\n'\n    'Kelly 1\\n'\n    'George 2\\n'\n    'Kelly 1\\n'\n    'John 2\\n'\n    'George 1\\n'\n    'John 3\\n'\n    'Kelly 3\\n'\n    'Kelly 1\\n'\n    'George 3\\n'\n    'George 1\\n'\n    'John 3\\n'\n    'George 3\\n'\n    'Kelly 1'\n) == 'George wins!\\nNina wins!\\nJess wins!'\n\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"4 10 13\") == \"Jess wins!\"\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\n\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10 13') == 'George wins!'\nassert solution('4 10 13') == 'Nina wins!'\nassert solution('3 10 12') == 'No winner!'\nassert solution('4 10 12') == 'No winner!'\nassert solution('3 10 11') == 'No winner!'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\nassert solution('7 2 1 5 4 3') == '2.23606797749979'\nassert solution('7 1 4 6 3 2') == '0.42857142857142855'\nassert solution('7 -4 6 3 -2') == '2.8284271247461903'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"7 3 0 0 5 4\"\n) == \"2.0\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\nassert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\nSample Input 1:\n-999 -999 -999 -999 -999 -999\nSample Output 1:\n3.0\n\nSample Input 2:\n0 0 0 0 0 0\nSample Output 2:\n0.0\n\nSample Input 3:\n1 0 0 0 0 0\nSample Output 3:\n0.0\n\nSample Input 4:\n-2 -3 -2 -1 -3 -1\nSample Output 4:\n1.0\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\n\"\"\"\n\nimport math\nfrom collections import namedtuple\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport sys\n\nsys.path.insert(0, '.')\n\nfrom util.problem_spec import ProblemSpec\n\n\nclass Solution(object):\n    def __init__(self, x, y, x1, y1, x2, y2):\n        self.x = x\n        self.y = y\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\n    def distance_to_fence(self, x, y):\n        return abs(x - self.x) + abs(y - self.y)\n\n    def distance_to_house(self, x, y):\n        return abs(x - self.x1) + abs(y - self.y1)\n\n    def distance(self):\n        return min(\n            self.distance_to_fence(self.x1, self.y1),\n            self.distance_to_fence(self.x2, self.y2),\n            self.distance_to_house(self.x1, self.y1),\n            self.distance_to_house(self.x2, self.y2),\n        )\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nx, y, x1, y1, x2, y2 = map(int, input().split())"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 3 0 0 5 4''') == '2.0'\nassert solution('''6 0 0 2 7 6''') == '2.0'\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"165\") == \"66\"\nprint(solution(\"165\"))\nassert solution(\"330\") == \"0\"\nprint(solution(\"330\"))\nassert solution(\"123\") == \"132\"\nprint(solution(\"123\"))\nassert solution(\"156\") == \"165\"\nprint(solution(\"156\"))\nassert solution(\"18\") == \"90\"\nprint(solution(\"18\"))\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"330\") == 0\nassert solution(\"156\") == \"165\"\nassert solution(\"799\") == \"788\"\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"330\") == \"0\"\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nassert solution('1') == '0'\nassert solution('1234') == '1243'\nassert solution('1313') == '1331'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\nassert solution(\"1000\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '11'\nassert solution('123') == '1234'\nassert solution('100') == '101'\nassert solution('012345') == '12345'\nassert solution('101') == '110'\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6550') == '7000'\nassert solution('3511') == '3512'\nassert solution('2111') == '2112'\nassert solution('1541') == '1542'\nassert solution('1243') == '1244'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"330\") == '0'\nassert solution(\"156\") == '165'\n\nprint(solution(\"330\"))\nprint(solution(\"156\"))\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '7'\nassert solution('331') == '0'\nassert solution('157') == '158'\nassert solution('1') == '2'\nassert solution('99') == '100'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\n\"\"\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4', 'error'\nprint('test passed')\n\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport itertools\n\ninput = lambda: sys.stdin.readline().strip()\n\nn, m = map(int, input().split())\nt = list(map(int, input().split()))\nl = list(map(int, input().split()))"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == '4'\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == '3'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\nprint(\"Test 1 Passed\")\n\n\"\"\"\n\nimport time\nimport numpy as np"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n''') == '4'\nassert solution('''\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n''') == '3'\nassert solution('''\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n''') == '4'\n\nprint(solution('''\n5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n'''))"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n9 8 7 6\\n3 5') == '0'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n\"\"\"\nimport math"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == '4'\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"11\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\") == \"12\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\") == \"14\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\") == \"15\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('3\\n39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0') == '6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nprint(solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10'))"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('42\\n') == '10'\nassert solution('0\\n') == '1'\nassert solution('1\\n') == '1'\nassert solution('42\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == '10'\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == '1'\nassert solution(\"39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1\") == '6'\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\"\"\"\n\ns = [int(x) for x in input().split()]\n\nn = len(s)\n\nd = set()\n\nfor i in range(n):\n    if s[i] not in d:\n        d.add(s[i])\n\nprint(len(d))\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'no'\nassert solution('11 1111') == 'yes'\nassert solution('111 111') == 'yes'\nassert solution('111 11 10') == 'no'\nassert solution('111 1 11') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 8\") == \"no\"\nassert solution(\"4 3\") == \"no\"\nassert solution(\"4 1\") == \"yes\"\nassert solution(\"2 2\") == \"yes\"\n\"\"\"\n\n\"\"\"\nN, b = map(int, input().split())\n\nmax_length = b\nmax_length_candidates = []"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0\") == \"yes\"\n\nassert solution(\"13 3\") == \"yes\"\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1234567890') == 'no'\n\nimport unittest\n\nclass Test_Solution(unittest.TestCase):\n    def test_solution(self):\n        assert solution('13 3') == 'yes'\n        assert solution('1 0') == 'yes'\n        "
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('11 3') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''13 3''') == '''yes'''\nassert solution('''1 0''') == '''yes'''\n\"\"\"\nimport os\nfrom typing import Union, Dict, List\nfrom io import StringIO"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('5 1') == 'yes'\nassert solution('1 1') == 'no'\nassert solution('1 100') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('123 456 789') == 'no'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"P01K02H03H04\") == '12 12 11 13'\nassert solution(\"H02H10P11H02\") == 'GRESKA'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"P01K02H03H04\"), '12 12 11 13')\n        self.assertEqual(solution(\"H02H10P11H02\"), 'GRESKA')\n        self.assertEqual(solution(\"P06P02P03H04H07H08H09H10H11H12H13H14K01K02K03K04K05K06K07K08K09K10K11K12K13K14K15K16K17K18K19K20K21K22K23K24K25K26K27K28K29K30K31K32K33K34K35K36K37K38K39K40K41K42K43K44K45K46K47K48K49K50K51K52K53K54K55K56K57K58K59K60K61K62K63K64K65K66K67K68K69K70K71K72K73K74K75K76K77K78K79K80K81K82K83K84K85K86K87K88K89K90K91K92K93K94K95K96K97K98K99T10T11T12T13T14T15T16T17T18T19T20T21T22T23T24T25T26T27T28T29T30T31T32T33T34T35T36T37T38T39T40T41T42T43T44T45T46T47T48T49T50T51T52T53T54T55T56T57T58T59T60T61T62T63T64T65T66T67T68T69T70T71T72T73T74T75T76T77T78T79T80T81T82T83T84T85T86T87T88T89T90T91T92T93T94T95T96T97T98T99\")\n        self."
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint(\"Passed all tests.\")\n\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04K05H06\") == \"12 12 12 12\"\nassert solution(\"P12K10H12H11\") == \"GRESKA\"\nassert solution(\"P11H12H11H12H12\") == \"GRESKA\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!')"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....\\n') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\n\n---\n\nThe window is a rectangle of dimensions $R \\times S$.\n\nThe window is not surrounded by fences.\n\nThe fence lengths are not measured along the window sides.\n\nThe only allowed action is to shoot a ray of length $K$ at the center of the window.\n\nYou start with no shots.\n\nYou cannot repeat shots.\n\nThe shots must all be within the window.\n\nEach shot reveals the position of the nearest fly that it hits, and each revealed fly must be killed. If a fly was already hit by a shot before the new one was fired, it is not killed in that shot.\n\nThe window is always square.\n\nYou must output the maximum number of flies that can be killed in a single shot.\n\nSample Input:\n3 5 3\n.....\n.*.*.\n.....\nSample Output:\n1\n+-*..\n|.|*..\n+-*..\n*.*.*\n\nSample Input 2:\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\nSample Output 2:\n2\n......\n.*.*.*\n+-**..\n|.|**..\n+-**..\n*....*\n\nSample Input 3:\n3 3 3\n...\n.*.\n...\nSample Output 3:\n0\n..\n..\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\nprint(solution(\"3 5 3\\n.....\\n.*.*.\\n.....\"))\nprint(solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\"))"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('sample_0.in').read()) == open('sample_0.out').read()\nassert solution(open('sample_1.in').read()) == open('sample_1.out').read()\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3') == '1'\nassert solution('7 6 4') == '2'\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.***') == '1'\nassert solution('****') == '4'\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\n\n\"\"\"\n\nwith open('input.txt') as f:\n    r, s, k = [int(i) for i in f.readline().split()]\n    picture = [list(map(lambda x: '.' if x == '*' else x, list(i))) for i in f.readlines()]\n\nr_s = [i[j] for i in picture for j in range(s) if j!= s // 2]\nr_s = list(filter(lambda x: x == '*', r_s))\nmax_s = len(r_s)\n\nprint(len(picture[0]) * len(picture) // 2 - len(r_s))\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\n------\nThe first line of input contains 3 integers R, S and K (3 \u2264 K \u2264 R, S \u2264 100).\n\nThe next R lines contain S characters each. These characters represent the pixels of the picture. '*' marks a fly, while '.' marks empty space.\n\nYour task is to determine the maximal number of flies that can be killed in a single shot.\n\nFor example, picture below, there are three shots that can kill three flies:\n\n-------output-------\n3\n1 1\n1 1\n1 1\n\nSample Input 2:\n3 5 3\n.....\n.*.*.\n.....\nSample Output 2:\n1\n1\n1\n\n------\nThe first line of input contains 3 integers R, S and K (3 \u2264 K \u2264 R, S \u2264 100).\n\nThe next R lines each contain S characters each. These characters represent the pixels of the picture. '*' marks a fly, while '.' marks empty space.\n\nYour task is to determine the maximal number of flies that can be killed in a single shot.\n\nFor example, picture below, there are three shots that can kill three flies:\n\n-------output-------\n3\n1 1\n1 1\n1 1\n\nSample Input 3:\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\nSample Output 3:\n2\n......\n.*.*.*\n+--..\n|.*|.\n|.|..\n+--..\n*....*\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == '1'\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.**..\\n..**.\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"AS QH JS TS AC\") == 4\nassert solution(\"7C 4S 3D 3H 5S\") == 5\nassert solution(\"AD KS 9C JS KD\") == 5\n\n\"\"\"\n\nfrom collections import Counter\nimport itertools"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC AD AH AS KD') == 4\n\n------Notes------\nfor each card in the hand, find the card that is the most common, and the card that is the least common"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AC AD AH AS KD') == 4\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('2 1 1 1 0 1\\n') == '5\\n'\nassert solution('2 1 1 1 0 1\\n' + '2 1 1 1 0 1\\n') == '3\\n'\nassert solution('2 1 1 1 0 1\\n' + '2 1 1 1 0 1\\n' + '2 1 1 1 0 1\\n') == '0\\n'\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1\\n') == '5'\n\nsolution(stdin)\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 1 0 1\") == \"5\"\nassert solution(\"6 5\") == \"7\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\n\"\"\"\n\nimport sys\nfrom typing import List, Set, Tuple, Dict\n\n\nclass Board:\n    def __init__(self, cols: int, rows: int, board: List[List[int]] = None):\n        self.cols = cols\n        self.rows = rows\n        self.board = board\n\n    def __str__(self):\n        ret = ''\n        for row in self.board:\n            for col in row:\n                ret += '\\t' if col == 0 else str(col)\n            ret += '\\n'\n        return ret\n\n    def print(self):\n        print(self.board)\n\n    def clone(self):\n        return Board(self.cols, self.rows, [row.copy() for row in self.board])\n\n    def put(self, row: int, col: int, val: int):\n        self.board[row][col] = val\n\n    def get(self, row: int, col: int) -> int:\n        return self.board[row][col]\n\n    def can_put(self, row: int, col: int) -> bool:\n        return self.board[row][col] == 0\n\n    def can_move(self, row: int, col: int) -> bool:\n        if row < 0 or row >= self.rows:\n            return False\n\n        if col < 0 or col >= self.cols:\n            return False\n\n        return self.board[row][col] == 0\n\n    def get_possible_moves(self) -> List[Tuple[int, int]]:\n        ret = []\n        for row in range(self.rows):\n            for col in range(self.cols):\n                if self.can_move(row, col):\n                    ret.append((row, col))\n\n        return ret\n\n    def apply_move(self, row: int, col: int) -> None:\n        self.board[row][col] = 0\n\n    def is_win(self) -> bool:\n        for row in range(self.rows):\n            for col in range(self.cols):\n                if self.board[row][col] == 0:\n                    return False\n\n        return True\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 1 1 1 1\") == \"5\"\nassert solution(\"6 5\\n1 1 1 1 1 1\") == \"0\"\nassert solution(\"6 10\\n0 0 0 0 0 0 0 0 0 0 0\") == \"16\"\nassert solution(\"4 1\\n1 1 1 1\") == \"0\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == 7\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 1 0 1\\n0 0 0 0 0\") == \"5\"\n\nprint(solution(\"2 1 1 1 0 1\\n0 0 0 0 0\"))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solve(self, problem_input: str) -> str:\n        \"\"\"\n        https://en.wikipedia.org/wiki/Tetris\n        \"\"\"\n        C, P = problem_input.split(\"\\n\")\n        C, P = int(C), int(P)\n\n        field = [0 for _ in range(C)]\n        for height in [int(i) for i in input().split(\" \")]:\n            field[height-1] += 1\n\n        ans = self.helper(C, P, field)\n        return str(ans)\n\n    def helper(self, C, P, field):\n        if P == 0:\n            return 1\n        if P == 1:\n            return C if field[0] == 0 else 0\n        if P == 2:\n            return 2 * C if field[0] + field[1] == 0 else 0\n        if P == 3:\n            return 2 * C + 1 if field[0] == 0 else 0\n        if P == 4:\n            return self.helper(C, P-1, field) + C if field[0] == 0 else 0\n        if P == 5:\n            return self.helper(C, P-1, field) if field[0] + field[1] > 0 else self.helper(C, P-1, field) + 1 if field[0] + field[1] == 0 else 0\n        if P == 6:\n            return self.helper(C, P-1, field) * 2 if field[0] + field[1] == 0 else 0\n        raise AssertionError(\"unexpected value: {}\".format(P))\n\nclass TestSolution(unittest.TestCase):\n    def test_general(self):\n        assert Solution().solve(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n        assert Solution().solve(\"5 1\\n0 0 0 0 0\") == \"7\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n0 0 0\\n') == '7'\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n'\nassert solution('1 2 3 4 5') == '1 2 3 4 5\\n'\nassert solution(' 1 2 3 4 5 ') =='1 2 3 4 5 \\n'\nassert solution(' 1 2 3 4 5\\n') =='1 2 3 4 5\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                      '`/0|_||Z [email\u00a0protected"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'All your base are belong to us.\\n'\n    'What\\'s the Frequency, Kenneth?'\n) == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''All your base are belong to us.\\n''') == '''@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'''\nassert solution('''What's the Frequency, Kenneth?\\n''') == '''\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n'''\nassert solution('''My father was a sailor.\\n''') == '''@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'''\n'''\n'''\nimport string"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Hello World!\") == \"@3110 \\\\/0|Z1|)!\"\nassert solution(\"The quick brown fox jumps over the lazy dog.\") == \"`\\110/0|Z1|\\010|_|Z3 \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z3 3[6] \\3672/0|Z1|\\010|_|Z"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ \"']['0 |_|$.\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@' + \"'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\nassert solution('Test string') == 'Test\u00a0string'"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\nSample Output:\nAll your base are belong to us.\nWhat's the Frequency, Kenneth?\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nSOLUTION:\n\nimport string\n\nALPHABET = list(string.printable[:126])\nALPHABET[ord(' ')] =''\nALPHABET[ord('\\n')] = '\\n'"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\n-----Challenge-----\nTranslate this text with the following rules:\n\nlowercase letters are translated to uppercase letters\nuppercase letters are translated to lowercase letters\ndigits are translated to corresponding symbols\nOther characters are not changed\n\"\"\"\n\nimport string\n\n\"\"\"\ns = stdin.strip()\nprint(s.translate(str.maketrans({key: '|' + key + '|' for key in string.ascii_lowercase})))\n\"\"\"\n\ntranslator = str.maketrans({key: '|' + key + '|' for key in string.ascii_lowercase})\n\nprint(stdin.strip().translate(translator))\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                    '`[.][/][|_|].`[-]3 #|Z3(,)|_|3[]\\[](`/, '\\\n                                                    '|<3[]\\[][]\\[]3`[-]?', \"Sample Input 1\"\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'\\\n                                                    '`['']['']['']['']['']@'\\\n                                                    '`['']['']['']['']['']3 #|Z3(,)|_|3[]\\[](`/, '\\\n                                                    '|<3[]\\[][]\\[]3`[-]?', \"Sample Input 2\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('10') == 'Alice'\nassert solution('100') == 'Alice'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == \"Alice\"\nassert solution(2) == \"Bob\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == 'Alice'\nassert solution('2\\n2') == 'Bob'\nassert solution('3\\n2') == 'Alice'\nassert solution('4\\n2') == 'Bob'\nassert solution('4\\n4') == 'Bob'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('2\\n1') == 'Alice'\n\nassert solution('3\\n1\\n2\\n3') == 'Bob'\nassert solution('3\\n2\\n1\\n3') == 'Alice'\n\nassert solution('9\\n7\\n6\\n5\\n4\\n3\\n2\\n1') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Bob'\nassert solution('1') == 'Alice'\n\"\"\"\n\nN = int(stdin)"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('4\\n3') == 'Alice'\nassert solution('4\\n1') == 'Bob'\nassert solution('2\\n4') == 'Bob'\nassert solution('6\\n2') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"4\") == \"Alice\"\nassert solution(\"9\") == \"Bob\"\nassert solution(\"25\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == \"Bob\"\nassert solution('1') == \"Alice\"\nassert solution('4') == \"Bob\"\nassert solution('7') == \"Alice\"\nassert solution('9') == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'Alice'\nassert solution('2\\n') == 'Bob'\n\n-------\n1\nAlice\n\nSample Input 2:\n5\nSample Output 2:\nBob\n\n--------\n2\nBob\n\nSample Input 3:\n6\nSample Output 3:\nAlice\n\n--------\n3\nAlice\n\nSample Input 4:\n8\nSample Output 4:\nBob\n\n--------\n4\nAlice\n\nSample Input 5:\n9\nSample Output 5:\nAlice\n\n--------\n5\nBob\n\nSample Input 6:\n10\nSample Output 6:\nAlice\n\n--------\n6\nBob\n\nSample Input 7:\n15\nSample Output 7:\nAlice\n\n--------\n7\nBob\n\nSample Input 8:\n16\nSample Output 8:\nBob\n\n--------\n8\nAlice\n\nSample Input 9:\n21\nSample Output 9:\nBob\n\n--------\n9\nAlice\n\nSample Input 10:\n22\nSample Output 10:\nAlice\n\n--------\n10\nAlice\n\nSample Input 11:\n25\nSample Output 11:\nAlice\n\n--------\n11\nBob\n\nSample Input 12:\n100\nSample Output 12:\nAlice\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 'threethree'\nassert solution('11') == 'eleven'\nassert solution('15') == 'fifteen'\nassert solution('9') == 'nine'\nassert solution('1 10 20 30 40 50 60 70 80 90') == 'ninehundredninety'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has thirtyone letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == 'eight'\nassert solution('twenty') == 'twenty'\nassert solution('thirty') == 'thirty'\nassert solution('forty') == 'forty'\nassert solution('fifty') == 'fifty'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"thirtyone\") == \"thirtyone\"\nassert solution(\"twoseventythree\") == \"twoseventythree\"\nassert solution(\"onehundredtwentyone\") == \"onehundredtwentyone\"\nassert solution(\"threehundrednineteen\") == \"threehundrednineteen\"\nassert solution(\"fivehundredsixhundredthirteen\") == \"fivehundredsixhundredthirteen\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fivehundredthirty\") == \"fivehundredthirty\"\nassert solution(\"sevenhundredseventyseven\") == \"sevenhundredseventyseven\"\nassert solution(\"threehundredninetyeight\") == \"threehundredninetyeight\"\nassert solution(\"twothousand\") == \"twothousand\"\nassert solution(\"eighthundred\") == \"eighthundred\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 'this sentence has $ letters'\nassert solution('7') == 'thirty is the number of letters here'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nthis\\nis\\nthe\\nnumber\\nof\\nletters\") == \"thirty is the number of letters here\"\nassert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has thirtyone letters\"\nassert solution(\"3\\nthis\\n$\\nnumber\\nof\\nletters\") == \"thirty is the number of letters here\"\nassert solution(\"1\\nthis\\n$\\nletter\\nof\\nletters\") == \"thirty is the number of letters here\"\nassert solution(\"2\\nthirty\\nis\\n$\\nletter\\nof\\nletters\") == \"thirty is the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has thirtyone letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"\n\nprint(solution(input()))\n\n\"\"\"\n\nnumber_dict = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6:'six',\n    7:'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16:'sixteen',\n    17:'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    30: 'thirty',\n    40: 'forty',\n    50: 'fifty',\n    60:'sixty',\n    70:'seventy',\n    80: 'eighty',\n    90: 'ninety',\n    100: 'hundred',\n    1000: 'thousand',\n}"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen\"\nassert solution(\"This sentence has thirtyone letters\") == \"This sentence has thirtyone letters\"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen\"\n\nassert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == \"this sentence has thirtyone letters\"\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == \"thirty is the number of letters here\"\n\n-----Notes-----\n- when numbering digits, be careful not to use the word \"zero\" because it is a reserved word in Python and it could cause some of the tests to fail\n\n'''\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\nassert solution('Xabcd') == '0'\nassert solution('XEaEbFabG') == '5'\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n\nfrom utils import checkValue\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\nassert solution(\"aAaAaa\") == \"1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\n\"\"\"\n\nimport re\n\nn = 200\nstr_stdin = stdin()\nm = re.findall(r\"[A-Z]+\", str_stdin)\n\nnop = 0\nfor c in m:\n    if len(c) % 4 == 0:\n        nop += len(c) // 4 - 1\n    else:\n        nop += len(c) // 4\n\nprint(nop)\n\n\"\"\"\n7\n8 A a B b c c\n0\n5 A b b b\n4 c b b c\n6 d a c d\n9 e e e e e\n10 e e e e e\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport io"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3'\n) == 'Odd 6'\nassert solution(\n    '3 3'\n) == 'Even 6'\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 3\") == \"Not a moose\"\nassert solution(\"0 0\") == \"Not a moose\"\nassert solution(\"0 20\") == \"Not a moose\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\nassert solution('3 3\\n2 2') == 'Even 6'\nassert solution('3 4\\n2 2') == 'Even 7'\n\"\"\"\n\n\"\"\"\n@dataclass\nclass Node:\n    value: int\n    left: int\n    right: int\n    \n    def __str__(self):\n        return '{}({},{},{})'.format(self.value, self.left, self.right, self.right-self.left)\n        \n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('1 1') == 'Not a moose'\n\nprint('Success')\n\n-----Test----\nSample Input:\n2 3\nSample Output:\nOdd 6\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\"\nimport math"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\n\"\"\"\n\nl, r = [int(c) for c in stdin.split()]\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\n\"\"\"\n\ntines = [int(tine) for tine in stdin.split()]\nprint(\"Odd\" if tines[0] * 2 + tines[1] > tines[1] * 2 + tines[0] else \"Even\",\n        tines[0] * 2 + tines[1] if tines[0] * 2 + tines[1] > tines[1] * 2 + tines[0] else tines[1] * 2 + tines[0])\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 0\") == \"Not a moose\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\nassert solution('3 3\\n3 3') == 'Even 6'\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('tomo') == 1\nassert solution('mono') == 1\nassert solution('dak') == 1\nassert solution('6666') == 1\nassert solution('ja') == 2\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"tomo\") == \"tom\"\nassert solution(\"mono\") == \"mono\"\nassert solution(\"dak\") == \"dak\"\nassert solution(\"6666\") == \"6666\"\nassert solution(\"aaab\") == \"aab\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == 'a'\nassert solution('a') == 'a'\nassert solution('2') == 'b'\nassert solution('b') == 'b'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '2334'\nassert solution('1 2 3 4 5') == '23541'\nassert solution('1 2 3 4 5 6 7 8 9') == '235486789'\nassert solution('1 2 3 4 5 6 7 8 9 0') == '23548678910'\nassert solution('1 2 3 4 5 6 7 8 9 0 1 2 3') == '23341023541'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"g-4 i-444 h-44 t-8\") == \"gh\"\nassert solution(\"g-4 i-444 h-44 t-8\") == \"gh\"\nassert solution(\"g-4 i-444 h-44 t-8\") == \"gh\"\nassert solution(\"g-4 i-444 h-44 t-8\") == \"gh\"\nassert solution(\"g-4 i-444 h-44 t-8\") == \"gh\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '1'\nassert solution('dak') == '2'\nassert solution('6666') == '2'\n\nprint(solution(stdin))\n\n-----\n1\n\nSample Input:\n3\ntomo\nmono\ndak\n6666\nSample Output:\n1\n\n2\n\n3"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('11') == ''\nassert solution('234') == ''\nassert solution('jlfkd') == ''\nassert solution('1') == 'j'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"tomo\") == \"tomo\"\nassert solution(\"mono\") == \"mono\"\nassert solution(\"dak\") == \"dak\"\nassert solution(\"6666\") == \"6666\"\n\nprint(solution(\"tomo\"))\nprint(solution(\"mono\"))\nprint(solution(\"dak\"))\nprint(solution(\"6666\"))\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('726') == 'NO'\nassert solution('727') == 'YES'\nassert solution('728') == 'NO'\nassert solution('729') == 'YES'\nassert solution('730') == 'NO'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n t\\no\\n m\\n a\\n 6\\n 6\") == '6'\nassert solution(\"2\\n p\\np\\n r\\nr\\nr\") == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\nimport math\nimport sys\n\nsys.path.append(\"../\")\n\nfrom common import INPUT_INT_FUNC, INPUT_STR_FUNC, AssertRet, get_lines\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"\"\"..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.A.#.#.###\\n.#.#.#.#.*.*.\\n...#...#...*..\"\n\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A) == \\\n'.#..\\n#.#.\\n#.A\\n#.#.\\n..#.'\nassert solution(DOG) == \\\n'.#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n#.#.#.#.*.*.\\n...#...#...*..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\n------Solution------\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"...#...\\n.#.#.#.\\n..*A..\\n.#.#.#.\\n...#...\\n\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\\n\"\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n\nfrom enum import Enum\nfrom typing import List, Tuple\nfrom math import floor\n\n\nclass Frame(Enum):\n    P = 0\n    W = 1\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == '..#..\\n.##.\\n#.A.\\n##.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.##.#.#.#.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n\nimport math\nimport sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(1 << 30)\nread = lambda: sys.stdin.readline().rstrip()\nread_list = lambda: list(map(int, read().split()))\nread_list_str = lambda: list(read())\nread_list_str_line = lambda: list(map(str, read().split()))\nread_str = lambda: read()\nread_char_list = lambda: list(read())\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n\n\"\"\"\nHave you ever wanted to write a secret message inside a hat? Well, Python can do that too!\n\nTo begin with, we will create a secret message inside a string variable.\n\nInstructions\n1. Create a variable, secret_message, which should contain only letters (lowercase), numbers, and punctuation marks.\n2. Add a hash mark (#) at the end of the string.\n3. Print the variable, secret_message.\n4. Run the code.\n\nNote: You can use `#` as a punctuation mark.\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 3.141593\nassert solution(\"21\") == 1385.442360\n\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0.3\") == \"0.25\"\nassert solution(\"1\") == \"0.5\"\nassert solution(\"2\") == \"1.0\"\nassert solution(\"1.5\") == \"1.25\"\nassert solution(\"1.9\") == \"1.16\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3.141593'\nassert solution('1') == '3.141593'\nassert solution('0') == '0.000000'\nassert solution('-1') == '0.000000'\nassert solution('-100') == '0.000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"2\") == \"2.000000\"\nassert solution(\"21\") == \"1385.442360\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '1385.442360'\nassert solution('10000') == '5.000000'\nprint('Test passed')\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"2\") == \"2.000000\"\nassert solution(\"3\") == \"5.193977\"\nassert solution(\"4\") == \"9.100000\"\nassert solution(\"5\") == \"13.141402\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'Invalid input'\nassert solution('-5') == 'Invalid input'\nassert solution('0') == 'Invalid input'\nassert solution('10000') == 'Invalid input'\n\nassert solution('1') == '3.141593'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '3.141593\\n2.000000'"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '3.141593'\nassert solution('2') == '2.000000'\nassert solution('3') == '5.926399'\nassert solution('4') == '7.846160'\nassert solution('5') == '8.153021'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n\nSample Input 1:\n3\n2 -3 3\nSample Output 1:\n-5\n\nSample Input 2:\n5\n129 44 394 253 147\nSample Output 2:\n-499998\n\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n\nn = int(input())\nk = list(map(int, input().split()))\nprint(sum(filter(lambda x: x < 0, k)))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n\nimport sys"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"3\\n1 -2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 -2 3\") == 2\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\nimport math\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass Test_solution(unittest.TestCase):\n\n    def setUp(self):\n        os.environ['OUTPUT_PATH'] = './tests/output.txt'\n        self.stdin = StringIO('')\n\n    def test_true_1(self):\n        self.stdin.write('3\\n1 -2 3')\n        expected = '2'\n        self.stdin.seek(0)\n        with open(os.environ['OUTPUT_PATH'], 'w') as f:\n            a = solution(self.stdin)\n            b = f.write(a)\n        self.stdin.seek(0)\n        with open(os.environ['OUTPUT_PATH'], 'r') as f:\n            c = f.read()\n        self.assertEqual(b, len(c))\n\n    def test_true_2(self):\n        self.stdin.write('5\\n129 44 394 253 147')\n        expected = '0'\n        self.stdin.seek(0)\n        with open(os.environ['OUTPUT_PATH'], 'w') as f:\n            a = solution(self.stdin)\n            b = f.write(a)\n        self.stdin.seek(0)\n        with open(os.environ['OUTPUT_PATH'], 'r') as f:\n            c = f.read()\n        self.assertEqual(b, len(c))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 -2 3\\n\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\nd = []\n\nfor i in range(0, n):\n    d.append(sum(a[0:i + 1]))\n\nprint(min(d))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n3 3 3\\n') == '6'\nassert solution('1\\n4 1 2\\n') == '8'\nassert solution('3\\n4 1 2\\n') == '8'\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nnums = [int(i) for i in sys.stdin.readline().strip().split()]\n\nans = 0\nfor i in range(1, N):\n    ans += max(nums[i - 1], nums[i])\n\nprint(ans)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"6\"\nassert solution(\"4 1 2\") == \"8\"\n\"\"\"\n\nN = int(input())\ntimes = [int(i) for i in input().split()]\n\nprint(sum(times)*N)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\nprint(sum(arr) - min(arr))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '3'\nassert solution('2\\n2\\n2\\n3') == '8'\nassert solution('2\\n2\\n2\\n2\\n2\\n3') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\nprint('Success')\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\"\"\"\n\nn = int(input())\ns = [int(i) for i in input().split()]\ns.sort()\nprint(sum(s[n - 1::2]))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\\n4 1 2\\n3 1 1\\n\") == \"8\", \"The result is not correct\"\nprint(\"The result is correct\")\n\n-----------------------------------------------\n\nimport sys"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0S01') == 'NOT POSSIBLE'\n\n-----Notes-----\nTime and space complexity: O(N)\n\"\"\"\n\nimport sys\n\nINF = sys.maxsize\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(20000)"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('111111') == '111111'\nassert solution('111') == '111'\nassert solution('1111110111010') == '1111110111010'\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"NOT POSSIBLE\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0D11\") == \"NOT POSSIBLE\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0R11\") == \"NOT POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == \"2\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n\") == \"NOT POSSIBLE\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, c = list(map(int, sys.stdin.readline().split()))\nfruits = list(map(int, sys.stdin.readline().split()))\n\nfruits.sort()\nn = len(fruits)\n\ni = 0\ntotal = 0\nfor j in range(n):\n    while total + fruits[j] <= c:\n        total += fruits[j]\n        j += 1\n    i += 1\nprint(i)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n3 1 2 1 1''') == '4'\n\nassert solution('''7 5\n1 5 4 3 2 1 1''') == '3'\n\nassert solution('''5 5\n3 1 2 1 1''') == '4'\n\nassert solution('''10 500\n1 2 3 4 5 6 7 8 9 10''') == '5'\n\nassert solution('''10 500\n1 2 3 4 5 6 7 8 9 10''') == '5'"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == 4\n\"\"\"\n\n\"\"\"\nRead 2 strings: 'n' and 'c' and another one with 'n' integers in it.\nThe last line contains 'n' integers: the weights of fruits.\nYou have to find the most different kind of fruits that you can eat.\nPrint the most different kind of fruits.\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 5\n3 1 2 1 1''') == '4'\nassert solution('''7 5\n1 5 4 3 2 1 1''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\nassert solution('7 5\\n1 5 4 3 2 1 1') == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5SSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SSPPR\") == \"5\\n10\"\n\"\"\"\n\n\"\"\"\nEach player earns 1 point for each round they win.\n\nIf both players show the same symbol in a round, the game is a tie and no points are awarded.\n\nIf both players show the same symbol, one of the players must have shown the symbol in a previous round. If the player that showed the symbol in the previous round has shown an earlier symbol in this round, then the player does not get any points for this round. If the player that showed the symbol in the previous round has shown an later symbol in this round, then the player receives one point for this round.\n\nIf both players show a symbol earlier in the game, the player that showed the symbol earlier in the game gets 2 points for this round.\n\nIf both players show a symbol later in the game, the player that showed the symbol later in the game gets 2 points for this round.\n\nIf both players show the same symbol in the first round, the player that showed the symbol later in the game gets 1 point for this round.\n\nThe game ends when one player gets 2 points.\n\nWrite a program that simulates the game and calculates the score of each player.\n\n-----Input-----\nThe first line contains the integer $N$, the number of players.\n\nThe next $N$ lines each contain a single non-empty string, each of whose characters is either the character \u2018S\u2019, \u2018P\u2019 or \u2018R\u2019.\n\n-----Output-----\nThe program should output the score for each player, in a new line.\n\nThe score for each player is calculated according to the rules above.\n\nThe output should contain $N$ lines, each containing the string \u201cPlayer X\u201d where $X$ is the index of the player in the order of player 1 to player $N$.\n\nIf the score for a player is 0, then the output should contain 0 for that player\u2019s score.\n\nThe output should contain 1 line with the string \u201cTie\u201d if the game ends with a tie.\n\n-----Examples-----\nSample Input 1:\n3\nSP\nRR\nSP\nSample Output 1:\nPlayer 1: 1\nPlayer 2: 1\nPlayer 3: 0\nTie\n\nSample Input 2:\n3\nRR\nSS\nRP\nSample Output 2:\nPlayer 1: 0\nPlayer 2: 2\nPlayer 3: 1\n\nSample Input 3:\n3\nSP\nRR\nSP\nSample Output 3:\nPlayer 1: 1\nPlayer 2: 0\nPlayer 3: 1\n\nSample Input 4:\n4\nSSP\nSSP\nSSR\nSSR\nSample Output 4:\nPlayer 1: 2\nPlayer 2: 2\nPlayer 3: 0\nPlayer 4: 0\nTie\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\n\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SSPPR\") == \"5\\n10\"\nassert solution(\"SSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n\nprint('Passed all tests.')\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n2\\n3\\n0') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') =='still running'"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\n\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\nprint(solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\"))\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') =='still running'\nassert solution('2\\n2\\n5\\n9\\n10') == '4'\nassert solution('5\\n2\\n5\\n9\\n10') =='still running'\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n11\") == \"4\"\nassert solution(\"2\\n5\\n9\\n10\") == \"still running\"\n\nSample Input 3:\n7\n2\n5\n9\n10\n17\n18\n19\nSample Output 3:\n13\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') =='still running'\nassert solution('8\\n2\\n5\\n9\\n10\\n17') == '4'\nassert solution('2\\n2\\n5\\n9\\n10\\n17') =='still running'\n\"\"\"\n\n\"\"\"\nIf you have a stopwatch that is counting the number of seconds that have elapsed, and want to find out how many seconds have elapsed since it was started, then you can take the current elapsed time as the number of seconds since the start of the stopwatch. \n\nBut this isn\u2019t correct, because the clock on the stopwatch is never reset. If it was reset, then it would be counting the seconds since the start of the stopwatch.\n\nIf instead you\u2019re trying to find out how many seconds have elapsed, then you can do it by subtracting the current elapsed time from the start time.\n\"\"\"\n\n\"\"\"\nReal-world scenarios:\n\nImagine you work at a clock factory, and have to compute how long it takes for the clock to make and send out a new clock every day.\n\nOn the first day it takes 30 minutes for the clock to produce the first clock.\nOn the second day it takes an hour for the clock to produce the first clock, and then an hour for the second clock to be produced.\nOn the third day it takes an hour for the clock to be produced, and then an hour for the second clock to be produced, and then an hour for the third clock to be produced.\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n11\") == \"4\"\nassert solution(\"2\\n5\") == \"still running\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 2\\n2 1 2\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('6 6 6 6 6') == 'impossible'\nassert solution('2 2') == 'impossible'\nassert solution('6 1 3 2 2 3') == '0.6'\nassert solution('6 6 6 6 6') == 'impossible'\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2 1 3') == 'impossible'\nassert solution('3\\n1 2 3') == '0.33333'\n'''\n\nimport itertools\nimport math\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == '0.6'\nassert solution(\"2\\n2 2\") == 'impossible'\nassert solution(\"8\\n7 5 2 5 7 5 3\") == '0.6'\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nassert solution('10\\n1 10 10') == '0.7'\nassert solution('100\\n1 100 100') == '0.1'\n\nprint(solution(input()))"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1 3 2 2 3\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\\n2 2\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n2 1 3 4 5\") == \"0.6\"\nassert solution(\"6 9\\n2 1 3 4 5 6 7\") == \"0.6\"\nassert solution(\"4 10\\n2 1 3 4 5\") == \"impossible\"\nassert solution(\"6 10\\n2 1 3 4 5 6 7 8 9\") == \"0.6\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\nl.sort()\nminim = 0\nmaxim = 0\n\nfor i in range(n):\n    if l[i] < i+1:\n        break\n    maxim += l[i]\n    \nmaxim = int(maxim)\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 3 2 2 3\\n2 2\") == \"0.6\"\nassert solution(\"6 1 3 2 2 3\\n2 2\") == \"impossible\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\nprint('Successfully passed all tests.')\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 4 1 4') == 'Emma'\nassert solution('1 6 1 6') == 'Tie'\nassert solution('1 8 1 8') == 'Tie'\n\n\"\"\"\nimport collections\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\nassert solution('''1 8 1 8\n1 10 2 5''') == 'Tie'\n\n'''\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\nassert solution(\"1 8 1 8\\n1 10 6 8\") == \"Gunnar\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\"\"\"\n\na, b, c, d = map(int, stdin.split())"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n\n\nimport unittest"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == 'Emma'\nassert solution('''1 8 1 8\n1 10 2 5''') == 'Tie'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\n\"\"\"\n\nn = int(stdin.readline())\nli = list(map(int, stdin.readline().split()))\nmumble = ['mumble' in word for word in stdin.readline().split()]\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\nassert solution(\"1 2 3 mumble mumble 7 mumble 8\") == \"makes sense\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nimport math"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 3 mumble 5') =='makes sense'\nassert solution('8 1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('6\\n1 2 3 mumble mumble 4 mumble 5') =='something is fishy'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"5\n1 2 3 mumble 5\n\"\"\"\n    ) =='makes sense'\n\nassert solution(\n\"\"\"8\n1 2 3 mumble mumble 7 mumble 8\n\"\"\"\n    ) =='something is fishy'\n\nassert solution(\n\"\"\"8\n1 2 3 mumble mumble 7 mumble 8\n\"\"\"\n    ) =='something is fishy'\n\nprint('all tests have passed sucessfully')"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\nassert solution('5 3 6 9 12 15') == '1 18'\nassert solution('3 0 4 5 7') == '3 15'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 25 49 81\\n\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7 9 12\") == \"1 18\"\n\"\"\"\n\nfrom math import ceil, sqrt\nfrom typing import Tuple\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'\n\"\"\"\n\nimport re\n\nimport sys\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'INCORRECT'\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'INCORRECT'\nassert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    8\n    1 5\n    6 2\n    3 1\n    5 0\n    4 6\n    0 3\n    2 7\n    7 4\n    \"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"\n    4\n    2 3\n    1 0\n    0 2\n    3 1\n    \"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"\n    8\n    0 0\n    0 2\n    2 2\n    4 2\n    4 6\n    6 4\n    5 5\n    5 7\n    \"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"\n    8\n    5 5\n    0 0\n    0 3\n    2 3\n    4 3\n    4 6\n    6 4\n    7 4\n    \"\"\"\n) == \"INCORRECT\"\n\nassert solution(\n    \"\"\"\n    3\n    1 2\n    0 1\n    2 0\n    \"\"\"\n) == \"INCORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\n\nassert solution('''8\n0 2\n1 0\n2 3\n3 0\n4 6\n0 3\n2 7\n7 4\n''') == 'CORRECT'\n\nassert solution('''4\n2 3\n1 0\n0 2\n3 1\n''') == 'CORRECT'\n\nassert solution('''4\n0 3\n2 3\n1 0\n2 1\n''') == 'INCORRECT'\n\nassert solution('''4\n2 3\n1 2\n0 2\n3 1\n''') == 'INCORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\nprint(solution(input()))"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\n-----Problem-----\nGiven a proposed solution to an $N$-queens puzzle, you must verify whether it is a valid solution (i.e., whether no queen can attack another queen).\n\n-----Solution-----\nUse a backtracking search to solve the problem. Start by checking that the solution is valid for a single row (where no queen can attack another queen). Then, remove the queen in that row and then attempt to solve the puzzle again. If the solution is valid, then you can check all the remaining rows.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n0 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n0 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\nSample Output 2:\nINCORRECT\n\"\"\"\n\nimport sys\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> None:\n        N = int(stdin[0])\n        if N == 0:\n            print('CORRECT')\n            return\n\n        x = [0] * N\n        y = [0] * N\n        for i in range(1, N + 1):\n            x[i - 1], y[i - 1] = map(int, stdin[i].split())\n        count = 0\n        for i in range(N):\n            for j in range(i, N):\n                if abs(x[i] - x[j]) == abs(y[i] - y[j]):\n                    count += 1\n        if count == N:\n            print('CORRECT')\n        else:\n            print('INCORRECT')"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n\n\"\"\"\n\nN = int(input())\ns = [[int(i) for i in input().split()] for _ in range(N)]\nfor i in range(N):\n    for j in range(N):\n        print(s[i][j], end=\" \")\n    print()\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\nassert solution('4\\n0 1 1 1\\n0 0 2 0\\n1 2 0 1\\n1 0 1 0') == '1 2 3 1 11'\nassert solution('2\\n0 0 1\\n1 0 1') == '1 1 1'\nassert solution('5\\n0 0 2 0\\n1 2 0 1\\n1 0 1 0\\n1 2 3 1\\n1 0 1 0') == '1 2 3 1 11'\n\nimport sys"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\nassert solution('3\\n0 1 1\\n1 0 1') == '1 1 1'\nassert solution('3\\n0 0 1\\n0 0 0') == '1 1 1'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4 5 6 7') == '1 2 3 4 5 6 7'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n\nprint('The code run without errors.')\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0\\n') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\\n') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\") == \"Saturday\"\nassert solution(\"1 1\") == \"Thursday\"\n\nassert solution(\"10 12\") == \"Sunday\"\nassert solution(\"28 2\") == \"Tuesday\"\n\nassert solution(\"19 1\") == \"Sunday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday'\n\n---\nSample Input 1:\n1 1\nSample Output 1:\nThursday\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\nassert solution('17 1') == 'Saturday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\nassert solution(\"1 1\")!= \"Wednesday\"\nassert solution(\"18 1\")!= \"Saturday\"\n\nassert solution(\"1 1\") == \"Thursday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('17 1') == 'Saturday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"18 2\") == \"Saturday\"\nassert solution(\"7 1\") == \"Sunday\"\nassert solution(\"7 2\") == \"Monday\"\nassert solution(\"7 3\") == \"Tuesday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\n\"\"\"\n\nimport datetime\n\nday, month = map(int, input().split())\n\ntoday = datetime.datetime.today()"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\n\nassert solution(\"17 1\") == \"Saturday\"\n\nprint(\"Success\")\n\n-----Test cases-----\nhttps://www.codewars.com/kata/5f75f0e4e15c926c660013d5/train/python\n\n2.8.\nWrite a function `calc_n_pow(n, p)` that returns a list with the first and last elements equal to n ** p.\nThe list should contain `n**p` and `(n+1)**p` in that order.\nNote: `n` and `p` are positive integers.\n\nFor example, if `n` and `p` are both equal to 4, then `calc_n_pow(4, 4)` should return the list `[16, 64]`.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if the last element of `calc_n_pow(n, p)` is equal to `n ** p` and `(n + 1) ** p`.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d0fd564d926d0016cc4a1/train/python\n\n2.9.\nWrite a function `has_two_same_adjacent_digits(n)` that returns True if there are two adjacent digits in n that are the same.\nOtherwise it should return False.\n\nFor example, the number 1234 has two adjacent digits that are the same (1 and 2). The number 2314 doesn't have two adjacent digits that are the same. The number 22314 has two adjacent digits that are the same (2 and 3).\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `has_two_same_adjacent_digits(n)` returns True if there are two adjacent digits in n that are the same.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/5254b17c6e8e83cc0000183/train/python\n\n2.10.\nWrite a function `has_two_different_adjacent_digits(n)` that returns True if there are two adjacent digits in n that are different.\nOtherwise it should return False.\n\nFor example, the number 1234 has two adjacent digits that are different (1 and 3). The number 2314 doesn't have two adjacent digits that are different. The number 22314 has two adjacent digits that are different (2 and 3).\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `has_two_different_adjacent_digits(n)` returns True if there are two adjacent digits in n that are different.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.11.\nWrite a function `has_two_same_adjacent_digits(n)` that returns True if there are two adjacent digits in n that are the same.\nOtherwise it should return False.\n\nFor example, the number 1234 has two adjacent digits that are the same (1 and 2). The number 2314 doesn't have two adjacent digits that are the same. The number 22314 has two adjacent digits that are the same (2 and 3).\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `has_two_same_adjacent_digits(n)` returns True if there are two adjacent digits in n that are the same.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.12.\nWrite a function `count_substrings(s)` that takes a string `s` and returns the number of substrings of the string that are within the string `s`.\n\nNote: Substrings are ordered by first index, and by last index. For example, the substrings of the string `abracadabra` are `abra`, `brac`, `racadab`, `adabrac`, `abracad`, `racadabra`, and `adabr`.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `count_substrings(s)` returns the number of substrings of the string that are within the string `s`.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.13.\nWrite a function `max_sequence_of_two(l)` that takes a list of positive integers and returns the maximum sum of two elements that can be obtained from one element from the list.\n\nNote: The list can not be empty.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `max_sequence_of_two(l)` returns the maximum sum of two elements that can be obtained from one element from the list.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.14.\nWrite a function `find_triplet_count_of_two(l)` that takes a list of positive integers and returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\nNote: The list can not be empty.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `find_triplet_count_of_two(l)` returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.15.\nWrite a function `find_triplet_count_of_two(l)` that takes a list of positive integers and returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\nNote: The list can not be empty.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `find_triplet_count_of_two(l)` returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.16.\nWrite a function `find_triplet_count_of_two(l)` that takes a list of positive integers and returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\nNote: The list can not be empty.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `find_triplet_count_of_two(l)` returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\n-----Test cases-----\nhttps://www.codewars.com/kata/526d2d2b9d7cb534c9000036/train/python\n\n2.17.\nWrite a function `find_triplet_count_of_two(l)` that takes a list of positive integers and returns the number of triplets that can be created from three elements from the list that sum up to the given number.\n\nNote: The list can not be empty.\n\n-----Output-----\nWrite 1 line of code to test the correctness of solution:\nCheck if `find_triplet_count_of_two(l)` returns the number of triplets that can be created from three elements from the list that sum"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(    '1 1') == 'Thursday'\nassert solution(    '8 8') == 'Sunday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\"\nimport datetime\n\nDAYS_MAP = {\n    0: 'Monday',\n    1: 'Tuesday',\n    2: 'Wednesday',\n    3: 'Thursday',\n    4: 'Friday',\n    5: 'Saturday',\n    6: 'Sunday'\n}\n\ndate = input().split(' ')\nday, month = int(date[0]), int(date[1])\n\nmonth_days = datetime.date(2009, month, 1).strftime('%A').capitalize()\nprint(DAYS_MAP[(datetime.date(2009, month, 1).weekday() + 1) % 7])"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('1\\n500\\n12\\n') == '129\\n480'\nassert solution('1\\n1\\n2\\n') == '0\\n0'\nassert solution('1\\n1\\n1\\n') == '0\\n0'\nassert solution('1\\n5\\n12\\n') == '1\\n5\\n20'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"1\\n100\\n12\\n\") == \"129\\n480\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n') == '1'\nassert solution('100\\n500\\n12\\n') == '129'\nprint('The local tests are done. Try Solution\\n')"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"129\"\nassert solution(\"4\\n100\\n4\\n12\") == \"129\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\n\"\"\"\n\nfrom math import ceil, floor\n\nL, D, X = [int(x) for x in input().split()]\n\nans = ceil(L / (X + 1)) * (X + 1)\nans = floor(D / (X + 1)) * (X + 1)\nprint(ans)\nprint(ans + 1)\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4') == '1234'\n\nimport re\n\nn = [int(i) for i in re.findall('\\d+', input())]\nl, d, x = n[0], n[1], n[2]"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n4') == '3'\nassert solution('1\\n100\\n12') == '129'\nassert solution('1\\n100\\n4') == '40'\nassert solution('1\\n100\\n4') == '40'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\n\"\"\"\n\n\"\"\"\nGiven a triangle, find the area of its convex hull.\n\nConvex hull of a triangle is the set of points that make the triangle with sides of maximum length.\n\nFor example, the convex hull of a triangle with sides a = 5, b = 13 and c = 3 is the set of points with coordinates:\n\np_1 = (0, 0)\np_2 = (5, 0)\np_3 = (0, 13)\np_4 = (5, 13)\np_5 = (5, 3)\np_6 = (0, 3)\n\nIf the input is:\n\n    5 13 3\n    1 2\n    3 4\n    6 5\nthe output should be:\n\n    17.433\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '4.0\\n3'\n\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '6.0\\n3'\n\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3'\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '4.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '6.0\\n3'\nassert solution('2 1\\n1 1\\n3 2\\n4\\n4 3\\n5 2\\n2 2\\n2 3\\n3 3\\n') == '8.0\\n5'\nassert solution('2 1\\n1 1\\n3 2\\n4\\n4 3\\n5 2\\n2 2\\n2 3\\n3 3\\n') == '8.0\\n5'\n\n\"\"\"\n\nimport numpy as np\nimport sys\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\n\"\"\"\n\nfrom typing import List, Tuple\nfrom math import hypot\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\n\nassert solution('''3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4''') == '1.0\\n0'\n\nassert solution('''3 3\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\n\nassert solution('''3 3\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0438\u0440\u0430\u043c\u0438\u0434\u044b \u0438\u0437 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 XML. \u041a\u0443\u0431\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0442\u0440\u0435\u0445 \u0446\u0432\u0435\u0442\u043e\u0432: \u043a\u0440\u0430\u0441\u043d\u044b\u0439 (red), \u0437\u0435\u043b\u0435\u043d\u044b\u0439 (green) \u0438 \u0441\u0438\u043d\u0438\u0439 (blue). \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0443\u0431\u0438\u043a\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u0435\u0433\u043e \u0446\u0432\u0435\u0442, \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u043a\u0443\u0431\u0438\u043a\u0438, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u044f\u043c\u043e \u043f\u043e\u0434 \u043d\u0438\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n<cube color=\"blue\">\n  <cube color=\"red\">\n    <cube color=\"green\">\n    </cube>\n  </cube>\n  <cube color=\"red\">\n  </cube>\n</cube>\n\n\u0412\u0432\u0435\u0434\u0435\u043c \u043f\u043e\u043d\u044f\u0442\u0438\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0443\u0431\u0438\u043a\u043e\u0432. \u0421\u0430\u043c\u044b\u0439 \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u0443\u0431\u0438\u043a, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0440\u043d\u044e XML \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c 1. \u041a\u0443\u0431\u0438\u043a\u0438, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u044f\u043c\u043e \u043f\u043e\u0434 \u043d\u0438\u043c, \u0438\u043c\u0435\u044e\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c 2. \u041a\u0443\u0431\u0438\u043a\u0438, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u044f\u043c\u043e \u043f\u043e\u0434 \u043d\u0438\u0436\u0435\u043b\u0435\u0436\u0430\u0449\u0438\u043c\u0438 \u043a\u0443\u0431\u0438\u043a\u0430\u043c\u0438, \u0438\u043c\u0435\u044e\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c 3. \u0418 \u0442. \u0434.\n\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u044d\u0442\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e, \u0437\u0435\u043b\u0435\u043d\u043e\u0433\u043e \u0438 \u0441\u0438\u043d\u0435\u0433\u043e \u0446\u0432\u0435\u0442\u043e\u0432.\n\nSample Input:\n\n<cube color=\"blue\"><cube color=\"red\"><cube color=\"green\"></cube></cube><cube color=\"red\"></cube></cube>\nSample Output:\n\n4 3 1\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 XML. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0434\u0432\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u0430:\n\nchild - \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\nparent - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0435\u043d \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n<class>\n  <child>A</child>\n  <child>B</child>\n  <child>C</child>\n  <parent>D</parent>\n  <parent>E</parent>\n  <parent>F</parent>\n</class>\n\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441 A \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 D \u0438 \u043a\u043b\u0430\u0441\u0441 E, \u043a\u043b\u0430\u0441\u0441 F \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 B \u0438 \u043a\u043b\u0430\u0441\u0441\u0430 C.\n\n\u041a\u043b\u0430\u0441\u0441 A \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u044b\u043c \u043f\u0440\u0435\u0434\u043a\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 F, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441 A \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u043a\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 F. \u041a\u043b\u0430\u0441\u0441 F \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u043a\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 A.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0435\u043d \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 A:\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 XML. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0434\u0432\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u0430:\n\nchild - \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\nparent - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0435\u043d \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n<class>\n  <child>A</child>\n  <child>B</child>\n  <child>C</child>\n  <parent>D</parent>\n  <parent>E</parent>\n  <parent>F</parent>\n</class>\n\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441 A \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043a"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\nprint(solution(\"3\"))\nprint(solution(\"30\"))\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\n\nimport math\nfrom functools import reduce"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3''') == '''2'''\nassert solution('''30''') == '''7'''\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10') == '5'\nassert solution('100') == '11'\n'''"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\n\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\"\n) == \"1\\nHE GOT AWAY!\"\n\nassert solution(\n    \"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\"\n) == \"HE GOT AWAY!\"\n\nassert solution(\n    \"N-FBI1\\nJE-CIA\\nG-MI6\\nRF-KGB1\\nO-FBI1\"\n) == \"1\\nHE GOT AWAY!\"\n\n\"\"\"\n\nimport re\nimport sys\nfrom typing import List, Match\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\"\n) == \"1\"\n\nassert solution(\n    \"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\"\n) == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\n\"\"\"\n\nimport re\n\nn = [i for i in stdin.split(\"\\n\") if i!= '']\n\nb = [i for i in n if re.match(r'^(?!^[0-9])[A-Z]{1,11}[0-9]{1,3}$', i)]"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1 2 3\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"N321-CIA\") == \"HE GOT AWAY!\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\nHE GOT AWAY!\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\nSample Case 1\nInput:\nI-NTERPOL\nG-MI6\nRF-KGB1\n\nOutput:\n2\n\nSample Case 2\nInput:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\n\nOutput:\n1\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n\"\"\"\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3\\n4 5 4') == '6.843530573929037'"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == \"8.0\"\n\"\"\"\nfrom decimal import Decimal"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 3\\n4 5 4') == '6.843530573929037'\nprint(solution(stdin))\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n3 3 3\n4 5 4\n\"\"\") == \"6.843530573929037\"\nprint(\"Teste unit\u00e1rio passou para: \", solution(\"\"\"\n2\n3 3 3\n4 5 4\n\"\"\"))"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5') == '2.23606797749979'\nassert solution('5\\n1 2 3 4') == '2.23606797749979'\nassert solution('5\\n5 4 3 2') == '5.964188182439941'\nassert solution('5\\n5 5 4 3 2') == '6.922292993630615'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == \"8.0\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 4 5') == '6.843530573929037'\n\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n6 4\\n2') == '7.06362078923'\nassert solution('3 5\\n4 4\\n2') == '6.843530573929037'\n\"\"\"\n\nfrom collections import namedtuple\nfrom math import hypot\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 5\\n4 5 4\\n\") == \"8.0\"\nassert solution(\"8 2 7\\n3 6 7\\n\") == \"10.0\"\nassert solution(\"3 3 3\\n4 5 4\\n\") == \"6.843530573929037\"\nassert solution(\"6 10 7\\n4 5 4\\n\") == \"8.0\"\nassert solution(\"4 10 6\\n3 5 7\\n\") == \"6.843530573929037\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n\nn = int(input())\nm = n\nn += 1\nn_sum = 0\nwhile n:\n    num = n % 10\n    n_sum += num\n    n = n // 10\n    if m % n_sum == 0:\n        print(m)\n        break\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nprint(solution('25'))\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"1\") == \"1\"\nassert solution(\"999999999\") == \"999999999\"\n\"\"\"\n\n\n\"\"\"\n1\n999\n999999\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24') == '24'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+3\") == \"8\"\nassert solution(\"1+9+8+4+3+2\") == \"18\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\n\n\"\"\"\nDefinition for Doubleplusgood.\nclass Doubleplusgood:\n    pass\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '1+9+8+4'\n) == '7'\nassert solution(\n    '1+9+8+4'\n) == '7'\n\n\"\"\"\n\nfrom math import log10\nfrom collections import Counter\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\n\"\"\"\n\nimport random\nimport string"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nprint('all tests passed.')\n\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"1 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 2') == '2 5'\n\n\"\"\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\nassert solution('3 0 -3 1 5 2\\n') == '2 0 2'\nassert solution('4 0 -4 1 3 4 5\\n') == '1 1 4 3'\nassert solution('5 0 -5 1 2 3 4 5\\n') == '2 2 0 3 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\nassert solution(\"2 2 -4 5\\n\") == \"5 -2 4\"\nassert solution(\"3 3 4 0 -1 -3 1 1 2\") == \"2 3\"\nassert solution(\"3 0 1 -2 3 -4 1 1 2\") == \"3 1 -2\"\nassert solution(\"1 4 3 0 1 0 -1 3 3 4\") == \"1 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('1 5 -2') == '5 1'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('5 2 1 2 -4 5') == '2 2 5 -2 4'\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\"\"\"\n\nfrom typing import Dict, List\nimport collections\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2\n2 1 2 1 2\n''') == '2 2 2 1 1'\nassert solution('''9 3\n1 3 3 3 2 2 2 1 1\n''') == '1 1 1 3 3 3 2 2 2'\nprint('Success')\n\n-----\n3 3\n1 2 3\n-----\n3\n1 2 3\n'''"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 3 2 2') == '1 1 1 3 3 3 2 2 2'"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\n\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"5 2\", \"2 1 2 1 2\", \"2 1 2 1 2\", \"2 1 2 1 2\", \"2 1 2 1 2\", \"2 1 2 1 2\"]) == \"2 2 2 1 1 1\"\nassert solution([\"9 3\", \"1 3 3 3 2 2 2 1 1\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\"]) == \"1 1 1 3 3 3 3 2 2 2\"\nassert solution([\"6 4\", \"1 4 2 4 1 4\", \"1 4 2 4 1 4\", \"1 4 2 4 1 4\", \"1 4 2 4 1 4\", \"1 4 2 4 1 4\"]) == \"1 4 2 4 1 4 1\"\nassert solution([\"5 2\", \"2 1 2 1 2\", \"2 1 2 1 2\", \"2 1 2 1 2\", \"2 1 2 1 2\", \"2 1 2 1 2\"]) == \"2 2 2 1 1 1\"\nassert solution([\"9 3\", \"1 3 3 3 2 2 2 1 1\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\", \"1 1 1 3 3 3 2 2 2\"]) == \"1 1 1 3 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 2 1 2') == '2 2 1 1 1'\nassert solution('9 3') == '1 1 1 3 3 3 2 2 2'\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\n\"\"\"\n\nimport math\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\nclass Solution:\n    def solution(self, a: int, i: int):\n        return math.ceil(a / i)\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(self.solution(\"38 24\"), \"875\")\n        self.assertEqual(self.solution(\"1 100\"), \"100\")"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"38 24\") == \"875\"\nprint(solution(\"38 24\"))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\nimport unittest\nclass Tests(unittest.TestCase):\n    def test_01(self):\n        self.assertEqual(solution('38 24'), '875')\n\n    def test_02(self):\n        self.assertEqual(solution('1 100'), '100')"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('38 24') == '875'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"38 24\") == \"875\"\nprint(solution(\"38 24\"))\n\"\"\"\n\nimport math\n\n[A, I] = [int(x) for x in input().split()]\n[J, K] = [int(x) for x in input().split()]\n\nprint(math.ceil(I / A) * J * K)"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"38 24\") == \"875\"\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\nprint(solution(input()))\n\"\"\"\n\nA, I = map(int, input().split())\nprint(A // I + 1 if A % I!= 0 else A // I)\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''38 24\n''') == '875'\nprint('Test pass.')\n\n-----\n\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 24\\n') == '875'\nprint(solution(input()))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('104 108') == '104'\n\nprint(solution('734 893'))\nprint(solution('221 231'))\nprint(solution('104 108'))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n\n\"\"\"\nimport math\n\na, b = input().split()\nc = max(a, b)\nd = min(a, b)\nprint(int(str(c)[::-1]))\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.strip().split()))\n    print(a if a > b else b)\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('933 112') == '821'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"123 1234\") == \"1234\"\n\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 1\n''') == 'impossible'\nassert solution('''6 11\n''') == 'contest'\nassert solution('''6 13\n''') == 'impossible'\nassert solution('''7 95\n''') == 'contest'\nassert solution('''6 45\n''') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\nprint(solution(stdin=input()))\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nl, w = input().split()\nl, w = int(l), int(w)\n\nlst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\na = []\nfor i in range(1, l+1):\n    for x in lst:\n        if sum(list(map(lambda x: int(x), x))) == w and len(x) == i:\n            a.append(x)"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nprint('All tests passed.')\n\n-----Explanation-----\nThis is a classic backtracking problem. Take $l = 11$ and $w = 131$. We can easily write $l$ lines of code to generate all possible strings of length $l$. We try each string and check if it is a valid solution.\n\nThe leftmost character of the first line of the solution can have any value between 'a' and 'z'. So, we generate all strings of length $l$ that start with character 'a'. We then consider the second character of the first line of the solution. We generate all strings of length $l$ that start with character 'b'. We then consider the third character of the first line of the solution. We generate all strings of length $l$ that start with character 'c'. We then consider the fourth character of the first line of the solution. We continue until we have considered all possible characters.\n\nThere are $n!$ permutations of length $l$ and the weight of the string is $c = 131$. So, there are $n! (131)$ permutations of length $l$ whose weight is less than or equal to $131$. In other words, there are fewer than or equal to $130n!$ permutations of length $l$ with weight less than or equal to $131$. This means that at least one of the solutions exists.\n\nThe string that we are looking for is 'programming'.\n\n\"\"\"\n\nimport math\n\nl, w = [int(x) for x in input().split()]"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('1 1') == 'impossible'\nassert solution('10 101') == 'impossible'\nassert solution('12 123') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('0 0') == 'impossible'\nassert solution('0 1') == 'impossible'\nassert solution('0 0') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('3 52') == 'impossible'\nassert solution('8 101') == 'impossible'\nassert solution('20 80') == 'impossible'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''11 131''') == '''programming'''\nassert solution('''7 96''') == '''contest'''\nassert solution('''5 6''') == '''impossible'''\nassert solution('''7 7''') == '''impossible'''\nassert solution('''8 10''') == '''impossible'''\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == 'a'\nassert solution('10') == 'a'\nassert solution('101') == 'aa'\nassert solution('110') == 'aa'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--''') == '''\\n.^\n--\\n'''\n\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '''\\nBBABABABABAC\\nBBBABABABABA\nBBABABABABAB\\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 'X'\") == \".X\\n--\\n\\n.X\\n--\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nABABABABABAB\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected_output\n\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".^\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 \\'X\\'\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--\\n\\n'\nassert solution('3 12 \\'A\\'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".X\") == \".^\"\nassert solution(\"ABABABABABAC\") == \"BBABABABABAB\"\nassert solution(\"BABABABABABB\") == \"BBABABABABAB\"\nassert solution(\"ABABABABABAB\") == \"BBABABABABAB\"\n\"\"\"\n\nimport unittest\nfrom typing import List\nfrom math import sqrt\nfrom collections import namedtuple\nfrom copy import deepcopy\n\nPoint = namedtuple('Point', 'x y')\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 'X'\") == \"X^\\n--\\n.X\\n--\\n\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nABABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n.X\\n--\\n') == '.^\\n--\\n'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\"\n\"\"\"\nWe could generate all possible subsets of an input set in a bottom-up fashion by keeping track of the largest subset that contains all elements before that element.\n\nTo generate the next subset, we must have removed the first element of the current subset.\n\nHow can we generate all subsets?\n\nIf we want to generate all subsets, we must iterate over all elements of the input set. If we remove a number from the input set, we will obtain a new set, with the removal still in place.\n\nIf we iterate over all elements, we must also iterate over all subsets of the rest of the input set. That is to say, we can obtain subsets of the rest of the set by removing the first element from the input set.\n\nWe must also iterate over all subsets of the rest of the set, with the removal of the first element from the set.\n\nIt is important to note that if we can iterate over the subsets of the remaining set without the removal of the first element, then we can iterate over all subsets of the set.\n\nSuppose we have an input set of 4 elements, S. We can generate all subsets of S in the following manner:\n\ns1 = {S}\ns2 = {S}\ns3 = {S}\ns4 = {S}\n\ns3 = {S, S}\ns4 = {S, S}\n\ns4 = {S, S, S}\n\ns4 = {S, S, S, S}\n\ns4 = {S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S}\n\ns4 = {S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S, S}\n\nWe can see that it is important to keep track of the maximum subset of a set S, because we need to know the number of subsets of the rest of the set.\n\nLet S = {s1, s2, s3, s4, s5} be the set of all subsets of S.\n\nGiven a set, S, we can generate all subsets of the set using the following recursive function:"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\"\n\n\"\"\"\n2 4 4 14\n\n1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\n\"\"\"\n\nfrom collections import deque\nfrom math import inf"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\nassert solution(\"100 80 60 240\") == \"\"\"0 0 4\n0 3 0\n1 1 1\n\"\"\"\n\n\"\"\"\n\nLet's assume we have a map with all given numbers in a dictionary. The values in the map are indexes of the numbers in the list. Let's translate a list of given numbers to their indexes and then to a string that represents a form of a list.\n\nSo, for example, the list [2, 3, 4] becomes the string \"1234\".\n\nFor example, the list [2, 2] becomes the string \"22\".\n\nFinally, the list [1, 2, 1, 3, 2, 1, 3] becomes the string \"123123132\"\n\nYour task is to write a function that translates a list of numbers into a string. The numbers in the list are given in the initial parameters of the function and its return value should be a string.\n\nInput: Three arguments. The first one is a list of numbers, the second and the third are integers with default value equal to 0.\n\nOutput: The function should return a string.\n\nExample:\n\nseven_boom([1, 2, 3, 4, 5]) == \"12345\"\nseven_boom([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"123412341234123412341234123412\"\nseven_boom([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == \"12345123451234512345123451234512341234123412341234123412341234123412341234123412\"\nseven_boom([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540,"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nassert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\"\n\nprint(solution(\"100 80 60 240\"))\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n5\\n') == 'good job', 'error'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == 'good job', 'error'\nassert solution('11\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 'good job', 'error'\nassert solution('13\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == 'good job', 'error'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n') == '1\\n3\\n5', 'error'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == 'good job'\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == '1\\n3\\n6\\n12'"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"6\\n5\\n4\\n3\\n2\\n1\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n14\"\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == 'good job'\nassert solution('2\\n4\\n5\\n7\\n8\\n9\\n10') == '1 3 6\\n12'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n10') == '1 3 6\\n12'\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6'\n\n-----\n\nSample Input:\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\nSample Output:\n1\n3\n6\n12"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n\"\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15') == 'good job'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '1\\n3\\n6\\n12\\n17\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1\\n2\\n3\\n4\\n5\\n6\\"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n\") == \"good job\"\nassert solution(\"4\\n1\\n2\\n3\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\"\n\n\"\"\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\nprint(solution(\"10 8.9 40075000 272.1\"))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom math import log\nfrom fractions import Fraction\n\nclass Point2D:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f'Point2D({self.x}, {self.y})'"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nN, P, S, V = map(float, sys.stdin.readline().split())\n\nprint(int(S * (1 + 1 / P) / V))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 8.9 40075000 272.1''') == '157079.04857106 15.598261092309'\n\"\"\"\n\nimport math\n\nn, p, s, v = map(float, input().split())\n\nt = n * math.log(n) / p\n\nc = (s / v) ** (1 / 2)\n\nprint(t * (1 + 1 / c))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1.5 3.5 2.5\") == \"98.0917\"\n\"\"\"\n\nimport math\n\nn, p, s, v = map(float, input().split())\n\nt = (s * (1 + 1 / math.sqrt(2)) / v)"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"34\"\nassert solution(\"10\") == \"252\"\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"19\"\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"3\") == 4\nassert solution(\"4\") == 8\nassert solution(\"5\") == 13\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 4\nassert solution('6') == 7\nassert solution('7') == 13\nassert solution('8') == 20\nassert solution('9') == 34\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n\"\"\"\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0') == 0\nassert solution('2') == 1\nassert solution('3') == 4\nassert solution('4') == 14\nassert solution('5') == 26\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\nassert solution(a) == b\n\n-----Solution-----\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('ABC') == 'ABC'\nassert solution('ABCD') == 'ABCD'\nassert solution('ABAC') == 'ABC'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\\nA\\nA\\nA\") == \"3\"\nassert solution(\"A\\nA\\nC\\nD\") == \"2\"\nassert solution(\"A\\nA\\nA\\nA\") == \"3\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('A\\nA\\nA\\nA') == '3'\nassert solution('A\\nB\\nA\\nA') == '2'\nassert solution('B\\nB\\nB\\nA') == '0'\nassert solution('B\\nB\\nA\\nA') == '1'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nB\\nB\\nB\\nC') == '0'\nassert solution('4\\nC\\nC\\nC\\nA') == '1'\nassert solution('4\\nD\\nD\\nD\\nB') == '2'\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nA\\nB\\nA\\nC\") == \"1\"\nassert solution(\"4\\nA\\nB\\nD\\nA\") == \"1\"\nassert solution(\"4\\nA\\nC\\nB\\nD\") == \"4\"\nassert solution(\"4\\nB\\nC\\nB\\nA\") == \"1\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCD\\nABCD\\nABCD\\nA\") == \"3\"\nassert solution(\"ABCD\\nACD\\nABCD\\nACD\\nA\") == \"2\"\nassert solution(\"ABCD\\nBCD\\nABCD\\nABCD\\nA\") == \"3\"\nassert solution(\"ABCD\\nABCD\\nABCD\\nABCD\\nABCD\") == \"4\"\nassert solution(\"ABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nBCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD\\nABCD"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\nassert solution('4\\nA\\nA\\nB\\nC') == 0\nassert solution('4\\nA\\nA\\nA\\nB') == 0\nassert solution('4\\nB\\nB\\nB\\nB') == 4\nassert solution('4\\nB\\nB\\nC\\nC') == 4\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == '..xx..\\nxx..xx\\n..xx..\\n', \"Check\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'3 3 1 2\\n' +\n'.x.\\n' +\n'x.x\\n' +\n'.x.') == '..xx..\\n' +\n'xx..xx\\n' +\n'..xx..'\n\nassert solution(\n'3 3 1 2\\n' +\n'...\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'...') == '...\\n' +\n'xx..xx\\n' +\n'xx..xx\\n' +\n'xx..xx'\n\nassert solution(\n'5 4 1 2\\n' +\n'...\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'...\\n' +\n'...') == '...\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'x.x'\n\nassert solution(\n'5 4 1 2\\n' +\n'...\\n' +\n'x.x\\n' +\n'...\\n' +\n'...\\n' +\n'x.x\\n' +\n'x.x') == '...\\n' +\n'xx..\\n' +\n'xx..\\n' +\n'xx..'\n\nassert solution(\n'3 3 1 2\\n' +\n'.x.\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'x.x\\n' +\n'x.x') == '..xx..\\n' +\n'xx..xx\\n' +\n'..xx..'"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \"...xx...\"\n\n-----Constraints-----\n1 \u2264 R, C \u2264 50\n1 \u2264 Z_ R, Z_ C \u2264 5\n\n-----Test Cases-----\nSample Case 0\nSample Case 1\nSample Case 2\nSample Case 3\nSample Case 4\nSample Case 5\nSample Case 6\nSample Case 7\nSample Case 8\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \".xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 4 1 2\\nx..\\nx..\\nx..\\n.x.\") == \"x..x..\\nx..x..\\nx..x..\\n.xx..\"\nassert solution(\"3 5 1 2\\n..\\n..\\n..\\n.x.\") == \"..\\n..\\n..\\n..\\n.x.\"\nassert solution(\"3 5 1 2\\n.x.\\n..\\n..\\n.x.\") == \"..\\n..\\n..\\n..\\n.x.\"\nassert solution(\"3 6 1 2\\nx..\\nx..\\nx..\\n.x.\") == \"x..x..\\nx..x..\\nx..x..\\n.xx..\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 3 3\\n.x.\\nx.x\\n.x.\") == \"..xxx..\\nxxx..xx\\n..xxx..\"\nassert solution(\"3 3 3 3\\n..x.\\nx.x\\n..x.\") == \"..xxx..\\nxxx..xx\\n..xxx..\"\nassert solution(\"3 3 3 3\\n.x.\\nxx.\\n..x.\") == \"..xxx..\\nxxx..xx\\n..xxx..\"\nassert solution(\"3 3 3 3\\nx.\\nx.\\nx.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \".xx.\\nxx.x\\n.xx.\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \".xx.\\nxx.x\\n.xx.\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \".xx.\\nxx.x\\n.xx.\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \".xx.\\nxx.x\\n.xx.\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \".xx.\\nxx.x\\n.xx.\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('F 60 13 20\\n') == '14 20'\nassert solution('B 50 4 20\\n') == '4 20'\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"23 51 32\"\nassert solution(\"B 60 13 20\") == \"23 51 32\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F 60 13 20\\n\") == \"14 20\"\nprint(\"Cool!\")\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''F 60 13 20\n''') == '14 20'\nprint(solution(stdin))\n\n-----Explanation-----\nIn the first test case, the clock is currently at 13:20, and it will roll back 20 minutes to 11:20 after the time change.\n'''"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\nF 60 13 20') == '14 20'\n'''\nimport sys"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\\n\") == \"14 20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 80 11 30\") == \"15 20\"\nassert solution(\"B 15 18 40\") == \"4 10\"\nassert solution(\"B 33 38 59\") == \"8 2\"\n\nprint(solution(\"F 60 13 20\"))\nprint(solution(\"F 80 11 30\"))\nprint(solution(\"B 15 18 40\"))\nprint(solution(\"B 33 38 59\"))\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\nF 60 13 20') == '14 20'\nassert solution('2\\nB 30 -5 60') == '22 45'\nassert solution('3\\nF 0 23 59') == '1 0'\nassert solution('4\\nB 30 -5 60') == '22 45'\nassert solution('5\\nF 0 23 59') == '1 0'\n\n-----Explanation-----\nThe example above shows the clock reading 0:23:59 at the start, then it rolls forwards at 1 minute, at which point it is 1:0:0. Then it rolls backwards at 30 minutes, at which point it is 23:50:0. Finally, it rolls forward again at 1 minute, at which point it is 1:1:0.\n\nSample Input\n1\nF 60 13 20\nSample Output\n14 20\nThe above example shows the clock reading 0:23:59 at the start, then it rolls forwards at 1 minute, at which point it is 1:0:0. Then it rolls backwards at 30 minutes, at which point it is 23:50:0. Finally, it rolls forward again at 1 minute, at which point it is 1:1:0.\n\n\"\"\"\n\n\"\"\"\nExplanation\n\nAt every time step, we must\n\n1. Roll forward or backward if necessary to align the current time with the reference time, where the reference time is the clock's baseline clock time.\n2. If the current time is ahead of the reference time, that means the clock has rolled forward, so we must go ahead by (2^n) minutes.\n3. If the current time is behind the reference time, that means the clock has rolled backwards, so we must go behind by (2^n) minutes.\n\nBecause time is discrete, the clock can only roll forward or backward by one step. So we know there is some n such that it is the smallest number that satisfies the above condition.\n\nTo compute the number of minutes that we have rolled forward or backward, we simply subtract our current time from the reference time. This is a simple calculation.\n\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('F 60 13 20') == '14 20'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"FEB 29\") == \"nope\"\nassert solution(\"DEC 25\") == \"yup\"\n\"\"\"\n\nstdin = input().split(\" \")\nmonth, day = stdin[0], stdin[1]"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"SEP 9\") == \"nope\"\nassert solution(\"SEP 30\") == \"nope\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('FEB 1') == 'nope'\n\nSample Case:\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct 31\nOct"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\n\nprint(\"Tests passed.\")\n\nSolution:"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 31, FEB 28, MAR 4, APR 25, MAY 1, JUN 22, JUL 4, AUG 30, SEP 21, OCT 31, NOV 23, DEC 12\") == \"yup\"\nassert solution(\"NOV 16, FEB 26, MAR 3, APR 19, MAY 10, JUN 29, JUL 12, AUG 22, SEP 27, OCT 3, NOV 9, DEC 30\") == \"nope\"\nassert solution(\"NOV 21, FEB 13, MAR 2, APR 8, MAY 17, JUN 24, JUL 7, AUG 24, SEP 12, OCT 30, NOV 2, DEC 28\") == \"yup\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('SEP 1') == 'nope'\nassert solution('JAN 2') == 'nope'\nassert solution('NOV 30') == 'nope'\nassert solution('NOV 10') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"NOV 30\") == \"yup\"\nassert solution(\"NOV 31\") == \"nope\"\nassert solution(\"NOV 32\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 30\") == \"nope\"\nassert solution(\"OCT 32\") == \"nope\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 10\") == \"nope\"\n\nprint(solution(\"OCT 31\"))\nprint(solution(\"NOV 10\"))\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(INPUT))\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n        \"#.#.#.#.\\n#.#.#.#\\n#.honi#.\\n#oker.#\\n#.nera#.\\n#irak.#\\n#.#.#.#\\n#.#.#.#\"\n\"\"\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\"\"\"\n\nimport sys\n\nN, M, U, L, R, D = map(int, sys.stdin.readline().strip().split())\nm = []\nfor i in range(N):\n    m.append(sys.stdin.readline().strip())\n\nprint(f\"#.#.#.#.{'.'*((R-L)+(U-D)*(M-2))}\\n{'#'*M}\")\nfor i in range(U, N-D):\n    print(f\"#{m[i][L-1:R]}#{'.'*(M-2)}#\")\nprint(f\"{'#'*M}#.#.#.#.{'.'*((R-L)+(U-D)*(M-2))}\")\nfor i in range(U, N-D):\n    print(f\"{'.'*(D)}#{m[i][R-1:L:-1]}#{'.'*(M-2)}#\")\nprint(f\"{'#'*M}#.#.#.#.{'.'*((R-L)+(U-D)*(M-2))}\")\nfor i in range(U, N-D):\n    print(f\"#{m[i][L-1:R:-1]}#{'.'*(M-2)}#\")\nprint(f\"#.#.#.#.{'.'*((R-L)+(U-D)*(M-2))}\")\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\\nnera\") == \"\"\"#.#.#.#.\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"#.#.#.#\\n#.honi#.\\n#.oker.#\\n#.nera#.\\n#.#irak.#\\n#.#.#.#.\\n#.#.#.#.\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 2 2\\nhoni\\noker\\nnera\\nirak\") == \"...#.#.#.\\n.honi#.\\n..oker.#\\n...nera#\\n...#irak.\\n.###.#.#\\n...#.#.#\\n#.#.#.#.\"\n\nassert solution(\"3 5 2 2\\nx\\ny\\nz\\nw\") == \"...x...\\n..y...\\n...z..\\n..w...\"\n\nassert solution(\"3 5 2 2\\nx\\ny\\nz\\nw\\nx\") == \"...x...\\n..y...\\n...z..\\n..w..x\\n#..y#.#\\n...#z..\\n..x#.#.\\n...#.#.#\\n#.#.#.#.\"\n\nassert solution(\"5 7 2 2\\nw\\nx\\ny\\nz\\nx\\ny\\nx\\nz\\nz\\n\") == \"...w...\\n...x...\\n..y...x\\n...y...\\n..x...x\\n...z...z\\n...#...#\\n..z...#.\\n#...#...\\n#...#...\\n.z..#...\\n...z...z\"\n\nassert solution(\"1 1 1 1\\n1\") == \"...#\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 2 2\\nhoni\\noker\\nera\\nnera\") == \"###\\n.#h#\\n.#.#\\n#er#\\n.#.#\\n###\\n#.#\\n#.#\"\nassert solution(\"1 4 1 2\\nA\\nB\\nB\") == \"#.\\n#A#\\n#B#\\n#B#\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 2\\nhoni\\noker\\nera\\nnera\") == \"##\\n#honi#\\n##\\n###\\n#nera#\\n##\\n###\\n##\\n###\\n##\\n###\\n##\"\nassert solution(\"4 4 2 2\\nhoni\\noker\\nera\\nnera\") == \"#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n#.nera#.\\n##oker##\\n#.irak#.\\n#.#.#.#.\\n#.#.#.#.\\n#.#.#.#.\\n#.#.#.#.\\n##.###.\\n#.###.#\"\n\"\"\"\nfrom typing import List, Dict, Tuple, Set, Iterable, Callable\nimport re\nimport sys\nimport copy\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\\n\"\n\n-----Problem-----\nYou're given a word w and a list of words words. Find all the ways to write w as a concatenation of a word in words (not necessarily consecutively)\n\n-----Solution-----\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"+Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"+Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\n-----Problem-----\n(P)In chess, the bishop moves diagonally, any number of squares. Given two different squares of the chessboard, determine whether a bishop can go from the first to the second in one move.\n\nThe program receives as a parameter the text of the chessboard and the coordinates of the squares from which the bishop starts and ends. The program should print YES if it is possible to make a move like this, or NO otherwise.\n\n-----Sample Input-----\n8 8\na1 b3\na2 c6\nh8 g5\ni2 h3\na7 h6\nh1 g8\na8 h8\na1 a1\na1 c3\n-----Sample Output-----\nYES\n\n-----Explanation-----\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nA bishop can move like this:\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\nNO\n\n-----Notes-----\nThe program receives a board of strings, where the squares are described by letters and numbers (from a1 to h8):\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8 h8     |\n|---------------|\n\n|---------------|\n|    a1 b3     |\n|    a2 c6     |\n|    h8 g5     |\n|    i2 h3     |\n|    a7 h6     |\n|    h1 g8     |\n|    a8"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0438\u0437 \u041c\u043e\u0441\u043a\u0432\u044b \u043d\u0430 \u041f\u0438\u0442\u0435\u0440\u0435.\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0431\u043e\u0442 \u0432 \u043e\u0434\u043d\u0443 \u0440\u0430\u0431\u043e\u0442\u0443.\n\u0420\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0432\u0438\u0434\u0430 (\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b)\n\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f.\n\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f companies_clean.csv, \u0433\u0434\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c - \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0441\u0442\u044c.\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0444\u0430\u0439\u043b\u0430\u0445 \u0438\u0437 \u0442\u0435\u0445 \u0436\u0435 \u0444\u0430\u0439\u043b\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c.\n\u0422\u043e \u0435\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f.\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043a\u0430\u043a\u043e\u043c \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0444\u0430\u0439\u043b.\n\n\u0412\u0410\u0416\u041d\u041e: \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 getName(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0431\u0435\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f.\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Rb8,Nf6,Bb4,Qd4,Kd2,Bb3,a3,Rb2,Qf1,Rf1,Kf1,Bb1,Bc1,a2,Qd2,Qc2,Qa1,Nb1,Bc2,Rd1,a7,Nc3,Bb8,Bb7,Qf7,Rc8,Bg7,Rh7,Bf6,Nd7,Rd8,Bg6,Kg7,Nh6,Bh6,Kg8,Rf7,a8,Rh8,Bf8,a6,Kg5,Nf6,Bb5,Nb7,Rb5,Kc6,a4,Kg4,Kc5,a5,a1,Kd1,Rf8,Kd8,Kd7,Rg7,Kg5,Rh6,Kf7,Rf8,Kg8,a7,a8,Kf8,Rh8,Kg7,Nb7,Bb6,Kd6,Kc8,Bb6,a5,a6,Kd5,Rb7,Nc8,Rh8,a2,a3,Nc2,a1,Rf1,Bh5,a8,Rb8,Kg8,Rh7,Bh7,Rh8,Bg8,Kd8,Qh8,Kb8,Nf8,Kb7,Rd8,Kc8,Rd7,Nc6,Kd5,Kc7,Bh4,Kg6,a4,a7,Nc5,Bb7,Rb7,Bb6,Nc4,Qh6,Kc6,Rd6,Rg6,a5,Nc3,Kc7,Bb5,a8,Bh8,Bf8,Kg7,Kg8,a7,Kg7,Kf8,Rb8,Kf8,Bb8,Kf7,Rf8,Kg8,Bg8,a8,Rb7,a7,Rf8,Rd7,a7,Nh8,Qf8,Qe8,Kf8,Qh8,a8,Kf7,Kf8,Bf8,Kd7,Nh6,Rb8,Nh6,Kg7,Kf8,Rf8,Rb8,Kf7,Rf8,Rb8,Kf8,Rb8,Kf8,Kd8,Rf8,Kd8,Kf8,Bg8,Kd7,Nh6,Kg7,Kg8,Kf8,Rf8,Kd8,Kg8,Rf8,Kg8,Kd8,Rf8,Kg8,Rf8,Kg8,Kd8,Bg8,Rf8,Kg8,Kd8,Kf8,Bg8,Bb8,Rf8,Kg8,Kd8,Kg8,Kd8,Kg8,Bg8,Rf8,Kg8,Kd8,Kg8,Kf8,Bg8,Kg8,Kf8,Rf8,Bg8,Kg8,Kd8,Kg8,Rf8,Kg8,Kf8,Bg8,Bg7,Kf8,Kf7,Kg8,Kg7,Kg8,Kg8,Bg8,Rf8,Kg8,Kg8,Kg8,Kg8,Rf8,Rb8,Kg8,Kg8,Rg8,Bg8,Kg8,Bg8,Bg7,Kf8,Kg8,Kf8,Rf8,Kg8,Kg8,Kg8,Bg8,Rf8,Kg8,Kg8,Kg8,Rf8,Bg8,Kg8,Bg8,Bg8,Bg8,Rf8,Kg8,Rg8,Kg8,Rg8,Kg8,Rg8,Kg8,Kg8,Kg8,Kg8,Rg8,Kg8,Kg8,Kg8,Kg8,Bg8,Bg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Rg8,Rf8,Rf8,Rg8,Rg8,Rg8,Rg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Rg8,Kg8,Kg8,Kg8,Kg8,Rg8,Rf8,Rg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,Kg8,K"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\"\n\"Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|r.|:::|b.|::q|k.|:::|n.|::r|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|::p|::p|::p|::p|::p|::p|::p|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|...|:::|n.|:::|...|:::|...|:::|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|:::|...|:::|...|:::|...|:::|...|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|...|:::|...|:::|.P|:::|...|:::|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|R|.|:N|:B|:Q|:K|B|:::|.R|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\"\n)\nassert solution(\n\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\"\n\"Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|r.|:::|b.|::q|k.|:::|n.|::r|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|::p|::p|::p|::p|::p|::p|::p|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|...|:::|n.|:::|...|:::|...|:::|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|:::|...|:::|...|:::|...|:::|...|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|...|:::|...|:::|.P|:::|...|:::|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\" \\\n     \"|R|.|:N|:B|:Q|:K|B|:::|.R|\\n\" \\\n     \"+---+---+---+---+---+---+---+---+\\n\"\n)\n\nprint(\"OK\")\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('3.000000 6.000000') == 'Need more materials!'\n\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.9000000 4.1000000\") == \"Need more materials!\"\nassert solution(\"0.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"0.0 4.1\") == \"Need more materials!\"\n\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(''))\n\n'''\n\nA = float(input())\nN = float(input())"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.0000000 4.000000\") == \"Need more materials!\"\nassert solution(\"1.000000 5.000000\") == \"Need more materials!\"\nassert solution(\"1.000000 6.000000\") == \"Diablo is happy!\"\nassert solution(\"1.000000 1.000000\") == \"Need more materials!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000000 4.000000\") == 'Diablo is happy!'\nassert solution(\"1.0 4.0\") == 'Need more materials!'\nassert solution(\"0.1 0.5\") == 'Need more materials!'\nassert solution(\"1.0 2.0\") == 'Need more materials!'\nassert solution(\"1.5 2.0\") == 'Diablo is happy!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.000000 5.000000\") == \"Need more materials!\"\nassert solution(\"1.0000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.0000000 5.000000\") == \"Need more materials!\"\nassert solution(\"1.010000 4.010000\") == \"Diablo is happy!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('2.000000 5.000000') == 'Need more materials!'\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"2.0 2.0\") == \"Need more materials!\"\nassert solution(\"0.2 0.1\") == \"Need more materials!\"\nassert solution(\"0.1 0.2\") == \"Need more materials!\"\nassert solution(\"0.1 0.01\") == \"Diablo is happy!\"\n\"\"\"\n\na, n = map(float, input().split())\nprint(\"Diablo is happy!\" if n * a >= 0.1 * a else \"Need more materials!\")\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"tests/4.txt\").read()) == \"Need more materials!\"\n\"\"\"\n\nimport sys\n\nN, A = map(float, sys.stdin.readline().split())\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"10 1 10 3 1\") == \"use the stairs\"\nassert solution(\"10 1 10 3 2\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'use the stairs'\nassert solution('5 2 2 1 0') == '5'\nassert solution('5 2 2 1 1') == 'use the stairs'\nassert solution('10 10 1 2 1') == 'use the stairs'\nassert solution('5 2 1 2 1') == '5'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 1 10 2 1''') == '6'\nassert solution('''1 1 10 1 1''') == 'use the stairs'\nassert solution('''1 1 1 1 1''') == 'use the stairs'\nassert solution('''10 10 1 1 1''') == 'use the stairs'\nassert solution('''10 9 9 9 9''') == 'use the stairs'\n\nimport math\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"1 1 1 2 1\") == \"use the stairs\"\nassert solution(\"10 1 10 20 1\") == \"use the stairs\"\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'use the stairs'\nassert solution('0 10 1 0 0\\n') == 'use the stairs'\nassert solution('10 10 10 10 0\\n') == 'use the stairs'\nassert solution('10 10 1 10 0\\n') == 'use the stairs'\nassert solution('10 10 1 1 1\\n') == 'use the stairs'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"2 1 2 1 1\") == \"use the stairs\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('10 1 1000000000 1000000000 1 1000000000 1') == 'use the stairs'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"10 1 10 2 1\"\n) == \"use the stairs\"\nassert solution(\n    \"5 1 6 2 1\"\n) == \"3\"\nassert solution(\n    \"1 1 1 1 1\"\n) == \"use the stairs\"\nassert solution(\n    \"1 1 1 1 2\"\n) == \"6\"\nassert solution(\n    \"3 2 2 2 2\"\n) == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"5 2 6 1 1\") == \"5\"\n\"\"\"\n\nf, s, g, u, d = [int(i) for i in input().split()]\n\nfloors = abs(g - s) + 1"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"1\", \"5\", \"10\", \"30\", \"60\"]) == \"512.0\"\nassert solution([\"1\", \"5\", \"20\", \"50\", \"100\"]) == \"50.0\"\nassert solution([\"1\", \"5\", \"50\", \"100\"]) == \"100.0\"\nassert solution([\"1\", \"5\", \"10\", \"20\", \"100\"]) == \"129.8\"\nassert solution([\"1\", \"5\", \"15\", \"20\", \"30\", \"50\", \"100\", \"200\"]) == \"161.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n\nfrom fractions import Fraction\nfrom math import gcd\n\nn = int(stdin.readline().rstrip())\n\nres = []\nfor _ in range(n):\n    res.append(int(stdin.readline().rstrip()))"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\nassert solution('''3\n100\n120\n75''') == '110.3'\nassert solution('''5\n80\n100\n120\n60\n120''') == '110.2'\nassert solution('''7\n100\n90\n80\n120\n110\n100\n120\n110''') == '110.0'\nassert solution('''2\n100\n80''') == '80.0'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nprint(solution(\"3\\n500\\n120\\n75\"))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nn = int(stdin.readline())\n\nscores = [int(x) for x in stdin.read().split('\\n')]\n\ns = sorted(scores, reverse=True)\n\ns_sum = 0\nfor i, sc in enumerate(s):\n    s_sum += sc * ((4/5)**i)\n\nprint(s_sum)\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n3\\n2\\n1\\n2\") == \"2.0\\n0.8\"\nassert solution(\"5\\n1\\n1\\n1\\n2\\n3\") == \"1.6\"\nassert solution(\"5\\n1\\n2\\n1\\n2\\n3\") == \"0.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n\n\"\"\"\nThe contest is hosted by your university and each student gets $5$ points for solving a problem. If a student solves a problem, then his or her score is increased by one. Let $x_i$ be the score of the ith student in the contest, and let $y_i$ be the score of the ith student in the contest after one of his or her scores is increased by $5$.\n\nCan you tell the average score of the contest after each of your students leaves the contest? In other words, can you tell the average score of the contest after each student leaves and how many students leave?\n\n-----Input-----\nThe first line of input contains an integer, $n$ ($2 \\leq n \\leq 50$), the number of students who compete in the contest. This is followed by $n$ lines, each containing one of your students\u2019 scores. These scores are listed in non-increasing order, and each score is an integer between $1$ and $10000$, inclusive.\n\nThe following line contains an integer, $m$ ($1 \\leq m \\leq 2 \\cdot n$), the number of students who leave the contest and don\u2019t return.\n\n-----Output-----\nPrint two lines. On the first line, print the average score of the contest after each student leaves. On the second line, print the number of students who leave the contest.\n\n-----Examples-----\nSample Input:\n3\n500\n120\n75\n2\nSample Output:\n128.8\n3\nExplanation:\nThe average score of the contest after each student leaves is 128.8. We have 3 students, and the following is the contest after each student leaves:\n\n500 \u2192 500 + 5\n120 \u2192 120 + 5\n75 \u2192 75 + 5\nAfter the contest finishes, the average score is 89.0.\n\nSample Input:\n3\n500\n120\n75\n1\nSample Output:\n128.8\n1\nExplanation:\nThe average score of the contest after each student leaves is 128.8. There is only one student who leaves the contest.\n\nSample Input:\n3\n1\n500\n120\n75\n2\nSample Output:\n128.8\n1\nExplanation:\nThe average score of the contest after each student leaves is 128.8. There are only two students who leave the contest.\n\"\"\"\n\n\"\"\"\nThe contest is hosted by your university and each student gets $5$ points for solving a problem. If a student solves a problem, then his or her score is increased by one. Let $x_i$ be the score of the ith student in the contest, and let $y_i$ be the score of the ith student in the contest after one of his or her scores is increased by $5$.\n\nCan you tell the average score of the contest after each of your students leaves the contest? In other words, can you tell the average score of the contest after each student leaves and how many students leave?\n\n-----Input-----\nThe first line of input contains an integer, $n$ ($2 \\leq n \\leq 50$), the number of students who compete in the contest. This is followed by $n$ lines, each containing one of your students\u2019 scores. These scores are listed in non-increasing order, and each score is an integer between $1$ and $10000$, inclusive.\n\nThe following line contains an integer, $m$ ($1 \\leq m \\leq 2 \\cdot n$), the number of students who leave the contest and don\u2019t return.\n\n-----Output-----\nPrint two lines. On the first line, print the average score of the contest after each student leaves. On the second line, print the number of students who leave the contest.\n\n-----Examples-----\nSample Input:\n3\n500\n120\n75\n2\nSample Output:\n128.8\n3\nExplanation:\nThe average score of the contest after each student leaves is 128.8. We have 3 students, and the following is the contest after each student leaves:\n\n500 \u2192 500 + 5\n120 \u2192 120 + 5\n75 \u2192 75 + 5\nAfter the contest finishes, the average score is 89.0.\n\nSample Input:\n3\n1\n500\n120\n75\n2\nSample Output:\n128.8\n1\nExplanation:\nThe average score of the contest after each student leaves is 128.8. There is only one student who leaves the contest.\n\"\"\"\n\n\"\"\"\nThe contest is hosted by your university and each student gets $5$ points for solving a problem. If a student solves a problem, then his or her score is increased by one. Let $x_i$ be the score of the ith student in the contest, and let $y_i$ be the score of the ith student in the contest after one of his or her scores is increased by $5$.\n\nCan you tell the average score of the contest after each of your students leaves the contest? In other words, can you tell the average score of the contest after each student leaves and how many students leave?\n\n-----Input-----\nThe first line of input contains an integer, $n$ ($2 \\leq n \\leq 50$), the number of students who compete in the contest. This is followed by $n$ lines, each containing one of your students\u2019 scores. These scores are listed in non-increasing order, and each score is an integer between $1$ and"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n500\n120\n75\"\"\") == \"128.8\"\nassert solution(\"\"\"3\n500\n120\n75\n199\n120\"\"\") == \"239.9\"\nassert solution(\"\"\"2\n5\n5\n2\"\"\") == \"11.0\"\nassert solution(\"\"\"4\n5\n5\n2\n1\"\"\") == \"9.25\"\n\n-----Problem-----\nMonika likes to become the top competitive programmer at her university. She has $n$ Kattis users, whose scores are listed in non-increasing order. She wants to use her ICPC leadership skill to improve her Kattis ranking, and wants to maintain her university\u2019s collective score at a maximum possible.\n\nMonika\u2019s goal is to maximize the value of \\[ \\frac{1}{5} \\sum _{i=0}^{n-1} s_ i \\cdot \\left( \\frac{4}{5} \\right)^i \\]\n\nMonika is currently the top ICPC team at her university. She knows that her university\u2019s collective Kattis group score is $G$ and has $m$ students currently, and knows that $m$ students remain in her university. She is also aware that $m$ students currently use Kattis and each Kattis user has a Kattis score of $s$.\n\nMonika wants to maintain her university\u2019s collective score at a maximum possible, so she wants to use her $n$ Kattis users to maximize \\[ \\frac{1}{5} \\sum _{i=0}^{n-1} s_ i \\cdot \\left( \\frac{4}{5} \\right)^i \\]\n\nGiven the values of $m$ and $n$, can you help Monika maximize her Kattis group score?\n\n-----Constraints-----\n$2 \\leq n \\leq 50$\n1 \\leq m \\leq n$\n$1 \\leq s_i \\leq 10000$ for each valid i\n\n-----Sample Input-----\n4\n2\n5\n5\n2\n\n-----Sample Output-----\n239.9\n2.625\n\n-----Explanation-----\nThe initial group score for your university is $G = 0$ (there are no students currently using Kattis), and the average new group score if you were to take all students out is $0$.\n\nIf you take out the first Kattis user (Kattis user 0), your group score would be $G = (s_0 \\cdot \\left( \\frac{4}{5}\\right)^0) = s_0 \\cdot \\left( \\frac{1}{5} \\right)^0 = s_0 \\cdot \\left( \\frac{1}{5} \\right) = s_0$\n\nIf you take out the second Kattis user (Kattis user 1), your group score would be $G = s_0 + (s_1 \\cdot \\left( \\frac{4}{5}\\right)^1) = s_0 + (s_1 \\cdot \\left( \\frac{1}{5} \\right)^1) = s_0 + s_1 \\cdot \\left( \\frac{1}{5} \\right) = s_1$\n\nIf you take out the third Kattis user (Kattis user 2), your group score would be $G = s_0 + s_1 + (s_2 \\cdot \\left( \\frac{4}{5}\\right)^2) = s_0 + s_1 + s_2 \\cdot \\left( \\frac{1}{5} \\right)^2 = s_1 + s_2$\n\nIf you take out the fourth Kattis user (Kattis user 3), your group score would be $G = s_0 + s_1 + s_2 + (s_3 \\cdot \\left( \\frac{4}{5}\\right)^3) = s_0 + s_1 + s_2 + s_3 \\cdot \\left( \\frac{1}{5} \\right)^3 = s_1 + s_2 + s_3$\n\nNow, the average new group score if you were to take out all students is $\\frac{1}{5} \\sum _{i=0}^{n-1} s_ i \\cdot \\left( \\frac{4}{5} \\right)^i = \\frac{1}{5} \\sum _{i=0}^{n-1} s_ i$\n\nThe new group score is $g_0 = s_0 + s_1 + s_2 + s_3 \\cdot \\left( \\frac{4}{5}\\right)^3 = s_0 + s_1 + s_2 + s_3 \\cdot \\left( \\frac{1}{5} \\right)^3 = s_0 + s_1 + s_2 + s_3$\n\nThe average new group score if you were to take out only one student is $\\frac{1}{5} \\sum _{i=0}^{n-1} (s_i + s_{i+1}) \\cdot \\left( \\frac{4}{5} \\right)^i = \\frac{1}{5} \\sum _{i=0}^{n-1} s_ i \\cdot \\"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.0\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n1\") == \"0.8\"\nassert solution(\"2\\n1\\n3\\n3\") == \"0.2\"\nassert solution(\"3\\n10\\n30\\n100\\n1\") == \"0.3\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\nfrom itertools import chain, combinations\n\nn = int(input())\n\ndays = input().split()\n\ndays = list(map(int, days))\n\nd = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        d.append(abs(days[i] - days[j]))\n\nd = sorted(d)\n\nprint(sum(d[i] for i in range(len(d)) if d[i] % 14 == 0))\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\nprint(solution(input()))\n\n\n\nSolution for this problem:"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 45 65 84 346') == 4\n'''\n\n'''\nThe number of pushes in a day is represented by the number of lines. Each line has the day of the year as the first element and the number of pushes in this day as the second element. The sum of the number of pushes in each day is the total number of pushes in a year.\n\nSample Input:\n6\n1 15\n2 12\n3 11\n4 6\n5 8\n6 20\n7 3\nSample Output:\n8\n'''\n\nimport sys\nimport collections"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == e\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4 5') == 0\nassert solution('1 2 3 4 5 6') == 0\nassert solution('1 2 3 4 5 6 7') == 0\nassert solution('1 2 3 4 5 6 7 8') == 1\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n\nprint(solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\"))\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('3 2\\nW#') == '2'\nassert solution('5 5\\n.T.G.T.G#\\n#.T.T.#\\nT.T.G.#\\nT.T.T.G\\nT.T.T.G') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 4\\n#P..#\\n#..#\\n#P.G#\\n#######') == '0'\nassert solution('7 4\\n#T.G#\\n#G#G#\\n#T#G#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '6 3\\n'\n    '#######\\n'\n    '#P.GTG#\\n'\n    '#..TGG#\\n'\n    '#######'\n    ) == 1\n\nsolution(\n    '6 4\\n'\n    '######\\n'\n    '#G#.G#\\n'\n    '#T#.T#\\n'\n    '######'\n    ) == 3\n\nsolution(\n    '5 5\\n'\n    '#####\\n'\n    '#T.T#\\n'\n    '#.#.#\\n'\n    '#.#.#'\n    ) == 1\n\nassert solution(\n    '6 3\\n'\n    '#######\\n'\n    '#P.GTG#\\n'\n    '#..TGG#\\n'\n    '#######'\n    ) == 1\n\nassert solution(\n    '4 4\\n'\n    '####\\n'\n    '#T.G#\\n'\n    '#.#.#\\n'\n    '#.G#.#\\n'\n    '#..#.#\\n'\n    '####'\n    ) == 0\n\nassert solution(\n    '7 7\\n'\n    '##########\\n'\n    '#G#G#G#G#G#G#\\n'\n    '#G#T.G#G#G#G#\\n'\n    '#G#G#G#G#G#G#\\n'\n    '#G#G#G#G#G#G#\\n'\n    '#G#G#G#G#G#G#\\n'\n    '#G#G#G#G#G#G#\\n'\n    '#G#G#G#G#G#G#\\n'\n    '#G#G#G#G#G#G#\\n'\n    '##########'\n    ) == 2\n\nassert solution(\n    '3 2\\n'\n    'T.G\\n'\n    '#G#'\n    ) == 0"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n..T.\\n#..P\\n....\\nT..G\\nG.G') == '1'\nassert solution('4 3\\nP.G\\nT..\\nG.G') == '1'\nassert solution('3 4\\nT.G\\n....\\nG.G') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == \"5\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_____$_$_________$_$_____$_$_____\\n____$___$________$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$____$_____$___\\n__$____$___$_____$___$____$___$____$_____$___\\n_$$____$$_$$_____$$_$$____$$_$$____$$_$$_____$$\\n$$______$$______$______$$______$$______$$______$$_$$\") == 5\n\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$') == 5\n\nprint(solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$') == 5)\n\n'''\nfrom collections import deque"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n----\n\nWrite a program to print the sum of the digits of an integer.\n\nInput\nThe first line contains a single integer T i.e. the number of test cases. The only line of each test case contains a single integer N.\n\nOutput\nPrint a single line containing the sum of digits of N.\n\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 1000000\nExample\nSample Input:\n3\n125\n1234\n10\nSample Output:\n8\n14\n1\nExplanation\nSample Case 1:\nThe sum of digits of 125 is 12+5=17.\n\nSample Case 2:\nThe sum of digits of 1234 is 1+2+3+4=10.\n\nSample Case 3:\nThe sum of digits of 10 is 1.\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 50\") == \"5\"\n\nSample Output #2\n4\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5)\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nprint(solution(\"i cant speak pig latin\"))\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('hello world') == 'elloay orldway'\nassert solution('bob and jim') == 'obbay andjay'\nassert solution('horses are very nice') == 'horsay arevery niceay'\nassert solution('ocean is very beautiful') == 'oceay isvery beutifulay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\nimport re"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\"\n\n\nimport re\n\nVOWELS = set(\"aeiou\")\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"nymble\"\n\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"Anywhere is fine I guess\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom collections import namedtuple\n\nMenuItem = namedtuple('MenuItem', 'name, price, ingredients')\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    2\n    2\n    q\n    potatoes\n    salad\n    3\n    nymble\n    pancakes\n    pea soup\n    punsch\n\"\"\") == \"nymble\"\n\nassert solution(\"\"\"\n    2\n    2\n    q\n    potatoes\n    salad\n    3\n    nymble\n    pancakes\n    pea soup\n    punsch\n\"\"\") == \"Anywhere is fine I guess\"\n\nassert solution(\"\"\"\n    2\n    2\n    q\n    potatoes\n    salad\n    3\n    nymble\n    pancakes\n    pea soup\n    punsch\n\"\"\") == \"nymble\"\n\n\"\"\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('3\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 0 15') == 3\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 0 15\\n') == '3'\n\nassert solution('5 1 15\\n') == '3'\n\nassert solution('5 2 15\\n') == '2'\n\nassert solution('5 3 15\\n') == '1'\n\nassert solution('5 4 15\\n') == '0'"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 15') == 3\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 0 15''') == 3\n'''\nimport math\na,b,h = map(int, stdin.split(' '))\nprint(math.ceil((h-b)/(a-b)))\n'''"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"5 0 15\") == 3\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 0 15\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 15\") == 3\n\nprint(solution(\"5 0 15\"))\n\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"5 1 15\") == \"4\"\nassert solution(\"5 3 15\") == \"5\"\nassert solution(\"3 5 15\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('1\\n0') == '0'\nassert solution('1\\n5') == '3'\n'''\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 15') == 19\nassert solution('7 13') == 11\nassert solution('-1 -2') == -3\nassert solution('-2 3') == 1\n\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(b - a + 2)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 17\") == \"5\"\nassert solution(\"12 15\") == \"13\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a - b if a - b > 0 else a + b)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_1) == test_2\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('11 15') == '19'\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n1 1\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n5 11\n\"\"\"\n) == '7'\n\nassert solution(\n\"\"\"\n2 2\n\"\"\"\n) == '2'\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"-1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\nassert solution('East West South') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North East South\") == \"No\"\nassert solution(\"North South East\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nSample Input:\nSouth East West\nSample Output:\nNo"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"North West South\") == \"Yes\"\nassert solution(\"West South North\") == \"No\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'South West East'\n    ) == 'Yes'\n\nassert solution(\n    'North East West'\n    ) == 'No'\n\nassert solution(\n    'East West North'\n    ) == 'No'\n\nassert solution(\n    'East South West'\n    ) == 'Yes'\n\nassert solution(\n    'South East West'\n    ) == 'Yes'"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"East West South\") == \"Yes\"\n\"\"\"\n\nclass Car:\n    def __init__(self, string: str) -> None:\n        self.dir = string.split()[:2]\n        self.c_dir = \"North\" if self.dir[0] == \"North\" else \"South\" if self.dir[0] == \"South\" else \"East\" if self.dir[0] == \"East\" else \"West\"\n        self.o_dir = \"North\" if self.dir[1] == \"North\" else \"South\" if self.dir[1] == \"South\" else \"East\" if self.dir[1] == \"East\" else \"West\"\n\n    def can_pass(self, other) -> bool:\n        return self.c_dir!= other.o_dir and (self.c_dir == \"North\" or self.c_dir == \"East\") and (other.c_dir == \"South\" or other.c_dir == \"West\")\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\nprint(solution(\"South West East\"))\nprint(solution(\"South East West\"))\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('West South West') == 'No'\n\"\"\"\n\nstdin = input().split()\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\n\"\"\"\n\na, b, c = input().split()"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West South\") == \"No\"\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s1) == s2\nassert solution(s1) == s3\nassert solution(s1) == s4\nassert solution(s1) == s5\nassert solution(s1) == s6\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abcdefg') == 'abcdefg'\nassert solution('qwertyuiop') == 'qwertuiyop'\nassert solution('abcd') == 'a'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nprint(solution('5 16\\nagain\\npirpumsemoystoal'))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '7 16\\n'\n    'rqjrjyjymtwi\\nrqqwwghf\\nqqyywwrj\\nqqqqwwgyt\\nqqqqwx'\n) =='marywasnosyagain'\n\n\"\"\"\n\nimport string\nimport re\nimport sys\nfrom itertools import chain"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 16\\naaastdfoovvnyewrjw\\nfeqdgrsjqwjnjnfqbss') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 16\\n again\\n pirpumsemoystoal') =='marywasnosyagain'\nassert solution('6 25\\n again\\n pirpumsemoystoal') =='marywasnosyagain'\nassert solution('1 1\\n a\\n b') == 'b'\nassert solution('3 3\\n aaa\\n bbb') == 'bbb'\nassert solution('2 6\\n a\\n ab\\n ac') == 'c'"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 16\\naagain\\npirpumsemoystoal\") == \"marywasnosyagain\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 16\\naannacsssseeee\\ntryalsssssseeee\\ntryt\\n\") == \"marywasnosyagain\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"6 22\\nyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyes\\nyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyesyes"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"5 16\\n\"\n\"again\\n\"\n\"pirpumsemoystoal\"\n) == \"marywasnosyagain\"\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0') == 'Odd'\nassert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Either\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Either'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\n\"\"\"\n\nN = int(input())\nprint(\"Even\" if N % 2 == 0 else (\"Odd\" if N % 2 == 1 else \"Either\"))\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 'Even'\nassert solution('7') == 'Odd'\n\nSample Input:\n4\nSample Output:\nEven\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    m = int(sys.stdin.readline().strip())\n    print(len(str(m)))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('3\\n10\\n100\\n1000\\n10000') == '4\\n2\\n4\\n3\\n5'\nassert solution('5\\n12345\\n67\\n89\\n101010') == '5\\n3\\n3\\n4\\n5'\nassert solution('1\\n1010\\n100\\n1000\\n10000') == '4\\n2\\n4\\n3\\n5'\nassert solution('1\\n111\\n100\\n1000\\n10000') == '5\\n4\\n4\\n5\\n5'\n\n\"\"\"\n\nfrom math import log10\n\nn = int(input())\ncosts = []\n\nfor _ in range(n):\n    costs.append(int(input()))"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n314\\n1\\n5926\\n5\\n35897\") == \"1\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n314\\n1\\n5926\\n5\\n35897\") == \"1\\n1\\n4\\n1\\n5\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('7\\n456\\n9') == '2\\n1\\n2'\nassert solution('8\\n123456789\\n1') == '9\\n9'\nassert solution('2\\n12') == '2\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == '3\\n1\\n4\\n1\\n5'\nprint('test passed')\n\n-----Solution-----\n\nsolution =\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"\n3\n1\n4\n1\n5\n\"\"\", solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\")\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == '3\\n1\\n4\\n1\\n5'\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n0\\n0\\n0\\n0\") == \"1\\n0\\n0\\n0\\n0\"\nassert solution(\"5\\n314\\n0\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n'\n'a t\\n'\n'a p\\n'\n'b p\\n'\n'i r\\n'\n'k c\\n'\n'k d\\n'\n'k r\\n'\n'o p\\n'\n'o c\\n'\n'o p\\n'\n'r r\\n'\n'r o\\n'\n'r p\\n'\n'w a\\n'\n'w b\\n'\n'w k\\n'\n'w p\\n'\n'w e\\n'\n'w i\\n'\n'w r\\n'\n'w o\\n'\n'w p\\n'\n'c i\\n'\n'c o\\n'\n'c r\\n'\n'c a\\n'\n'c b\\n'\n'c k\\n'\n'c t\\n'\n'c e\\n'\n'p i\\n'\n'p o\\n'\n'p r\\n'\n'p a\\n'\n'p b\\n'\n'p k\\n'\n'p t\\n'\n'p e\\n'\n'p f\\n'\n'p u\\n'\n'p w\\n'\n'p we\\n'\n'r i\\n'\n'r o\\n'\n'r p\\n'\n'r e\\n'\n'r f\\n'\n'r u\\n'\n'r w\\n'\n'r we\\n'\n'r a\\n'\n'r b\\n'\n'r k\\n'\n'r t\\n'\n'r e\\n'\n'o i\\n'\n'o o\\n'\n'o r\\n'\n'o a\\n'\n'o b\\n'\n'o k\\n'\n'o t\\n'\n'o e\\n'\n'o f\\n'\n'o u\\n'\n'o w\\n'\n'o we\\n'\n't f\\n'\n't e\\n'\n't a\\n'\n't b\\n'\n'w a\\n'\n'w b\\n'\n'w k\\n'\n'w p\\n'\n'w e\\n'\n'w i\\n'\n'w r\\n'\n'w o\\n'\n'w p\\n'\n'w e\\n'\n'w i\\n'\n'w r\\n'\n'w o\\n'\n'w p\\n'\n'w e\\n'\n'w i\\n'\n'w r\\n'\n'w o\\n'\n'w p\\n'\n'c i\\n'\n'c o\\n'\n'c r\\n'\n'c a\\n'\n'c b\\n'\n'c k\\n'\n'c t\\n'\n'c e\\n'\n'p i\\n'\n'p o\\n'\n'p r\\n'\n'p a\\n'\n'p b\\n'\n'p k\\n'\n'p t\\n'\n'p e\\n'\n'p f\\n'\n'p u\\n'\n'p w\\n'\n'p we\\n'\n'r i\\n'\n'r o\\n'\n'r p\\n'\n'r e\\n'\n'r f\\n'\n'r u\\n'\n'r w\\n'\n'r we\\n'\n'r a\\n'\n'r b\\n'\n'r k\\n'\n'r t\\n'\n'r e\\n'\n'r o\\n'\n'r p\\n'\n'r e\\n'\n'r i\\n'\n'r r\\n'\n'r o\\n'\n'r p\\n'\n'r e\\n'\n'r i\\n'\n'r r\\n'\n'r o\\n'\n'r p\\n'\n'r e\\n'\n'r i\\n'\n'r r\\n'\n'r o\\n'\n'r p\\n'\n'r e\\n'\n'r i\\n'\n'o i\\n'\n'o o\\n'\n'o r\\n'\n'o a\\n'\n'o b\\n'\n'o k\\n'\n'o t\\n'\n'o e\\n'\n'o f\\n'\n'o u\\n'\n'o w\\n'\n'o we\\n'\n'o a\\n'\n'o b\\n'\n'o k\\n'\n'o t\\n'\n'o e\\n'\n'o f\\n'\n'o u\\n'\n'o w\\n'\n'o we\\n'\n'o a\\n'\n'o b\\n'\n'o k\\n'\n'o t\\n'\n'o e\\n'\n'o f\\n'\n'o u\\n'\n'o w\\n'\n'o we\\n'\n'o a\\n'\n'o b\\n'\n'o k\\n'\n'o t\\n'\n'o e\\n'\n'o r\\n'\n'o i\\n'\n'o r\\n'\n'o p\\n'\n'o p\\n'\n'o p\\n'\n'o c\\n'\n'o p\\n'\n'o r\\n'\n'o r\\n'\n'o o\\n'\n'o p\\n'\n'o r\\"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 5\\n\\tc\\ti\\nr\\np\\no\\r\\nt\\te\\tf\\tu\\hp\\nw\\we\\can\\th\\to\\tw\\ep\\wi\\te\\n\\tt\\fa\\nu\\tw\\or\\nd\\ti\\te\\tt\\fo\\nu\\th\\wa\\pr\\oc\\ne\\ty\\na\\n\\n\\nr\\nu\\nd') == 'yes\\nno\\nno\\nyes\\nyes\\nno\\nno\\nno\\nno'"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('2 4\\n0 1\\n1 2\\n2 3') == 'yes\\nno\\nno\\nyes\\n'\nassert solution('2 4\\n1 0\\n1 2\\n2 3') == 'yes\\nyes\\n'\nassert solution('2 4\\n1 0\\n1 2\\n2 0\\n2 3') == 'yes\\nyes\\nno\\nno\\n'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"yes\\n\"\n\nassert solution(\"9 5\\n\"\n\"a b\\n\"\n\"c d\\n\"\n\"e f\\n\"\n\"g h\\n\"\n\"i j\\n\"\n\"k l\\n\"\n\"m n\\n\"\n\"o p\\n\"\n\"q r\\n\"\n\"s t\\n\"\n\"u v\\n\"\n\"w x\\n\"\n\"y z\\n\"\n\"ab ac\\n\"\n\"cd cd\\n\"\n\"ef ef\\n\"\n\"gh gh\\n\"\n\"ij il\\n\"\n\"kn km\\n\"\n\"op or\\n\"\n\"qt qr\\n\"\n\"st st\\n\"\n\"uv uv\\n\"\n\"wx wy\\n\"\n\"yz yz\\n\"\n\"ac ad\\n\"\n\"cd ce\\n\"\n\"ef fg\\n\"\n\"gh hg\\n\"\n\"il ik\\n\"\n\"km km\\n\"\n\"or op\\n\"\n\"qt qr\\n\"\n\"st st\\n\"\n\"uv uv\\n\"\n\"wx wy\\n\"\n\"yz yz\\n\"\n\"ad ac\\n\"\n\"ce cf\\n\"\n\"fg fg\\n\"\n\"hg hg\\n\"\n\"ik il\\n\"\n\"km km\\n\"\n\"op or\\n\"\n\"qr qr\\n\"\n\"st st\\n\"\n\"uv uv\\n\"\n\"wx wx\\n\"\n\"wy wy\\n\"\n\"yz yz\\n\") == \"yes\\n\"\n\n\"\"\"\nfrom sys import stdin\n\ninputs = stdin.readlines()\ntranslations = {}\nfor i in range(int(inputs[0].split()[0])):\n    translations[inputs[i + 1].split()[0]] = inputs[i + 1].split()[1]\nfor i in range(int(inputs[0].split()[1])):\n    first_word, second_word = inputs[i + int(inputs[0].split()[0]) + 1].split()\n    if len(first_word) == len(second_word):\n        matches = 0\n        for i, letter in enumerate(first_word):\n            if translation := translations.get(letter, False):\n                matches += 1 if translation == second_word[i] else 0\n        if matches == len(first_word):\n            print('yes')\n        else:\n            print('no')\n    else:\n        print('no')\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5\\n\" + \n        \"c t\\n\" + \n        \"i r\\n\" + \n        \"k p\\n\" + \n        \"o c\\n\" + \n        \"r o\\n\" + \n        \"t e\\n\" + \n        \"t f\\n\" + \n        \"u h\\n\" + \n        \"w p\\n\" + \n        \"we we\\n\" + \n        \"can the\\n\" + \n        \"work people\\n\" + \n        \"it of\\n\" + \n        \"out the\") == \"yes\\n\" + \"no\\n\" + \"no\\n\" + \"yes\\n\" + \"yes\\n\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 5\\nt c\\ni r\\nk p\\no c\\n r\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3,4\\nhello, world\\n'\n                'this, is\\na\\n'\n                'sample\\n'\n                'input') == 'no\\nyes\\nyes\\n'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 5\\nc\\tr\\ti\\rk\\pp\\no\\ro\\te\\tf\\tu\\hp\\we\\we\\can\\t\\th\\wa\\wp\\we\\we\\ite\\of\") == \"yes\"\nassert solution(\"9 5\\nc\\tr\\ti\\rk\\pp\\no\\ro\\te\\tf\\tu\\hp\\we\\we\\can\\t\\th\\wa\\wp\\we\\we\\ite\\of\") == \"no\"\nassert solution(\"9 5\\nc\\tr\\ti\\rk\\pp\\no\\ro\\te\\tf\\tu\\hp\\we\\we\\can\\t\\th\\wa\\wp\\we\\we\\ite\\of\") == \"no\"\nassert solution(\"9 5\\nc\\tr\\ti\\rk\\pp\\no\\ro\\te\\tf\\tu\\hp\\we\\we\\can\\t\\th\\wa\\wp\\we\\we\\ite\\of\") == \"yes\"\n\nhttps://www.algoexpert.io/questions/Longest%20Palindromic%20Substring\nhttps://leetcode.com/problems/find-the-translation-of-a-phrases/\nhttps://leetcode.com/problems/decrypt-the-sentence/\nhttps://leetcode.com/problems/reduce-a-number-to-three-digits/\nhttps://leetcode.com/problems/reconstruct-itinerary/\nhttps://leetcode.com/problems/valid-parentheses/\nhttps://leetcode.com/problems/valid-palindrome/\nhttps://leetcode.com/problems/find-leaves-of-binary-tree/\nhttps://leetcode.com/problems/same-tree/\nhttps://leetcode.com/problems/is-subsequence/\nhttps://leetcode.com/problems/decompress-run-length-encoded-list/\nhttps://leetcode.com/problems/longest-repeating-character-replacement/\nhttps://leetcode.com/problems/find-peak-element/\nhttps://leetcode.com/problems/peak-index-in-a-mountain-array/\nhttps://leetcode.com/problems/peak-index-in-a-mountain-array/discuss/272672/Python-O(n)-Solution-by-Binary-Search-without-Extra-Space\nhttps://leetcode.com/problems/intersection-of-two-linked-lists/\nhttps://leetcode.com/problems/reverse-linked-list/\nhttps://leetcode.com/problems/palindromic-substrings/\nhttps://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/\nhttps://leetcode.com/problems/sorted-array-to-balanced-bst/\nhttps://leetcode.com/problems/pascals-triangle-ii/\nhttps://leetcode.com/problems/last-stone-weight/\nhttps://leetcode.com/problems/maximize-distance-to-closest-person/\nhttps://leetcode.com/problems/max-area-of-island/\nhttps://leetcode.com/problems/largest-rectangle-in-histogram/\nhttps://leetcode.com/problems/integer-replacement/\nhttps://leetcode.com/problems/valid-sudoku/\nhttps://leetcode.com/problems/fruit-into-baskets/\nhttps://leetcode.com/problems/fizz-buzz/\nhttps://leetcode.com/problems/find-missing-letter/\nhttps://leetcode.com/problems/pascals-triangle-ii/\nhttps://leetcode.com/problems/max-consecutive-ones-iii/\nhttps://leetcode.com/problems/unique-email-addresses/\nhttps://leetcode.com/problems/reorder-data-in-log-files/\nhttps://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/\nhttps://leetcode.com/problems/di-string-match/\nhttps://leetcode.com/problems/minimum-window-substring/\nhttps://leetcode.com/problems/insertion-sort-list/\nhttps://leetcode.com/problems/find-leaves-of-binary-tree/\nhttps://leetcode.com/problems/decode-ways/\nhttps://leetcode.com/problems/decode-string/\nhttps://leetcode.com/problems/decode-ways-ii/\nhttps://leetcode.com/problems/word-break/\nhttps://leetcode.com/problems/intersection-of-two-arrays-ii/\nhttps://leetcode.com/problems/possible-bipartition/\nhttps://leetcode.com/problems/median-of-two-sorted-arrays/\nhttps://leetcode.com/problems/find-pivot-index/\nhttps://leetcode.com/problems/move-zeroes/\nhttps://leetcode.com/problems/closest-binary-search-tree-value-ii/\nhttps://leetcode.com/problems/unique-paths-ii/\nhttps://leetcode.com/problems/longest-palindromic-substring/\nhttps://leetcode.com/"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the''') == '''yes\nno\nno\nyes\nyes\nyes\n'''\n\nassert solution('''9 5\na b\nc d\ne f\nf g\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\na b\nc d\ne f\nf g\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\nz a\na b\nc d\ne f\nf g\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\ny a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\ny a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\ny a\nz b\nz a\na b\nc d\ne f\nf g\ng h\nh i\ni j\nj k\nk l\nl m\nm n\nn o\no p\np q\nq r\nr s\ns t\nt u\nu v\nv w\nw x\nx y\ny z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\ny a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\ny a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\ny a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\ni k\nj l\nk m\nl n\nm o\nn p\no q\np r\nq s\nr t\ns u\nt v\nu w\nv x\nw y\nx z\nz a\nz b\na c\nb d\nc e\nd f\ne g\nf h\ng i\nh j\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nj\\t t\\nh\\ti\\nk\\tp\\nj\\to\\nj\\t f\\nt\\tf\\nk\\te\\nr\\to\\nr\\t f\\nn\\tn\\nh\\t f\\nh\\te\\nn\\to\\nn\\t f\\nr\\to\\nr\\t f\\nk\\t e\\nk\\t f\\nk\\te\\nj\\to\\nj\\t f\\nh\\te\\nh\\t f\\nh\\ti\\nk\\t f\\nr\\t f\\nh\\t f\\nh\\te\\nh\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nk\\te\\nj\\to\\nj\\t f\\nr\\t f\\nk\\te\\nk\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nk\\t f\\nr\\t f\\nh\\t f\\nh\\te\\nh\\t f\\nh\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nk\\te\\nj\\to\\nj\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nk\\te\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nk\\t f\\nk\\t f\\nk\\t f\\nk\\t f\\nk\\t f\\nk\\t f\\nk\\t f\\nr\\t f\\nk\\t f\\nk\\te\\nk\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nk\\te\\nk\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\nr\\t f\\nr\\t f\\nk\\t f\\nr\\t f\\nr\\t f\\nr\\t f\\nk\\t e\\"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\nassert solution(\"1 2\\ncarrots?\\nbunnies\") == \"2\"\n\nassert solution(\"2 2\\ncarrots?\\nbunnies\") == \"1\"\n\nassert solution(\"1 1000\\ncarrots?\\nbunnies\") == \"1000\"\n\nassert solution(\"2 1000\\ncarrots?\\nbunnies\") == \"1001\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == \"0\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\\nhuffle-puff problems: solved: 1, difficulty: easy\") == \"0\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\\nhuffle-puff problems: solved: 1, difficulty: easy\\n\") == \"0\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\\nhuffle-puff problems: solved: 1, difficulty: easy\\nhuffle-puff problems: solved: 1, difficulty: easy\") == \"2\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n'''"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\ncarrots?\\nbunnies\\nhuffle-puff\") == \"1\"\nassert solution(\"3 2\\nbunnies\\ncarrots?\\nhuffle-puff\") == \"3\"\nassert solution(\"3 2\\nhuffle-puff\\ncarrots?\\nbunnies\") == \"3\"\nassert solution(\"3 2\\ncarrots?\\nhuffle-puff\\nbunnies\") == \"6\"\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('carrots?\\nbunnies') == 1\n\"\"\"\n\nfrom typing import List, Set, Union"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1\n'''\n-----Notes-----\nYou may assume that there is always at least one line of input and that, if there is no solution, it consists of a single integer 0.\n\n'''\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\n\n---Problem---\nIn a group of people, a huffle-puff problem is defined as a problem where every person in the group solved it. The total number of huffle-puff problems is the sum of the number of huffle-puff problems each person solved.\n\nFor example, in the following contest, each person solved 1 huffle-puff problem and there are 2 total:\n\n3 1\ncarrots?\nbunnies\nhuffle-puff?\ncarrots\nbunnies?\n2 1\ncarrots?\nbunnies?\n\nThe number of carrots in this contest is 6, as every person solved 2 huffle-puff problems, and 2 people solved 1 huffle-puff problem each.\n\nInput Format\nThe first line of the input consists of two integers $1 \\le N, P \\le 1000$, where $N$ is the number of contestants in the contest and $P$ is the number of huffle-puff problems.\n\nEach of the $N$ lines that follow will contain a single non-empty line containing a single name and a single huffle-puff problem, where the huffle-puff problem is a lowercase letter.\n\nConstraints\n* 1 <= N <= 1000\n* 1 <= P <= 1000\n* All the names contain only lowercase letters.\n\nOutput Format\nOn a single line, output a single integer: the number of carrots in the contest.\n\nSample Input 0\n3 1\ncarrots?\nbunnies?\nhuffle-puff?\nSample Output 0\n0\nExplanation 0\nAs the huffle-puff problem is solved by every contestant, there are no huffle-puff problems to solve, so the number of carrots in the contest is 0.\n\nSample Input 1\n3 2\ncarrots?\nbunnies?\nhuffle-puff?\ncarrots?\nbunnies?\n1 1\ncarrots?\nbunnies?\nSample Output 1\n3\nExplanation 1\nAs the first contestant solved just 1 huffle-puff problem, that huffle-puff problem will count for 2 carrots. So, the number of carrots in the contest is 2.\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('carrots?\\nbunnies') == 1\nassert solution('carrots?\\ncatfish') == 0\nassert solution('carrots?\\nbadger') == 0\nassert solution('carrots?\\ncarrots') == 2\n\na, b = input().split()\nprint(solution(a + '?\\n' + b))\n\na, b = map(int, input().split())\nprint(solution(a, b))"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\nassert solution(\"3 3\\n1 1\\nbunny\\n1 1\\n1 1\\n0 0\\nbunny\\n0 0\\n1 1\\n0 0\\nbunny\\n1 1\") == 6\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n) == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\n\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n) == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\n\"\"\"\nWhat is the purpose of input(), output(), and stdin?\nstdin is the stream that gets piped into the program from the command line.\n\nIt has the readline() method that reads a line from the input.\n\nThe output() method is the stream that the program prints to.\n\nThe print() method is the output stream that goes to the screen.\n\n\"\"\"\n\n\"\"\"\nWhat is the purpose of the else clause?\n\nIf the while loop terminates normally, it will continue with the code after the else clause. If the loop terminates with an error, it will skip the else clause.\n\"\"\"\n\n\"\"\"\nWhat is the purpose of the try and except statements?\n\nThe try clause is the code that you try to execute.\n\nIf an error occurs in the code inside the try clause, a except clause is executed.\n\nThe except clause is the code that is executed if an error occurs.\n\nIf the error is not handled in the except clause, it goes to the finally clause.\n\nThe finally clause is the code that is executed no matter if an error occurs or not.\n\nWhen an error occurs, the program continues with the code after the finally clause.\n\"\"\"\n\n\"\"\"\nWhat is the purpose of the else clause?\n\nIf the while loop terminates normally, it will continue with the code after the else clause. If the loop terminates with an error, it will skip the else clause.\n\"\"\"\n\n\"\"\"\nWhat is the purpose of the pass statement?\n\nIf you want to write code that will eventually be used, write code that can be used.\n\nIf you don't want to write code that can be used right away, write a pass statement.\n\nThe pass statement does nothing, and when it is executed, nothing happens. It is useful as a placeholder when you are working on new code, so you can focus on writing the code you want to write, without having to worry about whether it will do anything.\n\"\"\"\n\n\"\"\"\nWhat is the purpose of the return statement?\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n|.r.|:::|."
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\n'''\n+---+---+---+---+---+---+---+---+\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|p.|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|:::|:::|:::|:::|:::|:::|:::|:::|\n+---+---+---+---+---+---+---+---+\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\n+---+---+---+---+---+---+---+---+\n''') == \"\"\"\nWhite: Re1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\n'''\n+---+---+---+---+---+---+---+---+\n|r.|:::|b.|:q"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    +---+---+---+---+---+---+---+---+\n    |.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n    +---+---+---+---+---+---+---+---+\n    |:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|.n.|:::|...|:::|...|:p:|\n    +---+---+---+---+---+---+---+---+\n    |:::|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|...|:::|.P.|:::|...|:::|\n    +---+---+---+---+---+---+---+---+\n    |:P:|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n    +---+---+---+---+---+---+---+---+\n    |:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n    +---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\n    White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n    Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n    +---+---+---+---+---+---+---+---+\n    |.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n    +---+---+---+---+---+---+---+---+\n    |:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|.n.|:::|...|:::|...|:p:|\n    +---+---+---+---+---+---+---+---+\n    |:::|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |...|:::|...|:::|.P.|:::|...|:::|\n    +---+---+---+---+---+---+---+---+\n    |:P:|...|:::|...|:::|...|:::|...|\n    +---+---+---+---+---+---+---+---+\n    |.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n    +---+---+---+---+---+---+---+---+\n    |:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n    +---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\n    White: Ke1,Qd1,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|p::|::p|p::|::p|p::|::p|p::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.R|.N|:B|.Q|:K|.B|:::|.R|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Kf8, Qf7, Rf1, Qg1, Nf8, Bg8, Kg1, Kb8, Ng8, Ng7, Qb7, Nb7, Ra7, Kg8, Bf8, Rg8, Qg8, Bg7, Rb7, Kf7, Qf7, Rf1, Ng1, Kg1, Qg1, Qf8, Ng8, Kf8, Qf8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Ng7, Kf8, Ng8, Kg8, Qg8, Ng7, Qf8, Kf8, Ng8, Kg8, Qg8, Nf8, Kg8, Bg8, Nf8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg8, Kf8, Ng8, Kg8, Qg8, Bg8, Ng8, Kg8, Kg"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\", \"First\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"Black: Ke"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n\"\n    \"|r.|p.|p.|p.|p.|p.|p.|p.|p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:p:|.p|:p|.p|:p|.p|.p|:p|.p|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:p:|...|:p:|...|:p:|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:P:|.P|:P|.P|:P|.P|.P|.P|.P|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.P|.P|.P|:P|.P|.P|.P|:P|.P|:P|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:R:|.N|:B|.Q|:K|.B|:::|.R|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\") == \"White: Kd1,Ka2,Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nBlack: Kd8,Ka7,Ke7,Qd7,Ra7,Rh7,Bc6,Ng5,Nc5,a6,b5,c4,d3,e2,f1,g1\\n\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n\"\n    \"|r.|:::|.b|:q:|.k.|:::|.n.|:r:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:P:|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\"\n    \"+---+---+---+"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == 'You will become a flying monkey!'\nassert solution('8 4') == 'Your wish is granted!'\nassert solution('6 7') == 'You will become a flying monkey!'\nassert solution('4 5') == 'You will become a flying monkey!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('5 3') == 'You will become a flying monkey!'\nassert solution('8 2') == 'You will become a flying monkey!'\nassert solution('5 2') == 'You will become a flying monkey!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"Your wish is granted!\"\nassert solution(\"4 6\") == \"You will become a flying monkey!\"\nassert solution(\"4 8\") == \"You will become a flying monkey!\"\nassert solution(\"8 7\") == \"Your wish is granted!\"\nassert solution(\"8 9\") == \"You will become a flying monkey!\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3') == 'Your wish is granted!'\n\"\"\"\n\nfrom math import sqrt\n\nN, K = map(int, stdin.readline().strip().split(' '))"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('4 6') == 'You will become a flying monkey!'\nassert solution('10 101') == 'Your wish is granted!'\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\n\"\"\"\nimport math\nimport ast\nimport sys\n\n\"\"\"\n    You're a wizard! With your.append() magic, you'll become even more powerful than you are!\n    \n    You've been coding for the last few days, and finally you're ready to share your findings with the world. However, you'll need to prepare for a magic ceremony!\n    \n    You were given a secret message, which you're sure will be a great help in securing your newfound powers. However, you need to get rid of unnecessary brackets and make sure the message has no syntax errors.\n    \n    In order to help you with that, you decided to write a function that will do the heavy lifting for you. Given a string of braces (\"{}\", \"[]\", \"()\", \"<<>>\", \"|~|\"), the function will return the result of removing all of the unnecessary brackets.\n    \n    The string will be of length > 0, consisting of one or more types of brackets (\"{}\", \"[]\", \"()\", \"<<>>\", \"|~|\").\n    \n    For instance:\n    \n    \"||[|1|]|\"\n    \n    ... should return \"|1|\".\n    \n    \"{{[[(||)]]}}\"\n    \n    ... should return \"{}\".\n    \n    You can assume the input will always be valid.\n    \n    Have fun!\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('5 10') == 'You will become a flying monkey!'"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"1 10\") == \"You will become a flying monkey!\"\n\nimport sys; input = sys.stdin.readline\nN, K = map(int, input().split())"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 3') == 'You will become a flying monkey!'\nassert solution('1 1') == 'Your wish is granted!'\nassert solution('5 2') == 'You will become a flying monkey!'\nassert solution('10 11') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'You will become a flying monkey!'\nassert solution('8 3') == 'Your wish is granted!'\nassert solution('8 3') == 'You will become a flying monkey!'\nassert solution('8 1') == 'You will become a flying monkey!'\n\nassert solution('7 3') == 'Your wish is granted!'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"10.1\") == \"10.1\"\nassert solution(\"10.01\") == \"11.0\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"16\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"16\"\n\nSample Input:\n13\nSample Output:\n17\n\nSample Input:\n3\nSample Output:\n8\n\nSample Input:\n16\nSample Output:\n16\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == 16\n\n-----Solution-----\na = int(stdin)\nprint(a**2)\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('42') == '50'\nassert solution('213') == '230'\nassert solution('78810') == '11850'\n\nimport sys; input = sys.stdin.readline; assert(sys.version_info >= (3,7))\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == '16'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 180\\n45 30 55 20 80 20\") == '4'\nprint('Test pass.')"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80\\n\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n\"\"\"\n\nimport sys\nimport os\nimport time"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '1'\nassert solution('4\\n1') == '0'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 180\\n1 1 2 3\") == \"4\"\n\"\"\"\n\nimport sys\nimport os\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def execute(self, stdin: str, is_sample: bool) -> str:\n        n, T = [int(x) for x in stdin.split()]\n        task_lengths = [int(x) for x in stdin.split()]\n\n        task_count = 0\n        task_time_limit = 0\n\n        for i in range(len(task_lengths)):\n            if task_time_limit + task_lengths[i] <= T:\n                task_time_limit += task_lengths[i]\n                task_count += 1\n            else:\n                break\n\n        return str(task_count)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('a\\n') == 'a'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 180\\n1 3 5 7') == '4', solution('4 180\\n1 3 5 7')\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\nimport sys\nfrom dataclasses import dataclass\nfrom typing import Dict, List, Optional, Tuple\n\nassert sys.version_info >= (3, 7)\n\n\n@dataclass\nclass Task:\n    id: int\n    duration: int\n    start: int = None\n    end: int = None\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1\\n2\\n3') == '3'\nassert solution('6 180\\n45 30 55 20 80 20') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nn = int(stdin.readline())\nlengths = []\nfor i in range(n):\n    lengths.append(int(stdin.readline()))\n\nlengths.sort()\nlengths = lengths[::-1]"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\\n34\\n18\\n9\") == \"79\"\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nimport sys\nimport math\n\nnum_of_rods = int(sys.stdin.readline())\nrods = []\nfor _ in range(num_of_rods):\n    rods.append(int(sys.stdin.readline()))\n\nrods.sort()\n\nfused_rods_length = rods[-1] + rods[0]\nfused_rods_num = len(rods) - 1\n\nfor i in range(fused_rods_num):\n    fused_rods_length -= math.fabs(rods[i] - rods[i + 1])\n\nprint(fused_rods_length)\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == '79'\nassert solution(\"4\\n23\\n2\\n1\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\nSample Input:\n5 3 3 5\n0 1 4\nSample Output:\nimpossible\nassert solution('5 3 3 5\\n0 1 4') == 'impossible'\n\n\"\"\"\n\nn, m, s, d = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nnew = [int(x) for x in input().split()]"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('5 3 2 4\\n0 1 4') == 'impossible'"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nSample Input:\n5 5 3 4\n0 1 3 2\nSample Output:\nimpossible\n\"\"\"\n\nn, m, s, d = [int(x) for x in stdin.split()]\nlst = [int(x) for x in stdin.split()]\nlst = sorted(lst)"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)\nprint(solution(str(input)))\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"\n\nimport sys\nimport random\nimport numpy as np\nfrom functools import partial\nfrom itertools import product"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"7 4 3 3\\n0 1 2 3\") == \"2 2 1\"\nassert solution(\"10 5 3 4\\n0 1 2 3 4 5 6 7 8 9 10\") == \"2 4 2 1\"\nassert solution(\"5 3 3 4\\n2 1 2\") == \"impossible\"\nassert solution(\"5 1 3 4\\n1 2\") == \"2 1 2\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 1 2 2 2') == '0 0 1 0 0 0'\nassert solution('0 2 2 2 2 7') == '0 1 1 0 0 0'\nassert solution('0 1 1 1 2 2') == '0 0 1 0 0 0'\nassert solution('0 2 2 2 2 7') == '0 1 1 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 0 2 0 0') == '0 0 0 0 0 0'\nassert solution('0 1 2 2 2 8') == '0 0 0 0 0 0'\nassert solution('1 1 1 1 1 1') == '0 0 0 0 0 0'\nassert solution('1 1 1 1 2 2') == '0 0 0 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 2 3 4 5 6\") == \"0 0 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('2 1 0 0 0 1') == '1 1 0 0 0 1'\nassert solution('0 2 2 2 1 7') == '1 0 0 0 0 1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 -1\") == \"0 0 0 0 0 -1\"\nassert solution(\"-1 -1 -1 -1 -1 -1\") == \"0 0 0 0 0 0\"\nassert solution(\"0 -1 -1 -1 -1 -1\") == \"0 0 0 0 0 -1\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"2 1 2 2 7 1\") == \"2 2 0 0 0 1\"\nassert solution(\"0 2 2 2 7 1\") == \"1 2 0 0 0 1\"\nassert solution(\"0 2 2 2 1 7\") == \"1 2 0 0 0 1\"\nassert solution(\"0 2 2 2 7 1\") == \"1 2 0 0 0 1\"\n\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 0 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 2 2 2 7\") == \"0 1 0 0 0 1\"\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('3\\n1234 qwerty 0.3333\\n5678 0.5000\\n324321 0.3333') == '0.3333'\nassert solution('1\\n1234 qwerty 0.3333') == '0.3333'\n'''"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n123456 0.6666\nqwerty 0.3334\n''') == '1.3334'\nprint('Test pass.')"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\n'''\nimport math"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\n\nfrom statistics import mean"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n123456 0.6666\nqwerty 0.3334''') == '1.3334'"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"1\\npassword 0.9\\npassword 0.1\") == \"10.0\"\nassert solution(\"1\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"1\\npassword 0.9\\npassword 0.1\") == \"10.0\"\nassert solution(\"1\\npassword 0.9\\npassword 0.1\\npassword 0.1\") == \"10.0\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\n\"\"\"\n\nfrom math import ceil\n\nn, p = map(int, input().split())\ndist = list(map(int, input().split()))"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\n---\nSample Input:\n3 1\n1 2 3\nSample Output:\n2\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\nassert solution(\"3 1\\n4 2 1\") == \"2\"\nassert solution(\"3 1\\n2 4 1\") == \"2\"\n\"\"\"\n\nfrom math import factorial\nfrom typing import List\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\nprint(solution(stdin.read()))"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\"\nimport math\n\nn, p = map(int, stdin.readline().split())\n\ncars = list(map(int, stdin.readline().split()))\n\np = max(p, cars[0])\n\nfor i in range(1, n):\n    if i < p:\n        cars[i] = max(cars[i], cars[i - 1])\n    cars[i] = min(cars[i], cars[i - 1] + cars[i])\n    if i < p:\n        cars[i] = max(cars[i], cars[i + 1])\nprint(cars[n - 1])"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                                            \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                                           \\ne: ----------------------------------------------------------\\nd:                                                                           \\nc:                                                                           \\nb:                                                                           \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == 'G:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\ng:\\nf:\\ne:\\n\\nd:\\n\\nc:\\n\\nb:\\n\\na:\\n\\n\\n\\n'\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n\"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\n\"\"\"\n(5) Write a program that outputs the reversal of a sequence of numbers. The input is a sequence of numbers, one per line. The output is a sequence of the same numbers, each on a new line, in reverse order. For example:\n\nInput:\n\n5\n\n1\n\n2\n\n3\n\n4\n\n5\n\nOutput:\n\n5\n\n5\n\n4\n\n3\n\n2\n\n1\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n\n\"\"\"\nFrom the examples we see that the string is converted to a list, each element representing one staff, and the element 'A' is a space.\n\nIn the next section we will represent each staff as a dictionary, and iterate over the string to create each staff and store it in a list. \n\nFor the first staff, we have a space representing the start of the staff.\n\nFor the last staff, we have a space representing the end of the staff.\n\nAfter that, each staff element is represented by a dictionary. We iterate over the input string to create each dictionary, then add each dictionary to a list.\n\nFinally, we iterate over the list of staffs to get the string representation of each staff. \n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(stdin))\n\nhttps://www.codewars.com/kata/50654ddff44f8004ae2000045"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('23\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                 \nF: -----------------------------------------*-----------------------------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n\nassert solution('14\\nB2 B2 B2 B2 B2 B2 B2 B2 B2 B2 B2 B2 B2') == 'G:                 \nF: -----------------------------------------*-----------------------------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC:                                                        \nB: --------------------------------------------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n\nassert solution('22\\nA B B A B B A B B') == 'G:                 \nF: -----------------------------------------*-----------------------------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC:                                                        \nB: --------------------------------------------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n\nassert solution('20\\nA A A A A A A A A A A A A A A A') == 'G:                 \nF: -----------------------------------------*-----------------------------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC:                                                        \nB: --------------------------------------------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n\nassert solution('21\\nA A A A A A A A A A A A A A A A A') == 'G:                 \nF: -----------------------------------------*-----------------------------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC:                                                        \nB: --------------------------------------------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF: -----*--------------------\\nE: *   *          *             *   *                  *   *\\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----*------\\nA: \\ng: -----------------------------------------------*----------\\nf: \\ne: ----------------------------------------------------------\\nd: \\nc: \\nb: \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF: -------------------------------------*--------------------\\nE:\\nD:\\nC: ***\\nB:\\nA:\\ng:\\nF: ---------------------------------------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:\\nG:\\nf:\\nE: ----------------------------------------------------------\\nD:\\nC:                                                   *\\nB:                                                  \\nA:\\ng:\\nF: ----------------------------------------------------------\\ne:\\nD:                                                    \\nC:                                            \\nB:                                                \\nA:\\n'\n\nassert solution('3\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G: \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:\\nG:\\nf:\\nE: ----------------------------------------------------------\\nD:                                                    \\nC:                                            \\nB:                                                \\nA:\\n'\n\nassert solution('31\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G: \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:\\nG:\\nf:\\nE: ----------------------------------------------------------\\nD:\\nC:                                                    \\nB:                                                \\nA:\\ng:\\nF: ----------------------------------------------------------\\ne:\\nD:                                                    \\nC:                                            \\nB:                                                \\nA:\\n'\n\nassert solution('31\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G: \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:\\nG:\\nf:\\nE: ----------------------------------------------------------\\nD:                                                    \\nC:                                            \\nB:                                                \\nA:\\ng:\\nF: ----------------------------------------------------------\\ne:\\nD:                                                    \\nC:                                            \\nB:                                                \\nA:\\n'\n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"26\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == 'G:\\nF: ******************************\\nE:       **          **             **   *   *                  ** **\\nD: *-------------------------------------------------------*-------*-----------------------------*-------*------------------------------*-----*------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----------------*-----*------\\nA:\\ng: -----------------------------------------------*----------\\nf:\\ne: ----------------------------------------------------------\\nd:\\nc:\\nb:\\na:\\n'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '\\nG:       \\nF: ----------\\nE:       \\nD: ---------\\nC:       \\nB: ----------\\nA:        \\ng: ----------\\nf:        \\ne: ------------------\\nd: ----------\\nc:        \\nb: ----------\\na: ------------------'\nassert solution('3') == '\\nG:        \\nF: ---\\nE:   \\nD: ---\\nC: ---\\nB: ---\\nA: ---\\ng: ---\\nf: ---\\ne: ---\\nd: ---\\nc: ---\\nb: ---\\na: ---'\nassert solution('7') == '\\nG:                                                   \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 2 2\") == \"possible\"\nassert solution(\"4\\n2 2 2\") == \"possible\"\nassert solution(\"4\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n1 1 2\") == \"possible\"\nassert solution(\"4\\n1 2 2\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n1 1\\n1') == 'possible'\nassert solution('1\\n1 1\\n5') == 'possible'\nassert solution('1\\n2 2\\n5') == 'possible'\nassert solution('1\\n2 2\\n3') == 'impossible'\nassert solution('2\\n2 2\\n3') == 'impossible'"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1''') == 'possible'\nassert solution('''5\n1 2 3 4 5''') == 'possible'\nassert solution('''5\n2 3 4 5 6''') == 'possible'\nassert solution('''5\n1 2 3 5 6''') == 'possible'\nassert solution('''5\n1 2 3 4''') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1\") == 'possible'\nassert solution(\"5\\n2 1 2 1 2\") == 'possible'\nassert solution(\"3\\n1 2 1\") == 'impossible'\nassert solution(\"5\\n3 2 1 3 2\") == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n1 2 2 1\") == \"possible\"\nassert solution(\"5\\n1 2 3 2 1\") == \"possible\"\nassert solution(\"6\\n1 2 3 2 1\") == \"possible\"\nassert solution(\"7\\n1 2 3 2 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"4 1 1\\n2 1 2\") == \"possible\"\nassert solution(\"3 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"3 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"3 1 1\\n1 1 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2 2') == 'possible'\nassert solution('5\\n4 2 8 6') == 'possible'\nassert solution('7\\n4 2 8 6 7 5') == 'possible'\nassert solution('6\\n5 4 2 6 9') == 'possible'\nassert solution('7\\n5 4 2 6 9') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'possible'\nassert solution('1 2 3') == 'possible'\nassert solution('2 2 2') == 'possible'\nassert solution('2 2 3') == 'possible'\nassert solution('3 2 2') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 2 1') == 'impossible'\nassert solution('3\\n1 1 2') == 'impossible'\nassert solution('3\\n2 1 2') == 'possible'\nassert solution('3\\n2 1 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1\\n') == 'possible'\nassert solution('3 2 3\\n') == 'impossible'\nassert solution('4 3 4\\n') == 'possible'\nassert solution('3 3 3\\n') == 'impossible'\nassert solution('5 2 6\\n') == 'possible'\n\n-----Instructions-----\nFor each test case, print the word possible if you can make a non-degenerate triangle with three sticks and impossible if you can not.\n\nHint: Think about the boundary conditions. What is the largest possible area of the triangle?\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nimport sys\nimport itertools\n\nassert 1 <= int(sys.stdin.readline()) <= 10 ** 5\n\nbricks = list(map(int, sys.stdin.readline().split()))\n\nbricks.sort()\n\ntotal = 0\nfor i, j in itertools.combinations(bricks, 2):\n    if j > i:\n        total += 1\n\nprint(total)\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nimport sys\n\n_, *widths = list(map(int, input().split()))\n\nn_towers = 0\nstack = []\nfor width in widths:\n    n_towers += 1\n    while stack and stack[-1] <= width:\n        stack.pop()\n    stack.append(width)\n\nprint(n_towers)\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('5') == 1\nassert solution('1 1 2 1 1') == 0\nassert solution('1 2 3 3 1 1 1 2 1 2 1 1 1') == 3\nassert solution('3 1 3 2 1 3 1 2 2 1') == 2\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"7\\n2 1 1 2 1 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\n------\nSample Input:\n10\n3 1 2 3 4 3 3 3 3 3\nSample Output:\n4\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\nprint(solution(stdin))\n\n-----Constraints-----\n$N \\in [1, 10^5]$\n$x_ i \\in [1, 10^6]$\n\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''ASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61''') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\nassert solution('''ZEN 23.21 23.19\nDELTA 23.11 23.23\nJAMIE 23.08 23.15\nALEX 25.52 25.44\nWEATHER 23.13 23.20\nIRVIN 23.07 23.10''') == 'ALEX'\nassert solution('''MAY 1.88 1.80\nOCT 1.38 1.46\nNOV 1.91 1.51\nDEC 1.99 1.59\nJAN 1.65 1.53\nFEB 1.50 1.46\nMAR 1.75 1.43\nJUL 1.87 1.49\n''') == 'DEC'"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nA\\n9.00\\nB\\n9.10\\nC\\n9.20\\nD\\n9.30\\nE\\n9.40\") == \"D\\nA\\nB\\nE\"\n\"\"\"\nimport sys\nfrom operator import itemgetter"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''ASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61''') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\nprint('Test pass.')"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1\\n1') == '1'\nassert solution('5\\n1.2\\n0.5\\n0.25\\n0.2') == '0.24999999999999996'\nassert solution('5\\n1.2\\n0.5\\n0.25\\n0.2\\n1.0\\n0.0\\n0.1\\n0.0\\n0.0\\n0.0') == '0.24999999999999996'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n\"\"\"\n) == \"35.54\"\nprint(\"Test pass.\")"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\nfrom collections import namedtuple\nimport sys\n\nMAX_RUNNERS = 500\nMAX_LEG = 4\nMAX_NAME_SIZE = 20\nMAX_SPEED = 20\n\nRunner = namedtuple('Runner', ['name','speed', 'legs'])\n\nrunners = []\n\nfor line in sys.stdin.readlines():\n    name, s, b = line.split()\n    runners.append(Runner(name, float(s), int(b)))"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\\n\") == '2'\n\n------\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 4') == '2'\nassert solution('3\\n1 2\\n3 5\\n4 6') == '1'\n\n'''"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 4\n5 6\n\"\"\") == \"2\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\"\"\"\nimport math"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n2 4') == '2'\nassert solution('5 6\\n1 2\\n4 6\\n7 8') == '0'"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 4\\n5 6') == 2\n\"\"\"\n\nimport sys\n\nlines = [line.strip().split(\" \") for line in sys.stdin.readlines()]\nn = int(lines[0][0])\n\ni = 1\nmin = lines[0][1]\nmax = lines[0][2]\n\nwhile i < n:\n    if min > lines[i][1]:\n        min = lines[i][1]\n    if max < lines[i][2]:\n        max = lines[i][2]\n    i += 1\n\nprint(max - min + 1)\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('4\\n1 1\\n1 2\\n2 2\\n2 3') == '1'\nassert solution('4\\n4 4\\n1 1\\n1 2\\n2 2\\n2 3') == '0'\nassert solution('4\\n4 4\\n1 2\\n2 2\\n2 3') == '0'\n\"\"\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\n\n'''\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"heeeee\") == \"heeeee\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hey') == 'heey'\nassert solution('hoo') == 'hee'\nassert solution('hoo') == 'hee'\nassert solution('hoo') == 'hee'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('he') == 'hee'\nassert solution('hey') == 'heeey'\nassert solution('h') == 'hee'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"heeey\") == \"heeeeeeeeeey\"\nassert solution(\"heyheyhey\") == \"heeeeeeeeeeeeeey\"\nassert solution(\"huhu\") == \"huhuhuhu\"\nassert solution(\"haha\") == \"haha\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'heey'\nassert solution('yee') == 'ye'\nassert solution('heeey') == 'hee'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hey') == 'heey'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hey') == 'hee'\nassert solution('he e') == 'hee'\nassert solution('heyhey') == 'heehee'\nassert solution('hee hee') == 'heehee'\nassert solution('h ee h') == 'h hee h'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('hey') == 'heey'\nassert solution('bye') == 'bee'\nassert solution('see you later') =='see you later'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hey\") == \"heey\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hey') == 'heey'\nassert solution('heyhey') == 'heeeeeey'\nassert solution('heeeeey') == 'heeeeey'\nassert solution('helo') == 'hello'\nassert solution('hii') == 'hii'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution) == solution\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n0\") == \"1\\n2\"\nassert solution(\"2\\n0 1\\n1 0\\n1 2\\n2 1\\n3 2\\n3 3\\n0 3\") == \"1\\n2\\n3\\n4\"\n\nprint(solution(input()))"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4\\n2 3'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\"\"\"\n\n\"\"\"\nThe number of roads will always be one more than the number of villages. Therefore, we can construct the graph using a matrix of size n+1 x n+1 and then remove the diagonal. \n\nThe easiest way is to start from any city and then look at every city that it can connect to, and so on. \n\n\"\"\"\n\nimport unittest\nimport math\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n0 1 2\\n1 0 2\") == \"1 2\\n1 3\"\nassert solution(\"1 2 3\\n2 1 2\\n1 0 2\") == \"1 2\\n1 3\"\nassert solution(\"1 2 3\\n2 1 2\\n1 3 0\") == \"1 2\\n1 3\"\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"3\\n1 2 3\\n2 3 0\\n2 1 2\\n\") == \"1 2\\n2 1\\n2 3\"\nassert solution(\"3\\n1 0 3\\n2 1 1\\n2 2 2\\n\") == \"1 2\\n2 1\\n1 0\"\nassert solution(\"3\\n1 0 3\\n2 1 1\\n2 2 2\\n\") == \"1 2\\n2 1\\n1 0\"\nassert solution(\"3\\n1 1 1\\n2 2 2\\n2 3 3\\n\") == \"1 2\\n2 1\\n1 1\\n2 3\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AWQPLIGK\") == \"ADIJYEVK\"\nassert solution(\"VQGTLJPPSM\") == \"ZXOIMKPSS\"\nassert solution(\"WPSVUQLWHK\") == \"WVTRQOISK\"\nassert solution(\"WXYZPLKOWM\") == \"WXUZISKOM\"\nassert solution(\"UVZWLKPSM\") == \"VXYWIMKS\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('FZKWRAQJK') == 'AFGXN'\nassert solution('WUGRMLHRS') == 'ZCKUWXNSP'\nassert solution('YHEJJKUYVR') == 'LGAJYQPWKV'\nassert solution('UQKCPNVRKL') == 'AEHIJK'\n\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(\"ALL TEST CASES PASSED\")\n\n---\n\nDRM Encryption is a new kind of encryption. Given an encrypted string (which we\u2019ll call a DRM message), the decryption process involves three steps: Divide, Rotate and Merge. This process is described in the following example with the DRM message \u201cEWPGAJRB\u201d:Divide\n\n\u2013 First, divide the message in half to \u201cEWPG\u201d and \u201cAJRB\u201d.Rotate\n\n\u2013 For each half, calculate its rotation value by summing up the values of each character ($\\textrm{A} = 0, \\textrm{B} = 1, \\ldots, \\textrm{Z} = 25$). The rotation value of \u201cEWPG\u201d is $4 + 22 + 15 + 6 = 47$. Rotate each character in \u201cEWPG\u201d $47$ positions forward (wrapping from Z to A when necessary) to obtain the new string \u201cZRKB\u201d. Following the same process on \u201cAJRB\u201d results in \u201cBKSC\u201d.Merge\n\n\u2013 The last step is to combine these new strings (\u201cZRKB\u201d and \u201cBKSC\u201d) by rotating each character in the first string by the value of the corresponding character in the second string. For the first position, rotating \u2018Z\u2019 by \u2018B\u2019 means moving it forward 1 character, which wraps it around to \u2018A\u2019. Continuing this process for every character results in the final decrypted message, \u201cABCD\u201d.\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        assert solution(\"EWPGAJRB\") == \"ABCD\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"CDEFGHIJKLMN\") == \"ABCDEFGHIJKLMN\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"KJHGFIJS\") == \"KJHGFIJS\"\nassert solution(\"KJHGFIJX\") == \"KJHGFIJX\"\nassert solution(\"MUNVFCPT\") == \"MUNVFCPT\"\nassert solution(\"VOWZPLKF\") == \"VOWZPLKF\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"QRWSECOER\") == \"POLNC\"\nassert solution(\"SAKLDJILKLL\") == \"LLKLJLJKL\"\n\"\"\"\n\nfrom typing import Callable"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"BKSC\") == \"ZRKB\"\nassert solution(\"TQKWJK\") == \"WZYO\"\nassert solution(\"ABRWSKIZ\") == \"RWWRSKZ\"\nassert solution(\"ZRKB\") == \"BKSC\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 0\nassert solution(\"a\") == 0\nassert solution(\"bb\") == 0\nassert solution(\"abb\") == 0\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 2\n\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == 2\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"aabbcc\") == 1\n\"\"\"\n\nimport re"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 2\nassert solution('add') == 1\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == 2\n\"\"\"\n\nimport pytest\nfrom collections import Counter"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 2\n\n-----Note-----\nYou don't need to worry about performance, however, the input is not allowed to be larger than 100 kB.\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 2\nassert solution('abccba') == 1\nassert solution('cba') == 2\nassert solution('ddaa') == 1\nassert solution('c') == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\n-----Notes-----\na-z - 26 characters\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"ddd\") == 0\nassert solution(\"aabbc\") == 2\nassert solution(\"aaabbb\") == 1\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\nassert solution(\"hahah\") == \"no\"\nassert solution(\"aaaaaaahh\") == \"go\"\n\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == 'go'\nprint(solution(stdin))\n\n----"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaaah') == 'go'\n\"\"\"\n\nstdin = input()\ndoctor = input()"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaah') == 'go'\n\nprint(solution(input()))\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaaaah\") == \"no\"\nassert solution(\"h\") == \"go\"\nassert solution(\"haha\") == \"no\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaah\") == \"no\"\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaah') == 'no'\nassert solution('h') == 'go'\n\nprint(solution('aaah'))\nprint(solution('h'))\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaah\") == \"go\"\nassert solution(\"aaah\") == \"no\"\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"no\"\nassert solution(\"a\") == \"no\"\nassert solution(\"aaaah\") == \"go\"\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaaah') == 'go'\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A1A2A1A2A1A2A1A2A1\") == \"B\"\nassert solution(\"A2B1A1A2A2A2A1A2A1A1\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input_1) == output_1\n\ninput_2 = open(\"input.txt\").read().strip()\nassert solution(input_2) == open(\"output.txt\").read().strip()\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B2A1B2A2B1A1A2A2') == 'B'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\nimport re"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A1B1A2B2A1A2A2A2') == 'A'\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2B2') == 'B'\nassert solution('A2B1A2B2A1A2A2A2A') == 'A'\n\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B1A2B2A2A1A2A1') == 'A'\nassert solution('B2A1A2B2A1A2A2A2') == 'B'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B1A1B2A1A1A1A1') == 'A'\nassert solution('B1B1B1B1B1B1B1B1') == 'B'\nassert solution('A1A2A2A2A1A2A2B2') == 'A'\nassert solution('B1A1A2A1A1A1A1A1A1B1') == 'B'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2A\") == \"B\"\n\"\"\""
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\\n6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15''') == '21'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 3 2\\n1 2 2\\n3 2 10\\n1 2 2\\n2 3 10\\n3 4 10\") == \"21\"\nassert solution(\"4 4 2 1\\n1 2 2\\n3 2 10\\n1 2 2\\n2 3 10\\n3 4 10\") == \"12\"\nassert solution(\"4 4 3 2\\n1 2 2\\n3 2 10\\n1 2 2\\n2 3 10\\n3 4 10\") == \"12\"\nassert solution(\"4 4 2 1\\n1 2 2\\n3 2 10\\n1 2 2\\n2 3 10\\n3 4 10\") == \"12\"\nassert solution(\"4 4 3 2\\n1 2 2\\n3 2 10\\n1 2 2\\n2 3 10\\n3 4 10\") == \"12\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 10\\n1 3 5\\n3 4 20\\n3\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 10\\n1 2 7\\n1 3 3') == '14'\nassert solution('5 4 20 4\\n2 3 8\\n2 4 3\\n5 1 1\\n3 6 10\\n3 5 15\\n1 2 7\\n1 3 3') == '21'"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 10 1\\n1 2 3\\n2 3 5\\n3 4 7\\n4 5 1\\n5 6 9\") == \"20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2 10\\n2 5\\n1 1 1') == '9'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 1 1 2 1\") == \"2\"\nassert solution(\"3 4 1 1 3\") == \"4\"\nassert solution(\"3 3 5 1 1 3\") == \"2\"\nassert solution(\"3 3 2 1 1 1 2\") == \"3\"\nassert solution(\"4 2 2 1 1 2\") == \"1\"\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == test_result_0\nassert solution(test_input_1) == test_result_1\n\"\"\"\n\nfrom itertools import product\n\nclass Luka:\n    def __init__(self):\n        self.start_intersection = 0\n        self.end_intersection = 0\n        self.mister_start = 0\n        self.diff = 0\n        self.num_intersections = 0\n        self.num_streets = 0\n        self.streets = []\n        self.visited_streets = []\n        self.delivery_times = []\n        self.scheduling_times = []\n\n    def input(self, stdin: str):\n        input_list = stdin.split('\\n')\n\n        self.num_intersections, self.num_streets = list(map(int, input_list[0].split()))\n        self.start_intersection, self.end_intersection, self.mister_start, self.diff = list(map(int, input_list[1].split()))\n        self.streets = [list(map(int, item.split())) for item in input_list[2:]]\n        self.streets = list(zip(*self.streets))\n\n        self.num_streets = sum(self.num_streets)\n        self.num_intersections = len(self.num_intersections)\n\n        self.visited_streets = [0] * self.num_streets\n\n        self.delivery_times = [0] * self.num_streets\n\n    def schedule(self):\n        for i in range(self.num_streets):\n            self.visited_streets[i] = 1\n\n            start_time = self.start_intersection + self.diff\n            end_time = start_time + self.streets[0][i]\n\n            self.scheduling_times.append((start_time, end_time))\n\n            self.delivery_times[i] = (start_time, end_time)\n\n        self.scheduling_times = sorted(self.scheduling_times, key=lambda x: x[0])\n\n    def deliver(self):\n        for start_time, end_time in self.scheduling_times:\n            if start_time <= self.mister_start < end_time:\n                return start_time\n\n    def delivery_time(self, i: int):\n        if self.visited_streets[i]:\n            return self.delivery_times[i]\n\n    def output(self):\n        return self.deliver()\n\n    def schedule_and_deliver(self):\n        self.schedule()\n        return self.deliver()\n\n\ntest_input_0 = '''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n'''\n\ntest_result_0 = 21\n\ntest_input_1 = '''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n'''\n\ntest_result_1 = 21\n\nl = Luka()\nl.input(test_input_0)\nassert l.output() == test_result_0\n\nl = Luka()\nl.input(test_input_1)\nassert l.output() == test_result_1\n\nl = Luka()\nl.input(stdin)\nprint(l.output())\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n2\\n2\\n2\\n2\") == \"0\"\nassert solution(\"1\\n1\\n2\\n2\\n3\\n3\") == \"0\"\nassert solution(\"1\\n1\\n2\\n2\\n3\\n4\") == \"0\"\nassert solution(\"1\\n1\\n2\\n2\\n3\\n4\") == \"0\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\nassert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHelloooWoorlddd\"\n\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\nassert solution(\"D HHeellloWooorrrrlld!!!\") == \"HHHeellloWooorrrrlld!!\"\n\"\"\"\n\nimport re\n\n_encode = re.compile(r'E\\s([A-Za-z])(\\1{1,9})\\1')\n_decode = re.compile(r'D\\s([A-Za-z]{2})\\1(\\d{1,9})')\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nprint(solution('E HHHeellloWooorrrrlld!!'))\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\nassert solution(\"D qqwqdqqqq\") == \"qqwqdqqqq\"\nassert solution(\"D eeeeeeeeeeeeeeeeeeeeeeeeeee\") == \"e\"\nassert solution(\"D eeeeeeeeeeeeeeeeeeeeeeeeeeee\") == \"eee\"\nassert solution(\"D eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\") == \"eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\nimport re\n\nINPUT_EXAMPLE = \"E HHHeellloWooorrrrlld!!\"\n\n\n@dataclass\nclass Input:\n    text: str\n\n\n@dataclass\nclass Output:\n    encoded: str\n    decoded: str\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\n\"\"\"\nSample Input:\nD H3e2l3o1W1o3r4l2d1!2\nSample Output:\nHHHeellloWooorrrrlld!!\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AA') == 'A1'\nassert solution('AAA') == 'A3'\nassert solution('AAABB') == 'A3B1'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D TohyYOouwHoZoRrYohpSqWgHu') == 'To ho Yo ho'\nassert solution('D qQcwAsKdjsJSSQKdJwgCqQ') == 'qQcwAsKdjsJSSQKdJwgCqQ'\nassert solution('D kknFnhQjgBdYMtJcWGdYh') == 'kknFnhQjgBdYMtJcWGdYh'\nassert solution('E xXeXxXeXxXeXxXeXxXeXxX') == 'xXeXxXeXxXeXxXeXxX'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\nassert solution(\"6\") == \"Alice\"\nassert solution(\"7\") == \"Alice\"\nassert solution(\"8\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'Alice'\nassert solution('4') == 'Bob'"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('4\\n') == 'Bob'\nassert solution('8\\n') == 'Bob'\nassert solution('10\\n') == 'Alice'\nassert solution('11\\n') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('8') == 'Alice'\nassert solution('15') == 'Bob'\nassert solution('101') == 'Alice'\n\"\"\"\nimport sys"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"8\") == \"Bob\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"2\") == \"Bob\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"10\") == \"Bob\"\n\nprint(solution(\"9\"))\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('4') == 'Alice'\nassert solution('5') == 'Alice'\nassert solution('6') == 'Bob'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"6 4 10\") == \"6+4=10\"\nassert solution(\"9 5 12\") == \"9+5=12\"\nassert solution(\"15 11 4\") == \"15+11=4\"\n\"\"\"\n\na, b, c = map(int, input().split())\nprint(\"{}+{}={}\".format(a, b, a + b))\nprint(\"{}-{}={}\".format(a, b, a - b))\nprint(\"{}*{}={}\".format(a, b, a * b))\nprint(\"{}/{}={}\".format(a, b, a / b))\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"1 2 2\") == \"1=2\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"8 5 2\") == \"5=8\"\nassert solution(\"10 3 5\") == \"10=3\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\nassert solution(\"1 2 3\") == \"1 + 2 = 3\"\nassert solution(\"8 5 9\") == \"8 + 5 = 9\"\nassert solution(\"9 9 9\") == \"9 + 9 + 9 = 18\"\nassert solution(\"0 0 0\") == \"0 + 0 = 0\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(5)+\" \"+str(3)+\" \"+str(8)) == \"5+3=8\"\nassert solution(str(5)+\" \"+str(3)+\" \"+str(8)) == \"5+3=8\"\nassert solution(str(5)+\" \"+str(3)+\" \"+str(8)) == \"5+3=8\"\n\nassert solution(str(5)+\" \"+str(3)+\" \"+str(8)) == \"5+3=8\"\nassert solution(str(5)+\" \"+str(3)+\" \"+str(8)) == \"5+3=8\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 7\") == \"3+5=7\"\nassert solution(\"1 5 4\") == \"1+5=6\"\nassert solution(\"10 10 10\") == \"10+10=20\"\nassert solution(\"11 11 11\") == \"11+11=22\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"1 2 3\") == \"1+2=3\"\nassert solution(\"6 9 8\") == \"6+9=15\"\nassert solution(\"2 3 7\") == \"2+3=5\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('5 3 2') == '5+3=2'\nassert solution('1 2 3') == '1+2=3'\nassert solution('5 3 8') == '5+3=8'\nassert solution('5 3 2') == '5+3=2'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"15 3 8\") == \"15-3=8\"\nassert solution(\"25 3 8\") == \"25/3=8\"\nassert solution(\"25 3 8\") == \"25//3=8\"\nassert solution(\"25 3 8\") == \"25%3=8\"\n\"\"\"\n\nnumbers = input().split()\na, b, c = numbers\nx = int(a) + int(b)\ny = int(a) - int(b)\nz = int(a) * int(b)\nw = int(a) / int(b)\n\nprint(f'{x}+{y}={c}')\nprint(f'{x}-{y}={c}')\nprint(f'{x}*{y}={c}')\nprint(f'{x}/{y}={c}')\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('3 2 1') == '3+2=1'\nassert solution('20 10 30') == '20+10=30'\nassert solution('11 5 9') == '11+5=16'\nassert solution('4 7 1') == '4+7=13'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\nSample Input:\n8 2 7\nSample Output:\n8-2=6\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n3 2 2 1 1 3 1 1''') == 'NO'\nassert solution('''8\n1 1 2 2 3 1 1 3''') == 'NO'\nassert solution('''8\n1 1 1 1 1 1 1 1''') == 'NO'\nassert solution('''8\n1 1 1 1 1 1 1 1''') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\n\nN = int(input())\nD = list(map(int, input().split()))\n\ncount = 0\nfor i in range(1, N):\n    if D[i - 1] == D[i]:\n        count += 1"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8 6 3 2 1 1 3 1 1') == 'NO'\n\"\"\"\n\n\"\"\"\nSolution:\nThe first thing to do is to determine if the total sum is divisible by N - 1, which means N - 1 must be divisible by the sum of D_ i's.\n\nThen we can construct a graph using D, a list of direct neighbors of each node. We then verify that the graph is a valid tree with the DFS approach.\n\nAn example graph is shown below:\n\n---\n---> -2\n---> -1 0 1 2 3\n0 ---- 1 2 3\n2 ------ 3\n5 ---> 4\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1\\n2\") == \"YES\"\nassert solution(\"3\\n1\\n3\\n2\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n4\") == \"YES\"\nassert solution(\"6\\n3\\n1\\n1\\n2\\n2\\n2\") == \"NO\"\nassert solution(\"8\\n1\\n1\\n2\\n3\\n3\\n3\\n3\\n3\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n4\\n\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n1 2 2 1 1 3 1 1') == 'NO'\nassert solution('8\\n3 2 2 1 2 3 1 1') == 'YES'\nassert solution('8\\n1 2 2 1 3 3 1 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8\\n1 1 2 3 3 2 1 1\") == \"NO\"\nassert solution(\"6\\n2 2 3 4 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8\\n2 2 1 1 3 1 1\") == \"NO\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"3 2 1 1 3 1 1\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch\\ndemon'\n\n'''\n\nfrom collections import Counter\n\nN = int(input())\n\nlst = []\n\nfor i in range(N):\n    lst.append(input())\n\nlst.sort()\n\na = Counter(lst)\n\nans = []\n\nfor key, value in a.items():\n    if value == N:\n        ans.append(key)\n\nans.sort()\n\nprint(*ans, sep='\\n')"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nghost\\nmummy\") == 'ghost'\nassert solution(\"2\\nghost\\nmummy\") == 'ghost'\nassert solution(\"1\\nghost\") == 'ghost'\nassert solution(\"1\\nghost\\nmummy\") == 'ghost'\nassert solution(\"1\\nghost\\nmummy\\nwitch\") == 'ghost'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\nghost\\nghost\\nmummy\\nmummy\\nwitch\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\n\"\"\"\n\nimport operator\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'aa'\nassert solution('3') == 'ab'\nassert solution('4') == 'aab'\nassert solution('5') == 'abb'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == 'ghost'\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") =='mummy'\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == 'witch'\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'ghost'\nassert solution('1') == 'ghost'\nassert solution('11') == 'ghost'\nassert solution('3') =='mummy'\nassert solution('2') =='mummy'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABCDE\") == \"ABCD\"\nassert solution(\"ABCDEE\") == \"ABCD\"\nassert solution(\"ABCDEF\") == \"ABC\"\nassert solution(\"ABCGHIJ\") == \"ABCGHI\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b c d') == 'a'\nassert solution('b a b a') == 'b'\nassert solution('a b c d b a') == 'a b'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nghost\\nmummy\\nwitch\\ndemon\") == \"ghost\"\n\"\"\"\n\nfrom typing import List\nimport sys\nfrom collections import Counter\n\nclass Solution:\n    def main(self):\n        num_colleagues = int(sys.stdin.readline())\n        colleagues_categories = [sys.stdin.readline().strip() for _ in range(num_colleagues)]\n        print(' '.join(sorted(Counter(colleagues_categories).keys(), key=lambda key: (Counter(colleagues_categories).get(key), key))))\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nghost\\nghost\\nghost\\nghost\\nghost\\nmummy\\nghost\\nghost\\nghost\") =='mummy'\nassert solution(\"5\\ndemon\\ndemon\\ndemon\\ndemon\") == 'demon'\nassert solution(\"4\\nwitch\\nwitch\\nwitch\\nwitch\") == 'witch'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Artist Album Song_Title Length_seconds') == 'Artist Album Song_Title Length_seconds'\n\n-----Problem-----\nJohn wants to make a playlist for his friends. To do this, he must first decide how they will arrange the songs in the playlist. The rules for arranging the songs are as follows:\n\nThere should be at least 5 songs in the playlist, and no more than 25.\nThe songs should be ordered by their title in lexicographic (alphabetical) order.\nSongs with the same title should be ordered by artist in ascending alphabetical order.\nThe same song should only appear once in the playlist.\nSongs can appear more than once in the playlist if they have the same artist, but are ordered by title in ascending alphabetical order.\nTo make the playlist, John must decide how many songs he should add to the playlist.\n\nGiven the lexicographically sorted lists of song titles and artists, how many songs should he add to the playlist to make it a logical playlist for his friends?\n\n-----Solution-----\n\nimport os\nfrom typing import List, Tuple\nfrom collections import Counter"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\"\n\"\"\"\n\nimport sys\nimport operator\nimport time\nfrom collections import defaultdict\nfrom functools import partial"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\nprint(\"Passed!\")\n\"\"\"\n\n\nfrom operator import itemgetter\nfrom itertools import permutations\n\nattr = [\"Artist\", \"Album\", \"Song_Title\", \"Length_seconds\"]\n\nnum = int(input())\nsongs = dict(zip(attr, [list(map(str, input().split())) for _ in range(num)]))\n\nnum = int(input())\ncommands = [input() for _ in range(num)]"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\n\n-----Explanation-----\nOne of the songs has these attributes: artist = \"Tchaikovsky\", album = \"Piano_Favorites\", song_title = \"November\", length_seconds = 163. After the first sort, the song list is printed as follows:\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\n\nAfter the second sort, the song list is printed as follows:\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\n\nAfter the third sort, the song list is printed as follows:\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nThe third sort starts from the order of songs as given in the input. After the first sort, the song list is in the order given by the second sort. After the second sort, the song list is in the order given by the first sort.\n\nIn the fourth sort, the song list is in the order given by the first sort. The song list is in the order given by the second sort. After the third sort, the song list is in the order given by the first sort.\n\nIn the fifth sort, the song list is in the order given by the first sort. The song list is in the order given by the second sort. After the fourth sort, the song list is in the order given by the first sort.\n'''"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\n\nprint('The code ran Correctly')\n'''\n\nimport sys\nfrom copy import deepcopy"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\n\"\"\"\nThe total number of unique attributes in the input is between 1 and 20. The number of sorting commands is between 1 and 100. The number of songs is between 1 and 20, and the number of attributes per song is between 1 and 100.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\nRuntime: 36 ms, faster than 87.86% of Python3 online submissions for Music Application.\nMemory Usage: 14.1 MB, less than 42.73% of Python3 online submissions for Music Application.\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\n\"\"\"\nAfter each sort command, print the list of attributes followed by the song list in the order given by the sort command, one song per line. Print a space between adjacent fields. Between each pair of printed lists, print a blank line.\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\"\"\"\n\n\"\"\"\n7. Create a class for both a person and a doctor. Each object should have the following properties:\n\nPerson:\nname\nage\ngender\nphone\naddress\nDoctor:\nspecialty\n\nAlso, create a function for each class which returns a string. You should use the __str__ method for both.\n\n-----Input-----\n\n-----Output-----\n\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age, gender, phone, address):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.phone = phone\n        self.address = address\n    def __str__(self):\n        return f\"Person: {self.name}, {self.age}, {self.gender}, {self.phone}, {self.address}\"\n\nclass Doctor(Person):\n    def __init__(self, name, age, gender, phone, address, specialty):\n        super().__init__(name, age, gender, phone, address)\n        self.specialty = specialty\n    def __str__(self):\n        return f\"{super().__str__()}, {self.specialty}\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5 5 5\") == \"NO\"\nassert solution(\"2 10 7\\n5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 4\\n1 2 3 4 5 6 7 8 9 10\") == \"NO\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n4 4 4 4 4 4') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5 5 5') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n7 7 7 7 7 7') == 'YES'\nassert solution('2 10 7\\n
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('5 5 6\\n5 5 5 5 5 5\\n') == 'YES'\nassert solution('5 5 6\\n5 5 5 5 5\\n') == 'NO'\nassert solution('5 5 6\\n4 4 4 4 4\\n') == 'YES'\nassert solution('5 5 6\\n5 5 5 5\\n') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\n'''"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('4 10 7\\n4 4 4 4 4 4 4') == 'NO'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\"\nassert solution(\"5\\nNNYY\\nYYNX\\nYYNY\\nYNNX\\nYYNY\\nNYYY\\nNNYX\\nNNYY\\nYNNX\") == \"66.666667\"\nassert solution(\"20\\nYNNY\\nYYNX\\nYNNX\\nYNXN\\nYYNX\\nYNNY\\nYYNX\\nYNXN\\nYYNX\\nYNNY\\nYYNX\\nYNNX\\nYNNX\\nYNNY\\nYYNX\\nYNNX\\nYNNX\\nYNNY\\nYYNX\\nYNNY\\nYNNX\") == \"50.000000\"\n\n\"\"\"\n\nimport math\nfrom fractions import Fraction"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nNYNY\\nNNYY\\nNYYY\\nNYYN') == 'Not Effective'\nassert solution('4\\nYNNY\\nNNNY\\nYNYY\\nYNNN') == 'Not Effective'\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\\n50.000000\"\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nyny\\nnyy\\nnyy\\nnyn\\nnyn\\nyyn\\nyyn\\nyyn\\nyyn\\n\") == \"Not Effective\"\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n10\nYNNY\nNNNY\nYNNN\nNNYN\nYYNN\nYYYN\nYYNY\nYYNY\nYYNN\nYNYY\n\"\"\"\n) == \"66.666667 50.000000 Not Effective\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\n\n\nfrom typing import List, Dict\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"\nprint('Passed')\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667 50.000000\"\n\"\"\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nNNNY\\nYYNN\\nNYNN\\nYYNN\") == \"Not Effective\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BAACC\") == 'Bruno'\nassert solution(\"CAAAB\") == 'Adrian'\nassert solution(\"CAACB\") == 'Adrian'\nassert solution(\"CAACC\") == 'Bruno'\nassert solution(\"CABCB\") == 'Goran'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BAACC') == 'Bruno'\nassert solution('BBBAA') == 'Goran'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABBACCCC\") == \"Goran\"\nassert solution(\"AABAABAA\") == \"Bruno\"\nassert solution(\"AABAABAAABBBAAAAB\") == \"Adrian\"\nassert solution(\"BABACCCCCBACCCCAABAABAABAC\") == \"Bruno\"\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BAACC') == '3\\nBruno'\nassert solution('ABAB') == '1\\nGoran'\nassert solution('BBABC') == '2\\nBruno'\nassert solution('AAABC') == '3\\nAdrian'\nassert solution('CBABA') == '2\\nAdrian'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"ABBAC\") == \"2\"\nassert solution(\"ABCCCBA\") == \"2\"\nassert solution(\"ABCABCABCABC\") == \"0\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BAACC') == 'Goran'"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AAB') == 'Bruno'\nassert solution('ABB') == 'Adrian'\nassert solution('CAB') == 'Bruno'\nassert solution('ABC') == 'Adrian'\nassert solution('CABAA') == 'Adrian'\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BAACC\") == \"3, Bruno\"\nassert solution(\"CAAB\") == \"0, Adrian\"\nassert solution(\"CABB\") == \"3, Goran\"\nassert solution(\"ABBC\") == \"2, Adrian\"\nassert solution(\"BCAC\") == \"1, Adrian\"\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BAACC') == '3'\nassert solution('ABCCBBA') == '1'\nassert solution('ABCA') == '2'\nassert solution('BABC') == '2'\nassert solution('A') == '1'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"CCABB\") == \"2\"\nassert solution(\"ABCCABCCB\") == \"2\"\nassert solution(\"ABCCB\") == \"1\"\nassert solution(\"ABBBCCABBCC\") == \"2\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\"\nassert solution(\"3 E right\\n10 A wrong\\n-1\") == \"0 0\""
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n\n\nfrom collections import Counter\nfrom datetime import datetime, timedelta\nimport re\nimport sys"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n\n----Hint----\nThe only two operations you need to know to calculate the final score are:\n\nThe sum of all the right submissions,\nThe sum of all the wrong submissions,\nThe sum of all the submissions that result in a right solution.\nA similar operation can be done to calculate the time score.\n\"\"\"\n\n\nfrom typing import Dict, List\nimport re\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\n\"\n                \"10 A wrong\\n\"\n                \"30 C wrong\\n\"\n                \"50 B wrong\\n\"\n                \"100 A wrong\\n\"\n                \"200 A right\\n\"\n                \"250 C wrong\\n\"\n                \"300 D right\") == \"3 543\"\n\nassert solution(\"7 H right\\n\"\n                \"15 B wrong\\n\"\n                \"30 E wrong\\n\"\n                \"35 E right\\n\"\n                \"80 B wrong\\n\"\n                \"80 B right\\n\"\n                \"100 D wrong\\n\"\n                \"100 C wrong\\n\"\n                \"300 C right\\n\"\n                \"300 D wrong\") == \"4 502\"\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1') == '3 543'\nprint(solution(stdin))\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == \"4 502\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == \"4 502\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == \"4 502\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == \"4 502\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1\") == '3 543'\nprint(solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1\"))"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\") == (3, 543)\n\"\"\"\n\nimport sys\nimport re\nfrom collections import Counter\n\nSOLVED_PROBLEMS = {'A': 3, 'B': 3, 'C': 4, 'D': 4, 'E': 3, 'F': 2, 'G': 2, 'H': 3, 'I': 2, 'J': 1, 'K': 1, 'L': 2, 'M': 1, 'N': 2, 'O': 1, 'P': 1, 'Q': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 1, 'W': 1, 'X': 1, 'Y': 1, 'Z': 1}"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom unittest import mock"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n-----Solution-----\n\n~~~python\nimport math\nimport numpy as np\n\nn, k = map(int, input().split())\na = np.array([list(map(int, input().split())) for _ in range(n)])"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\nassert solution(\"10 7\\n5 3 2 1 2 1 2 5 2\\n4 3 1 1 2 2 1 5 3\\n4 1 1 2 2 5 3 1 1 2\\n5 2 1 2 2 5 2 4 1\\n3 2 4 1 2 5 4 4 1\\n4 1 1 5 1 1 2 3 2\\n4 3 2 4 2 4 2 4 2\\n3 4 1 3 1 4 2 1 1\\n1 3 2 4 2 2 1 1 5\") == \"5\"\nassert solution(\"10 7\\n5 1 1 2 2 2 5 2\\n4 1 1 2 2 1 5 3\\n4 1 1 2 2 5 3 1 1\\n5 2 1 2 2 5 2 4 1\\n3 2 4 1 2 5 4 4 1\\n4 1 1 5 1 1 2 3 2\\n4 3 2 4 2 4 2 4 2\\n3 4 1 3 1 4 2 1 1\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n') == '5'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\nassert solution(\"9 3\\n1 2 3 4 1 3 5 2 2\\n4 3 5 2 2 3 1 1 3 1\\n1 1 3 1 5 2 1 3 3 3\\n3 5 2 1 3 1 4 5 4 1\\n3 1 3 2 1 2 3 3 1\\n1 4 2 2 2 2 1 4 1 1\\n1 2 2 3 3 1 4 4 2 4\\n5 3 1 4 3 2 4 4 4 3\\n4 4 4 3 4 1 4 2 1 2\\n1 3 3 3 1 3 3 3 2 3\\n2 1 2 3 3 1 4 4 1 4\\n1 1 1 2 2 2 2 2 2\\n1 2 4 2 4 2 1 2 3 1\\n3 3 3 1 1 1 1 1 2 1\\n1 2 2 3 1 3 1 1 1 1\\n1 2 2 1 3 2 3 1 4 1\\n2 4 4 2 3 1 4 1 1 2\\n3 4 1 1 1 2 1 1 4 1\\n1 4 4 4 2 1 4 4 1 1\\n1 1 2 3 2 3 2 1 2 1\\n2 2 1 1 3 3 1 1 1 4 1\\n2 2 4 2 3 1 1 3 1 1\\n4 4 1 2 2 1 2 1 2 2\\n5 5 2 1 4 2 1 4 4 1\\n2 1 1 2 2 2 2 1 3 1\\n2 2 4 2 4 2 1 2 3 1\\n3 1 3 3 1 3 3 3 2 3\\n5 3 4 3 2 2 3 1 4 2\\n4 2 1 2 2 2 1 4 1 1\\n1 2 3 3 2 3 1 2 1 1\\n1 2 2 2 3 2 2 1 1 3\\n3 4 3 4 2 3 1 4 4 1\\n1 2 3 1 1 2 3 3 1 1\\n4 1 2 2 2 1 1 2 2 2\\n1 2 2 4 2 3 2 3 1 4 1\\n1 2 2 3 3 2 1 4 1 4 1\\n2 3 4 4 1 2 2 3 1 4 1\\n1 3 1 1 2 2 2 3 2 3\\n3 4 1 1 2 2 2 2 3 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"\nassert solution(\"3\\n1 5\\n10 3\\n8 5\") == \"edward is right\"\nassert solution(\"1\\n0 1\\n1 1\") == \"edward is right\"\nassert solution(\"1\\n0 0\\n1 1\") == \"edward is right\"\nassert solution(\"2\\n0 1\\n0 1\\n1 1\") == \"edward is right\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\n\nassert solution(\"1\\n5 5\") == \"edward is right\"\n\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '1 7\\n'\n) == 'edward is right'\n\nassert solution(\n    '2\\n'\n    '1 7\\n'\n    '5 5\\n'\n) == 'gunilla has a point'\n\nassert solution(\n    '1 7\\n'\n    '2\\n'\n    '1 7\\n'\n    '5 5\\n'\n) == 'edward is right'\n\nassert solution(\n    '3\\n'\n    '1 7\\n'\n    '2\\n'\n    '1 7\\n'\n    '5 5\\n'\n) == 'edward is right'\n\nassert solution(\n    '3\\n'\n    '1 7\\n'\n    '2\\n'\n    '1 7\\n'\n    '5 5\\n'\n    '2\\n'\n    '1 7\\n'\n    '5 5\\n'\n) == 'edward is right'"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'2\\n1 7\\n5 5'\n) == 'edward is right'\n\n\"\"\"\n\nn = int(input())\nd = {i: 0 for i in range(1001)}\nfor _ in range(n):\n    a, b = map(int, input().split())\n    d[b] = 1\nfor i in range(1001):\n    if d[i] == 0:\n        print('edward is right')\n        break\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 7\") == 'edward is right'\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 7\") == 'gunilla has a point'\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\nassert solution('2\\n5 5') == 'edward is right'\nassert solution('2\\n4 6') == 'edward is right'\nassert solution('2\\n1 7\\n5 5') == 'edward is right'\nassert solution('2\\n5 5\\n1 7') == 'gunilla has a point'\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n7') == 'edward is right'\nassert solution('2\\n5 5') == 'gunilla has a point'\n\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n1 7'\n) == 'edward is right'\n\nassert solution(\n    '3\\n1 2\\n1 10'\n) == 'gunilla has a point'\n\nassert solution(\n    '1\\n1 1'\n) == 'edward is right'\n\nassert solution(\n    '2\\n1 1\\n2 1'\n) == 'edward is right'\n\nassert solution(\n    '3\\n1 2\\n1 10\\n3 1'\n) == 'gunilla has a point'"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n\"\"\"\n\nn, q = map(int, stdin.readline().split())\n\ninp = []\nfor _ in range(q):\n    inp.append(stdin.readline())\n\ninp = [l.split() for l in inp]\n\nprint(inp)"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '21'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11\\n\"\n    \"t 1 10\\n\"\n    \"t 1 2\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 6\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\\n\") == [4, 4, 4, 1, 2, 2, 4, 1]\n\nassert solution(\"10 10\\n\"\n    \"t 1 1\\n\"\n    \"t 2 2\\n\"\n    \"t 3 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\") == [1, 1, 1, 1, 1, 1]\n\nassert solution(\"10 11\\n\"\n    \"t 1 10\\n\"\n    \"t 1 2\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 6\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\\n\") == [4, 4, 4, 1, 2, 2, 4, 1]\n\nprint(\"Well done!\")\n\n-------------------------------"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n11\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n4\\n4\"\nassert solution(\"10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\n3\\n10\\n2\\"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\nassert solution(\"1 1\\n\"\n\"t 1 1\\n\"\n\"s 1\\n\") == \"0\\n\"\n\nassert solution(\"10 10\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 10\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n\"\n\nassert solution(\"7 7\\n\"\n\"t 1 1\\n\"\n\"t 2 1\\n\"\n\"t 1 2\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 7\\n\"\n\"t 3 7\\n\"\n\"t 4 7\\n\"\n\"t 5 7\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"s 5\\n\"\n\"s 6\\n\") == \"1\\n1\\n1\\n0\\n0\\n0\\n0\\n\"\n\nassert solution(\"100 100\\n\"\n\"t 1 1\\n\"\n\"t 2 1\\n\"\n\"t 1 2\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 100\\n\"\n\"t 3 100\\n\"\n\"t 4 100\\n\"\n\"t 5 100\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"s 5\\n\"\n\"s 6\\n\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == '''\n4\n4\n4\n1\n2\n2\n4\n'''\nassert solution('''\n10 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\nt 1 4\nt 1 5\ns 1\ns 2\ns 3\ns 4\ns 5\nt 6 7\nt 6 8\nt 6 9\ns 6\ns 7\ns 8\ns 9\nt 10 11\nt 10 12\nt 10 13\ns 10\ns 11\ns 12\ns 13\n''') == '''\n4\n1\n2\n1\n2\n3\n2\n2\n3\n3\n2\n3\n4\n2\n3\n2\n3\n2\n3\n4\n'''\n\nassert solution('''\n20 17\nt 10 5\ns 10\nt 10 6\nt 10 7\nt 10 8\nt 10 9\nt 10 11\ns 10\ns 11\nt 13 12\ns 13\nt 13 14\nt 13 15\nt 13 16\ns 13\nt 18 19\nt 18 20\nt 18 21\nt 18 22\nt 18 23\nt 18 24\nt 18 25\nt 18 26\nt 18 27\nt 18 28\nt 18 29\nt 18 30\ns 18\ns 19\ns 20\n''') == '''\n5\n4\n2\n1\n1\n2\n5\n7\n6\n7\n8\n8\n9\n10\n10\n10\n10\n12\n13\n15\n16\n16\n16\n16\n18\n17\n18\n19\n20\n19\n20\n20\n20\n21\n21\n21\n22\n23\n24\n24\n26\n26\n27\n27\n28\n29\n29\n29\n30\n30\n30\n30\n30\n30\n30\n30\n31\n31\n31\n31\n32\n32\n33\n33\n33\n33\n35\n36\n36\n36\n36\n36\n36\n37\n37\n37\n37\n38\n38\n38\n38\n38\n38\n38\n39\n39\n39\n39\n39\n39\n39\n39\n39\n39\n39\n40\n40\n40\n40\n40\n40\n40\n40\n40\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41\n41"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\") == \"4\\n\" * 10"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2015\\n1982\\n2016\\n\"\n\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2016\\n2016\\n2016\\n\"\n\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\\n\"\n\n--------------------------------------------------\n\nIn the last mission, we did not receive any points. But you must try them yourself!\n\nWrite a program that receives from the console a series of numbers, separated by whitespaces. The program then outputs the sum of those numbers.\n\nFor example, if the user entered the following values:\n3 2 1 -3 6 2\nThe output should be:\n8\nAt the end, the user should be informed of the possible error.\n\nNote: The values must be converted to the int type.\n\nInput Format\nOne line of input: A series of numbers separated by whitespaces.\n\nOutput Format\nOne line of output: The sum of all the numbers.\n\nSample Input 1\n3 2 1 -3 6 2\nSample Output 1\n8\nSample Input 2\n5 5 4\nSample Output 2\n20\nSample Input 3\n2.5 5.6 -3.4\nSample Output 3\n0.9\n\nSolution:\nimport re"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n1982\\n2016'\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == \"2015\"\nassert solution(test_input_1) == \"1992\"\n\"\"\"\n\nimport sys\n\ninputs = iter(sys.stdin.readlines())\nn = int(next(inputs))\ntrips = [next(inputs).strip().split() for _ in range(n)]\nq = int(next(inputs))\nfor _ in range(q):\n    country, k = next(inputs).strip().split()\n    k = int(k)\n    for t in trips:\n        if t[0] == country:\n            k -= 1\n            if k == 0:\n                print(t[1])\n                break\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\nassert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2016\\n2016\\n2016\\n'\nassert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2016\\n2016\\n2016\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\nassert solution('2\\nNorway 1995\\nIceland 1998\\n3\\nIceland 1\\nNorway 1\\n') == '1998\\n1995\\n'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2015\\n2016\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\"\n\"\"\"\n\n\"\"\"\nUnefficient algorithm\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution(solution.test_cases[1])\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\nsolution(\"abbcccddddeeeee\")\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('ab') == 1\nassert solution('aab') == 1\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 1\nassert solution('aa') == 0\nassert solution('ab') == 1\nassert solution('abbc') == 2\nassert solution('aabbccc') == 4\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"abcde\") == 1\nassert solution(\"abcc\") == 1\nassert solution(\"abbcca\") == 2\nassert solution(\"aabbcc\") == 2\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('aaaaa') == 6\nassert solution('abbcccddddeeeee') == 10\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nimport string\n\ns = stdin\nc = list(string.ascii_lowercase)\n\nf = []\nfor i in range(len(s)):\n    if s[i] in c:\n        f.append(s[i])\n\na = 0\nfor i in range(len(f) - 1):\n    if f[i] == f[i+1]:\n        a += 1\nprint(a)\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\n\nfrom collections import Counter\n\nstdin = input()\n\na = Counter(stdin)\n\nb = list(a.values())\n\nprint(b.count(2))\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution(\n'''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nInefficiency is a blight on the world and its\nhumanity\nInefficiency is a blight on the world and its\nhumanity\nInefficiency is a blight on the world and its\nhumanity\nInefficiency is a blight on the world and its\nhumanity\nInefficiency is a blight on the world and its\nhumanity\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity'\n'''\nhttps://www.codewars.com/kata/5bae281d85b5086b5b000010\n'''\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\nimport sys\nimport re\nfrom typing import List"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\nassert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Engineering will save the world from inefficiency') == 'Engineering will save the world from inefficiency'\nassert solution('Inefficiency is a blight on the world and its') == 'Inefficiency is a blight on the world and its'\nassert solution('This is a test. This is a second test.') == 'This is a test. This is a second test.'\nassert solution('This is a test.\\nThis is a second test.') == 'This is a test.\\n. is a second test.'\nassert solution('This is a test. This is a second test. This is a third test. This is a fourth test.') == 'This is a test. This is a second test. This is a third test.. is a fourth test.'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('This is only a test!') == 'This is only a. test!'\nassert solution('I think, therefore I am.') == 'I. think, therefore I am.'\nassert solution('I do not like green eggs and ham.') == 'I do not like. eggs and. ham.'\nassert solution('Was it a car or a cat I saw?') == 'Was it a car or a cat I saw?.'\n\"\"\"\n\n\n\nfrom utils.test import Test\n\nclass Solution:\n    def solution(self, stdin):\n        result = set()\n\n        for line in stdin.strip().splitlines():\n            result.update(line.split())\n\n        return''.join(result)\n\nTest."
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('''\nThis is a sentence that has a lot of words in it\nThis is a sentence that has a lot of words in it\nThis is a sentence that has a lot of words in it\nThis is a sentence that has a lot of words in it\nThis is a sentence that has a lot of words in it\n''') == 'This is a sentence that has a lot of words in it\\n. is a lot of words in.\\n. is a lot of words in.\\n. is a lot of words in.\\n. is a lot of words in.\\n. is a lot of words in.'\n'''\n\n'''\n\nimport sys\nimport re"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n-1 1 1\\n1 -1 1\\n1 1 -1\\n1 -1 1\") == \"satisfactory\"\nassert solution(\"4 2\\n-1 -2 1\\n1 -2 1\\n1 1 -2\\n1 -2 1\") == \"satisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5 3\\n'\n    '-1 2 3\\n'\n    '-1 -2 3\\n'\n    '1 -2 3\\n'\n    '1 -2 -3\\n'\n    '1 2 -3'\n) == 'unsatisfactory'\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n-1 2 3\\n1 -2 3\\n1 2 -3\\n1 2 3\\n\") == \"unsatisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\"\n\nfrom itertools import chain, combinations\nfrom itertools import product as cartesian"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\nhttps://www.codewars.com/kata/5c7c5b59c2d31a4e61000639/train/python\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n-1 2 3\\n1 2 3') =='satisfactory'\nassert solution('2 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3') =='satisfactory'\nassert solution('2 3\\n-1 2 3\\n1 2 3\\n1 -2 3\\n1 2 -3\\n1 2 3') == 'unsatisfactory'\nassert solution('2 3\\n-1 -2 3\\n1 2 3') == 'unsatisfactory'\nassert solution('2 3\\n-1 -2 3\\n1 2 3\\n1 -2 3\\n1 2 -3') =='satisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3'\n    ) == 'unsatisfactory'\nassert solution(\n    '5 3\\n-1 -2 3\\n-1 2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3'\n    ) =='satisfactory'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"8\\n1 2 2 5 3 4 6 6\") == \"none\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\nimport collections\nimport typing"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1\\n1\\n1\\n') == 'none'\nassert solution('4\\n1\\n2\\n2\\n') == 'none'\nassert solution('4\\n1\\n3\\n2\\n') == 'none'\nassert solution('4\\n1\\n4\\n2\\n') == 'none'\nassert solution('4\\n2\\n2\\n2\\n') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == '4'\nassert solution(\"8\\n1 1 1 5 2 5 6 6\") == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n6\\n2\\n1\\n4\\n1\") == \"none\"\nassert solution(\"2\\n2\\n1\\n2\\n1\") == \"0\"\nassert solution(\"1\\n3\\n2\") == \"0\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n1 1 1 5 3 4 6 6''') == '4'\nassert solution('''8\n1 1 1 1 2 3 4 5''') == 'none'\nassert solution('''8\n5 5 5 5 5 6 6''') == 'none'\nassert solution('''8\n1 2 3 4 5 5 6''') == 'none'\nassert solution('''8\n2 2 2 2 2 2 2 2''') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 4 6\\n5 4 5 6\") == \"none\"\nassert solution(\"3\\n3 1 4\\n2 2 4\") == \"none\"\nassert solution(\"1\\n1 1\") == \"0\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"3\\n2 1 3\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 1 1 5 3 4 6 6\") == \"none\"\n\nprint(solution(\"8\\n1 1 1 5 3 4 6 6\"))\n\nassert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"none\"\n\nprint(solution(\"8\\n1 1 1 5 3 4 6 6\"))\n\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"none\"\n\nprint(solution(\"8\\n1 1 1 1 1 1 1 1\"))\n\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"none\"\n\nprint(solution(\"8\\n1 1 1 1 1 1 1 1\"))\n\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"none\"\n\nprint(solution(\"8\\n1 1 1 1 1 1 1 1\"))"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20:00:00') == '08:00:00'\n\nprint(solution('20:00:00'), '08:00:00')\n\nassert solution('04:00:00') == '20:00:00'\n\nprint(solution('04:00:00'), '20:00:00')\n\n\"\"\"\n\nimport datetime\n\n[t1, t2] = list(map(str, input().split(':')))\n[t3, t4] = list(map(str, input().split(':')))\n\nprint(datetime.datetime.strptime(f\"{t1}:{t2}\", '%H:%M') + datetime.timedelta(hours=int(t3), minutes=int(t4)))\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n\nfrom datetime import datetime\nimport time\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\n\"\"\"\n\nstdin = '20:00:00\\n04:00:00'\n\nstdout = stdin.split('\\n')\n\nassert len(stdout) == 1\n\nstdout = stdout[0]\n\nh1, m1, s1 = stdin.split(':')\nh2, m2, s2 = stdout.split(':')\n\ns1, s2 = int(s1), int(s2)\nm1, m2 = int(m1), int(m2)\nh1, h2 = int(h1), int(h2)\n\nm = m1 - m2\ns = s1 - s2\nh = h1 - h2\n\ns = s - m"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\", \"05:00:00\") == \"00:00:00\"\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nassert solution('04:00:00', '20:00:00') == '08:00:00'\nassert solution('20:00:00', '06:00:00') == '06:00:00'\nassert solution('06:00:00', '20:00:00') == '06:00:00'\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\nassert solution(\"20:00:00\", \"04:00:01\") == \"20:00:01\"\n\nassert solution(\"20:00:00\", \"04:00:59\") == \"20:00:59\"\n\nassert solution(\"20:00:00\", \"04:01:01\") == \"20:01:01\"\n\nassert solution(\"20:00:00\", \"04:01:59\") == \"20:01:59\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"00:00:00\") == \"00:00:00\"\n\nassert solution(\"04:00:00\") == \"08:00:00\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"20:00:00\"\n) == \"08:00:00\"\nassert solution(\n\"22:55:36\"\n) == \"22:55:44\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('31 6\\n') == '4'\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 2\\n2 1\") == \"4\"\n\"\"\"\n\nfrom math import log10\n\nl, n = map(int, input().split())\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('31 6') == '4'\n'''\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\nprint(solution(stdin))\n\n\n----Challenge-----\nCan you find the smallest number $k$ such that there are no more crises when using at most $k$ layers of backup rolls?\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('31 6') == '4'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('31 6') == '4'\nprint(solution(stdin))\n\n-----\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('31 6') == '4'\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\"\nprint(solution(\"31 6\"))"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n\nimport math\n\nn = int(input())\n\ne = math.factorial(0)\nfor i in range(1, n + 1):\n    e += 1 / math.factorial(i)\n\nprint(e)\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"4\") == \"2.833333333333333\"\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"10\") == \"2.71828182845905\"\nassert solution(\"10000\") == \"2.718281828459053\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274\"\nassert solution(\"20\") == \"7.38905609893065022722080371438337059692388037765290355900582930036141753378074360569995957028521343873530707672372735573362399843665699823120615611262954221421356237309504880168872400962341496887287264016083134653471399210590701708701105910364731339542323990325127516672739319509289645233857394367034323663178517648769887624091185126039094168548264957439275662207359340705108652979387968498256426592700764996721026877050419529084016849037240697913737787576752790959064367823721628535211431138267944764053102836914659666822902938610071519179846049854827298931693823489547914366836529055431509811123450805191631114833653492225910320431529098436643620689622694589473653884712686842163007029239651110861947902406015037544903413238095236020683422642590906854248039732930183213444023933876716341036045734094172229694773155579071096606813842283771317084127387844301551742365092822379471763923714885479262759633073819043529058838478453530673594433979110591085453460591116982679291711055725769863323017826289068604277929031840941847007139717468731537491469355627641555341189304825979415588765299289685531886350504415654873175976176397234799347912706839398523376437833691704834117604118682065482939243397849\"\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2.6666666666666665'\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('12') == '9.77216'\nassert solution('50') == '148.4131591025764'\nassert solution('10000') == '148.4131591025764'\n\n:param stdin:\n:return:\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '2.0'\nassert solution('1 2 3 4 5') == '2.5'\nassert solution('0') == '1.0'\nassert solution('1') == '1.0'\nassert solution('2') == '1.25'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('1 3 3') == 'opponent'\nassert solution('2 1 3') == 'opponent'\nassert solution('2 3 7') == 'paul'\nassert solution('3 1 3') == 'opponent'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 7\") == 'paul'\nassert solution(\"5 3 2\") == 'opponent'\nassert solution(\"5 7 6\") == 'paul'\n\n'''\n\nfrom math import ceil\n\nn, p, q = map(int, input().split())\n\npp, pq = 0, 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        pp += 1\n        pq += 1\n    else:\n        pp += 1\n        pq -= 1\n    if pp == p and pq == q:\n        break"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 7') == 'paul'\n\nassert solution('3 7 10') == 'opponent'\n\nassert solution('10 3 4') == 'paul'\n\nassert solution('0 3 0') == 'opponent'\n\nassert solution('10 100 100') == 'paul'"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"7 3 5\") == \"opponent\"\nassert solution(\"7 5 3\") == \"paul\"\nassert solution(\"1 2 3\") == \"opponent\"\nassert solution(\"6 5 4\") == \"paul\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 6\\n') == 'opponent'\nassert solution('5 3 5\\n') == 'paul'\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('1 0 0') == 'opponent'\nassert solution('1 1 0') == 'paul'\nassert solution('1 1 2') == 'opponent'\nassert solution('1 1 1') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 3 3\") == \"opponent\"\n\nfrom functools import reduce\nfrom operator import add"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 5 7\") == \"opponent\"\nassert solution(\"1 1 1\") == \"paul\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\\n\") == \"paul\"\nassert solution(\"7 3 7\\n\") == \"opponent\"\nassert solution(\"8 3 7\\n\") == \"paul\"\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '2'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '3'\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '4'"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 2\nassert solution('2') == 3\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 2\n\"\"\"\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 2\nprint(solution(\"1\"))\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(0)) == '0'\nassert solution(str(1)) == '1'\nassert solution(str(2)) == '1'\nassert solution(str(3)) == '2'\nassert solution(str(4)) == '2'\n\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == 2\nassert solution('4\\n') == 4\nassert solution('10\\n') == 9\nassert solution('15\\n') == 21\nassert solution('20\\n') == 39\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"111222\") == \"No\"\nassert solution(\"111222a\") == \"Yes\"\nassert solution(\"111222aA\") == \"Yes\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\n\n\"\"\"\n\nS = stdin[0]\nP = stdin[1]"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\", \"123\") == \"Yes\"\nassert solution(\"123\", \"1234\") == \"No\"\nassert solution(\"123\", \"12a\") == \"No\"\nassert solution(\"123\", \"1345\") == \"No\"\nassert solution(\"123\", \"12345\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('c0deninja5') == 'No'\n\n\"\"\"\n\n\"\"\"\nBRIEF:\ntake in 2 strings and compare them, then print 'Yes' if they're equal\notherwise, print 'No'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"12aa\") == \"No\"\n\n\"\"\"\n\nimport pytest\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123a\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"3a2b\") == \"No\"\nassert solution(\"123a1\") == \"Yes\"\nassert solution(\"12a\") == \"Yes\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123') == 'No'\nassert solution('123a') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"akmecapenapa papapripikapa\") == \"ako malena paprika\"\nassert solution(\"akmecapenapa papapripikapa kakmecapenapa\") == \"ako malena paprika kako malena paprika\"\nassert solution(\"zepapapripikapa kakmecapenapa papapripikapa\") == \"zelena paprika kako malena paprika\"\nassert solution(\"zepapapripikapa kakmecapenapa papapripikapa\") == \"zelena paprika kako malena paprika\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kemija') == 'kempipijapa'\nassert solution('paprika') == 'papapripikapa'\nassert solution('dzepielepenapa') == 'dzepielepenapa'\nassert solution('papipriipakapa') == 'papipriipakapa'\n\"\"\"\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"zepelepenapa papapripikapa\"\n) == \"zelena paprika\"\nassert solution(\n    \"ypelepenapa papapripikapa\"\n) == \"zelena paprika\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('papa') == 'papa'\nassert solution('kemija') == 'kepemipijapa'\nassert solution('paprika') == 'papapripikapa'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\n    \"kemija\") == \"kempijapa\"\n\nSolution.assert_input(solution, \"kemija\")\n'''"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nprint(solution(\"zepelepenapa papapripikapa\"))\n\n'''"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"glijepi dipipipipitjapapa\") == \"glijeka dipipipipitjapa\"\nassert solution(\"papipipipitjapapa glijepi dipipipipitjapapa\") == \"papipipipitjapa glijeka dipipipipitjapa\"\nassert solution(\"pipipipipitjapapa glijepi dipipipipitjapapa\") == \"pipipipipitjapa glijeka dipipipipitjapa\"\nassert solution(\"pipipipitjapapa glijepi dipipipipitjapapa\") == \"pipipipitjapa glijeka dipipipipitjapa\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 2\") == \"-32\"\nprint(solution(\"32 2\"))\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32 2') == '-32'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32 2') == '-32'\nassert solution('1 1') == 'IMPOSSIBLE'\nassert solution('0 0') == 'IMPOSSIBLE'\nassert solution('1 5') == 'ALL GOOD'\nassert solution('99 88') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 2') == '-32'\nassert solution('34 2') == 'IMPOSSIBLE'\nassert solution('51 2') == 'ALL GOOD'\nassert solution('32 50') == 'IMPOSSIBLE'\nassert solution('50 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32 2') == '-32', 'Example 1'\nassert solution('42 3') == 'IMPOSSIBLE', 'Example 2'\nassert solution('95 6') == 'ALL GOOD', 'Example 3'\nassert solution('-71 0') == 'IMPOSSIBLE', 'Example 4'\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n\nX, Y = [int(c) for c in input().split()]\n\nd = Y // X\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\nassert solution('99 9') == 'ALL GOOD'\nassert solution('99 20') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32 2') == '-32'\nassert solution('10 2') == '10'\nassert solution('12 4') == '10'\nassert solution('0 2') == 'IMPOSSIBLE'\nassert solution('0 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(32, 2) == -32\n\n\"\"\"\n\nfrom typing import Callable, List, Dict, Tuple\n\nfrom collections import deque\nfrom itertools import islice\nfrom typing import Iterator\n\nfrom icontract import require, ensure, DBC\n\n\nclass Temperature(DBC):\n    \"\"\"Represent the temperature.\"\"\"\n\n    def __init__(self, initial: int) -> None:\n        self.initial = initial\n\n    def __eq__(self, other: object) -> bool:\n        \"\"\"\n        >>> Temperature(25) == Temperature(25)\n        True\n        >>> Temperature(25) == Temperature(20)\n        False\n        \"\"\"\n        return isinstance(other, Temperature) and self.initial == other.initial\n\n    def __add__(self, other: int) -> \"Temperature\":\n        \"\"\"\n        >>> t = Temperature(20)\n        >>> t + 1\n        Temperature(21)\n        \"\"\"\n        return Temperature(self.initial + other)\n\n    def __str__(self) -> str:\n        \"\"\"\n        >>> str(Temperature(25))\n        'Temperature(25)'\n        \"\"\"\n        return f\"Temperature({self.initial})\"\n\n    def __repr__(self) -> str:\n        \"\"\"\n        >>> Temperature(25)\n        Temperature(25)\n        \"\"\"\n        return self.__str__()\n\n    def __neg__(self) -> \"Temperature\":\n        \"\"\"\n        >>> -Temperature(25)\n        Temperature(-25)\n        \"\"\"\n        return Temperature(-self.initial)\n\n    def __sub__(self, other: int) -> \"Temperature\":\n        \"\"\"\n        >>> Temperature(25) - 1\n        Temperature(24)\n        \"\"\"\n        return self + (-other)\n\n    def copy(self) -> \"Temperature\":\n        \"\"\"\n        >>> t = Temperature(25)\n        >>> t.copy()\n        Temperature(25)\n        \"\"\"\n        return Temperature(self.initial)\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 2') == 'IMPOSSIBLE'\nassert solution('32 2') == 'IMPOSSIBLE'\nassert solution('32 2') == 'IMPOSSIBLE'\nassert solution('32 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 2 5') == 'none'\nassert solution('2 2 3 3\\n1 1 2') == 'one'\n\n------Hints------\nIn the early morning, the milkman and garbage man start out in the same direction.\n\nIf the milkman is aggressive for $A$ minutes, then the garbage man will become aggressive for $A$ minutes, and vice versa.\n\nThe postman, however, has a clever plan. At the beginning of the day, he will rush in from the west, and he will rush in from the east. However, once in a while, he will change his course for some additional minutes.\n\nHe will always rush in from the west, and he will always rush in from the east.\n\nThe dogs of the postman, the milkman and the garbage man are divided into three groups:\n\n1. The milkman\u2019s aggressive dogs are at the west end.\n2. The milkman\u2019s calm dogs are at the east end.\n3. The garbage man\u2019s aggressive dogs are at the east end.\n4. The garbage man\u2019s calm dogs are at the west end.\n\nAt the beginning of the day, the milkman, the postman, and the garbage man rush in from their respective directions. After $A$ minutes, the milkman will become aggressive, and after $B$ minutes, the postman will become aggressive.\n\nHowever, the postman will change his direction for $C$ minutes every time.\n\nThe garbage man is always aggressive at the beginning of the day. After $D$ minutes, the garbage man will become calm.\n\nOnce a dog becomes calm, it does not become aggressive.\n\nAfter the day finishes, there is one more encounter between the milkman and the garbage man.\n\nThe milkman attacks the garbage man. If the milkman is aggressive for $E$ minutes, then the milkman attacks the garbage man.\n\nOnce the milkman becomes calm, it does not attack the garbage man.\n\nOnce the postman, the milkman, and the garbage man are all aggressive for some minute, at least one of them will attack the other one.\n\nIt is guaranteed that the postman, the milkman, and the garbage man will all attack each other at some point in the day.\n\nThe postman and the milkman cannot attack the garbage man at the same time.\n\nThe postman, the milkman and the garbage man are always in the same order: the postman, the milkman, and the garbage man are always in the order: postman, milkman, and garbage man.\n\nThe garbage man can only be attacked by the milkman.\n\nIt is guaranteed that the milkman will not be aggressive for the same minute as the postman.\n\nThe postman, milkman and the garbage man do not attack each other before the end of the day.\n\nThe postman, milkman and the garbage man do not attack each other after the end of the day.\n\nThe milkman attacks the postman first, then the postman attacks the milkman, and so on.\n\nThe postman, milkman and the garbage man always attack each other at most one time in the day.\n\nThe postman, milkman and the garbage man never attack each other at the same time.\n\nThere are no other constraints.\n\nIn the early morning, all three of them rush into the house. They all do their work in the same order: postman, milkman and the garbage man.\n\nAll three of them leave the house in the same order: postman, milkman and the garbage man.\n\nAfter $T$ minutes, the milkman attacks the postman.\n\nIf the milkman is aggressive for $U$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $V$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $W$ minutes, then the milkman attacks the postman.\n\nIf the postman is aggressive for $X$ minutes, then the postman attacks the milkman.\n\nIf the postman is calm for $Y$ minutes, then the postman does not attack the milkman.\n\nIf the postman is aggressive for $Z$ minutes, then the postman attacks the milkman.\n\nIf the postman is aggressive for $A$ minutes, then the postman attacks the garbage man.\n\nIf the postman is calm for $B$ minutes, then the postman does not attack the garbage man.\n\nIf the postman is aggressive for $C$ minutes, then the postman attacks the garbage man.\n\nIf the postman is calm for $D$ minutes, then the postman does not attack the garbage man.\n\nOnce the day ends, the milkman attacks the postman.\n\nIf the milkman is aggressive for $E$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $F$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $G$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $H$ minutes, then the milkman does not attack the postman.\n\nOnce the postman attacks the milkman, the milkman becomes aggressive for $I$ minutes.\n\nIf the milkman is aggressive for $J$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $K$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $L$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $M$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $N$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $O$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $P$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $Q$ minutes, then the milkman does not attack the postman.\n\nIf the postman attacks the milkman, the milkman becomes aggressive for $R$ minutes.\n\nIf the milkman is aggressive for $S$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $T$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $U$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $V$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $W$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $X$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $Y$ minutes, then the milkman attacks the postman.\n\nIf the milkman is calm for $Z$ minutes, then the milkman does not attack the postman.\n\nIf the milkman is aggressive for $A$ minutes, then the milkman attacks the garbage man.\n\nIf the milkman is calm for $B$ minutes, then the milkman does not attack the garbage man.\n\nIf the milkman is aggressive for $C$ minutes, then the milkman attacks the garbage man.\n\nIf the"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\"\"\"\n\nA, B, C, D = list(map(int, input().split()))\nP, M, G = list(map(int, input().split()))\n\nT = min(A, B, C, D)"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"10 10 10\") == \"none\"\nassert solution(\"10 10 10 1 1 1\") == \"both\"\nassert solution(\"10 10 10 1 1 1 1 1 1\") == \"one\"\n\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"1 1 1 1\\n1 1 1\") == \"both\"\nassert solution(\"1 2 2 4\\n1 3 3\") == \"one\"\nassert solution(\"1 1 2 4\\n1 3 3\") == \"none\"\nassert solution(\"1 1 1 1\\n1 1 1\") == \"both\"\n\nprint(\"All tests passed.\")\n\n-------------------------\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 5\") == \"one\"\nassert solution(\"2 2 3 3\\n1 1 3 4\") == \"none\"\nassert solution(\"2 2 3 3\\n1 1 1 1 4\") == \"none\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\nassert solution(\"2 2 3 1\") == \"one\"\nassert solution(\"2 2 3 2\") == \"both\"\nassert solution(\"1 2 3 4\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 1 2\") == \"none\"\nassert solution(\"2 2 3 3\\n2 3 4\") == \"one\"\n\"\"\"\nimport itertools\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\\n\") == \"both\"\nassert solution(\"1 2 3 4\\n1 2 3 4\\n\") == \"none\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 8') == '10'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 8\") == 10\nassert solution(\"4 6 10\") == 10\nassert solution(\"1 4 6\") == 5\nassert solution(\"1 2 3\") == 4\n\"\"\"\n\nprint(input().split())"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\"\n\ninput_nums = stdin.split(\" \")\n\nproper_order = list(set(input_nums))\nproper_order.sort()\n\ndifference = float(proper_order[2]) - float(proper_order[1])\n\nfor i in range(len(proper_order)):\n    if i == 2:\n        continue\n\n    if (float(proper_order[i]) - float(proper_order[i - 1]))!= difference:\n        continue\n    else:\n        print(int(proper_order[3]) - int(proper_order[i]) + int(proper_order[i]))\n        break"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"-2 0 4\") == \"6\"\nassert solution(\"-1 -4 2\") == \"4\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3 2\") == \"4\"\nassert solution(\"1 2 3\") == \"5\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"4 2 1\") == \"4\"\nassert solution(\"5 4 3\") == \"7\"\n\n---Problem---\nMirko, the world's greatest programmer, has become very bored with his success. He is trying to find a way to make a program, which, given three integers $a$, $b$ and $c$, outputs the number $d$ that will satisfy the equation $a d + b d + c d = 0$.\n\nBut no one in Mirko's world would be satisfied with an easy program like that. So, he decided to test the theory by finding the fourth number for a couple of random numbers.\n\nMirko has a collection of random numbers, $n$, where $n \\geq 1$. He gave you a list of numbers $a_1,\\dots,a_n$, and told you to find the fourth number, $d$.\n\nCan you help Mirko?\n\n-----Input-----\nA single line of three integers, $a$, $b$, and $c$, with $1 \\leq a \\leq b \\leq c \\leq 1000$.\n\n-----Output-----\nA single number, $d$.\n\n-----Examples-----\nSample Input:\n1 -2 -3\nSample Output:\n4\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 4 6') == '8'\nassert solution('4 6 8') == '10'\n'''\n\n\nimport sys\n\nstdin = sys.stdin.readline().split()\nx, y, z = sorted(map(int, stdin))\n\nwhile z-y > 0:\n    x, y, z = y, z, z-y\n\nprint(y)\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 8') == '10'"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == 10\nassert solution('2 5 6') == 9\nassert solution('3 6 9') == 8\nassert solution('1 3 4') == 2\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport sys\n\n\"\"\"\nH = int(stdin.readline())\nV = int(stdin.readline())\n\nprint(((H ** 2) + (H * V)) ** 0.5)\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('500 70') == '533'\nassert solution('1 1') == '1'\nassert solution('1 90') == '1'\nassert solution('100 20') == '110'\nassert solution('100 80') == '110'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0 2\\n0 0') == '1'\nassert solution('0 2\\n0 1') == '2'\nassert solution('0 2\\n1 0') == '2'\nassert solution('0 2\\n1 1') == '2'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''1000 82''') == '1188'\nassert solution('''500 70''') == '533'\nassert solution('''500 60''') == '576'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n\nh, v = map(int, stdin.strip().split())\nprint(h*v // 2 + h if h*v % 2 else h*(v+1) // 2)\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('500 70') == '533'\nassert solution('0 0') == '0'\nassert solution('1 1') == '2'\nassert solution('10 10') == '18'\nassert solution('10 1') == '10'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('500 70') == '533'"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n\"\"\"\n\nimport math"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('500 70') == '533'\nassert solution('510 70') == '515'\nassert solution('503 70') == '510'\nassert solution('501 70') == '515'\nassert solution('499 70') == '510'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\nassert solution('1 10\\n7.36 54.12\\n9.75 54.12') == '1.20\\n7.36'\nassert solution('1 10\\n7.36 54.12\\n9.75 54.12\\n6.77 51.62\\n5.32 51.62') == '1.20\\n7.36'\nassert solution('2 10\\n1.47 33.75\\n1.47 33.75\\n2.67 33.75') == '1.0\\n1.47'\nassert solution('1 10\\n1.47 33.75\\n1.47 33.75\\n2.67 33.75') == '1.0\\n1.47'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0 30.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\\n\") == \"39.0\\n30.0\\n\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ng = float(sys.stdin.readline())\nd_theta = [float(x) for x in sys.stdin.readline().split()]\n\nd_x = [float(x) for x in sys.stdin.readline().split()]\nd_y = [float(x) for x in sys.stdin.readline().split()]\n\nimport numpy as np"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\nfrom math import *\nimport re\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample_input) == sample_output"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"69 60\\n100 60\") == \"39.0\\n30.0\"\n-----Problem-----\nNow we want to generalize this formula to a larger number of line segments.\n\n--- Exercise ---\nFind the general formula for the maximum speed of a biker on a mountain with $N$ lines of segments, each with different slope and angle.\n\n- $g$ is the gravitational acceleration.\n- $N$ is the number of line segments,\n- $D_i$ is the distance between the centers of the $i^{\\text {th}}$-th and ($i+1)^{\\text {th}}$-th line segments,\n- $ \\theta _i$ is the absolute angle of the $i^{\\text {th}}$-th line segment from the vertical.\n\n-----Constraints-----\nThe number of test cases will be at least $1$ and at most $100$.\nEach line of test input will contain at least $1$ and at most $100$ values, all of which will be integers.\n\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"5\\n15 17 23 27 30\") == \"1 1\"\n\nassert solution(\"3\\n20 17 21\") == \"1 1\"\nassert solution(\"2\\n21 20\") == \"0 0\"\nassert solution(\"3\\n9 5 8 7\") == \"2 0\"\n\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1 1 1 1 1 1') == ''\nassert solution('4\\n23 21 24 22\\n') == '0'\nassert solution('7\\n23 21 24 22 27 31 28\\n') == '5'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\nn = int(input[0])\n\nhiking = [int(x) for x in input[1].split()]\n\nhiking.sort()\nprint(hiking[0], hiking[1])\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nprint(solution(stdin))\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\nassert solution(\"3 6\\n3 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 3 1') == '1'\nassert solution('1 2 3') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\nassert solution('3 6\\n2 3 6') == '0'\nassert solution('3 6\\n1 1 1') == '1'\nassert solution('3 6\\n1 2 4') == '1'\nassert solution('3 6\\n1 1 3') == '2'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n2 3 6\") == \"2\"\nassert solution(\"1 2 3\\n5 4 4\") == \"0\"\nassert solution(\"1 2 3\\n5 1 5\") == \"1\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WMWMW\") == \"WMWWMM\"\nassert solution(\"WWMWMW\") == \"WMWMWW\"\nassert solution(\"WMWMWWWMWWWMWMWWMW\") == \"WMWWMMWWWMMWMW\"\nassert solution(\"WWMWMWWWMWWWMWWMWWMW\") == \"WMWWMMWWWMWWMW\"\nassert solution(\"WWMWMWWWMWWWMWWMWWMW\") == \"WMWWMMWWWMWWMW\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('MWWMWMMMW') == 9\n\"\"\"\n\n\"\"\"\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"MWWMMMMW\") == 9\nprint(solution(\"MWWMMMMW\"))\n\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('MWWMWMMW') == '9'\nassert solution('MWMWWWWWMW') == '10'"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"5\") == 5\nassert solution(\"10\") == 9\nassert solution(\"2WMMW\") == 7\n\n-------------\nimport sys"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MWWMMMMW\") == 9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WWMMM') == 'MMMM'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\nWWWMM''') == '3'\n\nassert solution('''2\nWWWMM''') == '5'\n\nassert solution('''3\nWWM''') == '3'\n\nassert solution('''3\nWWM''') == '5'\n\nassert solution('''3\nWMM''') == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 -2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n\nfrom sys import stdin\n\nnumber, number_of_commands = [int(i) for i in stdin.readline().split()]\ncommands = [int(i) for i in stdin.readline().split()]\n\nlast_index = 0\negg = 0\nfor command in commands:\n    if command < 0:\n        command += number\n    if command > 0:\n        egg += command\n    if command < 0:\n        last_index = (last_index + command) % number\n    else:\n        last_index = (last_index - command) % number\n\nprint(last_index if egg == 0 else egg)\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n8 -1 1') == '1'\nassert solution('4 2\\n4 -1') == '0'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\nassert solution(\"3 3\\n1 2\\n0 -1\") == \"0\"\nassert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\nassert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\nassert solution(\"3 3\\n1 2\\n0 -1\") == \"0\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n\nlines = sys.stdin.readlines()\n\nstudents, commands = [int(x) for x in lines[0].split()]\n\nthrows = [int(x) for x in lines[1].split()]"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\nassert solution('5 6\\n1 2 3\\n2 4 5\\n2 3 5\\n4 3 3\\n4 5 1\\n4 5 4') == '14 21 22 22 34'\n-----Problem-----\nSean\u2019s Swathers makes custom swathers (equipment used to harvest grain). All swathers go through the same basic stages in their construction: for example they all need to have a cutting bar, a grain belt, and a reel fitted. However, these components can be customized based on the buyer\u2019s needs, so these various stages may take different amounts of time between different swathers. \n\n$N$ swathers have been ordered and there are $M$ stages in the manufacturing process. The swathers will each go through the same sequence of stages.\n\nIn particular, the processing occurs as follows: For each swather $i$ and each stage $j$, it takes $P_{i,j}$ units of time to complete stage $j$ for swather $i$. The workers at each stage may only work on one swather at a time. At the start of the day all swather orders are ready to be processed by the first stage. At any point in the process, if the workers at stage $j$ are idle and there are swathers waiting to be processed at this stage then the workers will pick the swather that has the lowest label (they are labelled from $1$ to $N$). Note that the work on a stage $j$ can only be started after the work on the stage $j-1$ is completed.\n\nDetermine the time each swather is completed.\n\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\nprint(solution(stdin.readlines()[0]))\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\n1 2 3\n3 2 1''') == '6 7'\nassert solution('''4 3\n1 2 3 4\n1 2 3 4\n3 2 1 4\n4 3 2 1''') == '8 10 9'\nassert solution('''5 1\n1 2''') == '4'\nassert solution('''5 2\n1 2\n1 3\n2 4\n3 5\n4 5''') == '5 5'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nimport sys\nimport math\nimport functools\nimport numpy as np\nfrom math import factorial"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nseq = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0 for _ in range(m + 1)] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m + 1):\n        if i == 0:\n            dp[i][j] = seq[i][j]\n        else:\n            dp[i][j] = max(dp[i - 1][j] + seq[i][j], seq[i][j])\nprint(*[dp[i][-1] for i in range(n)], sep=' ')\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2 3\n1 2 3\n3 2 1\n'''.strip()) == '''\n6 7\n'''.strip()\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\n-----Constraints-----\n$1 \\leq N,M \\leq 1000$\n$1 \\leq P_{i,j} \\leq 10^6$\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n3 2 1') == '6 7'\n\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ntimes = []\nfor _ in range(n):\n    times.append(list(map(int, sys.stdin.readline().split())))\n\norder = [None] * n\n\nfor stage in range(m):\n    lowest = None\n    for i in range(n):\n        if order[i] is None:\n            if lowest is None or times[i][stage] < times[lowest][stage]:\n                lowest = i\n    order[lowest] = stage + 1\n\nprint(' '.join(map(str, order)))\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == '64 correct\\n665 incorrect', 'Wrong solution'"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\\n665 incorrect\"\nassert solution(\"4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n0 incorrect\"\nassert solution(\"7\\napel apartemen apel apartemen apartemen\") == \"26 correct\\n3 incorrect\"\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(text) == answer\nprint(solution(text))\n\n----"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"2\\nkans kans kans kans kans kans kans\\n3\\nkans correct\\nkans incorrect\\nkans correct\\nkans correct\\nkans correct\") == \"12 correct\\n8 incorrect\"\nassert solution(\"3\\nkans kans kans kans kans kans kans\\n3\\nkans correct\\nkans incorrect\\nkans correct\\nkans correct\\nkans correct\") == \"12 correct\\n8 incorrect\"\nassert solution(\"1\\nkans kans kans kans kans kans kans\\n3\\nkans correct\\nkans incorrect\\nkans correct\\nkans correct\\nkans correct\") == \"12 correct\\n8 incorrect\"\n\nprint(solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nkans kans kans kans kans kans kans\\n3\\nkans correct\\nkans incorrect\\nkans correct\\nkans correct\\nkans correct\"))\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'correct'\nassert solution('aa') == 'incorrect'\nassert solution('aaa') == 'incorrect'\nassert solution('aaaa') == 'incorrect'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollens mollen mollens\\n4\\nals when correct\\nmollens destroy correct\\nmollens mills incorrect\\n\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollens mollen mollens\\n4\\nmollens destroy correct\\nmollens mills incorrect\\n\") == \"64 correct\\n666 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollens mollen mollens\\n4\\nmollens when correct\\n\") == \"0 correct\\n666 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollens mollens mollens\\n4\\n\") == \"0 correct\\n666 incorrect\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(output())\n\n-----Solution-----\n\"\"\"\n\nimport sys\nimport math\n\nN = int(input())\ntree = list(map(int, input().split()))\n\nT = [math.inf] * N\nT[0] = 0\nfor i in range(1, N):\n    T[i] = T[i-1] + tree[i-1]\n\nM = [math.inf] * N\nM[0] = 1\nfor i in range(1, N):\n    if i < T[i]:\n        M[i] = M[i-1] + 1\n    else:\n        M[i] = M[i-1]\n\nprint(max(M))\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('3\\n2 3 4') == '5'\nassert solution('5\\n3 3 2 2 2') == '2'\n'''\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4 3') == 7\n\"\"\"\n\nimport unittest\nimport math"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\narr = [int(i) for i in sys.stdin.readline().rstrip().split(\" \")]\nmax_day = 0\nfor i in range(0, len(arr)):\n    max_day = max(max_day, arr[i] + i)\n\nprint(max_day)\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == '7'\nassert solution(\"6\\n1 1 1 2 3 5\") == '7'\nassert solution(\"5\\n5 6 2 4 3\") == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n') == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nprint(solution(\"4\\n2 3 4 3\"))\n\"\"\"\nimport math\nimport sys\n\nN = int(sys.stdin.readline())\nt = [int(x) for x in sys.stdin.readline().split()]\n\ndp = [0] * (max(t) + 1)\ndp[0] = 1\nfor i in range(N):\n    for j in range(t[i] + 1):\n        dp[j] = max(dp[j], dp[j - t[i]] + 1)\nprint(dp[-1])\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 4 3') == 7\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nprint(solution(\"\"\"\n3\n0 0\n1 1\n0 2\n4\n\"\"\"))\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"3\\n1 1\\n0 2\\n0 3\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"4\\n1 1\\n0 2\\n0 3\\n2 3\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n0.0 5.0\"\nassert solution(\"3\\n1 1\\n0 2\\n0 3\\n2 3\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n0.0 5.0\"\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"4\\n2 3\\n2 3\\n0 0\") == \"0.0 0.0\\n0.0 4.0\"\nassert solution(\"5\\n0 1\\n0 1\\n-2 1\\n0 1\") == \"0.0 1.0\\n0.0 3.0\\n0.0 1.0\\n0.0 3.0\\n0.0 1.0\"\nassert solution(\"3\\n2 2\\n0 0\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"3\\n-2 1\\n-2 1\") == \"0.0 1.0\\n0.0 3.0\\n0.0 1.0\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\nassert solution(str(sample_input_3)) == str(sample_output_3)\n\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2\\n3 4') == '1 2\\n3 4'\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '6'\nassert solution('10') == '100'\nassert solution('2') == '4'\nassert solution('5') == '27'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('100') == '5'\nassert solution('1000') == '12'\nassert solution('10000') == '14'\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('15') == '4'\nassert solution('2') == '2'\nassert solution('10000') == '12'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1''') == '''1'''\nassert solution('''4''') == '''2'''\nassert solution('''5''') == '''4'''\nassert solution('''12''') == '''7'''\nassert solution('''20''') == '''12'''\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 1\n\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''int n\n''') == '1'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(5) == 4\nassert solution(10000) == 49\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"14\"\nassert solution(\"1000\") == \"24\"\nassert solution(\"10000\") == \"168\"\n\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n12 16\\n0 1\\n0 1\") == \"12\"\nassert solution(\"2 3\\n12 16\\n0 1\\n0 1\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('4 9') == '20'\nassert solution('1 3') == '4'\nassert solution('2 3') == '4'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"7 11\\n12 15 16\\n2 3\\n10 12\\n13 17\\n2 1\\n3 1\\n15 18\\n8 1\\n6 12\\n7 19\\n4 2\\n3 1\\n12 16\") == \"38\"\nassert solution(\"2 1\\n12 16\") == \"16\"\nassert solution(\"3 1\\n12 16\") == \"16\"\nassert solution(\"1 1\\n12 16\") == \"16\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 16\\n2 8\") == \"34\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '12 16'\n) == '34'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 16\\n2 2') == '22'\nassert solution('12 16\\n2 4') == '28'\nassert solution('12 16\\n2 8') == '34'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n12 16\") == '34'\n\"\"\"\nimport math"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 16\") == \"34\"\n    \"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nfrom typing import List, Set, Tuple\n\nfrom helpers import print_assert\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\nassert solution(\"4\\n1 2 2 1\") == \"4\"\nassert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"4\\n1 1 2 1\") == \"4\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2 1\") == \"2\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n3 3\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"3\\n1 2 3\\n1 3\") == \"3\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5\\n') == '5'\nassert solution('12\\n1 1 2 3 1') == '4'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1 1 1') == '2'\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 1') == 3\nassert solution('1 2 1 1') == 4\nassert solution('1 1 1 1') == 4\n\nSample Input:\n6\n1 2 3 4 5 1\nSample Output:\n2"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1.1') == '9'\nassert solution('1.5') == '5'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0\") == \"1088\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1088'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.0\") == 1088\n\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.0') == '1088'\nassert solution('1.5') == '1156'\nassert solution('1.75') == '1224'\nassert solution('3.0') == '3102'\nassert solution('1.45') == '1110'\n\"\"\"\n\n\"\"\"\nMIT License\n\nCopyright (c) 2020 Niall Nolan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"\n\n\"\"\"\nThis is the code I used to test my solution\n\"\"\"\n\nfrom sys import stdin\nimport math"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1.0) == 1088\n\n\"\"\"\n\nfrom typing import List\nimport unittest\n\nfrom tools import timing\n\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0.01') == '1'\nassert solution('0.3') == '359'\nassert solution('1000') == '1000'\n\nassert solution('0.21') == '1676'\nassert solution('0.2') == '876'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.0') == '1088'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.0') == '1088'\nassert solution('1.01') == '1090'\nassert solution('1.50') == '1072'\nassert solution('1.05') == '1090'\nassert solution('1.96') == '1110'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0') == '1088'\nprint(solution('1.0'))\n\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0') == '25.000000000'\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4\") == \"25.000000\\n25.000000\\n25.000000\\n25.000000\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3\\n2.0 3.0 4.0\\n1.5 2.5 2.0\\n') == '2.0 2.0 2.0'\nassert solution('7\\n0.0 0.0 0.0\\n0.0 0.0 0.0\\n0.0 0.0 0.0\\n0.0 0.0 0.0\\n0.0 0.0 0.0\\n0.0 0.0 0.0\\n0.0 0.0 0.0\\n') == '4.0 4.0 4.0'\nassert solution('2\\n2.0 3.0 4.0\\n1.5 2.5 2.0\\n') == '2.0 2.0'\nassert solution('1\\n1.5 2.5 2.0\\n') == '2.0'\n'''\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n100 0 0\\n100 0 100\\n100 100 100\\n100 0 100\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\n-----Solution-----\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '1.000000000\\n1.000000000\\n1.000000000\\n1.000000000\\n1.000000000'\nassert solution('5 1\\n1 1 1 1') == '1.000000000\\n1.000000000\\n1.000000000\\n1.000000000\\n1.000000000'\nassert solution('5 1\\n1 1 1 1') == '1.000000000\\n1.000000000\\n1.000000000\\n1.000000000\\n1.000000000'\nassert solution('1 1\\n1 1 1') == '1.000000000\\n1.000000000\\n1.000000000'\nassert solution('1 1\\n1 1 1') == '1.000000000\\n1.000000000\\n1.000000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 4') == '25.000000000'\n\n\"\"\"\n\nfrom math import pi, sqrt"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 4\\n0 0 0 0\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\") == \"25.000000000 25.000000000 25.000000000 25.000000000\"\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 2\\n1.2 3.4\\n') == '25.0'\nassert solution('1 5\\n2.2 4.4\\n') == '12.5'\nassert solution('1 10\\n4.4 8.8\\n') == '0.5'\nassert solution('2 9\\n3.6 7.7 1.5\\n') == '12.3'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 4\\n100 200 300 400\\n') == '25.0'\n\nassert solution('0 4\\n10 10 10 10\\n') == '25.0'\n\nassert solution('0 4\\n0 0 0 0\\n') == '0.0'\n\nassert solution('0 4\\n100 0 0 200\\n') == '100.0'\n\nassert solution('0 4\\n100 200 0 0\\n') == '25.0'"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 4\\n100 0 0 100\\n0 0 0 100\\n100 100 100 100\\n0 100 0 0\\n100 0 100 0\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\nSolution\nThe radius of each slice should be exactly the same, but the distance between the slices may vary. Let $s$ be the number of slices, and $r_i$ the radius of the $i$th slice. Then the slice has height $s \\cdot r_i$, has width $s \\cdot 2r_i$, and has thickness $s$ (i.e., the sum of the slices). The volume of the slice is then $s \\cdot r_i^2$. The volume of the cheese is then $s \\cdot 100^2$ or $s \\cdot 10000$. The sum of the volumes of the slices equals $s \\cdot 100^3$.\n\nBy the property of volumes, the sum of the volumes of the slices should be proportional to the volume of the cheese. So the thickness of each slice is proportional to the fraction of the volume of the cheese taken up by the slice, which is proportional to the fraction of the area of the slice taken up by the slices. The slice of cheese with height $s \\cdot r_i$ and width $s \\cdot 2r_i$ has a thickness of $s$ (i.e., the sum of the slices). The slice has a volume of $s \\cdot r_i^2$. The volume of the slice of cheese is then $s \\cdot r_i^2$. The volume of the slice is then proportional to the fraction of the volume of the slice of cheese taken up by the slice.\n\nThe slice of cheese with height $s \\cdot r_i$ and width $s \\cdot 2r_i$ has a thickness of $s$. The slice has a volume of $s \\cdot r_i^2$. The volume of the slice of cheese is then proportional to the fraction of the volume of the slice of cheese taken up by the slice.\n\nThe slice of cheese has a volume of $s \\cdot r_i^2$. The sum of the volumes of the slices is then proportional to the volume of the slice of cheese.\n\nThe radius of the slices is proportional to the size of the slice. The size of the slice is the area of the slice times the thickness of the slice. The area of the slice is equal to $s \\cdot 2r_i$ (i.e., the sum of the slices).\n\nThe total area of the slices is then proportional to the area of the slice of cheese.\n\nThe total area of the slices is then proportional to the area of the slice of cheese.\n\nThe area of the slice of cheese is then proportional to the thickness of the slice.\n\nThe thickness of the slice is then proportional to the fraction of the area of the slice taken up by the slices.\n\nThe slice of cheese has a thickness of $s$. The area of the slice of cheese is then proportional to the fraction of the area of the slice taken up by the slices.\n\nThe area of the slice of cheese is then proportional to the thickness of the slice.\n\nThe thickness of the slice is then proportional to the fraction of the area of the slice taken up by the slices.\n\nThe area of the slice of cheese is then proportional to the thickness of the slice.\n\nThe area of the slice of cheese is then proportional to the thickness of the slice.\n\nThe thickness of the slice is then proportional to the sum of the volumes of the slices.\n\nThe area of the slice of cheese is then proportional to the sum of the volumes of the slices.\n\nThe sum of the volumes of the slices is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe sum of the areas of the slices is then proportional to the volume of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe sum of the areas of the slices is then proportional to the volume of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe area of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe sum of the areas of the slices is then proportional to the volume of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe sum of the areas of the slices is then proportional to the volume of the slice of cheese.\n\nThe area of the slice of cheese is then proportional to the volume of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe area of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe area of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe area of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the slices.\n\nThe volume of the slice of cheese is then proportional to the area of the slice of cheese.\n\nThe volume of the slice of cheese is then proportional to the sum of the areas of the"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE'\n\"\"\"\n\nwith open('match_to_box.txt', 'r') as f:\n    n = int(f.readline())\n    w = int(f.readline())\n    h = int(f.readline())\n\nwith open('match_to_box_test_cases.txt', 'w') as f:\n    for _ in range(n):\n        f.write(f'{int(f.readline())}\\n')"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\nNE\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('5 3 4\\n6\\n7\\n8\\n9') == 'NE'\nassert solution('5 3 4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5') == 'DA'\n\nassert solution('5 3 4\\n1') == 'NE'\nassert solution('5 3 4\\n1\\n1') == 'DA'"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n4\n5\n6\n7''') == 'DA'\nassert solution('''5\n3\n4\n5\n6\n7''') == 'NE'\nassert solution('''1\n2\n3\n4\n5''') == 'NE'\nassert solution('''1\n2\n3\n4\n5''') == 'DA'\n\n'''\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435, \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 N \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0442\u0435\u043c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 W \u0438 H (1 <= W <= 100, 1 <= H <= 100). \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0442\u0435\u043c N \u0447\u0438\u0441\u0435\u043b. \u041f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \"DA\", \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u0430\u0432\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u0438\u043b\u0438 \"NE\" \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u0412\u0432\u043e\u0434:\n3\n4\n5\n6\n7\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n5"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA DA DA NE NE'\nassert solution('''2 3 4\n1\n2\n3\n4\n5''') == 'NE NE NE NE'\nassert solution('''1 3 4\n2\n2\n2\n2\n2\n''') == 'NE NE NE NE'\n\n\"\"\"\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n'), 'DA DA DA NE NE')\n        self.assertEqual(solution('2 3 4\\n1\\n2\\n3\\n4\\n5\\n'), 'NE NE NE NE')\n        self."
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\nprint(solution('5 3 4\\n3\\n4\\n5\\n6\\n7'))\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\"\n\nN, W, H = map(int, input().split())\nmatches = [int(input()) for _ in range(N)]\nprint('DA' if any(match <= W and match <= H for match in matches) else 'NE')"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE NE'\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 3 4\n3\n4\n5\n6\n7\n''') == 'DA\\nDA\\nDA\\nNE\\nNE'\n\"\"\"\n\nfrom typing import List\n\nclass Matrix:\n    def __init__(self, matrix_data):\n        self.data = matrix_data\n\n    def __str__(self):\n        return '\\n'.join(['\\t'.join([str(el) for el in row]) for row in self.data])\n\n    def __getitem__(self, key):\n        return self.data[key]\n\n    def __add__(self, other):\n        return Matrix([\n            [self[row][col] + other[row][col] for col in range(len(self[row]))] for row in range(len(self))\n        ])\n\n    def __mul__(self, other):\n        if isinstance(other, Matrix):\n            return Matrix([\n                [sum([self[row][col] * other[row][col] for col in range(len(self[row]))]) for row in range(len(self))]\n            ])\n        else:\n            return Matrix([\n                [self[row][col] * other for col in range(len(self[row]))] for row in range(len(self))\n            ])\n\n    def __sub__(self, other):\n        return Matrix([\n            [self[row][col] - other[row][col] for col in range(len(self[row]))] for row in range(len(self))\n        ])\n\n    def transpose(self):\n        return Matrix([\n            [self[col][row] for col in range(len(self))] for row in range(len(self[0]))\n        ])\n\n    def determinant(self):\n        if len(self) == 1:\n            return self[0][0]\n        if len(self) == 2:\n            return self[0][0] * self[1][1] - self[0][1] * self[1][0]\n        else:\n            determinant = 0\n            for col in range(len(self)):\n                determinant += self[0][col] * self.cofactor(0, col).determinant() * (-1) ** col\n            return determinant\n\n    def minor(self, i, j):\n        return self.submatrix(i, j).determinant()\n\n    def submatrix(self, i, j):\n        if len(self) == 1:\n            return Matrix([[self[0][0]]])\n        elif len(self) == 2:\n            return Matrix([[self[0][0], self[0][1]], [self[1][0], self[1][1]]])\n        return Matrix([\n            [self[row][col] for col in range(len(self)) if col!= j] for row in range(len(self)) if row!= i\n        ])\n\n    def cofactor(self, i, j):\n        if len(self) == 1:\n            return 1\n        return self.minor(i, j) * (-1) ** (i + j)\n\n    def inverse(self):\n        determinant = self.determinant()\n        if determinant == 0:\n            return Matrix([[0] * len(self) for _ in range(len(self))])\n        cofactor_matrix = Matrix([\n            [self.cofactor(i, j) for j in range(len(self))] for i in range(len(self))\n        ])\n        return cofactor_matrix * (1 / determinant)\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n7 42\\n\") == 6\n\"\"\"\nimport sys"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n7 42\") == \"6\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n7 42') == '6'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n0 0\n7 42''') == '6'\n\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n7 42\") == \"6\"\nassert solution(\"2\\n0 0\\n7 42\") == \"6\"\nassert solution(\"2\\n0 0\\n7 42\\n8 10\") == \"4\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n0 0\n7 42''') == '6'\nprint('Test solution passed')"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 0\\n7 42') == 6\n\"\"\"\nimport sys\n\nN = int(input())\n\nspeeds = {0: 0}\nfor _ in range(N):\n    t, d = map(int, sys.stdin.readline().split())\n    speeds[t] = max(speeds.get(t, 0), d)\n\nmax_time = max(speeds.keys())\nmax_distance = speeds[max_time]\n\nspeed = 0\nfor t in range(1, max_time + 1):\n    if speeds[t] > speed:\n        speed = speeds[t]\n    elif speeds[t] < speed:\n        print(speed)\n        exit()\nprint(speed)\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 42\\n0 0') == '6'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\\\n0 0\\\\n7 42\") == \"6\"\nprint(solution(stdin_lines))\n\n-----Explanation-----\nIn this example, you can determine the speed of the car to be traveling at time $0$ and distance $0$. At time $7$, the speed is $42$. So, the greatest speed that the car can be traveling at some time and distance is $6$ miles per hour.\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0\\n7 42\\n') == '6'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'correct'\nassert solution('ALICE\\n-> BOB') == 'correct'\nassert solution('ALICE BOB -> CARL') == '1'\nassert solution('ALICE BOB -> CARL\\nALICE -> BOB') == '2'\nassert solution('ALICE BOB -> CARL\\nALICE -> BOB -> CARL') == '2'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"\nimport sys\n\nfrom typing import Dict"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == 'correct'\nassert solution('''4\n-> BOB\n-> ALICE\nBOB -> ALICE\nALICE ALICE -> CARL\n''') == '4'\nassert solution('''5\n-> ALICE\n-> BOB\nBOB -> ALICE\nALICE -> BOB\n-> CARL\nALICE -> BOB\nBOB -> CARL\n''') == '3'\nassert solution('''4\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n-> CARL\nALICE -> BOB\nBOB -> ALICE\n''') == 'correct'\nassert solution('''1\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL''') == 'correct'\nassert solution('''0\n-> ALICE\nALICE -> BOB\n-> CARL\nCARL -> ALICE\n-> BOB\nBOB -> CARL\n-> CARL\nCARL -> BOB\n-> ALICE\nALICE -> BOB\n-> BOB\nBOB -> ALICE''') == '2'\n'''\nA new proof system has been invented. If you don\u2019t like the new rules, you can tell your students to prove the theorem by copying them into the proof lines. Otherwise, you\u2019d like the new proof system to be recognized as the standard one.\n\nYour students have written the following program to check if a new proof system is correct. It checks if every line is correct, i.e. it has no violation of the new rules.\n\n-----Input-----\nThe first line of input consists of an integer $1 \\le n \\le 400000$, the number of lines in the \u201cproof\u201d. Then follow the $n$ lines of the \u201cproof\u201d. Each line has $0 \\le a \\le 5$ assumptions, followed by an arrow (the string \u201c->\u201d), followed by one conclusion. All assumptions and conclusions consist of $1 \\le c \\le 5$ uppercase alphabetic characters. The assumptions, arrow, and conclusion are all separated by single spaces.\n\n-----Output-----\nIf every line is correct output \u201ccorrect\u201d. Otherwise, output the number of the first line with an error (line numbers start at $1$).\n\n-----Examples-----\nSample Input:\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nSample Output:\ncorrect\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\"\n\"-> ALICE\\n\"\n\"-> BOB\\n\"\n\"ALICE BOB -> CARL\") == \"correct\"\nassert solution(\"2\\n\"\n\"-> ALICE\\n\"\n\"ALICE -> CARL\") == \"1\"\n\nassert solution(\"3\\n\"\n\"-> ALICE\\n\"\n\"-> BOB\\n\"\n\"-> ALICE\\n\"\n\"ALICE BOB -> CARL\\n\"\n\"ALICE -> CARL\") == \"1\"\nassert solution(\"3\\n\"\n\"-> ALICE\\n\"\n\"-> BOB\\n\"\n\"-> ALICE\\n\"\n\"ALICE BOB -> CARL\\n\"\n\"ALICE -> BOB\") == \"2\"\n\nassert solution(\"3\\n\"\n\"-> ALICE\\n\"\n\"-> BOB\\n\"\n\"ALICE BOB -> CARL\\n\"\n\"ALICE -> BOB\\n\"\n\"-> BOB\\n\"\n\"ALICE BOB -> CARL\\n\"\n\"ALICE -> CARL\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Runoff!\"\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\") == 'Connie Froggatt'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\nPenny Franklin\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin_lines) == stdout_lines\n\n\n'''\n\nimport os\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n''') == 'Connie Froggatt'\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n''') == 'Runoff!'\n'''\n\nimport collections\nimport re\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Diane Kerman\\nDiane Kerman\\nDiane Kerman\\n***\") == \"Runoff!\"\nassert solution(\"James Donald\\nJames Donald\\nJames Donald\\n***\") == \"James Donald\"\nassert solution(\"James L. Wilson\\nJames L. Wilson\\nJames L. Wilson\\n***\") == \"James L. Wilson\"\nassert solution(\"John Jacob Jingleheimer Schmidt\\nJohn Jacob Jingleheimer Schmidt\\nJohn Jacob Jingleheimer Schmidt\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Connie Froggatt\"\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Runoff!'\nassert solution('Penny Franklin') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers') == 'Connie Froggatt'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"Penny Franklin\"\n\"Marti Graham\"\n\"Connie Froggatt\"\n\"Joseph Ivers\"\n\"Connie Froggatt\"\n\"Penny Franklin\"\n\"Connie Froggatt\"\n\"Bruce Stanger\"\n\"Connie Froggatt\"\n\"Barbara Skinner\"\n\"Barbara Skinner\"\n) == \"Connie Froggatt\"\n\nassert solution(\n\"John Dow\"\n\"Susan Fox\"\n\"Peter Fox\"\n\"Susan Fox\"\n\"John Dow\"\n\"Susan Fox\"\n) == \"Runoff!\"\nassert solution(\n\"Barbara Bowman\"\n\"Barbara Bowman\"\n\"John Dow\"\n\"Susan Fox\"\n\"Peter Fox\"\n\"Susan Fox\"\n\"John Dow\"\n\"Susan Fox\"\n) == \"John Dow\"\nassert solution(\n\"Barbara Bowman\"\n\"Barbara Bowman\"\n\"John Dow\"\n\"Susan Fox\"\n\"John Dow\"\n\"Susan Fox\"\n\"John Dow\"\n\"Susan Fox\"\n\"John Dow\"\n\"Susan Fox\"\n\"John Dow\"\n\"John Dow\"\n) == \"Runoff!\"\nassert solution(\n\"Penny Franklin\"\n\"Marti Graham\"\n\"Connie Froggatt\"\n\"Joseph Ivers\"\n\"Connie Froggatt\"\n\"Penny Franklin\"\n\"Connie Froggatt\"\n\"Bruce Stanger\"\n\"Connie Froggatt\"\n\"Barbara Skinner\"\n\"Barbara Skinner\"\n) == \"Connie Froggatt\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Connie Froggatt\" or solution(stdin) == \"Runoff!\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"8\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nPolly-Rose Basic\\nSpencer Basic\") == '1'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\nHan Solo Huttese Basic\nPrincess Leia Organa Huttese Basic\nChewbacca R2D2 Basic\nBoba Fett Basic\nBiggs Darklighter Droid Basic\n''') == '3'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == \"2\"\nassert solution(test_input_2) == \"2\"\nassert solution(test_input_3) == \"3\"\nassert solution(test_input_4) == \"3\"\nassert solution(test_input_5) == \"3\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('7\\nFran\\nFrancis\\nPolly\\nSpencer\\nNathan\\nChewbacca\\nFrank\\nIan\\nLuke\\nR2D2') == '5'\nassert solution('7\\nEddie\\nGraham\\nBarry\\nGeorge\\nBill\\nTricia\\nR2D2\\nGrace\\nChewbacca\\nNathan\\nChewbacca') == '7'\nassert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nR2D2 Binary Basic') == '3'\nassert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nR2D2 Binary Basic\\nLuvuu\\nMaa-ar-r-r-r-ah\\nTru-ngan\\nChewbacca\\nR2D2') == '4'\n\n-----Notes-----\nThe first line of the input gives the number of characters in the cantina, $N$.\nEach line after that describes a character and what languages they can speak.\nLanguages are separated by a single space.\nAll character names are distinct.\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == '2'\nassert solution(\"1\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == '1'\nassert solution(\"1\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == '1'\nassert solution(\"1\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == '1'\nassert solution(\"1\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == '1'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n\nn = int(input())\ncharacters = {}\nfor _ in range(n):\n    name, lang, *languages = input().split()\n    characters[name] = languages"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"8\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nFran Basic Iain\") == '5'\nassert solution(\"9\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nFran Basic Iain\\nPolly-Anne Basic Jawaese\") == '3'\nassert solution(\"13\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nFran Basic Iain\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\") == '6'\nassert solution(\"12\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nFran Basic Iain\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\\nAlexandra Basic Jawaese\\nIain Anderson Basic Jawaese\\nPolly-Anne Basic Jawaese\\nIvor Minkovsky Basic Slavic\") == '7'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n\nassert solution(\"9\\nArya-Stark-Darth-Vader-Sansa Stark\\nJon Snow-Snow-Darth-Vader-Sansa Stark\\nTyrion-Lannister-Darth-Vader-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei-Lannister-Darth-Vader-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nJaime Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nTyrion Lannister-Sansa Stark\\nCersei Lannister-Sansa Stark\\nJaime Lannister-Sansa Stark\\nBran Stark-Darth-Vader-Sansa Stark\\nCersei Lann"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n\nbudget = int(input())\n\ngroups = 0\ngroup = 0\nfor i in range(1, 4):\n    groups += int(input())\n    cost = [int(x) for x in input().split()]\n    cost = [x for x in reversed(sorted(cost))]\n    while group < groups and sum(cost) < budget:\n        group += 1\n        cost[0] += 1\n    print(sum(cost) if group == groups else \"stay home\")\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 3 1 2\\n1 2 2') =='stay home'\nassert solution('2 1000 2 3\\n200\\n27 3 20') == '923'\nassert solution('2 100000 2 3\\n200\\n27 3 20') == '923'\nassert solution('2 100000 2 3\\n200\\n27 3 20') == '923'\n\"\"\"\n\nN, B, H, W = list(map(int, input().split()))\ncost = list(map(int, input().split()))\nbeds = list(map(int, input().split()))"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 1000 2 3\n200\n0 2 2\n300\n27 3 20\"\"\") == \"900\"\nprint(solution(\"\"\"3 1000 2 3\n200\n0 2 2\n300\n27 3 20\"\"\"))"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nprint(solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\"))\n\nassert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nprint(solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\"))\n\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') =='stay home'\n\n'''"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n\n\"\"\"\nIf there are multiple hotels with the same price, the one with the highest available bed count should be selected.\n\nSort the hotels in ascending order of price, then in ascending order of available bed count.\n\nTime complexity: O(n*log n), where n is the number of hotels.\n\nSpace complexity: O(1)\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1\\n2 3\\n2 3') =='stay home'\nassert solution('1 100 1\\n0') == '100'\nassert solution('1 10000 1\\n0') =='stay home'\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 C D F D C D F F F C') == 'A# C D# F'\nassert solution('12 D D D D D D D F F F F F') == 'none'\nassert solution('12 E E E E E E E G G G G G') == 'none'\nassert solution('12 E D D D D D D E G G G G G') == 'A# C D# F'\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"3 C D F D C D F F F C\") == \"none\"\nassert solution(\"3 C D F D C D F F F C C\") == \"none\"\n\"\"\"\n\nimport sys\n\nnotes = {}"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10\\nC D F F F C D D B B B C\") == \"none\"\nassert solution(\"10\\nC D F F F C D D B B B C B C\") == \"A# C D# F A G# A B C# D E G G# A\"\n\nimport sys\nlines = sys.stdin.readlines()\nstdin = lines[0].strip()\nn = int(lines[1].strip())\nassert n == len(stdin.split(\" \"))\n\nscales = [\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"),\n        \"name\": \"major\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F#\", \"G\", \"A\", \"B\"),\n        \"name\": \"minor\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F\", \"G#\", \"A\", \"B\"),\n        \"name\": \"dorian\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F\", \"G\", \"A#\", \"B\"),\n        \"name\": \"phrygian\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F#\", \"G#\", \"A\", \"B\"),\n        \"name\": \"lydian\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B#\"),\n        \"name\": \"mixolydian\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F#\", \"G\", \"A#\", \"B\"),\n        \"name\": \"aeolian\",\n    },\n    {\n        \"notes\": (\"C\", \"D\", \"E\", \"F#\", \"G#\", \"A\", \"B\"),\n        \"name\": \"locrian\",\n    },\n]"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"A# C D# F\"\nassert solution(\"12\") == \"A# C D# F G# A#\"\nassert solution(\"24\") == \"A# C D# F G# A# B# A#\"\nassert solution(\"32\") == \"A# C D# F G# A# B# A# C#\"\nassert solution(\"63\") == \"A# C D# F G# A# B# A# C# D#\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\nA\") == \"A\"\nassert solution(\"2\\nA B\") == \"A B\"\nassert solution(\"3\\nA B C\") == \"A B C\"\nassert solution(\"4\\nA B C D\") == \"A B C D\"\nassert solution(\"5\\nA B C D E\") == \"A B C D E\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G# A# C D# F G"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'C C# D D# E F F# G G# A A# B'\n\"\"\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"A B C D E F G A B C D E F G A B C D E F G\") == \"none\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"hai taalar vi rikssvenska\") == \"haer talar vi rikssvenska\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"Dae Ae Ju Traeligt Va\") == \"haer talar vi rikssvenska\"\n\"\"\"\n\nimport sys\n\nwords = sys.stdin.readline().rstrip('\\n')"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n\"\"\"\n\n\"\"\"\n1. Storing the original sentence in a variable.\n2. Split the sentence by spaces and store them in a list.\n3. Iterate through the list and store the original words in a string.\n4. For every word check if the substring 'ae' exists in the word.\n5. If it exists, add the word to the result and if it doesn't, add a space to the result.\n6. Join the result by spaces and return it.\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('dae ae ju traeligt ja') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt ve') == 'dae ae ju traeligt va'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'a s o l d e j u n d u'\n) == 'dae ae ju traeligt va'\nassert solution(\n'r A b c C C A B A b c'\n) == 'haer talar vi rikssvenska'\nassert solution(\n
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\nprint(solution(stdin))\n\nprint(\"Success!\")\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va v\u00e4l\") == \"haer talar vi rikssvenska\"\n\n------Problem Description------\nGiven the sequence of words in the input, determine whether the sentence is written in the Swedish dialect of rikssvenska.\n\nA simple way of determining if a sentence is written in rikssvenska is if at least $40\\% $ of the words in the sentence contains the letter ae. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in rikssvenska, otherwise output \u201chaer talar vi \u00f6stg\u00f6tska\u201d.\n\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\n------Problem Description------\nGiven the sequence of words in the input, determine whether the sentence is written in the Swedish dialect of \u00f6stg\u00f6tska.\n\nA simple way of determining if a sentence is written in \u00f6stg\u00f6tska is if at least $40\\% $ of the words in the sentence contains the letter \u00e4. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in \u00f6stg\u00f6tska, otherwise output \u201chaer talar vi rikssvenska\u201d.\n\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\n------Problem Description------\nGiven the sequence of words in the input, determine whether the sentence is written in the Swedish dialect of rikssvenska.\n\nA simple way of determining if a sentence is written in rikssvenska is if at least $40\\% $ of the words in the sentence contains the letter ae. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in rikssvenska, otherwise output \u201chaer talar vi \u00f6stg\u00f6tska\u201d.\n\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\n------Problem Description------\nGiven the sequence of words in the input, determine whether the sentence is written in the Swedish dialect of \u00f6stg\u00f6tska.\n\nA simple way of determining if a sentence is written in \u00f6stg\u00f6tska is if at least $40\\% $ of the words in the sentence contains the letter ae. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in \u00f6stg\u00f6tska, otherwise output \u201chaer talar vi rikssvenska\u201d.\n\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\n------Problem Description------\nGiven the sequence of words in the input, determine whether the sentence is written in the Swedish dialect of \u00f6stg\u00f6tska.\n\nA simple way of determining if a sentence is written in \u00f6stg\u00f6tska is if at least $40\\% $ of the words in the sentence contains the letter ae. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in \u00f6stg\u00f6tska, otherwise output \u201chaer talar vi rikssvenska\u201d.\n\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\n------Problem Description------\nGiven the sequence of words in the input, determine whether the sentence is written in the Swedish dialect of rikssvenska.\n\nA simple way of determining if a sentence is written in rikssvenska is if at least $40\\% $ of the words in the sentence contains the letter ae. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in rikssvenska, otherwise output \u201chaer talar vi \u00f6stg\u00f6tska\u201d.\n\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae a"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"ja jag l\u00f6ser varandra med l\u00f6senordet er riktsvenska\") == \"ja jag l\u00f6ser varandra med l\u00f6senordet er riktsvenska\"\nassert solution(\"ja jag kommer fr\u00e5 l\u00f6senordet rikssvenska\") == \"ja jag kommer fr\u00e5 l\u00f6senordet rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va haer talar vi rikssvenska') == 'dae ae ju traeligt va'\n\n'''"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#.#.\\n..#.#.\\n#.#..\\n\") == \"#..E\\n.E.#\\n#.E.\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#.#\") == \"..#.\"\nassert solution(\"..#..\") == \"..E..\"\nassert solution(\"#.##.\") == \"#..E.\"\nassert solution(\"..E..\") == \"..E..\"\nassert solution(\"#.E#.\") == \"#..E.\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"...E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nassert solution(\"#..#.#..#.\\n.##...##.\\n#.#####.\\n.#...#.#\\n#.###.#.\\n#.##...#\\n.##...##\\n#.#####.\\n.#...#.#\") == \"..#.E..#.\\n...#.E#..\\n#.E.#E.E.\\n..E.#E.#.\\n.E..E.#.#\\n#.E.#.#.#\\n##E.E.E.#\\n.E.#.#.##\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\nprint(solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\"))\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#.\\n..#\\n###\") == \"E..E#\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 4\\n....#.\\n....#.\\n#.....\\n......') == 'E#...E'\n\nassert solution('3 5\\n#...#.\\n.#..#.\\n.#..#.') == '#E...E\\n.#...#\\n#E..#E'\nassert solution('1 3\\n#.') == '#E'\n\nassert solution('2 2\\n#.#') == '#E'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('4 3\\n....\\n....\\n#...') == 'E.E.E'\n\n\"\"\"\n\n\nfrom itertools import product\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.#.\\n..#\\n###') == '#.\\n.E#\\n###'\nassert solution('.#.\\n..#\\n#.#') == '#.\\n..#\\n#.#'\nassert solution('.#.\\n..#\\n#.#\\n###') == '#.\\n..#\\n#.#\\n###'\nassert solution('.#.\\n..#\\n#.#\\n#.#\\n###') == '#.\\n..#\\n#.#\\n#.#\\n###'\nassert solution('.#.\\n..#\\n#.#\\n#.#\\n#.#\\n###') == '#.\\n..#\\n#.#\\n#.#\\n#.#\\n###'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"2 5 6 7 1 9\") == \"1 2 3 5 6 7 9\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"11 4 7 6 9 10 2 1\") == \"11 4 7 6 9 10 2 1\"\n\"\"\"\n\ninput_string = input()\nbox_heights = list(map(int, input_string.split()))\n\nbox_heights.sort()\ntower_heights = box_heights.pop(), box_heights.pop()\n\ntowers_heights = []\nfor box_height in box_heights:\n    towers_heights.append(tower_heights[0] - box_height)\n    towers_heights.append(tower_heights[1] + box_height)\n\ntowers_heights.sort(reverse=True)\nprint(\" \".join(map(str, towers_heights)))"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\nimport unittest\nimport collections\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '12 10 3 8 4 2'\nassert solution('''3 9 4 6 2 4 7''') == '3 9 2 6 4 7'\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12 8 2 4 10 3 25 14) == '12 10 3 8 4 2'\nassert solution(12 10 3 8 4 2) == '12 10 3 8 4 2'\nassert solution(12 10 3 25 14 8 2) == '12 10 8 2 3 25 14'\nassert solution(12 10 25 14 8 2) == '12 10 8 2 3 25 14'\nassert solution(12 10 25 14 8 2) == '12 10 8 2 3 25 14'\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"12 8 2 4 10 3 25 14\"\n) == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"15 14 9 12 2 8 16\") == \"15 9 12 2 16 8\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\n\"\"\"\n\nimport sys\n\ne, f, c = sys.stdin.readline().rstrip().split()\n\na = int(e)\nb = int(f)\nd = int(c)\n\ne = b - a\nc = d - b"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('5 6 6') == '4'\nassert solution('1 1 2') == '2'\nassert solution('1 0 0') == '1'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 0 3\\n') == '4'\n\"\"\"\n\ne, f, c = input().split(' ')\ne, f, c = int(e), int(f), int(c)\n\nres = e"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 0 3\") == \"4\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 0 3') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 0 3\") == 4\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '9 0 3') == '4'\nassert solution(\n    '1 1 1') == '1'\nassert solution(\n    '0 0 0') == '0'\nassert solution(\n    '1 0 0') == '0'\nassert solution(\n    '1 1 1') == '1'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1010') == '12'\nassert solution('11101') == '27'"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"12\"\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1100\") == \"14\"\nassert solution(\"110110\") == \"132\"\nassert solution(\"111111\") == \"147\"\nassert solution(\"1110110\") == \"1326\"\n\"\"\"\n\nfrom collections import deque\nfrom math import log10"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1010') == '12'\n\"\"\"\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1100\") == \"20\"\nassert solution(\"11011100\") == \"132\"\nassert solution(\"11101110\") == \"132\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == '12'\nassert solution('1011010') == '1220'\nassert solution('10110110110') == '122100'\nassert solution('101101101101110') == '12210110'\nassert solution('10110110110111110') == '1221011110'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == '12'\nassert solution('10101010') == '132'\nassert solution('10110110') == '212'\nassert solution('111110010110110') == '1232132'\nassert solution('11111001011011010110110') == '123322132132'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"10010\") == \"14\"\nassert solution(\"11010\") == \"17\"\nassert solution(\"11110\") == \"32\"\nassert solution(\"11111\") == \"65\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010') == '12'\nassert solution('1001') == '9'\nassert solution('1000') == '8'\nassert solution('1100') == '20'\nassert solution('1101') == '21'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '12'\nassert solution('1110101010') == '202'\nassert solution('1010101010') == '242'"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n..o\\no..\\n\") == \"2\"\n\"\"\"\nimport unittest"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\nassert solution('2 3\\noo\\noo\\no.') == 1\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 3\n..o\no..\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 4\n...o\n...o\n..oo\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 4\n...o\n...o\no..\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 4\n...o\n...o\n....\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5 6\n...o\n...o\n....\n..oo\no..o\n\"\"\") == \"14\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\"\"\"\n\nR, S = [int(i) for i in stdin.readline().split()]\nlines = stdin.readlines()\nans = 0\n\nfor i in range(R):\n    for j in range(S):\n        if lines[i][j] == 'o':\n            ans += i * S + j + 1\n            lines[i] = lines[i][:j] + 'x' + lines[i][j+1:]\n\nprint(ans)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\nprint(solution(\"2 3\\n..o\\no..\"))\n\n\"\"\"\n\nR, S = stdin.split(\"\\n\")[:2]\nR, S = int(R), int(S)\nseats = stdin.split(\"\\n\")[2:]\n\nhandshakes = 0\nfor seat in seats:\n    if \".\" in seat:\n        handshakes += len(seat) - 1\n    else:\n        handshakes += len(seat)\n\nprint(handshakes)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n3 2\\n3 2\\n3 2\\n3 2\") == \"SMECE\"\nassert solution(\"5 3\\n2 1\\n2 1\\n2 1\\n2 1\") == \"SMECE\"\nassert solution(\"5 3\\n3 4\\n3 4\\n3 4\\n3 4\") == \"SMECE\"\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == solution_target\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n1 2\\n1 3') == 'LADICA'\nassert solution('6 6\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3') == 'SMECE'\nassert solution('5 3\\n1 2\\n1 2\\n1 2\\n1 3\\n1 4') == 'SMECE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(r\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == r\"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(r\"3 2\\n1 2\\n1 3\") == r\"LADICA\\nSMECE\"\nassert solution(r\"5 1\\n1 2\") == r\"LADICA\\nSMECE\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\nassert solution('5 3\\n1 2\\n1 3\\n1 4\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nSMECE\\nSMECE\\nLADICA'\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\nassert solution('3 4\\n1 2\\n2 3\\n3 4') == 'LADICA\\nLADICA'\n\nassert solution('3 2\\n1 2\\n2 3\\n3 1') == 'LADICA\\nSMECE'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"5 3\\n2 1\\n2 3\\n2 1\\n2 3\\n2 1\") == \"LADICA\\nSMECE\\nLADICA\\nSMECE\\nLADICA\"\n\"\"\"\n\nfrom sys import stdin\n\nN, L = map(int, stdin.readline().split())\nresult = ''\nfor _ in range(N):\n    A, B = map(int, stdin.readline().split())\n    if A > B:\n        result += 'LADICA\\n'\n    elif B > A:\n        result += 'SMECE\\n'\n    else:\n        result += 'LADICA\\nSMECE\\n'\nprint(result)\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n1 2\\n2 3\\n3 4\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0\\n\") == \"1 2\"\nassert solution(\"4\\n0 2 3 1\\n\") == \"1 3 2 4\"\n\"\"\"\n\nimport math\n\nn = int(input())\nline = [int(x) for x in input().split()]\n\nd = []\nfor i in range(n-2):\n    d.append(line[i+1] - line[i])\n\nprint(*sorted(d))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\n0\n\"\"\") == \"1 2\"\n\n-----\nSample Input:\n2\n1\n0\nSample Output:\n1 2\n\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0\") == '2 1'\nassert solution(\"3\\n0 1 2\") == '3 1 2'\nassert solution(\"4\\n0 1 2 3\") == '4 2 1 3'\nassert solution(\"5\\n0 1 2 3 4\") == '5 3 1 4 2'\n\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0') == '1 2'\nassert solution('2') == '1 2'\nassert solution('1') == '1'\nassert solution('5') == '1 2 3 4 5'\nassert solution('6') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0\\n1\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0\\n1') == '1 2'\nprint('Hooray!')\n\n-----Constraints-----\n* 3 <= n <= 100\n* 0 <= d_i <= n - 2\n* There is always a unique solution\n\n-----Hints-----\n* You will need to think of a way to solve this problem.\n\n* This problem is similar to the Array Manipulation problem from the previous challenge. You are able to reuse your code from the previous challenge.\n\n* You should use a technique from the previous challenge to solve this problem.\n\n* You may also want to consider using some of the ideas discussed in the previous challenge to solve this problem.\n\n* Your solution must be O(n) time complexity and O(1) space complexity.\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0\") == \"1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\"\n\nimport os"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2 1\n\"\"\") == \"1 2 3\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"2 2\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"\n3\n1 1 2\n\"\"\") == \"1 2 3\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"\n4\n0 2 1 2\n\"\"\") == \"2 1 3\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"\n2\n0 2\n\"\"\") == \"2 1\"\nprint(\"PASSED\")"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'\n\n\"\"\"\n\nimport collections\nimport itertools\nimport sys"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"\nprint(solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\"))\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == \"1\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2\\n0 1\\n1 2\\n0 1') == '1'\nassert solution('4 3 2\\n0 1\\n1 2\\n3 4') == '0'\n\"\"\"\n\nimport heapq\nfrom itertools import permutations\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\nassert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n2 3') == '0'\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 4\\n1 2\\n1 3') == 1\n\"\"\"\n\nn, h, l = [int(x) for x in stdin.split(' ')]\nhorror = [int(x) for x in stdin.split('\\n')[1:]]\nsim = [[int(x) for x in stdin.split('\\n')[i].split(' ')] for i in range(l)]"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == '1'\n\"\"\"\n\nfrom sys import stdin\n\nn, h, l = map(int, stdin.readline().strip().split())\n\nhorror_list = set(map(int, stdin.readline().strip().split()))\n\nsims = []\nfor _ in range(l):\n    a, b = map(int, stdin.readline().strip().split())\n    sims.append((a, b))\n    sims.append((b, a))\n\nsims = set(sims)"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'\n\n---Problem---\n\nImplement the solution, which should output the ID of the movie in the collection with the highest Horror Index. In case of a tie, output the movie with the lowest ID.\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '1'\nassert solution('''6 2 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '1'\nassert solution('''6 4 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '1'"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n1 3 4'\n) == '4 3 1'\nassert solution(\n    '4\\n1 3 4'\n) == 'impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n1 2 3') == 'impossible'\n\"\"\"\n\nimport unittest\nimport sys\nimport itertools"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 4') == '4 3 1'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('3\\n1 1 1') == 'impossible'\n\"\"\"\n\nn = int(input())\n\nl = [int(i) for i in input().split()]"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 3 4') == 'impossible'\nassert solution('3\\n1 1 1') == 'impossible'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('3\\n1 1 1') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 4\") == '4 3 1'\nassert solution(\"3\\n1 3 2\") == 'impossible'\nassert solution(\"1\\n1\") == 'impossible'\nassert solution(\"5\\n4 3 2 2 1\") == 'impossible'\n\n-------\n\nIceland is famous for its geothermal activity, which supplies the country with much of its electricity and heating. It is also a source of pleasure, in the form of hot springs. \n\nKalle is visiting one of Iceland\u2019s famous hot springs. It contains $n$ pools of water, where the $i$th one has temperature $t_ i$. Although staying in one of the warmer pools for a long time sure is relaxing, Kalle is on a very tight schedule and just wants a quick dip in each of the pools. As you may know, the nicest thing about hot baths is the contrast between hot and cold. Therefore, to get the most out of his stay, Kalle wants to find an ordering of the pools so that the difference in temperature between subsequent pools is increasing.\n\nGiven a sequence of pool temperatures $t_1, t_2, \\dots, t_ n$, rearrange them into a new sequence $t\u2019_1, t\u2019_2, \\dots, t\u2019_ n$ such that for all $2 \\leq i \\leq n-1$ it holds that\\[ |t\u2019_{i-1} - t\u2019_ i| \\leq |t\u2019_ i - t\u2019_{i+1}|. \\]\n\n-----Input-----\nThe input consists of:\n - One line with an integer $n$ ($2 \\le n \\leq 10^5$), the number of pools.\n - One line with $n$ integers $t_1, \\ldots, t_ n$ ($-10^5\\leq t_ i \\leq 10^5$ for each $i$), the temperatures in each of the $n$ pools.\n\n-----Output-----\nOutput a rearrangement of the sequence satisfying the given requirement. If no solution exists, output \u201cimpossible\u201d. If there are multiple valid solutions, you may output any one of them.\n\n-----Examples-----\nSample Input:\n3\n1 3 4\nSample Output:\n4 3 1\n\nSample Input:\n5\n1 3 2 5 7\nSample Output:\nimpossible\n\"\"\"\n\nn = int(input())\n\nt = [int(i) for i in input().split()]\nt.sort()"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4 3 1\"\nassert solution(\"1 2 3\") == \"impossible\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(randint(-10000000, 10000000) for _ in range(randint(1, 10)))) == \"impossible\"\nassert solution(str(randint(-10000000, 10000000) for _ in range(randint(1, 10)))) in [\"impossible\", \"impossible\"]\n\n\"\"\"\n\nimport random"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 1\") == \"4 1 3\"\nassert solution(\"5 2 2\") == \"impossible\"\nassert solution(\"2 1 3\") == \"impossible\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"4\\n2 1 2\") == \"impossible\"\nassert solution(\"4\\n3 1 4\") == \"4 1 3\"\nassert solution(\"4\\n1 1 1\") == \"impossible\"\nassert solution(\"4\\n3 5 1\") == \"impossible\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 'impossible'\nassert solution(1) == 'impossible'\nassert solution(2) == '2 1'\nassert solution(4) == '4 3 1'\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 20 15\\n3 10\") == '18.400'\n\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\nassert solution('''4 200 15\n6 10''') == '21.800'\nassert solution('''1 0 15\n1 0''') == '15.000'\n'''\nWhen you start a new lesson, you always learn at the same speed. At the beginning of every lesson, you always know the new speed $p$ of the video in the following format: $0 \\leq p \\leq 100$; so when the lesson is over, your speed is $p$% of the original speed.\n\nNow, when you want to learn a new video, you always know its original length $k$ in the following format: $1 \\leq k \\leq 20000$; so when the lesson is over, your length is $k$ seconds.\n\nYou are given a video that was just watched, $X$, where its speed is $p$% of the original speed and its length is $k$ seconds. You need to find the original length of the video that you watched.\n\nExample\n\nFor\n\ninput:\n2 20 15\n3 10\noutput:\n18.400\n\nFor\n\ninput:\n2 20 15\n3 10\noutput:\n21.800\n'''"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 1 2') == '1'\nassert solution('2 1 3') == '1'\nassert solution('2 1 3 4') == '3'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1,5') == '1.3333333333333333'\nassert solution('2,5,3') == '3.8333333333333335'\nassert solution('3,5,3,4,1,1') == '6.833333333333333'\nassert solution('3,5,7,2,1,1') == '7.5'\n\n-------------------------"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n\nfrom typing import List, Tuple\n\ntest_cases = [\n    {\n        \"input\": {\n            \"n\": 2,\n            \"p\": 20,\n            \"k\": 15\n        },\n        \"output\": 18.4\n    },\n]\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 20 15\\n3 10') == '18.4'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 20 15') == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 20 15\\n3 10\") == '18.400'\n    "
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 20 15\\n3 10') == '18.4'\n\"\"\"\n\nimport sys\nimport math\nimport re\n\nn, p, k = [int(i) for i in re.findall(r'\\d+', sys.stdin.readline().rstrip())]\nt = [int(i) for i in re.findall(r'\\d+', sys.stdin.readline().rstrip())]\nt.sort()\nt_0 = t[0]\nt_1 = t[1]\nt_k = t[-1]\nfor i in range(2, n):\n    t_0 = max(t_0, t[i - 1])\n    t_1 = max(t_1, t[i - 1] + t[i])\nT = t_k - t_0 + k * p / 100\nprint(math.floor(T))\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10\\n3 10') == '7.500'\nassert solution('5 100\\n3 1\\n3 2\\n3 3\\n5 5') == '6.800'\nassert solution('5 100\\n3 1\\n3 2\\n3 3\\n5 5\\n5 5') == '7.000'\nassert solution('5 100\\n3 1\\n3 2\\n3 3\\n5 5\\n5 5\\n5 5') == '7.100'\nassert solution('5 100\\n3 1\\n3 2\\n3 3\\n5 5\\n5 5\\n5 5\\n5 5') == '7.500'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....H\") == 5\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('S') == '1'\nassert solution('S...') == '1'\nassert solution('S....') == '2'\nassert solution('S....H') == '1'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nprint(solution(stdin))\n\n-----Explanation-----\nSpies travel in a straight line along a diagonal path to the nearest safe house. The Manhattan distance from them to the nearest safe house is equal to the number of city blocks (not including the safe house) they must travel through.\n\nAll the heights are equal to 0, so there is only one safe house. Therefore, the maximum Manhattan distance is equal to the number of city blocks in the grid.\n\nCode:\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n...H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('4\\n....H\\n....H\\n.....\\nS....') == '4'\nassert solution('4\\n.S....\\n....H\\n.....\\n.S....') == '4'\nassert solution('4\\n....H\\n....H\\n.....\\nS..H..') == '4'\nassert solution('4\\n....H\\n....H\\n.....\\nS....') == '4'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('....H\\n.....\\nS....\\n....H\\n.....') == 5\n\n------\nimport sys\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('4\\nS....\\nH....\\n.H.H.\\nS....') == '4'\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n....H\n.....\nS....\n....H\n.....\n''') == '5'\n\nassert solution('''\n4\n....H\n...H\n...H\n...H\n''') == '0'\n\nassert solution('''\n5\n...H\n....H\nS....\n....H\n...H\n''') == '10'\n\nassert solution('''\n5\n....H\n....H\nS....\n....H\n...H\n''') == '10'\n\nassert solution('''\n5\nH....\nH...H\nH....\nH...H\n....H\n''') == '10'"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('6\\n.H..H\\n.S.H\\n.H..H\\n.S.H\\n.H..H') == '3'\nassert solution('10\\n.S.S.H\\n.S.S.H\\n.H.H.S\\n.H.H.S\\n.H.H.S\\n.H.H.S\\n.S.S.H\\n.S.S.H') == '4'\nassert solution('10\\n.S.S.H\\n.S.S.H\\n.H.H.S\\n.H.H.S\\n.H.H.S\\n.H.H.S\\n.S.S.H\\n.S.S.H') == '2'"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\"\nimport itertools\nimport math\nfrom functools import reduce\nfrom collections import namedtuple\n\nCoord = namedtuple('Coord', ['x', 'y'])\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        grid = stdin.split('\\n')\n        grid = [list(row) for row in grid]\n        width = len(grid)\n        height = len(grid[0])\n        \n        houses = []\n        spies = []\n        \n        for i, row in enumerate(grid):\n            for j, val in enumerate(row):\n                if val == 'H':\n                    houses.append(Coord(i, j))\n                elif val == 'S':\n                    spies.append(Coord(i, j))\n        \n        # print(houses)\n        # print(spies)\n        \n        coords = list(itertools.product(range(width), range(height)))\n        coords = [Coord(*coord) for coord in coords]\n        \n        # print(coords)\n        \n        safe_houses = []\n        \n        for coord in coords:\n            if coord in houses:\n                safe_houses.append(coord)\n        \n        # print(safe_houses)\n        \n        min_dist = -1\n        for spy in spies:\n            safe_dist = -1\n            \n            for house in safe_houses:\n                dist = abs(spy.x - house.x) + abs(spy.y - house.y)\n                safe_dist = max(safe_dist, dist)\n            \n            min_dist = max(min_dist, safe_dist)\n        \n        return str(min_dist)\n    \n\nsolution = Solution().solution\nassert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == 5\nassert solution(\"4\\nS..\\nS..\\n...\\nS..\") == 4\n\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == \"0\"\n\n----"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == \"0\"\nprint(solution(\"5 2 3\\n2 4\\n1 3 5\\n\"))\nprint(\"Passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nprint(solution(input()))"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == \"0\"\nassert solution(\"5 3 2\\n1 2 3 4\\n5\\n\") == \"0\"\nassert solution(\"5 3 2\\n2 3 4 5\\n5\\n\") == \"0\"\nassert solution(\"5 3 2\\n1 2 3 4\\n2\\n\") == \"0\"\nassert solution(\"5 3 2\\n1 2 3 4\\n3\\n\") == \"1\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n2 4\\n1 3 5\") == \"0\"\n\nprint(solution(\"5 2 3\\n2 4\\n1 3 5\"))\n\n\"\"\"\n\nn, s, r = [int(i) for i in input().split()]\nl = [[int(j) for j in input().split()] for _ in range(n)]\nm = set()\n\nfor i in range(n):\n    for j in range(n):\n        if l[i][j]!= 0:\n            m.add(l[i][j])\n\nm = list(m)"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'\n\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 3\\n1 3\\n2 4') == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == 0\n\n-----Notes-----\n\n'''\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n1 3\\n2 4') == 0\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('2 1\\n') == '0.500000'\nassert solution('3 1\\n') == '0.666667'\nassert solution('2 2\\n') == '0.500000'\nassert solution('1 1\\n') == '0.000000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('2 2\\n') == '0.500000'\nassert solution('1 10\\n') == '0.909091'\nassert solution('2 100\\n') == '0.9090909'\n\"\"\"\n\nfrom math import sqrt\n\nc, r = [int(n) for n in input().split()]\nprint('{:.6f}'.format(sqrt(r ** 2 - c ** 2) / r * 2))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0.000000'\nassert solution('1 2\\n') == '0.50000'\nassert solution('2 2\\n') == '1.00000'\nassert solution('2 10\\n') == '0.50000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\nassert solution(\"10 10\") == \"0.000000000\"\nassert solution(\"100 100\") == \"1.000000000\"\nassert solution(\"100 10\") == \"0.500000\"\nassert solution(\"10 100\") == \"0.500000\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('5 1\\n') == '0.2'\nassert solution('3 9\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.000000000'\n\n'''\n\nimport math\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n\nfrom math import pi\n\nr, c = map(float, input().split())\nprint(\"{:.6f}\".format(pi * r ** 2 * c ** 2 / (c ** 2 + r ** 2) ** 2))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('3 9\\n') == '0.2666666'\nassert solution('10 100\\n') == '0.0555556'\nassert solution('100 10000\\n') == '0.0000999'\nassert solution('10000 100000\\n') == '0.000000'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n') == '2'\nassert solution('4\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n') == '2'\nassert solution('4\\n100 101 102 103\\n100 200 300 101 102\\n100 200 300 101 102\\n') == '1'\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\n\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2 3 4 5') == '1'\nassert solution('1\\n2 3 4 5\\n5 4 3 2 1') == '2'\nassert solution('2\\n3 4 1 2\\n3 4 2 1') == '2'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"6\\n100 101 102 103 200 102\\n101 200 100 101 300 103\\n101 102 102 200 100 102\\n101 102 102 300 100 102\\n101 100 100 101 300 103\\n101 100 100 102 200 103\") == \"4\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n100 101 102 103 488') == 2\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n') == 2\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n0') == '2'\n\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"20000\") == \"none\"\nassert solution(\"450001\") == \"none\"\nassert solution(\"3876359410\") == \"none\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"18\") == \"16\"\nassert solution(\"19\") == \"17\"\nassert solution(\"400000\") == \"400010\"\n\"\"\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1730') == '1729'\nassert solution('20') == '18'\n\nfrom itertools import combinations\nfrom operator import itemgetter"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1730') == '1729'\nassert solution('1732') == 'none'\nassert solution('5000') == 'none'\nassert solution('800') == 'none'\nassert solution('1812') == 'none'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1730') == '1729'\nassert solution('1731') == '1730'\nassert solution('1732') == '1731'\nassert solution('1733') == '1731'\nassert solution('1734') == '1732'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1\") == None\nassert solution(\"10000000\") == None\nassert solution(\"10000000\") == \"0\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1730') == '1729'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1730') == '1729'\nassert solution('1') == 'None'\nassert solution('43') == '43'\nassert solution('100') == 'None'\nassert solution('100000') == 'None'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('65536') == '16'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('65536') == 16\nprint(solution('65536'))\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('65536') == '16'\nassert solution('12345') == '1'\nassert solution('100') == '2'\nassert solution('1111') == '2'\nassert solution('11') == '1'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(123)) == '2'\nassert solution(str(12345)) == '4'\nassert solution(str(123456)) == '5'\nassert solution(str(1234567)) == '6'\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"65536\") == 16\nprint(solution(\"65536\"))\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == 16\nprint(solution('65536'))\n\n----Solution----\n'''\n\nimport math"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == 16"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"65536\") == \"16\"\n\n-----Test data-----\n\"\"\"\n\nX = int(input())\n\n\"\"\"\nPrimitive algorithm:\n1. create a list of numbers, ranging from 1 to X.\n2. test whether there is any pair of consecutive elements, which sum to X.\n\"\"\"\n\ncandidates = [x for x in range(1, X + 1)]\n\nfor i in range(1, X):\n    if (candidates[i] + candidates[i - 1]) == X:\n        print(i)\n        break"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == \"2\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"....\", \"....\", \"....\", \"...K\"]) == 2\nassert solution([\".....\", \".....\", \".....\", \".....\"]) == 1\nassert solution([\"....\", \"....\", \"....\", \"....\"]) == -1\nassert solution([\"........\", \"........\", \"........\", \"........\", \"........\", \"........\", \"........\", \"........\", \"........\", \"........\"]) == -1\nassert solution([\"........\", \"........\", \"....K....\", \"....#....\", \"....#....\", \"....#....\", \"....#....\", \"....#....\", \"....#....\", \"....#....\"]) == 7\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('4\\n....\\n....\\n....\\nK...') == '-1'\n\n-----Solution-----"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\n....\n....\n....\n...K\") == 2\n\nassert solution(\"3\n...#\nK...\nSample Output:\n-1\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.#.#') == '-1'\nassert solution('.K.') == '0'\nassert solution('...#') == '-1'\nassert solution('...K.') == '1'\nassert solution('...#...#...#..') == '6'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1'\nassert solution('K..') == '0'\nassert solution('..#') == '1'\nassert solution('#.#') == '2'\nassert solution('#.K') == '-1'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".#..#\") == \"2\"\nassert solution(\"..#..\") == \"0\"\nassert solution(\".####..#\") == \"4\"\nassert solution(\"#.###.#\") == \"8\"\nassert solution(\"..##..#..\") == \"3\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"...\\n.K\\n...\\n....\\n....\\n....\") == \"5\"\nassert solution(\"...\\n..\\n.K\\n...\\n....\\n....\\n....\") == \"5\"\nassert solution(\"...\\n..K\\n...\\n....\\n....\\n....\") == \"6\"\nassert solution(\"...\\n..K\\n.K\\n...\\n....\\n....\\n....\") == \"7\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\nSample Input:\n100 3\n42\n3\n2\n99\n1\nSample Output:\ntoo late"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nprint(\"Test 1 OK\")\n\nSample Input:\n100 1\n42\nSample Output:\ntoo late\n\nSample Input:\n100 5\n42\n3\n2\n99\n1\nSample Output:\ntoo late\n\nSolution:\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\nprint('Test passed\\n')"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('2 3\\n1\\n1\\n'))\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"playfair example\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\n    \"hide the gold in the tree stump\"\n) == \"XQZUQYZPIXGPIUZTUQRKYDZHXTVWS\"\nassert solution(\n    \"dewdrop\"\n) == \"SQZRQLB\"\n\"\"\"\nimport re\nfrom itertools import combinations"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'LQPNLDPIENRVMNFNQKSTTPUBZDTXQZU'\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('Hello World') == 'HELLO WORLD'\nassert solution('playfair example') == 'BMMNZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\n'''"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"DBHNZCJXKJBMXIYGDMBXNZXOJXKJBM\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"QHDPMGPHHYMMKVFBDJIUIXLNXRVV\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'CJDMQMOBUHXUWJVDZYZYEYNBKALP'\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'JQFGHYKVUBDMQIPEZWIVUONXJWK'\n\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BHELORXBOPOJXIRVYKLEBZGMLFJDE\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HJDQRPSAEAKZBZEIKQIUEGHZBXUNMLVYQW\"\n\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"DUHRCRUMOCIFJKDMVQF\"\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\") == \"The gopher cannot escape.\"\nassert solution(\"1.500 1.500\") == \"The gopher can escape through the hole at (1.5, 1.5).\"\nassert solution(\"-10000 -10000 -10000 10000 10000\") == \"The gopher can escape through the hole at (-10.0, -10.0).\"\nassert solution(\"10000 10000 10000 10000 10000\") == \"The gopher can escape through the hole at (10.0, 10.0).\"\n\n-----Problem-----\nThe gravitational force between the gopher and the dog is proportional to the distance between them, so if the gopher is moving at a constant speed in a straight line, the dog will move with a constant speed. We can estimate the maximum speed of the dog relative to the gopher by measuring the distance between the gopher and the dog at different speeds. We can then estimate the speed of the gopher relative to the dog at all speeds by numerically solving for the speed of the gopher relative to the dog.\n\nTo start, let\u2019s consider the gopher\u2019s initial speed. This initial speed is a function of its initial position and the gravitational force between the gopher and the dog. The position and the gravitational force are independent of the speed of the gopher, so they are typically set to 0. The formula for the initial speed is\n\nInitial speed = $\\sqrt{\\frac{g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$\nwhere\n\n$x_0$ is the initial x position of the gopher\n$y_0$ is the initial y position of the gopher\n$x_f$ is the final x position of the gopher\n$y_f$ is the final y position of the gopher\n$g$ is the gravitational constant\n$m_g$ is the mass of the gopher\nSubstituting these expressions into the formula for initial speed, we obtain\n\nInitial speed = $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$\nWe can also find the maximum speed of the gopher relative to the dog by numerically solving for the maximum speed of the gopher relative to the dog.\n\nTo solve for the maximum speed of the gopher relative to the dog, we will set the initial speed to 0 and the final speed to 0. The maximum speed of the gopher is the minimum of the initial speed, the final speed, and the speed of the gopher relative to the dog. By numerically solving for the maximum speed of the gopher, we obtain\n\nMaximum speed of the gopher = $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$\nIf we assume that the gopher is not moving, the maximum speed of the gopher relative to the dog is $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$ minus $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$ = $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$. This is the speed at which the gopher will achieve its maximum speed if the gopher is not moving, so the gopher will achieve its maximum speed if and only if its speed is equal to $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$.\n\nIf the gopher is moving, we can set the initial speed to any non-negative speed and the final speed to any non-positive speed. If there is a speed in between, we can numerically solve for the speed at which the gopher will achieve its maximum speed. The gopher will achieve its maximum speed if and only if its speed is equal to $\\sqrt{\\frac{2\\times g\\times\\left(|x_0 - x_f| + |y_0 - y_f|\\right)}{m_g}}$ for some speed.\n\nWe can apply the same logic to the speed of the dog relative to the gopher, and then take the maximum speed of the gopher and the speed of the dog relative to each other.\n\nWe can finally write the solution in the form of a single line."
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == \"The gopher can escape through the hole at (2.0, 2.0).\"\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), file=stdout)\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n\") == \"The gopher cannot escape.\"\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1.000 1.000 2.000 2.000\\n\"\n    \"1.500 1.500\"\n) == \"The gopher cannot escape.\"\nassert solution(\n    \"1.000 1.000 2.000 2.000\\n\"\n    \"1.999 1.999\"\n) == \"The gopher can escape through the hole at (1,999)\"\nassert solution(\n    \"1.000 1.000 2.000 2.000\\n\"\n    \"1.500 1.500 1.500 1.500\\n\"\n    \"1.900 1.900\"\n) == \"The gopher can escape through the hole at (1,900)\"\n\"\"\"\nfrom typing import Callable\n\nimport pytest\n\nfrom aoc.intcode import Tape\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.010 1.010\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.010 1.010\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.010 1.010\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\nassert solution(\"1.010 1.010 1.010 1.010\\n1.010 1.010\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1.000 1.000 2.000 2.000\n1.500 1.500\n''') == 'The gopher cannot escape.'\n\nassert solution('''1.000 1.000 2.000 2.000\n1.500 1.500\n2.010 2.010\n2.010 2.010\n3.010 3.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010\n2.010 2.010"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1.0 2.0 3.0 4.0\n5.0 6.0 7.0 8.0\n9.0 10.0 11.0 12.0\n13.0 14.0 15.0 16.0\n17.0 18.0 19.0 20.0\n21.0 22.0 23.0 24.0\n25.0 26.0 27.0 28.0\n29.0 30.0 31.0 32.0\n33.0 34.0 35.0 36.0\n37.0 38.0 39.0 40.0\n41.0 42.0 43.0 44.0\n45.0 46.0 47.0 48.0\n49.0 50.0 51.0 52.0\n53.0 54.0 55.0 56.0\n57.0 58.0 59.0 60.0\n61.0 62.0 63.0 64.0\n65.0 66.0 67.0 68.0\n69.0 70.0 71.0 72.0\n73.0 74.0 75.0 76.0\n77.0 78.0 79.0 80.0\n81.0 82.0 83.0 84.0\n85.0 86.0 87.0 88.0\n89.0 90.0 91.0 92.0\n93.0 94.0 95.0 96.0\n97.0 98.0 99.0 100.0\n101.0 102.0 103.0 104.0\n105.0 106.0 107.0 108.0\n109.0 110.0 111.0 112.0\n113.0 114.0 115.0 116.0\n117.0 118.0 119.0 120.0\n121.0 122.0 123.0 124.0\n125.0 126.0 127.0 128.0\n129.0 130.0 131.0 132.0\n133.0 134.0 135.0 136.0\n137.0 138.0 139.0 140.0\n141.0 142.0 143.0 144.0\n145.0 146.0 147.0 148.0\n149.0 150.0 151.0 152.0\n153.0 154.0 155.0 156.0\n157.0 158.0 159.0 160.0\n161.0 162.0 163.0 164.0\n165.0 166.0 167.0 168.0\n169.0 170.0 171.0 172.0\n173.0 174.0 175.0 176.0\n177.0 178.0 179.0 180.0\n181.0 182.0 183.0 184.0\n185.0 186.0 187.0 188.0\n189.0 190.0 191.0 192.0\n193.0 194.0 195.0 196.0\n197.0 198.0 199.0 200.0\n201.0 202.0 203.0 204.0\n205.0 206.0 207.0 208.0\n209.0 210.0 211.0 212.0\n213.0 214.0 215.0 216.0\n217.0 218.0 219.0 220.0\n221.0 222.0 223.0 224.0\n225.0 226.0 227.0 228.0\n229.0 230.0 231.0 232.0\n233.0 234.0 235.0 236.0\n237.0 238.0 239.0 240.0\n241.0 242.0 243.0 244.0\n245.0 246.0 247.0 248.0\n249.0 250.0 251.0 252.0\n253.0 254.0 255.0 256.0\n257.0 258.0 259.0 260.0\n261.0 262.0 263.0 264.0\n265.0 266.0 267.0 268.0\n269.0 270.0 271.0 272.0\n273.0 274.0 275.0 276.0\n277.0 278.0 279.0 280.0\n281.0 282.0 283.0 284.0\n285.0 286.0 287.0 288.0\n289.0 290.0 291.0 292.0\n293.0 294.0 295.0 296.0\n297.0 298.0 299.0 300.0\n301.0 302.0 303.0 304.0\n305.0 306.0 307.0 308.0\n309.0 310.0 311.0 312.0\n313.0 314.0 315.0 316.0\n317.0 318.0 319.0 320.0\n321.0 322.0 323.0 324.0\n325.0 326.0 327.0 328.0\n329.0 330.0 331.0 332.0\n333.0 334.0 335.0 336.0\n337.0 338.0 339.0 340.0\n341.0 342.0 343.0 344.0\n345.0 346.0 347.0 348.0\n349.0 350.0 351.0 352.0\n353.0 354.0 355.0 356.0\n357.0 358.0 359.0 360.0\n361.0 362.0 363.0 364.0\n365.0 366.0 367.0 368.0\n369.0 370.0 371.0 372.0\n373.0 374.0 375.0 376.0\n377.0 378.0 379.0 380.0\n381.0 382.0 383.0 384.0\n385.0 386.0 387.0 388.0\n389.0 390.0 391.0 392.0\n393.0 394.0 395.0 396.0\n397.0 398.0 399.0 400.0\n401.0 402.0 403.0 404.0\n405.0 406.0 407.0 408.0\n409.0 410.0 411.0 412.0\n413.0 414.0 415.0 416.0\n417.0 418.0 419.0 420.0\n421.0 422.0 423.0 424.0\n425.0 426.0 427.0 428.0\n429.0 430.0 431.0 432.0\n433.0 434.0 435.0 436.0\n437.0 438.0 439.0 440.0\n441.0 442.0 443.0 444.0\n445.0 446.0 447.0 448.0\n449.0 450.0 451.0 452.0\n453.0 454.0 455.0 456.0\n457.0 458.0 459.0 460.0\n461.0 462.0 463.0 464.0\n465.0 466.0 467.0 468.0\n469.0 470.0 471.0 472.0\n473.0 474.0 475.0 476.0\n477.0"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.0 1.0 2.0 2.0\\n1.5 1.5') == 'The gopher cannot escape.'\nassert solution('1.0 1.0 2.0 2.0\\n2.5 2.5') == 'The gopher can escape through the hole at (2, 2).'\n\n------------Solution------------\n\nimport math\n\ngopher_x, gopher_y, dog_x, dog_y = map(float, stdin.split('\\n')[0].split())"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"1.000 1.000 2.000 2.000\"\n) == 'The gopher cannot escape.'\n\nassert solution(\n    \"1.500 1.500\"\n) == 'The gopher can escape through the hole at (1.5, 1.5).'\n\n----\n----\n----\n\n----\n----\n----"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('-1000 1\\n1 1\\n10') == 'N'\nassert solution('-1000 -1\\n1 -1\\n10') == 'N'\nassert solution('-1000 1000\\n1000 1000\\n10') == 'Y'\nassert solution('-1000 -1000\\n1000 1000\\n10') == 'N'\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\nassert solution(\"1 2\\n2 1\\n2\") == \"N\"\n\nassert solution(\"2 2\\n1 1\\n1\") == \"Y\"\n\nassert solution(\"1 3\\n2 2\\n3\") == \"N\"\n\nassert solution(\"3 4\\n4 2\\n4\") == \"Y\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 1\\n5 5\\n5\") == \"N\"\nassert solution(\"5 5\\n5 1\\n5\") == \"N\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Y'\nassert solution('4 2') == 'N'\nassert solution('3 3') == 'Y'\nassert solution('1 1') == 'Y'\nassert solution('-1 1') == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('1 2\\n3 2\\n3') == 'Y'\nassert solution('5 2\\n8 1\\n3') == 'Y'\nassert solution('2 2\\n8 1\\n3') == 'N'\nassert solution('-10 -10\\n-1 -1\\n3') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"4 2\\n-2 3\\n-3\") == \"N\"\n\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\nc, d = map(int, sys.stdin.readline().split())\nt = int(sys.stdin.readline())"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n1') == 'N'\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Y'\nassert solution('a') == 'Y'\nassert solution('a b') == 'N'\nassert solution('a b c d') == 'N'\nassert solution('a b c -3 d') == 'Y'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nassert solution('5 5\\n.#V#\\n#.V#\\n.V#\\n.#V#\\n#.V#\\n.#V#\\n.#V#\\n.#V#\\n.#V#\\n#.#V#\\n.#V#') == '.#V#\\n.#V#\\n.VVV\\n.V#V\\n#.#V\\n#.#V\\n.#V\\n.#V\\n.#V\\n.#V\\n.#V'"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 7\n...V...\n.......\n.......\n...#...\n..###..''') == '''...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.'''\n\n\"\"\"\nimport sys\nimport os\nimport time\nimport typing as t\nimport collections\n\n\nclass Grid:\n    def __init__(self, rows: int, columns: int) -> None:\n        self.rows = rows\n        self.columns = columns\n        self.grid = [[\".\" for i in range(columns)] for j in range(rows)]\n\n    def print(self) -> None:\n        for row in self.grid:\n            print(''.join(row))\n\n    def print_grid(self) -> None:\n        for row in self.grid:\n            print(''.join(row))\n\n    def grid_2d_to_1d(self) -> t.List[str]:\n        return [''.join(row) for row in self.grid]\n\n    def update_grid(self, input_str: str) -> None:\n        for i, row in enumerate(input_str):\n            self.grid[i] = list(row)\n\n\nclass GridSpreading(Grid):\n    def __init__(self, rows: int, columns: int) -> None:\n        super().__init__(rows, columns)\n\n        self.new_grid = []\n        for row in range(rows):\n            self.new_grid.append(list(\".\" * columns))\n\n        self.spread_air_cell_count = 0\n        self.spread_water_cell_count = 0\n        self.water_cell_count = 0\n        self.stop_spreading = False\n\n    def spread_air_cell(self, i: int, j: int) -> None:\n        self.new_grid[i][j] = \"#\"\n        self.spread_air_cell_count += 1\n\n    def spread_water_cell(self, i: int, j: int) -> None:\n        self.new_grid[i][j] = \"V\"\n        self.spread_water_cell_count += 1\n\n    def is_air_cell(self, i: int, j: int) -> bool:\n        return self.new_grid[i][j] == \"#\"\n\n    def is_water_cell(self, i: int, j: int) -> bool:\n        return self.new_grid[i][j] == \"V\"\n\n    def count_air_cells(self) -> int:\n        air_cells = 0\n        for row in self.new_grid:\n            for cell in row:\n                if cell == \"#\":\n                    air_cells += 1\n        return air_cells\n\n    def count_water_cells(self) -> int:\n        water_cells = 0\n        for row in self.new_grid:\n            for cell in row:\n                if cell == \"V\":\n                    water_cells += 1\n        return water_cells\n\n    def is_grid_empty(self) -> bool:\n        return self.count_air_cells() == 0 and self.count_water_cells() == 0\n\n    def stop_spreading(self) -> None:\n        self.stop_spreading = True\n\n    def is_grid_filled(self) -> bool:\n        return self.stop_spreading and self.count_air_cells() == self.rows * self.columns\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\n----\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\nsolution(stdin.strip())\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".#VV.VV\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n\nimport sys\n\n\nclass Solution:\n    def __init__(self, input_str: str):\n        self.input_str = input_str\n        self.N, self.M = (int(x) for x in self.input_str.split())\n        self.grid = []\n        self.previous_grid = []\n        self.visited = [[False for x in range(self.M)] for y in range(self.N)]\n        self.directions = ((1, 0), (-1, 0), (0, 1), (0, -1))\n\n    def flood_fill(self, x: int, y: int, cell: str):\n        if self.visited[x][y]:\n            return\n        if self.input_str[x][y]!= cell:\n            return\n        self.visited[x][y] = True\n        for dx, dy in self.directions:\n            if 0 <= x + dx < self.N and 0 <= y + dy < self.M:\n                self.flood_fill(x + dx, y + dy, cell)\n\n    def run(self):\n        for row in range(self.N):\n            self.grid.append(list(self.input_str[row]))\n            self.previous_grid.append(list(self.input_str[row]))\n        for row in range(self.N):\n            for col in range(self.M):\n                self.flood_fill(row, col, 'V')\n        self.flood_fill(row, col, '.')\n\n    def run_assert(self, expected):\n        self.run()\n        for row in range(self.N):\n            assert self.grid[row] == expected[row]\n\n    def run_print(self):\n        for row in range(self.N):\n            for col in range(self.M):\n                print(self.grid[row][col], end='')\n            print()\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nprint(solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\"))"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"7 4\\n....\\n....\\n....\\nV..\\n.#.\\n..#\") == \"....\\n....\\n....\\nV..\\n#.#\\n..#\"\n\n\"\"\"\n\nimport unittest\nimport numpy as np\nimport pandas as pd\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nassert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.V#V#V.\\n.###V#.'\n\n'''\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '11'\nassert solution('101010') == '101010'\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1''') == ''\nassert solution('''0''') == ''\nassert solution('''1111111''') == ''\nassert solution('''1011010''') == '10'\nassert solution('''11111111111111111''') == '11111111111111111'"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n\nn = int(input())\nn_bin = bin(n)\nprint(n_bin[::-1])\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(bin(13)) == 11\nassert solution(13) == 11\nassert solution(11) == 13\n\n---"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == '11'\n\nassert solution('5') == '101'\n\nassert solution('11') == '13'\n\nassert solution('101') == '5'\n\nassert solution('1111') == '1111'"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(bin(13)) == bin(11)"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"19\") == \"11\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"2\") == \"10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n\n-----Notes-----\nA number can be represented as an array of its binary digits, from least significant to most. For instance, the binary representation of 42 is 101010, and its decimal representation is 42.\n\nConstraints: 0 \u2264 N \u2264 2\\; 000\\; 000\\; 000.\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\nassert solution('101010') == '101010'\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrose\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqrose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerlemon\") == \"9\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npinKpinkPinK\\nPInkrose\\nlazerlemon\\n') == '9'\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\npink\\nteaqulSunrE\\nmexicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == \"I must watch Star Wars with my daughter\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nbuttons = []\n\nfor _ in range(n):\n    buttons.append(stdin.readline().strip())\n\ncount = 0\nfor button in buttons:\n    if button == \"rose\" or button == \"pink\":\n        count += 1"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\npink\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOse\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == '9'\nprint(solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOse\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\"))"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOse\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == '9'\n\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('5 3 1\\nCBA') == '3 5 1'\nassert solution('1 2 5\\nBA') == '1 2 5'\nassert solution('2 1 5\\nBAC') == '2 1 5'\nassert solution('2 5 1\\nCAB') == '2 5 1'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"5 1 3\") == \"5 1 3\"\nassert solution(\"5 3 1\") == \"5 3 1\"\nassert solution(\"5 1 3\") == \"5 1 3\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('1 5 3\\nCAB') == '1 3 5'\nassert solution('1 5 3\\nBAC') == '1 3 5'\nassert solution('1 5 3\\nACB') == '1 3 5'\nassert solution('1 5 3\\nBAC') == '1 3 5'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 5 3\nABC''') == '''1 3 5'''\nprint(solution('''1 5 3\nABC'''))\nassert solution('''2 3 4\nABC''') == '''2 3 4'''\nprint(solution('''2 3 4\nABC'''))\nassert solution('''4 1 2\nABC''') == '''4 1 2'''\nprint(solution('''4 1 2\nABC'''))\nassert solution('''3 2 1\nABC''') == '''3 2 1'''\nprint(solution('''3 2 1\nABC'''))\nassert solution('''8 1 2\nBCA''') == '''8 1 2'''\nprint(solution('''8 1 2\nBCA'''))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 3\\nABC\") == \"1 3 5\"\nassert solution(\"3 1 5\\nBCA\") == \"3 1 5\"\nassert solution(\"7 4 2\\nBAC\") == \"7 4 2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('3 5 1\\nCBA') == '3 5 1'\nassert solution('7 5 3\\nACB') == '7 5 3'\nassert solution('3 5 1\\nCAB') == '3 5 1'\nassert solution('1 5 3\\nCBA') == '1 3 5'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('1 3 5') == '1 3 5'\nassert solution('3 1 5') == '3 1 5'\nassert solution('3 5 1') == '3 5 1'\nassert solution('5 3 1') == '5 3 1'\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\\\n split 3\\\\nsell 1 5\\\\n die 4\") == \"8.0\"\nassert solution(\"buy 1 15\\\\n sell 1 5\\\\n split 3\\\\nmerge 4\") == \"9.1\"\n\n-----Notes-----\nThe first line in the input contains the initial capital that Mittens had in her account.\nIn the second line, the initial number and initial average cost of shares are specified.\nIn the third line, all of the events that occurred before her death, and the final line contains the death event.\n\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(sample_input) == \"73.8\"\n\n-----Tests-----\nSample Test:\nSample Input:\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\nSample Output:\n8.00000000\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 2 10\nsplit 2\nbuy 3 7\nsell 3 10\nsell 2 5\ndie 3\nbuy 4 8\nsplit 2\nsell 1 6\ndie 2\nbuy 2 4\nsplit 4\nbuy 2 5\nsell 1 8\nsell 3 8\nsell 2 6\ndie 5\nbuy 1 10\nsplit 3\nbuy 1 1\nsplit 1\nsell 2 10\nbuy 2 10\nsplit 1\nsell 3 10\nbuy 1 2\nsplit 3\nbuy 1 1\nsplit 1\nbuy 1 1\nsplit 1\nbuy 1 1\ndie 2\nbuy 1 1\nsplit 1\nbuy 1 1\nsplit 1\nbuy 2 2\nbuy 1 2\nsplit 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 2 2\nsplit 1\nbuy 1 1\nsplit 1\nbuy 2 1\nbuy 1 2\nsplit 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nsplit 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1\nbuy 1 1"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('buy 1 15\\nbuy 2 10\\nbuy 3 30\\nsell 1 5\\nsell 2 10\\nbuy 1 20\\nbuy 1 20\\nsell 1 10\\nbuy 3 10\\nbuy 3 10\\nbuy 3 10\\nsell 3 10\\nsell 3 10\\nbuy 2 10\\nbuy 2 10\\nbuy 2 10\\nbuy 2 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10\\nbuy 1 10"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\n\nassert solution('''buy 2 10\nsplit 2\nbuy 3 10\nsplit 2\nbuy 2 10\nmerge 2\nsell 1 10\nbuy 3 10\nmerge 2\nbuy 1 10\nsell 3 10\nbuy 1 10\nsplit 2\nbuy 4 10\nmerge 2\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nmerge 2\nbuy 2 10\nsell 1 10\nbuy 3 10\nmerge 2\nbuy 1 10\nsell 2 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 2 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 2 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 2 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 2 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 3 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\") == \"8.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4') == '8.0'\n'''\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\nbuy 5 10\nbuy 1 10\nsell 5 20\nbuy 1 10\nbuy 1 10\nbuy 1 10\nsell 1 20\nbuy 1 10\nbuy 1 10\nsell 1 20\nbuy 1 10\nbuy 1 10\nbuy 1 10\nsell 1 20\nbuy 1 10\nbuy 1 10\nsell 1 20\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nsell 1 20\nbuy 1 10\nbuy 1 10\nsell 1 20\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('808') == '8'\nassert solution('1024') == '6'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('808') == '8'\nassert solution('1234') == '1'\nassert solution('9999') == '9'\nassert solution('1208') == '8'\nassert solution('1548') == '8'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(808) == 8\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\nprint(solution(\"808\"))\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1634\") == \"6\"\nassert solution(\"9999\") == \"9\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('808') == '8'\nassert solution('1100') == '1'\nassert solution('1111111111111111111111111111111111111') == '0'\n\n\"\"\"\n\nimport ast\nimport sys"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('808') == '8'\nassert solution('1') == '1'\nassert solution('12345') == '9'\nassert solution('1234') == '4'\nassert solution('999') == '9'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('808') == '8'\nassert solution('2') == '2'\nassert solution('10') == '1'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\nassert solution('123') == '3'\nassert solution('5') == '5'\n\n'''\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"815\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('test_input.txt').read()) == '5'\n'''\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a\\n') == ''\nassert solution('L\\n') == '1'\nassert solution('LLLLL\\n') == '1'\nassert solution('WWWWL\\n') == '2'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\nC C C C\\nC C C C\\nC C C C\\nC C C C') == 0\n\n-----Solution-----\n\"\"\"\n\n\"\"\"\nYou are mapping a faraway planet using a satellite. The planet\u2019s surface can be modeled as a grid. The satellite has captured an image of the surface. Each grid square is either land (denoted as \u2018L\u2019), water (denoted as \u2018W\u2019), or covered by clouds (denoted as \u2018C\u2019). Clouds mean that the surface could either be land or water; you cannot tell.\n\nAn island is a region of land where every grid cell in the island is connected to every other by some path, and every leg of the path only goes up, down, left or right.\n\nGiven an image, determine the minimum number of islands that is consistent with the given image.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains two integers, $r$ and $c$ ($1 \\le r, c \\le 50$), which are the number of rows and the number of columns of the image. The next $r$ lines will each contain exactly $c$ characters, consisting only of \u2018L\u2019 (representing Land), \u2018W\u2019 (representing Water), and \u2018C\u2019 (representing Clouds).\n\n-----Output-----\nOutput a single integer, which is the minimum number of islands possible.\n\n-----Examples-----\nSample Input:\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\nSample Output:\n0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC''') == 0\n\n\"\"\"\n\nclass Grid:\n    def __init__(self, r, c):\n        self.r = r\n        self.c = c\n        self.grid = [[] for i in range(r)]\n        for i in range(r):\n            for j in range(c):\n                self.grid[i].append(None)\n        self.components = 0\n        \n    def add(self, i, j):\n        for x in range(self.r):\n            for y in range(self.c):\n                self.grid[x][y] = self.grid[x][y] + (self.grid[i][j],)\n    \n    def rem(self, i, j):\n        for x in range(self.r):\n            for y in range(self.c):\n                self.grid[x][y] = self.grid[x][y] - (self.grid[i][j],)\n                if len(self.grid[x][y]) == 0:\n                    self.grid[x][y] = None\n                \n    def get(self, i, j):\n        for x in range(self.r):\n            for y in range(self.c):\n                if self.grid[x][y] is not None:\n                    if len(self.grid[x][y]) > 1:\n                        if (i, j) in self.grid[x][y]:\n                            return True\n                        else:\n                            return False\n                    else:\n                        if (i, j) in self.grid[x][y]:\n                            return True\n                        else:\n                            return False\n                    \n    def addcomponent(self, i, j):\n        self.add(i, j)\n        for x in range(self.r):\n            for y in range(self.c):\n                if self.get(i, j) and self.grid[x][y] is not None:\n                    self.grid[x][y] = None\n                    self.components += 1\n                    self.addcomponent(x, y)\n                self.rem(i, j)\n    \n    def getcomponents(self):\n        for x in range(self.r):\n            for y in range(self.c):\n                if self.grid[x][y] is not None:\n                    self.components += 1\n                    self.addcomponent(x, y)\n                self.rem(x, y)\n        return self.components\n                    "
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC''') == 0\n\nassert solution('''4 5\nWWWWW\nWWWWW\nWWWWW\nWWWWW''') == 1\n\nassert solution('''4 5\nWWLWW\nWWWLW\nWWWWW\nWWWWW''') == 1\n\nassert solution('''4 5\nWWLWW\nWWWLL\nWWWWW\nWWWWW''') == 0\n\nassert solution('''4 5\nWWWLL\nWWWWW\nWWWWW\nWWWWW''') == 0"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stub) == result\n'''\nimport sys"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\n\"\"\"\n\nimport collections\nfrom typing import List, Dict, Set, Tuple, DefaultDict\n\n\"\"\"\n\u57f7\u884c\u7d50\u679c\n\nname: near_land\n\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('3 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '90'\nassert solution('3 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '90'\nassert solution('100 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '900'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\"\"\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 S\\n2H\\n5D\\n4C\\nQS\\nKS\\nAD\\nTD\\n9C\\nJC\\nQH\") == \"54\"\n\nassert solution(\"4 H\\n6C\\n5S\\n5D\\nQS\\nKS\\nAD\\nTD\\n9C\\nJC\\nQH\") == \"64\"\n\nassert solution(\"4 C\\n6H\\n5S\\n5D\\nQS\\nKS\\nAD\\nTD\\n9C\\nJC\\nQH\") == \"65\"\n\nassert solution(\"4 D\\n6H\\n5S\\n5D\\nQS\\nKS\\nAD\\nTD\\n9C\\nJC\\nQH\") == \"63\"\n\nassert solution(\"4 C\\n2H\\n5S\\n5D\\nQS\\nKS\\nAD\\nTD\\n9C\\nJC\\nQH\") == \"53\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"))\nprint(solution(\"1 S\\n6C\\n5S\\nTH\\n8S\\n7H\\n7D\\nQS\\n8D\\nKS\\n8H\\n3S\\n9D\\n9S\\n9H\\n9D\\n5S\\n6S\\n6H\\n6D\\nKS\\nQS\\n2H\\n3C\\nQH\\n9H\\n4C\\n7S\\nKS\\n3S\\n9H\\n9S\\n3C\\nTD\\nAD\\n5S\\n5S\\n5H\\n5C\\nTH\\n5D\\n5S\\n9H\\n6C\\n8S\\nJS\\n3C\\n8S\\nKS\\n6C\\n6C\\nKS\\n2C\\n5C\\n5S\\n4H\\n3S\\n3C\\n2S\\n7D\\n7S\\nKS\\n5H\\n2S\\n3S\\nAS\\nTH\\n4S\\n5H\\n5S\\nKS\\nQS\\n8H\\n5D\\n9S\\n6S\\nJS\\nAS\\nTH\\n4H\\n2C\\n8S\\n8C\\n6C\\n8S\\nJS\\n4S\\n4H\\n3C\\n8D\\n9S\\n7C\\n7C\\n8C\\n6S\\nKC\\n4C\\n5H\\nAS\\nAS\\nTH\\n4S\\n2H\\nJS\\nAS\\n4H\\n4S\\nQS\\n2S\\n8S\\nQS\\n2S\\nJS\\nQS\\n4S\\n6S\\n6H\\n7C\\n7C\\n6S\\n7H\\n5H\\n2S\\nQH\\n3C\\nQH\\n4S\\n3S\\n3H\\nJS\\nAH\\n5H\\n7D\\n5S\\n5S\\nKS\\n3C\\n3S\\nJS\\nTH\\n2S\\n2D\\n9S\\nQH\\nAS\\n6C\\n4C\\n5S\\nJS\\n4D\\n2C\\n9C\\n9H\\n7S\\n2S\\n2D\\n3D\\n8S\\nJS\\n4H\\nAS\\nKC\\n7S\\n4H\\n6S\\n2S\\n4C\\n5S\\n3H\\n5C\\n7H\\n8S\\n7H\\n6S\\n2H\\n8C\\nJS\\n3C\\n4C\\n2S\\n8S\\n9C\\n8S\\n9H\\n9S\\nKS\\n8H\\n2C\\n8C\\n8S\\n9S\\n5S\\n2H\\n3D\\n2C\\n4D\\n3S\\nQD\\n9S\\n3S\\n3H\\n4C\\n3H\\n3H\\n8S\\n6S\\nQS\\nTH\\n8H\\n4H\\nQH\\n4S\\n9S\\n2C\\n6C\\n8S\\n3S\\n2C\\n4S\\n4C\\nQS\\n3C\\nAH\\nKS\\nQD\\n8S\\n9S\\n8S\\n5D\\n9H\\n2S\\nTH\\n9C\\n8D\\n5H\\n3S\\nTH\\nKC\\n4S\\n6S\\nQH\\nKS\\n6S\\n5S\\n7C\\n7S\\n5C\\nJS\\n5S\\nAH\\n3S\\n4S\\nQH\\n7H\\n8S\\n3H\\nAH\\nQS\\n4C\\n4H\\n3S\\nAH\\n2H\\nTH\\n8H\\n8S\\n4C\\n5C\\n6H\\n7C\\n4S\\n2S\\n5C\\n3C\\nAH\\n7H\\n6H\\n8S\\nQH\\nQS\\n5S\\n7H\\n9S\\nTH\\n2C\\n3H\\n5C\\n7S\\n2C\\n2H\\n7H\\n4S\\n2S\\n2H\\n2S\\n7S\\n9D\\nJS\\n6S\\nKS\\n4H\\n5H\\n4D\\nJS\\n2H\\nQH\\n9H\\n8H\\n8H\\n6S\\n8S\\n8S\\n8S\\n6C\\n8H\\n2H\\nAH\\nKS\\nQS\\nTH\\n4S\\nJS\\nQS\\n5S\\n6S\\n8C\\n4C\\n6S\\n8S\\n6S\\nQS\\n2S\\n8S\\n8H\\n9D\\nAH\\n3S\\n5S\\n7S\\n2C\\n6C\\n9D\\n3C\\n9C\\n6S\\n4C\\nJS\\nAH\\nQS\\nQD\\nQS\\nAH\\n2C\\n8S\\n8S\\nJS\\n9C\\n6S\\n8S\\n3D\\nJS\\n5S\\n5S\\n7S\\n2H\\n8D\\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"TH\") == 11\nassert solution(\"QS\") == 21\nassert solution(\"9C\") == 14\nassert solution(\"2H\") == 4\nassert solution(\"AD\") == 20\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('thiss is very annoying') =='se'\nassert solution('this is very annoying') =='se'\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"this is very annoying\") == \"se\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    stdin = 'this is very annoying'\n    ) =='se'\nassert solution(\n    stdin = 'thiss iss veery annoying'\n    ) =='se'\n\n-----Solution-----"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\"\"\"\n\n\nimport string"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''this is very annoying''') =='se'\nassert solution('''thiss iss veery annoying''') =='se'\nassert solution('''go go go go go go''') == 'g'\nassert solution('''this is very annoying\nthiss iss veery annoying''') =='se'\nassert solution('''this is very annoying\nthiss iss veery annoying\n''') =='se'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\n-----Notes-----\nThe input will never be empty.\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\"\n\nS, C, K = [int(c) for c in stdin.readline().split()]\nD = [int(c) for c in stdin.readline().split()]\n\nfrom collections import defaultdict\n\nd = defaultdict(lambda: [])\n\nfor i in range(S):\n    d[D[i]].append(i + 1)\n\nimport heapq\n\nheap = []\nfor i in d.keys():\n    heapq.heappush(heap, -i)\n\ncurr_cap = 0\nans = 0\nwhile heap:\n    i = heapq.heappop(heap)\n    if curr_cap + 1 < C:\n        ans += 1\n        curr_cap += 1\n    else:\n        i = -i\n        if K + i in d.keys():\n            for j in d[K + i]:\n                if curr_cap - 1 >= 0:\n                    ans += 1\n                    curr_cap -= 1\n                else:\n                    break\nprint(ans)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nS, C, K = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\nD = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\nimport collections\nimport itertools\nimport functools\nimport operator\n\n@functools.lru_cache(maxsize=None)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == 1\nassert solution(\"1\\n1\\n1\\n1\\n2\") == 1\nassert solution(\"1\\n1\\n1\\n1\\n2\") == 1\nassert solution(\"1\\n1\\n1\\n1\\n3\") == 2\nassert solution(\"1\\n1\\n1\\n1\\n4\") == 2\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\n\"\"\"\nhe was a bit lazy to solve the problem and throw all his socks into one machine and expect it to retain its original colors. After all, that was not the most interesting task for the problem description.\n\nThe solution was to try to find the number of machines that could be used in such way to wash all socks without discoloring and without washing the same socks more than once.\n\nThe laundry machine works with $C$ socks at once, so the number of machines needed is $S \\mod C$ (the floor of $S$ divided by $C$).\n\"\"\"\n\nfrom math import gcd\nimport sys\nfrom typing import List"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 0\\n0 0 1 1\") == \"1\"\nassert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\"\nassert solution(\"10 3 0\\n0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\") == \"8\"\nassert solution(\"5 3 1\\n0 0 1 1\") == \"2\"\nassert solution(\"5 3 10\\n0 0 1 1 2\") == \"1\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\nassert solution('1 1 1\\n1') == 1\nassert solution('3 0 1\\n2 2 2') == 1\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 0\\n1 1\\n0 1') == '2'\nassert solution('5\\n3 2 0\\n1 2 1 3') == '2'\nassert solution('5\\n3 2 0\\n1 2 3 4') == '0'\nassert solution('5\\n3 2 0\\n1 2 1 1') == '2'\n\"\"\"\n\nfrom collections import defaultdict\n\nS, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))\nsocks = list(set(socks))\nd = defaultdict(int)\nfor sock in socks:\n    d[sock] += 1\n\nsocks = [0] + socks\ncount = 0\nfor i in range(1, S + 1):\n    for j in range(i + 1, S + 1):\n        if abs(socks[i] - socks[j]) <= K:\n            if d[socks[i]] > 0 and d[socks[j]] > 0:\n                d[socks[i]] -= 1\n                d[socks[j]] -= 1\n                count += 1\n            elif d[socks[i]] > 0:\n                d[socks[i]] -= 1\n                count += 1\n            elif d[socks[j]] > 0:\n                d[socks[j]] -= 1\n                count += 1\n\nprint(count)"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == '6'\n'''\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2\\n1\\n\") == \"6\"\nassert solution(\"1\\n2\\n3\\n\") == \"6\"\nassert solution(\"3\\n2\\n1\\n\") == \"6\"\n\nSample Input:\n3\n5\n15\n27\nSample Output:\n5\n1\n0\n\nassert solution(\"3\\n2\\n1\\n\") == \"6\"\nassert solution(\"3\\n2\\n1\\n\") == \"6\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3\\n') == '6'\n\"\"\"\n\nimport os\nimport io\nimport unittest\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2\\n1') == '6'\n\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\n\nfor _ in range(int(sys.stdin.readline())):\n    print(int(10**int(sys.stdin.readline())))\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"6\"\n\nprint(solution(\"3\"))\n\n\n\nimport os\nimport io\nimport unittest\nimport itertools\nimport operator"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '6'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"6\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nfor _ in range(n):\n    sys.stdin.readline()\n    print(sys.factorial(int(sys.stdin.readline().rstrip())))\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"12\") == 2\nassert solution(\"10\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"1 1 1\") == \"0 0\"\nassert solution(\"3 3 3\") == \"7 7\"\nassert solution(\"3 1 2 2\") == \"6 2\"\nassert solution(\"1 2 3 4 5\") == \"10 10\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"3 1 2\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2') == '4 2'\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n3 1 2') == '4 2'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nsuma = sum(a)"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '4 2'\n\"\"\"\n\n\nfrom typing import List, Dict\nfrom collections import defaultdict\nfrom functools import cache\nimport math\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4 2\"\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == (0, 0)\nassert solution('1 2 3') == (6, 6)\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n\nalice, bob = 0, 0\n\nwhile len(a) > 0:\n    if len(a) % 2 == 0:\n        alice += max(a[0], a[1])\n        a.pop(0)\n        a.pop(0)\n    else:\n        bob += max(a[0], a[1])\n        a.pop(0)\n        a.pop(0)\n\nprint(alice, bob)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 2, 1) == 2\nassert solution(6, 3, 1) == 1\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\") == 2\n\n\"\"\"\n\nn, k, g = map(int, input().split())\nb = [1] * n\nfor _ in range(k):\n    b = [b[i] * g for i in range(n)]\n    b = [b[i] // k for i in range(n)]\nprint(sum(b))\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1') == 2\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 2 1\\n') == '2'\n'''"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1') == 2\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"2 1 2\") == \"3\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('1 2 2') == '1'\nassert solution('1 1 1') == '0'\nassert solution('2 1 2') == '2'\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('1 1 1') == '0'\nassert solution('1 2 2') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 1 3') == '2'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n\nb, k, g = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5'\n) == '36'\n\nprint(solution('5'))\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == 36\nassert solution(\"7\") == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\nassert solution(\"100\") == \"10201\"\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 36\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == 36\nassert solution(\"7\") == 288\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == 36\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\nassert solution(\"4\\n1 2 3 4\") == 'impossible'\nassert solution(\"4\\n2 3 3 3\") == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"6\\n5 6 4 5 7 3 1\") == \"5 4 6 7 1 3 2\"\nassert solution(\"2\\n1 2\") == \"1 2\"\nassert solution(\"4\\n2 2 3 4\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 3 3 1''') == '2 3 4 1'\nassert solution('''5\n1 2 2 3 2''') == '1 4 5 2 3'\nassert solution('''7\n2 2 3 1 3 3 1''') == '2 5 6 3 4 7 1'\nassert solution('''6\n5 5 2 3 4 1''') == '5 4 6 2 3 1'\nassert solution('''2\n1 1''') == 'impossible'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\n\"\"\"\n\nimport random\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nimport sys\nimport random\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"3\\n2 2 1\") == \"impossible\"\nassert solution(\"4\\n3 2 1\") == \"3 2 4 1\"\nassert solution(\"4\\n1 1 1 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == 4\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nhull\\nleft_oar\\nhull\\nright_oar\") == \"1\"\nassert solution(\"3 5\\nleft_oar\\nhull\\nleft_oar\\nhull\\nhull\") == \"5\"\nassert solution(\"3 5\\nleft_oar\\nhull\\nleft_oar\\nhull\\nhull\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"1\"\n\nSample Input:\n4 5\nleft_oar\nright_oar\nleft_oar\nhull\nSample Output:\n3\n\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nhull\\nright_oar\") == \"3\"\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nprint('Test pass.')\n\n-------------------------"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\nassert solution(\"3 3\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 2\nassert solution(\"1 1\\nleft_oar\") == 1\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == 4\n\n-----\n\"\"\"\nimport sys\n\nP, N = map(int, sys.stdin.readline().split())\n\nparts = set()\nfor line in sys.stdin:\n    parts.add(line.strip())\n\ndays = N % P\nfor i in range(days):\n    last = list(parts)[-1]\n    parts.remove(last)\n    if last[-1] == '_':\n        parts.add(last[:-1])\n    else:\n        parts.add(last + '_')\n\nprint(days if last[-1] == '_' else N)\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == '4'\nprint('OK')\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\nimport re"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\\\n5 7\\\\n7 5\") == \"7 7\"\nassert solution(\"4 4\\\\n3 6\\\\n3 3\") == \"3 4\"\nassert solution(\"8 8\\\\n4 9\\\\n6 7\") == \"6 7\"\nassert solution(\"1 1\\\\n2 2\\\\n3 3\") == \"3 2\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n3 8\\n1 2\\n1 4\") == \"5 5\"\nassert solution(\"1 1\\n1 2\\n2 2\\n2 3\") == \"1 4\"\nassert solution(\"1 1\\n1 2\\n2 2\\n3 3\") == \"1 1\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n3 4\\n4 2') == '3 3'\nassert solution('5 8\\n3 7\\n4 1') == '4 4'\nassert solution('9 5\\n3 8\\n6 9') == '6 9'\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nc, d = map(int, stdin.readline().split())\ne, f = map(int, stdin.readline().split())"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7\\n5 7 5\") == \"7 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n4 5\\n7 8\") == \"7 7\"\nassert solution(\"1 4\\n4 7\\n7 8\") == \"7 7\"\nassert solution(\"1 8\\n1 3\\n1 1\") == \"1 1\"\nassert solution(\"1 2\\n4 5\\n7 8\\n1 2\") == \"1 1\"\nassert solution(\"1 2\\n4 5\\n7 8\\n7 9\\n8 4\") == \"8 4\"\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('1 1\\n2 2\\n3 3') == '1 1'"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0 0 0 0') == '0 0 0 0'\nassert solution('1 1 1 1') == '1 1 1 1'\nassert solution('1 2 1 2') == '2 2 2 1'\nassert solution('1 2 1 1') == '1 2 1 1'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'3\\n1 61\\n3\\n2 94\\n3\\n0 0\\n'\n) =='measurement error'\nassert solution(\n'2\\n1 60\\n1 60\\n'\n) == '1.016666667'\nassert solution(\n'6\\n0 0\\n1 1\\n0 0\\n0 1\\n1 1\\n1 1\\n'\n) == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') =='measurement error'"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n1\n61\n''') == '1.016666667'\n\nassert solution('''\n2\n300 900\n''') =='measurement error'\n\nassert solution('''\n3\n500 1400\n120 1200\n100 800\n''') == '1.04'\n\nassert solution('''\n3\n125 575\n110 1100\n24 400\n''') == '0.366666666666666'\n\nassert solution('''\n4\n720 1200\n108 240\n110 400\n340 1200\n''') == '0.4'"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\nassert solution(\"2 2\\n\") == \"measurement error\"\nassert solution(\"3 62\\n\") == \"1.0416666667\"\n\nimport sys\ninput = sys.stdin.readline\n\nN = int(input())\nS = []\nfor i in range(N):\n    n, t = map(int, input().split())\n    S.append([n, t])"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"measurement error\"\nassert solution(\"1 61\") == \"1.016666667\"\nassert solution(\"1 61\\n2 3600\") == \"1.016666667\"\nassert solution(\"1 61\\n2 3600\\n3 3600\") == \"2.016666667\"\nassert solution(\"1 61\\n2 3600\\n3 3600\\n4 3600\") == \"2.016666667\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 61\") == \"1.016666667\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\n\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\nprint(solution(stdin))\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\nassert solution('1\\n2 36') =='measurement error'\nassert solution('1\\n2 61') == '1.016666667'\nassert solution('1\\n2 2') =='measurement error'\nassert solution('1\\n1 36') == '1.016666667'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CRYMPY') == 'CRYMPY'\nassert solution('CDMHG') == 'CDMHG'\nassert solution('TET') == 'TET'\nassert solution('AEH') == 'AEH'\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CRYAGLAC\") == \"CALGARY\"\nassert solution(\"CRYAGLACC\") == \"CALGARY\"\nassert solution(\"CRYAGLACCS\") == \"CALGARY\"\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CXQYQY') == 'CALGARY'\nassert solution('CAMERAM') == 'CALGARY'\nassert solution('CAZEGY') == 'CALGARY'\nassert solution('CAMOAY') == 'CALGARY'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('CPMCRYY', 'ALBERTA') == 'CALGARY'\nassert solution('CRYGEM', 'CALGARY') == 'CRYGEM'\n\n'''"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\n\"\"\"\n\nimport string\nimport sys\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(CPMCRYY) == CALGARY\n'''\n\nencrypted = input()\nkey = input()"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CALGARY') == 'CALGARY'\nassert solution('VIGENERE') == 'VIGENERE'\nassert solution('CPOISNPAO') == 'TOCOPAN'\nassert solution('ABPPPPPPP') == 'ABPPPPPPP'\nassert solution('ABCDDBBBA') == 'ABCDDBBB'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"ALBERTA\"\n\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\n\n-----Notes-----\nAs usual, the first line contains the encrypted message and the second line contains the key.\n\n\"\"\"\n\nimport unittest\nfrom string import ascii_uppercase\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AB') == '3'\nassert solution('AC') == '2'\nassert solution('BA') == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABB\") == \"1\"\nassert solution(\"ABA\") == \"3\"\n\nprint(solution(\"ABB\"))\n\n-----\nABA\n1\n3\n2\n1\n\n'''\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABB\") == \"1\"\nassert solution(\"ABBB\") == \"2\"\nassert solution(\"BBBB\") == \"1\"\nassert solution(\"ABCABC\") == \"3\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"AB\"\n) == \"3\"\n\nassert solution(\n    \"AC\"\n) == \"2\"\n\nassert solution(\n    \"BC\"\n) == \"1\"\n\nassert solution(\n    \"BCA\"\n) == \"1\"\n\nassert solution(\n    \"ABC\"\n) == \"1\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"2\"\nassert solution(\"BA\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == 3\nassert solution(\"BCA\") == 2\nassert solution(\"CAB\") == 1\nassert solution(\"CBA\") == 1\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"AABBCC\") == \"3\"\nassert solution(\"ABABCC\") == \"1\"\nassert solution(\"ABBBCC\") == \"1\"\nassert solution(\"ABBBCAA\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"2\"\nassert solution(\"ABBC\") == \"1\"\nassert solution(\"ABCAB\") == \"3\"\nassert solution(\"BCAC\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == '3'\nassert solution('ABCABC') == '1'\nassert solution('ABCCBA') == '1'\nassert solution('ABCCAB') == '2'\nassert solution('ABCCAC') == '2'\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABCA\") == \"3\"\nassert solution(\"BCAB\") == \"2\"\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '3', \"Solution does not work with the input\"\nassert solution('5 1 1 3') == '0', \"Solution does not work with the input\"\nassert solution('1 1 1 1') == '1', \"Solution does not work with the input\"\n\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '3'\nassert solution('3 4 5 6') == '6'\nassert solution('1 1 1 1') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '100'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 4 3') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('2 1 3 4') == '1'"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == 3\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 6\") == \"2\"\nassert solution(\"1 2 3 7\") == \"4\"\nassert solution(\"1 2 6 7\") == \"4\"\nassert solution(\"1 2 6 10\") == \"4\"\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 3 4''') == '3'\nassert solution('''1 2 1 1''') == '0'\nassert solution('''1 2 3 4''') == '3'\nassert solution('''1 1 1 1''') == '0'\nassert solution('''3 4 2 3''') == '4'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"3 4 1 2\") == \"4\"\nassert solution(\"4 1 2 3\") == \"4\"\nassert solution(\"4 3 2 1\") == \"4\"\nassert solution(\"3 4 1 2\") == \"4\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(103) +'' + str(27)) == '4'\n\n--------Dockerfile--------\nFROM python:3.9-slim\nCOPY solution.py.\nRUN python3 solution.py\n\n--------README.md--------\n* **Problem**\n    * Write 5 lines of code to test the correctness of solution:\n        * You are given two integers, $a$ and $b$. You want to transform $a$ to $b$ by performing a sequence of operations. You can only perform the following operations:\n        * - Divide $a$ by two (only if $a$ is even)\n        * - Add one to $a$\n\n* **Solution in Python**\n    * def solution(stdin: str) -> str:\n        * pass\n\n* **Testing**\n    * Run tests on your solution:\n        * pytest\n* **Resources**\n    *\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == 4\n\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"103 27\") == \"4\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"15 16\") == \"0\"\nassert solution(\"15 17\") == \"1\"\nassert solution(\"1 3\") == \"2\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103 27') == 4\n'''"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103 27\") == \"4\"\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103 27') == '4'\nassert solution('10 9') == '0'\nassert solution('100 99') == '2'\nassert solution('1 1') == '0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '0'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n3') == '3'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == 4\n'''\n\nimport math"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"103 27\") == \"4\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798999a0) == 20\n\"\"\"\n\n\"\"\"\n"
    }
]